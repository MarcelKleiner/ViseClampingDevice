
Spanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aab8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800ac44  0800ac44  0001ac44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800accc  0800accc  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800accc  0800accc  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800accc  0800accc  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800accc  0800accc  0001accc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acd0  0800acd0  0001acd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800acd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001420  20000190  0800ae64  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015b0  0800ae64  000215b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc0d  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004272  00000000  00000000  0003cdcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001968  00000000  00000000  00041040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001760  00000000  00000000  000429a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000886f  00000000  00000000  00044108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f328  00000000  00000000  0004c977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c004c  00000000  00000000  0006bc9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012bceb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069ac  00000000  00000000  0012bd3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000190 	.word	0x20000190
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800ac2c 	.word	0x0800ac2c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000194 	.word	0x20000194
 80001c8:	0800ac2c 	.word	0x0800ac2c

080001cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b08a      	sub	sp, #40	; 0x28
 80001d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80001d2:	f107 031c 	add.w	r3, r7, #28
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	2200      	movs	r2, #0
 80001e2:	601a      	str	r2, [r3, #0]
 80001e4:	605a      	str	r2, [r3, #4]
 80001e6:	609a      	str	r2, [r3, #8]
 80001e8:	60da      	str	r2, [r3, #12]
 80001ea:	611a      	str	r2, [r3, #16]
 80001ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001ee:	4b30      	ldr	r3, [pc, #192]	; (80002b0 <MX_ADC1_Init+0xe4>)
 80001f0:	4a30      	ldr	r2, [pc, #192]	; (80002b4 <MX_ADC1_Init+0xe8>)
 80001f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001f4:	4b2e      	ldr	r3, [pc, #184]	; (80002b0 <MX_ADC1_Init+0xe4>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001fa:	4b2d      	ldr	r3, [pc, #180]	; (80002b0 <MX_ADC1_Init+0xe4>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000200:	4b2b      	ldr	r3, [pc, #172]	; (80002b0 <MX_ADC1_Init+0xe4>)
 8000202:	2200      	movs	r2, #0
 8000204:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000206:	4b2a      	ldr	r3, [pc, #168]	; (80002b0 <MX_ADC1_Init+0xe4>)
 8000208:	2200      	movs	r2, #0
 800020a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800020c:	4b28      	ldr	r3, [pc, #160]	; (80002b0 <MX_ADC1_Init+0xe4>)
 800020e:	2204      	movs	r2, #4
 8000210:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000212:	4b27      	ldr	r3, [pc, #156]	; (80002b0 <MX_ADC1_Init+0xe4>)
 8000214:	2200      	movs	r2, #0
 8000216:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000218:	4b25      	ldr	r3, [pc, #148]	; (80002b0 <MX_ADC1_Init+0xe4>)
 800021a:	2200      	movs	r2, #0
 800021c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800021e:	4b24      	ldr	r3, [pc, #144]	; (80002b0 <MX_ADC1_Init+0xe4>)
 8000220:	2201      	movs	r2, #1
 8000222:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000224:	4b22      	ldr	r3, [pc, #136]	; (80002b0 <MX_ADC1_Init+0xe4>)
 8000226:	2200      	movs	r2, #0
 8000228:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800022c:	4b20      	ldr	r3, [pc, #128]	; (80002b0 <MX_ADC1_Init+0xe4>)
 800022e:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 8000232:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000234:	4b1e      	ldr	r3, [pc, #120]	; (80002b0 <MX_ADC1_Init+0xe4>)
 8000236:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800023a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800023c:	4b1c      	ldr	r3, [pc, #112]	; (80002b0 <MX_ADC1_Init+0xe4>)
 800023e:	2200      	movs	r2, #0
 8000240:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000244:	4b1a      	ldr	r3, [pc, #104]	; (80002b0 <MX_ADC1_Init+0xe4>)
 8000246:	2200      	movs	r2, #0
 8000248:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800024a:	4b19      	ldr	r3, [pc, #100]	; (80002b0 <MX_ADC1_Init+0xe4>)
 800024c:	2200      	movs	r2, #0
 800024e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000252:	4817      	ldr	r0, [pc, #92]	; (80002b0 <MX_ADC1_Init+0xe4>)
 8000254:	f000 ff90 	bl	8001178 <HAL_ADC_Init>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800025e:	f000 f9d5 	bl	800060c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000262:	2300      	movs	r3, #0
 8000264:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000266:	f107 031c 	add.w	r3, r7, #28
 800026a:	4619      	mov	r1, r3
 800026c:	4810      	ldr	r0, [pc, #64]	; (80002b0 <MX_ADC1_Init+0xe4>)
 800026e:	f001 fcf5 	bl	8001c5c <HAL_ADCEx_MultiModeConfigChannel>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000278:	f000 f9c8 	bl	800060c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800027c:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <MX_ADC1_Init+0xec>)
 800027e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000280:	2306      	movs	r3, #6
 8000282:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000288:	237f      	movs	r3, #127	; 0x7f
 800028a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800028c:	2304      	movs	r3, #4
 800028e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	4619      	mov	r1, r3
 8000298:	4805      	ldr	r0, [pc, #20]	; (80002b0 <MX_ADC1_Init+0xe4>)
 800029a:	f001 f8bd 	bl	8001418 <HAL_ADC_ConfigChannel>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80002a4:	f000 f9b2 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002a8:	bf00      	nop
 80002aa:	3728      	adds	r7, #40	; 0x28
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	200001ac 	.word	0x200001ac
 80002b4:	50040000 	.word	0x50040000
 80002b8:	19200040 	.word	0x19200040

080002bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b08a      	sub	sp, #40	; 0x28
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c4:	f107 0314 	add.w	r3, r7, #20
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
 80002ce:	609a      	str	r2, [r3, #8]
 80002d0:	60da      	str	r2, [r3, #12]
 80002d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a2b      	ldr	r2, [pc, #172]	; (8000388 <HAL_ADC_MspInit+0xcc>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d14f      	bne.n	800037e <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80002de:	4b2b      	ldr	r3, [pc, #172]	; (800038c <HAL_ADC_MspInit+0xd0>)
 80002e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e2:	4a2a      	ldr	r2, [pc, #168]	; (800038c <HAL_ADC_MspInit+0xd0>)
 80002e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ea:	4b28      	ldr	r3, [pc, #160]	; (800038c <HAL_ADC_MspInit+0xd0>)
 80002ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002f2:	613b      	str	r3, [r7, #16]
 80002f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f6:	4b25      	ldr	r3, [pc, #148]	; (800038c <HAL_ADC_MspInit+0xd0>)
 80002f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fa:	4a24      	ldr	r2, [pc, #144]	; (800038c <HAL_ADC_MspInit+0xd0>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000302:	4b22      	ldr	r3, [pc, #136]	; (800038c <HAL_ADC_MspInit+0xd0>)
 8000304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = VOLTAGE_MEASUREMENT_Pin|CURRENT_MEASUREMENT_Pin;
 800030e:	2306      	movs	r3, #6
 8000310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000312:	230b      	movs	r3, #11
 8000314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000316:	2300      	movs	r3, #0
 8000318:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800031a:	f107 0314 	add.w	r3, r7, #20
 800031e:	4619      	mov	r1, r3
 8000320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000324:	f001 ffb8 	bl	8002298 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000328:	4b19      	ldr	r3, [pc, #100]	; (8000390 <HAL_ADC_MspInit+0xd4>)
 800032a:	4a1a      	ldr	r2, [pc, #104]	; (8000394 <HAL_ADC_MspInit+0xd8>)
 800032c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800032e:	4b18      	ldr	r3, [pc, #96]	; (8000390 <HAL_ADC_MspInit+0xd4>)
 8000330:	2200      	movs	r2, #0
 8000332:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000334:	4b16      	ldr	r3, [pc, #88]	; (8000390 <HAL_ADC_MspInit+0xd4>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800033a:	4b15      	ldr	r3, [pc, #84]	; (8000390 <HAL_ADC_MspInit+0xd4>)
 800033c:	2200      	movs	r2, #0
 800033e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000340:	4b13      	ldr	r3, [pc, #76]	; (8000390 <HAL_ADC_MspInit+0xd4>)
 8000342:	2280      	movs	r2, #128	; 0x80
 8000344:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000346:	4b12      	ldr	r3, [pc, #72]	; (8000390 <HAL_ADC_MspInit+0xd4>)
 8000348:	f44f 7280 	mov.w	r2, #256	; 0x100
 800034c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800034e:	4b10      	ldr	r3, [pc, #64]	; (8000390 <HAL_ADC_MspInit+0xd4>)
 8000350:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000354:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000356:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <HAL_ADC_MspInit+0xd4>)
 8000358:	2200      	movs	r2, #0
 800035a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800035c:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <HAL_ADC_MspInit+0xd4>)
 800035e:	2200      	movs	r2, #0
 8000360:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000362:	480b      	ldr	r0, [pc, #44]	; (8000390 <HAL_ADC_MspInit+0xd4>)
 8000364:	f001 fe30 	bl	8001fc8 <HAL_DMA_Init>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800036e:	f000 f94d 	bl	800060c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4a06      	ldr	r2, [pc, #24]	; (8000390 <HAL_ADC_MspInit+0xd4>)
 8000376:	64da      	str	r2, [r3, #76]	; 0x4c
 8000378:	4a05      	ldr	r2, [pc, #20]	; (8000390 <HAL_ADC_MspInit+0xd4>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800037e:	bf00      	nop
 8000380:	3728      	adds	r7, #40	; 0x28
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	50040000 	.word	0x50040000
 800038c:	40021000 	.word	0x40021000
 8000390:	20000210 	.word	0x20000210
 8000394:	40020008 	.word	0x40020008

08000398 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <MX_DMA_Init+0x38>)
 80003a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003a2:	4a0b      	ldr	r2, [pc, #44]	; (80003d0 <MX_DMA_Init+0x38>)
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	6493      	str	r3, [r2, #72]	; 0x48
 80003aa:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <MX_DMA_Init+0x38>)
 80003ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2100      	movs	r1, #0
 80003ba:	200b      	movs	r0, #11
 80003bc:	f001 fdcd 	bl	8001f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003c0:	200b      	movs	r0, #11
 80003c2:	f001 fde6 	bl	8001f92 <HAL_NVIC_EnableIRQ>

}
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40021000 	.word	0x40021000

080003d4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08a      	sub	sp, #40	; 0x28
 80003d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003da:	f107 0314 	add.w	r3, r7, #20
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
 80003e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ea:	4b4d      	ldr	r3, [pc, #308]	; (8000520 <MX_GPIO_Init+0x14c>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	4a4c      	ldr	r2, [pc, #304]	; (8000520 <MX_GPIO_Init+0x14c>)
 80003f0:	f043 0304 	orr.w	r3, r3, #4
 80003f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f6:	4b4a      	ldr	r3, [pc, #296]	; (8000520 <MX_GPIO_Init+0x14c>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	f003 0304 	and.w	r3, r3, #4
 80003fe:	613b      	str	r3, [r7, #16]
 8000400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000402:	4b47      	ldr	r3, [pc, #284]	; (8000520 <MX_GPIO_Init+0x14c>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000406:	4a46      	ldr	r2, [pc, #280]	; (8000520 <MX_GPIO_Init+0x14c>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040e:	4b44      	ldr	r3, [pc, #272]	; (8000520 <MX_GPIO_Init+0x14c>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800041a:	4b41      	ldr	r3, [pc, #260]	; (8000520 <MX_GPIO_Init+0x14c>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041e:	4a40      	ldr	r2, [pc, #256]	; (8000520 <MX_GPIO_Init+0x14c>)
 8000420:	f043 0302 	orr.w	r3, r3, #2
 8000424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000426:	4b3e      	ldr	r3, [pc, #248]	; (8000520 <MX_GPIO_Init+0x14c>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042a:	f003 0302 	and.w	r3, r3, #2
 800042e:	60bb      	str	r3, [r7, #8]
 8000430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000432:	4b3b      	ldr	r3, [pc, #236]	; (8000520 <MX_GPIO_Init+0x14c>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000436:	4a3a      	ldr	r2, [pc, #232]	; (8000520 <MX_GPIO_Init+0x14c>)
 8000438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800043c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800043e:	4b38      	ldr	r3, [pc, #224]	; (8000520 <MX_GPIO_Init+0x14c>)
 8000440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, POWER_SWITCH_Pin|RFM_RST_Pin|RFM_NSS_Pin, GPIO_PIN_RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	2119      	movs	r1, #25
 800044e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000452:	f002 f893 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_EXT_Pin|LED_Pin, GPIO_PIN_RESET);
 8000456:	2200      	movs	r2, #0
 8000458:	2190      	movs	r1, #144	; 0x90
 800045a:	4832      	ldr	r0, [pc, #200]	; (8000524 <MX_GPIO_Init+0x150>)
 800045c:	f002 f88e 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RFM_DI0_Pin|RFM_DI3_Pin;
 8000460:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000466:	2300      	movs	r3, #0
 8000468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	2300      	movs	r3, #0
 800046c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800046e:	f107 0314 	add.w	r3, r7, #20
 8000472:	4619      	mov	r1, r3
 8000474:	482c      	ldr	r0, [pc, #176]	; (8000528 <MX_GPIO_Init+0x154>)
 8000476:	f001 ff0f 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = POWER_SWITCH_Pin|RFM_RST_Pin|RFM_NSS_Pin;
 800047a:	2319      	movs	r3, #25
 800047c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047e:	2301      	movs	r3, #1
 8000480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000486:	2300      	movs	r3, #0
 8000488:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048a:	f107 0314 	add.w	r3, r7, #20
 800048e:	4619      	mov	r1, r3
 8000490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000494:	f001 ff00 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RFM_DI2_Pin|VUSB_Pin|SW_EXT_Pin;
 8000498:	2329      	movs	r3, #41	; 0x29
 800049a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800049c:	2300      	movs	r3, #0
 800049e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a4:	f107 0314 	add.w	r3, r7, #20
 80004a8:	4619      	mov	r1, r3
 80004aa:	481e      	ldr	r0, [pc, #120]	; (8000524 <MX_GPIO_Init+0x150>)
 80004ac:	f001 fef4 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004b6:	2303      	movs	r3, #3
 80004b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004be:	f107 0314 	add.w	r3, r7, #20
 80004c2:	4619      	mov	r1, r3
 80004c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c8:	f001 fee6 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_EXT_Pin|LED_Pin;
 80004cc:	2390      	movs	r3, #144	; 0x90
 80004ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d0:	2301      	movs	r3, #1
 80004d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d8:	2300      	movs	r3, #0
 80004da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004dc:	f107 0314 	add.w	r3, r7, #20
 80004e0:	4619      	mov	r1, r3
 80004e2:	4810      	ldr	r0, [pc, #64]	; (8000524 <MX_GPIO_Init+0x150>)
 80004e4:	f001 fed8 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004e8:	2340      	movs	r3, #64	; 0x40
 80004ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ec:	2303      	movs	r3, #3
 80004ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f4:	f107 0314 	add.w	r3, r7, #20
 80004f8:	4619      	mov	r1, r3
 80004fa:	480a      	ldr	r0, [pc, #40]	; (8000524 <MX_GPIO_Init+0x150>)
 80004fc:	f001 fecc 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000500:	2308      	movs	r3, #8
 8000502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000504:	2303      	movs	r3, #3
 8000506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	2300      	movs	r3, #0
 800050a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800050c:	f107 0314 	add.w	r3, r7, #20
 8000510:	4619      	mov	r1, r3
 8000512:	4806      	ldr	r0, [pc, #24]	; (800052c <MX_GPIO_Init+0x158>)
 8000514:	f001 fec0 	bl	8002298 <HAL_GPIO_Init>

}
 8000518:	bf00      	nop
 800051a:	3728      	adds	r7, #40	; 0x28
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40021000 	.word	0x40021000
 8000524:	48000400 	.word	0x48000400
 8000528:	48000800 	.word	0x48000800
 800052c:	48001c00 	.word	0x48001c00

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fc0b 	bl	8000d4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f813 	bl	8000562 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f7ff ff4a 	bl	80003d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000540:	f7ff ff2a 	bl	8000398 <MX_DMA_Init>
  MX_ADC1_Init();
 8000544:	f7ff fe42 	bl	80001cc <MX_ADC1_Init>
  MX_SPI1_Init();
 8000548:	f000 f866 	bl	8000618 <MX_SPI1_Init>
  MX_TIM1_Init();
 800054c:	f000 f970 	bl	8000830 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000550:	f000 fa22 	bl	8000998 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000554:	f009 fd90 	bl	800a078 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8000558:	f000 fa78 	bl	8000a4c <MX_TIM6_Init>
  MX_TIM16_Init();
 800055c:	f000 faac 	bl	8000ab8 <MX_TIM16_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000560:	e7fe      	b.n	8000560 <main+0x30>

08000562 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	b096      	sub	sp, #88	; 0x58
 8000566:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000568:	f107 0314 	add.w	r3, r7, #20
 800056c:	2244      	movs	r2, #68	; 0x44
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f00a fb53 	bl	800ac1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000584:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000588:	f003 fdaa 	bl	80040e0 <HAL_PWREx_ControlVoltageScaling>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000592:	f000 f83b 	bl	800060c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000596:	2312      	movs	r3, #18
 8000598:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a0:	2340      	movs	r3, #64	; 0x40
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80005ac:	23b0      	movs	r3, #176	; 0xb0
 80005ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	2302      	movs	r3, #2
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 12;
 80005bc:	230c      	movs	r3, #12
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 fded 	bl	80041ac <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80005d8:	f000 f818 	bl	800060c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2303      	movs	r3, #3
 80005e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f0:	463b      	mov	r3, r7
 80005f2:	2102      	movs	r1, #2
 80005f4:	4618      	mov	r0, r3
 80005f6:	f004 fa3b 	bl	8004a70 <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000600:	f000 f804 	bl	800060c <Error_Handler>
  }
}
 8000604:	bf00      	nop
 8000606:	3758      	adds	r7, #88	; 0x58
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000610:	b672      	cpsid	i
}
 8000612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000614:	e7fe      	b.n	8000614 <Error_Handler+0x8>
	...

08000618 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <MX_SPI1_Init+0x74>)
 800061e:	4a1c      	ldr	r2, [pc, #112]	; (8000690 <MX_SPI1_Init+0x78>)
 8000620:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <MX_SPI1_Init+0x74>)
 8000624:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000628:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <MX_SPI1_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <MX_SPI1_Init+0x74>)
 8000632:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000636:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_SPI1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <MX_SPI1_Init+0x74>)
 8000640:	2200      	movs	r2, #0
 8000642:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_SPI1_Init+0x74>)
 8000646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800064a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_SPI1_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_SPI1_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_SPI1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <MX_SPI1_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_SPI1_Init+0x74>)
 8000666:	2207      	movs	r2, #7
 8000668:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <MX_SPI1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_SPI1_Init+0x74>)
 8000672:	2208      	movs	r2, #8
 8000674:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_SPI1_Init+0x74>)
 8000678:	f004 fd6c 	bl	8005154 <HAL_SPI_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000682:	f7ff ffc3 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000258 	.word	0x20000258
 8000690:	40013000 	.word	0x40013000

08000694 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a17      	ldr	r2, [pc, #92]	; (8000710 <HAL_SPI_MspInit+0x7c>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d128      	bne.n	8000708 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <HAL_SPI_MspInit+0x80>)
 80006b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ba:	4a16      	ldr	r2, [pc, #88]	; (8000714 <HAL_SPI_MspInit+0x80>)
 80006bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006c0:	6613      	str	r3, [r2, #96]	; 0x60
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <HAL_SPI_MspInit+0x80>)
 80006c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <HAL_SPI_MspInit+0x80>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	4a10      	ldr	r2, [pc, #64]	; (8000714 <HAL_SPI_MspInit+0x80>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <HAL_SPI_MspInit+0x80>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80006e6:	23e0      	movs	r3, #224	; 0xe0
 80006e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f2:	2303      	movs	r3, #3
 80006f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006f6:	2305      	movs	r3, #5
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	4619      	mov	r1, r3
 8000700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000704:	f001 fdc8 	bl	8002298 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000708:	bf00      	nop
 800070a:	3728      	adds	r7, #40	; 0x28
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40013000 	.word	0x40013000
 8000714:	40021000 	.word	0x40021000

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <HAL_MspInit+0x44>)
 8000720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000722:	4a0e      	ldr	r2, [pc, #56]	; (800075c <HAL_MspInit+0x44>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6613      	str	r3, [r2, #96]	; 0x60
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <HAL_MspInit+0x44>)
 800072c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <HAL_MspInit+0x44>)
 8000738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <HAL_MspInit+0x44>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	6593      	str	r3, [r2, #88]	; 0x58
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_MspInit+0x44>)
 8000744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40021000 	.word	0x40021000

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <NMI_Handler+0x4>

08000766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <MemManage_Handler+0x4>

08000772 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <BusFault_Handler+0x4>

08000778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <UsageFault_Handler+0x4>

0800077e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ac:	f000 fb24 	bl	8000df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80007b8:	4802      	ldr	r0, [pc, #8]	; (80007c4 <DMA1_Channel1_IRQHandler+0x10>)
 80007ba:	f001 fcbd 	bl	8002138 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000210 	.word	0x20000210

080007c8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007cc:	4803      	ldr	r0, [pc, #12]	; (80007dc <TIM1_UP_TIM16_IRQHandler+0x14>)
 80007ce:	f004 fec2 	bl	8005556 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80007d2:	4803      	ldr	r0, [pc, #12]	; (80007e0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80007d4:	f004 febf 	bl	8005556 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200002bc 	.word	0x200002bc
 80007e0:	200003a0 	.word	0x200003a0

080007e4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007e8:	4802      	ldr	r0, [pc, #8]	; (80007f4 <TIM6_IRQHandler+0x10>)
 80007ea:	f004 feb4 	bl	8005556 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000354 	.word	0x20000354

080007f8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007fc:	4802      	ldr	r0, [pc, #8]	; (8000808 <USB_IRQHandler+0x10>)
 80007fe:	f002 f80e 	bl	800281e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20001094 	.word	0x20001094

0800080c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <SystemInit+0x20>)
 8000812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000816:	4a05      	ldr	r2, [pc, #20]	; (800082c <SystemInit+0x20>)
 8000818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800081c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b09e      	sub	sp, #120	; 0x78
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000836:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800083a:	2224      	movs	r2, #36	; 0x24
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f00a f9ec 	bl	800ac1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000844:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000850:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
 8000860:	615a      	str	r2, [r3, #20]
 8000862:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000864:	463b      	mov	r3, r7
 8000866:	222c      	movs	r2, #44	; 0x2c
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f00a f9d6 	bl	800ac1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000870:	4b47      	ldr	r3, [pc, #284]	; (8000990 <MX_TIM1_Init+0x160>)
 8000872:	4a48      	ldr	r2, [pc, #288]	; (8000994 <MX_TIM1_Init+0x164>)
 8000874:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8000876:	4b46      	ldr	r3, [pc, #280]	; (8000990 <MX_TIM1_Init+0x160>)
 8000878:	2214      	movs	r2, #20
 800087a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087c:	4b44      	ldr	r3, [pc, #272]	; (8000990 <MX_TIM1_Init+0x160>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 48000;
 8000882:	4b43      	ldr	r3, [pc, #268]	; (8000990 <MX_TIM1_Init+0x160>)
 8000884:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000888:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088a:	4b41      	ldr	r3, [pc, #260]	; (8000990 <MX_TIM1_Init+0x160>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000890:	4b3f      	ldr	r3, [pc, #252]	; (8000990 <MX_TIM1_Init+0x160>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000896:	4b3e      	ldr	r3, [pc, #248]	; (8000990 <MX_TIM1_Init+0x160>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800089c:	483c      	ldr	r0, [pc, #240]	; (8000990 <MX_TIM1_Init+0x160>)
 800089e:	f004 fd53 	bl	8005348 <HAL_TIM_PWM_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80008a8:	f7ff feb0 	bl	800060c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008ac:	2301      	movs	r3, #1
 80008ae:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008b0:	2300      	movs	r3, #0
 80008b2:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008b4:	2301      	movs	r3, #1
 80008b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC1Filter = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	667b      	str	r3, [r7, #100]	; 0x64
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008c0:	2300      	movs	r3, #0
 80008c2:	66bb      	str	r3, [r7, #104]	; 0x68
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008c4:	2301      	movs	r3, #1
 80008c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	673b      	str	r3, [r7, #112]	; 0x70
  sConfig.IC2Filter = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80008d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008d4:	4619      	mov	r1, r3
 80008d6:	482e      	ldr	r0, [pc, #184]	; (8000990 <MX_TIM1_Init+0x160>)
 80008d8:	f004 fd8d 	bl	80053f6 <HAL_TIM_Encoder_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80008e2:	f7ff fe93 	bl	800060c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e6:	2300      	movs	r3, #0
 80008e8:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008ea:	2300      	movs	r3, #0
 80008ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008f6:	4619      	mov	r1, r3
 80008f8:	4825      	ldr	r0, [pc, #148]	; (8000990 <MX_TIM1_Init+0x160>)
 80008fa:	f005 fb73 	bl	8005fe4 <HAL_TIMEx_MasterConfigSynchronization>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000904:	f7ff fe82 	bl	800060c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000908:	2360      	movs	r3, #96	; 0x60
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000910:	2300      	movs	r3, #0
 8000912:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000914:	2300      	movs	r3, #0
 8000916:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800091c:	2300      	movs	r3, #0
 800091e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000924:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000928:	2208      	movs	r2, #8
 800092a:	4619      	mov	r1, r3
 800092c:	4818      	ldr	r0, [pc, #96]	; (8000990 <MX_TIM1_Init+0x160>)
 800092e:	f004 ff31 	bl	8005794 <HAL_TIM_PWM_ConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000938:	f7ff fe68 	bl	800060c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800094c:	2300      	movs	r3, #0
 800094e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000954:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800095e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000962:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	4619      	mov	r1, r3
 8000970:	4807      	ldr	r0, [pc, #28]	; (8000990 <MX_TIM1_Init+0x160>)
 8000972:	f005 fb9d 	bl	80060b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 800097c:	f7ff fe46 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000980:	4803      	ldr	r0, [pc, #12]	; (8000990 <MX_TIM1_Init+0x160>)
 8000982:	f000 f95f 	bl	8000c44 <HAL_TIM_MspPostInit>

}
 8000986:	bf00      	nop
 8000988:	3778      	adds	r7, #120	; 0x78
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200002bc 	.word	0x200002bc
 8000994:	40012c00 	.word	0x40012c00

08000998 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009aa:	463b      	mov	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
 80009b8:	615a      	str	r2, [r3, #20]
 80009ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <MX_TIM2_Init+0xb0>)
 80009be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009c4:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <MX_TIM2_Init+0xb0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ca:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <MX_TIM2_Init+0xb0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009d0:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_TIM2_Init+0xb0>)
 80009d2:	f04f 32ff 	mov.w	r2, #4294967295
 80009d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_TIM2_Init+0xb0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_TIM2_Init+0xb0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009e4:	4818      	ldr	r0, [pc, #96]	; (8000a48 <MX_TIM2_Init+0xb0>)
 80009e6:	f004 fcaf 	bl	8005348 <HAL_TIM_PWM_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80009f0:	f7ff fe0c 	bl	800060c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4811      	ldr	r0, [pc, #68]	; (8000a48 <MX_TIM2_Init+0xb0>)
 8000a04:	f005 faee 	bl	8005fe4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000a0e:	f7ff fdfd 	bl	800060c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a12:	2360      	movs	r3, #96	; 0x60
 8000a14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a22:	463b      	mov	r3, r7
 8000a24:	2200      	movs	r2, #0
 8000a26:	4619      	mov	r1, r3
 8000a28:	4807      	ldr	r0, [pc, #28]	; (8000a48 <MX_TIM2_Init+0xb0>)
 8000a2a:	f004 feb3 	bl	8005794 <HAL_TIM_PWM_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000a34:	f7ff fdea 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a38:	4803      	ldr	r0, [pc, #12]	; (8000a48 <MX_TIM2_Init+0xb0>)
 8000a3a:	f000 f903 	bl	8000c44 <HAL_TIM_MspPostInit>

}
 8000a3e:	bf00      	nop
 8000a40:	3728      	adds	r7, #40	; 0x28
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000308 	.word	0x20000308

08000a4c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_TIM6_Init+0x64>)
 8000a5e:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <MX_TIM6_Init+0x68>)
 8000a60:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_TIM6_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_TIM6_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 23999;
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <MX_TIM6_Init+0x64>)
 8000a70:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8000a74:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_TIM6_Init+0x64>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <MX_TIM6_Init+0x64>)
 8000a7e:	f004 fc0c 	bl	800529a <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000a88:	f7ff fdc0 	bl	800060c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a8c:	2320      	movs	r3, #32
 8000a8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_TIM6_Init+0x64>)
 8000a9a:	f005 faa3 	bl	8005fe4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000aa4:	f7ff fdb2 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000354 	.word	0x20000354
 8000ab4:	40001000 	.word	0x40001000

08000ab8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_TIM16_Init+0x44>)
 8000abe:	4a10      	ldr	r2, [pc, #64]	; (8000b00 <MX_TIM16_Init+0x48>)
 8000ac0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_TIM16_Init+0x44>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_TIM16_Init+0x44>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 47999;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_TIM16_Init+0x44>)
 8000ad0:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000ad4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_TIM16_Init+0x44>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <MX_TIM16_Init+0x44>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_TIM16_Init+0x44>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ae8:	4804      	ldr	r0, [pc, #16]	; (8000afc <MX_TIM16_Init+0x44>)
 8000aea:	f004 fbd6 	bl	800529a <HAL_TIM_Base_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000af4:	f7ff fd8a 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200003a0 	.word	0x200003a0
 8000b00:	40014400 	.word	0x40014400

08000b04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a25      	ldr	r2, [pc, #148]	; (8000bb8 <HAL_TIM_PWM_MspInit+0xb4>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d132      	bne.n	8000b8c <HAL_TIM_PWM_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b26:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <HAL_TIM_PWM_MspInit+0xb8>)
 8000b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b2a:	4a24      	ldr	r2, [pc, #144]	; (8000bbc <HAL_TIM_PWM_MspInit+0xb8>)
 8000b2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b30:	6613      	str	r3, [r2, #96]	; 0x60
 8000b32:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <HAL_TIM_PWM_MspInit+0xb8>)
 8000b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <HAL_TIM_PWM_MspInit+0xb8>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	4a1e      	ldr	r2, [pc, #120]	; (8000bbc <HAL_TIM_PWM_MspInit+0xb8>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4a:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <HAL_TIM_PWM_MspInit+0xb8>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TTL_B_Pin|TTL_A_Pin;
 8000b56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b76:	f001 fb8f 	bl	8002298 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2019      	movs	r0, #25
 8000b80:	f001 f9eb 	bl	8001f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b84:	2019      	movs	r0, #25
 8000b86:	f001 fa04 	bl	8001f92 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b8a:	e010      	b.n	8000bae <HAL_TIM_PWM_MspInit+0xaa>
  else if(tim_pwmHandle->Instance==TIM2)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b94:	d10b      	bne.n	8000bae <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <HAL_TIM_PWM_MspInit+0xb8>)
 8000b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9a:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <HAL_TIM_PWM_MspInit+0xb8>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_TIM_PWM_MspInit+0xb8>)
 8000ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	; 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40012c00 	.word	0x40012c00
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a1a      	ldr	r2, [pc, #104]	; (8000c38 <HAL_TIM_Base_MspInit+0x78>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d114      	bne.n	8000bfc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <HAL_TIM_Base_MspInit+0x7c>)
 8000bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd6:	4a19      	ldr	r2, [pc, #100]	; (8000c3c <HAL_TIM_Base_MspInit+0x7c>)
 8000bd8:	f043 0310 	orr.w	r3, r3, #16
 8000bdc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <HAL_TIM_Base_MspInit+0x7c>)
 8000be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be2:	f003 0310 	and.w	r3, r3, #16
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	2036      	movs	r0, #54	; 0x36
 8000bf0:	f001 f9b3 	bl	8001f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000bf4:	2036      	movs	r0, #54	; 0x36
 8000bf6:	f001 f9cc 	bl	8001f92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000bfa:	e018      	b.n	8000c2e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM16)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <HAL_TIM_Base_MspInit+0x80>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d113      	bne.n	8000c2e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_TIM_Base_MspInit+0x7c>)
 8000c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0a:	4a0c      	ldr	r2, [pc, #48]	; (8000c3c <HAL_TIM_Base_MspInit+0x7c>)
 8000c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c10:	6613      	str	r3, [r2, #96]	; 0x60
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <HAL_TIM_Base_MspInit+0x7c>)
 8000c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	2019      	movs	r0, #25
 8000c24:	f001 f999 	bl	8001f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c28:	2019      	movs	r0, #25
 8000c2a:	f001 f9b2 	bl	8001f92 <HAL_NVIC_EnableIRQ>
}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40001000 	.word	0x40001000
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40014400 	.word	0x40014400

08000c44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a23      	ldr	r2, [pc, #140]	; (8000cf0 <HAL_TIM_MspPostInit+0xac>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d11c      	bne.n	8000ca0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <HAL_TIM_MspPostInit+0xb0>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	4a22      	ldr	r2, [pc, #136]	; (8000cf4 <HAL_TIM_MspPostInit+0xb0>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c72:	4b20      	ldr	r3, [pc, #128]	; (8000cf4 <HAL_TIM_MspPostInit+0xb0>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB1     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = PWM_2_Pin;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_2_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4817      	ldr	r0, [pc, #92]	; (8000cf8 <HAL_TIM_MspPostInit+0xb4>)
 8000c9a:	f001 fafd 	bl	8002298 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c9e:	e022      	b.n	8000ce6 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca8:	d11d      	bne.n	8000ce6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_TIM_MspPostInit+0xb0>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cae:	4a11      	ldr	r2, [pc, #68]	; (8000cf4 <HAL_TIM_MspPostInit+0xb0>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <HAL_TIM_MspPostInit+0xb0>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_1_Pin;
 8000cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_1_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce2:	f001 fad9 	bl	8002298 <HAL_GPIO_Init>
}
 8000ce6:	bf00      	nop
 8000ce8:	3728      	adds	r7, #40	; 0x28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40012c00 	.word	0x40012c00
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48000400 	.word	0x48000400

08000cfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d00:	f7ff fd84 	bl	800080c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d04:	480c      	ldr	r0, [pc, #48]	; (8000d38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d06:	490d      	ldr	r1, [pc, #52]	; (8000d3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d08:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <LoopForever+0xe>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d1c:	4c0a      	ldr	r4, [pc, #40]	; (8000d48 <LoopForever+0x16>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f009 ff53 	bl	800abd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d2e:	f7ff fbff 	bl	8000530 <main>

08000d32 <LoopForever>:

LoopForever:
    b LoopForever
 8000d32:	e7fe      	b.n	8000d32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d34:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8000d40:	0800acd4 	.word	0x0800acd4
  ldr r2, =_sbss
 8000d44:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000d48:	200015b0 	.word	0x200015b0

08000d4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC1_2_IRQHandler>

08000d4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f001 f8f3 	bl	8001f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d5e:	200f      	movs	r0, #15
 8000d60:	f000 f80e 	bl	8000d80 <HAL_InitTick>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d002      	beq.n	8000d70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	71fb      	strb	r3, [r7, #7]
 8000d6e:	e001      	b.n	8000d74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d70:	f7ff fcd2 	bl	8000718 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d74:	79fb      	ldrb	r3, [r7, #7]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d8c:	4b17      	ldr	r3, [pc, #92]	; (8000dec <HAL_InitTick+0x6c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d023      	beq.n	8000ddc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <HAL_InitTick+0x70>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <HAL_InitTick+0x6c>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 f8ff 	bl	8001fae <HAL_SYSTICK_Config>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d10f      	bne.n	8000dd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b0f      	cmp	r3, #15
 8000dba:	d809      	bhi.n	8000dd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	f001 f8c9 	bl	8001f5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <HAL_InitTick+0x74>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	e007      	b.n	8000de0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
 8000dd4:	e004      	b.n	8000de0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	73fb      	strb	r3, [r7, #15]
 8000dda:	e001      	b.n	8000de0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000004 	.word	0x20000004

08000df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x20>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x24>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <HAL_IncTick+0x24>)
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	200003ec 	.word	0x200003ec

08000e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return uwTick;
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <HAL_GetTick+0x14>)
 8000e26:	681b      	ldr	r3, [r3, #0]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	200003ec 	.word	0x200003ec

08000e38 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	609a      	str	r2, [r3, #8]
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	431a      	orrs	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	609a      	str	r2, [r3, #8]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3360      	adds	r3, #96	; 0x60
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <LL_ADC_SetOffset+0x44>)
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000eca:	683a      	ldr	r2, [r7, #0]
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ed8:	bf00      	nop
 8000eda:	371c      	adds	r7, #28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	03fff000 	.word	0x03fff000

08000ee8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3360      	adds	r3, #96	; 0x60
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b087      	sub	sp, #28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	3360      	adds	r3, #96	; 0x60
 8000f24:	461a      	mov	r2, r3
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f3e:	bf00      	nop
 8000f40:	371c      	adds	r7, #28
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	615a      	str	r2, [r3, #20]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	3330      	adds	r3, #48	; 0x30
 8000f80:	461a      	mov	r2, r3
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	f003 030c 	and.w	r3, r3, #12
 8000f8c:	4413      	add	r3, r2
 8000f8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	f003 031f 	and.w	r3, r3, #31
 8000f9a:	211f      	movs	r1, #31
 8000f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	0e9b      	lsrs	r3, r3, #26
 8000fa8:	f003 011f 	and.w	r1, r3, #31
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	f003 031f 	and.w	r3, r3, #31
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fbc:	bf00      	nop
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b087      	sub	sp, #28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	3314      	adds	r3, #20
 8000fd8:	461a      	mov	r2, r3
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	0e5b      	lsrs	r3, r3, #25
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	4413      	add	r3, r2
 8000fe6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	0d1b      	lsrs	r3, r3, #20
 8000ff0:	f003 031f 	and.w	r3, r3, #31
 8000ff4:	2107      	movs	r1, #7
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	401a      	ands	r2, r3
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	0d1b      	lsrs	r3, r3, #20
 8001002:	f003 031f 	and.w	r3, r3, #31
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	fa01 f303 	lsl.w	r3, r1, r3
 800100c:	431a      	orrs	r2, r3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001012:	bf00      	nop
 8001014:	371c      	adds	r7, #28
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001038:	43db      	mvns	r3, r3
 800103a:	401a      	ands	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0318 	and.w	r3, r3, #24
 8001042:	4908      	ldr	r1, [pc, #32]	; (8001064 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001044:	40d9      	lsrs	r1, r3
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	400b      	ands	r3, r1
 800104a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800104e:	431a      	orrs	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	0007ffff 	.word	0x0007ffff

08001068 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001078:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	6093      	str	r3, [r2, #8]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800109c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010a0:	d101      	bne.n	80010a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80010c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80010f0:	d101      	bne.n	80010f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b01      	cmp	r3, #1
 8001116:	d101      	bne.n	800111c <LL_ADC_IsEnabled+0x18>
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <LL_ADC_IsEnabled+0x1a>
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	2b04      	cmp	r3, #4
 800113c:	d101      	bne.n	8001142 <LL_ADC_REG_IsConversionOngoing+0x18>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	2b08      	cmp	r3, #8
 8001162:	d101      	bne.n	8001168 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001180:	2300      	movs	r3, #0
 8001182:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001184:	2300      	movs	r3, #0
 8001186:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e131      	b.n	80013f6 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800119c:	2b00      	cmp	r3, #0
 800119e:	d109      	bne.n	80011b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff f88b 	bl	80002bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff67 	bl	800108c <LL_ADC_IsDeepPowerDownEnabled>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d004      	beq.n	80011ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff4d 	bl	8001068 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff82 	bl	80010dc <LL_ADC_IsInternalRegulatorEnabled>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d115      	bne.n	800120a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff66 	bl	80010b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011e8:	4b85      	ldr	r3, [pc, #532]	; (8001400 <HAL_ADC_Init+0x288>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	099b      	lsrs	r3, r3, #6
 80011ee:	4a85      	ldr	r2, [pc, #532]	; (8001404 <HAL_ADC_Init+0x28c>)
 80011f0:	fba2 2303 	umull	r2, r3, r2, r3
 80011f4:	099b      	lsrs	r3, r3, #6
 80011f6:	3301      	adds	r3, #1
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011fc:	e002      	b.n	8001204 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	3b01      	subs	r3, #1
 8001202:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f9      	bne.n	80011fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff64 	bl	80010dc <LL_ADC_IsInternalRegulatorEnabled>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10d      	bne.n	8001236 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121e:	f043 0210 	orr.w	r2, r3, #16
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122a:	f043 0201 	orr.w	r2, r3, #1
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff75 	bl	800112a <LL_ADC_REG_IsConversionOngoing>
 8001240:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	2b00      	cmp	r3, #0
 800124c:	f040 80ca 	bne.w	80013e4 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f040 80c6 	bne.w	80013e4 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001260:	f043 0202 	orr.w	r2, r3, #2
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff49 	bl	8001104 <LL_ADC_IsEnabled>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d110      	bne.n	800129a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001278:	4863      	ldr	r0, [pc, #396]	; (8001408 <HAL_ADC_Init+0x290>)
 800127a:	f7ff ff43 	bl	8001104 <LL_ADC_IsEnabled>
 800127e:	4604      	mov	r4, r0
 8001280:	4862      	ldr	r0, [pc, #392]	; (800140c <HAL_ADC_Init+0x294>)
 8001282:	f7ff ff3f 	bl	8001104 <LL_ADC_IsEnabled>
 8001286:	4603      	mov	r3, r0
 8001288:	4323      	orrs	r3, r4
 800128a:	2b00      	cmp	r3, #0
 800128c:	d105      	bne.n	800129a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	4619      	mov	r1, r3
 8001294:	485e      	ldr	r0, [pc, #376]	; (8001410 <HAL_ADC_Init+0x298>)
 8001296:	f7ff fdcf 	bl	8000e38 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	7e5b      	ldrb	r3, [r3, #25]
 800129e:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012a4:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80012aa:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80012b0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012b8:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d106      	bne.n	80012d6 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	3b01      	subs	r3, #1
 80012ce:	045b      	lsls	r3, r3, #17
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d009      	beq.n	80012f2 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e2:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ea:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	4b46      	ldr	r3, [pc, #280]	; (8001414 <HAL_ADC_Init+0x29c>)
 80012fa:	4013      	ands	r3, r2
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	69b9      	ldr	r1, [r7, #24]
 8001302:	430b      	orrs	r3, r1
 8001304:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff0d 	bl	800112a <LL_ADC_REG_IsConversionOngoing>
 8001310:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ff1a 	bl	8001150 <LL_ADC_INJ_IsConversionOngoing>
 800131c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d13d      	bne.n	80013a0 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d13a      	bne.n	80013a0 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800132e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001336:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001346:	f023 0302 	bic.w	r3, r3, #2
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	6812      	ldr	r2, [r2, #0]
 800134e:	69b9      	ldr	r1, [r7, #24]
 8001350:	430b      	orrs	r3, r1
 8001352:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800135a:	2b01      	cmp	r3, #1
 800135c:	d118      	bne.n	8001390 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001368:	f023 0304 	bic.w	r3, r3, #4
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001374:	4311      	orrs	r1, r2
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800137a:	4311      	orrs	r1, r2
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001380:	430a      	orrs	r2, r1
 8001382:	431a      	orrs	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f042 0201 	orr.w	r2, r2, #1
 800138c:	611a      	str	r2, [r3, #16]
 800138e:	e007      	b.n	80013a0 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	691a      	ldr	r2, [r3, #16]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0201 	bic.w	r2, r2, #1
 800139e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d10c      	bne.n	80013c2 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f023 010f 	bic.w	r1, r3, #15
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	1e5a      	subs	r2, r3, #1
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	430a      	orrs	r2, r1
 80013be:	631a      	str	r2, [r3, #48]	; 0x30
 80013c0:	e007      	b.n	80013d2 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 020f 	bic.w	r2, r2, #15
 80013d0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d6:	f023 0303 	bic.w	r3, r3, #3
 80013da:	f043 0201 	orr.w	r2, r3, #1
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	655a      	str	r2, [r3, #84]	; 0x54
 80013e2:	e007      	b.n	80013f4 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e8:	f043 0210 	orr.w	r2, r3, #16
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3724      	adds	r7, #36	; 0x24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd90      	pop	{r4, r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000000 	.word	0x20000000
 8001404:	053e2d63 	.word	0x053e2d63
 8001408:	50040000 	.word	0x50040000
 800140c:	50040100 	.word	0x50040100
 8001410:	50040300 	.word	0x50040300
 8001414:	fff0c007 	.word	0xfff0c007

08001418 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b0b6      	sub	sp, #216	; 0xd8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001432:	2b01      	cmp	r3, #1
 8001434:	d101      	bne.n	800143a <HAL_ADC_ConfigChannel+0x22>
 8001436:	2302      	movs	r3, #2
 8001438:	e3d5      	b.n	8001be6 <HAL_ADC_ConfigChannel+0x7ce>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fe6f 	bl	800112a <LL_ADC_REG_IsConversionOngoing>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	f040 83ba 	bne.w	8001bc8 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b05      	cmp	r3, #5
 800145a:	d824      	bhi.n	80014a6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	3b02      	subs	r3, #2
 8001462:	2b03      	cmp	r3, #3
 8001464:	d81b      	bhi.n	800149e <HAL_ADC_ConfigChannel+0x86>
 8001466:	a201      	add	r2, pc, #4	; (adr r2, 800146c <HAL_ADC_ConfigChannel+0x54>)
 8001468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146c:	0800147d 	.word	0x0800147d
 8001470:	08001485 	.word	0x08001485
 8001474:	0800148d 	.word	0x0800148d
 8001478:	08001495 	.word	0x08001495
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	220c      	movs	r2, #12
 8001480:	605a      	str	r2, [r3, #4]
          break;
 8001482:	e011      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	2212      	movs	r2, #18
 8001488:	605a      	str	r2, [r3, #4]
          break;
 800148a:	e00d      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2218      	movs	r2, #24
 8001490:	605a      	str	r2, [r3, #4]
          break;
 8001492:	e009      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	f44f 7280 	mov.w	r2, #256	; 0x100
 800149a:	605a      	str	r2, [r3, #4]
          break;
 800149c:	e004      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	2206      	movs	r2, #6
 80014a2:	605a      	str	r2, [r3, #4]
          break;
 80014a4:	e000      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80014a6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6818      	ldr	r0, [r3, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	6859      	ldr	r1, [r3, #4]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	f7ff fd5b 	bl	8000f70 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fe33 	bl	800112a <LL_ADC_REG_IsConversionOngoing>
 80014c4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fe3f 	bl	8001150 <LL_ADC_INJ_IsConversionOngoing>
 80014d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f040 81c1 	bne.w	8001862 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f040 81bc 	bne.w	8001862 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014f2:	d10f      	bne.n	8001514 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2200      	movs	r2, #0
 80014fe:	4619      	mov	r1, r3
 8001500:	f7ff fd62 	bl	8000fc8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fd1c 	bl	8000f4a <LL_ADC_SetSamplingTimeCommonConfig>
 8001512:	e00e      	b.n	8001532 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	6819      	ldr	r1, [r3, #0]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	461a      	mov	r2, r3
 8001522:	f7ff fd51 	bl	8000fc8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fd0c 	bl	8000f4a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	695a      	ldr	r2, [r3, #20]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	08db      	lsrs	r3, r3, #3
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	2b04      	cmp	r3, #4
 8001552:	d00a      	beq.n	800156a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	6919      	ldr	r1, [r3, #16]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001564:	f7ff fc9c 	bl	8000ea0 <LL_ADC_SetOffset>
 8001568:	e17b      	b.n	8001862 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fcb9 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10a      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x17e>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fcae 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	0e9b      	lsrs	r3, r3, #26
 8001590:	f003 021f 	and.w	r2, r3, #31
 8001594:	e01e      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x1bc>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fca3 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 80015a2:	4603      	mov	r3, r0
 80015a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80015ac:	fa93 f3a3 	rbit	r3, r3
 80015b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80015b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80015c4:	2320      	movs	r3, #32
 80015c6:	e004      	b.n	80015d2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80015c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80015cc:	fab3 f383 	clz	r3, r3
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d105      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x1d4>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	0e9b      	lsrs	r3, r3, #26
 80015e6:	f003 031f 	and.w	r3, r3, #31
 80015ea:	e018      	b.n	800161e <HAL_ADC_ConfigChannel+0x206>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80015f8:	fa93 f3a3 	rbit	r3, r3
 80015fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001604:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001608:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001610:	2320      	movs	r3, #32
 8001612:	e004      	b.n	800161e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001614:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001618:	fab3 f383 	clz	r3, r3
 800161c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800161e:	429a      	cmp	r2, r3
 8001620:	d106      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fc72 	bl	8000f14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2101      	movs	r1, #1
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fc56 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 800163c:	4603      	mov	r3, r0
 800163e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10a      	bne.n	800165c <HAL_ADC_ConfigChannel+0x244>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2101      	movs	r1, #1
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fc4b 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	0e9b      	lsrs	r3, r3, #26
 8001656:	f003 021f 	and.w	r2, r3, #31
 800165a:	e01e      	b.n	800169a <HAL_ADC_ConfigChannel+0x282>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2101      	movs	r1, #1
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fc40 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 8001668:	4603      	mov	r3, r0
 800166a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001672:	fa93 f3a3 	rbit	r3, r3
 8001676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800167a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800167e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001682:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800168a:	2320      	movs	r3, #32
 800168c:	e004      	b.n	8001698 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800168e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001692:	fab3 f383 	clz	r3, r3
 8001696:	b2db      	uxtb	r3, r3
 8001698:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d105      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x29a>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	0e9b      	lsrs	r3, r3, #26
 80016ac:	f003 031f 	and.w	r3, r3, #31
 80016b0:	e018      	b.n	80016e4 <HAL_ADC_ConfigChannel+0x2cc>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016be:	fa93 f3a3 	rbit	r3, r3
 80016c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80016c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80016ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80016ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80016d6:	2320      	movs	r3, #32
 80016d8:	e004      	b.n	80016e4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80016da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016de:	fab3 f383 	clz	r3, r3
 80016e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d106      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2200      	movs	r2, #0
 80016ee:	2101      	movs	r1, #1
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fc0f 	bl	8000f14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2102      	movs	r1, #2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fbf3 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10a      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x30a>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2102      	movs	r1, #2
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fbe8 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 8001718:	4603      	mov	r3, r0
 800171a:	0e9b      	lsrs	r3, r3, #26
 800171c:	f003 021f 	and.w	r2, r3, #31
 8001720:	e01e      	b.n	8001760 <HAL_ADC_ConfigChannel+0x348>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2102      	movs	r1, #2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fbdd 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 800172e:	4603      	mov	r3, r0
 8001730:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001734:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001738:	fa93 f3a3 	rbit	r3, r3
 800173c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001740:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001744:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001748:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001750:	2320      	movs	r3, #32
 8001752:	e004      	b.n	800175e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001754:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001758:	fab3 f383 	clz	r3, r3
 800175c:	b2db      	uxtb	r3, r3
 800175e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001768:	2b00      	cmp	r3, #0
 800176a:	d105      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x360>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	0e9b      	lsrs	r3, r3, #26
 8001772:	f003 031f 	and.w	r3, r3, #31
 8001776:	e016      	b.n	80017a6 <HAL_ADC_ConfigChannel+0x38e>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001780:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001784:	fa93 f3a3 	rbit	r3, r3
 8001788:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800178a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800178c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001790:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001798:	2320      	movs	r3, #32
 800179a:	e004      	b.n	80017a6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800179c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017a0:	fab3 f383 	clz	r3, r3
 80017a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d106      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2200      	movs	r2, #0
 80017b0:	2102      	movs	r1, #2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fbae 	bl	8000f14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2103      	movs	r1, #3
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fb92 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10a      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x3cc>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2103      	movs	r1, #3
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fb87 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 80017da:	4603      	mov	r3, r0
 80017dc:	0e9b      	lsrs	r3, r3, #26
 80017de:	f003 021f 	and.w	r2, r3, #31
 80017e2:	e017      	b.n	8001814 <HAL_ADC_ConfigChannel+0x3fc>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2103      	movs	r1, #3
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fb7c 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 80017f0:	4603      	mov	r3, r0
 80017f2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017f6:	fa93 f3a3 	rbit	r3, r3
 80017fa:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80017fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017fe:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001806:	2320      	movs	r3, #32
 8001808:	e003      	b.n	8001812 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800180a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800180c:	fab3 f383 	clz	r3, r3
 8001810:	b2db      	uxtb	r3, r3
 8001812:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800181c:	2b00      	cmp	r3, #0
 800181e:	d105      	bne.n	800182c <HAL_ADC_ConfigChannel+0x414>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	0e9b      	lsrs	r3, r3, #26
 8001826:	f003 031f 	and.w	r3, r3, #31
 800182a:	e011      	b.n	8001850 <HAL_ADC_ConfigChannel+0x438>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001834:	fa93 f3a3 	rbit	r3, r3
 8001838:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800183a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800183c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800183e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001844:	2320      	movs	r3, #32
 8001846:	e003      	b.n	8001850 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800184a:	fab3 f383 	clz	r3, r3
 800184e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001850:	429a      	cmp	r2, r3
 8001852:	d106      	bne.n	8001862 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2200      	movs	r2, #0
 800185a:	2103      	movs	r1, #3
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fb59 	bl	8000f14 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fc4c 	bl	8001104 <LL_ADC_IsEnabled>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	f040 8140 	bne.w	8001af4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6818      	ldr	r0, [r3, #0]
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	6819      	ldr	r1, [r3, #0]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	461a      	mov	r2, r3
 8001882:	f7ff fbcd 	bl	8001020 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	4a8f      	ldr	r2, [pc, #572]	; (8001ac8 <HAL_ADC_ConfigChannel+0x6b0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	f040 8131 	bne.w	8001af4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10b      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x4a2>
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	0e9b      	lsrs	r3, r3, #26
 80018a8:	3301      	adds	r3, #1
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	2b09      	cmp	r3, #9
 80018b0:	bf94      	ite	ls
 80018b2:	2301      	movls	r3, #1
 80018b4:	2300      	movhi	r3, #0
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	e019      	b.n	80018ee <HAL_ADC_ConfigChannel+0x4d6>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018c2:	fa93 f3a3 	rbit	r3, r3
 80018c6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80018c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018ca:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80018cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80018d2:	2320      	movs	r3, #32
 80018d4:	e003      	b.n	80018de <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80018d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018d8:	fab3 f383 	clz	r3, r3
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	3301      	adds	r3, #1
 80018e0:	f003 031f 	and.w	r3, r3, #31
 80018e4:	2b09      	cmp	r3, #9
 80018e6:	bf94      	ite	ls
 80018e8:	2301      	movls	r3, #1
 80018ea:	2300      	movhi	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d079      	beq.n	80019e6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d107      	bne.n	800190e <HAL_ADC_ConfigChannel+0x4f6>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	0e9b      	lsrs	r3, r3, #26
 8001904:	3301      	adds	r3, #1
 8001906:	069b      	lsls	r3, r3, #26
 8001908:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800190c:	e015      	b.n	800193a <HAL_ADC_ConfigChannel+0x522>
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001916:	fa93 f3a3 	rbit	r3, r3
 800191a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800191c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800191e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001926:	2320      	movs	r3, #32
 8001928:	e003      	b.n	8001932 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800192a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800192c:	fab3 f383 	clz	r3, r3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	3301      	adds	r3, #1
 8001934:	069b      	lsls	r3, r3, #26
 8001936:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001942:	2b00      	cmp	r3, #0
 8001944:	d109      	bne.n	800195a <HAL_ADC_ConfigChannel+0x542>
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	0e9b      	lsrs	r3, r3, #26
 800194c:	3301      	adds	r3, #1
 800194e:	f003 031f 	and.w	r3, r3, #31
 8001952:	2101      	movs	r1, #1
 8001954:	fa01 f303 	lsl.w	r3, r1, r3
 8001958:	e017      	b.n	800198a <HAL_ADC_ConfigChannel+0x572>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001962:	fa93 f3a3 	rbit	r3, r3
 8001966:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800196a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800196c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001972:	2320      	movs	r3, #32
 8001974:	e003      	b.n	800197e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001978:	fab3 f383 	clz	r3, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	3301      	adds	r3, #1
 8001980:	f003 031f 	and.w	r3, r3, #31
 8001984:	2101      	movs	r1, #1
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	ea42 0103 	orr.w	r1, r2, r3
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10a      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x598>
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	0e9b      	lsrs	r3, r3, #26
 80019a0:	3301      	adds	r3, #1
 80019a2:	f003 021f 	and.w	r2, r3, #31
 80019a6:	4613      	mov	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	051b      	lsls	r3, r3, #20
 80019ae:	e018      	b.n	80019e2 <HAL_ADC_ConfigChannel+0x5ca>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019b8:	fa93 f3a3 	rbit	r3, r3
 80019bc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80019be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80019c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80019c8:	2320      	movs	r3, #32
 80019ca:	e003      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80019cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ce:	fab3 f383 	clz	r3, r3
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	3301      	adds	r3, #1
 80019d6:	f003 021f 	and.w	r2, r3, #31
 80019da:	4613      	mov	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4413      	add	r3, r2
 80019e0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019e2:	430b      	orrs	r3, r1
 80019e4:	e081      	b.n	8001aea <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d107      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x5ea>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	0e9b      	lsrs	r3, r3, #26
 80019f8:	3301      	adds	r3, #1
 80019fa:	069b      	lsls	r3, r3, #26
 80019fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a00:	e015      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x616>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a12:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001a1a:	2320      	movs	r3, #32
 8001a1c:	e003      	b.n	8001a26 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a20:	fab3 f383 	clz	r3, r3
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	3301      	adds	r3, #1
 8001a28:	069b      	lsls	r3, r3, #26
 8001a2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d109      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x636>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	0e9b      	lsrs	r3, r3, #26
 8001a40:	3301      	adds	r3, #1
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	2101      	movs	r1, #1
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	e017      	b.n	8001a7e <HAL_ADC_ConfigChannel+0x666>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	fa93 f3a3 	rbit	r3, r3
 8001a5a:	61fb      	str	r3, [r7, #28]
  return result;
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001a66:	2320      	movs	r3, #32
 8001a68:	e003      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	3301      	adds	r3, #1
 8001a74:	f003 031f 	and.w	r3, r3, #31
 8001a78:	2101      	movs	r1, #1
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	ea42 0103 	orr.w	r1, r2, r3
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10d      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x692>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	0e9b      	lsrs	r3, r3, #26
 8001a94:	3301      	adds	r3, #1
 8001a96:	f003 021f 	and.w	r2, r3, #31
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3b1e      	subs	r3, #30
 8001aa2:	051b      	lsls	r3, r3, #20
 8001aa4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	e01e      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x6d0>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa93 f3a3 	rbit	r3, r3
 8001ab6:	613b      	str	r3, [r7, #16]
  return result;
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d104      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001ac2:	2320      	movs	r3, #32
 8001ac4:	e006      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x6bc>
 8001ac6:	bf00      	nop
 8001ac8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	fab3 f383 	clz	r3, r3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	f003 021f 	and.w	r2, r3, #31
 8001ada:	4613      	mov	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4413      	add	r3, r2
 8001ae0:	3b1e      	subs	r3, #30
 8001ae2:	051b      	lsls	r3, r3, #20
 8001ae4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	6892      	ldr	r2, [r2, #8]
 8001aee:	4619      	mov	r1, r3
 8001af0:	f7ff fa6a 	bl	8000fc8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <HAL_ADC_ConfigChannel+0x7d8>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d06c      	beq.n	8001bda <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b00:	483c      	ldr	r0, [pc, #240]	; (8001bf4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001b02:	f7ff f9bf 	bl	8000e84 <LL_ADC_GetCommonPathInternalCh>
 8001b06:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a3a      	ldr	r2, [pc, #232]	; (8001bf8 <HAL_ADC_ConfigChannel+0x7e0>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d127      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d121      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a35      	ldr	r2, [pc, #212]	; (8001bfc <HAL_ADC_ConfigChannel+0x7e4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d157      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b32:	4619      	mov	r1, r3
 8001b34:	482f      	ldr	r0, [pc, #188]	; (8001bf4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001b36:	f7ff f992 	bl	8000e5e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b3a:	4b31      	ldr	r3, [pc, #196]	; (8001c00 <HAL_ADC_ConfigChannel+0x7e8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	099b      	lsrs	r3, r3, #6
 8001b40:	4a30      	ldr	r2, [pc, #192]	; (8001c04 <HAL_ADC_ConfigChannel+0x7ec>)
 8001b42:	fba2 2303 	umull	r2, r3, r2, r3
 8001b46:	099b      	lsrs	r3, r3, #6
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b54:	e002      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f9      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b62:	e03a      	b.n	8001bda <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a27      	ldr	r2, [pc, #156]	; (8001c08 <HAL_ADC_ConfigChannel+0x7f0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d113      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x77e>
 8001b6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10d      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a1f      	ldr	r2, [pc, #124]	; (8001bfc <HAL_ADC_ConfigChannel+0x7e4>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d12a      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4819      	ldr	r0, [pc, #100]	; (8001bf4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001b90:	f7ff f965 	bl	8000e5e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b94:	e021      	b.n	8001bda <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <HAL_ADC_ConfigChannel+0x7f4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d11c      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ba0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ba4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d116      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <HAL_ADC_ConfigChannel+0x7e4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d111      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	480c      	ldr	r0, [pc, #48]	; (8001bf4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001bc2:	f7ff f94c 	bl	8000e5e <LL_ADC_SetCommonPathInternalCh>
 8001bc6:	e008      	b.n	8001bda <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bcc:	f043 0220 	orr.w	r2, r3, #32
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001be2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	37d8      	adds	r7, #216	; 0xd8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	80080000 	.word	0x80080000
 8001bf4:	50040300 	.word	0x50040300
 8001bf8:	c7520000 	.word	0xc7520000
 8001bfc:	50040000 	.word	0x50040000
 8001c00:	20000000 	.word	0x20000000
 8001c04:	053e2d63 	.word	0x053e2d63
 8001c08:	cb840000 	.word	0xcb840000
 8001c0c:	80000001 	.word	0x80000001

08001c10 <LL_ADC_IsEnabled>:
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <LL_ADC_IsEnabled+0x18>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <LL_ADC_IsEnabled+0x1a>
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_ADC_REG_IsConversionOngoing>:
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d101      	bne.n	8001c4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b09f      	sub	sp, #124	; 0x7c
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e089      	b.n	8001d8e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001c82:	2300      	movs	r3, #0
 8001c84:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001c86:	2300      	movs	r3, #0
 8001c88:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a42      	ldr	r2, [pc, #264]	; (8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d102      	bne.n	8001c9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001c94:	4b41      	ldr	r3, [pc, #260]	; (8001d9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	e001      	b.n	8001c9e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10b      	bne.n	8001cbc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca8:	f043 0220 	orr.w	r2, r3, #32
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e068      	b.n	8001d8e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ffb9 	bl	8001c36 <LL_ADC_REG_IsConversionOngoing>
 8001cc4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ffb3 	bl	8001c36 <LL_ADC_REG_IsConversionOngoing>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d14a      	bne.n	8001d6c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001cd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d147      	bne.n	8001d6c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001cdc:	4b30      	ldr	r3, [pc, #192]	; (8001da0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8001cde:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d027      	beq.n	8001d38 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cfa:	035b      	lsls	r3, r3, #13
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d02:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d04:	4824      	ldr	r0, [pc, #144]	; (8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001d06:	f7ff ff83 	bl	8001c10 <LL_ADC_IsEnabled>
 8001d0a:	4604      	mov	r4, r0
 8001d0c:	4823      	ldr	r0, [pc, #140]	; (8001d9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001d0e:	f7ff ff7f 	bl	8001c10 <LL_ADC_IsEnabled>
 8001d12:	4603      	mov	r3, r0
 8001d14:	4323      	orrs	r3, r4
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d132      	bne.n	8001d80 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d22:	f023 030f 	bic.w	r3, r3, #15
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	6811      	ldr	r1, [r2, #0]
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	6892      	ldr	r2, [r2, #8]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	431a      	orrs	r2, r3
 8001d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d34:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d36:	e023      	b.n	8001d80 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d42:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d44:	4814      	ldr	r0, [pc, #80]	; (8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001d46:	f7ff ff63 	bl	8001c10 <LL_ADC_IsEnabled>
 8001d4a:	4604      	mov	r4, r0
 8001d4c:	4813      	ldr	r0, [pc, #76]	; (8001d9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001d4e:	f7ff ff5f 	bl	8001c10 <LL_ADC_IsEnabled>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4323      	orrs	r3, r4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d112      	bne.n	8001d80 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d62:	f023 030f 	bic.w	r3, r3, #15
 8001d66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d68:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d6a:	e009      	b.n	8001d80 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d70:	f043 0220 	orr.w	r2, r3, #32
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001d7e:	e000      	b.n	8001d82 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d8a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	377c      	adds	r7, #124	; 0x7c
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd90      	pop	{r4, r7, pc}
 8001d96:	bf00      	nop
 8001d98:	50040000 	.word	0x50040000
 8001d9c:	50040100 	.word	0x50040100
 8001da0:	50040300 	.word	0x50040300

08001da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <__NVIC_SetPriorityGrouping+0x44>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd6:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	60d3      	str	r3, [r2, #12]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <__NVIC_GetPriorityGrouping+0x18>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	f003 0307 	and.w	r3, r3, #7
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	db0b      	blt.n	8001e32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	f003 021f 	and.w	r2, r3, #31
 8001e20:	4907      	ldr	r1, [pc, #28]	; (8001e40 <__NVIC_EnableIRQ+0x38>)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	095b      	lsrs	r3, r3, #5
 8001e28:	2001      	movs	r0, #1
 8001e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	e000e100 	.word	0xe000e100

08001e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	6039      	str	r1, [r7, #0]
 8001e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	db0a      	blt.n	8001e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	490c      	ldr	r1, [pc, #48]	; (8001e90 <__NVIC_SetPriority+0x4c>)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	0112      	lsls	r2, r2, #4
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	440b      	add	r3, r1
 8001e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e6c:	e00a      	b.n	8001e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4908      	ldr	r1, [pc, #32]	; (8001e94 <__NVIC_SetPriority+0x50>)
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	3b04      	subs	r3, #4
 8001e7c:	0112      	lsls	r2, r2, #4
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	440b      	add	r3, r1
 8001e82:	761a      	strb	r2, [r3, #24]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000e100 	.word	0xe000e100
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b089      	sub	sp, #36	; 0x24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f1c3 0307 	rsb	r3, r3, #7
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	bf28      	it	cs
 8001eb6:	2304      	movcs	r3, #4
 8001eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	2b06      	cmp	r3, #6
 8001ec0:	d902      	bls.n	8001ec8 <NVIC_EncodePriority+0x30>
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3b03      	subs	r3, #3
 8001ec6:	e000      	b.n	8001eca <NVIC_EncodePriority+0x32>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43da      	mvns	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	401a      	ands	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eea:	43d9      	mvns	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	4313      	orrs	r3, r2
         );
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3724      	adds	r7, #36	; 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f10:	d301      	bcc.n	8001f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f12:	2301      	movs	r3, #1
 8001f14:	e00f      	b.n	8001f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <SysTick_Config+0x40>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f1e:	210f      	movs	r1, #15
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	f7ff ff8e 	bl	8001e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <SysTick_Config+0x40>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2e:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <SysTick_Config+0x40>)
 8001f30:	2207      	movs	r2, #7
 8001f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	e000e010 	.word	0xe000e010

08001f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff ff29 	bl	8001da4 <__NVIC_SetPriorityGrouping>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b086      	sub	sp, #24
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4603      	mov	r3, r0
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
 8001f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f6c:	f7ff ff3e 	bl	8001dec <__NVIC_GetPriorityGrouping>
 8001f70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	6978      	ldr	r0, [r7, #20]
 8001f78:	f7ff ff8e 	bl	8001e98 <NVIC_EncodePriority>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff5d 	bl	8001e44 <__NVIC_SetPriority>
}
 8001f8a:	bf00      	nop
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff31 	bl	8001e08 <__NVIC_EnableIRQ>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff ffa2 	bl	8001f00 <SysTick_Config>
 8001fbc:	4603      	mov	r3, r0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e098      	b.n	800210c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4b4d      	ldr	r3, [pc, #308]	; (8002118 <HAL_DMA_Init+0x150>)
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d80f      	bhi.n	8002006 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b4b      	ldr	r3, [pc, #300]	; (800211c <HAL_DMA_Init+0x154>)
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a4b      	ldr	r2, [pc, #300]	; (8002120 <HAL_DMA_Init+0x158>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	009a      	lsls	r2, r3, #2
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a48      	ldr	r2, [pc, #288]	; (8002124 <HAL_DMA_Init+0x15c>)
 8002002:	641a      	str	r2, [r3, #64]	; 0x40
 8002004:	e00e      	b.n	8002024 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	4b46      	ldr	r3, [pc, #280]	; (8002128 <HAL_DMA_Init+0x160>)
 800200e:	4413      	add	r3, r2
 8002010:	4a43      	ldr	r2, [pc, #268]	; (8002120 <HAL_DMA_Init+0x158>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	009a      	lsls	r2, r3, #2
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a42      	ldr	r2, [pc, #264]	; (800212c <HAL_DMA_Init+0x164>)
 8002022:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800203a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800203e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002048:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002054:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002060:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800207e:	d039      	beq.n	80020f4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	4a27      	ldr	r2, [pc, #156]	; (8002124 <HAL_DMA_Init+0x15c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d11a      	bne.n	80020c0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800208a:	4b29      	ldr	r3, [pc, #164]	; (8002130 <HAL_DMA_Init+0x168>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f003 031c 	and.w	r3, r3, #28
 8002096:	210f      	movs	r1, #15
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	4924      	ldr	r1, [pc, #144]	; (8002130 <HAL_DMA_Init+0x168>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020a4:	4b22      	ldr	r3, [pc, #136]	; (8002130 <HAL_DMA_Init+0x168>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6859      	ldr	r1, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b0:	f003 031c 	and.w	r3, r3, #28
 80020b4:	fa01 f303 	lsl.w	r3, r1, r3
 80020b8:	491d      	ldr	r1, [pc, #116]	; (8002130 <HAL_DMA_Init+0x168>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]
 80020be:	e019      	b.n	80020f4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80020c0:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <HAL_DMA_Init+0x16c>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c8:	f003 031c 	and.w	r3, r3, #28
 80020cc:	210f      	movs	r1, #15
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	4917      	ldr	r1, [pc, #92]	; (8002134 <HAL_DMA_Init+0x16c>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020da:	4b16      	ldr	r3, [pc, #88]	; (8002134 <HAL_DMA_Init+0x16c>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6859      	ldr	r1, [r3, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f003 031c 	and.w	r3, r3, #28
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	4911      	ldr	r1, [pc, #68]	; (8002134 <HAL_DMA_Init+0x16c>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	40020407 	.word	0x40020407
 800211c:	bffdfff8 	.word	0xbffdfff8
 8002120:	cccccccd 	.word	0xcccccccd
 8002124:	40020000 	.word	0x40020000
 8002128:	bffdfbf8 	.word	0xbffdfbf8
 800212c:	40020400 	.word	0x40020400
 8002130:	400200a8 	.word	0x400200a8
 8002134:	400204a8 	.word	0x400204a8

08002138 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002154:	f003 031c 	and.w	r3, r3, #28
 8002158:	2204      	movs	r2, #4
 800215a:	409a      	lsls	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d026      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x7a>
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b00      	cmp	r3, #0
 800216c:	d021      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	2b00      	cmp	r3, #0
 800217a:	d107      	bne.n	800218c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0204 	bic.w	r2, r2, #4
 800218a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002190:	f003 021c 	and.w	r2, r3, #28
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	2104      	movs	r1, #4
 800219a:	fa01 f202 	lsl.w	r2, r1, r2
 800219e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d071      	beq.n	800228c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80021b0:	e06c      	b.n	800228c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	f003 031c 	and.w	r3, r3, #28
 80021ba:	2202      	movs	r2, #2
 80021bc:	409a      	lsls	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d02e      	beq.n	8002224 <HAL_DMA_IRQHandler+0xec>
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d029      	beq.n	8002224 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0320 	and.w	r3, r3, #32
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10b      	bne.n	80021f6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 020a 	bic.w	r2, r2, #10
 80021ec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	f003 021c 	and.w	r2, r3, #28
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	2102      	movs	r1, #2
 8002204:	fa01 f202 	lsl.w	r2, r1, r2
 8002208:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	2b00      	cmp	r3, #0
 8002218:	d038      	beq.n	800228c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002222:	e033      	b.n	800228c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002228:	f003 031c 	and.w	r3, r3, #28
 800222c:	2208      	movs	r2, #8
 800222e:	409a      	lsls	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4013      	ands	r3, r2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d02a      	beq.n	800228e <HAL_DMA_IRQHandler+0x156>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d025      	beq.n	800228e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 020e 	bic.w	r2, r2, #14
 8002250:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	f003 021c 	and.w	r2, r3, #28
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	2101      	movs	r1, #1
 8002260:	fa01 f202 	lsl.w	r2, r1, r2
 8002264:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002280:	2b00      	cmp	r3, #0
 8002282:	d004      	beq.n	800228e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800228c:	bf00      	nop
 800228e:	bf00      	nop
}
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a6:	e14e      	b.n	8002546 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	2101      	movs	r1, #1
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	fa01 f303 	lsl.w	r3, r1, r3
 80022b4:	4013      	ands	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 8140 	beq.w	8002540 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d005      	beq.n	80022d8 <HAL_GPIO_Init+0x40>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d130      	bne.n	800233a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	2203      	movs	r2, #3
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800230e:	2201      	movs	r2, #1
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	091b      	lsrs	r3, r3, #4
 8002324:	f003 0201 	and.w	r2, r3, #1
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b03      	cmp	r3, #3
 8002344:	d017      	beq.n	8002376 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	2203      	movs	r2, #3
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d123      	bne.n	80023ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	08da      	lsrs	r2, r3, #3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3208      	adds	r2, #8
 800238a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	220f      	movs	r2, #15
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4013      	ands	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	691a      	ldr	r2, [r3, #16]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	08da      	lsrs	r2, r3, #3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3208      	adds	r2, #8
 80023c4:	6939      	ldr	r1, [r7, #16]
 80023c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	2203      	movs	r2, #3
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4013      	ands	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 0203 	and.w	r2, r3, #3
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 809a 	beq.w	8002540 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240c:	4b55      	ldr	r3, [pc, #340]	; (8002564 <HAL_GPIO_Init+0x2cc>)
 800240e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002410:	4a54      	ldr	r2, [pc, #336]	; (8002564 <HAL_GPIO_Init+0x2cc>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6613      	str	r3, [r2, #96]	; 0x60
 8002418:	4b52      	ldr	r3, [pc, #328]	; (8002564 <HAL_GPIO_Init+0x2cc>)
 800241a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002424:	4a50      	ldr	r2, [pc, #320]	; (8002568 <HAL_GPIO_Init+0x2d0>)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	3302      	adds	r3, #2
 800242c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	220f      	movs	r2, #15
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800244e:	d013      	beq.n	8002478 <HAL_GPIO_Init+0x1e0>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a46      	ldr	r2, [pc, #280]	; (800256c <HAL_GPIO_Init+0x2d4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d00d      	beq.n	8002474 <HAL_GPIO_Init+0x1dc>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a45      	ldr	r2, [pc, #276]	; (8002570 <HAL_GPIO_Init+0x2d8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d007      	beq.n	8002470 <HAL_GPIO_Init+0x1d8>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a44      	ldr	r2, [pc, #272]	; (8002574 <HAL_GPIO_Init+0x2dc>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d101      	bne.n	800246c <HAL_GPIO_Init+0x1d4>
 8002468:	2303      	movs	r3, #3
 800246a:	e006      	b.n	800247a <HAL_GPIO_Init+0x1e2>
 800246c:	2307      	movs	r3, #7
 800246e:	e004      	b.n	800247a <HAL_GPIO_Init+0x1e2>
 8002470:	2302      	movs	r3, #2
 8002472:	e002      	b.n	800247a <HAL_GPIO_Init+0x1e2>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <HAL_GPIO_Init+0x1e2>
 8002478:	2300      	movs	r3, #0
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	f002 0203 	and.w	r2, r2, #3
 8002480:	0092      	lsls	r2, r2, #2
 8002482:	4093      	lsls	r3, r2
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800248a:	4937      	ldr	r1, [pc, #220]	; (8002568 <HAL_GPIO_Init+0x2d0>)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	3302      	adds	r3, #2
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002498:	4b37      	ldr	r3, [pc, #220]	; (8002578 <HAL_GPIO_Init+0x2e0>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024bc:	4a2e      	ldr	r2, [pc, #184]	; (8002578 <HAL_GPIO_Init+0x2e0>)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024c2:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <HAL_GPIO_Init+0x2e0>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024e6:	4a24      	ldr	r2, [pc, #144]	; (8002578 <HAL_GPIO_Init+0x2e0>)
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024ec:	4b22      	ldr	r3, [pc, #136]	; (8002578 <HAL_GPIO_Init+0x2e0>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002510:	4a19      	ldr	r2, [pc, #100]	; (8002578 <HAL_GPIO_Init+0x2e0>)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002516:	4b18      	ldr	r3, [pc, #96]	; (8002578 <HAL_GPIO_Init+0x2e0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	43db      	mvns	r3, r3
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4013      	ands	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800253a:	4a0f      	ldr	r2, [pc, #60]	; (8002578 <HAL_GPIO_Init+0x2e0>)
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	3301      	adds	r3, #1
 8002544:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	fa22 f303 	lsr.w	r3, r2, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	f47f aea9 	bne.w	80022a8 <HAL_GPIO_Init+0x10>
  }
}
 8002556:	bf00      	nop
 8002558:	bf00      	nop
 800255a:	371c      	adds	r7, #28
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	40021000 	.word	0x40021000
 8002568:	40010000 	.word	0x40010000
 800256c:	48000400 	.word	0x48000400
 8002570:	48000800 	.word	0x48000800
 8002574:	48000c00 	.word	0x48000c00
 8002578:	40010400 	.word	0x40010400

0800257c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	807b      	strh	r3, [r7, #2]
 8002588:	4613      	mov	r3, r2
 800258a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800258c:	787b      	ldrb	r3, [r7, #1]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002592:	887a      	ldrh	r2, [r7, #2]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002598:	e002      	b.n	80025a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800259a:	887a      	ldrh	r2, [r7, #2]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ae:	b08b      	sub	sp, #44	; 0x2c
 80025b0:	af06      	add	r7, sp, #24
 80025b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e109      	b.n	80027d2 <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f007 ff42 	bl	800a45c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2203      	movs	r2, #3
 80025dc:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f003 fe21 	bl	800622c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	687e      	ldr	r6, [r7, #4]
 80025f2:	466d      	mov	r5, sp
 80025f4:	f106 0410 	add.w	r4, r6, #16
 80025f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002600:	e885 0003 	stmia.w	r5, {r0, r1}
 8002604:	1d33      	adds	r3, r6, #4
 8002606:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002608:	6838      	ldr	r0, [r7, #0]
 800260a:	f003 fde7 	bl	80061dc <USB_CoreInit>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0d8      	b.n	80027d2 <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2100      	movs	r1, #0
 8002626:	4618      	mov	r0, r3
 8002628:	f003 fe1b 	bl	8006262 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800262c:	2300      	movs	r3, #0
 800262e:	73fb      	strb	r3, [r7, #15]
 8002630:	e04d      	b.n	80026ce <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	440b      	add	r3, r1
 8002642:	3305      	adds	r3, #5
 8002644:	2201      	movs	r2, #1
 8002646:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	440b      	add	r3, r1
 8002658:	3304      	adds	r3, #4
 800265a:	7bfa      	ldrb	r2, [r7, #15]
 800265c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800265e:	7bfa      	ldrb	r2, [r7, #15]
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	b298      	uxth	r0, r3
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	440b      	add	r3, r1
 8002670:	333a      	adds	r3, #58	; 0x3a
 8002672:	4602      	mov	r2, r0
 8002674:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	440b      	add	r3, r1
 8002686:	3307      	adds	r3, #7
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	440b      	add	r3, r1
 800269a:	333c      	adds	r3, #60	; 0x3c
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	3340      	adds	r3, #64	; 0x40
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026b4:	7bfa      	ldrb	r2, [r7, #15]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	440b      	add	r3, r1
 80026c2:	3344      	adds	r3, #68	; 0x44
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	3301      	adds	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	7bfa      	ldrb	r2, [r7, #15]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d3ac      	bcc.n	8002632 <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	e044      	b.n	8002768 <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	440b      	add	r3, r1
 80026ec:	f203 136d 	addw	r3, r3, #365	; 0x16d
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026f4:	7bfa      	ldrb	r2, [r7, #15]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	440b      	add	r3, r1
 8002702:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8002706:	7bfa      	ldrb	r2, [r7, #15]
 8002708:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	440b      	add	r3, r1
 8002718:	f203 136f 	addw	r3, r3, #367	; 0x16f
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	440b      	add	r3, r1
 800272e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	440b      	add	r3, r1
 8002744:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	440b      	add	r3, r1
 800275a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	3301      	adds	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	429a      	cmp	r2, r3
 8002770:	d3b5      	bcc.n	80026de <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	687e      	ldr	r6, [r7, #4]
 800277a:	466d      	mov	r5, sp
 800277c:	f106 0410 	add.w	r4, r6, #16
 8002780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002784:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002788:	e885 0003 	stmia.w	r5, {r0, r1}
 800278c:	1d33      	adds	r3, r6, #4
 800278e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002790:	6838      	ldr	r0, [r7, #0]
 8002792:	f003 fd73 	bl	800627c <USB_DevInit>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e014      	b.n	80027d2 <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d102      	bne.n	80027c6 <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f001 fc55 	bl	8004070 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f005 ff7f 	bl	80086ce <USB_DevDisconnect>

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_PCD_Start+0x16>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e012      	b.n	8002816 <HAL_PCD_Start+0x3c>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f003 fcfe 	bl	80061fe <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f005 ff4a 	bl	80086a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f005 ff64 	bl	80086f8 <USB_ReadInterrupts>
 8002830:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 fb3e 	bl	8002ebe <PCD_EP_ISR_Handler>

    return;
 8002842:	e110      	b.n	8002a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284a:	2b00      	cmp	r3, #0
 800284c:	d013      	beq.n	8002876 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002856:	b29a      	uxth	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002860:	b292      	uxth	r2, r2
 8002862:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f007 feaf 	bl	800a5ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800286c:	2100      	movs	r1, #0
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f8fc 	bl	8002a6c <HAL_PCD_SetAddress>

    return;
 8002874:	e0f7      	b.n	8002a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00c      	beq.n	800289a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002888:	b29a      	uxth	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002892:	b292      	uxth	r2, r2
 8002894:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002898:	e0e5      	b.n	8002a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00c      	beq.n	80028be <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028b6:	b292      	uxth	r2, r2
 80028b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80028bc:	e0d3      	b.n	8002a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d034      	beq.n	8002932 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0204 	bic.w	r2, r2, #4
 80028da:	b292      	uxth	r2, r2
 80028dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0208 	bic.w	r2, r2, #8
 80028f2:	b292      	uxth	r2, r2
 80028f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d107      	bne.n	8002912 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800290a:	2100      	movs	r1, #0
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f008 f90d 	bl	800ab2c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f007 fe92 	bl	800a63c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002920:	b29a      	uxth	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800292a:	b292      	uxth	r2, r2
 800292c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002930:	e099      	b.n	8002a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002938:	2b00      	cmp	r3, #0
 800293a:	d027      	beq.n	800298c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002944:	b29a      	uxth	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0208 	orr.w	r2, r2, #8
 800294e:	b292      	uxth	r2, r2
 8002950:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800295c:	b29a      	uxth	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002966:	b292      	uxth	r2, r2
 8002968:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002974:	b29a      	uxth	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0204 	orr.w	r2, r2, #4
 800297e:	b292      	uxth	r2, r2
 8002980:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f007 fe3f 	bl	800a608 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800298a:	e06c      	b.n	8002a66 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002992:	2b00      	cmp	r3, #0
 8002994:	d040      	beq.n	8002a18 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800299e:	b29a      	uxth	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029a8:	b292      	uxth	r2, r2
 80029aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d12b      	bne.n	8002a10 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0204 	orr.w	r2, r2, #4
 80029ca:	b292      	uxth	r2, r2
 80029cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029d8:	b29a      	uxth	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0208 	orr.w	r2, r2, #8
 80029e2:	b292      	uxth	r2, r2
 80029e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	089b      	lsrs	r3, r3, #2
 80029fc:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002a06:	2101      	movs	r1, #1
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f008 f88f 	bl	800ab2c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002a0e:	e02a      	b.n	8002a66 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f007 fdf9 	bl	800a608 <HAL_PCD_SuspendCallback>
    return;
 8002a16:	e026      	b.n	8002a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00f      	beq.n	8002a42 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a34:	b292      	uxth	r2, r2
 8002a36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f007 fdb7 	bl	800a5ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002a40:	e011      	b.n	8002a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00c      	beq.n	8002a66 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a5e:	b292      	uxth	r2, r2
 8002a60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002a64:	bf00      	nop
  }
}
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <HAL_PCD_SetAddress+0x1a>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e013      	b.n	8002aae <HAL_PCD_SetAddress+0x42>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	78fa      	ldrb	r2, [r7, #3]
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f005 fdea 	bl	8008678 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	4608      	mov	r0, r1
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	70fb      	strb	r3, [r7, #3]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	803b      	strh	r3, [r7, #0]
 8002acc:	4613      	mov	r3, r2
 8002ace:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	da0f      	bge.n	8002afc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	4413      	add	r3, r2
 8002af0:	3304      	adds	r3, #4
 8002af2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2201      	movs	r2, #1
 8002af8:	705a      	strb	r2, [r3, #1]
 8002afa:	e00f      	b.n	8002b1c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	f003 0207 	and.w	r2, r3, #7
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	3304      	adds	r3, #4
 8002b14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b28:	883a      	ldrh	r2, [r7, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	78ba      	ldrb	r2, [r7, #2]
 8002b32:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	785b      	ldrb	r3, [r3, #1]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d004      	beq.n	8002b46 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b46:	78bb      	ldrb	r3, [r7, #2]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d102      	bne.n	8002b52 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_PCD_EP_Open+0xaa>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e00e      	b.n	8002b7e <HAL_PCD_EP_Open+0xc8>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68f9      	ldr	r1, [r7, #12]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 fba6 	bl	80062c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8002b7c:	7afb      	ldrb	r3, [r7, #11]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	da0f      	bge.n	8002bba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	4413      	add	r3, r2
 8002bae:	3304      	adds	r3, #4
 8002bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	705a      	strb	r2, [r3, #1]
 8002bb8:	e00f      	b.n	8002bda <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bba:	78fb      	ldrb	r3, [r7, #3]
 8002bbc:	f003 0207 	and.w	r2, r3, #7
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	4413      	add	r3, r2
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002bda:	78fb      	ldrb	r3, [r7, #3]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_PCD_EP_Close+0x6e>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e00e      	b.n	8002c12 <HAL_PCD_EP_Close+0x8c>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68f9      	ldr	r1, [r7, #12]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f003 ff16 	bl	8006a34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b086      	sub	sp, #24
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
 8002c26:	460b      	mov	r3, r1
 8002c28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c2a:	7afb      	ldrb	r3, [r7, #11]
 8002c2c:	f003 0207 	and.w	r2, r3, #7
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	4413      	add	r3, r2
 8002c40:	3304      	adds	r3, #4
 8002c42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2200      	movs	r2, #0
 8002c54:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c5c:	7afb      	ldrb	r3, [r7, #11]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c68:	7afb      	ldrb	r3, [r7, #11]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6979      	ldr	r1, [r7, #20]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f004 f8c8 	bl	8006e0e <USB_EPStartXfer>
 8002c7e:	e005      	b.n	8002c8c <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6979      	ldr	r1, [r7, #20]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f004 f8c1 	bl	8006e0e <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	f003 0207 	and.w	r2, r3, #7
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002cb8:	681b      	ldr	r3, [r3, #0]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	607a      	str	r2, [r7, #4]
 8002cd0:	603b      	str	r3, [r7, #0]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cd6:	7afb      	ldrb	r3, [r7, #11]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4413      	add	r3, r2
 8002cea:	3304      	adds	r3, #4
 8002cec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2201      	movs	r2, #1
 8002d12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d14:	7afb      	ldrb	r3, [r7, #11]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d20:	7afb      	ldrb	r3, [r7, #11]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6979      	ldr	r1, [r7, #20]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f004 f86c 	bl	8006e0e <USB_EPStartXfer>
 8002d36:	e005      	b.n	8002d44 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6979      	ldr	r1, [r7, #20]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f004 f865 	bl	8006e0e <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	460b      	mov	r3, r1
 8002d58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	f003 0207 	and.w	r2, r3, #7
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d901      	bls.n	8002d6c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e04e      	b.n	8002e0a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	da0f      	bge.n	8002d94 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	4413      	add	r3, r2
 8002d88:	3304      	adds	r3, #4
 8002d8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	705a      	strb	r2, [r3, #1]
 8002d92:	e00d      	b.n	8002db0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	3304      	adds	r3, #4
 8002da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2201      	movs	r2, #1
 8002db4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_PCD_EP_SetStall+0x82>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e01c      	b.n	8002e0a <HAL_PCD_EP_SetStall+0xbc>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68f9      	ldr	r1, [r7, #12]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f005 fb4b 	bl	800847a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d108      	bne.n	8002e00 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	f005 fc8c 	bl	8008718 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b084      	sub	sp, #16
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e1e:	78fb      	ldrb	r3, [r7, #3]
 8002e20:	f003 020f 	and.w	r2, r3, #15
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d901      	bls.n	8002e30 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e042      	b.n	8002eb6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	da0f      	bge.n	8002e58 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2201      	movs	r2, #1
 8002e54:	705a      	strb	r2, [r3, #1]
 8002e56:	e00f      	b.n	8002e78 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	f003 0207 	and.w	r2, r3, #7
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3304      	adds	r3, #4
 8002e70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_PCD_EP_ClrStall+0x86>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e00e      	b.n	8002eb6 <HAL_PCD_EP_ClrStall+0xa4>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68f9      	ldr	r1, [r7, #12]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f005 fb38 	bl	800851c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b096      	sub	sp, #88	; 0x58
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ec6:	e3a9      	b.n	800361c <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ed0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002ed4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002ee2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f040 8169 	bne.w	80031be <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002eec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d150      	bne.n	8002f9a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f08:	81fb      	strh	r3, [r7, #14]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	89fb      	ldrh	r3, [r7, #14]
 8002f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	332c      	adds	r3, #44	; 0x2c
 8002f20:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f48:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	441a      	add	r2, r3
 8002f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f56:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002f58:	2100      	movs	r1, #0
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f007 fb0d 	bl	800a57a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 8357 	beq.w	800361c <PCD_EP_ISR_Handler+0x75e>
 8002f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f040 8352 	bne.w	800361c <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	b292      	uxth	r2, r2
 8002f8c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002f98:	e340      	b.n	800361c <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8002fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002fac:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d032      	beq.n	800301e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4413      	add	r3, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fde:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8002fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fec:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	f005 fbde 	bl	80087b4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003004:	4013      	ands	r3, r2
 8003006:	823b      	strh	r3, [r7, #16]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	8a3a      	ldrh	r2, [r7, #16]
 800300e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003012:	b292      	uxth	r2, r2
 8003014:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f007 fa82 	bl	800a520 <HAL_PCD_SetupStageCallback>
 800301c:	e2fe      	b.n	800361c <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800301e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8003022:	2b00      	cmp	r3, #0
 8003024:	f280 82fa 	bge.w	800361c <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	b29a      	uxth	r2, r3
 8003030:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003034:	4013      	ands	r3, r2
 8003036:	83fb      	strh	r3, [r7, #30]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	8bfa      	ldrh	r2, [r7, #30]
 800303e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003042:	b292      	uxth	r2, r2
 8003044:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800304e:	b29b      	uxth	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	4413      	add	r3, r2
 8003060:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800306a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800306c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800306e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d019      	beq.n	80030aa <PCD_EP_ISR_Handler+0x1ec>
 8003076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d015      	beq.n	80030aa <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003084:	6959      	ldr	r1, [r3, #20]
 8003086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003088:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800308a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800308e:	b29b      	uxth	r3, r3
 8003090:	f005 fb90 	bl	80087b4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003096:	695a      	ldr	r2, [r3, #20]
 8003098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	441a      	add	r2, r3
 800309e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80030a2:	2100      	movs	r1, #0
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f007 fa4d 	bl	800a544 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80030b4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f040 82ad 	bne.w	800361c <PCD_EP_ISR_Handler+0x75e>
 80030c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80030ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030ce:	f000 82a5 	beq.w	800361c <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	61bb      	str	r3, [r7, #24]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	4413      	add	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	2b3e      	cmp	r3, #62	; 0x3e
 80030f8:	d918      	bls.n	800312c <PCD_EP_ISR_Handler+0x26e>
 80030fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	647b      	str	r3, [r7, #68]	; 0x44
 8003102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 031f 	and.w	r3, r3, #31
 800310a:	2b00      	cmp	r3, #0
 800310c:	d102      	bne.n	8003114 <PCD_EP_ISR_Handler+0x256>
 800310e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003110:	3b01      	subs	r3, #1
 8003112:	647b      	str	r3, [r7, #68]	; 0x44
 8003114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003116:	b29b      	uxth	r3, r3
 8003118:	029b      	lsls	r3, r3, #10
 800311a:	b29b      	uxth	r3, r3
 800311c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003124:	b29a      	uxth	r2, r3
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	801a      	strh	r2, [r3, #0]
 800312a:	e029      	b.n	8003180 <PCD_EP_ISR_Handler+0x2c2>
 800312c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d112      	bne.n	800315a <PCD_EP_ISR_Handler+0x29c>
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	b29b      	uxth	r3, r3
 800313a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800313e:	b29a      	uxth	r2, r3
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	801a      	strh	r2, [r3, #0]
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	b29b      	uxth	r3, r3
 800314a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800314e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003152:	b29a      	uxth	r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	801a      	strh	r2, [r3, #0]
 8003158:	e012      	b.n	8003180 <PCD_EP_ISR_Handler+0x2c2>
 800315a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	085b      	lsrs	r3, r3, #1
 8003160:	647b      	str	r3, [r7, #68]	; 0x44
 8003162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <PCD_EP_ISR_Handler+0x2b6>
 800316e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003170:	3301      	adds	r3, #1
 8003172:	647b      	str	r3, [r7, #68]	; 0x44
 8003174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003176:	b29b      	uxth	r3, r3
 8003178:	029b      	lsls	r3, r3, #10
 800317a:	b29a      	uxth	r2, r3
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	b29b      	uxth	r3, r3
 8003188:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800318c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003190:	827b      	strh	r3, [r7, #18]
 8003192:	8a7b      	ldrh	r3, [r7, #18]
 8003194:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003198:	827b      	strh	r3, [r7, #18]
 800319a:	8a7b      	ldrh	r3, [r7, #18]
 800319c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031a0:	827b      	strh	r3, [r7, #18]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	8a7b      	ldrh	r3, [r7, #18]
 80031a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	8013      	strh	r3, [r2, #0]
 80031bc:	e22e      	b.n	800361c <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031d2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f280 80f7 	bge.w	80033ca <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	f640 738f 	movw	r3, #3983	; 0xf8f
 80031f2:	4013      	ands	r3, r2
 80031f4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800320a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800320e:	b292      	uxth	r2, r2
 8003210:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003212:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	4413      	add	r3, r2
 8003226:	3304      	adds	r3, #4
 8003228:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800322a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800322c:	7b1b      	ldrb	r3, [r3, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d123      	bne.n	800327a <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800323a:	b29b      	uxth	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4413      	add	r3, r2
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6812      	ldr	r2, [r2, #0]
 800324a:	4413      	add	r3, r2
 800324c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003256:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800325a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 808e 	beq.w	8003380 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800326a:	6959      	ldr	r1, [r3, #20]
 800326c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800326e:	88da      	ldrh	r2, [r3, #6]
 8003270:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003274:	f005 fa9e 	bl	80087b4 <USB_ReadPMA>
 8003278:	e082      	b.n	8003380 <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800327a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800327c:	78db      	ldrb	r3, [r3, #3]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d10a      	bne.n	8003298 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003282:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003286:	461a      	mov	r2, r3
 8003288:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f9d4 	bl	8003638 <HAL_PCD_EP_DB_Receive>
 8003290:	4603      	mov	r3, r0
 8003292:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003296:	e073      	b.n	8003380 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	461a      	mov	r2, r3
 80032bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	441a      	add	r2, r3
 80032c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80032c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032d8:	b29b      	uxth	r3, r3
 80032da:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d022      	beq.n	800333c <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032fe:	b29b      	uxth	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4413      	add	r3, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6812      	ldr	r2, [r2, #0]
 800330e:	4413      	add	r3, r2
 8003310:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800331a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800331e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003322:	2b00      	cmp	r3, #0
 8003324:	d02c      	beq.n	8003380 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800332c:	6959      	ldr	r1, [r3, #20]
 800332e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003330:	891a      	ldrh	r2, [r3, #8]
 8003332:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003336:	f005 fa3d 	bl	80087b4 <USB_ReadPMA>
 800333a:	e021      	b.n	8003380 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003344:	b29b      	uxth	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4413      	add	r3, r2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	4413      	add	r3, r2
 8003356:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003360:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003364:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003368:	2b00      	cmp	r3, #0
 800336a:	d009      	beq.n	8003380 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6818      	ldr	r0, [r3, #0]
 8003370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003372:	6959      	ldr	r1, [r3, #20]
 8003374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003376:	895a      	ldrh	r2, [r3, #10]
 8003378:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800337c:	f005 fa1a 	bl	80087b4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003382:	69da      	ldr	r2, [r3, #28]
 8003384:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003388:	441a      	add	r2, r3
 800338a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800338c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800338e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003396:	441a      	add	r2, r3
 8003398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800339a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800339c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <PCD_EP_ISR_Handler+0x4f2>
 80033a4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80033a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d206      	bcs.n	80033be <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80033b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	4619      	mov	r1, r3
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f007 f8c4 	bl	800a544 <HAL_PCD_DataOutStageCallback>
 80033bc:	e005      	b.n	80033ca <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80033c4:	4618      	mov	r0, r3
 80033c6:	f003 fd22 	bl	8006e0e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80033ca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80033ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 8122 	beq.w	800361c <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 80033d8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	4413      	add	r3, r2
 80033ea:	3304      	adds	r3, #4
 80033ec:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003408:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	441a      	add	r2, r3
 800341a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800341e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003426:	b29b      	uxth	r3, r3
 8003428:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800342a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800342c:	78db      	ldrb	r3, [r3, #3]
 800342e:	2b01      	cmp	r3, #1
 8003430:	f040 80a2 	bne.w	8003578 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8003434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003436:	2200      	movs	r2, #0
 8003438:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800343a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800343c:	7b1b      	ldrb	r3, [r3, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 8093 	beq.w	800356a <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003444:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344c:	2b00      	cmp	r3, #0
 800344e:	d046      	beq.n	80034de <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003452:	785b      	ldrb	r3, [r3, #1]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d126      	bne.n	80034a6 <PCD_EP_ISR_Handler+0x5e8>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003466:	b29b      	uxth	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	4413      	add	r3, r2
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
 8003470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	00da      	lsls	r2, r3, #3
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	4413      	add	r3, r2
 800347a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800347e:	623b      	str	r3, [r7, #32]
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	b29b      	uxth	r3, r3
 8003486:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800348a:	b29a      	uxth	r2, r3
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	801a      	strh	r2, [r3, #0]
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	b29b      	uxth	r3, r3
 8003496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800349a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800349e:	b29a      	uxth	r2, r3
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	801a      	strh	r2, [r3, #0]
 80034a4:	e061      	b.n	800356a <PCD_EP_ISR_Handler+0x6ac>
 80034a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034a8:	785b      	ldrb	r3, [r3, #1]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d15d      	bne.n	800356a <PCD_EP_ISR_Handler+0x6ac>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034bc:	b29b      	uxth	r3, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c2:	4413      	add	r3, r2
 80034c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	00da      	lsls	r2, r3, #3
 80034cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ce:	4413      	add	r3, r2
 80034d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d8:	2200      	movs	r2, #0
 80034da:	801a      	strh	r2, [r3, #0]
 80034dc:	e045      	b.n	800356a <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034e6:	785b      	ldrb	r3, [r3, #1]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d126      	bne.n	800353a <PCD_EP_ISR_Handler+0x67c>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	637b      	str	r3, [r7, #52]	; 0x34
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003500:	4413      	add	r3, r2
 8003502:	637b      	str	r3, [r7, #52]	; 0x34
 8003504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	00da      	lsls	r2, r3, #3
 800350a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350c:	4413      	add	r3, r2
 800350e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003512:	633b      	str	r3, [r7, #48]	; 0x30
 8003514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	b29b      	uxth	r3, r3
 800351a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800351e:	b29a      	uxth	r2, r3
 8003520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003522:	801a      	strh	r2, [r3, #0]
 8003524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	b29b      	uxth	r3, r3
 800352a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800352e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003532:	b29a      	uxth	r2, r3
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	801a      	strh	r2, [r3, #0]
 8003538:	e017      	b.n	800356a <PCD_EP_ISR_Handler+0x6ac>
 800353a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800353c:	785b      	ldrb	r3, [r3, #1]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d113      	bne.n	800356a <PCD_EP_ISR_Handler+0x6ac>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800354a:	b29b      	uxth	r3, r3
 800354c:	461a      	mov	r2, r3
 800354e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003550:	4413      	add	r3, r2
 8003552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	00da      	lsls	r2, r3, #3
 800355a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800355c:	4413      	add	r3, r2
 800355e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003562:	63bb      	str	r3, [r7, #56]	; 0x38
 8003564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003566:	2200      	movs	r2, #0
 8003568:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800356a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	4619      	mov	r1, r3
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f007 f802 	bl	800a57a <HAL_PCD_DataInStageCallback>
 8003576:	e051      	b.n	800361c <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003578:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800357c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d144      	bne.n	800360e <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800358c:	b29b      	uxth	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	4413      	add	r3, r2
 800359e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80035ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ae:	699a      	ldr	r2, [r3, #24]
 80035b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d907      	bls.n	80035c8 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 80035b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ba:	699a      	ldr	r2, [r3, #24]
 80035bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80035c0:	1ad2      	subs	r2, r2, r3
 80035c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035c4:	619a      	str	r2, [r3, #24]
 80035c6:	e002      	b.n	80035ce <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 80035c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ca:	2200      	movs	r2, #0
 80035cc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80035ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	4619      	mov	r1, r3
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f006 ffcc 	bl	800a57a <HAL_PCD_DataInStageCallback>
 80035e2:	e01b      	b.n	800361c <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80035e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80035ec:	441a      	add	r2, r3
 80035ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80035f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f4:	69da      	ldr	r2, [r3, #28]
 80035f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80035fa:	441a      	add	r2, r3
 80035fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035fe:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003606:	4618      	mov	r0, r3
 8003608:	f003 fc01 	bl	8006e0e <USB_EPStartXfer>
 800360c:	e006      	b.n	800361c <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800360e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003612:	461a      	mov	r2, r3
 8003614:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f917 	bl	800384a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003624:	b29b      	uxth	r3, r3
 8003626:	b21b      	sxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	f6ff ac4d 	blt.w	8002ec8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3758      	adds	r7, #88	; 0x58
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	4613      	mov	r3, r2
 8003644:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d07c      	beq.n	800374a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003658:	b29b      	uxth	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4413      	add	r3, r2
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	4413      	add	r3, r2
 800366a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003674:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	8b7b      	ldrh	r3, [r7, #26]
 800367c:	429a      	cmp	r2, r3
 800367e:	d306      	bcc.n	800368e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	699a      	ldr	r2, [r3, #24]
 8003684:	8b7b      	ldrh	r3, [r7, #26]
 8003686:	1ad2      	subs	r2, r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	619a      	str	r2, [r3, #24]
 800368c:	e002      	b.n	8003694 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2200      	movs	r2, #0
 8003692:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d123      	bne.n	80036e4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	461a      	mov	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b6:	833b      	strh	r3, [r7, #24]
 80036b8:	8b3b      	ldrh	r3, [r7, #24]
 80036ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80036be:	833b      	strh	r3, [r7, #24]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	441a      	add	r2, r3
 80036ce:	8b3b      	ldrh	r3, [r7, #24]
 80036d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80036e4:	88fb      	ldrh	r3, [r7, #6]
 80036e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d01f      	beq.n	800372e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003708:	82fb      	strh	r3, [r7, #22]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	441a      	add	r2, r3
 8003718:	8afb      	ldrh	r3, [r7, #22]
 800371a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800371e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003726:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800372a:	b29b      	uxth	r3, r3
 800372c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800372e:	8b7b      	ldrh	r3, [r7, #26]
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 8085 	beq.w	8003840 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	6959      	ldr	r1, [r3, #20]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	891a      	ldrh	r2, [r3, #8]
 8003742:	8b7b      	ldrh	r3, [r7, #26]
 8003744:	f005 f836 	bl	80087b4 <USB_ReadPMA>
 8003748:	e07a      	b.n	8003840 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003752:	b29b      	uxth	r3, r3
 8003754:	461a      	mov	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	4413      	add	r3, r2
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	4413      	add	r3, r2
 8003764:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800376e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	699a      	ldr	r2, [r3, #24]
 8003774:	8b7b      	ldrh	r3, [r7, #26]
 8003776:	429a      	cmp	r2, r3
 8003778:	d306      	bcc.n	8003788 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	8b7b      	ldrh	r3, [r7, #26]
 8003780:	1ad2      	subs	r2, r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	619a      	str	r2, [r3, #24]
 8003786:	e002      	b.n	800378e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2200      	movs	r2, #0
 800378c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d123      	bne.n	80037de <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b0:	83fb      	strh	r3, [r7, #30]
 80037b2:	8bfb      	ldrh	r3, [r7, #30]
 80037b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80037b8:	83fb      	strh	r3, [r7, #30]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	441a      	add	r2, r3
 80037c8:	8bfb      	ldrh	r3, [r7, #30]
 80037ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037da:	b29b      	uxth	r3, r3
 80037dc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d11f      	bne.n	8003828 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003802:	83bb      	strh	r3, [r7, #28]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	441a      	add	r2, r3
 8003812:	8bbb      	ldrh	r3, [r7, #28]
 8003814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800381c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003820:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003824:	b29b      	uxth	r3, r3
 8003826:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003828:	8b7b      	ldrh	r3, [r7, #26]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d008      	beq.n	8003840 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	6959      	ldr	r1, [r3, #20]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	895a      	ldrh	r2, [r3, #10]
 800383a:	8b7b      	ldrh	r3, [r7, #26]
 800383c:	f004 ffba 	bl	80087b4 <USB_ReadPMA>
    }
  }

  return count;
 8003840:	8b7b      	ldrh	r3, [r7, #26]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3720      	adds	r7, #32
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b0a2      	sub	sp, #136	; 0x88
 800384e:	af00      	add	r7, sp, #0
 8003850:	60f8      	str	r0, [r7, #12]
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	4613      	mov	r3, r2
 8003856:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003858:	88fb      	ldrh	r3, [r7, #6]
 800385a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 81c5 	beq.w	8003bee <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800386c:	b29b      	uxth	r3, r3
 800386e:	461a      	mov	r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4413      	add	r3, r2
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	6812      	ldr	r2, [r2, #0]
 800387c:	4413      	add	r3, r2
 800387e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003888:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	699a      	ldr	r2, [r3, #24]
 8003890:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003894:	429a      	cmp	r2, r3
 8003896:	d907      	bls.n	80038a8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	699a      	ldr	r2, [r3, #24]
 800389c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038a0:	1ad2      	subs	r2, r2, r3
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	619a      	str	r2, [r3, #24]
 80038a6:	e002      	b.n	80038ae <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2200      	movs	r2, #0
 80038ac:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f040 80b9 	bne.w	8003a2a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	785b      	ldrb	r3, [r3, #1]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d126      	bne.n	800390e <HAL_PCD_EP_DB_Transmit+0xc4>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	461a      	mov	r2, r3
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	4413      	add	r3, r2
 80038d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	00da      	lsls	r2, r3, #3
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	4413      	add	r3, r2
 80038e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	801a      	strh	r2, [r3, #0]
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003906:	b29a      	uxth	r2, r3
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	801a      	strh	r2, [r3, #0]
 800390c:	e01a      	b.n	8003944 <HAL_PCD_EP_DB_Transmit+0xfa>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	785b      	ldrb	r3, [r3, #1]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d116      	bne.n	8003944 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	633b      	str	r3, [r7, #48]	; 0x30
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003924:	b29b      	uxth	r3, r3
 8003926:	461a      	mov	r2, r3
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	4413      	add	r3, r2
 800392c:	633b      	str	r3, [r7, #48]	; 0x30
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	00da      	lsls	r2, r3, #3
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	4413      	add	r3, r2
 8003938:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800393c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	2200      	movs	r2, #0
 8003942:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	623b      	str	r3, [r7, #32]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	785b      	ldrb	r3, [r3, #1]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d126      	bne.n	80039a0 <HAL_PCD_EP_DB_Transmit+0x156>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	61bb      	str	r3, [r7, #24]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003960:	b29b      	uxth	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	4413      	add	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	00da      	lsls	r2, r3, #3
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	4413      	add	r3, r2
 8003974:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	b29b      	uxth	r3, r3
 8003980:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003984:	b29a      	uxth	r2, r3
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	801a      	strh	r2, [r3, #0]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	b29b      	uxth	r3, r3
 8003990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003998:	b29a      	uxth	r2, r3
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	801a      	strh	r2, [r3, #0]
 800399e:	e017      	b.n	80039d0 <HAL_PCD_EP_DB_Transmit+0x186>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	785b      	ldrb	r3, [r3, #1]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d113      	bne.n	80039d0 <HAL_PCD_EP_DB_Transmit+0x186>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	4413      	add	r3, r2
 80039b8:	623b      	str	r3, [r7, #32]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	00da      	lsls	r2, r3, #3
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	4413      	add	r3, r2
 80039c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	2200      	movs	r2, #0
 80039ce:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	4619      	mov	r1, r3
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f006 fdcf 	bl	800a57a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039dc:	88fb      	ldrh	r3, [r7, #6]
 80039de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 82d2 	beq.w	8003f8c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a02:	827b      	strh	r3, [r7, #18]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	441a      	add	r2, r3
 8003a12:	8a7b      	ldrh	r3, [r7, #18]
 8003a14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	8013      	strh	r3, [r2, #0]
 8003a28:	e2b0      	b.n	8003f8c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a2a:	88fb      	ldrh	r3, [r7, #6]
 8003a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d021      	beq.n	8003a78 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	441a      	add	r2, r3
 8003a60:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	f040 8284 	bne.w	8003f8c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	695a      	ldr	r2, [r3, #20]
 8003a88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a8c:	441a      	add	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	69da      	ldr	r2, [r3, #28]
 8003a96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a9a:	441a      	add	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	6a1a      	ldr	r2, [r3, #32]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d309      	bcc.n	8003ac0 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	6a1a      	ldr	r2, [r3, #32]
 8003ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ab8:	1ad2      	subs	r2, r2, r3
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	621a      	str	r2, [r3, #32]
 8003abe:	e015      	b.n	8003aec <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d107      	bne.n	8003ad8 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8003ac8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003acc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ad6:	e009      	b.n	8003aec <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	785b      	ldrb	r3, [r3, #1]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d155      	bne.n	8003ba0 <HAL_PCD_EP_DB_Transmit+0x356>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	461a      	mov	r2, r3
 8003b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b08:	4413      	add	r3, r2
 8003b0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	00da      	lsls	r2, r3, #3
 8003b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b14:	4413      	add	r3, r2
 8003b16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b1e:	2b3e      	cmp	r3, #62	; 0x3e
 8003b20:	d916      	bls.n	8003b50 <HAL_PCD_EP_DB_Transmit+0x306>
 8003b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d102      	bne.n	8003b38 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b34:	3b01      	subs	r3, #1
 8003b36:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	029b      	lsls	r3, r3, #10
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4c:	801a      	strh	r2, [r3, #0]
 8003b4e:	e043      	b.n	8003bd8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d112      	bne.n	8003b7c <HAL_PCD_EP_DB_Transmit+0x332>
 8003b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b64:	801a      	strh	r2, [r3, #0]
 8003b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b78:	801a      	strh	r2, [r3, #0]
 8003b7a:	e02d      	b.n	8003bd8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b7e:	085b      	lsrs	r3, r3, #1
 8003b80:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <HAL_PCD_EP_DB_Transmit+0x348>
 8003b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b8e:	3301      	adds	r3, #1
 8003b90:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	029b      	lsls	r3, r3, #10
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9c:	801a      	strh	r2, [r3, #0]
 8003b9e:	e01b      	b.n	8003bd8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	785b      	ldrb	r3, [r3, #1]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d117      	bne.n	8003bd8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	643b      	str	r3, [r7, #64]	; 0x40
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	461a      	mov	r2, r3
 8003bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bbc:	4413      	add	r3, r2
 8003bbe:	643b      	str	r3, [r7, #64]	; 0x40
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	00da      	lsls	r2, r3, #3
 8003bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bc8:	4413      	add	r3, r2
 8003bca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6818      	ldr	r0, [r3, #0]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	6959      	ldr	r1, [r3, #20]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	891a      	ldrh	r2, [r3, #8]
 8003be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	f004 fda2 	bl	8008730 <USB_WritePMA>
 8003bec:	e1ce      	b.n	8003f8c <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4413      	add	r3, r2
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	6812      	ldr	r2, [r2, #0]
 8003c06:	4413      	add	r3, r2
 8003c08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c12:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	699a      	ldr	r2, [r3, #24]
 8003c1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d307      	bcc.n	8003c32 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	699a      	ldr	r2, [r3, #24]
 8003c26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c2a:	1ad2      	subs	r2, r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	619a      	str	r2, [r3, #24]
 8003c30:	e002      	b.n	8003c38 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2200      	movs	r2, #0
 8003c36:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f040 80c4 	bne.w	8003dca <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	785b      	ldrb	r3, [r3, #1]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d126      	bne.n	8003c98 <HAL_PCD_EP_DB_Transmit+0x44e>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c5e:	4413      	add	r3, r2
 8003c60:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	00da      	lsls	r2, r3, #3
 8003c68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003c70:	667b      	str	r3, [r7, #100]	; 0x64
 8003c72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c80:	801a      	strh	r2, [r3, #0]
 8003c82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c94:	801a      	strh	r2, [r3, #0]
 8003c96:	e01a      	b.n	8003cce <HAL_PCD_EP_DB_Transmit+0x484>
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	785b      	ldrb	r3, [r3, #1]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d116      	bne.n	8003cce <HAL_PCD_EP_DB_Transmit+0x484>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	673b      	str	r3, [r7, #112]	; 0x70
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cb4:	4413      	add	r3, r2
 8003cb6:	673b      	str	r3, [r7, #112]	; 0x70
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	00da      	lsls	r2, r3, #3
 8003cbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003cc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cca:	2200      	movs	r2, #0
 8003ccc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	785b      	ldrb	r3, [r3, #1]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d12f      	bne.n	8003d3c <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	00da      	lsls	r2, r3, #3
 8003d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d04:	4413      	add	r3, r2
 8003d06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d20:	801a      	strh	r2, [r3, #0]
 8003d22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d38:	801a      	strh	r2, [r3, #0]
 8003d3a:	e017      	b.n	8003d6c <HAL_PCD_EP_DB_Transmit+0x522>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	785b      	ldrb	r3, [r3, #1]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d113      	bne.n	8003d6c <HAL_PCD_EP_DB_Transmit+0x522>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	461a      	mov	r2, r3
 8003d50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d52:	4413      	add	r3, r2
 8003d54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	00da      	lsls	r2, r3, #3
 8003d5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d5e:	4413      	add	r3, r2
 8003d60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d64:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d68:	2200      	movs	r2, #0
 8003d6a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	4619      	mov	r1, r3
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f006 fc01 	bl	800a57a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d78:	88fb      	ldrh	r3, [r7, #6]
 8003d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f040 8104 	bne.w	8003f8c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	441a      	add	r2, r3
 8003db0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	8013      	strh	r3, [r2, #0]
 8003dc8:	e0e0      	b.n	8003f8c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003dca:	88fb      	ldrh	r3, [r7, #6]
 8003dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d121      	bne.n	8003e18 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dee:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	441a      	add	r2, r3
 8003e00:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	f040 80b4 	bne.w	8003f8c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e2c:	441a      	add	r2, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	69da      	ldr	r2, [r3, #28]
 8003e36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e3a:	441a      	add	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	6a1a      	ldr	r2, [r3, #32]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d309      	bcc.n	8003e60 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	6a1a      	ldr	r2, [r3, #32]
 8003e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e58:	1ad2      	subs	r2, r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	621a      	str	r2, [r3, #32]
 8003e5e:	e015      	b.n	8003e8c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d107      	bne.n	8003e78 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003e68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e6c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e76:	e009      	b.n	8003e8c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2200      	movs	r2, #0
 8003e82:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	663b      	str	r3, [r7, #96]	; 0x60
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	785b      	ldrb	r3, [r3, #1]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d155      	bne.n	8003f46 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	461a      	mov	r2, r3
 8003eac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eae:	4413      	add	r3, r2
 8003eb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	00da      	lsls	r2, r3, #3
 8003eb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eba:	4413      	add	r3, r2
 8003ebc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ec0:	657b      	str	r3, [r7, #84]	; 0x54
 8003ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ec4:	2b3e      	cmp	r3, #62	; 0x3e
 8003ec6:	d916      	bls.n	8003ef6 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eca:	095b      	lsrs	r3, r3, #5
 8003ecc:	677b      	str	r3, [r7, #116]	; 0x74
 8003ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d102      	bne.n	8003ede <HAL_PCD_EP_DB_Transmit+0x694>
 8003ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eda:	3b01      	subs	r3, #1
 8003edc:	677b      	str	r3, [r7, #116]	; 0x74
 8003ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	029b      	lsls	r3, r3, #10
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ef2:	801a      	strh	r2, [r3, #0]
 8003ef4:	e040      	b.n	8003f78 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d112      	bne.n	8003f22 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f0a:	801a      	strh	r2, [r3, #0]
 8003f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f1e:	801a      	strh	r2, [r3, #0]
 8003f20:	e02a      	b.n	8003f78 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f24:	085b      	lsrs	r3, r3, #1
 8003f26:	677b      	str	r3, [r7, #116]	; 0x74
 8003f28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f34:	3301      	adds	r3, #1
 8003f36:	677b      	str	r3, [r7, #116]	; 0x74
 8003f38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	029b      	lsls	r3, r3, #10
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f42:	801a      	strh	r2, [r3, #0]
 8003f44:	e018      	b.n	8003f78 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	785b      	ldrb	r3, [r3, #1]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d114      	bne.n	8003f78 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	461a      	mov	r2, r3
 8003f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f5c:	4413      	add	r3, r2
 8003f5e:	663b      	str	r3, [r7, #96]	; 0x60
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	00da      	lsls	r2, r3, #3
 8003f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f68:	4413      	add	r3, r2
 8003f6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f76:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	6959      	ldr	r1, [r3, #20]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	895a      	ldrh	r2, [r3, #10]
 8003f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	f004 fbd2 	bl	8008730 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fa6:	823b      	strh	r3, [r7, #16]
 8003fa8:	8a3b      	ldrh	r3, [r7, #16]
 8003faa:	f083 0310 	eor.w	r3, r3, #16
 8003fae:	823b      	strh	r3, [r7, #16]
 8003fb0:	8a3b      	ldrh	r3, [r7, #16]
 8003fb2:	f083 0320 	eor.w	r3, r3, #32
 8003fb6:	823b      	strh	r3, [r7, #16]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	441a      	add	r2, r3
 8003fc6:	8a3b      	ldrh	r3, [r7, #16]
 8003fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3788      	adds	r7, #136	; 0x88
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b087      	sub	sp, #28
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	60f8      	str	r0, [r7, #12]
 8003fee:	607b      	str	r3, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	817b      	strh	r3, [r7, #10]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003ff8:	897b      	ldrh	r3, [r7, #10]
 8003ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00c      	beq.n	800401e <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004004:	897b      	ldrh	r3, [r7, #10]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	3304      	adds	r3, #4
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	e00a      	b.n	8004034 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800401e:	897a      	ldrh	r2, [r7, #10]
 8004020:	4613      	mov	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4413      	add	r3, r2
 8004030:	3304      	adds	r3, #4
 8004032:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004034:	893b      	ldrh	r3, [r7, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d107      	bne.n	800404a <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2200      	movs	r2, #0
 800403e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	b29a      	uxth	r2, r3
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	80da      	strh	r2, [r3, #6]
 8004048:	e00b      	b.n	8004062 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2201      	movs	r2, #1
 800404e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	b29a      	uxth	r2, r3
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	0c1b      	lsrs	r3, r3, #16
 800405c:	b29a      	uxth	r2, r3
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	371c      	adds	r7, #28
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004094:	b29b      	uxth	r3, r3
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	f043 0302 	orr.w	r3, r3, #2
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80040c8:	4b04      	ldr	r3, [pc, #16]	; (80040dc <HAL_PWREx_GetVoltageRange+0x18>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40007000 	.word	0x40007000

080040e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ee:	d130      	bne.n	8004152 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80040f0:	4b23      	ldr	r3, [pc, #140]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040fc:	d038      	beq.n	8004170 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040fe:	4b20      	ldr	r3, [pc, #128]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004106:	4a1e      	ldr	r2, [pc, #120]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004108:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800410c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800410e:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2232      	movs	r2, #50	; 0x32
 8004114:	fb02 f303 	mul.w	r3, r2, r3
 8004118:	4a1b      	ldr	r2, [pc, #108]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800411a:	fba2 2303 	umull	r2, r3, r2, r3
 800411e:	0c9b      	lsrs	r3, r3, #18
 8004120:	3301      	adds	r3, #1
 8004122:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004124:	e002      	b.n	800412c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3b01      	subs	r3, #1
 800412a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800412c:	4b14      	ldr	r3, [pc, #80]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004138:	d102      	bne.n	8004140 <HAL_PWREx_ControlVoltageScaling+0x60>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1f2      	bne.n	8004126 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004140:	4b0f      	ldr	r3, [pc, #60]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414c:	d110      	bne.n	8004170 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e00f      	b.n	8004172 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004152:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800415a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800415e:	d007      	beq.n	8004170 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004160:	4b07      	ldr	r3, [pc, #28]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004168:	4a05      	ldr	r2, [pc, #20]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800416a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800416e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40007000 	.word	0x40007000
 8004184:	20000000 	.word	0x20000000
 8004188:	431bde83 	.word	0x431bde83

0800418c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004190:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	4a04      	ldr	r2, [pc, #16]	; (80041a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800419a:	6053      	str	r3, [r2, #4]
}
 800419c:	bf00      	nop
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	40007000 	.word	0x40007000

080041ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08a      	sub	sp, #40	; 0x28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	f000 bc4f 	b.w	8004a5e <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041c0:	4b97      	ldr	r3, [pc, #604]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 030c 	and.w	r3, r3, #12
 80041c8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041ca:	4b95      	ldr	r3, [pc, #596]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 80e6 	beq.w	80043ae <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d007      	beq.n	80041f8 <HAL_RCC_OscConfig+0x4c>
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	2b0c      	cmp	r3, #12
 80041ec:	f040 808d 	bne.w	800430a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	f040 8089 	bne.w	800430a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041f8:	4b89      	ldr	r3, [pc, #548]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d006      	beq.n	8004212 <HAL_RCC_OscConfig+0x66>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d102      	bne.n	8004212 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	f000 bc26 	b.w	8004a5e <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004216:	4b82      	ldr	r3, [pc, #520]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d004      	beq.n	800422c <HAL_RCC_OscConfig+0x80>
 8004222:	4b7f      	ldr	r3, [pc, #508]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800422a:	e005      	b.n	8004238 <HAL_RCC_OscConfig+0x8c>
 800422c:	4b7c      	ldr	r3, [pc, #496]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 800422e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004232:	091b      	lsrs	r3, r3, #4
 8004234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004238:	4293      	cmp	r3, r2
 800423a:	d224      	bcs.n	8004286 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fda1 	bl	8004d88 <RCC_SetFlashLatencyFromMSIRange>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	f000 bc06 	b.w	8004a5e <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004252:	4b73      	ldr	r3, [pc, #460]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a72      	ldr	r2, [pc, #456]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 8004258:	f043 0308 	orr.w	r3, r3, #8
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	4b70      	ldr	r3, [pc, #448]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	496d      	ldr	r1, [pc, #436]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 800426c:	4313      	orrs	r3, r2
 800426e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004270:	4b6b      	ldr	r3, [pc, #428]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	4968      	ldr	r1, [pc, #416]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 8004280:	4313      	orrs	r3, r2
 8004282:	604b      	str	r3, [r1, #4]
 8004284:	e025      	b.n	80042d2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004286:	4b66      	ldr	r3, [pc, #408]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a65      	ldr	r2, [pc, #404]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 800428c:	f043 0308 	orr.w	r3, r3, #8
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	4b63      	ldr	r3, [pc, #396]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	4960      	ldr	r1, [pc, #384]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042a4:	4b5e      	ldr	r3, [pc, #376]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	021b      	lsls	r3, r3, #8
 80042b2:	495b      	ldr	r1, [pc, #364]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d109      	bne.n	80042d2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fd60 	bl	8004d88 <RCC_SetFlashLatencyFromMSIRange>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e3c5      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042d2:	f000 fccd 	bl	8004c70 <HAL_RCC_GetSysClockFreq>
 80042d6:	4602      	mov	r2, r0
 80042d8:	4b51      	ldr	r3, [pc, #324]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	4950      	ldr	r1, [pc, #320]	; (8004424 <HAL_RCC_OscConfig+0x278>)
 80042e4:	5ccb      	ldrb	r3, [r1, r3]
 80042e6:	f003 031f 	and.w	r3, r3, #31
 80042ea:	fa22 f303 	lsr.w	r3, r2, r3
 80042ee:	4a4e      	ldr	r2, [pc, #312]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80042f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042f2:	4b4e      	ldr	r3, [pc, #312]	; (800442c <HAL_RCC_OscConfig+0x280>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fc fd42 	bl	8000d80 <HAL_InitTick>
 80042fc:	4603      	mov	r3, r0
 80042fe:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004300:	7dfb      	ldrb	r3, [r7, #23]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d052      	beq.n	80043ac <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8004306:	7dfb      	ldrb	r3, [r7, #23]
 8004308:	e3a9      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d032      	beq.n	8004378 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004312:	4b43      	ldr	r3, [pc, #268]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a42      	ldr	r2, [pc, #264]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800431e:	f7fc fd7f 	bl	8000e20 <HAL_GetTick>
 8004322:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004326:	f7fc fd7b 	bl	8000e20 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e392      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004338:	4b39      	ldr	r3, [pc, #228]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004344:	4b36      	ldr	r3, [pc, #216]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a35      	ldr	r2, [pc, #212]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 800434a:	f043 0308 	orr.w	r3, r3, #8
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	4b33      	ldr	r3, [pc, #204]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	4930      	ldr	r1, [pc, #192]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004362:	4b2f      	ldr	r3, [pc, #188]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	492b      	ldr	r1, [pc, #172]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 8004372:	4313      	orrs	r3, r2
 8004374:	604b      	str	r3, [r1, #4]
 8004376:	e01a      	b.n	80043ae <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004378:	4b29      	ldr	r3, [pc, #164]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a28      	ldr	r2, [pc, #160]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004384:	f7fc fd4c 	bl	8000e20 <HAL_GetTick>
 8004388:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800438c:	f7fc fd48 	bl	8000e20 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e35f      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800439e:	4b20      	ldr	r3, [pc, #128]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x1e0>
 80043aa:	e000      	b.n	80043ae <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d073      	beq.n	80044a2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d005      	beq.n	80043cc <HAL_RCC_OscConfig+0x220>
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	2b0c      	cmp	r3, #12
 80043c4:	d10e      	bne.n	80043e4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	2b03      	cmp	r3, #3
 80043ca:	d10b      	bne.n	80043e4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043cc:	4b14      	ldr	r3, [pc, #80]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d063      	beq.n	80044a0 <HAL_RCC_OscConfig+0x2f4>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d15f      	bne.n	80044a0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e33c      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ec:	d106      	bne.n	80043fc <HAL_RCC_OscConfig+0x250>
 80043ee:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a0b      	ldr	r2, [pc, #44]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 80043f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	e025      	b.n	8004448 <HAL_RCC_OscConfig+0x29c>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004404:	d114      	bne.n	8004430 <HAL_RCC_OscConfig+0x284>
 8004406:	4b06      	ldr	r3, [pc, #24]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a05      	ldr	r2, [pc, #20]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 800440c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	4b03      	ldr	r3, [pc, #12]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a02      	ldr	r2, [pc, #8]	; (8004420 <HAL_RCC_OscConfig+0x274>)
 8004418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	e013      	b.n	8004448 <HAL_RCC_OscConfig+0x29c>
 8004420:	40021000 	.word	0x40021000
 8004424:	0800ac8c 	.word	0x0800ac8c
 8004428:	20000000 	.word	0x20000000
 800442c:	20000004 	.word	0x20000004
 8004430:	4b8f      	ldr	r3, [pc, #572]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a8e      	ldr	r2, [pc, #568]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 8004436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	4b8c      	ldr	r3, [pc, #560]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a8b      	ldr	r2, [pc, #556]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 8004442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d013      	beq.n	8004478 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7fc fce6 	bl	8000e20 <HAL_GetTick>
 8004454:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004458:	f7fc fce2 	bl	8000e20 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	; 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e2f9      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800446a:	4b81      	ldr	r3, [pc, #516]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0x2ac>
 8004476:	e014      	b.n	80044a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fc fcd2 	bl	8000e20 <HAL_GetTick>
 800447c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004480:	f7fc fcce 	bl	8000e20 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b64      	cmp	r3, #100	; 0x64
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e2e5      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004492:	4b77      	ldr	r3, [pc, #476]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x2d4>
 800449e:	e000      	b.n	80044a2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d060      	beq.n	8004570 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_OscConfig+0x314>
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	2b0c      	cmp	r3, #12
 80044b8:	d119      	bne.n	80044ee <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d116      	bne.n	80044ee <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044c0:	4b6b      	ldr	r3, [pc, #428]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_RCC_OscConfig+0x32c>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e2c2      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d8:	4b65      	ldr	r3, [pc, #404]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	061b      	lsls	r3, r3, #24
 80044e6:	4962      	ldr	r1, [pc, #392]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ec:	e040      	b.n	8004570 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d023      	beq.n	800453e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044f6:	4b5e      	ldr	r3, [pc, #376]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a5d      	ldr	r2, [pc, #372]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 80044fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004502:	f7fc fc8d 	bl	8000e20 <HAL_GetTick>
 8004506:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800450a:	f7fc fc89 	bl	8000e20 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e2a0      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800451c:	4b54      	ldr	r3, [pc, #336]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0f0      	beq.n	800450a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004528:	4b51      	ldr	r3, [pc, #324]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	061b      	lsls	r3, r3, #24
 8004536:	494e      	ldr	r1, [pc, #312]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 8004538:	4313      	orrs	r3, r2
 800453a:	604b      	str	r3, [r1, #4]
 800453c:	e018      	b.n	8004570 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800453e:	4b4c      	ldr	r3, [pc, #304]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a4b      	ldr	r2, [pc, #300]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 8004544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454a:	f7fc fc69 	bl	8000e20 <HAL_GetTick>
 800454e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004552:	f7fc fc65 	bl	8000e20 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e27c      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004564:	4b42      	ldr	r3, [pc, #264]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1f0      	bne.n	8004552 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 8082 	beq.w	8004682 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d05f      	beq.n	8004646 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8004586:	4b3a      	ldr	r3, [pc, #232]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 8004588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800458c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699a      	ldr	r2, [r3, #24]
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	429a      	cmp	r2, r3
 800459a:	d037      	beq.n	800460c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d006      	beq.n	80045b4 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e254      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d01b      	beq.n	80045f6 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80045be:	4b2c      	ldr	r3, [pc, #176]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 80045c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c4:	4a2a      	ldr	r2, [pc, #168]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 80045c6:	f023 0301 	bic.w	r3, r3, #1
 80045ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045ce:	f7fc fc27 	bl	8000e20 <HAL_GetTick>
 80045d2:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045d6:	f7fc fc23 	bl	8000e20 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b11      	cmp	r3, #17
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e23a      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045e8:	4b21      	ldr	r3, [pc, #132]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 80045ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1ef      	bne.n	80045d6 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80045f6:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 80045f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045fc:	f023 0210 	bic.w	r2, r3, #16
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	491a      	ldr	r1, [pc, #104]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800460c:	4b18      	ldr	r3, [pc, #96]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 800460e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004612:	4a17      	ldr	r2, [pc, #92]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 8004614:	f043 0301 	orr.w	r3, r3, #1
 8004618:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461c:	f7fc fc00 	bl	8000e20 <HAL_GetTick>
 8004620:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004624:	f7fc fbfc 	bl	8000e20 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b11      	cmp	r3, #17
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e213      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004636:	4b0e      	ldr	r3, [pc, #56]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 8004638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0ef      	beq.n	8004624 <HAL_RCC_OscConfig+0x478>
 8004644:	e01d      	b.n	8004682 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004646:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 8004648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800464c:	4a08      	ldr	r2, [pc, #32]	; (8004670 <HAL_RCC_OscConfig+0x4c4>)
 800464e:	f023 0301 	bic.w	r3, r3, #1
 8004652:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004656:	f7fc fbe3 	bl	8000e20 <HAL_GetTick>
 800465a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800465c:	e00a      	b.n	8004674 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800465e:	f7fc fbdf 	bl	8000e20 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b11      	cmp	r3, #17
 800466a:	d903      	bls.n	8004674 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e1f6      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
 8004670:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004674:	4ba9      	ldr	r3, [pc, #676]	; (800491c <HAL_RCC_OscConfig+0x770>)
 8004676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1ed      	bne.n	800465e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 80bd 	beq.w	800480a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004690:	2300      	movs	r3, #0
 8004692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004696:	4ba1      	ldr	r3, [pc, #644]	; (800491c <HAL_RCC_OscConfig+0x770>)
 8004698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10e      	bne.n	80046c0 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a2:	4b9e      	ldr	r3, [pc, #632]	; (800491c <HAL_RCC_OscConfig+0x770>)
 80046a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a6:	4a9d      	ldr	r2, [pc, #628]	; (800491c <HAL_RCC_OscConfig+0x770>)
 80046a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ac:	6593      	str	r3, [r2, #88]	; 0x58
 80046ae:	4b9b      	ldr	r3, [pc, #620]	; (800491c <HAL_RCC_OscConfig+0x770>)
 80046b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80046ba:	2301      	movs	r3, #1
 80046bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046c0:	4b97      	ldr	r3, [pc, #604]	; (8004920 <HAL_RCC_OscConfig+0x774>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d118      	bne.n	80046fe <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046cc:	4b94      	ldr	r3, [pc, #592]	; (8004920 <HAL_RCC_OscConfig+0x774>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a93      	ldr	r2, [pc, #588]	; (8004920 <HAL_RCC_OscConfig+0x774>)
 80046d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d8:	f7fc fba2 	bl	8000e20 <HAL_GetTick>
 80046dc:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e0:	f7fc fb9e 	bl	8000e20 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e1b5      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f2:	4b8b      	ldr	r3, [pc, #556]	; (8004920 <HAL_RCC_OscConfig+0x774>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0f0      	beq.n	80046e0 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d02c      	beq.n	8004764 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800470a:	4b84      	ldr	r3, [pc, #528]	; (800491c <HAL_RCC_OscConfig+0x770>)
 800470c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004710:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471c:	497f      	ldr	r1, [pc, #508]	; (800491c <HAL_RCC_OscConfig+0x770>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d010      	beq.n	8004752 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004730:	4b7a      	ldr	r3, [pc, #488]	; (800491c <HAL_RCC_OscConfig+0x770>)
 8004732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004736:	4a79      	ldr	r2, [pc, #484]	; (800491c <HAL_RCC_OscConfig+0x770>)
 8004738:	f043 0304 	orr.w	r3, r3, #4
 800473c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004740:	4b76      	ldr	r3, [pc, #472]	; (800491c <HAL_RCC_OscConfig+0x770>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004746:	4a75      	ldr	r2, [pc, #468]	; (800491c <HAL_RCC_OscConfig+0x770>)
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004750:	e018      	b.n	8004784 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004752:	4b72      	ldr	r3, [pc, #456]	; (800491c <HAL_RCC_OscConfig+0x770>)
 8004754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004758:	4a70      	ldr	r2, [pc, #448]	; (800491c <HAL_RCC_OscConfig+0x770>)
 800475a:	f043 0301 	orr.w	r3, r3, #1
 800475e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004762:	e00f      	b.n	8004784 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004764:	4b6d      	ldr	r3, [pc, #436]	; (800491c <HAL_RCC_OscConfig+0x770>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476a:	4a6c      	ldr	r2, [pc, #432]	; (800491c <HAL_RCC_OscConfig+0x770>)
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004774:	4b69      	ldr	r3, [pc, #420]	; (800491c <HAL_RCC_OscConfig+0x770>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477a:	4a68      	ldr	r2, [pc, #416]	; (800491c <HAL_RCC_OscConfig+0x770>)
 800477c:	f023 0304 	bic.w	r3, r3, #4
 8004780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d016      	beq.n	80047ba <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478c:	f7fc fb48 	bl	8000e20 <HAL_GetTick>
 8004790:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004792:	e00a      	b.n	80047aa <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004794:	f7fc fb44 	bl	8000e20 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e159      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047aa:	4b5c      	ldr	r3, [pc, #368]	; (800491c <HAL_RCC_OscConfig+0x770>)
 80047ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0ed      	beq.n	8004794 <HAL_RCC_OscConfig+0x5e8>
 80047b8:	e01d      	b.n	80047f6 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ba:	f7fc fb31 	bl	8000e20 <HAL_GetTick>
 80047be:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047c0:	e00a      	b.n	80047d8 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c2:	f7fc fb2d 	bl	8000e20 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e142      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047d8:	4b50      	ldr	r3, [pc, #320]	; (800491c <HAL_RCC_OscConfig+0x770>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1ed      	bne.n	80047c2 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80047e6:	4b4d      	ldr	r3, [pc, #308]	; (800491c <HAL_RCC_OscConfig+0x770>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ec:	4a4b      	ldr	r2, [pc, #300]	; (800491c <HAL_RCC_OscConfig+0x770>)
 80047ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d105      	bne.n	800480a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047fe:	4b47      	ldr	r3, [pc, #284]	; (800491c <HAL_RCC_OscConfig+0x770>)
 8004800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004802:	4a46      	ldr	r2, [pc, #280]	; (800491c <HAL_RCC_OscConfig+0x770>)
 8004804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004808:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b00      	cmp	r3, #0
 8004814:	d03c      	beq.n	8004890 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481a:	2b00      	cmp	r3, #0
 800481c:	d01c      	beq.n	8004858 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800481e:	4b3f      	ldr	r3, [pc, #252]	; (800491c <HAL_RCC_OscConfig+0x770>)
 8004820:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004824:	4a3d      	ldr	r2, [pc, #244]	; (800491c <HAL_RCC_OscConfig+0x770>)
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482e:	f7fc faf7 	bl	8000e20 <HAL_GetTick>
 8004832:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004836:	f7fc faf3 	bl	8000e20 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e10a      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004848:	4b34      	ldr	r3, [pc, #208]	; (800491c <HAL_RCC_OscConfig+0x770>)
 800484a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0ef      	beq.n	8004836 <HAL_RCC_OscConfig+0x68a>
 8004856:	e01b      	b.n	8004890 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004858:	4b30      	ldr	r3, [pc, #192]	; (800491c <HAL_RCC_OscConfig+0x770>)
 800485a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800485e:	4a2f      	ldr	r2, [pc, #188]	; (800491c <HAL_RCC_OscConfig+0x770>)
 8004860:	f023 0301 	bic.w	r3, r3, #1
 8004864:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004868:	f7fc fada 	bl	8000e20 <HAL_GetTick>
 800486c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004870:	f7fc fad6 	bl	8000e20 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e0ed      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004882:	4b26      	ldr	r3, [pc, #152]	; (800491c <HAL_RCC_OscConfig+0x770>)
 8004884:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1ef      	bne.n	8004870 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 80e1 	beq.w	8004a5c <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	2b02      	cmp	r3, #2
 80048a0:	f040 80b5 	bne.w	8004a0e <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80048a4:	4b1d      	ldr	r3, [pc, #116]	; (800491c <HAL_RCC_OscConfig+0x770>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	f003 0203 	and.w	r2, r3, #3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d124      	bne.n	8004902 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c2:	3b01      	subs	r3, #1
 80048c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d11b      	bne.n	8004902 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d113      	bne.n	8004902 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e4:	085b      	lsrs	r3, r3, #1
 80048e6:	3b01      	subs	r3, #1
 80048e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d109      	bne.n	8004902 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	085b      	lsrs	r3, r3, #1
 80048fa:	3b01      	subs	r3, #1
 80048fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048fe:	429a      	cmp	r2, r3
 8004900:	d05f      	beq.n	80049c2 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	2b0c      	cmp	r3, #12
 8004906:	d05a      	beq.n	80049be <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004908:	4b04      	ldr	r3, [pc, #16]	; (800491c <HAL_RCC_OscConfig+0x770>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a03      	ldr	r2, [pc, #12]	; (800491c <HAL_RCC_OscConfig+0x770>)
 800490e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004912:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004914:	f7fc fa84 	bl	8000e20 <HAL_GetTick>
 8004918:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800491a:	e00c      	b.n	8004936 <HAL_RCC_OscConfig+0x78a>
 800491c:	40021000 	.word	0x40021000
 8004920:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004924:	f7fc fa7c 	bl	8000e20 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e093      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004936:	4b4c      	ldr	r3, [pc, #304]	; (8004a68 <HAL_RCC_OscConfig+0x8bc>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004942:	4b49      	ldr	r3, [pc, #292]	; (8004a68 <HAL_RCC_OscConfig+0x8bc>)
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	4b49      	ldr	r3, [pc, #292]	; (8004a6c <HAL_RCC_OscConfig+0x8c0>)
 8004948:	4013      	ands	r3, r2
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004952:	3a01      	subs	r2, #1
 8004954:	0112      	lsls	r2, r2, #4
 8004956:	4311      	orrs	r1, r2
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800495c:	0212      	lsls	r2, r2, #8
 800495e:	4311      	orrs	r1, r2
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004964:	0852      	lsrs	r2, r2, #1
 8004966:	3a01      	subs	r2, #1
 8004968:	0552      	lsls	r2, r2, #21
 800496a:	4311      	orrs	r1, r2
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004970:	0852      	lsrs	r2, r2, #1
 8004972:	3a01      	subs	r2, #1
 8004974:	0652      	lsls	r2, r2, #25
 8004976:	430a      	orrs	r2, r1
 8004978:	493b      	ldr	r1, [pc, #236]	; (8004a68 <HAL_RCC_OscConfig+0x8bc>)
 800497a:	4313      	orrs	r3, r2
 800497c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800497e:	4b3a      	ldr	r3, [pc, #232]	; (8004a68 <HAL_RCC_OscConfig+0x8bc>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a39      	ldr	r2, [pc, #228]	; (8004a68 <HAL_RCC_OscConfig+0x8bc>)
 8004984:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004988:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800498a:	4b37      	ldr	r3, [pc, #220]	; (8004a68 <HAL_RCC_OscConfig+0x8bc>)
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	4a36      	ldr	r2, [pc, #216]	; (8004a68 <HAL_RCC_OscConfig+0x8bc>)
 8004990:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004994:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004996:	f7fc fa43 	bl	8000e20 <HAL_GetTick>
 800499a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800499c:	e008      	b.n	80049b0 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800499e:	f7fc fa3f 	bl	8000e20 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e056      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b0:	4b2d      	ldr	r3, [pc, #180]	; (8004a68 <HAL_RCC_OscConfig+0x8bc>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0f0      	beq.n	800499e <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049bc:	e04e      	b.n	8004a5c <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e04d      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049c2:	4b29      	ldr	r3, [pc, #164]	; (8004a68 <HAL_RCC_OscConfig+0x8bc>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d146      	bne.n	8004a5c <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049ce:	4b26      	ldr	r3, [pc, #152]	; (8004a68 <HAL_RCC_OscConfig+0x8bc>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a25      	ldr	r2, [pc, #148]	; (8004a68 <HAL_RCC_OscConfig+0x8bc>)
 80049d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049d8:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049da:	4b23      	ldr	r3, [pc, #140]	; (8004a68 <HAL_RCC_OscConfig+0x8bc>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	4a22      	ldr	r2, [pc, #136]	; (8004a68 <HAL_RCC_OscConfig+0x8bc>)
 80049e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049e4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049e6:	f7fc fa1b 	bl	8000e20 <HAL_GetTick>
 80049ea:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ec:	e008      	b.n	8004a00 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ee:	f7fc fa17 	bl	8000e20 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e02e      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a00:	4b19      	ldr	r3, [pc, #100]	; (8004a68 <HAL_RCC_OscConfig+0x8bc>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0f0      	beq.n	80049ee <HAL_RCC_OscConfig+0x842>
 8004a0c:	e026      	b.n	8004a5c <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	2b0c      	cmp	r3, #12
 8004a12:	d021      	beq.n	8004a58 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a14:	4b14      	ldr	r3, [pc, #80]	; (8004a68 <HAL_RCC_OscConfig+0x8bc>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a13      	ldr	r2, [pc, #76]	; (8004a68 <HAL_RCC_OscConfig+0x8bc>)
 8004a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a20:	f7fc f9fe 	bl	8000e20 <HAL_GetTick>
 8004a24:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a28:	f7fc f9fa 	bl	8000e20 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e011      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <HAL_RCC_OscConfig+0x8bc>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f0      	bne.n	8004a28 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8004a46:	4b08      	ldr	r3, [pc, #32]	; (8004a68 <HAL_RCC_OscConfig+0x8bc>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	4a07      	ldr	r2, [pc, #28]	; (8004a68 <HAL_RCC_OscConfig+0x8bc>)
 8004a4c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004a50:	f023 0303 	bic.w	r3, r3, #3
 8004a54:	60d3      	str	r3, [r2, #12]
 8004a56:	e001      	b.n	8004a5c <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e000      	b.n	8004a5e <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3728      	adds	r7, #40	; 0x28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	f99f808c 	.word	0xf99f808c

08004a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e0e7      	b.n	8004c54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a84:	4b75      	ldr	r3, [pc, #468]	; (8004c5c <HAL_RCC_ClockConfig+0x1ec>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d910      	bls.n	8004ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a92:	4b72      	ldr	r3, [pc, #456]	; (8004c5c <HAL_RCC_ClockConfig+0x1ec>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f023 0207 	bic.w	r2, r3, #7
 8004a9a:	4970      	ldr	r1, [pc, #448]	; (8004c5c <HAL_RCC_ClockConfig+0x1ec>)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa2:	4b6e      	ldr	r3, [pc, #440]	; (8004c5c <HAL_RCC_ClockConfig+0x1ec>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0cf      	b.n	8004c54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d010      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	4b66      	ldr	r3, [pc, #408]	; (8004c60 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d908      	bls.n	8004ae2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ad0:	4b63      	ldr	r3, [pc, #396]	; (8004c60 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	4960      	ldr	r1, [pc, #384]	; (8004c60 <HAL_RCC_ClockConfig+0x1f0>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d04c      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d107      	bne.n	8004b06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af6:	4b5a      	ldr	r3, [pc, #360]	; (8004c60 <HAL_RCC_ClockConfig+0x1f0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d121      	bne.n	8004b46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e0a6      	b.n	8004c54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d107      	bne.n	8004b1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b0e:	4b54      	ldr	r3, [pc, #336]	; (8004c60 <HAL_RCC_ClockConfig+0x1f0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d115      	bne.n	8004b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e09a      	b.n	8004c54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d107      	bne.n	8004b36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b26:	4b4e      	ldr	r3, [pc, #312]	; (8004c60 <HAL_RCC_ClockConfig+0x1f0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d109      	bne.n	8004b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e08e      	b.n	8004c54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b36:	4b4a      	ldr	r3, [pc, #296]	; (8004c60 <HAL_RCC_ClockConfig+0x1f0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e086      	b.n	8004c54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b46:	4b46      	ldr	r3, [pc, #280]	; (8004c60 <HAL_RCC_ClockConfig+0x1f0>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f023 0203 	bic.w	r2, r3, #3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	4943      	ldr	r1, [pc, #268]	; (8004c60 <HAL_RCC_ClockConfig+0x1f0>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b58:	f7fc f962 	bl	8000e20 <HAL_GetTick>
 8004b5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b5e:	e00a      	b.n	8004b76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b60:	f7fc f95e 	bl	8000e20 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e06e      	b.n	8004c54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b76:	4b3a      	ldr	r3, [pc, #232]	; (8004c60 <HAL_RCC_ClockConfig+0x1f0>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 020c 	and.w	r2, r3, #12
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d1eb      	bne.n	8004b60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d010      	beq.n	8004bb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	4b31      	ldr	r3, [pc, #196]	; (8004c60 <HAL_RCC_ClockConfig+0x1f0>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d208      	bcs.n	8004bb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ba4:	4b2e      	ldr	r3, [pc, #184]	; (8004c60 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	492b      	ldr	r1, [pc, #172]	; (8004c60 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bb6:	4b29      	ldr	r3, [pc, #164]	; (8004c5c <HAL_RCC_ClockConfig+0x1ec>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d210      	bcs.n	8004be6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc4:	4b25      	ldr	r3, [pc, #148]	; (8004c5c <HAL_RCC_ClockConfig+0x1ec>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f023 0207 	bic.w	r2, r3, #7
 8004bcc:	4923      	ldr	r1, [pc, #140]	; (8004c5c <HAL_RCC_ClockConfig+0x1ec>)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd4:	4b21      	ldr	r3, [pc, #132]	; (8004c5c <HAL_RCC_ClockConfig+0x1ec>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d001      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e036      	b.n	8004c54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0304 	and.w	r3, r3, #4
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d008      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bf2:	4b1b      	ldr	r3, [pc, #108]	; (8004c60 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	4918      	ldr	r1, [pc, #96]	; (8004c60 <HAL_RCC_ClockConfig+0x1f0>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0308 	and.w	r3, r3, #8
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d009      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c10:	4b13      	ldr	r3, [pc, #76]	; (8004c60 <HAL_RCC_ClockConfig+0x1f0>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	4910      	ldr	r1, [pc, #64]	; (8004c60 <HAL_RCC_ClockConfig+0x1f0>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c24:	f000 f824 	bl	8004c70 <HAL_RCC_GetSysClockFreq>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <HAL_RCC_ClockConfig+0x1f0>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	091b      	lsrs	r3, r3, #4
 8004c30:	f003 030f 	and.w	r3, r3, #15
 8004c34:	490b      	ldr	r1, [pc, #44]	; (8004c64 <HAL_RCC_ClockConfig+0x1f4>)
 8004c36:	5ccb      	ldrb	r3, [r1, r3]
 8004c38:	f003 031f 	and.w	r3, r3, #31
 8004c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c40:	4a09      	ldr	r2, [pc, #36]	; (8004c68 <HAL_RCC_ClockConfig+0x1f8>)
 8004c42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c44:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <HAL_RCC_ClockConfig+0x1fc>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fc f899 	bl	8000d80 <HAL_InitTick>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c52:	7afb      	ldrb	r3, [r7, #11]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40022000 	.word	0x40022000
 8004c60:	40021000 	.word	0x40021000
 8004c64:	0800ac8c 	.word	0x0800ac8c
 8004c68:	20000000 	.word	0x20000000
 8004c6c:	20000004 	.word	0x20000004

08004c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b089      	sub	sp, #36	; 0x24
 8004c74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c7e:	4b3e      	ldr	r3, [pc, #248]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 030c 	and.w	r3, r3, #12
 8004c86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c88:	4b3b      	ldr	r3, [pc, #236]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0303 	and.w	r3, r3, #3
 8004c90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	2b0c      	cmp	r3, #12
 8004c9c:	d121      	bne.n	8004ce2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d11e      	bne.n	8004ce2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ca4:	4b34      	ldr	r3, [pc, #208]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d107      	bne.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004cb0:	4b31      	ldr	r3, [pc, #196]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cb6:	0a1b      	lsrs	r3, r3, #8
 8004cb8:	f003 030f 	and.w	r3, r3, #15
 8004cbc:	61fb      	str	r3, [r7, #28]
 8004cbe:	e005      	b.n	8004ccc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004cc0:	4b2d      	ldr	r3, [pc, #180]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	091b      	lsrs	r3, r3, #4
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ccc:	4a2b      	ldr	r2, [pc, #172]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10d      	bne.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ce0:	e00a      	b.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d102      	bne.n	8004cee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ce8:	4b25      	ldr	r3, [pc, #148]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cea:	61bb      	str	r3, [r7, #24]
 8004cec:	e004      	b.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d101      	bne.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cf4:	4b23      	ldr	r3, [pc, #140]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cf6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	2b0c      	cmp	r3, #12
 8004cfc:	d134      	bne.n	8004d68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cfe:	4b1e      	ldr	r3, [pc, #120]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d003      	beq.n	8004d16 <HAL_RCC_GetSysClockFreq+0xa6>
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b03      	cmp	r3, #3
 8004d12:	d003      	beq.n	8004d1c <HAL_RCC_GetSysClockFreq+0xac>
 8004d14:	e005      	b.n	8004d22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d16:	4b1a      	ldr	r3, [pc, #104]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d18:	617b      	str	r3, [r7, #20]
      break;
 8004d1a:	e005      	b.n	8004d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d1c:	4b19      	ldr	r3, [pc, #100]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d1e:	617b      	str	r3, [r7, #20]
      break;
 8004d20:	e002      	b.n	8004d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	617b      	str	r3, [r7, #20]
      break;
 8004d26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d28:	4b13      	ldr	r3, [pc, #76]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	091b      	lsrs	r3, r3, #4
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	3301      	adds	r3, #1
 8004d34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d36:	4b10      	ldr	r3, [pc, #64]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	0a1b      	lsrs	r3, r3, #8
 8004d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	fb03 f202 	mul.w	r2, r3, r2
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d4e:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	0e5b      	lsrs	r3, r3, #25
 8004d54:	f003 0303 	and.w	r3, r3, #3
 8004d58:	3301      	adds	r3, #1
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d68:	69bb      	ldr	r3, [r7, #24]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3724      	adds	r7, #36	; 0x24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	0800ac9c 	.word	0x0800ac9c
 8004d80:	00f42400 	.word	0x00f42400
 8004d84:	007a1200 	.word	0x007a1200

08004d88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d90:	2300      	movs	r3, #0
 8004d92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d94:	4b2a      	ldr	r3, [pc, #168]	; (8004e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004da0:	f7ff f990 	bl	80040c4 <HAL_PWREx_GetVoltageRange>
 8004da4:	6178      	str	r0, [r7, #20]
 8004da6:	e014      	b.n	8004dd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004da8:	4b25      	ldr	r3, [pc, #148]	; (8004e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dac:	4a24      	ldr	r2, [pc, #144]	; (8004e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db2:	6593      	str	r3, [r2, #88]	; 0x58
 8004db4:	4b22      	ldr	r3, [pc, #136]	; (8004e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004dc0:	f7ff f980 	bl	80040c4 <HAL_PWREx_GetVoltageRange>
 8004dc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004dc6:	4b1e      	ldr	r3, [pc, #120]	; (8004e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dca:	4a1d      	ldr	r2, [pc, #116]	; (8004e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd8:	d10b      	bne.n	8004df2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b80      	cmp	r3, #128	; 0x80
 8004dde:	d919      	bls.n	8004e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2ba0      	cmp	r3, #160	; 0xa0
 8004de4:	d902      	bls.n	8004dec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004de6:	2302      	movs	r3, #2
 8004de8:	613b      	str	r3, [r7, #16]
 8004dea:	e013      	b.n	8004e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004dec:	2301      	movs	r3, #1
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	e010      	b.n	8004e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b80      	cmp	r3, #128	; 0x80
 8004df6:	d902      	bls.n	8004dfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004df8:	2303      	movs	r3, #3
 8004dfa:	613b      	str	r3, [r7, #16]
 8004dfc:	e00a      	b.n	8004e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b80      	cmp	r3, #128	; 0x80
 8004e02:	d102      	bne.n	8004e0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e04:	2302      	movs	r3, #2
 8004e06:	613b      	str	r3, [r7, #16]
 8004e08:	e004      	b.n	8004e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b70      	cmp	r3, #112	; 0x70
 8004e0e:	d101      	bne.n	8004e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e10:	2301      	movs	r3, #1
 8004e12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e14:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f023 0207 	bic.w	r2, r3, #7
 8004e1c:	4909      	ldr	r1, [pc, #36]	; (8004e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e24:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d001      	beq.n	8004e36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40021000 	.word	0x40021000
 8004e44:	40022000 	.word	0x40022000

08004e48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e50:	2300      	movs	r3, #0
 8004e52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e54:	2300      	movs	r3, #0
 8004e56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 809e 	beq.w	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e66:	2300      	movs	r3, #0
 8004e68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e6a:	4b46      	ldr	r3, [pc, #280]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004e76:	2301      	movs	r3, #1
 8004e78:	e000      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00d      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e80:	4b40      	ldr	r3, [pc, #256]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e84:	4a3f      	ldr	r2, [pc, #252]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8004e8c:	4b3d      	ldr	r3, [pc, #244]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e9c:	4b3a      	ldr	r3, [pc, #232]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a39      	ldr	r2, [pc, #228]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ea8:	f7fb ffba 	bl	8000e20 <HAL_GetTick>
 8004eac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004eae:	e009      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb0:	f7fb ffb6 	bl	8000e20 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d902      	bls.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	74fb      	strb	r3, [r7, #19]
        break;
 8004ec2:	e005      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ec4:	4b30      	ldr	r3, [pc, #192]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0ef      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8004ed0:	7cfb      	ldrb	r3, [r7, #19]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d15a      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ed6:	4b2b      	ldr	r3, [pc, #172]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01e      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d019      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ef2:	4b24      	ldr	r3, [pc, #144]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004efc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004efe:	4b21      	ldr	r3, [pc, #132]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f04:	4a1f      	ldr	r2, [pc, #124]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f0e:	4b1d      	ldr	r3, [pc, #116]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f14:	4a1b      	ldr	r2, [pc, #108]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f1e:	4a19      	ldr	r2, [pc, #100]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d016      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f30:	f7fb ff76 	bl	8000e20 <HAL_GetTick>
 8004f34:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f36:	e00b      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f38:	f7fb ff72 	bl	8000e20 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d902      	bls.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	74fb      	strb	r3, [r7, #19]
            break;
 8004f4e:	e006      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f50:	4b0c      	ldr	r3, [pc, #48]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0ec      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8004f5e:	7cfb      	ldrb	r3, [r7, #19]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10b      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f64:	4b07      	ldr	r3, [pc, #28]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	4904      	ldr	r1, [pc, #16]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f7a:	e009      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f7c:	7cfb      	ldrb	r3, [r7, #19]
 8004f7e:	74bb      	strb	r3, [r7, #18]
 8004f80:	e006      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004f82:	bf00      	nop
 8004f84:	40021000 	.word	0x40021000
 8004f88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f8c:	7cfb      	ldrb	r3, [r7, #19]
 8004f8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f90:	7c7b      	ldrb	r3, [r7, #17]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d105      	bne.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f96:	4b6e      	ldr	r3, [pc, #440]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9a:	4a6d      	ldr	r2, [pc, #436]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fa0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fae:	4b68      	ldr	r3, [pc, #416]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb4:	f023 0203 	bic.w	r2, r3, #3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	4964      	ldr	r1, [pc, #400]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fd0:	4b5f      	ldr	r3, [pc, #380]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd6:	f023 020c 	bic.w	r2, r3, #12
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	495c      	ldr	r1, [pc, #368]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ff2:	4b57      	ldr	r3, [pc, #348]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	4953      	ldr	r1, [pc, #332]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0320 	and.w	r3, r3, #32
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005014:	4b4e      	ldr	r3, [pc, #312]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	494b      	ldr	r1, [pc, #300]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005024:	4313      	orrs	r3, r2
 8005026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005036:	4b46      	ldr	r3, [pc, #280]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	4942      	ldr	r1, [pc, #264]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005058:	4b3d      	ldr	r3, [pc, #244]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800505a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	493a      	ldr	r1, [pc, #232]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800507a:	4b35      	ldr	r3, [pc, #212]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800507c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005080:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	4931      	ldr	r1, [pc, #196]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800508a:	4313      	orrs	r3, r2
 800508c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800509c:	4b2c      	ldr	r3, [pc, #176]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800509e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	4929      	ldr	r1, [pc, #164]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050be:	4b24      	ldr	r3, [pc, #144]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80050c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	4920      	ldr	r1, [pc, #128]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d015      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050e0:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80050e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ee:	4918      	ldr	r1, [pc, #96]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050fe:	d105      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005100:	4b13      	ldr	r3, [pc, #76]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	4a12      	ldr	r2, [pc, #72]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005106:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800510a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d015      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005118:	4b0d      	ldr	r3, [pc, #52]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005126:	490a      	ldr	r1, [pc, #40]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005132:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005136:	d105      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005138:	4b05      	ldr	r3, [pc, #20]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	4a04      	ldr	r2, [pc, #16]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800513e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005142:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005144:	7cbb      	ldrb	r3, [r7, #18]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	40021000 	.word	0x40021000

08005154 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e095      	b.n	8005292 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	2b00      	cmp	r3, #0
 800516c:	d108      	bne.n	8005180 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005176:	d009      	beq.n	800518c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	61da      	str	r2, [r3, #28]
 800517e:	e005      	b.n	800518c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fb fa74 	bl	8000694 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051cc:	d902      	bls.n	80051d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	e002      	b.n	80051da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80051d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80051e2:	d007      	beq.n	80051f4 <HAL_SPI_Init+0xa0>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051ec:	d002      	beq.n	80051f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800522c:	431a      	orrs	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005236:	ea42 0103 	orr.w	r1, r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	0c1b      	lsrs	r3, r3, #16
 8005250:	f003 0204 	and.w	r2, r3, #4
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	f003 0310 	and.w	r3, r3, #16
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005262:	f003 0308 	and.w	r3, r3, #8
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005270:	ea42 0103 	orr.w	r1, r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b082      	sub	sp, #8
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e049      	b.n	8005340 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d106      	bne.n	80052c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f7fb fc7d 	bl	8000bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2202      	movs	r2, #2
 80052ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	3304      	adds	r3, #4
 80052d6:	4619      	mov	r1, r3
 80052d8:	4610      	mov	r0, r2
 80052da:	f000 fba1 	bl	8005a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e049      	b.n	80053ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d106      	bne.n	8005374 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7fb fbc8 	bl	8000b04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3304      	adds	r3, #4
 8005384:	4619      	mov	r1, r3
 8005386:	4610      	mov	r0, r2
 8005388:	f000 fb4a 	bl	8005a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b086      	sub	sp, #24
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e097      	b.n	800553a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f88f 	bl	8005542 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6812      	ldr	r2, [r2, #0]
 8005436:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800543a:	f023 0307 	bic.w	r3, r3, #7
 800543e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3304      	adds	r3, #4
 8005448:	4619      	mov	r1, r3
 800544a:	4610      	mov	r0, r2
 800544c:	f000 fae8 	bl	8005a20 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	4313      	orrs	r3, r2
 8005470:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005478:	f023 0303 	bic.w	r3, r3, #3
 800547c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	021b      	lsls	r3, r3, #8
 8005488:	4313      	orrs	r3, r2
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005496:	f023 030c 	bic.w	r3, r3, #12
 800549a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	68da      	ldr	r2, [r3, #12]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	021b      	lsls	r3, r3, #8
 80054b2:	4313      	orrs	r3, r2
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	011a      	lsls	r2, r3, #4
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	031b      	lsls	r3, r3, #12
 80054c6:	4313      	orrs	r3, r2
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80054d4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80054dc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	4313      	orrs	r3, r2
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3718      	adds	r7, #24
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b082      	sub	sp, #8
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b02      	cmp	r3, #2
 800556a:	d122      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b02      	cmp	r3, #2
 8005578:	d11b      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f06f 0202 	mvn.w	r2, #2
 8005582:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	f003 0303 	and.w	r3, r3, #3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fa23 	bl	80059e4 <HAL_TIM_IC_CaptureCallback>
 800559e:	e005      	b.n	80055ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 fa15 	bl	80059d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fa26 	bl	80059f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b04      	cmp	r3, #4
 80055be:	d122      	bne.n	8005606 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d11b      	bne.n	8005606 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f06f 0204 	mvn.w	r2, #4
 80055d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f9f9 	bl	80059e4 <HAL_TIM_IC_CaptureCallback>
 80055f2:	e005      	b.n	8005600 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f9eb 	bl	80059d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f9fc 	bl	80059f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b08      	cmp	r3, #8
 8005612:	d122      	bne.n	800565a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	2b08      	cmp	r3, #8
 8005620:	d11b      	bne.n	800565a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f06f 0208 	mvn.w	r2, #8
 800562a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2204      	movs	r2, #4
 8005630:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	f003 0303 	and.w	r3, r3, #3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f9cf 	bl	80059e4 <HAL_TIM_IC_CaptureCallback>
 8005646:	e005      	b.n	8005654 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f9c1 	bl	80059d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f9d2 	bl	80059f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	f003 0310 	and.w	r3, r3, #16
 8005664:	2b10      	cmp	r3, #16
 8005666:	d122      	bne.n	80056ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f003 0310 	and.w	r3, r3, #16
 8005672:	2b10      	cmp	r3, #16
 8005674:	d11b      	bne.n	80056ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f06f 0210 	mvn.w	r2, #16
 800567e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2208      	movs	r2, #8
 8005684:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005690:	2b00      	cmp	r3, #0
 8005692:	d003      	beq.n	800569c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f9a5 	bl	80059e4 <HAL_TIM_IC_CaptureCallback>
 800569a:	e005      	b.n	80056a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f997 	bl	80059d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f9a8 	bl	80059f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d10e      	bne.n	80056da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d107      	bne.n	80056da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f06f 0201 	mvn.w	r2, #1
 80056d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f971 	bl	80059bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e4:	2b80      	cmp	r3, #128	; 0x80
 80056e6:	d10e      	bne.n	8005706 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f2:	2b80      	cmp	r3, #128	; 0x80
 80056f4:	d107      	bne.n	8005706 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fd57 	bl	80061b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005714:	d10e      	bne.n	8005734 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005720:	2b80      	cmp	r3, #128	; 0x80
 8005722:	d107      	bne.n	8005734 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800572c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fd4a 	bl	80061c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573e:	2b40      	cmp	r3, #64	; 0x40
 8005740:	d10e      	bne.n	8005760 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574c:	2b40      	cmp	r3, #64	; 0x40
 800574e:	d107      	bne.n	8005760 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f956 	bl	8005a0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b20      	cmp	r3, #32
 800576c:	d10e      	bne.n	800578c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f003 0320 	and.w	r3, r3, #32
 8005778:	2b20      	cmp	r3, #32
 800577a:	d107      	bne.n	800578c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f06f 0220 	mvn.w	r2, #32
 8005784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fd0a 	bl	80061a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800578c:	bf00      	nop
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e0ff      	b.n	80059b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b14      	cmp	r3, #20
 80057be:	f200 80f0 	bhi.w	80059a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80057c2:	a201      	add	r2, pc, #4	; (adr r2, 80057c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c8:	0800581d 	.word	0x0800581d
 80057cc:	080059a3 	.word	0x080059a3
 80057d0:	080059a3 	.word	0x080059a3
 80057d4:	080059a3 	.word	0x080059a3
 80057d8:	0800585d 	.word	0x0800585d
 80057dc:	080059a3 	.word	0x080059a3
 80057e0:	080059a3 	.word	0x080059a3
 80057e4:	080059a3 	.word	0x080059a3
 80057e8:	0800589f 	.word	0x0800589f
 80057ec:	080059a3 	.word	0x080059a3
 80057f0:	080059a3 	.word	0x080059a3
 80057f4:	080059a3 	.word	0x080059a3
 80057f8:	080058df 	.word	0x080058df
 80057fc:	080059a3 	.word	0x080059a3
 8005800:	080059a3 	.word	0x080059a3
 8005804:	080059a3 	.word	0x080059a3
 8005808:	08005921 	.word	0x08005921
 800580c:	080059a3 	.word	0x080059a3
 8005810:	080059a3 	.word	0x080059a3
 8005814:	080059a3 	.word	0x080059a3
 8005818:	08005961 	.word	0x08005961
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68b9      	ldr	r1, [r7, #8]
 8005822:	4618      	mov	r0, r3
 8005824:	f000 f960 	bl	8005ae8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0208 	orr.w	r2, r2, #8
 8005836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0204 	bic.w	r2, r2, #4
 8005846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6999      	ldr	r1, [r3, #24]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	691a      	ldr	r2, [r3, #16]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	619a      	str	r2, [r3, #24]
      break;
 800585a:	e0a5      	b.n	80059a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	4618      	mov	r0, r3
 8005864:	f000 f9bc 	bl	8005be0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6999      	ldr	r1, [r3, #24]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	021a      	lsls	r2, r3, #8
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	619a      	str	r2, [r3, #24]
      break;
 800589c:	e084      	b.n	80059a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68b9      	ldr	r1, [r7, #8]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 fa15 	bl	8005cd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0208 	orr.w	r2, r2, #8
 80058b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69da      	ldr	r2, [r3, #28]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0204 	bic.w	r2, r2, #4
 80058c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69d9      	ldr	r1, [r3, #28]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	691a      	ldr	r2, [r3, #16]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	61da      	str	r2, [r3, #28]
      break;
 80058dc:	e064      	b.n	80059a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 fa6d 	bl	8005dc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69da      	ldr	r2, [r3, #28]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69d9      	ldr	r1, [r3, #28]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	021a      	lsls	r2, r3, #8
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	61da      	str	r2, [r3, #28]
      break;
 800591e:	e043      	b.n	80059a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	4618      	mov	r0, r3
 8005928:	f000 faaa 	bl	8005e80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0208 	orr.w	r2, r2, #8
 800593a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0204 	bic.w	r2, r2, #4
 800594a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	691a      	ldr	r2, [r3, #16]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800595e:	e023      	b.n	80059a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68b9      	ldr	r1, [r7, #8]
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fae2 	bl	8005f30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800597a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800598a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	021a      	lsls	r2, r3, #8
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059a0:	e002      	b.n	80059a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	75fb      	strb	r3, [r7, #23]
      break;
 80059a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop

080059bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a2a      	ldr	r2, [pc, #168]	; (8005adc <TIM_Base_SetConfig+0xbc>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d003      	beq.n	8005a40 <TIM_Base_SetConfig+0x20>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a3e:	d108      	bne.n	8005a52 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a21      	ldr	r2, [pc, #132]	; (8005adc <TIM_Base_SetConfig+0xbc>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00b      	beq.n	8005a72 <TIM_Base_SetConfig+0x52>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a60:	d007      	beq.n	8005a72 <TIM_Base_SetConfig+0x52>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a1e      	ldr	r2, [pc, #120]	; (8005ae0 <TIM_Base_SetConfig+0xc0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d003      	beq.n	8005a72 <TIM_Base_SetConfig+0x52>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ae4 <TIM_Base_SetConfig+0xc4>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d108      	bne.n	8005a84 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a0c      	ldr	r2, [pc, #48]	; (8005adc <TIM_Base_SetConfig+0xbc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d007      	beq.n	8005ac0 <TIM_Base_SetConfig+0xa0>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a0b      	ldr	r2, [pc, #44]	; (8005ae0 <TIM_Base_SetConfig+0xc0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d003      	beq.n	8005ac0 <TIM_Base_SetConfig+0xa0>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a0a      	ldr	r2, [pc, #40]	; (8005ae4 <TIM_Base_SetConfig+0xc4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d103      	bne.n	8005ac8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	691a      	ldr	r2, [r3, #16]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	615a      	str	r2, [r3, #20]
}
 8005ace:	bf00      	nop
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40012c00 	.word	0x40012c00
 8005ae0:	40014000 	.word	0x40014000
 8005ae4:	40014400 	.word	0x40014400

08005ae8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	f023 0201 	bic.w	r2, r3, #1
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0303 	bic.w	r3, r3, #3
 8005b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f023 0302 	bic.w	r3, r3, #2
 8005b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a24      	ldr	r2, [pc, #144]	; (8005bd4 <TIM_OC1_SetConfig+0xec>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d007      	beq.n	8005b58 <TIM_OC1_SetConfig+0x70>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a23      	ldr	r2, [pc, #140]	; (8005bd8 <TIM_OC1_SetConfig+0xf0>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d003      	beq.n	8005b58 <TIM_OC1_SetConfig+0x70>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a22      	ldr	r2, [pc, #136]	; (8005bdc <TIM_OC1_SetConfig+0xf4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d10c      	bne.n	8005b72 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f023 0308 	bic.w	r3, r3, #8
 8005b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f023 0304 	bic.w	r3, r3, #4
 8005b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a17      	ldr	r2, [pc, #92]	; (8005bd4 <TIM_OC1_SetConfig+0xec>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d007      	beq.n	8005b8a <TIM_OC1_SetConfig+0xa2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a16      	ldr	r2, [pc, #88]	; (8005bd8 <TIM_OC1_SetConfig+0xf0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d003      	beq.n	8005b8a <TIM_OC1_SetConfig+0xa2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a15      	ldr	r2, [pc, #84]	; (8005bdc <TIM_OC1_SetConfig+0xf4>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d111      	bne.n	8005bae <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	621a      	str	r2, [r3, #32]
}
 8005bc8:	bf00      	nop
 8005bca:	371c      	adds	r7, #28
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	40012c00 	.word	0x40012c00
 8005bd8:	40014000 	.word	0x40014000
 8005bdc:	40014400 	.word	0x40014400

08005be0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	f023 0210 	bic.w	r2, r3, #16
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	021b      	lsls	r3, r3, #8
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f023 0320 	bic.w	r3, r3, #32
 8005c2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a22      	ldr	r2, [pc, #136]	; (8005cc8 <TIM_OC2_SetConfig+0xe8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d10d      	bne.n	8005c60 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	011b      	lsls	r3, r3, #4
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a19      	ldr	r2, [pc, #100]	; (8005cc8 <TIM_OC2_SetConfig+0xe8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d007      	beq.n	8005c78 <TIM_OC2_SetConfig+0x98>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a18      	ldr	r2, [pc, #96]	; (8005ccc <TIM_OC2_SetConfig+0xec>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d003      	beq.n	8005c78 <TIM_OC2_SetConfig+0x98>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a17      	ldr	r2, [pc, #92]	; (8005cd0 <TIM_OC2_SetConfig+0xf0>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d113      	bne.n	8005ca0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	621a      	str	r2, [r3, #32]
}
 8005cba:	bf00      	nop
 8005cbc:	371c      	adds	r7, #28
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	40012c00 	.word	0x40012c00
 8005ccc:	40014000 	.word	0x40014000
 8005cd0:	40014400 	.word	0x40014400

08005cd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 0303 	bic.w	r3, r3, #3
 8005d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	021b      	lsls	r3, r3, #8
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a21      	ldr	r2, [pc, #132]	; (8005db8 <TIM_OC3_SetConfig+0xe4>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d10d      	bne.n	8005d52 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	021b      	lsls	r3, r3, #8
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a18      	ldr	r2, [pc, #96]	; (8005db8 <TIM_OC3_SetConfig+0xe4>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d007      	beq.n	8005d6a <TIM_OC3_SetConfig+0x96>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a17      	ldr	r2, [pc, #92]	; (8005dbc <TIM_OC3_SetConfig+0xe8>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d003      	beq.n	8005d6a <TIM_OC3_SetConfig+0x96>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a16      	ldr	r2, [pc, #88]	; (8005dc0 <TIM_OC3_SetConfig+0xec>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d113      	bne.n	8005d92 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	621a      	str	r2, [r3, #32]
}
 8005dac:	bf00      	nop
 8005dae:	371c      	adds	r7, #28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	40012c00 	.word	0x40012c00
 8005dbc:	40014000 	.word	0x40014000
 8005dc0:	40014400 	.word	0x40014400

08005dc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	021b      	lsls	r3, r3, #8
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	031b      	lsls	r3, r3, #12
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a14      	ldr	r2, [pc, #80]	; (8005e74 <TIM_OC4_SetConfig+0xb0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d007      	beq.n	8005e38 <TIM_OC4_SetConfig+0x74>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a13      	ldr	r2, [pc, #76]	; (8005e78 <TIM_OC4_SetConfig+0xb4>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d003      	beq.n	8005e38 <TIM_OC4_SetConfig+0x74>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a12      	ldr	r2, [pc, #72]	; (8005e7c <TIM_OC4_SetConfig+0xb8>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d109      	bne.n	8005e4c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	019b      	lsls	r3, r3, #6
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	621a      	str	r2, [r3, #32]
}
 8005e66:	bf00      	nop
 8005e68:	371c      	adds	r7, #28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40012c00 	.word	0x40012c00
 8005e78:	40014000 	.word	0x40014000
 8005e7c:	40014400 	.word	0x40014400

08005e80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ec4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	041b      	lsls	r3, r3, #16
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a13      	ldr	r2, [pc, #76]	; (8005f24 <TIM_OC5_SetConfig+0xa4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d007      	beq.n	8005eea <TIM_OC5_SetConfig+0x6a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a12      	ldr	r2, [pc, #72]	; (8005f28 <TIM_OC5_SetConfig+0xa8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d003      	beq.n	8005eea <TIM_OC5_SetConfig+0x6a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a11      	ldr	r2, [pc, #68]	; (8005f2c <TIM_OC5_SetConfig+0xac>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d109      	bne.n	8005efe <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	021b      	lsls	r3, r3, #8
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	621a      	str	r2, [r3, #32]
}
 8005f18:	bf00      	nop
 8005f1a:	371c      	adds	r7, #28
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	40012c00 	.word	0x40012c00
 8005f28:	40014000 	.word	0x40014000
 8005f2c:	40014400 	.word	0x40014400

08005f30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	021b      	lsls	r3, r3, #8
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	051b      	lsls	r3, r3, #20
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a14      	ldr	r2, [pc, #80]	; (8005fd8 <TIM_OC6_SetConfig+0xa8>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d007      	beq.n	8005f9c <TIM_OC6_SetConfig+0x6c>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a13      	ldr	r2, [pc, #76]	; (8005fdc <TIM_OC6_SetConfig+0xac>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d003      	beq.n	8005f9c <TIM_OC6_SetConfig+0x6c>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a12      	ldr	r2, [pc, #72]	; (8005fe0 <TIM_OC6_SetConfig+0xb0>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d109      	bne.n	8005fb0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	029b      	lsls	r3, r3, #10
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	621a      	str	r2, [r3, #32]
}
 8005fca:	bf00      	nop
 8005fcc:	371c      	adds	r7, #28
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	40012c00 	.word	0x40012c00
 8005fdc:	40014000 	.word	0x40014000
 8005fe0:	40014400 	.word	0x40014400

08005fe4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d101      	bne.n	8005ffc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	e04f      	b.n	800609c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a21      	ldr	r2, [pc, #132]	; (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d108      	bne.n	8006038 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800602c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	4313      	orrs	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4313      	orrs	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a14      	ldr	r2, [pc, #80]	; (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d009      	beq.n	8006070 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006064:	d004      	beq.n	8006070 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a10      	ldr	r2, [pc, #64]	; (80060ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d10c      	bne.n	800608a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006076:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	4313      	orrs	r3, r2
 8006080:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	40012c00 	.word	0x40012c00
 80060ac:	40014000 	.word	0x40014000

080060b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d101      	bne.n	80060cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060c8:	2302      	movs	r3, #2
 80060ca:	e060      	b.n	800618e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	4313      	orrs	r3, r2
 80060e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4313      	orrs	r3, r2
 800610a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	4313      	orrs	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	041b      	lsls	r3, r3, #16
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a14      	ldr	r2, [pc, #80]	; (800619c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d115      	bne.n	800617c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	051b      	lsls	r3, r3, #20
 800615c:	4313      	orrs	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	4313      	orrs	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	4313      	orrs	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	40012c00 	.word	0x40012c00

080061a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80061dc:	b084      	sub	sp, #16
 80061de:	b480      	push	{r7}
 80061e0:	b083      	sub	sp, #12
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	f107 0014 	add.w	r0, r7, #20
 80061ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	b004      	add	sp, #16
 80061fc:	4770      	bx	lr

080061fe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80061fe:	b480      	push	{r7}
 8006200:	b085      	sub	sp, #20
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800620e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006212:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	b29a      	uxth	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006234:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006238:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006240:	b29a      	uxth	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	b29b      	uxth	r3, r3
 8006246:	43db      	mvns	r3, r3
 8006248:	b29b      	uxth	r3, r3
 800624a:	4013      	ands	r3, r2
 800624c:	b29a      	uxth	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	460b      	mov	r3, r1
 800626c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800627c:	b084      	sub	sp, #16
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	f107 0014 	add.w	r0, r7, #20
 800628a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	b004      	add	sp, #16
 80062bc:	4770      	bx	lr
	...

080062c0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b09d      	sub	sp, #116	; 0x74
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80062e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	78db      	ldrb	r3, [r3, #3]
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d81f      	bhi.n	8006332 <USB_ActivateEndpoint+0x72>
 80062f2:	a201      	add	r2, pc, #4	; (adr r2, 80062f8 <USB_ActivateEndpoint+0x38>)
 80062f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f8:	08006309 	.word	0x08006309
 80062fc:	08006325 	.word	0x08006325
 8006300:	0800633b 	.word	0x0800633b
 8006304:	08006317 	.word	0x08006317
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006308:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800630c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006310:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006314:	e012      	b.n	800633c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006316:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800631a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800631e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006322:	e00b      	b.n	800633c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006324:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006328:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800632c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006330:	e004      	b.n	800633c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006338:	e000      	b.n	800633c <USB_ActivateEndpoint+0x7c>
      break;
 800633a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	441a      	add	r2, r3
 8006346:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800634a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800634e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800635a:	b29b      	uxth	r3, r3
 800635c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	b29b      	uxth	r3, r3
 800636c:	b21b      	sxth	r3, r3
 800636e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006376:	b21a      	sxth	r2, r3
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	b21b      	sxth	r3, r3
 800637e:	4313      	orrs	r3, r2
 8006380:	b21b      	sxth	r3, r3
 8006382:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	441a      	add	r2, r3
 8006390:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800639c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	7b1b      	ldrb	r3, [r3, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f040 816e 	bne.w	800668e <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	785b      	ldrb	r3, [r3, #1]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f000 8084 	beq.w	80064c4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	61bb      	str	r3, [r7, #24]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	461a      	mov	r2, r3
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	4413      	add	r3, r2
 80063ce:	61bb      	str	r3, [r7, #24]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	00da      	lsls	r2, r3, #3
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063de:	617b      	str	r3, [r7, #20]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	88db      	ldrh	r3, [r3, #6]
 80063e4:	085b      	lsrs	r3, r3, #1
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	827b      	strh	r3, [r7, #18]
 80063fe:	8a7b      	ldrh	r3, [r7, #18]
 8006400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006404:	2b00      	cmp	r3, #0
 8006406:	d01b      	beq.n	8006440 <USB_ActivateEndpoint+0x180>
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	b29b      	uxth	r3, r3
 8006416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800641a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800641e:	823b      	strh	r3, [r7, #16]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	441a      	add	r2, r3
 800642a:	8a3b      	ldrh	r3, [r7, #16]
 800642c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006430:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006438:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800643c:	b29b      	uxth	r3, r3
 800643e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	78db      	ldrb	r3, [r3, #3]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d020      	beq.n	800648a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29b      	uxth	r3, r3
 8006456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800645a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800645e:	81bb      	strh	r3, [r7, #12]
 8006460:	89bb      	ldrh	r3, [r7, #12]
 8006462:	f083 0320 	eor.w	r3, r3, #32
 8006466:	81bb      	strh	r3, [r7, #12]
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	441a      	add	r2, r3
 8006472:	89bb      	ldrh	r3, [r7, #12]
 8006474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800647c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006484:	b29b      	uxth	r3, r3
 8006486:	8013      	strh	r3, [r2, #0]
 8006488:	e2cb      	b.n	8006a22 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	b29b      	uxth	r3, r3
 8006498:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800649c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a0:	81fb      	strh	r3, [r7, #14]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	441a      	add	r2, r3
 80064ac:	89fb      	ldrh	r3, [r7, #14]
 80064ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064be:	b29b      	uxth	r3, r3
 80064c0:	8013      	strh	r3, [r2, #0]
 80064c2:	e2ae      	b.n	8006a22 <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	633b      	str	r3, [r7, #48]	; 0x30
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	461a      	mov	r2, r3
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	4413      	add	r3, r2
 80064d6:	633b      	str	r3, [r7, #48]	; 0x30
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	00da      	lsls	r2, r3, #3
 80064de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e0:	4413      	add	r3, r2
 80064e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	88db      	ldrh	r3, [r3, #6]
 80064ec:	085b      	lsrs	r3, r3, #1
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	005b      	lsls	r3, r3, #1
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006502:	b29b      	uxth	r3, r3
 8006504:	461a      	mov	r2, r3
 8006506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006508:	4413      	add	r3, r2
 800650a:	62bb      	str	r3, [r7, #40]	; 0x28
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	00da      	lsls	r2, r3, #3
 8006512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006514:	4413      	add	r3, r2
 8006516:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800651a:	627b      	str	r3, [r7, #36]	; 0x24
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	2b3e      	cmp	r3, #62	; 0x3e
 8006522:	d918      	bls.n	8006556 <USB_ActivateEndpoint+0x296>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	095b      	lsrs	r3, r3, #5
 800652a:	66bb      	str	r3, [r7, #104]	; 0x68
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	f003 031f 	and.w	r3, r3, #31
 8006534:	2b00      	cmp	r3, #0
 8006536:	d102      	bne.n	800653e <USB_ActivateEndpoint+0x27e>
 8006538:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800653a:	3b01      	subs	r3, #1
 800653c:	66bb      	str	r3, [r7, #104]	; 0x68
 800653e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006540:	b29b      	uxth	r3, r3
 8006542:	029b      	lsls	r3, r3, #10
 8006544:	b29b      	uxth	r3, r3
 8006546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800654a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800654e:	b29a      	uxth	r2, r3
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	801a      	strh	r2, [r3, #0]
 8006554:	e029      	b.n	80065aa <USB_ActivateEndpoint+0x2ea>
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d112      	bne.n	8006584 <USB_ActivateEndpoint+0x2c4>
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	b29b      	uxth	r3, r3
 8006564:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006568:	b29a      	uxth	r2, r3
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	801a      	strh	r2, [r3, #0]
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	b29b      	uxth	r3, r3
 8006574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800657c:	b29a      	uxth	r2, r3
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	801a      	strh	r2, [r3, #0]
 8006582:	e012      	b.n	80065aa <USB_ActivateEndpoint+0x2ea>
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	085b      	lsrs	r3, r3, #1
 800658a:	66bb      	str	r3, [r7, #104]	; 0x68
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <USB_ActivateEndpoint+0x2de>
 8006598:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800659a:	3301      	adds	r3, #1
 800659c:	66bb      	str	r3, [r7, #104]	; 0x68
 800659e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	029b      	lsls	r3, r3, #10
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	847b      	strh	r3, [r7, #34]	; 0x22
 80065b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d01b      	beq.n	80065fa <USB_ActivateEndpoint+0x33a>
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d8:	843b      	strh	r3, [r7, #32]
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	441a      	add	r2, r3
 80065e4:	8c3b      	ldrh	r3, [r7, #32]
 80065e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d124      	bne.n	800664c <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006618:	83bb      	strh	r3, [r7, #28]
 800661a:	8bbb      	ldrh	r3, [r7, #28]
 800661c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006620:	83bb      	strh	r3, [r7, #28]
 8006622:	8bbb      	ldrh	r3, [r7, #28]
 8006624:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006628:	83bb      	strh	r3, [r7, #28]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	441a      	add	r2, r3
 8006634:	8bbb      	ldrh	r3, [r7, #28]
 8006636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800663a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800663e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006646:	b29b      	uxth	r3, r3
 8006648:	8013      	strh	r3, [r2, #0]
 800664a:	e1ea      	b.n	8006a22 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	b29b      	uxth	r3, r3
 800665a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800665e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006662:	83fb      	strh	r3, [r7, #30]
 8006664:	8bfb      	ldrh	r3, [r7, #30]
 8006666:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800666a:	83fb      	strh	r3, [r7, #30]
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	441a      	add	r2, r3
 8006676:	8bfb      	ldrh	r3, [r7, #30]
 8006678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800667c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006688:	b29b      	uxth	r3, r3
 800668a:	8013      	strh	r3, [r2, #0]
 800668c:	e1c9      	b.n	8006a22 <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	78db      	ldrb	r3, [r3, #3]
 8006692:	2b02      	cmp	r3, #2
 8006694:	d11e      	bne.n	80066d4 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ac:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	441a      	add	r2, r3
 80066ba:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80066be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80066ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	8013      	strh	r3, [r2, #0]
 80066d2:	e01d      	b.n	8006710 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80066e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	441a      	add	r2, r3
 80066f8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80066fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800670c:	b29b      	uxth	r3, r3
 800670e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800671a:	b29b      	uxth	r3, r3
 800671c:	461a      	mov	r2, r3
 800671e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006720:	4413      	add	r3, r2
 8006722:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	00da      	lsls	r2, r3, #3
 800672a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800672c:	4413      	add	r3, r2
 800672e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006732:	65bb      	str	r3, [r7, #88]	; 0x58
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	891b      	ldrh	r3, [r3, #8]
 8006738:	085b      	lsrs	r3, r3, #1
 800673a:	b29b      	uxth	r3, r3
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	b29a      	uxth	r2, r3
 8006740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006742:	801a      	strh	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	657b      	str	r3, [r7, #84]	; 0x54
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800674e:	b29b      	uxth	r3, r3
 8006750:	461a      	mov	r2, r3
 8006752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006754:	4413      	add	r3, r2
 8006756:	657b      	str	r3, [r7, #84]	; 0x54
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	00da      	lsls	r2, r3, #3
 800675e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006760:	4413      	add	r3, r2
 8006762:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006766:	653b      	str	r3, [r7, #80]	; 0x50
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	895b      	ldrh	r3, [r3, #10]
 800676c:	085b      	lsrs	r3, r3, #1
 800676e:	b29b      	uxth	r3, r3
 8006770:	005b      	lsls	r3, r3, #1
 8006772:	b29a      	uxth	r2, r3
 8006774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006776:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	785b      	ldrb	r3, [r3, #1]
 800677c:	2b00      	cmp	r3, #0
 800677e:	f040 8093 	bne.w	80068a8 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006792:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d01b      	beq.n	80067d6 <USB_ActivateEndpoint+0x516>
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	441a      	add	r2, r3
 80067c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80067c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80067e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80067e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d01b      	beq.n	8006826 <USB_ActivateEndpoint+0x566>
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006804:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	441a      	add	r2, r3
 8006810:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800681a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800681e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006822:	b29b      	uxth	r3, r3
 8006824:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	b29b      	uxth	r3, r3
 8006834:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683c:	873b      	strh	r3, [r7, #56]	; 0x38
 800683e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006840:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006844:	873b      	strh	r3, [r7, #56]	; 0x38
 8006846:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006848:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800684c:	873b      	strh	r3, [r7, #56]	; 0x38
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	441a      	add	r2, r3
 8006858:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800685a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800685e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800686a:	b29b      	uxth	r3, r3
 800686c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	881b      	ldrh	r3, [r3, #0]
 800687a:	b29b      	uxth	r3, r3
 800687c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006884:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	441a      	add	r2, r3
 8006890:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800689a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800689e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	8013      	strh	r3, [r2, #0]
 80068a6:	e0bc      	b.n	8006a22 <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80068b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80068bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d01d      	beq.n	8006900 <USB_ActivateEndpoint+0x640>
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	881b      	ldrh	r3, [r3, #0]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068da:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	441a      	add	r2, r3
 80068e8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80068ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006910:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006918:	2b00      	cmp	r3, #0
 800691a:	d01d      	beq.n	8006958 <USB_ActivateEndpoint+0x698>
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	b29b      	uxth	r3, r3
 800692a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800692e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006932:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	441a      	add	r2, r3
 8006940:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006944:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006948:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800694c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006950:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006954:	b29b      	uxth	r3, r3
 8006956:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	78db      	ldrb	r3, [r3, #3]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d024      	beq.n	80069aa <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	b29b      	uxth	r3, r3
 800696e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006976:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800697a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800697e:	f083 0320 	eor.w	r3, r3, #32
 8006982:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	441a      	add	r2, r3
 8006990:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800699c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	8013      	strh	r3, [r2, #0]
 80069a8:	e01d      	b.n	80069e6 <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	881b      	ldrh	r3, [r3, #0]
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069c0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	441a      	add	r2, r3
 80069ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80069d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	441a      	add	r2, r3
 8006a0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006a22:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3774      	adds	r7, #116	; 0x74
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop

08006a34 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b08d      	sub	sp, #52	; 0x34
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	7b1b      	ldrb	r3, [r3, #12]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f040 808e 	bne.w	8006b64 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	785b      	ldrb	r3, [r3, #1]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d044      	beq.n	8006ada <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	81bb      	strh	r3, [r7, #12]
 8006a5e:	89bb      	ldrh	r3, [r7, #12]
 8006a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d01b      	beq.n	8006aa0 <USB_DeactivateEndpoint+0x6c>
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7e:	817b      	strh	r3, [r7, #10]
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	441a      	add	r2, r3
 8006a8a:	897b      	ldrh	r3, [r7, #10]
 8006a8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ab6:	813b      	strh	r3, [r7, #8]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	441a      	add	r2, r3
 8006ac2:	893b      	ldrh	r3, [r7, #8]
 8006ac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	8013      	strh	r3, [r2, #0]
 8006ad8:	e192      	b.n	8006e00 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	827b      	strh	r3, [r7, #18]
 8006ae8:	8a7b      	ldrh	r3, [r7, #18]
 8006aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d01b      	beq.n	8006b2a <USB_DeactivateEndpoint+0xf6>
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b08:	823b      	strh	r3, [r7, #16]
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	441a      	add	r2, r3
 8006b14:	8a3b      	ldrh	r3, [r7, #16]
 8006b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b40:	81fb      	strh	r3, [r7, #14]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	441a      	add	r2, r3
 8006b4c:	89fb      	ldrh	r3, [r7, #14]
 8006b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	8013      	strh	r3, [r2, #0]
 8006b62:	e14d      	b.n	8006e00 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	785b      	ldrb	r3, [r3, #1]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f040 80a5 	bne.w	8006cb8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	843b      	strh	r3, [r7, #32]
 8006b7c:	8c3b      	ldrh	r3, [r7, #32]
 8006b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d01b      	beq.n	8006bbe <USB_DeactivateEndpoint+0x18a>
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4413      	add	r3, r2
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b9c:	83fb      	strh	r3, [r7, #30]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	441a      	add	r2, r3
 8006ba8:	8bfb      	ldrh	r3, [r7, #30]
 8006baa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	83bb      	strh	r3, [r7, #28]
 8006bcc:	8bbb      	ldrh	r3, [r7, #28]
 8006bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d01b      	beq.n	8006c0e <USB_DeactivateEndpoint+0x1da>
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bec:	837b      	strh	r3, [r7, #26]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	441a      	add	r2, r3
 8006bf8:	8b7b      	ldrh	r3, [r7, #26]
 8006bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c24:	833b      	strh	r3, [r7, #24]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	441a      	add	r2, r3
 8006c30:	8b3b      	ldrh	r3, [r7, #24]
 8006c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5c:	82fb      	strh	r3, [r7, #22]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	441a      	add	r2, r3
 8006c68:	8afb      	ldrh	r3, [r7, #22]
 8006c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c94:	82bb      	strh	r3, [r7, #20]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	441a      	add	r2, r3
 8006ca0:	8abb      	ldrh	r3, [r7, #20]
 8006ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	8013      	strh	r3, [r2, #0]
 8006cb6:	e0a3      	b.n	8006e00 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	881b      	ldrh	r3, [r3, #0]
 8006cc4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006cc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d01b      	beq.n	8006d08 <USB_DeactivateEndpoint+0x2d4>
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	441a      	add	r2, r3
 8006cf2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006d16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d01b      	beq.n	8006d58 <USB_DeactivateEndpoint+0x324>
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d36:	853b      	strh	r3, [r7, #40]	; 0x28
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	441a      	add	r2, r3
 8006d42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d6e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	441a      	add	r2, r3
 8006d7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006da6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	441a      	add	r2, r3
 8006db2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dde:	847b      	strh	r3, [r7, #34]	; 0x22
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	441a      	add	r2, r3
 8006dea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3734      	adds	r7, #52	; 0x34
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b0c2      	sub	sp, #264	; 0x108
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e1c:	6018      	str	r0, [r3, #0]
 8006e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e26:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	785b      	ldrb	r3, [r3, #1]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	f040 867b 	bne.w	8007b30 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	699a      	ldr	r2, [r3, #24]
 8006e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d908      	bls.n	8006e68 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006e66:	e007      	b.n	8006e78 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	7b1b      	ldrb	r3, [r3, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d13a      	bne.n	8006efe <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6959      	ldr	r1, [r3, #20]
 8006e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	88da      	ldrh	r2, [r3, #6]
 8006ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006eaa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006eae:	6800      	ldr	r0, [r0, #0]
 8006eb0:	f001 fc3e 	bl	8008730 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	613b      	str	r3, [r7, #16]
 8006ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	00da      	lsls	r2, r3, #3
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006eee:	60fb      	str	r3, [r7, #12]
 8006ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	801a      	strh	r2, [r3, #0]
 8006efa:	f000 bde3 	b.w	8007ac4 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	78db      	ldrb	r3, [r3, #3]
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	f040 843a 	bne.w	8007784 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6a1a      	ldr	r2, [r3, #32]
 8006f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	f240 83b7 	bls.w	800769c <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f54:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	441a      	add	r2, r3
 8006f72:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f7e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6a1a      	ldr	r2, [r3, #32]
 8006f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f9a:	1ad2      	subs	r2, r2, r3
 8006f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 81b3 	beq.w	8007336 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	633b      	str	r3, [r7, #48]	; 0x30
 8006fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	785b      	ldrb	r3, [r3, #1]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d16d      	bne.n	80070c8 <USB_EPStartXfer+0x2ba>
 8006fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ffc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007006:	b29b      	uxth	r3, r3
 8007008:	461a      	mov	r2, r3
 800700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700c:	4413      	add	r3, r2
 800700e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007014:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	00da      	lsls	r2, r3, #3
 800701e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007020:	4413      	add	r3, r2
 8007022:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007026:	627b      	str	r3, [r7, #36]	; 0x24
 8007028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800702c:	2b3e      	cmp	r3, #62	; 0x3e
 800702e:	d91c      	bls.n	800706a <USB_EPStartXfer+0x25c>
 8007030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007034:	095b      	lsrs	r3, r3, #5
 8007036:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800703a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800703e:	f003 031f 	and.w	r3, r3, #31
 8007042:	2b00      	cmp	r3, #0
 8007044:	d104      	bne.n	8007050 <USB_EPStartXfer+0x242>
 8007046:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800704a:	3b01      	subs	r3, #1
 800704c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007050:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007054:	b29b      	uxth	r3, r3
 8007056:	029b      	lsls	r3, r3, #10
 8007058:	b29b      	uxth	r3, r3
 800705a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800705e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007062:	b29a      	uxth	r2, r3
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	801a      	strh	r2, [r3, #0]
 8007068:	e053      	b.n	8007112 <USB_EPStartXfer+0x304>
 800706a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800706e:	2b00      	cmp	r3, #0
 8007070:	d112      	bne.n	8007098 <USB_EPStartXfer+0x28a>
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	b29b      	uxth	r3, r3
 8007078:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800707c:	b29a      	uxth	r2, r3
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	801a      	strh	r2, [r3, #0]
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	b29b      	uxth	r3, r3
 8007088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800708c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007090:	b29a      	uxth	r2, r3
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	801a      	strh	r2, [r3, #0]
 8007096:	e03c      	b.n	8007112 <USB_EPStartXfer+0x304>
 8007098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800709c:	085b      	lsrs	r3, r3, #1
 800709e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d004      	beq.n	80070b8 <USB_EPStartXfer+0x2aa>
 80070ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80070b2:	3301      	adds	r3, #1
 80070b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80070bc:	b29b      	uxth	r3, r3
 80070be:	029b      	lsls	r3, r3, #10
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	801a      	strh	r2, [r3, #0]
 80070c6:	e024      	b.n	8007112 <USB_EPStartXfer+0x304>
 80070c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	785b      	ldrb	r3, [r3, #1]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d11c      	bne.n	8007112 <USB_EPStartXfer+0x304>
 80070d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ec:	4413      	add	r3, r2
 80070ee:	633b      	str	r3, [r7, #48]	; 0x30
 80070f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	00da      	lsls	r2, r3, #3
 80070fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007100:	4413      	add	r3, r2
 8007102:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007106:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800710c:	b29a      	uxth	r2, r3
 800710e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007110:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	895b      	ldrh	r3, [r3, #10]
 800711e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6959      	ldr	r1, [r3, #20]
 800712e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007132:	b29b      	uxth	r3, r3
 8007134:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007138:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800713c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007140:	6800      	ldr	r0, [r0, #0]
 8007142:	f001 faf5 	bl	8008730 <USB_WritePMA>
            ep->xfer_buff += len;
 8007146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	695a      	ldr	r2, [r3, #20]
 8007152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007156:	441a      	add	r2, r3
 8007158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800715c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6a1a      	ldr	r2, [r3, #32]
 8007170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	429a      	cmp	r2, r3
 800717e:	d90f      	bls.n	80071a0 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8007180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007184:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	6a1a      	ldr	r2, [r3, #32]
 800718c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007190:	1ad2      	subs	r2, r2, r3
 8007192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	621a      	str	r2, [r3, #32]
 800719e:	e00e      	b.n	80071be <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80071a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80071b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2200      	movs	r2, #0
 80071bc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	785b      	ldrb	r3, [r3, #1]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d16d      	bne.n	80072aa <USB_EPStartXfer+0x49c>
 80071ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	61bb      	str	r3, [r7, #24]
 80071da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	461a      	mov	r2, r3
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	4413      	add	r3, r2
 80071f0:	61bb      	str	r3, [r7, #24]
 80071f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	00da      	lsls	r2, r3, #3
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	4413      	add	r3, r2
 8007204:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007208:	617b      	str	r3, [r7, #20]
 800720a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800720e:	2b3e      	cmp	r3, #62	; 0x3e
 8007210:	d91c      	bls.n	800724c <USB_EPStartXfer+0x43e>
 8007212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007216:	095b      	lsrs	r3, r3, #5
 8007218:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800721c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007220:	f003 031f 	and.w	r3, r3, #31
 8007224:	2b00      	cmp	r3, #0
 8007226:	d104      	bne.n	8007232 <USB_EPStartXfer+0x424>
 8007228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800722c:	3b01      	subs	r3, #1
 800722e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007236:	b29b      	uxth	r3, r3
 8007238:	029b      	lsls	r3, r3, #10
 800723a:	b29b      	uxth	r3, r3
 800723c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007244:	b29a      	uxth	r2, r3
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	801a      	strh	r2, [r3, #0]
 800724a:	e059      	b.n	8007300 <USB_EPStartXfer+0x4f2>
 800724c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007250:	2b00      	cmp	r3, #0
 8007252:	d112      	bne.n	800727a <USB_EPStartXfer+0x46c>
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	b29b      	uxth	r3, r3
 800725a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800725e:	b29a      	uxth	r2, r3
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	801a      	strh	r2, [r3, #0]
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	881b      	ldrh	r3, [r3, #0]
 8007268:	b29b      	uxth	r3, r3
 800726a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800726e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007272:	b29a      	uxth	r2, r3
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	801a      	strh	r2, [r3, #0]
 8007278:	e042      	b.n	8007300 <USB_EPStartXfer+0x4f2>
 800727a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800727e:	085b      	lsrs	r3, r3, #1
 8007280:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	2b00      	cmp	r3, #0
 800728e:	d004      	beq.n	800729a <USB_EPStartXfer+0x48c>
 8007290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007294:	3301      	adds	r3, #1
 8007296:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800729a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800729e:	b29b      	uxth	r3, r3
 80072a0:	029b      	lsls	r3, r3, #10
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	801a      	strh	r2, [r3, #0]
 80072a8:	e02a      	b.n	8007300 <USB_EPStartXfer+0x4f2>
 80072aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	785b      	ldrb	r3, [r3, #1]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d122      	bne.n	8007300 <USB_EPStartXfer+0x4f2>
 80072ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	623b      	str	r3, [r7, #32]
 80072c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	461a      	mov	r2, r3
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	4413      	add	r3, r2
 80072dc:	623b      	str	r3, [r7, #32]
 80072de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	00da      	lsls	r2, r3, #3
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	4413      	add	r3, r2
 80072f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072f4:	61fb      	str	r3, [r7, #28]
 80072f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007304:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	891b      	ldrh	r3, [r3, #8]
 800730c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6959      	ldr	r1, [r3, #20]
 800731c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007320:	b29b      	uxth	r3, r3
 8007322:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007326:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800732a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800732e:	6800      	ldr	r0, [r0, #0]
 8007330:	f001 f9fe 	bl	8008730 <USB_WritePMA>
 8007334:	e3c6      	b.n	8007ac4 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800733a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	785b      	ldrb	r3, [r3, #1]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d16d      	bne.n	8007422 <USB_EPStartXfer+0x614>
 8007346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800734a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	64bb      	str	r3, [r7, #72]	; 0x48
 8007352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007356:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007360:	b29b      	uxth	r3, r3
 8007362:	461a      	mov	r2, r3
 8007364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007366:	4413      	add	r3, r2
 8007368:	64bb      	str	r3, [r7, #72]	; 0x48
 800736a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800736e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	00da      	lsls	r2, r3, #3
 8007378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800737a:	4413      	add	r3, r2
 800737c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007380:	647b      	str	r3, [r7, #68]	; 0x44
 8007382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007386:	2b3e      	cmp	r3, #62	; 0x3e
 8007388:	d91c      	bls.n	80073c4 <USB_EPStartXfer+0x5b6>
 800738a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800738e:	095b      	lsrs	r3, r3, #5
 8007390:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007398:	f003 031f 	and.w	r3, r3, #31
 800739c:	2b00      	cmp	r3, #0
 800739e:	d104      	bne.n	80073aa <USB_EPStartXfer+0x59c>
 80073a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073a4:	3b01      	subs	r3, #1
 80073a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	029b      	lsls	r3, r3, #10
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073bc:	b29a      	uxth	r2, r3
 80073be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073c0:	801a      	strh	r2, [r3, #0]
 80073c2:	e059      	b.n	8007478 <USB_EPStartXfer+0x66a>
 80073c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d112      	bne.n	80073f2 <USB_EPStartXfer+0x5e4>
 80073cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073ce:	881b      	ldrh	r3, [r3, #0]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073da:	801a      	strh	r2, [r3, #0]
 80073dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	e042      	b.n	8007478 <USB_EPStartXfer+0x66a>
 80073f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073f6:	085b      	lsrs	r3, r3, #1
 80073f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	2b00      	cmp	r3, #0
 8007406:	d004      	beq.n	8007412 <USB_EPStartXfer+0x604>
 8007408:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800740c:	3301      	adds	r3, #1
 800740e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007412:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007416:	b29b      	uxth	r3, r3
 8007418:	029b      	lsls	r3, r3, #10
 800741a:	b29a      	uxth	r2, r3
 800741c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800741e:	801a      	strh	r2, [r3, #0]
 8007420:	e02a      	b.n	8007478 <USB_EPStartXfer+0x66a>
 8007422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	785b      	ldrb	r3, [r3, #1]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d122      	bne.n	8007478 <USB_EPStartXfer+0x66a>
 8007432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007436:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	653b      	str	r3, [r7, #80]	; 0x50
 800743e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007442:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800744c:	b29b      	uxth	r3, r3
 800744e:	461a      	mov	r2, r3
 8007450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007452:	4413      	add	r3, r2
 8007454:	653b      	str	r3, [r7, #80]	; 0x50
 8007456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800745a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	00da      	lsls	r2, r3, #3
 8007464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007466:	4413      	add	r3, r2
 8007468:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800746c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800746e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007472:	b29a      	uxth	r2, r3
 8007474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007476:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	891b      	ldrh	r3, [r3, #8]
 8007484:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800748c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6959      	ldr	r1, [r3, #20]
 8007494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007498:	b29b      	uxth	r3, r3
 800749a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800749e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80074a2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80074a6:	6800      	ldr	r0, [r0, #0]
 80074a8:	f001 f942 	bl	8008730 <USB_WritePMA>
            ep->xfer_buff += len;
 80074ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	695a      	ldr	r2, [r3, #20]
 80074b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074bc:	441a      	add	r2, r3
 80074be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80074ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6a1a      	ldr	r2, [r3, #32]
 80074d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d90f      	bls.n	8007506 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 80074e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6a1a      	ldr	r2, [r3, #32]
 80074f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074f6:	1ad2      	subs	r2, r2, r3
 80074f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	621a      	str	r2, [r3, #32]
 8007504:	e00e      	b.n	8007524 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8007506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2200      	movs	r2, #0
 8007522:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007528:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	643b      	str	r3, [r7, #64]	; 0x40
 8007530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	785b      	ldrb	r3, [r3, #1]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d16d      	bne.n	800761c <USB_EPStartXfer+0x80e>
 8007540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007544:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	63bb      	str	r3, [r7, #56]	; 0x38
 800754c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007550:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800755a:	b29b      	uxth	r3, r3
 800755c:	461a      	mov	r2, r3
 800755e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007560:	4413      	add	r3, r2
 8007562:	63bb      	str	r3, [r7, #56]	; 0x38
 8007564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	00da      	lsls	r2, r3, #3
 8007572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007574:	4413      	add	r3, r2
 8007576:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800757a:	637b      	str	r3, [r7, #52]	; 0x34
 800757c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007580:	2b3e      	cmp	r3, #62	; 0x3e
 8007582:	d91c      	bls.n	80075be <USB_EPStartXfer+0x7b0>
 8007584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007588:	095b      	lsrs	r3, r3, #5
 800758a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800758e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007592:	f003 031f 	and.w	r3, r3, #31
 8007596:	2b00      	cmp	r3, #0
 8007598:	d104      	bne.n	80075a4 <USB_EPStartXfer+0x796>
 800759a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800759e:	3b01      	subs	r3, #1
 80075a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	029b      	lsls	r3, r3, #10
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ba:	801a      	strh	r2, [r3, #0]
 80075bc:	e053      	b.n	8007666 <USB_EPStartXfer+0x858>
 80075be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d112      	bne.n	80075ec <USB_EPStartXfer+0x7de>
 80075c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d4:	801a      	strh	r2, [r3, #0]
 80075d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	b29b      	uxth	r3, r3
 80075dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e8:	801a      	strh	r2, [r3, #0]
 80075ea:	e03c      	b.n	8007666 <USB_EPStartXfer+0x858>
 80075ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075f0:	085b      	lsrs	r3, r3, #1
 80075f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d004      	beq.n	800760c <USB_EPStartXfer+0x7fe>
 8007602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007606:	3301      	adds	r3, #1
 8007608:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800760c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007610:	b29b      	uxth	r3, r3
 8007612:	029b      	lsls	r3, r3, #10
 8007614:	b29a      	uxth	r2, r3
 8007616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007618:	801a      	strh	r2, [r3, #0]
 800761a:	e024      	b.n	8007666 <USB_EPStartXfer+0x858>
 800761c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	785b      	ldrb	r3, [r3, #1]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d11c      	bne.n	8007666 <USB_EPStartXfer+0x858>
 800762c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007630:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800763a:	b29b      	uxth	r3, r3
 800763c:	461a      	mov	r2, r3
 800763e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007640:	4413      	add	r3, r2
 8007642:	643b      	str	r3, [r7, #64]	; 0x40
 8007644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	00da      	lsls	r2, r3, #3
 8007652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007654:	4413      	add	r3, r2
 8007656:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800765a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800765c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007660:	b29a      	uxth	r2, r3
 8007662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007664:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800766a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	895b      	ldrh	r3, [r3, #10]
 8007672:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800767a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6959      	ldr	r1, [r3, #20]
 8007682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007686:	b29b      	uxth	r3, r3
 8007688:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800768c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007690:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007694:	6800      	ldr	r0, [r0, #0]
 8007696:	f001 f84b 	bl	8008730 <USB_WritePMA>
 800769a:	e213      	b.n	8007ac4 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800769c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	6a1b      	ldr	r3, [r3, #32]
 80076a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80076ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80076ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80076d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	441a      	add	r2, r3
 80076f0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80076f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007704:	b29b      	uxth	r3, r3
 8007706:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800770c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007718:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007722:	b29b      	uxth	r3, r3
 8007724:	461a      	mov	r2, r3
 8007726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007728:	4413      	add	r3, r2
 800772a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800772c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	00da      	lsls	r2, r3, #3
 800773a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800773c:	4413      	add	r3, r2
 800773e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007742:	65bb      	str	r3, [r7, #88]	; 0x58
 8007744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007748:	b29a      	uxth	r2, r3
 800774a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800774c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800774e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	891b      	ldrh	r3, [r3, #8]
 800775a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800775e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6959      	ldr	r1, [r3, #20]
 800776a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800776e:	b29b      	uxth	r3, r3
 8007770:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007774:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007778:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800777c:	6800      	ldr	r0, [r0, #0]
 800777e:	f000 ffd7 	bl	8008730 <USB_WritePMA>
 8007782:	e19f      	b.n	8007ac4 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6a1a      	ldr	r2, [r3, #32]
 8007790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007794:	1ad2      	subs	r2, r2, r3
 8007796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80077a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	881b      	ldrh	r3, [r3, #0]
 80077be:	b29b      	uxth	r3, r3
 80077c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 80bc 	beq.w	8007942 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	673b      	str	r3, [r7, #112]	; 0x70
 80077d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	785b      	ldrb	r3, [r3, #1]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d16d      	bne.n	80078c2 <USB_EPStartXfer+0xab4>
 80077e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80077f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007800:	b29b      	uxth	r3, r3
 8007802:	461a      	mov	r2, r3
 8007804:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007806:	4413      	add	r3, r2
 8007808:	66bb      	str	r3, [r7, #104]	; 0x68
 800780a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800780e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	00da      	lsls	r2, r3, #3
 8007818:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800781a:	4413      	add	r3, r2
 800781c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007820:	667b      	str	r3, [r7, #100]	; 0x64
 8007822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007826:	2b3e      	cmp	r3, #62	; 0x3e
 8007828:	d91c      	bls.n	8007864 <USB_EPStartXfer+0xa56>
 800782a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800782e:	095b      	lsrs	r3, r3, #5
 8007830:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007838:	f003 031f 	and.w	r3, r3, #31
 800783c:	2b00      	cmp	r3, #0
 800783e:	d104      	bne.n	800784a <USB_EPStartXfer+0xa3c>
 8007840:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007844:	3b01      	subs	r3, #1
 8007846:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800784a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800784e:	b29b      	uxth	r3, r3
 8007850:	029b      	lsls	r3, r3, #10
 8007852:	b29b      	uxth	r3, r3
 8007854:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007858:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800785c:	b29a      	uxth	r2, r3
 800785e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007860:	801a      	strh	r2, [r3, #0]
 8007862:	e053      	b.n	800790c <USB_EPStartXfer+0xafe>
 8007864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007868:	2b00      	cmp	r3, #0
 800786a:	d112      	bne.n	8007892 <USB_EPStartXfer+0xa84>
 800786c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800786e:	881b      	ldrh	r3, [r3, #0]
 8007870:	b29b      	uxth	r3, r3
 8007872:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007876:	b29a      	uxth	r2, r3
 8007878:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800787a:	801a      	strh	r2, [r3, #0]
 800787c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	b29b      	uxth	r3, r3
 8007882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800788a:	b29a      	uxth	r2, r3
 800788c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800788e:	801a      	strh	r2, [r3, #0]
 8007890:	e03c      	b.n	800790c <USB_EPStartXfer+0xafe>
 8007892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007896:	085b      	lsrs	r3, r3, #1
 8007898:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800789c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d004      	beq.n	80078b2 <USB_EPStartXfer+0xaa4>
 80078a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80078ac:	3301      	adds	r3, #1
 80078ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80078b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	029b      	lsls	r3, r3, #10
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078be:	801a      	strh	r2, [r3, #0]
 80078c0:	e024      	b.n	800790c <USB_EPStartXfer+0xafe>
 80078c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	785b      	ldrb	r3, [r3, #1]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d11c      	bne.n	800790c <USB_EPStartXfer+0xafe>
 80078d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	461a      	mov	r2, r3
 80078e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078e6:	4413      	add	r3, r2
 80078e8:	673b      	str	r3, [r7, #112]	; 0x70
 80078ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	00da      	lsls	r2, r3, #3
 80078f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078fa:	4413      	add	r3, r2
 80078fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007900:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007906:	b29a      	uxth	r2, r3
 8007908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800790a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800790c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	895b      	ldrh	r3, [r3, #10]
 8007918:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800791c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6959      	ldr	r1, [r3, #20]
 8007928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800792c:	b29b      	uxth	r3, r3
 800792e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007932:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007936:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800793a:	6800      	ldr	r0, [r0, #0]
 800793c:	f000 fef8 	bl	8008730 <USB_WritePMA>
 8007940:	e0c0      	b.n	8007ac4 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	785b      	ldrb	r3, [r3, #1]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d16d      	bne.n	8007a2e <USB_EPStartXfer+0xc20>
 8007952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007956:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800795e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007962:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800796c:	b29b      	uxth	r3, r3
 800796e:	461a      	mov	r2, r3
 8007970:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007972:	4413      	add	r3, r2
 8007974:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800797a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	00da      	lsls	r2, r3, #3
 8007984:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007986:	4413      	add	r3, r2
 8007988:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800798c:	67bb      	str	r3, [r7, #120]	; 0x78
 800798e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007992:	2b3e      	cmp	r3, #62	; 0x3e
 8007994:	d91c      	bls.n	80079d0 <USB_EPStartXfer+0xbc2>
 8007996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800799a:	095b      	lsrs	r3, r3, #5
 800799c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80079a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079a4:	f003 031f 	and.w	r3, r3, #31
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d104      	bne.n	80079b6 <USB_EPStartXfer+0xba8>
 80079ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80079b0:	3b01      	subs	r3, #1
 80079b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80079b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	029b      	lsls	r3, r3, #10
 80079be:	b29b      	uxth	r3, r3
 80079c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079cc:	801a      	strh	r2, [r3, #0]
 80079ce:	e05f      	b.n	8007a90 <USB_EPStartXfer+0xc82>
 80079d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d112      	bne.n	80079fe <USB_EPStartXfer+0xbf0>
 80079d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079da:	881b      	ldrh	r3, [r3, #0]
 80079dc:	b29b      	uxth	r3, r3
 80079de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079e6:	801a      	strh	r2, [r3, #0]
 80079e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079ea:	881b      	ldrh	r3, [r3, #0]
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079fa:	801a      	strh	r2, [r3, #0]
 80079fc:	e048      	b.n	8007a90 <USB_EPStartXfer+0xc82>
 80079fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a02:	085b      	lsrs	r3, r3, #1
 8007a04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a0c:	f003 0301 	and.w	r3, r3, #1
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d004      	beq.n	8007a1e <USB_EPStartXfer+0xc10>
 8007a14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a18:	3301      	adds	r3, #1
 8007a1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	029b      	lsls	r3, r3, #10
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a2a:	801a      	strh	r2, [r3, #0]
 8007a2c:	e030      	b.n	8007a90 <USB_EPStartXfer+0xc82>
 8007a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	785b      	ldrb	r3, [r3, #1]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d128      	bne.n	8007a90 <USB_EPStartXfer+0xc82>
 8007a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a62:	4413      	add	r3, r2
 8007a64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	00da      	lsls	r2, r3, #3
 8007a76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a8e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	891b      	ldrh	r3, [r3, #8]
 8007a9c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6959      	ldr	r1, [r3, #20]
 8007aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007ab6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007aba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007abe:	6800      	ldr	r0, [r0, #0]
 8007ac0:	f000 fe36 	bl	8008730 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4413      	add	r3, r2
 8007ade:	881b      	ldrh	r3, [r3, #0]
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aea:	817b      	strh	r3, [r7, #10]
 8007aec:	897b      	ldrh	r3, [r7, #10]
 8007aee:	f083 0310 	eor.w	r3, r3, #16
 8007af2:	817b      	strh	r3, [r7, #10]
 8007af4:	897b      	ldrh	r3, [r7, #10]
 8007af6:	f083 0320 	eor.w	r3, r3, #32
 8007afa:	817b      	strh	r3, [r7, #10]
 8007afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	441a      	add	r2, r3
 8007b16:	897b      	ldrh	r3, [r7, #10]
 8007b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	8013      	strh	r3, [r2, #0]
 8007b2c:	f000 bc9f 	b.w	800846e <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	7b1b      	ldrb	r3, [r3, #12]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f040 80ae 	bne.w	8007c9e <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	699a      	ldr	r2, [r3, #24]
 8007b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d917      	bls.n	8007b8e <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8007b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	699a      	ldr	r2, [r3, #24]
 8007b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b7e:	1ad2      	subs	r2, r2, r3
 8007b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	619a      	str	r2, [r3, #24]
 8007b8c:	e00e      	b.n	8007bac <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8007b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007bac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	461a      	mov	r2, r3
 8007bcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	00da      	lsls	r2, r3, #3
 8007be4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007be8:	4413      	add	r3, r2
 8007bea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007bee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bf6:	2b3e      	cmp	r3, #62	; 0x3e
 8007bf8:	d91d      	bls.n	8007c36 <USB_EPStartXfer+0xe28>
 8007bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bfe:	095b      	lsrs	r3, r3, #5
 8007c00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c08:	f003 031f 	and.w	r3, r3, #31
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d104      	bne.n	8007c1a <USB_EPStartXfer+0xe0c>
 8007c10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c14:	3b01      	subs	r3, #1
 8007c16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	029b      	lsls	r3, r3, #10
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c32:	801a      	strh	r2, [r3, #0]
 8007c34:	e3e1      	b.n	80083fa <USB_EPStartXfer+0x15ec>
 8007c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d116      	bne.n	8007c6c <USB_EPStartXfer+0xe5e>
 8007c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c42:	881b      	ldrh	r3, [r3, #0]
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c50:	801a      	strh	r2, [r3, #0]
 8007c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c56:	881b      	ldrh	r3, [r3, #0]
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c68:	801a      	strh	r2, [r3, #0]
 8007c6a:	e3c6      	b.n	80083fa <USB_EPStartXfer+0x15ec>
 8007c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c70:	085b      	lsrs	r3, r3, #1
 8007c72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d004      	beq.n	8007c8c <USB_EPStartXfer+0xe7e>
 8007c82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c86:	3301      	adds	r3, #1
 8007c88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	029b      	lsls	r3, r3, #10
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c9a:	801a      	strh	r2, [r3, #0]
 8007c9c:	e3ad      	b.n	80083fa <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	78db      	ldrb	r3, [r3, #3]
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	f040 8200 	bne.w	80080b0 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	785b      	ldrb	r3, [r3, #1]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f040 8091 	bne.w	8007de4 <USB_EPStartXfer+0xfd6>
 8007cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	00da      	lsls	r2, r3, #3
 8007cfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cfe:	4413      	add	r3, r2
 8007d00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	2b3e      	cmp	r3, #62	; 0x3e
 8007d16:	d925      	bls.n	8007d64 <USB_EPStartXfer+0xf56>
 8007d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	095b      	lsrs	r3, r3, #5
 8007d26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	f003 031f 	and.w	r3, r3, #31
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d104      	bne.n	8007d48 <USB_EPStartXfer+0xf3a>
 8007d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d42:	3b01      	subs	r3, #1
 8007d44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	029b      	lsls	r3, r3, #10
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d60:	801a      	strh	r2, [r3, #0]
 8007d62:	e074      	b.n	8007e4e <USB_EPStartXfer+0x1040>
 8007d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d116      	bne.n	8007da2 <USB_EPStartXfer+0xf94>
 8007d74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d86:	801a      	strh	r2, [r3, #0]
 8007d88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d8c:	881b      	ldrh	r3, [r3, #0]
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d9e:	801a      	strh	r2, [r3, #0]
 8007da0:	e055      	b.n	8007e4e <USB_EPStartXfer+0x1040>
 8007da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	085b      	lsrs	r3, r3, #1
 8007db0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d004      	beq.n	8007dd2 <USB_EPStartXfer+0xfc4>
 8007dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dcc:	3301      	adds	r3, #1
 8007dce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	029b      	lsls	r3, r3, #10
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007de0:	801a      	strh	r2, [r3, #0]
 8007de2:	e034      	b.n	8007e4e <USB_EPStartXfer+0x1040>
 8007de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	785b      	ldrb	r3, [r3, #1]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d12c      	bne.n	8007e4e <USB_EPStartXfer+0x1040>
 8007df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007df8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	461a      	mov	r2, r3
 8007e14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e18:	4413      	add	r3, r2
 8007e1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	00da      	lsls	r2, r3, #3
 8007e2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e30:	4413      	add	r3, r2
 8007e32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007e4c:	801a      	strh	r2, [r3, #0]
 8007e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	785b      	ldrb	r3, [r3, #1]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f040 8091 	bne.w	8007f90 <USB_EPStartXfer+0x1182>
 8007e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e92:	4413      	add	r3, r2
 8007e94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	00da      	lsls	r2, r3, #3
 8007ea6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007eaa:	4413      	add	r3, r2
 8007eac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	2b3e      	cmp	r3, #62	; 0x3e
 8007ec2:	d925      	bls.n	8007f10 <USB_EPStartXfer+0x1102>
 8007ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	095b      	lsrs	r3, r3, #5
 8007ed2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	f003 031f 	and.w	r3, r3, #31
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d104      	bne.n	8007ef4 <USB_EPStartXfer+0x10e6>
 8007eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	029b      	lsls	r3, r3, #10
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f0c:	801a      	strh	r2, [r3, #0]
 8007f0e:	e06d      	b.n	8007fec <USB_EPStartXfer+0x11de>
 8007f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d116      	bne.n	8007f4e <USB_EPStartXfer+0x1140>
 8007f20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f24:	881b      	ldrh	r3, [r3, #0]
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f32:	801a      	strh	r2, [r3, #0]
 8007f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f4a:	801a      	strh	r2, [r3, #0]
 8007f4c:	e04e      	b.n	8007fec <USB_EPStartXfer+0x11de>
 8007f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	085b      	lsrs	r3, r3, #1
 8007f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	f003 0301 	and.w	r3, r3, #1
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d004      	beq.n	8007f7e <USB_EPStartXfer+0x1170>
 8007f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f78:	3301      	adds	r3, #1
 8007f7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	029b      	lsls	r3, r3, #10
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f8c:	801a      	strh	r2, [r3, #0]
 8007f8e:	e02d      	b.n	8007fec <USB_EPStartXfer+0x11de>
 8007f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	785b      	ldrb	r3, [r3, #1]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d125      	bne.n	8007fec <USB_EPStartXfer+0x11de>
 8007fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	00da      	lsls	r2, r3, #3
 8007fca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fce:	4413      	add	r3, r2
 8007fd0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007fd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fea:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	69db      	ldr	r3, [r3, #28]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f000 81fe 	beq.w	80083fa <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008002:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800800c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800801e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d005      	beq.n	8008036 <USB_EPStartXfer+0x1228>
 800802a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800802e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008032:	2b00      	cmp	r3, #0
 8008034:	d10d      	bne.n	8008052 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008036:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800803a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800803e:	2b00      	cmp	r3, #0
 8008040:	f040 81db 	bne.w	80083fa <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008044:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800804c:	2b00      	cmp	r3, #0
 800804e:	f040 81d4 	bne.w	80083fa <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008056:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	b29b      	uxth	r3, r3
 8008070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008078:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800807c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008080:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800808a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	441a      	add	r2, r3
 8008096:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800809a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800809e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	8013      	strh	r3, [r2, #0]
 80080ae:	e1a4      	b.n	80083fa <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80080b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	78db      	ldrb	r3, [r3, #3]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	f040 819a 	bne.w	80083f6 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80080c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	699a      	ldr	r2, [r3, #24]
 80080ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d917      	bls.n	800810e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 80080de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80080ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	699a      	ldr	r2, [r3, #24]
 80080fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080fe:	1ad2      	subs	r2, r2, r3
 8008100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	619a      	str	r2, [r3, #24]
 800810c:	e00e      	b.n	800812c <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800810e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800811e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2200      	movs	r2, #0
 800812a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800812c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	785b      	ldrb	r3, [r3, #1]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d178      	bne.n	800822e <USB_EPStartXfer+0x1420>
 800813c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008140:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800814a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800814e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008158:	b29b      	uxth	r3, r3
 800815a:	461a      	mov	r2, r3
 800815c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008160:	4413      	add	r3, r2
 8008162:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800816a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	00da      	lsls	r2, r3, #3
 8008174:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008178:	4413      	add	r3, r2
 800817a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800817e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008186:	2b3e      	cmp	r3, #62	; 0x3e
 8008188:	d91d      	bls.n	80081c6 <USB_EPStartXfer+0x13b8>
 800818a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800818e:	095b      	lsrs	r3, r3, #5
 8008190:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008198:	f003 031f 	and.w	r3, r3, #31
 800819c:	2b00      	cmp	r3, #0
 800819e:	d104      	bne.n	80081aa <USB_EPStartXfer+0x139c>
 80081a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081a4:	3b01      	subs	r3, #1
 80081a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80081aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	029b      	lsls	r3, r3, #10
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081bc:	b29a      	uxth	r2, r3
 80081be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081c2:	801a      	strh	r2, [r3, #0]
 80081c4:	e064      	b.n	8008290 <USB_EPStartXfer+0x1482>
 80081c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d116      	bne.n	80081fc <USB_EPStartXfer+0x13ee>
 80081ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081d2:	881b      	ldrh	r3, [r3, #0]
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081da:	b29a      	uxth	r2, r3
 80081dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081e0:	801a      	strh	r2, [r3, #0]
 80081e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081e6:	881b      	ldrh	r3, [r3, #0]
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081f8:	801a      	strh	r2, [r3, #0]
 80081fa:	e049      	b.n	8008290 <USB_EPStartXfer+0x1482>
 80081fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008200:	085b      	lsrs	r3, r3, #1
 8008202:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800820a:	f003 0301 	and.w	r3, r3, #1
 800820e:	2b00      	cmp	r3, #0
 8008210:	d004      	beq.n	800821c <USB_EPStartXfer+0x140e>
 8008212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008216:	3301      	adds	r3, #1
 8008218:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800821c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008220:	b29b      	uxth	r3, r3
 8008222:	029b      	lsls	r3, r3, #10
 8008224:	b29a      	uxth	r2, r3
 8008226:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800822a:	801a      	strh	r2, [r3, #0]
 800822c:	e030      	b.n	8008290 <USB_EPStartXfer+0x1482>
 800822e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	785b      	ldrb	r3, [r3, #1]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d128      	bne.n	8008290 <USB_EPStartXfer+0x1482>
 800823e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008242:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800824c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008250:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800825a:	b29b      	uxth	r3, r3
 800825c:	461a      	mov	r2, r3
 800825e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008262:	4413      	add	r3, r2
 8008264:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800826c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	00da      	lsls	r2, r3, #3
 8008276:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800827a:	4413      	add	r3, r2
 800827c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008280:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008288:	b29a      	uxth	r2, r3
 800828a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800828e:	801a      	strh	r2, [r3, #0]
 8008290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800829e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	785b      	ldrb	r3, [r3, #1]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d178      	bne.n	80083a0 <USB_EPStartXfer+0x1592>
 80082ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80082bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	461a      	mov	r2, r3
 80082ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80082d2:	4413      	add	r3, r2
 80082d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80082d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	00da      	lsls	r2, r3, #3
 80082e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80082ea:	4413      	add	r3, r2
 80082ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80082f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082f8:	2b3e      	cmp	r3, #62	; 0x3e
 80082fa:	d91d      	bls.n	8008338 <USB_EPStartXfer+0x152a>
 80082fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008300:	095b      	lsrs	r3, r3, #5
 8008302:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800830a:	f003 031f 	and.w	r3, r3, #31
 800830e:	2b00      	cmp	r3, #0
 8008310:	d104      	bne.n	800831c <USB_EPStartXfer+0x150e>
 8008312:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008316:	3b01      	subs	r3, #1
 8008318:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800831c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008320:	b29b      	uxth	r3, r3
 8008322:	029b      	lsls	r3, r3, #10
 8008324:	b29b      	uxth	r3, r3
 8008326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800832a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800832e:	b29a      	uxth	r2, r3
 8008330:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008334:	801a      	strh	r2, [r3, #0]
 8008336:	e060      	b.n	80083fa <USB_EPStartXfer+0x15ec>
 8008338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800833c:	2b00      	cmp	r3, #0
 800833e:	d116      	bne.n	800836e <USB_EPStartXfer+0x1560>
 8008340:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008344:	881b      	ldrh	r3, [r3, #0]
 8008346:	b29b      	uxth	r3, r3
 8008348:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800834c:	b29a      	uxth	r2, r3
 800834e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008352:	801a      	strh	r2, [r3, #0]
 8008354:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	b29b      	uxth	r3, r3
 800835c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008364:	b29a      	uxth	r2, r3
 8008366:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800836a:	801a      	strh	r2, [r3, #0]
 800836c:	e045      	b.n	80083fa <USB_EPStartXfer+0x15ec>
 800836e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008372:	085b      	lsrs	r3, r3, #1
 8008374:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800837c:	f003 0301 	and.w	r3, r3, #1
 8008380:	2b00      	cmp	r3, #0
 8008382:	d004      	beq.n	800838e <USB_EPStartXfer+0x1580>
 8008384:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008388:	3301      	adds	r3, #1
 800838a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800838e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008392:	b29b      	uxth	r3, r3
 8008394:	029b      	lsls	r3, r3, #10
 8008396:	b29a      	uxth	r2, r3
 8008398:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800839c:	801a      	strh	r2, [r3, #0]
 800839e:	e02c      	b.n	80083fa <USB_EPStartXfer+0x15ec>
 80083a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	785b      	ldrb	r3, [r3, #1]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d124      	bne.n	80083fa <USB_EPStartXfer+0x15ec>
 80083b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083be:	b29b      	uxth	r3, r3
 80083c0:	461a      	mov	r2, r3
 80083c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80083c6:	4413      	add	r3, r2
 80083c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80083cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	00da      	lsls	r2, r3, #3
 80083da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80083de:	4413      	add	r3, r2
 80083e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80083e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80083f2:	801a      	strh	r2, [r3, #0]
 80083f4:	e001      	b.n	80083fa <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e03a      	b.n	8008470 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80083fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4413      	add	r3, r2
 8008414:	881b      	ldrh	r3, [r3, #0]
 8008416:	b29b      	uxth	r3, r3
 8008418:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800841c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008420:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008424:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008428:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800842c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008430:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008434:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008438:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800843c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008440:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800844a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	441a      	add	r2, r3
 8008456:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800845a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800845e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800846a:	b29b      	uxth	r3, r3
 800846c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800847a:	b480      	push	{r7}
 800847c:	b085      	sub	sp, #20
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	785b      	ldrb	r3, [r3, #1]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d020      	beq.n	80084ce <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	b29b      	uxth	r3, r3
 800849a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800849e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084a2:	81bb      	strh	r3, [r7, #12]
 80084a4:	89bb      	ldrh	r3, [r7, #12]
 80084a6:	f083 0310 	eor.w	r3, r3, #16
 80084aa:	81bb      	strh	r3, [r7, #12]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	441a      	add	r2, r3
 80084b6:	89bb      	ldrh	r3, [r7, #12]
 80084b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	8013      	strh	r3, [r2, #0]
 80084cc:	e01f      	b.n	800850e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	881b      	ldrh	r3, [r3, #0]
 80084da:	b29b      	uxth	r3, r3
 80084dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084e4:	81fb      	strh	r3, [r7, #14]
 80084e6:	89fb      	ldrh	r3, [r7, #14]
 80084e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80084ec:	81fb      	strh	r3, [r7, #14]
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	441a      	add	r2, r3
 80084f8:	89fb      	ldrh	r3, [r7, #14]
 80084fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800850a:	b29b      	uxth	r3, r3
 800850c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3714      	adds	r7, #20
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800851c:	b480      	push	{r7}
 800851e:	b087      	sub	sp, #28
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	7b1b      	ldrb	r3, [r3, #12]
 800852a:	2b00      	cmp	r3, #0
 800852c:	f040 809d 	bne.w	800866a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	785b      	ldrb	r3, [r3, #1]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d04c      	beq.n	80085d2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4413      	add	r3, r2
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	823b      	strh	r3, [r7, #16]
 8008546:	8a3b      	ldrh	r3, [r7, #16]
 8008548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800854c:	2b00      	cmp	r3, #0
 800854e:	d01b      	beq.n	8008588 <USB_EPClearStall+0x6c>
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4413      	add	r3, r2
 800855a:	881b      	ldrh	r3, [r3, #0]
 800855c:	b29b      	uxth	r3, r3
 800855e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008566:	81fb      	strh	r3, [r7, #14]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	441a      	add	r2, r3
 8008572:	89fb      	ldrh	r3, [r7, #14]
 8008574:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008578:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800857c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008580:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008584:	b29b      	uxth	r3, r3
 8008586:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	78db      	ldrb	r3, [r3, #3]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d06c      	beq.n	800866a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	4413      	add	r3, r2
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	b29b      	uxth	r3, r3
 800859e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085a6:	81bb      	strh	r3, [r7, #12]
 80085a8:	89bb      	ldrh	r3, [r7, #12]
 80085aa:	f083 0320 	eor.w	r3, r3, #32
 80085ae:	81bb      	strh	r3, [r7, #12]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	441a      	add	r2, r3
 80085ba:	89bb      	ldrh	r3, [r7, #12]
 80085bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	8013      	strh	r3, [r2, #0]
 80085d0:	e04b      	b.n	800866a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	881b      	ldrh	r3, [r3, #0]
 80085de:	82fb      	strh	r3, [r7, #22]
 80085e0:	8afb      	ldrh	r3, [r7, #22]
 80085e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d01b      	beq.n	8008622 <USB_EPClearStall+0x106>
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4413      	add	r3, r2
 80085f4:	881b      	ldrh	r3, [r3, #0]
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008600:	82bb      	strh	r3, [r7, #20]
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	441a      	add	r2, r3
 800860c:	8abb      	ldrh	r3, [r7, #20]
 800860e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800861a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800861e:	b29b      	uxth	r3, r3
 8008620:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4413      	add	r3, r2
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	b29b      	uxth	r3, r3
 8008630:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008638:	827b      	strh	r3, [r7, #18]
 800863a:	8a7b      	ldrh	r3, [r7, #18]
 800863c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008640:	827b      	strh	r3, [r7, #18]
 8008642:	8a7b      	ldrh	r3, [r7, #18]
 8008644:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008648:	827b      	strh	r3, [r7, #18]
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	441a      	add	r2, r3
 8008654:	8a7b      	ldrh	r3, [r7, #18]
 8008656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800865a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800865e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008666:	b29b      	uxth	r3, r3
 8008668:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	371c      	adds	r7, #28
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	460b      	mov	r3, r1
 8008682:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008684:	78fb      	ldrb	r3, [r7, #3]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d103      	bne.n	8008692 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2280      	movs	r2, #128	; 0x80
 800868e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b083      	sub	sp, #12
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80086dc:	b29b      	uxth	r3, r3
 80086de:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008706:	b29b      	uxth	r3, r3
 8008708:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800870a:	68fb      	ldr	r3, [r7, #12]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008730:	b480      	push	{r7}
 8008732:	b08b      	sub	sp, #44	; 0x2c
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	4611      	mov	r1, r2
 800873c:	461a      	mov	r2, r3
 800873e:	460b      	mov	r3, r1
 8008740:	80fb      	strh	r3, [r7, #6]
 8008742:	4613      	mov	r3, r2
 8008744:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008746:	88bb      	ldrh	r3, [r7, #4]
 8008748:	3301      	adds	r3, #1
 800874a:	085b      	lsrs	r3, r3, #1
 800874c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008756:	88fa      	ldrh	r2, [r7, #6]
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	4413      	add	r3, r2
 800875c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008760:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	627b      	str	r3, [r7, #36]	; 0x24
 8008766:	e01b      	b.n	80087a0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	3301      	adds	r3, #1
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	021b      	lsls	r3, r3, #8
 8008776:	b21a      	sxth	r2, r3
 8008778:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800877c:	4313      	orrs	r3, r2
 800877e:	b21b      	sxth	r3, r3
 8008780:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008782:	6a3b      	ldr	r3, [r7, #32]
 8008784:	8a7a      	ldrh	r2, [r7, #18]
 8008786:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008788:	6a3b      	ldr	r3, [r7, #32]
 800878a:	3302      	adds	r3, #2
 800878c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	3301      	adds	r3, #1
 8008792:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	3301      	adds	r3, #1
 8008798:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	3b01      	subs	r3, #1
 800879e:	627b      	str	r3, [r7, #36]	; 0x24
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1e0      	bne.n	8008768 <USB_WritePMA+0x38>
  }
}
 80087a6:	bf00      	nop
 80087a8:	bf00      	nop
 80087aa:	372c      	adds	r7, #44	; 0x2c
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b08b      	sub	sp, #44	; 0x2c
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	4611      	mov	r1, r2
 80087c0:	461a      	mov	r2, r3
 80087c2:	460b      	mov	r3, r1
 80087c4:	80fb      	strh	r3, [r7, #6]
 80087c6:	4613      	mov	r3, r2
 80087c8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80087ca:	88bb      	ldrh	r3, [r7, #4]
 80087cc:	085b      	lsrs	r3, r3, #1
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087da:	88fa      	ldrh	r2, [r7, #6]
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087e4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	627b      	str	r3, [r7, #36]	; 0x24
 80087ea:	e018      	b.n	800881e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80087ec:	6a3b      	ldr	r3, [r7, #32]
 80087ee:	881b      	ldrh	r3, [r3, #0]
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80087f4:	6a3b      	ldr	r3, [r7, #32]
 80087f6:	3302      	adds	r3, #2
 80087f8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	3301      	adds	r3, #1
 8008806:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	0a1b      	lsrs	r3, r3, #8
 800880c:	b2da      	uxtb	r2, r3
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	3301      	adds	r3, #1
 8008816:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	3b01      	subs	r3, #1
 800881c:	627b      	str	r3, [r7, #36]	; 0x24
 800881e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1e3      	bne.n	80087ec <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008824:	88bb      	ldrh	r3, [r7, #4]
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	b29b      	uxth	r3, r3
 800882c:	2b00      	cmp	r3, #0
 800882e:	d007      	beq.n	8008840 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008830:	6a3b      	ldr	r3, [r7, #32]
 8008832:	881b      	ldrh	r3, [r3, #0]
 8008834:	b29b      	uxth	r3, r3
 8008836:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	b2da      	uxtb	r2, r3
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	701a      	strb	r2, [r3, #0]
  }
}
 8008840:	bf00      	nop
 8008842:	372c      	adds	r7, #44	; 0x2c
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	460b      	mov	r3, r1
 8008856:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008858:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800885c:	f002 f99c 	bl	800ab98 <USBD_static_malloc>
 8008860:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d105      	bne.n	8008874 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008870:	2302      	movs	r3, #2
 8008872:	e066      	b.n	8008942 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	7c1b      	ldrb	r3, [r3, #16]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d119      	bne.n	80088b8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008884:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008888:	2202      	movs	r2, #2
 800888a:	2181      	movs	r1, #129	; 0x81
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f001 ff85 	bl	800a79c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2201      	movs	r2, #1
 8008896:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800889c:	2202      	movs	r2, #2
 800889e:	2101      	movs	r1, #1
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f001 ff7b 	bl	800a79c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2210      	movs	r2, #16
 80088b2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80088b6:	e016      	b.n	80088e6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088b8:	2340      	movs	r3, #64	; 0x40
 80088ba:	2202      	movs	r2, #2
 80088bc:	2181      	movs	r1, #129	; 0x81
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f001 ff6c 	bl	800a79c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088ca:	2340      	movs	r3, #64	; 0x40
 80088cc:	2202      	movs	r2, #2
 80088ce:	2101      	movs	r1, #1
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f001 ff63 	bl	800a79c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2201      	movs	r2, #1
 80088da:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2210      	movs	r2, #16
 80088e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80088e6:	2308      	movs	r3, #8
 80088e8:	2203      	movs	r2, #3
 80088ea:	2182      	movs	r1, #130	; 0x82
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f001 ff55 	bl	800a79c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	7c1b      	ldrb	r3, [r3, #16]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d109      	bne.n	8008930 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008926:	2101      	movs	r1, #1
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f002 f8b3 	bl	800aa94 <USBD_LL_PrepareReceive>
 800892e:	e007      	b.n	8008940 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008936:	2340      	movs	r3, #64	; 0x40
 8008938:	2101      	movs	r1, #1
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f002 f8aa 	bl	800aa94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b082      	sub	sp, #8
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	460b      	mov	r3, r1
 8008954:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008956:	2181      	movs	r1, #129	; 0x81
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f001 ff5d 	bl	800a818 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008964:	2101      	movs	r1, #1
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f001 ff56 	bl	800a818 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008974:	2182      	movs	r1, #130	; 0x82
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f001 ff4e 	bl	800a818 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00e      	beq.n	80089b4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089a6:	4618      	mov	r0, r3
 80089a8:	f002 f904 	bl	800abb4 <USBD_static_free>
    pdev->pClassData = NULL;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
	...

080089c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089d0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80089d2:	2300      	movs	r3, #0
 80089d4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80089d6:	2300      	movs	r3, #0
 80089d8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d101      	bne.n	80089e8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e0af      	b.n	8008b48 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d03f      	beq.n	8008a74 <USBD_CDC_Setup+0xb4>
 80089f4:	2b20      	cmp	r3, #32
 80089f6:	f040 809f 	bne.w	8008b38 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	88db      	ldrh	r3, [r3, #6]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d02e      	beq.n	8008a60 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	b25b      	sxtb	r3, r3
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	da16      	bge.n	8008a3a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008a18:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a1a:	683a      	ldr	r2, [r7, #0]
 8008a1c:	88d2      	ldrh	r2, [r2, #6]
 8008a1e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	88db      	ldrh	r3, [r3, #6]
 8008a24:	2b07      	cmp	r3, #7
 8008a26:	bf28      	it	cs
 8008a28:	2307      	movcs	r3, #7
 8008a2a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	89fa      	ldrh	r2, [r7, #14]
 8008a30:	4619      	mov	r1, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f001 fa9f 	bl	8009f76 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008a38:	e085      	b.n	8008b46 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	785a      	ldrb	r2, [r3, #1]
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	88db      	ldrh	r3, [r3, #6]
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008a50:	6939      	ldr	r1, [r7, #16]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	88db      	ldrh	r3, [r3, #6]
 8008a56:	461a      	mov	r2, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f001 fab8 	bl	8009fce <USBD_CtlPrepareRx>
      break;
 8008a5e:	e072      	b.n	8008b46 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	683a      	ldr	r2, [r7, #0]
 8008a6a:	7850      	ldrb	r0, [r2, #1]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	4798      	blx	r3
      break;
 8008a72:	e068      	b.n	8008b46 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	785b      	ldrb	r3, [r3, #1]
 8008a78:	2b0b      	cmp	r3, #11
 8008a7a:	d852      	bhi.n	8008b22 <USBD_CDC_Setup+0x162>
 8008a7c:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <USBD_CDC_Setup+0xc4>)
 8008a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a82:	bf00      	nop
 8008a84:	08008ab5 	.word	0x08008ab5
 8008a88:	08008b31 	.word	0x08008b31
 8008a8c:	08008b23 	.word	0x08008b23
 8008a90:	08008b23 	.word	0x08008b23
 8008a94:	08008b23 	.word	0x08008b23
 8008a98:	08008b23 	.word	0x08008b23
 8008a9c:	08008b23 	.word	0x08008b23
 8008aa0:	08008b23 	.word	0x08008b23
 8008aa4:	08008b23 	.word	0x08008b23
 8008aa8:	08008b23 	.word	0x08008b23
 8008aac:	08008adf 	.word	0x08008adf
 8008ab0:	08008b09 	.word	0x08008b09
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d107      	bne.n	8008ad0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008ac0:	f107 030a 	add.w	r3, r7, #10
 8008ac4:	2202      	movs	r2, #2
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f001 fa54 	bl	8009f76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ace:	e032      	b.n	8008b36 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008ad0:	6839      	ldr	r1, [r7, #0]
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f001 f9de 	bl	8009e94 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	75fb      	strb	r3, [r7, #23]
          break;
 8008adc:	e02b      	b.n	8008b36 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	2b03      	cmp	r3, #3
 8008ae8:	d107      	bne.n	8008afa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008aea:	f107 030d 	add.w	r3, r7, #13
 8008aee:	2201      	movs	r2, #1
 8008af0:	4619      	mov	r1, r3
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f001 fa3f 	bl	8009f76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008af8:	e01d      	b.n	8008b36 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f001 f9c9 	bl	8009e94 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b02:	2303      	movs	r3, #3
 8008b04:	75fb      	strb	r3, [r7, #23]
          break;
 8008b06:	e016      	b.n	8008b36 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b03      	cmp	r3, #3
 8008b12:	d00f      	beq.n	8008b34 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f001 f9bc 	bl	8009e94 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b20:	e008      	b.n	8008b34 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f001 f9b5 	bl	8009e94 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	75fb      	strb	r3, [r7, #23]
          break;
 8008b2e:	e002      	b.n	8008b36 <USBD_CDC_Setup+0x176>
          break;
 8008b30:	bf00      	nop
 8008b32:	e008      	b.n	8008b46 <USBD_CDC_Setup+0x186>
          break;
 8008b34:	bf00      	nop
      }
      break;
 8008b36:	e006      	b.n	8008b46 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008b38:	6839      	ldr	r1, [r7, #0]
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f001 f9aa 	bl	8009e94 <USBD_CtlError>
      ret = USBD_FAIL;
 8008b40:	2303      	movs	r3, #3
 8008b42:	75fb      	strb	r3, [r7, #23]
      break;
 8008b44:	bf00      	nop
  }

  return (uint8_t)ret;
 8008b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3718      	adds	r7, #24
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	460b      	mov	r3, r1
 8008b5a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e04f      	b.n	8008c12 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b78:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008b7a:	78fa      	ldrb	r2, [r7, #3]
 8008b7c:	6879      	ldr	r1, [r7, #4]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	440b      	add	r3, r1
 8008b88:	3318      	adds	r3, #24
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d029      	beq.n	8008be4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008b90:	78fa      	ldrb	r2, [r7, #3]
 8008b92:	6879      	ldr	r1, [r7, #4]
 8008b94:	4613      	mov	r3, r2
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	4413      	add	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	440b      	add	r3, r1
 8008b9e:	3318      	adds	r3, #24
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	78f9      	ldrb	r1, [r7, #3]
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	440b      	add	r3, r1
 8008bac:	00db      	lsls	r3, r3, #3
 8008bae:	4403      	add	r3, r0
 8008bb0:	333c      	adds	r3, #60	; 0x3c
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8008bb8:	fb01 f303 	mul.w	r3, r1, r3
 8008bbc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d110      	bne.n	8008be4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008bc2:	78fa      	ldrb	r2, [r7, #3]
 8008bc4:	6879      	ldr	r1, [r7, #4]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	440b      	add	r3, r1
 8008bd0:	3318      	adds	r3, #24
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008bd6:	78f9      	ldrb	r1, [r7, #3]
 8008bd8:	2300      	movs	r3, #0
 8008bda:	2200      	movs	r2, #0
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f001 ff21 	bl	800aa24 <USBD_LL_Transmit>
 8008be2:	e015      	b.n	8008c10 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00b      	beq.n	8008c10 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008c0c:	78fa      	ldrb	r2, [r7, #3]
 8008c0e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b084      	sub	sp, #16
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	460b      	mov	r3, r1
 8008c24:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c2c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e015      	b.n	8008c68 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c3c:	78fb      	ldrb	r3, [r7, #3]
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f001 ff5f 	bl	800ab04 <USBD_LL_GetRxDataSize>
 8008c46:	4602      	mov	r2, r0
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008c62:	4611      	mov	r1, r2
 8008c64:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c7e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008c86:	2303      	movs	r3, #3
 8008c88:	e01b      	b.n	8008cc2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d015      	beq.n	8008cc0 <USBD_CDC_EP0_RxReady+0x50>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008c9a:	2bff      	cmp	r3, #255	; 0xff
 8008c9c:	d010      	beq.n	8008cc0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008cac:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008cb4:	b292      	uxth	r2, r2
 8008cb6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	22ff      	movs	r2, #255	; 0xff
 8008cbc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
	...

08008ccc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2243      	movs	r2, #67	; 0x43
 8008cd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008cda:	4b03      	ldr	r3, [pc, #12]	; (8008ce8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	20000094 	.word	0x20000094

08008cec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2243      	movs	r2, #67	; 0x43
 8008cf8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008cfa:	4b03      	ldr	r3, [pc, #12]	; (8008d08 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr
 8008d08:	20000050 	.word	0x20000050

08008d0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2243      	movs	r2, #67	; 0x43
 8008d18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008d1a:	4b03      	ldr	r3, [pc, #12]	; (8008d28 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	200000d8 	.word	0x200000d8

08008d2c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	220a      	movs	r2, #10
 8008d38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008d3a:	4b03      	ldr	r3, [pc, #12]	; (8008d48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr
 8008d48:	2000000c 	.word	0x2000000c

08008d4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d101      	bne.n	8008d60 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d5c:	2303      	movs	r3, #3
 8008d5e:	e004      	b.n	8008d6a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	370c      	adds	r7, #12
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr

08008d76 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008d76:	b480      	push	{r7}
 8008d78:	b087      	sub	sp, #28
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	60f8      	str	r0, [r7, #12]
 8008d7e:	60b9      	str	r1, [r7, #8]
 8008d80:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d88:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d101      	bne.n	8008d94 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e008      	b.n	8008da6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	371c      	adds	r7, #28
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008db2:	b480      	push	{r7}
 8008db4:	b085      	sub	sp, #20
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dc2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d101      	bne.n	8008dce <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e004      	b.n	8008dd8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	683a      	ldr	r2, [r7, #0]
 8008dd2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3714      	adds	r7, #20
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008df2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d101      	bne.n	8008e02 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e016      	b.n	8008e30 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	7c1b      	ldrb	r3, [r3, #16]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d109      	bne.n	8008e1e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e14:	2101      	movs	r1, #1
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f001 fe3c 	bl	800aa94 <USBD_LL_PrepareReceive>
 8008e1c:	e007      	b.n	8008e2e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e24:	2340      	movs	r3, #64	; 0x40
 8008e26:	2101      	movs	r1, #1
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f001 fe33 	bl	800aa94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b086      	sub	sp, #24
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	4613      	mov	r3, r2
 8008e44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d101      	bne.n	8008e50 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	e01f      	b.n	8008e90 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	68ba      	ldr	r2, [r7, #8]
 8008e72:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	79fa      	ldrb	r2, [r7, #7]
 8008e82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f001 fbf5 	bl	800a674 <USBD_LL_Init>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3718      	adds	r7, #24
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d101      	bne.n	8008eb0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008eac:	2303      	movs	r3, #3
 8008eae:	e016      	b.n	8008ede <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00b      	beq.n	8008edc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ecc:	f107 020e 	add.w	r2, r7, #14
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	4798      	blx	r3
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b082      	sub	sp, #8
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f001 fc22 	bl	800a738 <USBD_LL_Start>
 8008ef4:	4603      	mov	r3, r0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008efe:	b480      	push	{r7}
 8008f00:	b083      	sub	sp, #12
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008f20:	2303      	movs	r3, #3
 8008f22:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d009      	beq.n	8008f42 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	78fa      	ldrb	r2, [r7, #3]
 8008f38:	4611      	mov	r1, r2
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	4798      	blx	r3
 8008f3e:	4603      	mov	r3, r0
 8008f40:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	460b      	mov	r3, r1
 8008f56:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d007      	beq.n	8008f72 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	78fa      	ldrb	r2, [r7, #3]
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	4798      	blx	r3
  }

  return USBD_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f8c:	6839      	ldr	r1, [r7, #0]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 ff46 	bl	8009e20 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008fb0:	f003 031f 	and.w	r3, r3, #31
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d01a      	beq.n	8008fee <USBD_LL_SetupStage+0x72>
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d822      	bhi.n	8009002 <USBD_LL_SetupStage+0x86>
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d002      	beq.n	8008fc6 <USBD_LL_SetupStage+0x4a>
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d00a      	beq.n	8008fda <USBD_LL_SetupStage+0x5e>
 8008fc4:	e01d      	b.n	8009002 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fcc:	4619      	mov	r1, r3
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f9ee 	bl	80093b0 <USBD_StdDevReq>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8008fd8:	e020      	b.n	800901c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fa52 	bl	800948c <USBD_StdItfReq>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	73fb      	strb	r3, [r7, #15]
      break;
 8008fec:	e016      	b.n	800901c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fa91 	bl	800951e <USBD_StdEPReq>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8009000:	e00c      	b.n	800901c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009008:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800900c:	b2db      	uxtb	r3, r3
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f001 fc37 	bl	800a884 <USBD_LL_StallEP>
 8009016:	4603      	mov	r3, r0
 8009018:	73fb      	strb	r3, [r7, #15]
      break;
 800901a:	bf00      	nop
  }

  return ret;
 800901c:	7bfb      	ldrb	r3, [r7, #15]
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b086      	sub	sp, #24
 800902a:	af00      	add	r7, sp, #0
 800902c:	60f8      	str	r0, [r7, #12]
 800902e:	460b      	mov	r3, r1
 8009030:	607a      	str	r2, [r7, #4]
 8009032:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009034:	7afb      	ldrb	r3, [r7, #11]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d138      	bne.n	80090ac <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009040:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009048:	2b03      	cmp	r3, #3
 800904a:	d14a      	bne.n	80090e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	689a      	ldr	r2, [r3, #8]
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	429a      	cmp	r2, r3
 8009056:	d913      	bls.n	8009080 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	689a      	ldr	r2, [r3, #8]
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	1ad2      	subs	r2, r2, r3
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	68da      	ldr	r2, [r3, #12]
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	4293      	cmp	r3, r2
 8009070:	bf28      	it	cs
 8009072:	4613      	movcs	r3, r2
 8009074:	461a      	mov	r2, r3
 8009076:	6879      	ldr	r1, [r7, #4]
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f000 ffc5 	bl	800a008 <USBD_CtlContinueRx>
 800907e:	e030      	b.n	80090e2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009086:	b2db      	uxtb	r3, r3
 8009088:	2b03      	cmp	r3, #3
 800908a:	d10b      	bne.n	80090a4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d005      	beq.n	80090a4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f000 ffc0 	bl	800a02a <USBD_CtlSendStatus>
 80090aa:	e01a      	b.n	80090e2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	2b03      	cmp	r3, #3
 80090b6:	d114      	bne.n	80090e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090be:	699b      	ldr	r3, [r3, #24]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00e      	beq.n	80090e2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	7afa      	ldrb	r2, [r7, #11]
 80090ce:	4611      	mov	r1, r2
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	4798      	blx	r3
 80090d4:	4603      	mov	r3, r0
 80090d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80090d8:	7dfb      	ldrb	r3, [r7, #23]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80090de:	7dfb      	ldrb	r3, [r7, #23]
 80090e0:	e000      	b.n	80090e4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3718      	adds	r7, #24
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	460b      	mov	r3, r1
 80090f6:	607a      	str	r2, [r7, #4]
 80090f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80090fa:	7afb      	ldrb	r3, [r7, #11]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d16b      	bne.n	80091d8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	3314      	adds	r3, #20
 8009104:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800910c:	2b02      	cmp	r3, #2
 800910e:	d156      	bne.n	80091be <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	689a      	ldr	r2, [r3, #8]
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	429a      	cmp	r2, r3
 800911a:	d914      	bls.n	8009146 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	689a      	ldr	r2, [r3, #8]
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	1ad2      	subs	r2, r2, r3
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	461a      	mov	r2, r3
 8009130:	6879      	ldr	r1, [r7, #4]
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f000 ff3a 	bl	8009fac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009138:	2300      	movs	r3, #0
 800913a:	2200      	movs	r2, #0
 800913c:	2100      	movs	r1, #0
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f001 fca8 	bl	800aa94 <USBD_LL_PrepareReceive>
 8009144:	e03b      	b.n	80091be <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	68da      	ldr	r2, [r3, #12]
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	429a      	cmp	r2, r3
 8009150:	d11c      	bne.n	800918c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	685a      	ldr	r2, [r3, #4]
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800915a:	429a      	cmp	r2, r3
 800915c:	d316      	bcc.n	800918c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	685a      	ldr	r2, [r3, #4]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009168:	429a      	cmp	r2, r3
 800916a:	d20f      	bcs.n	800918c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800916c:	2200      	movs	r2, #0
 800916e:	2100      	movs	r1, #0
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f000 ff1b 	bl	8009fac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800917e:	2300      	movs	r3, #0
 8009180:	2200      	movs	r2, #0
 8009182:	2100      	movs	r1, #0
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f001 fc85 	bl	800aa94 <USBD_LL_PrepareReceive>
 800918a:	e018      	b.n	80091be <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009192:	b2db      	uxtb	r3, r3
 8009194:	2b03      	cmp	r3, #3
 8009196:	d10b      	bne.n	80091b0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d005      	beq.n	80091b0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80091b0:	2180      	movs	r1, #128	; 0x80
 80091b2:	68f8      	ldr	r0, [r7, #12]
 80091b4:	f001 fb66 	bl	800a884 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 ff49 	bl	800a050 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d122      	bne.n	800920e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f7ff fe98 	bl	8008efe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80091d6:	e01a      	b.n	800920e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2b03      	cmp	r3, #3
 80091e2:	d114      	bne.n	800920e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ea:	695b      	ldr	r3, [r3, #20]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00e      	beq.n	800920e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091f6:	695b      	ldr	r3, [r3, #20]
 80091f8:	7afa      	ldrb	r2, [r7, #11]
 80091fa:	4611      	mov	r1, r2
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	4798      	blx	r3
 8009200:	4603      	mov	r3, r0
 8009202:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009204:	7dfb      	ldrb	r3, [r7, #23]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d001      	beq.n	800920e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800920a:	7dfb      	ldrb	r3, [r7, #23]
 800920c:	e000      	b.n	8009210 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800920e:	2300      	movs	r3, #0
}
 8009210:	4618      	mov	r0, r3
 8009212:	3718      	adds	r7, #24
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009244:	2b00      	cmp	r3, #0
 8009246:	d101      	bne.n	800924c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009248:	2303      	movs	r3, #3
 800924a:	e02f      	b.n	80092ac <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00f      	beq.n	8009276 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d009      	beq.n	8009276 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	6852      	ldr	r2, [r2, #4]
 800926e:	b2d2      	uxtb	r2, r2
 8009270:	4611      	mov	r1, r2
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009276:	2340      	movs	r3, #64	; 0x40
 8009278:	2200      	movs	r2, #0
 800927a:	2100      	movs	r1, #0
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f001 fa8d 	bl	800a79c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2240      	movs	r2, #64	; 0x40
 800928e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009292:	2340      	movs	r3, #64	; 0x40
 8009294:	2200      	movs	r2, #0
 8009296:	2180      	movs	r1, #128	; 0x80
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f001 fa7f 	bl	800a79c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2201      	movs	r2, #1
 80092a2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2240      	movs	r2, #64	; 0x40
 80092a8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3708      	adds	r7, #8
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	460b      	mov	r3, r1
 80092be:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	78fa      	ldrb	r2, [r7, #3]
 80092c4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092e2:	b2da      	uxtb	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2204      	movs	r2, #4
 80092ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800930e:	b2db      	uxtb	r3, r3
 8009310:	2b04      	cmp	r3, #4
 8009312:	d106      	bne.n	8009322 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800931a:	b2da      	uxtb	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800933e:	2b00      	cmp	r3, #0
 8009340:	d101      	bne.n	8009346 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009342:	2303      	movs	r3, #3
 8009344:	e012      	b.n	800936c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800934c:	b2db      	uxtb	r3, r3
 800934e:	2b03      	cmp	r3, #3
 8009350:	d10b      	bne.n	800936a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009358:	69db      	ldr	r3, [r3, #28]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d005      	beq.n	800936a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009364:	69db      	ldr	r3, [r3, #28]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009374:	b480      	push	{r7}
 8009376:	b087      	sub	sp, #28
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	3301      	adds	r3, #1
 800938a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009392:	8a3b      	ldrh	r3, [r7, #16]
 8009394:	021b      	lsls	r3, r3, #8
 8009396:	b21a      	sxth	r2, r3
 8009398:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800939c:	4313      	orrs	r3, r2
 800939e:	b21b      	sxth	r3, r3
 80093a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80093a2:	89fb      	ldrh	r3, [r7, #14]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	371c      	adds	r7, #28
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093ba:	2300      	movs	r3, #0
 80093bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093c6:	2b40      	cmp	r3, #64	; 0x40
 80093c8:	d005      	beq.n	80093d6 <USBD_StdDevReq+0x26>
 80093ca:	2b40      	cmp	r3, #64	; 0x40
 80093cc:	d853      	bhi.n	8009476 <USBD_StdDevReq+0xc6>
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00b      	beq.n	80093ea <USBD_StdDevReq+0x3a>
 80093d2:	2b20      	cmp	r3, #32
 80093d4:	d14f      	bne.n	8009476 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	6839      	ldr	r1, [r7, #0]
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	4798      	blx	r3
 80093e4:	4603      	mov	r3, r0
 80093e6:	73fb      	strb	r3, [r7, #15]
      break;
 80093e8:	e04a      	b.n	8009480 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	785b      	ldrb	r3, [r3, #1]
 80093ee:	2b09      	cmp	r3, #9
 80093f0:	d83b      	bhi.n	800946a <USBD_StdDevReq+0xba>
 80093f2:	a201      	add	r2, pc, #4	; (adr r2, 80093f8 <USBD_StdDevReq+0x48>)
 80093f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f8:	0800944d 	.word	0x0800944d
 80093fc:	08009461 	.word	0x08009461
 8009400:	0800946b 	.word	0x0800946b
 8009404:	08009457 	.word	0x08009457
 8009408:	0800946b 	.word	0x0800946b
 800940c:	0800942b 	.word	0x0800942b
 8009410:	08009421 	.word	0x08009421
 8009414:	0800946b 	.word	0x0800946b
 8009418:	08009443 	.word	0x08009443
 800941c:	08009435 	.word	0x08009435
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f9de 	bl	80097e4 <USBD_GetDescriptor>
          break;
 8009428:	e024      	b.n	8009474 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800942a:	6839      	ldr	r1, [r7, #0]
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fb6d 	bl	8009b0c <USBD_SetAddress>
          break;
 8009432:	e01f      	b.n	8009474 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009434:	6839      	ldr	r1, [r7, #0]
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fbac 	bl	8009b94 <USBD_SetConfig>
 800943c:	4603      	mov	r3, r0
 800943e:	73fb      	strb	r3, [r7, #15]
          break;
 8009440:	e018      	b.n	8009474 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009442:	6839      	ldr	r1, [r7, #0]
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 fc4b 	bl	8009ce0 <USBD_GetConfig>
          break;
 800944a:	e013      	b.n	8009474 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 fc7c 	bl	8009d4c <USBD_GetStatus>
          break;
 8009454:	e00e      	b.n	8009474 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009456:	6839      	ldr	r1, [r7, #0]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fcab 	bl	8009db4 <USBD_SetFeature>
          break;
 800945e:	e009      	b.n	8009474 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009460:	6839      	ldr	r1, [r7, #0]
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 fcba 	bl	8009ddc <USBD_ClrFeature>
          break;
 8009468:	e004      	b.n	8009474 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800946a:	6839      	ldr	r1, [r7, #0]
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fd11 	bl	8009e94 <USBD_CtlError>
          break;
 8009472:	bf00      	nop
      }
      break;
 8009474:	e004      	b.n	8009480 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009476:	6839      	ldr	r1, [r7, #0]
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 fd0b 	bl	8009e94 <USBD_CtlError>
      break;
 800947e:	bf00      	nop
  }

  return ret;
 8009480:	7bfb      	ldrb	r3, [r7, #15]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop

0800948c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009496:	2300      	movs	r3, #0
 8009498:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094a2:	2b40      	cmp	r3, #64	; 0x40
 80094a4:	d005      	beq.n	80094b2 <USBD_StdItfReq+0x26>
 80094a6:	2b40      	cmp	r3, #64	; 0x40
 80094a8:	d82f      	bhi.n	800950a <USBD_StdItfReq+0x7e>
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <USBD_StdItfReq+0x26>
 80094ae:	2b20      	cmp	r3, #32
 80094b0:	d12b      	bne.n	800950a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	3b01      	subs	r3, #1
 80094bc:	2b02      	cmp	r3, #2
 80094be:	d81d      	bhi.n	80094fc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	889b      	ldrh	r3, [r3, #4]
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d813      	bhi.n	80094f2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	6839      	ldr	r1, [r7, #0]
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	4798      	blx	r3
 80094d8:	4603      	mov	r3, r0
 80094da:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	88db      	ldrh	r3, [r3, #6]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d110      	bne.n	8009506 <USBD_StdItfReq+0x7a>
 80094e4:	7bfb      	ldrb	r3, [r7, #15]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10d      	bne.n	8009506 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fd9d 	bl	800a02a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80094f0:	e009      	b.n	8009506 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fccd 	bl	8009e94 <USBD_CtlError>
          break;
 80094fa:	e004      	b.n	8009506 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80094fc:	6839      	ldr	r1, [r7, #0]
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 fcc8 	bl	8009e94 <USBD_CtlError>
          break;
 8009504:	e000      	b.n	8009508 <USBD_StdItfReq+0x7c>
          break;
 8009506:	bf00      	nop
      }
      break;
 8009508:	e004      	b.n	8009514 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800950a:	6839      	ldr	r1, [r7, #0]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fcc1 	bl	8009e94 <USBD_CtlError>
      break;
 8009512:	bf00      	nop
  }

  return ret;
 8009514:	7bfb      	ldrb	r3, [r7, #15]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	889b      	ldrh	r3, [r3, #4]
 8009530:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800953a:	2b40      	cmp	r3, #64	; 0x40
 800953c:	d007      	beq.n	800954e <USBD_StdEPReq+0x30>
 800953e:	2b40      	cmp	r3, #64	; 0x40
 8009540:	f200 8145 	bhi.w	80097ce <USBD_StdEPReq+0x2b0>
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00c      	beq.n	8009562 <USBD_StdEPReq+0x44>
 8009548:	2b20      	cmp	r3, #32
 800954a:	f040 8140 	bne.w	80097ce <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	4798      	blx	r3
 800955c:	4603      	mov	r3, r0
 800955e:	73fb      	strb	r3, [r7, #15]
      break;
 8009560:	e13a      	b.n	80097d8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	785b      	ldrb	r3, [r3, #1]
 8009566:	2b03      	cmp	r3, #3
 8009568:	d007      	beq.n	800957a <USBD_StdEPReq+0x5c>
 800956a:	2b03      	cmp	r3, #3
 800956c:	f300 8129 	bgt.w	80097c2 <USBD_StdEPReq+0x2a4>
 8009570:	2b00      	cmp	r3, #0
 8009572:	d07f      	beq.n	8009674 <USBD_StdEPReq+0x156>
 8009574:	2b01      	cmp	r3, #1
 8009576:	d03c      	beq.n	80095f2 <USBD_StdEPReq+0xd4>
 8009578:	e123      	b.n	80097c2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009580:	b2db      	uxtb	r3, r3
 8009582:	2b02      	cmp	r3, #2
 8009584:	d002      	beq.n	800958c <USBD_StdEPReq+0x6e>
 8009586:	2b03      	cmp	r3, #3
 8009588:	d016      	beq.n	80095b8 <USBD_StdEPReq+0x9a>
 800958a:	e02c      	b.n	80095e6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800958c:	7bbb      	ldrb	r3, [r7, #14]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00d      	beq.n	80095ae <USBD_StdEPReq+0x90>
 8009592:	7bbb      	ldrb	r3, [r7, #14]
 8009594:	2b80      	cmp	r3, #128	; 0x80
 8009596:	d00a      	beq.n	80095ae <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009598:	7bbb      	ldrb	r3, [r7, #14]
 800959a:	4619      	mov	r1, r3
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f001 f971 	bl	800a884 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80095a2:	2180      	movs	r1, #128	; 0x80
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f001 f96d 	bl	800a884 <USBD_LL_StallEP>
 80095aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80095ac:	e020      	b.n	80095f0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80095ae:	6839      	ldr	r1, [r7, #0]
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 fc6f 	bl	8009e94 <USBD_CtlError>
              break;
 80095b6:	e01b      	b.n	80095f0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	885b      	ldrh	r3, [r3, #2]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10e      	bne.n	80095de <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80095c0:	7bbb      	ldrb	r3, [r7, #14]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00b      	beq.n	80095de <USBD_StdEPReq+0xc0>
 80095c6:	7bbb      	ldrb	r3, [r7, #14]
 80095c8:	2b80      	cmp	r3, #128	; 0x80
 80095ca:	d008      	beq.n	80095de <USBD_StdEPReq+0xc0>
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	88db      	ldrh	r3, [r3, #6]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d104      	bne.n	80095de <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80095d4:	7bbb      	ldrb	r3, [r7, #14]
 80095d6:	4619      	mov	r1, r3
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f001 f953 	bl	800a884 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fd23 	bl	800a02a <USBD_CtlSendStatus>

              break;
 80095e4:	e004      	b.n	80095f0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80095e6:	6839      	ldr	r1, [r7, #0]
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 fc53 	bl	8009e94 <USBD_CtlError>
              break;
 80095ee:	bf00      	nop
          }
          break;
 80095f0:	e0ec      	b.n	80097cc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d002      	beq.n	8009604 <USBD_StdEPReq+0xe6>
 80095fe:	2b03      	cmp	r3, #3
 8009600:	d016      	beq.n	8009630 <USBD_StdEPReq+0x112>
 8009602:	e030      	b.n	8009666 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009604:	7bbb      	ldrb	r3, [r7, #14]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00d      	beq.n	8009626 <USBD_StdEPReq+0x108>
 800960a:	7bbb      	ldrb	r3, [r7, #14]
 800960c:	2b80      	cmp	r3, #128	; 0x80
 800960e:	d00a      	beq.n	8009626 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009610:	7bbb      	ldrb	r3, [r7, #14]
 8009612:	4619      	mov	r1, r3
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f001 f935 	bl	800a884 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800961a:	2180      	movs	r1, #128	; 0x80
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f001 f931 	bl	800a884 <USBD_LL_StallEP>
 8009622:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009624:	e025      	b.n	8009672 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009626:	6839      	ldr	r1, [r7, #0]
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 fc33 	bl	8009e94 <USBD_CtlError>
              break;
 800962e:	e020      	b.n	8009672 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	885b      	ldrh	r3, [r3, #2]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d11b      	bne.n	8009670 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009638:	7bbb      	ldrb	r3, [r7, #14]
 800963a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800963e:	2b00      	cmp	r3, #0
 8009640:	d004      	beq.n	800964c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009642:	7bbb      	ldrb	r3, [r7, #14]
 8009644:	4619      	mov	r1, r3
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f001 f952 	bl	800a8f0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fcec 	bl	800a02a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	6839      	ldr	r1, [r7, #0]
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	4798      	blx	r3
 8009660:	4603      	mov	r3, r0
 8009662:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009664:	e004      	b.n	8009670 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009666:	6839      	ldr	r1, [r7, #0]
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 fc13 	bl	8009e94 <USBD_CtlError>
              break;
 800966e:	e000      	b.n	8009672 <USBD_StdEPReq+0x154>
              break;
 8009670:	bf00      	nop
          }
          break;
 8009672:	e0ab      	b.n	80097cc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800967a:	b2db      	uxtb	r3, r3
 800967c:	2b02      	cmp	r3, #2
 800967e:	d002      	beq.n	8009686 <USBD_StdEPReq+0x168>
 8009680:	2b03      	cmp	r3, #3
 8009682:	d032      	beq.n	80096ea <USBD_StdEPReq+0x1cc>
 8009684:	e097      	b.n	80097b6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009686:	7bbb      	ldrb	r3, [r7, #14]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d007      	beq.n	800969c <USBD_StdEPReq+0x17e>
 800968c:	7bbb      	ldrb	r3, [r7, #14]
 800968e:	2b80      	cmp	r3, #128	; 0x80
 8009690:	d004      	beq.n	800969c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fbfd 	bl	8009e94 <USBD_CtlError>
                break;
 800969a:	e091      	b.n	80097c0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800969c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	da0b      	bge.n	80096bc <USBD_StdEPReq+0x19e>
 80096a4:	7bbb      	ldrb	r3, [r7, #14]
 80096a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096aa:	4613      	mov	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	3310      	adds	r3, #16
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	4413      	add	r3, r2
 80096b8:	3304      	adds	r3, #4
 80096ba:	e00b      	b.n	80096d4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
 80096be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096c2:	4613      	mov	r3, r2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	4413      	add	r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	4413      	add	r3, r2
 80096d2:	3304      	adds	r3, #4
 80096d4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	2200      	movs	r2, #0
 80096da:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	2202      	movs	r2, #2
 80096e0:	4619      	mov	r1, r3
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fc47 	bl	8009f76 <USBD_CtlSendData>
              break;
 80096e8:	e06a      	b.n	80097c0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80096ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	da11      	bge.n	8009716 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80096f2:	7bbb      	ldrb	r3, [r7, #14]
 80096f4:	f003 020f 	and.w	r2, r3, #15
 80096f8:	6879      	ldr	r1, [r7, #4]
 80096fa:	4613      	mov	r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	4413      	add	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	440b      	add	r3, r1
 8009704:	3324      	adds	r3, #36	; 0x24
 8009706:	881b      	ldrh	r3, [r3, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d117      	bne.n	800973c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fbc0 	bl	8009e94 <USBD_CtlError>
                  break;
 8009714:	e054      	b.n	80097c0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009716:	7bbb      	ldrb	r3, [r7, #14]
 8009718:	f003 020f 	and.w	r2, r3, #15
 800971c:	6879      	ldr	r1, [r7, #4]
 800971e:	4613      	mov	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	440b      	add	r3, r1
 8009728:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d104      	bne.n	800973c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009732:	6839      	ldr	r1, [r7, #0]
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fbad 	bl	8009e94 <USBD_CtlError>
                  break;
 800973a:	e041      	b.n	80097c0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800973c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009740:	2b00      	cmp	r3, #0
 8009742:	da0b      	bge.n	800975c <USBD_StdEPReq+0x23e>
 8009744:	7bbb      	ldrb	r3, [r7, #14]
 8009746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800974a:	4613      	mov	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4413      	add	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	3310      	adds	r3, #16
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	4413      	add	r3, r2
 8009758:	3304      	adds	r3, #4
 800975a:	e00b      	b.n	8009774 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800975c:	7bbb      	ldrb	r3, [r7, #14]
 800975e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009762:	4613      	mov	r3, r2
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	4413      	add	r3, r2
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	4413      	add	r3, r2
 8009772:	3304      	adds	r3, #4
 8009774:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009776:	7bbb      	ldrb	r3, [r7, #14]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d002      	beq.n	8009782 <USBD_StdEPReq+0x264>
 800977c:	7bbb      	ldrb	r3, [r7, #14]
 800977e:	2b80      	cmp	r3, #128	; 0x80
 8009780:	d103      	bne.n	800978a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	2200      	movs	r2, #0
 8009786:	601a      	str	r2, [r3, #0]
 8009788:	e00e      	b.n	80097a8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800978a:	7bbb      	ldrb	r3, [r7, #14]
 800978c:	4619      	mov	r1, r3
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f001 f8e4 	bl	800a95c <USBD_LL_IsStallEP>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d003      	beq.n	80097a2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	2201      	movs	r2, #1
 800979e:	601a      	str	r2, [r3, #0]
 80097a0:	e002      	b.n	80097a8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	2200      	movs	r2, #0
 80097a6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	2202      	movs	r2, #2
 80097ac:	4619      	mov	r1, r3
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fbe1 	bl	8009f76 <USBD_CtlSendData>
              break;
 80097b4:	e004      	b.n	80097c0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80097b6:	6839      	ldr	r1, [r7, #0]
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fb6b 	bl	8009e94 <USBD_CtlError>
              break;
 80097be:	bf00      	nop
          }
          break;
 80097c0:	e004      	b.n	80097cc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80097c2:	6839      	ldr	r1, [r7, #0]
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 fb65 	bl	8009e94 <USBD_CtlError>
          break;
 80097ca:	bf00      	nop
      }
      break;
 80097cc:	e004      	b.n	80097d8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80097ce:	6839      	ldr	r1, [r7, #0]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fb5f 	bl	8009e94 <USBD_CtlError>
      break;
 80097d6:	bf00      	nop
  }

  return ret;
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
	...

080097e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80097ee:	2300      	movs	r3, #0
 80097f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80097f2:	2300      	movs	r3, #0
 80097f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80097f6:	2300      	movs	r3, #0
 80097f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	885b      	ldrh	r3, [r3, #2]
 80097fe:	0a1b      	lsrs	r3, r3, #8
 8009800:	b29b      	uxth	r3, r3
 8009802:	3b01      	subs	r3, #1
 8009804:	2b0e      	cmp	r3, #14
 8009806:	f200 8152 	bhi.w	8009aae <USBD_GetDescriptor+0x2ca>
 800980a:	a201      	add	r2, pc, #4	; (adr r2, 8009810 <USBD_GetDescriptor+0x2c>)
 800980c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009810:	08009881 	.word	0x08009881
 8009814:	08009899 	.word	0x08009899
 8009818:	080098d9 	.word	0x080098d9
 800981c:	08009aaf 	.word	0x08009aaf
 8009820:	08009aaf 	.word	0x08009aaf
 8009824:	08009a4f 	.word	0x08009a4f
 8009828:	08009a7b 	.word	0x08009a7b
 800982c:	08009aaf 	.word	0x08009aaf
 8009830:	08009aaf 	.word	0x08009aaf
 8009834:	08009aaf 	.word	0x08009aaf
 8009838:	08009aaf 	.word	0x08009aaf
 800983c:	08009aaf 	.word	0x08009aaf
 8009840:	08009aaf 	.word	0x08009aaf
 8009844:	08009aaf 	.word	0x08009aaf
 8009848:	0800984d 	.word	0x0800984d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009852:	69db      	ldr	r3, [r3, #28]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00b      	beq.n	8009870 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800985e:	69db      	ldr	r3, [r3, #28]
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	7c12      	ldrb	r2, [r2, #16]
 8009864:	f107 0108 	add.w	r1, r7, #8
 8009868:	4610      	mov	r0, r2
 800986a:	4798      	blx	r3
 800986c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800986e:	e126      	b.n	8009abe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009870:	6839      	ldr	r1, [r7, #0]
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fb0e 	bl	8009e94 <USBD_CtlError>
        err++;
 8009878:	7afb      	ldrb	r3, [r7, #11]
 800987a:	3301      	adds	r3, #1
 800987c:	72fb      	strb	r3, [r7, #11]
      break;
 800987e:	e11e      	b.n	8009abe <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	7c12      	ldrb	r2, [r2, #16]
 800988c:	f107 0108 	add.w	r1, r7, #8
 8009890:	4610      	mov	r0, r2
 8009892:	4798      	blx	r3
 8009894:	60f8      	str	r0, [r7, #12]
      break;
 8009896:	e112      	b.n	8009abe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	7c1b      	ldrb	r3, [r3, #16]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10d      	bne.n	80098bc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a8:	f107 0208 	add.w	r2, r7, #8
 80098ac:	4610      	mov	r0, r2
 80098ae:	4798      	blx	r3
 80098b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	3301      	adds	r3, #1
 80098b6:	2202      	movs	r2, #2
 80098b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80098ba:	e100      	b.n	8009abe <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c4:	f107 0208 	add.w	r2, r7, #8
 80098c8:	4610      	mov	r0, r2
 80098ca:	4798      	blx	r3
 80098cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3301      	adds	r3, #1
 80098d2:	2202      	movs	r2, #2
 80098d4:	701a      	strb	r2, [r3, #0]
      break;
 80098d6:	e0f2      	b.n	8009abe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	885b      	ldrh	r3, [r3, #2]
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	2b05      	cmp	r3, #5
 80098e0:	f200 80ac 	bhi.w	8009a3c <USBD_GetDescriptor+0x258>
 80098e4:	a201      	add	r2, pc, #4	; (adr r2, 80098ec <USBD_GetDescriptor+0x108>)
 80098e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ea:	bf00      	nop
 80098ec:	08009905 	.word	0x08009905
 80098f0:	08009939 	.word	0x08009939
 80098f4:	0800996d 	.word	0x0800996d
 80098f8:	080099a1 	.word	0x080099a1
 80098fc:	080099d5 	.word	0x080099d5
 8009900:	08009a09 	.word	0x08009a09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00b      	beq.n	8009928 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	7c12      	ldrb	r2, [r2, #16]
 800991c:	f107 0108 	add.w	r1, r7, #8
 8009920:	4610      	mov	r0, r2
 8009922:	4798      	blx	r3
 8009924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009926:	e091      	b.n	8009a4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fab2 	bl	8009e94 <USBD_CtlError>
            err++;
 8009930:	7afb      	ldrb	r3, [r7, #11]
 8009932:	3301      	adds	r3, #1
 8009934:	72fb      	strb	r3, [r7, #11]
          break;
 8009936:	e089      	b.n	8009a4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00b      	beq.n	800995c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	7c12      	ldrb	r2, [r2, #16]
 8009950:	f107 0108 	add.w	r1, r7, #8
 8009954:	4610      	mov	r0, r2
 8009956:	4798      	blx	r3
 8009958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800995a:	e077      	b.n	8009a4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800995c:	6839      	ldr	r1, [r7, #0]
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 fa98 	bl	8009e94 <USBD_CtlError>
            err++;
 8009964:	7afb      	ldrb	r3, [r7, #11]
 8009966:	3301      	adds	r3, #1
 8009968:	72fb      	strb	r3, [r7, #11]
          break;
 800996a:	e06f      	b.n	8009a4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00b      	beq.n	8009990 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	7c12      	ldrb	r2, [r2, #16]
 8009984:	f107 0108 	add.w	r1, r7, #8
 8009988:	4610      	mov	r0, r2
 800998a:	4798      	blx	r3
 800998c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800998e:	e05d      	b.n	8009a4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fa7e 	bl	8009e94 <USBD_CtlError>
            err++;
 8009998:	7afb      	ldrb	r3, [r7, #11]
 800999a:	3301      	adds	r3, #1
 800999c:	72fb      	strb	r3, [r7, #11]
          break;
 800999e:	e055      	b.n	8009a4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00b      	beq.n	80099c4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	7c12      	ldrb	r2, [r2, #16]
 80099b8:	f107 0108 	add.w	r1, r7, #8
 80099bc:	4610      	mov	r0, r2
 80099be:	4798      	blx	r3
 80099c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099c2:	e043      	b.n	8009a4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80099c4:	6839      	ldr	r1, [r7, #0]
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fa64 	bl	8009e94 <USBD_CtlError>
            err++;
 80099cc:	7afb      	ldrb	r3, [r7, #11]
 80099ce:	3301      	adds	r3, #1
 80099d0:	72fb      	strb	r3, [r7, #11]
          break;
 80099d2:	e03b      	b.n	8009a4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099da:	695b      	ldr	r3, [r3, #20]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00b      	beq.n	80099f8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099e6:	695b      	ldr	r3, [r3, #20]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	7c12      	ldrb	r2, [r2, #16]
 80099ec:	f107 0108 	add.w	r1, r7, #8
 80099f0:	4610      	mov	r0, r2
 80099f2:	4798      	blx	r3
 80099f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099f6:	e029      	b.n	8009a4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80099f8:	6839      	ldr	r1, [r7, #0]
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fa4a 	bl	8009e94 <USBD_CtlError>
            err++;
 8009a00:	7afb      	ldrb	r3, [r7, #11]
 8009a02:	3301      	adds	r3, #1
 8009a04:	72fb      	strb	r3, [r7, #11]
          break;
 8009a06:	e021      	b.n	8009a4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d00b      	beq.n	8009a2c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	7c12      	ldrb	r2, [r2, #16]
 8009a20:	f107 0108 	add.w	r1, r7, #8
 8009a24:	4610      	mov	r0, r2
 8009a26:	4798      	blx	r3
 8009a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a2a:	e00f      	b.n	8009a4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a2c:	6839      	ldr	r1, [r7, #0]
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 fa30 	bl	8009e94 <USBD_CtlError>
            err++;
 8009a34:	7afb      	ldrb	r3, [r7, #11]
 8009a36:	3301      	adds	r3, #1
 8009a38:	72fb      	strb	r3, [r7, #11]
          break;
 8009a3a:	e007      	b.n	8009a4c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009a3c:	6839      	ldr	r1, [r7, #0]
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fa28 	bl	8009e94 <USBD_CtlError>
          err++;
 8009a44:	7afb      	ldrb	r3, [r7, #11]
 8009a46:	3301      	adds	r3, #1
 8009a48:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009a4a:	bf00      	nop
      }
      break;
 8009a4c:	e037      	b.n	8009abe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	7c1b      	ldrb	r3, [r3, #16]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d109      	bne.n	8009a6a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a5e:	f107 0208 	add.w	r2, r7, #8
 8009a62:	4610      	mov	r0, r2
 8009a64:	4798      	blx	r3
 8009a66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a68:	e029      	b.n	8009abe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009a6a:	6839      	ldr	r1, [r7, #0]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fa11 	bl	8009e94 <USBD_CtlError>
        err++;
 8009a72:	7afb      	ldrb	r3, [r7, #11]
 8009a74:	3301      	adds	r3, #1
 8009a76:	72fb      	strb	r3, [r7, #11]
      break;
 8009a78:	e021      	b.n	8009abe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	7c1b      	ldrb	r3, [r3, #16]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10d      	bne.n	8009a9e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a8a:	f107 0208 	add.w	r2, r7, #8
 8009a8e:	4610      	mov	r0, r2
 8009a90:	4798      	blx	r3
 8009a92:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	3301      	adds	r3, #1
 8009a98:	2207      	movs	r2, #7
 8009a9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a9c:	e00f      	b.n	8009abe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009a9e:	6839      	ldr	r1, [r7, #0]
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 f9f7 	bl	8009e94 <USBD_CtlError>
        err++;
 8009aa6:	7afb      	ldrb	r3, [r7, #11]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	72fb      	strb	r3, [r7, #11]
      break;
 8009aac:	e007      	b.n	8009abe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 f9ef 	bl	8009e94 <USBD_CtlError>
      err++;
 8009ab6:	7afb      	ldrb	r3, [r7, #11]
 8009ab8:	3301      	adds	r3, #1
 8009aba:	72fb      	strb	r3, [r7, #11]
      break;
 8009abc:	bf00      	nop
  }

  if (err != 0U)
 8009abe:	7afb      	ldrb	r3, [r7, #11]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d11e      	bne.n	8009b02 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	88db      	ldrh	r3, [r3, #6]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d016      	beq.n	8009afa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009acc:	893b      	ldrh	r3, [r7, #8]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00e      	beq.n	8009af0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	88da      	ldrh	r2, [r3, #6]
 8009ad6:	893b      	ldrh	r3, [r7, #8]
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	bf28      	it	cs
 8009adc:	4613      	movcs	r3, r2
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009ae2:	893b      	ldrh	r3, [r7, #8]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	68f9      	ldr	r1, [r7, #12]
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fa44 	bl	8009f76 <USBD_CtlSendData>
 8009aee:	e009      	b.n	8009b04 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 f9ce 	bl	8009e94 <USBD_CtlError>
 8009af8:	e004      	b.n	8009b04 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 fa95 	bl	800a02a <USBD_CtlSendStatus>
 8009b00:	e000      	b.n	8009b04 <USBD_GetDescriptor+0x320>
    return;
 8009b02:	bf00      	nop
  }
}
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop

08009b0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	889b      	ldrh	r3, [r3, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d131      	bne.n	8009b82 <USBD_SetAddress+0x76>
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	88db      	ldrh	r3, [r3, #6]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d12d      	bne.n	8009b82 <USBD_SetAddress+0x76>
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	885b      	ldrh	r3, [r3, #2]
 8009b2a:	2b7f      	cmp	r3, #127	; 0x7f
 8009b2c:	d829      	bhi.n	8009b82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	885b      	ldrh	r3, [r3, #2]
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	d104      	bne.n	8009b50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009b46:	6839      	ldr	r1, [r7, #0]
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 f9a3 	bl	8009e94 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b4e:	e01d      	b.n	8009b8c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	7bfa      	ldrb	r2, [r7, #15]
 8009b54:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 ff2b 	bl	800a9b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fa61 	bl	800a02a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009b68:	7bfb      	ldrb	r3, [r7, #15]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d004      	beq.n	8009b78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2202      	movs	r2, #2
 8009b72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b76:	e009      	b.n	8009b8c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b80:	e004      	b.n	8009b8c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f985 	bl	8009e94 <USBD_CtlError>
  }
}
 8009b8a:	bf00      	nop
 8009b8c:	bf00      	nop
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	885b      	ldrh	r3, [r3, #2]
 8009ba6:	b2da      	uxtb	r2, r3
 8009ba8:	4b4c      	ldr	r3, [pc, #304]	; (8009cdc <USBD_SetConfig+0x148>)
 8009baa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009bac:	4b4b      	ldr	r3, [pc, #300]	; (8009cdc <USBD_SetConfig+0x148>)
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d905      	bls.n	8009bc0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009bb4:	6839      	ldr	r1, [r7, #0]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f96c 	bl	8009e94 <USBD_CtlError>
    return USBD_FAIL;
 8009bbc:	2303      	movs	r3, #3
 8009bbe:	e088      	b.n	8009cd2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d002      	beq.n	8009bd2 <USBD_SetConfig+0x3e>
 8009bcc:	2b03      	cmp	r3, #3
 8009bce:	d025      	beq.n	8009c1c <USBD_SetConfig+0x88>
 8009bd0:	e071      	b.n	8009cb6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009bd2:	4b42      	ldr	r3, [pc, #264]	; (8009cdc <USBD_SetConfig+0x148>)
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d01c      	beq.n	8009c14 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009bda:	4b40      	ldr	r3, [pc, #256]	; (8009cdc <USBD_SetConfig+0x148>)
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	461a      	mov	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009be4:	4b3d      	ldr	r3, [pc, #244]	; (8009cdc <USBD_SetConfig+0x148>)
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	4619      	mov	r1, r3
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f7ff f992 	bl	8008f14 <USBD_SetClassConfig>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009bf4:	7bfb      	ldrb	r3, [r7, #15]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d004      	beq.n	8009c04 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009bfa:	6839      	ldr	r1, [r7, #0]
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 f949 	bl	8009e94 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c02:	e065      	b.n	8009cd0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 fa10 	bl	800a02a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2203      	movs	r2, #3
 8009c0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009c12:	e05d      	b.n	8009cd0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fa08 	bl	800a02a <USBD_CtlSendStatus>
      break;
 8009c1a:	e059      	b.n	8009cd0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009c1c:	4b2f      	ldr	r3, [pc, #188]	; (8009cdc <USBD_SetConfig+0x148>)
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d112      	bne.n	8009c4a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2202      	movs	r2, #2
 8009c28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009c2c:	4b2b      	ldr	r3, [pc, #172]	; (8009cdc <USBD_SetConfig+0x148>)
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	461a      	mov	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c36:	4b29      	ldr	r3, [pc, #164]	; (8009cdc <USBD_SetConfig+0x148>)
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f7ff f985 	bl	8008f4c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 f9f1 	bl	800a02a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c48:	e042      	b.n	8009cd0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009c4a:	4b24      	ldr	r3, [pc, #144]	; (8009cdc <USBD_SetConfig+0x148>)
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	461a      	mov	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d02a      	beq.n	8009cae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	4619      	mov	r1, r3
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f7ff f973 	bl	8008f4c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009c66:	4b1d      	ldr	r3, [pc, #116]	; (8009cdc <USBD_SetConfig+0x148>)
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c70:	4b1a      	ldr	r3, [pc, #104]	; (8009cdc <USBD_SetConfig+0x148>)
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	4619      	mov	r1, r3
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f7ff f94c 	bl	8008f14 <USBD_SetClassConfig>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009c80:	7bfb      	ldrb	r3, [r7, #15]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00f      	beq.n	8009ca6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009c86:	6839      	ldr	r1, [r7, #0]
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 f903 	bl	8009e94 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	4619      	mov	r1, r3
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7ff f958 	bl	8008f4c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2202      	movs	r2, #2
 8009ca0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009ca4:	e014      	b.n	8009cd0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 f9bf 	bl	800a02a <USBD_CtlSendStatus>
      break;
 8009cac:	e010      	b.n	8009cd0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f9bb 	bl	800a02a <USBD_CtlSendStatus>
      break;
 8009cb4:	e00c      	b.n	8009cd0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009cb6:	6839      	ldr	r1, [r7, #0]
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 f8eb 	bl	8009e94 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009cbe:	4b07      	ldr	r3, [pc, #28]	; (8009cdc <USBD_SetConfig+0x148>)
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f7ff f941 	bl	8008f4c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	73fb      	strb	r3, [r7, #15]
      break;
 8009cce:	bf00      	nop
  }

  return ret;
 8009cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	200003f0 	.word	0x200003f0

08009ce0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	88db      	ldrh	r3, [r3, #6]
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d004      	beq.n	8009cfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f8cd 	bl	8009e94 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009cfa:	e023      	b.n	8009d44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	2b02      	cmp	r3, #2
 8009d06:	dc02      	bgt.n	8009d0e <USBD_GetConfig+0x2e>
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	dc03      	bgt.n	8009d14 <USBD_GetConfig+0x34>
 8009d0c:	e015      	b.n	8009d3a <USBD_GetConfig+0x5a>
 8009d0e:	2b03      	cmp	r3, #3
 8009d10:	d00b      	beq.n	8009d2a <USBD_GetConfig+0x4a>
 8009d12:	e012      	b.n	8009d3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	3308      	adds	r3, #8
 8009d1e:	2201      	movs	r2, #1
 8009d20:	4619      	mov	r1, r3
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f927 	bl	8009f76 <USBD_CtlSendData>
        break;
 8009d28:	e00c      	b.n	8009d44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	3304      	adds	r3, #4
 8009d2e:	2201      	movs	r2, #1
 8009d30:	4619      	mov	r1, r3
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f91f 	bl	8009f76 <USBD_CtlSendData>
        break;
 8009d38:	e004      	b.n	8009d44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009d3a:	6839      	ldr	r1, [r7, #0]
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 f8a9 	bl	8009e94 <USBD_CtlError>
        break;
 8009d42:	bf00      	nop
}
 8009d44:	bf00      	nop
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	2b02      	cmp	r3, #2
 8009d62:	d81e      	bhi.n	8009da2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	88db      	ldrh	r3, [r3, #6]
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	d004      	beq.n	8009d76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009d6c:	6839      	ldr	r1, [r7, #0]
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f890 	bl	8009e94 <USBD_CtlError>
        break;
 8009d74:	e01a      	b.n	8009dac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d005      	beq.n	8009d92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	f043 0202 	orr.w	r2, r3, #2
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	330c      	adds	r3, #12
 8009d96:	2202      	movs	r2, #2
 8009d98:	4619      	mov	r1, r3
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 f8eb 	bl	8009f76 <USBD_CtlSendData>
      break;
 8009da0:	e004      	b.n	8009dac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009da2:	6839      	ldr	r1, [r7, #0]
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f875 	bl	8009e94 <USBD_CtlError>
      break;
 8009daa:	bf00      	nop
  }
}
 8009dac:	bf00      	nop
 8009dae:	3708      	adds	r7, #8
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	885b      	ldrh	r3, [r3, #2]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d106      	bne.n	8009dd4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f92b 	bl	800a02a <USBD_CtlSendStatus>
  }
}
 8009dd4:	bf00      	nop
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	3b01      	subs	r3, #1
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	d80b      	bhi.n	8009e0c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	885b      	ldrh	r3, [r3, #2]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d10c      	bne.n	8009e16 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 f910 	bl	800a02a <USBD_CtlSendStatus>
      }
      break;
 8009e0a:	e004      	b.n	8009e16 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009e0c:	6839      	ldr	r1, [r7, #0]
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f840 	bl	8009e94 <USBD_CtlError>
      break;
 8009e14:	e000      	b.n	8009e18 <USBD_ClrFeature+0x3c>
      break;
 8009e16:	bf00      	nop
  }
}
 8009e18:	bf00      	nop
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	781a      	ldrb	r2, [r3, #0]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	781a      	ldrb	r2, [r3, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	3301      	adds	r3, #1
 8009e48:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f7ff fa92 	bl	8009374 <SWAPBYTE>
 8009e50:	4603      	mov	r3, r0
 8009e52:	461a      	mov	r2, r3
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	3301      	adds	r3, #1
 8009e62:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f7ff fa85 	bl	8009374 <SWAPBYTE>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	3301      	adds	r3, #1
 8009e76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009e7e:	68f8      	ldr	r0, [r7, #12]
 8009e80:	f7ff fa78 	bl	8009374 <SWAPBYTE>
 8009e84:	4603      	mov	r3, r0
 8009e86:	461a      	mov	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	80da      	strh	r2, [r3, #6]
}
 8009e8c:	bf00      	nop
 8009e8e:	3710      	adds	r7, #16
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e9e:	2180      	movs	r1, #128	; 0x80
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 fcef 	bl	800a884 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 fceb 	bl	800a884 <USBD_LL_StallEP>
}
 8009eae:	bf00      	nop
 8009eb0:	3708      	adds	r7, #8
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b086      	sub	sp, #24
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	60f8      	str	r0, [r7, #12]
 8009ebe:	60b9      	str	r1, [r7, #8]
 8009ec0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d036      	beq.n	8009f3a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009ed0:	6938      	ldr	r0, [r7, #16]
 8009ed2:	f000 f836 	bl	8009f42 <USBD_GetLen>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	3301      	adds	r3, #1
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	005b      	lsls	r3, r3, #1
 8009ede:	b29a      	uxth	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009ee4:	7dfb      	ldrb	r3, [r7, #23]
 8009ee6:	68ba      	ldr	r2, [r7, #8]
 8009ee8:	4413      	add	r3, r2
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	7812      	ldrb	r2, [r2, #0]
 8009eee:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ef0:	7dfb      	ldrb	r3, [r7, #23]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009ef6:	7dfb      	ldrb	r3, [r7, #23]
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	4413      	add	r3, r2
 8009efc:	2203      	movs	r2, #3
 8009efe:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f00:	7dfb      	ldrb	r3, [r7, #23]
 8009f02:	3301      	adds	r3, #1
 8009f04:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009f06:	e013      	b.n	8009f30 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009f08:	7dfb      	ldrb	r3, [r7, #23]
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	7812      	ldrb	r2, [r2, #0]
 8009f12:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	3301      	adds	r3, #1
 8009f18:	613b      	str	r3, [r7, #16]
    idx++;
 8009f1a:	7dfb      	ldrb	r3, [r7, #23]
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009f20:	7dfb      	ldrb	r3, [r7, #23]
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	4413      	add	r3, r2
 8009f26:	2200      	movs	r2, #0
 8009f28:	701a      	strb	r2, [r3, #0]
    idx++;
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1e7      	bne.n	8009f08 <USBD_GetString+0x52>
 8009f38:	e000      	b.n	8009f3c <USBD_GetString+0x86>
    return;
 8009f3a:	bf00      	nop
  }
}
 8009f3c:	3718      	adds	r7, #24
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009f42:	b480      	push	{r7}
 8009f44:	b085      	sub	sp, #20
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009f52:	e005      	b.n	8009f60 <USBD_GetLen+0x1e>
  {
    len++;
 8009f54:	7bfb      	ldrb	r3, [r7, #15]
 8009f56:	3301      	adds	r3, #1
 8009f58:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d1f5      	bne.n	8009f54 <USBD_GetLen+0x12>
  }

  return len;
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3714      	adds	r7, #20
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr

08009f76 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b084      	sub	sp, #16
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	60f8      	str	r0, [r7, #12]
 8009f7e:	60b9      	str	r1, [r7, #8]
 8009f80:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2202      	movs	r2, #2
 8009f86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	68f8      	ldr	r0, [r7, #12]
 8009f9e:	f000 fd41 	bl	800aa24 <USBD_LL_Transmit>

  return USBD_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f000 fd30 	bl	800aa24 <USBD_LL_Transmit>

  return USBD_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b084      	sub	sp, #16
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	60f8      	str	r0, [r7, #12]
 8009fd6:	60b9      	str	r1, [r7, #8]
 8009fd8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2203      	movs	r2, #3
 8009fde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	f000 fd4b 	bl	800aa94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3710      	adds	r7, #16
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	2100      	movs	r1, #0
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	f000 fd3a 	bl	800aa94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b082      	sub	sp, #8
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2204      	movs	r2, #4
 800a036:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a03a:	2300      	movs	r3, #0
 800a03c:	2200      	movs	r2, #0
 800a03e:	2100      	movs	r1, #0
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 fcef 	bl	800aa24 <USBD_LL_Transmit>

  return USBD_OK;
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3708      	adds	r7, #8
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2205      	movs	r2, #5
 800a05c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a060:	2300      	movs	r3, #0
 800a062:	2200      	movs	r2, #0
 800a064:	2100      	movs	r1, #0
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 fd14 	bl	800aa94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
	...

0800a078 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a07c:	2200      	movs	r2, #0
 800a07e:	4912      	ldr	r1, [pc, #72]	; (800a0c8 <MX_USB_DEVICE_Init+0x50>)
 800a080:	4812      	ldr	r0, [pc, #72]	; (800a0cc <MX_USB_DEVICE_Init+0x54>)
 800a082:	f7fe fed9 	bl	8008e38 <USBD_Init>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d001      	beq.n	800a090 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a08c:	f7f6 fabe 	bl	800060c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a090:	490f      	ldr	r1, [pc, #60]	; (800a0d0 <MX_USB_DEVICE_Init+0x58>)
 800a092:	480e      	ldr	r0, [pc, #56]	; (800a0cc <MX_USB_DEVICE_Init+0x54>)
 800a094:	f7fe ff00 	bl	8008e98 <USBD_RegisterClass>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d001      	beq.n	800a0a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a09e:	f7f6 fab5 	bl	800060c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a0a2:	490c      	ldr	r1, [pc, #48]	; (800a0d4 <MX_USB_DEVICE_Init+0x5c>)
 800a0a4:	4809      	ldr	r0, [pc, #36]	; (800a0cc <MX_USB_DEVICE_Init+0x54>)
 800a0a6:	f7fe fe51 	bl	8008d4c <USBD_CDC_RegisterInterface>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d001      	beq.n	800a0b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a0b0:	f7f6 faac 	bl	800060c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a0b4:	4805      	ldr	r0, [pc, #20]	; (800a0cc <MX_USB_DEVICE_Init+0x54>)
 800a0b6:	f7fe ff16 	bl	8008ee6 <USBD_Start>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d001      	beq.n	800a0c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a0c0:	f7f6 faa4 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a0c4:	bf00      	nop
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	20000130 	.word	0x20000130
 800a0cc:	200003f4 	.word	0x200003f4
 800a0d0:	20000018 	.word	0x20000018
 800a0d4:	2000011c 	.word	0x2000011c

0800a0d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a0dc:	2200      	movs	r2, #0
 800a0de:	4905      	ldr	r1, [pc, #20]	; (800a0f4 <CDC_Init_FS+0x1c>)
 800a0e0:	4805      	ldr	r0, [pc, #20]	; (800a0f8 <CDC_Init_FS+0x20>)
 800a0e2:	f7fe fe48 	bl	8008d76 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a0e6:	4905      	ldr	r1, [pc, #20]	; (800a0fc <CDC_Init_FS+0x24>)
 800a0e8:	4803      	ldr	r0, [pc, #12]	; (800a0f8 <CDC_Init_FS+0x20>)
 800a0ea:	f7fe fe62 	bl	8008db2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a0ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	20000aac 	.word	0x20000aac
 800a0f8:	200003f4 	.word	0x200003f4
 800a0fc:	200006c4 	.word	0x200006c4

0800a100 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a100:	b480      	push	{r7}
 800a102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a104:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a106:	4618      	mov	r0, r3
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	4603      	mov	r3, r0
 800a118:	6039      	str	r1, [r7, #0]
 800a11a:	71fb      	strb	r3, [r7, #7]
 800a11c:	4613      	mov	r3, r2
 800a11e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a120:	79fb      	ldrb	r3, [r7, #7]
 800a122:	2b23      	cmp	r3, #35	; 0x23
 800a124:	d84a      	bhi.n	800a1bc <CDC_Control_FS+0xac>
 800a126:	a201      	add	r2, pc, #4	; (adr r2, 800a12c <CDC_Control_FS+0x1c>)
 800a128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12c:	0800a1bd 	.word	0x0800a1bd
 800a130:	0800a1bd 	.word	0x0800a1bd
 800a134:	0800a1bd 	.word	0x0800a1bd
 800a138:	0800a1bd 	.word	0x0800a1bd
 800a13c:	0800a1bd 	.word	0x0800a1bd
 800a140:	0800a1bd 	.word	0x0800a1bd
 800a144:	0800a1bd 	.word	0x0800a1bd
 800a148:	0800a1bd 	.word	0x0800a1bd
 800a14c:	0800a1bd 	.word	0x0800a1bd
 800a150:	0800a1bd 	.word	0x0800a1bd
 800a154:	0800a1bd 	.word	0x0800a1bd
 800a158:	0800a1bd 	.word	0x0800a1bd
 800a15c:	0800a1bd 	.word	0x0800a1bd
 800a160:	0800a1bd 	.word	0x0800a1bd
 800a164:	0800a1bd 	.word	0x0800a1bd
 800a168:	0800a1bd 	.word	0x0800a1bd
 800a16c:	0800a1bd 	.word	0x0800a1bd
 800a170:	0800a1bd 	.word	0x0800a1bd
 800a174:	0800a1bd 	.word	0x0800a1bd
 800a178:	0800a1bd 	.word	0x0800a1bd
 800a17c:	0800a1bd 	.word	0x0800a1bd
 800a180:	0800a1bd 	.word	0x0800a1bd
 800a184:	0800a1bd 	.word	0x0800a1bd
 800a188:	0800a1bd 	.word	0x0800a1bd
 800a18c:	0800a1bd 	.word	0x0800a1bd
 800a190:	0800a1bd 	.word	0x0800a1bd
 800a194:	0800a1bd 	.word	0x0800a1bd
 800a198:	0800a1bd 	.word	0x0800a1bd
 800a19c:	0800a1bd 	.word	0x0800a1bd
 800a1a0:	0800a1bd 	.word	0x0800a1bd
 800a1a4:	0800a1bd 	.word	0x0800a1bd
 800a1a8:	0800a1bd 	.word	0x0800a1bd
 800a1ac:	0800a1bd 	.word	0x0800a1bd
 800a1b0:	0800a1bd 	.word	0x0800a1bd
 800a1b4:	0800a1bd 	.word	0x0800a1bd
 800a1b8:	0800a1bd 	.word	0x0800a1bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a1bc:	bf00      	nop
  }

  return (USBD_OK);
 800a1be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a1d6:	6879      	ldr	r1, [r7, #4]
 800a1d8:	4805      	ldr	r0, [pc, #20]	; (800a1f0 <CDC_Receive_FS+0x24>)
 800a1da:	f7fe fdea 	bl	8008db2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a1de:	4804      	ldr	r0, [pc, #16]	; (800a1f0 <CDC_Receive_FS+0x24>)
 800a1e0:	f7fe fe00 	bl	8008de4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a1e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3708      	adds	r7, #8
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	200003f4 	.word	0x200003f4

0800a1f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b087      	sub	sp, #28
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	4613      	mov	r3, r2
 800a200:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a202:	2300      	movs	r3, #0
 800a204:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a206:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	371c      	adds	r7, #28
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr
	...

0800a218 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	4603      	mov	r3, r0
 800a220:	6039      	str	r1, [r7, #0]
 800a222:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	2212      	movs	r2, #18
 800a228:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a22a:	4b03      	ldr	r3, [pc, #12]	; (800a238 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr
 800a238:	20000150 	.word	0x20000150

0800a23c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	4603      	mov	r3, r0
 800a244:	6039      	str	r1, [r7, #0]
 800a246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	2204      	movs	r2, #4
 800a24c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a24e:	4b03      	ldr	r3, [pc, #12]	; (800a25c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a250:	4618      	mov	r0, r3
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	20000170 	.word	0x20000170

0800a260 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	4603      	mov	r3, r0
 800a268:	6039      	str	r1, [r7, #0]
 800a26a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a26c:	79fb      	ldrb	r3, [r7, #7]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d105      	bne.n	800a27e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a272:	683a      	ldr	r2, [r7, #0]
 800a274:	4907      	ldr	r1, [pc, #28]	; (800a294 <USBD_FS_ProductStrDescriptor+0x34>)
 800a276:	4808      	ldr	r0, [pc, #32]	; (800a298 <USBD_FS_ProductStrDescriptor+0x38>)
 800a278:	f7ff fe1d 	bl	8009eb6 <USBD_GetString>
 800a27c:	e004      	b.n	800a288 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	4904      	ldr	r1, [pc, #16]	; (800a294 <USBD_FS_ProductStrDescriptor+0x34>)
 800a282:	4805      	ldr	r0, [pc, #20]	; (800a298 <USBD_FS_ProductStrDescriptor+0x38>)
 800a284:	f7ff fe17 	bl	8009eb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a288:	4b02      	ldr	r3, [pc, #8]	; (800a294 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3708      	adds	r7, #8
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	20000e94 	.word	0x20000e94
 800a298:	0800ac44 	.word	0x0800ac44

0800a29c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	6039      	str	r1, [r7, #0]
 800a2a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a2a8:	683a      	ldr	r2, [r7, #0]
 800a2aa:	4904      	ldr	r1, [pc, #16]	; (800a2bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a2ac:	4804      	ldr	r0, [pc, #16]	; (800a2c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a2ae:	f7ff fe02 	bl	8009eb6 <USBD_GetString>
  return USBD_StrDesc;
 800a2b2:	4b02      	ldr	r3, [pc, #8]	; (800a2bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3708      	adds	r7, #8
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	20000e94 	.word	0x20000e94
 800a2c0:	0800ac5c 	.word	0x0800ac5c

0800a2c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	6039      	str	r1, [r7, #0]
 800a2ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	221a      	movs	r2, #26
 800a2d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a2d6:	f000 f855 	bl	800a384 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a2da:	4b02      	ldr	r3, [pc, #8]	; (800a2e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3708      	adds	r7, #8
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	20000174 	.word	0x20000174

0800a2e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	6039      	str	r1, [r7, #0]
 800a2f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a2f4:	79fb      	ldrb	r3, [r7, #7]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d105      	bne.n	800a306 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2fa:	683a      	ldr	r2, [r7, #0]
 800a2fc:	4907      	ldr	r1, [pc, #28]	; (800a31c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2fe:	4808      	ldr	r0, [pc, #32]	; (800a320 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a300:	f7ff fdd9 	bl	8009eb6 <USBD_GetString>
 800a304:	e004      	b.n	800a310 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	4904      	ldr	r1, [pc, #16]	; (800a31c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a30a:	4805      	ldr	r0, [pc, #20]	; (800a320 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a30c:	f7ff fdd3 	bl	8009eb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a310:	4b02      	ldr	r3, [pc, #8]	; (800a31c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a312:	4618      	mov	r0, r3
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	20000e94 	.word	0x20000e94
 800a320:	0800ac70 	.word	0x0800ac70

0800a324 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	4603      	mov	r3, r0
 800a32c:	6039      	str	r1, [r7, #0]
 800a32e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a330:	79fb      	ldrb	r3, [r7, #7]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d105      	bne.n	800a342 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a336:	683a      	ldr	r2, [r7, #0]
 800a338:	4907      	ldr	r1, [pc, #28]	; (800a358 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a33a:	4808      	ldr	r0, [pc, #32]	; (800a35c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a33c:	f7ff fdbb 	bl	8009eb6 <USBD_GetString>
 800a340:	e004      	b.n	800a34c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	4904      	ldr	r1, [pc, #16]	; (800a358 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a346:	4805      	ldr	r0, [pc, #20]	; (800a35c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a348:	f7ff fdb5 	bl	8009eb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a34c:	4b02      	ldr	r3, [pc, #8]	; (800a358 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	20000e94 	.word	0x20000e94
 800a35c:	0800ac7c 	.word	0x0800ac7c

0800a360 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	4603      	mov	r3, r0
 800a368:	6039      	str	r1, [r7, #0]
 800a36a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	220c      	movs	r2, #12
 800a370:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a372:	4b03      	ldr	r3, [pc, #12]	; (800a380 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a374:	4618      	mov	r0, r3
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr
 800a380:	20000164 	.word	0x20000164

0800a384 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a38a:	4b0f      	ldr	r3, [pc, #60]	; (800a3c8 <Get_SerialNum+0x44>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a390:	4b0e      	ldr	r3, [pc, #56]	; (800a3cc <Get_SerialNum+0x48>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a396:	4b0e      	ldr	r3, [pc, #56]	; (800a3d0 <Get_SerialNum+0x4c>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d009      	beq.n	800a3be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a3aa:	2208      	movs	r2, #8
 800a3ac:	4909      	ldr	r1, [pc, #36]	; (800a3d4 <Get_SerialNum+0x50>)
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	f000 f814 	bl	800a3dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a3b4:	2204      	movs	r2, #4
 800a3b6:	4908      	ldr	r1, [pc, #32]	; (800a3d8 <Get_SerialNum+0x54>)
 800a3b8:	68b8      	ldr	r0, [r7, #8]
 800a3ba:	f000 f80f 	bl	800a3dc <IntToUnicode>
  }
}
 800a3be:	bf00      	nop
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	1fff7590 	.word	0x1fff7590
 800a3cc:	1fff7594 	.word	0x1fff7594
 800a3d0:	1fff7598 	.word	0x1fff7598
 800a3d4:	20000176 	.word	0x20000176
 800a3d8:	20000186 	.word	0x20000186

0800a3dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b087      	sub	sp, #28
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	75fb      	strb	r3, [r7, #23]
 800a3f2:	e027      	b.n	800a444 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	0f1b      	lsrs	r3, r3, #28
 800a3f8:	2b09      	cmp	r3, #9
 800a3fa:	d80b      	bhi.n	800a414 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	0f1b      	lsrs	r3, r3, #28
 800a400:	b2da      	uxtb	r2, r3
 800a402:	7dfb      	ldrb	r3, [r7, #23]
 800a404:	005b      	lsls	r3, r3, #1
 800a406:	4619      	mov	r1, r3
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	440b      	add	r3, r1
 800a40c:	3230      	adds	r2, #48	; 0x30
 800a40e:	b2d2      	uxtb	r2, r2
 800a410:	701a      	strb	r2, [r3, #0]
 800a412:	e00a      	b.n	800a42a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	0f1b      	lsrs	r3, r3, #28
 800a418:	b2da      	uxtb	r2, r3
 800a41a:	7dfb      	ldrb	r3, [r7, #23]
 800a41c:	005b      	lsls	r3, r3, #1
 800a41e:	4619      	mov	r1, r3
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	440b      	add	r3, r1
 800a424:	3237      	adds	r2, #55	; 0x37
 800a426:	b2d2      	uxtb	r2, r2
 800a428:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	011b      	lsls	r3, r3, #4
 800a42e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a430:	7dfb      	ldrb	r3, [r7, #23]
 800a432:	005b      	lsls	r3, r3, #1
 800a434:	3301      	adds	r3, #1
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	4413      	add	r3, r2
 800a43a:	2200      	movs	r2, #0
 800a43c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
 800a440:	3301      	adds	r3, #1
 800a442:	75fb      	strb	r3, [r7, #23]
 800a444:	7dfa      	ldrb	r2, [r7, #23]
 800a446:	79fb      	ldrb	r3, [r7, #7]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d3d3      	bcc.n	800a3f4 <IntToUnicode+0x18>
  }
}
 800a44c:	bf00      	nop
 800a44e:	bf00      	nop
 800a450:	371c      	adds	r7, #28
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr
	...

0800a45c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b096      	sub	sp, #88	; 0x58
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a464:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a468:	2200      	movs	r2, #0
 800a46a:	601a      	str	r2, [r3, #0]
 800a46c:	605a      	str	r2, [r3, #4]
 800a46e:	609a      	str	r2, [r3, #8]
 800a470:	60da      	str	r2, [r3, #12]
 800a472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a474:	f107 0310 	add.w	r3, r7, #16
 800a478:	2234      	movs	r2, #52	; 0x34
 800a47a:	2100      	movs	r1, #0
 800a47c:	4618      	mov	r0, r3
 800a47e:	f000 fbcd 	bl	800ac1c <memset>
  if(pcdHandle->Instance==USB)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a24      	ldr	r2, [pc, #144]	; (800a518 <HAL_PCD_MspInit+0xbc>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d141      	bne.n	800a510 <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a48c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a490:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800a492:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800a496:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a498:	f107 0310 	add.w	r3, r7, #16
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7fa fcd3 	bl	8004e48 <HAL_RCCEx_PeriphCLKConfig>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d001      	beq.n	800a4ac <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800a4a8:	f7f6 f8b0 	bl	800060c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4ac:	4b1b      	ldr	r3, [pc, #108]	; (800a51c <HAL_PCD_MspInit+0xc0>)
 800a4ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4b0:	4a1a      	ldr	r2, [pc, #104]	; (800a51c <HAL_PCD_MspInit+0xc0>)
 800a4b2:	f043 0301 	orr.w	r3, r3, #1
 800a4b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a4b8:	4b18      	ldr	r3, [pc, #96]	; (800a51c <HAL_PCD_MspInit+0xc0>)
 800a4ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4bc:	f003 0301 	and.w	r3, r3, #1
 800a4c0:	60fb      	str	r3, [r7, #12]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a4c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a4c8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4ca:	2302      	movs	r3, #2
 800a4cc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4d2:	2303      	movs	r3, #3
 800a4d4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800a4d6:	230a      	movs	r3, #10
 800a4d8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a4de:	4619      	mov	r1, r3
 800a4e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a4e4:	f7f7 fed8 	bl	8002298 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a4e8:	4b0c      	ldr	r3, [pc, #48]	; (800a51c <HAL_PCD_MspInit+0xc0>)
 800a4ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4ec:	4a0b      	ldr	r2, [pc, #44]	; (800a51c <HAL_PCD_MspInit+0xc0>)
 800a4ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a4f2:	6593      	str	r3, [r2, #88]	; 0x58
 800a4f4:	4b09      	ldr	r3, [pc, #36]	; (800a51c <HAL_PCD_MspInit+0xc0>)
 800a4f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a4fc:	60bb      	str	r3, [r7, #8]
 800a4fe:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800a500:	2200      	movs	r2, #0
 800a502:	2100      	movs	r1, #0
 800a504:	2043      	movs	r0, #67	; 0x43
 800a506:	f7f7 fd28 	bl	8001f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800a50a:	2043      	movs	r0, #67	; 0x43
 800a50c:	f7f7 fd41 	bl	8001f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a510:	bf00      	nop
 800a512:	3758      	adds	r7, #88	; 0x58
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	40006800 	.word	0x40006800
 800a51c:	40021000 	.word	0x40021000

0800a520 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800a534:	4619      	mov	r1, r3
 800a536:	4610      	mov	r0, r2
 800a538:	f7fe fd20 	bl	8008f7c <USBD_LL_SetupStage>
}
 800a53c:	bf00      	nop
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	460b      	mov	r3, r1
 800a54e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800a556:	78fa      	ldrb	r2, [r7, #3]
 800a558:	6879      	ldr	r1, [r7, #4]
 800a55a:	4613      	mov	r3, r2
 800a55c:	009b      	lsls	r3, r3, #2
 800a55e:	4413      	add	r3, r2
 800a560:	00db      	lsls	r3, r3, #3
 800a562:	440b      	add	r3, r1
 800a564:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	78fb      	ldrb	r3, [r7, #3]
 800a56c:	4619      	mov	r1, r3
 800a56e:	f7fe fd5a 	bl	8009026 <USBD_LL_DataOutStage>
}
 800a572:	bf00      	nop
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b082      	sub	sp, #8
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
 800a582:	460b      	mov	r3, r1
 800a584:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800a58c:	78fa      	ldrb	r2, [r7, #3]
 800a58e:	6879      	ldr	r1, [r7, #4]
 800a590:	4613      	mov	r3, r2
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	4413      	add	r3, r2
 800a596:	00db      	lsls	r3, r3, #3
 800a598:	440b      	add	r3, r1
 800a59a:	3340      	adds	r3, #64	; 0x40
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	78fb      	ldrb	r3, [r7, #3]
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	f7fe fda3 	bl	80090ec <USBD_LL_DataInStage>
}
 800a5a6:	bf00      	nop
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b082      	sub	sp, #8
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7fe feb7 	bl	8009330 <USBD_LL_SOF>
}
 800a5c2:	bf00      	nop
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b084      	sub	sp, #16
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d001      	beq.n	800a5e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a5de:	f7f6 f815 	bl	800060c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800a5e8:	7bfa      	ldrb	r2, [r7, #15]
 800a5ea:	4611      	mov	r1, r2
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7fe fe61 	bl	80092b4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fe fe0d 	bl	8009218 <USBD_LL_Reset>
}
 800a5fe:	bf00      	nop
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
	...

0800a608 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800a616:	4618      	mov	r0, r3
 800a618:	f7fe fe5c 	bl	80092d4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	699b      	ldr	r3, [r3, #24]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d005      	beq.n	800a630 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a624:	4b04      	ldr	r3, [pc, #16]	; (800a638 <HAL_PCD_SuspendCallback+0x30>)
 800a626:	691b      	ldr	r3, [r3, #16]
 800a628:	4a03      	ldr	r2, [pc, #12]	; (800a638 <HAL_PCD_SuspendCallback+0x30>)
 800a62a:	f043 0306 	orr.w	r3, r3, #6
 800a62e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a630:	bf00      	nop
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	e000ed00 	.word	0xe000ed00

0800a63c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	699b      	ldr	r3, [r3, #24]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d007      	beq.n	800a65c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a64c:	4b08      	ldr	r3, [pc, #32]	; (800a670 <HAL_PCD_ResumeCallback+0x34>)
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	4a07      	ldr	r2, [pc, #28]	; (800a670 <HAL_PCD_ResumeCallback+0x34>)
 800a652:	f023 0306 	bic.w	r3, r3, #6
 800a656:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a658:	f000 fab6 	bl	800abc8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800a662:	4618      	mov	r0, r3
 800a664:	f7fe fe4c 	bl	8009300 <USBD_LL_Resume>
}
 800a668:	bf00      	nop
 800a66a:	3708      	adds	r7, #8
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	e000ed00 	.word	0xe000ed00

0800a674 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800a67c:	f7f9 fd86 	bl	800418c <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a680:	4a2b      	ldr	r2, [pc, #172]	; (800a730 <USBD_LL_Init+0xbc>)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4a29      	ldr	r2, [pc, #164]	; (800a730 <USBD_LL_Init+0xbc>)
 800a68c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a690:	4b27      	ldr	r3, [pc, #156]	; (800a730 <USBD_LL_Init+0xbc>)
 800a692:	4a28      	ldr	r2, [pc, #160]	; (800a734 <USBD_LL_Init+0xc0>)
 800a694:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a696:	4b26      	ldr	r3, [pc, #152]	; (800a730 <USBD_LL_Init+0xbc>)
 800a698:	2208      	movs	r2, #8
 800a69a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a69c:	4b24      	ldr	r3, [pc, #144]	; (800a730 <USBD_LL_Init+0xbc>)
 800a69e:	2202      	movs	r2, #2
 800a6a0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a6a2:	4b23      	ldr	r3, [pc, #140]	; (800a730 <USBD_LL_Init+0xbc>)
 800a6a4:	2202      	movs	r2, #2
 800a6a6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a6a8:	4b21      	ldr	r3, [pc, #132]	; (800a730 <USBD_LL_Init+0xbc>)
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a6ae:	4b20      	ldr	r3, [pc, #128]	; (800a730 <USBD_LL_Init+0xbc>)
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a6b4:	4b1e      	ldr	r3, [pc, #120]	; (800a730 <USBD_LL_Init+0xbc>)
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a6ba:	4b1d      	ldr	r3, [pc, #116]	; (800a730 <USBD_LL_Init+0xbc>)
 800a6bc:	2200      	movs	r2, #0
 800a6be:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a6c0:	481b      	ldr	r0, [pc, #108]	; (800a730 <USBD_LL_Init+0xbc>)
 800a6c2:	f7f7 ff73 	bl	80025ac <HAL_PCD_Init>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d001      	beq.n	800a6d0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800a6cc:	f7f5 ff9e 	bl	800060c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a6d6:	2318      	movs	r3, #24
 800a6d8:	2200      	movs	r2, #0
 800a6da:	2100      	movs	r1, #0
 800a6dc:	f7f9 fc83 	bl	8003fe6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a6e6:	2358      	movs	r3, #88	; 0x58
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	2180      	movs	r1, #128	; 0x80
 800a6ec:	f7f9 fc7b 	bl	8003fe6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a6f6:	23c0      	movs	r3, #192	; 0xc0
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	2181      	movs	r1, #129	; 0x81
 800a6fc:	f7f9 fc73 	bl	8003fe6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a706:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a70a:	2200      	movs	r2, #0
 800a70c:	2101      	movs	r1, #1
 800a70e:	f7f9 fc6a 	bl	8003fe6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a718:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a71c:	2200      	movs	r2, #0
 800a71e:	2182      	movs	r1, #130	; 0x82
 800a720:	f7f9 fc61 	bl	8003fe6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	20001094 	.word	0x20001094
 800a734:	40006800 	.word	0x40006800

0800a738 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a740:	2300      	movs	r3, #0
 800a742:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a744:	2300      	movs	r3, #0
 800a746:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a74e:	4618      	mov	r0, r3
 800a750:	f7f8 f843 	bl	80027da <HAL_PCD_Start>
 800a754:	4603      	mov	r3, r0
 800a756:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a758:	7bbb      	ldrb	r3, [r7, #14]
 800a75a:	2b03      	cmp	r3, #3
 800a75c:	d816      	bhi.n	800a78c <USBD_LL_Start+0x54>
 800a75e:	a201      	add	r2, pc, #4	; (adr r2, 800a764 <USBD_LL_Start+0x2c>)
 800a760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a764:	0800a775 	.word	0x0800a775
 800a768:	0800a77b 	.word	0x0800a77b
 800a76c:	0800a781 	.word	0x0800a781
 800a770:	0800a787 	.word	0x0800a787
    case HAL_OK :
      usb_status = USBD_OK;
 800a774:	2300      	movs	r3, #0
 800a776:	73fb      	strb	r3, [r7, #15]
    break;
 800a778:	e00b      	b.n	800a792 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a77a:	2303      	movs	r3, #3
 800a77c:	73fb      	strb	r3, [r7, #15]
    break;
 800a77e:	e008      	b.n	800a792 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a780:	2301      	movs	r3, #1
 800a782:	73fb      	strb	r3, [r7, #15]
    break;
 800a784:	e005      	b.n	800a792 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a786:	2303      	movs	r3, #3
 800a788:	73fb      	strb	r3, [r7, #15]
    break;
 800a78a:	e002      	b.n	800a792 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a78c:	2303      	movs	r3, #3
 800a78e:	73fb      	strb	r3, [r7, #15]
    break;
 800a790:	bf00      	nop
  }
  return usb_status;
 800a792:	7bfb      	ldrb	r3, [r7, #15]
}
 800a794:	4618      	mov	r0, r3
 800a796:	3710      	adds	r7, #16
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	4608      	mov	r0, r1
 800a7a6:	4611      	mov	r1, r2
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	70fb      	strb	r3, [r7, #3]
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	70bb      	strb	r3, [r7, #2]
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a7c4:	78bb      	ldrb	r3, [r7, #2]
 800a7c6:	883a      	ldrh	r2, [r7, #0]
 800a7c8:	78f9      	ldrb	r1, [r7, #3]
 800a7ca:	f7f8 f974 	bl	8002ab6 <HAL_PCD_EP_Open>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a7d2:	7bbb      	ldrb	r3, [r7, #14]
 800a7d4:	2b03      	cmp	r3, #3
 800a7d6:	d817      	bhi.n	800a808 <USBD_LL_OpenEP+0x6c>
 800a7d8:	a201      	add	r2, pc, #4	; (adr r2, 800a7e0 <USBD_LL_OpenEP+0x44>)
 800a7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7de:	bf00      	nop
 800a7e0:	0800a7f1 	.word	0x0800a7f1
 800a7e4:	0800a7f7 	.word	0x0800a7f7
 800a7e8:	0800a7fd 	.word	0x0800a7fd
 800a7ec:	0800a803 	.word	0x0800a803
    case HAL_OK :
      usb_status = USBD_OK;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a7f4:	e00b      	b.n	800a80e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a7f6:	2303      	movs	r3, #3
 800a7f8:	73fb      	strb	r3, [r7, #15]
    break;
 800a7fa:	e008      	b.n	800a80e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a800:	e005      	b.n	800a80e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a802:	2303      	movs	r3, #3
 800a804:	73fb      	strb	r3, [r7, #15]
    break;
 800a806:	e002      	b.n	800a80e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a808:	2303      	movs	r3, #3
 800a80a:	73fb      	strb	r3, [r7, #15]
    break;
 800a80c:	bf00      	nop
  }
  return usb_status;
 800a80e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a810:	4618      	mov	r0, r3
 800a812:	3710      	adds	r7, #16
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	460b      	mov	r3, r1
 800a822:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a824:	2300      	movs	r3, #0
 800a826:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a828:	2300      	movs	r3, #0
 800a82a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a832:	78fa      	ldrb	r2, [r7, #3]
 800a834:	4611      	mov	r1, r2
 800a836:	4618      	mov	r0, r3
 800a838:	f7f8 f9a5 	bl	8002b86 <HAL_PCD_EP_Close>
 800a83c:	4603      	mov	r3, r0
 800a83e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a840:	7bbb      	ldrb	r3, [r7, #14]
 800a842:	2b03      	cmp	r3, #3
 800a844:	d816      	bhi.n	800a874 <USBD_LL_CloseEP+0x5c>
 800a846:	a201      	add	r2, pc, #4	; (adr r2, 800a84c <USBD_LL_CloseEP+0x34>)
 800a848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a84c:	0800a85d 	.word	0x0800a85d
 800a850:	0800a863 	.word	0x0800a863
 800a854:	0800a869 	.word	0x0800a869
 800a858:	0800a86f 	.word	0x0800a86f
    case HAL_OK :
      usb_status = USBD_OK;
 800a85c:	2300      	movs	r3, #0
 800a85e:	73fb      	strb	r3, [r7, #15]
    break;
 800a860:	e00b      	b.n	800a87a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a862:	2303      	movs	r3, #3
 800a864:	73fb      	strb	r3, [r7, #15]
    break;
 800a866:	e008      	b.n	800a87a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a868:	2301      	movs	r3, #1
 800a86a:	73fb      	strb	r3, [r7, #15]
    break;
 800a86c:	e005      	b.n	800a87a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a86e:	2303      	movs	r3, #3
 800a870:	73fb      	strb	r3, [r7, #15]
    break;
 800a872:	e002      	b.n	800a87a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a874:	2303      	movs	r3, #3
 800a876:	73fb      	strb	r3, [r7, #15]
    break;
 800a878:	bf00      	nop
  }
  return usb_status;
 800a87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	460b      	mov	r3, r1
 800a88e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a890:	2300      	movs	r3, #0
 800a892:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a894:	2300      	movs	r3, #0
 800a896:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a89e:	78fa      	ldrb	r2, [r7, #3]
 800a8a0:	4611      	mov	r1, r2
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7f8 fa53 	bl	8002d4e <HAL_PCD_EP_SetStall>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a8ac:	7bbb      	ldrb	r3, [r7, #14]
 800a8ae:	2b03      	cmp	r3, #3
 800a8b0:	d816      	bhi.n	800a8e0 <USBD_LL_StallEP+0x5c>
 800a8b2:	a201      	add	r2, pc, #4	; (adr r2, 800a8b8 <USBD_LL_StallEP+0x34>)
 800a8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b8:	0800a8c9 	.word	0x0800a8c9
 800a8bc:	0800a8cf 	.word	0x0800a8cf
 800a8c0:	0800a8d5 	.word	0x0800a8d5
 800a8c4:	0800a8db 	.word	0x0800a8db
    case HAL_OK :
      usb_status = USBD_OK;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	73fb      	strb	r3, [r7, #15]
    break;
 800a8cc:	e00b      	b.n	800a8e6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a8ce:	2303      	movs	r3, #3
 800a8d0:	73fb      	strb	r3, [r7, #15]
    break;
 800a8d2:	e008      	b.n	800a8e6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8d8:	e005      	b.n	800a8e6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a8da:	2303      	movs	r3, #3
 800a8dc:	73fb      	strb	r3, [r7, #15]
    break;
 800a8de:	e002      	b.n	800a8e6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a8e0:	2303      	movs	r3, #3
 800a8e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a8e4:	bf00      	nop
  }
  return usb_status;
 800a8e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a900:	2300      	movs	r3, #0
 800a902:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a90a:	78fa      	ldrb	r2, [r7, #3]
 800a90c:	4611      	mov	r1, r2
 800a90e:	4618      	mov	r0, r3
 800a910:	f7f8 fa7f 	bl	8002e12 <HAL_PCD_EP_ClrStall>
 800a914:	4603      	mov	r3, r0
 800a916:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a918:	7bbb      	ldrb	r3, [r7, #14]
 800a91a:	2b03      	cmp	r3, #3
 800a91c:	d816      	bhi.n	800a94c <USBD_LL_ClearStallEP+0x5c>
 800a91e:	a201      	add	r2, pc, #4	; (adr r2, 800a924 <USBD_LL_ClearStallEP+0x34>)
 800a920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a924:	0800a935 	.word	0x0800a935
 800a928:	0800a93b 	.word	0x0800a93b
 800a92c:	0800a941 	.word	0x0800a941
 800a930:	0800a947 	.word	0x0800a947
    case HAL_OK :
      usb_status = USBD_OK;
 800a934:	2300      	movs	r3, #0
 800a936:	73fb      	strb	r3, [r7, #15]
    break;
 800a938:	e00b      	b.n	800a952 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a93a:	2303      	movs	r3, #3
 800a93c:	73fb      	strb	r3, [r7, #15]
    break;
 800a93e:	e008      	b.n	800a952 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a940:	2301      	movs	r3, #1
 800a942:	73fb      	strb	r3, [r7, #15]
    break;
 800a944:	e005      	b.n	800a952 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a946:	2303      	movs	r3, #3
 800a948:	73fb      	strb	r3, [r7, #15]
    break;
 800a94a:	e002      	b.n	800a952 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a94c:	2303      	movs	r3, #3
 800a94e:	73fb      	strb	r3, [r7, #15]
    break;
 800a950:	bf00      	nop
  }
  return usb_status;
 800a952:	7bfb      	ldrb	r3, [r7, #15]
}
 800a954:	4618      	mov	r0, r3
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b085      	sub	sp, #20
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	460b      	mov	r3, r1
 800a966:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a96e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a970:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a974:	2b00      	cmp	r3, #0
 800a976:	da0c      	bge.n	800a992 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a978:	78fb      	ldrb	r3, [r7, #3]
 800a97a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a97e:	68f9      	ldr	r1, [r7, #12]
 800a980:	1c5a      	adds	r2, r3, #1
 800a982:	4613      	mov	r3, r2
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	4413      	add	r3, r2
 800a988:	00db      	lsls	r3, r3, #3
 800a98a:	440b      	add	r3, r1
 800a98c:	3306      	adds	r3, #6
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	e00b      	b.n	800a9aa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a992:	78fb      	ldrb	r3, [r7, #3]
 800a994:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a998:	68f9      	ldr	r1, [r7, #12]
 800a99a:	4613      	mov	r3, r2
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	4413      	add	r3, r2
 800a9a0:	00db      	lsls	r3, r3, #3
 800a9a2:	440b      	add	r3, r1
 800a9a4:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800a9a8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3714      	adds	r7, #20
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr
	...

0800a9b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a9d2:	78fa      	ldrb	r2, [r7, #3]
 800a9d4:	4611      	mov	r1, r2
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7f8 f848 	bl	8002a6c <HAL_PCD_SetAddress>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a9e0:	7bbb      	ldrb	r3, [r7, #14]
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d816      	bhi.n	800aa14 <USBD_LL_SetUSBAddress+0x5c>
 800a9e6:	a201      	add	r2, pc, #4	; (adr r2, 800a9ec <USBD_LL_SetUSBAddress+0x34>)
 800a9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ec:	0800a9fd 	.word	0x0800a9fd
 800a9f0:	0800aa03 	.word	0x0800aa03
 800a9f4:	0800aa09 	.word	0x0800aa09
 800a9f8:	0800aa0f 	.word	0x0800aa0f
    case HAL_OK :
      usb_status = USBD_OK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	73fb      	strb	r3, [r7, #15]
    break;
 800aa00:	e00b      	b.n	800aa1a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa02:	2303      	movs	r3, #3
 800aa04:	73fb      	strb	r3, [r7, #15]
    break;
 800aa06:	e008      	b.n	800aa1a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	73fb      	strb	r3, [r7, #15]
    break;
 800aa0c:	e005      	b.n	800aa1a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa0e:	2303      	movs	r3, #3
 800aa10:	73fb      	strb	r3, [r7, #15]
    break;
 800aa12:	e002      	b.n	800aa1a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800aa14:	2303      	movs	r3, #3
 800aa16:	73fb      	strb	r3, [r7, #15]
    break;
 800aa18:	bf00      	nop
  }
  return usb_status;
 800aa1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3710      	adds	r7, #16
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b086      	sub	sp, #24
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	607a      	str	r2, [r7, #4]
 800aa2e:	603b      	str	r3, [r7, #0]
 800aa30:	460b      	mov	r3, r1
 800aa32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa34:	2300      	movs	r3, #0
 800aa36:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aa42:	7af9      	ldrb	r1, [r7, #11]
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	f7f8 f93d 	bl	8002cc6 <HAL_PCD_EP_Transmit>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800aa50:	7dbb      	ldrb	r3, [r7, #22]
 800aa52:	2b03      	cmp	r3, #3
 800aa54:	d816      	bhi.n	800aa84 <USBD_LL_Transmit+0x60>
 800aa56:	a201      	add	r2, pc, #4	; (adr r2, 800aa5c <USBD_LL_Transmit+0x38>)
 800aa58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa5c:	0800aa6d 	.word	0x0800aa6d
 800aa60:	0800aa73 	.word	0x0800aa73
 800aa64:	0800aa79 	.word	0x0800aa79
 800aa68:	0800aa7f 	.word	0x0800aa7f
    case HAL_OK :
      usb_status = USBD_OK;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	75fb      	strb	r3, [r7, #23]
    break;
 800aa70:	e00b      	b.n	800aa8a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa72:	2303      	movs	r3, #3
 800aa74:	75fb      	strb	r3, [r7, #23]
    break;
 800aa76:	e008      	b.n	800aa8a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	75fb      	strb	r3, [r7, #23]
    break;
 800aa7c:	e005      	b.n	800aa8a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	75fb      	strb	r3, [r7, #23]
    break;
 800aa82:	e002      	b.n	800aa8a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800aa84:	2303      	movs	r3, #3
 800aa86:	75fb      	strb	r3, [r7, #23]
    break;
 800aa88:	bf00      	nop
  }
  return usb_status;
 800aa8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3718      	adds	r7, #24
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b086      	sub	sp, #24
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	607a      	str	r2, [r7, #4]
 800aa9e:	603b      	str	r3, [r7, #0]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aab2:	7af9      	ldrb	r1, [r7, #11]
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	f7f8 f8af 	bl	8002c1a <HAL_PCD_EP_Receive>
 800aabc:	4603      	mov	r3, r0
 800aabe:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800aac0:	7dbb      	ldrb	r3, [r7, #22]
 800aac2:	2b03      	cmp	r3, #3
 800aac4:	d816      	bhi.n	800aaf4 <USBD_LL_PrepareReceive+0x60>
 800aac6:	a201      	add	r2, pc, #4	; (adr r2, 800aacc <USBD_LL_PrepareReceive+0x38>)
 800aac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aacc:	0800aadd 	.word	0x0800aadd
 800aad0:	0800aae3 	.word	0x0800aae3
 800aad4:	0800aae9 	.word	0x0800aae9
 800aad8:	0800aaef 	.word	0x0800aaef
    case HAL_OK :
      usb_status = USBD_OK;
 800aadc:	2300      	movs	r3, #0
 800aade:	75fb      	strb	r3, [r7, #23]
    break;
 800aae0:	e00b      	b.n	800aafa <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aae2:	2303      	movs	r3, #3
 800aae4:	75fb      	strb	r3, [r7, #23]
    break;
 800aae6:	e008      	b.n	800aafa <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aae8:	2301      	movs	r3, #1
 800aaea:	75fb      	strb	r3, [r7, #23]
    break;
 800aaec:	e005      	b.n	800aafa <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aaee:	2303      	movs	r3, #3
 800aaf0:	75fb      	strb	r3, [r7, #23]
    break;
 800aaf2:	e002      	b.n	800aafa <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800aaf4:	2303      	movs	r3, #3
 800aaf6:	75fb      	strb	r3, [r7, #23]
    break;
 800aaf8:	bf00      	nop
  }
  return usb_status;
 800aafa:	7dfb      	ldrb	r3, [r7, #23]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3718      	adds	r7, #24
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ab16:	78fa      	ldrb	r2, [r7, #3]
 800ab18:	4611      	mov	r1, r2
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7f8 f8bb 	bl	8002c96 <HAL_PCD_EP_GetRxCount>
 800ab20:	4603      	mov	r3, r0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3708      	adds	r7, #8
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
	...

0800ab2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	460b      	mov	r3, r1
 800ab36:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ab38:	78fb      	ldrb	r3, [r7, #3]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d002      	beq.n	800ab44 <HAL_PCDEx_LPM_Callback+0x18>
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d013      	beq.n	800ab6a <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ab42:	e023      	b.n	800ab8c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	699b      	ldr	r3, [r3, #24]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d007      	beq.n	800ab5c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ab4c:	f000 f83c 	bl	800abc8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab50:	4b10      	ldr	r3, [pc, #64]	; (800ab94 <HAL_PCDEx_LPM_Callback+0x68>)
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	4a0f      	ldr	r2, [pc, #60]	; (800ab94 <HAL_PCDEx_LPM_Callback+0x68>)
 800ab56:	f023 0306 	bic.w	r3, r3, #6
 800ab5a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fe fbcc 	bl	8009300 <USBD_LL_Resume>
    break;
 800ab68:	e010      	b.n	800ab8c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7fe fbaf 	bl	80092d4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	699b      	ldr	r3, [r3, #24]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d005      	beq.n	800ab8a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab7e:	4b05      	ldr	r3, [pc, #20]	; (800ab94 <HAL_PCDEx_LPM_Callback+0x68>)
 800ab80:	691b      	ldr	r3, [r3, #16]
 800ab82:	4a04      	ldr	r2, [pc, #16]	; (800ab94 <HAL_PCDEx_LPM_Callback+0x68>)
 800ab84:	f043 0306 	orr.w	r3, r3, #6
 800ab88:	6113      	str	r3, [r2, #16]
    break;
 800ab8a:	bf00      	nop
}
 800ab8c:	bf00      	nop
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	e000ed00 	.word	0xe000ed00

0800ab98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aba0:	4b03      	ldr	r3, [pc, #12]	; (800abb0 <USBD_static_malloc+0x18>)
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	370c      	adds	r7, #12
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	20001390 	.word	0x20001390

0800abb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]

}
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800abcc:	f7f5 fcc9 	bl	8000562 <SystemClock_Config>
}
 800abd0:	bf00      	nop
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <__libc_init_array>:
 800abd4:	b570      	push	{r4, r5, r6, lr}
 800abd6:	4d0d      	ldr	r5, [pc, #52]	; (800ac0c <__libc_init_array+0x38>)
 800abd8:	4c0d      	ldr	r4, [pc, #52]	; (800ac10 <__libc_init_array+0x3c>)
 800abda:	1b64      	subs	r4, r4, r5
 800abdc:	10a4      	asrs	r4, r4, #2
 800abde:	2600      	movs	r6, #0
 800abe0:	42a6      	cmp	r6, r4
 800abe2:	d109      	bne.n	800abf8 <__libc_init_array+0x24>
 800abe4:	4d0b      	ldr	r5, [pc, #44]	; (800ac14 <__libc_init_array+0x40>)
 800abe6:	4c0c      	ldr	r4, [pc, #48]	; (800ac18 <__libc_init_array+0x44>)
 800abe8:	f000 f820 	bl	800ac2c <_init>
 800abec:	1b64      	subs	r4, r4, r5
 800abee:	10a4      	asrs	r4, r4, #2
 800abf0:	2600      	movs	r6, #0
 800abf2:	42a6      	cmp	r6, r4
 800abf4:	d105      	bne.n	800ac02 <__libc_init_array+0x2e>
 800abf6:	bd70      	pop	{r4, r5, r6, pc}
 800abf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800abfc:	4798      	blx	r3
 800abfe:	3601      	adds	r6, #1
 800ac00:	e7ee      	b.n	800abe0 <__libc_init_array+0xc>
 800ac02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac06:	4798      	blx	r3
 800ac08:	3601      	adds	r6, #1
 800ac0a:	e7f2      	b.n	800abf2 <__libc_init_array+0x1e>
 800ac0c:	0800accc 	.word	0x0800accc
 800ac10:	0800accc 	.word	0x0800accc
 800ac14:	0800accc 	.word	0x0800accc
 800ac18:	0800acd0 	.word	0x0800acd0

0800ac1c <memset>:
 800ac1c:	4402      	add	r2, r0
 800ac1e:	4603      	mov	r3, r0
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d100      	bne.n	800ac26 <memset+0xa>
 800ac24:	4770      	bx	lr
 800ac26:	f803 1b01 	strb.w	r1, [r3], #1
 800ac2a:	e7f9      	b.n	800ac20 <memset+0x4>

0800ac2c <_init>:
 800ac2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac2e:	bf00      	nop
 800ac30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac32:	bc08      	pop	{r3}
 800ac34:	469e      	mov	lr, r3
 800ac36:	4770      	bx	lr

0800ac38 <_fini>:
 800ac38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3a:	bf00      	nop
 800ac3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac3e:	bc08      	pop	{r3}
 800ac40:	469e      	mov	lr, r3
 800ac42:	4770      	bx	lr
