
Cobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fdc0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800ff4c  0800ff4c  0001ff4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010038  08010038  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  08010038  08010038  00020038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010040  08010040  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010040  08010040  00020040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010048  08010048  00020048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0801004c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001080  20000208  08010254  00030208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001288  08010254  00031288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .debug_info   000303f5  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000787a  00000000  00000000  0006062d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022e0  00000000  00000000  00067ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f38  00000000  00000000  0006a188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030d03  00000000  00000000  0006c0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030a12  00000000  00000000  0009cdc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f470b  00000000  00000000  000cd7d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c1ee0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091e4  00000000  00000000  001c1f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000208 	.word	0x20000208
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800ff34 	.word	0x0800ff34

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000020c 	.word	0x2000020c
 80001c8:	0800ff34 	.word	0x0800ff34

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <_ZN4IComC1Ev>:
 */

#ifndef SRC_COM_ICOM_H_
#define SRC_COM_ICOM_H_

class ICom{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <_ZN4IComC1Ev+0x1c>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	0800ffa4 	.word	0x0800ffa4

080004f0 <_ZN6USBComC1EP11DriveStatusP13DriveSettingsP12DriveCommand>:
class USBCom :  public ICom, public BaseCOM
{

	public:

		USBCom(DriveStatus *driveStatus, DriveSettings *driveSettings,
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	603b      	str	r3, [r7, #0]
				DriveCommand *driveCommand) :
				BaseCOM(driveStatus, driveSettings, driveCommand)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff ffe5 	bl	80004d0 <_ZN4IComC1Ev>
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	1d18      	adds	r0, r3, #4
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	68b9      	ldr	r1, [r7, #8]
 8000510:	f000 fa61 	bl	80009d6 <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <_ZN6USBComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x34>)
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	601a      	str	r2, [r3, #0]
		{
		}
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	4618      	mov	r0, r3
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	0800ffd4 	.word	0x0800ffd4

08000528 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa>:


class RFM95Com :  public ICom, public BaseCOM
{
	public:
		RFM95Com(DriveStatus *driveStatus, DriveSettings *driveSettings,
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
 8000534:	603b      	str	r3, [r7, #0]
				DriveCommand *driveCommand, RFM95_LoRa *rfm95) :
				BaseCOM(driveStatus, driveSettings, driveCommand)
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ffc9 	bl	80004d0 <_ZN4IComC1Ev>
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	1d18      	adds	r0, r3, #4
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	68b9      	ldr	r1, [r7, #8]
 8000548:	f000 fa45 	bl	80009d6 <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 800054c:	4a0c      	ldr	r2, [pc, #48]	; (8000580 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa+0x58>)
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	3328      	adds	r3, #40	; 0x28
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	711a      	strb	r2, [r3, #4]
		{
			this->rfm95 = rfm95;
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	69ba      	ldr	r2, [r7, #24]
 8000560:	619a      	str	r2, [r3, #24]
			this->driveCommand = driveCommand;
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	683a      	ldr	r2, [r7, #0]
 8000566:	625a      	str	r2, [r3, #36]	; 0x24
			this->driveStatus = driveStatus;
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	68ba      	ldr	r2, [r7, #8]
 800056c:	621a      	str	r2, [r3, #32]
			this->driveSettings = driveSettings;
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	61da      	str	r2, [r3, #28]
		}
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	4618      	mov	r0, r3
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	0800ffc4 	.word	0x0800ffc4

08000584 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand>:
#include "../IO/DO.h"

class IOCom: public ICom, public BaseCOM
{
	public:
		IOCom(DriveStatus *driveStatus, DriveSettings *driveSettings,
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af02      	add	r7, sp, #8
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	603b      	str	r3, [r7, #0]
				DriveCommand *driveCommand) :
				BaseCOM(driveStatus, driveSettings, driveCommand)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff ff9b 	bl	80004d0 <_ZN4IComC1Ev>
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	1d18      	adds	r0, r3, #4
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	68b9      	ldr	r1, [r7, #8]
 80005a4:	f000 fa17 	bl	80009d6 <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 80005a8:	4a39      	ldr	r2, [pc, #228]	; (8000690 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x10c>)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f103 0018 	add.w	r0, r3, #24
 80005b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005c2:	4934      	ldr	r1, [pc, #208]	; (8000694 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x110>)
 80005c4:	f002 fa9c 	bl	8002b00 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80005ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	4b30      	ldr	r3, [pc, #192]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 80005d6:	2204      	movs	r2, #4
 80005d8:	492f      	ldr	r1, [pc, #188]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 80005da:	f002 fa91 	bl	8002b00 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80005e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x110>)
 80005ec:	2280      	movs	r2, #128	; 0x80
 80005ee:	4929      	ldr	r1, [pc, #164]	; (8000694 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x110>)
 80005f0:	f002 fa86 	bl	8002b00 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f103 0048 	add.w	r0, r3, #72	; 0x48
 80005fa:	2301      	movs	r3, #1
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	4b26      	ldr	r3, [pc, #152]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 8000600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000604:	4924      	ldr	r1, [pc, #144]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 8000606:	f002 fa7b 	bl	8002b00 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8000610:	2340      	movs	r3, #64	; 0x40
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x110>)
 8000616:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800061a:	491f      	ldr	r1, [pc, #124]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 800061c:	f002 fa70 	bl	8002b00 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8000626:	2302      	movs	r3, #2
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 800062c:	2210      	movs	r2, #16
 800062e:	4919      	ldr	r1, [pc, #100]	; (8000694 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x110>)
 8000630:	f002 fa66 	bl	8002b00 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800063a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 8000642:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000646:	4914      	ldr	r1, [pc, #80]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 8000648:	f002 fa5a 	bl	8002b00 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8000652:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x110>)
 800065a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800065e:	490d      	ldr	r1, [pc, #52]	; (8000694 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x110>)
 8000660:	f002 fa4e 	bl	8002b00 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	2200      	movs	r2, #0
 8000670:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2200      	movs	r2, #0
 8000678:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
		{
			this->driveStatus = driveStatus;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		}
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4618      	mov	r0, r3
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	0800ffb4 	.word	0x0800ffb4
 8000694:	48000800 	.word	0x48000800
 8000698:	48000400 	.word	0x48000400

0800069c <_ZN11TaskHandlerC1Ev>:


#include "stdint.h"


class TaskHandler{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2200      	movs	r2, #0
 80006ae:	705a      	strb	r2, [r3, #1]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	709a      	strb	r2, [r3, #2]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2200      	movs	r2, #0
 80006ba:	70da      	strb	r2, [r3, #3]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2200      	movs	r2, #0
 80006c0:	711a      	strb	r2, [r3, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2200      	movs	r2, #0
 80006c6:	715a      	strb	r2, [r3, #5]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2201      	movs	r2, #1
 80006cc:	719a      	strb	r2, [r3, #6]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2201      	movs	r2, #1
 80006d2:	71da      	strb	r2, [r3, #7]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2201      	movs	r2, #1
 80006d8:	721a      	strb	r2, [r3, #8]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2201      	movs	r2, #1
 80006de:	725a      	strb	r2, [r3, #9]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2201      	movs	r2, #1
 80006e4:	729a      	strb	r2, [r3, #10]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2201      	movs	r2, #1
 80006ea:	72da      	strb	r2, [r3, #11]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <_ZN13DriveSettingsC1Ev>:
#define SRC_SETTINGS_DRIVESETTINGS_H_

#include "stdint.h"
#include "main.h"

class DriveSettings{
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	221f      	movs	r2, #31
 8000706:	701a      	strb	r2, [r3, #0]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2200      	movs	r2, #0
 800070c:	805a      	strh	r2, [r3, #2]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	809a      	strh	r2, [r3, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	80da      	strh	r2, [r3, #6]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	811a      	strh	r2, [r3, #8]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000726:	815a      	strh	r2, [r3, #10]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2214      	movs	r2, #20
 800072c:	819a      	strh	r2, [r3, #12]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2264      	movs	r2, #100	; 0x64
 8000732:	81da      	strh	r2, [r3, #14]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f243 62b0 	movw	r2, #14000	; 0x36b0
 800073a:	821a      	strh	r2, [r3, #16]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000742:	825a      	strh	r2, [r3, #18]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2232      	movs	r2, #50	; 0x32
 8000748:	829a      	strh	r2, [r3, #20]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2264      	movs	r2, #100	; 0x64
 800074e:	82da      	strh	r2, [r3, #22]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000756:	831a      	strh	r2, [r3, #24]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2200      	movs	r2, #0
 800075c:	769a      	strb	r2, [r3, #26]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2200      	movs	r2, #0
 8000762:	839a      	strh	r2, [r3, #28]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4618      	mov	r0, r3
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <_ZN7AppMainC1Ev>:
#include "AppMain.h"
#include "../Tools/Delay.h"

extern TIM_HandleTypeDef htim7;

AppMain::AppMain()
 8000772:	b5b0      	push	{r4, r5, r7, lr}
 8000774:	b084      	sub	sp, #16
 8000776:	af02      	add	r7, sp, #8
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4618      	mov	r0, r3
 800077e:	f002 fccb 	bl	8003118 <_ZN10RFM95_LoRaC1Ev>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	3320      	adds	r3, #32
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	819a      	strh	r2, [r3, #12]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3320      	adds	r3, #32
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff81 	bl	800069c <_ZN11TaskHandlerC1Ev>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80007a0:	2301      	movs	r3, #1
 80007a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007a6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80007aa:	f002 fa00 	bl	8002bae <_ZN3LEDC1EP12GPIO_TypeDeftb>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80007b4:	2301      	movs	r3, #1
 80007b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ba:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80007be:	f002 f9f6 	bl	8002bae <_ZN3LEDC1EP12GPIO_TypeDeftb>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	3340      	adds	r3, #64	; 0x40
 80007c6:	221e      	movs	r2, #30
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f00f fab4 	bl	800fd38 <memset>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3340      	adds	r3, #64	; 0x40
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff90 	bl	80006fa <_ZN13DriveSettingsC1Ev>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	335e      	adds	r3, #94	; 0x5e
 80007de:	4618      	mov	r0, r3
 80007e0:	f003 fc4e 	bl	8004080 <_ZN11DriveStatusC1Ev>
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3367      	adds	r3, #103	; 0x67
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 faf5 	bl	8003dd8 <_ZN12DriveCommandC1Ev>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f103 0074 	add.w	r0, r3, #116	; 0x74
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f103 025e 	add.w	r2, r3, #94	; 0x5e
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3367      	adds	r3, #103	; 0x67
 8000804:	f001 fc44 	bl	8002090 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f503 708e 	add.w	r0, r3, #284	; 0x11c
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800081a:	687d      	ldr	r5, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3374      	adds	r3, #116	; 0x74
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	3267      	adds	r2, #103	; 0x67
 8000824:	9201      	str	r2, [sp, #4]
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	462b      	mov	r3, r5
 800082a:	4622      	mov	r2, r4
 800082c:	f002 fa07 	bl	8002c3e <_ZN13CommunicationC1EP11DriveStatusP13DriveSettingsP10RFM95_LoRaP14Digitll_IN_OUTP12DriveCommand>
 8000830:	2030      	movs	r0, #48	; 0x30
 8000832:	f00f fa18 	bl	800fc66 <_Znwj>
 8000836:	4603      	mov	r3, r0
 8000838:	461c      	mov	r4, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f103 0067 	add.w	r0, r3, #103	; 0x67
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	4603      	mov	r3, r0
 8000852:	4620      	mov	r0, r4
 8000854:	f7ff fe68 	bl	8000528 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f8c3 413c 	str.w	r4, [r3, #316]	; 0x13c
 800085e:	2018      	movs	r0, #24
 8000860:	f00f fa01 	bl	800fc66 <_Znwj>
 8000864:	4603      	mov	r3, r0
 8000866:	461c      	mov	r4, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3367      	adds	r3, #103	; 0x67
 8000878:	4620      	mov	r0, r4
 800087a:	f7ff fe39 	bl	80004f0 <_ZN6USBComC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
 8000884:	20a4      	movs	r0, #164	; 0xa4
 8000886:	f00f f9ee 	bl	800fc66 <_Znwj>
 800088a:	4603      	mov	r3, r0
 800088c:	461c      	mov	r4, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3367      	adds	r3, #103	; 0x67
 800089e:	4620      	mov	r0, r4
 80008a0:	f7ff fe70 	bl	8000584 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f503 70a4 	add.w	r0, r3, #328	; 0x148
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	335e      	adds	r3, #94	; 0x5e
 80008ba:	461a      	mov	r2, r3
 80008bc:	f001 f9f6 	bl	8001cac <_ZN5FlashC1EP13DriveSettingsP11DriveStatus>
{

}
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080008cc <_ZN7AppMain7StartupEv>:

void AppMain::Startup()
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	Storage.ReadFlash();
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 f9f9 	bl	8001cd2 <_ZN5Flash9ReadFlashEv>

	HAL_TIM_Base_Start_IT(&htim7);
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <_ZN7AppMain7StartupEv+0x48>)
 80008e2:	f00a fa85 	bl	800adf0 <HAL_TIM_Base_Start_IT>

	LED_Green.OFF();
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3330      	adds	r3, #48	; 0x30
 80008ea:	4618      	mov	r0, r3
 80008ec:	f002 f97a 	bl	8002be4 <_ZN3LED3OFFEv>
	LED_Red.OFF();
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3338      	adds	r3, #56	; 0x38
 80008f4:	4618      	mov	r0, r3
 80008f6:	f002 f975 	bl	8002be4 <_ZN3LED3OFFEv>

	if (rfm95.InitRFM())
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f002 fff5 	bl	80038ec <_ZN10RFM95_LoRa7InitRFMEv>
	{

	}

	Delay::DWT_Init();
 8000902:	f003 fde9 	bl	80044d8 <_ZN5Delay8DWT_InitEv>

	Main();
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f000 f806 	bl	8000918 <_ZN7AppMain4MainEv>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	2000063c 	.word	0x2000063c

08000918 <_ZN7AppMain4MainEv>:

void AppMain::Main()
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

	while (1)
	{

		if (taskStatus.isErrorTask())
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3320      	adds	r3, #32
 8000924:	4618      	mov	r0, r3
 8000926:	f003 fd85 	bl	8004434 <_ZN11TaskHandler11isErrorTaskEv>
		{

		}

		if (taskStatus.isLEDUpdateTask())
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	3320      	adds	r3, #32
 800092e:	4618      	mov	r0, r3
 8000930:	f003 fdb6 	bl	80044a0 <_ZN11TaskHandler15isLEDUpdateTaskEv>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d004      	beq.n	8000944 <_ZN7AppMain4MainEv+0x2c>
		{
			LED_Green.Toggle();
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3330      	adds	r3, #48	; 0x30
 800093e:	4618      	mov	r0, r3
 8000940:	f002 f96d 	bl	8002c1e <_ZN3LED6ToggleEv>
		}

		if (taskStatus.isComTask())
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3320      	adds	r3, #32
 8000948:	4618      	mov	r0, r3
 800094a:	f003 fd3d 	bl	80043c8 <_ZN11TaskHandler9isComTaskEv>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d01c      	beq.n	800098e <_ZN7AppMain4MainEv+0x76>
		{
			rfm95COM->Transmitt();
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f8d3 013c 	ldr.w	r0, [r3, #316]	; 0x13c
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2200      	movs	r2, #0
 8000966:	2100      	movs	r1, #0
 8000968:	4798      	blx	r3
			rfm95COM->Receive();
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f8d3 013c 	ldr.w	r0, [r3, #316]	; 0x13c
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	3304      	adds	r3, #4
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	4798      	blx	r3
			com.UpdateCom();
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8000988:	4618      	mov	r0, r3
 800098a:	f002 f97b 	bl	8002c84 <_ZN13Communication9UpdateComEv>
			//com.ReadData();
		}

		if (taskStatus.isIoUpdateTask())
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3320      	adds	r3, #32
 8000992:	4618      	mov	r0, r3
 8000994:	f003 fd69 	bl	800446a <_ZN11TaskHandler14isIoUpdateTaskEv>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d004      	beq.n	80009a8 <_ZN7AppMain4MainEv+0x90>
		{
			DigitalInOut.Read();
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	3374      	adds	r3, #116	; 0x74
 80009a2:	4618      	mov	r0, r3
 80009a4:	f001 fc04 	bl	80021b0 <_ZN14Digitll_IN_OUT4ReadEv>
		}

		if (taskStatus.isSaveTask())
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3320      	adds	r3, #32
 80009ac:	4618      	mov	r0, r3
 80009ae:	f003 fd26 	bl	80043fe <_ZN11TaskHandler10isSaveTaskEv>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d0b3      	beq.n	8000920 <_ZN7AppMain4MainEv+0x8>
		{
			if (this->driveSettings.isSaveSettings())
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3340      	adds	r3, #64	; 0x40
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 f9b6 	bl	8003d2e <_ZN13DriveSettings14isSaveSettingsEv>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d0ab      	beq.n	8000920 <_ZN7AppMain4MainEv+0x8>
			{
				Storage.SaveFlash();
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 fa14 	bl	8001dfc <_ZN5Flash9SaveFlashEv>
		if (taskStatus.isErrorTask())
 80009d4:	e7a4      	b.n	8000920 <_ZN7AppMain4MainEv+0x8>

080009d6 <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>:
#include "BaseCOM.h"
#include "../AppMain/Defines.h"
#include "../Tools/CRC8.h"
#include "../Tools/TypeConverter.h"

BaseCOM::BaseCOM(DriveStatus *driveStatus, DriveSettings *driveSettings,
 80009d6:	b480      	push	{r7}
 80009d8:	b085      	sub	sp, #20
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	603b      	str	r3, [r7, #0]
		DriveCommand *driveCommand)
{
	this->driveSettings = driveSettings;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	68ba      	ldr	r2, [r7, #8]
 80009ee:	605a      	str	r2, [r3, #4]
	this->driveCommand = driveCommand;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	683a      	ldr	r2, [r7, #0]
 80009f4:	609a      	str	r2, [r3, #8]
}
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	4618      	mov	r0, r3
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <_ZN7BaseCOM11GetSettingsEh>:


uint8_t* BaseCOM::GetSettings(uint8_t addr)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	70fb      	strb	r3, [r7, #3]

	data2send[0] = 0x1F;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	221f      	movs	r2, #31
 8000a14:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f003 f96c 	bl	8003cf8 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000a20:	4603      	mov	r3, r0
 8000a22:	461a      	mov	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_COMMAND;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2212      	movs	r2, #18
 8000a2c:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	78fa      	ldrb	r2, [r7, #3]
 8000a32:	73da      	strb	r2, [r3, #15]

	switch (addr)
 8000a34:	78fb      	ldrb	r3, [r7, #3]
 8000a36:	3b10      	subs	r3, #16
 8000a38:	2b10      	cmp	r3, #16
 8000a3a:	f200 80d3 	bhi.w	8000be4 <_ZN7BaseCOM11GetSettingsEh+0x1e0>
 8000a3e:	a201      	add	r2, pc, #4	; (adr r2, 8000a44 <_ZN7BaseCOM11GetSettingsEh+0x40>)
 8000a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a44:	08000a89 	.word	0x08000a89
 8000a48:	08000aa7 	.word	0x08000aa7
 8000a4c:	08000ac5 	.word	0x08000ac5
 8000a50:	08000ae3 	.word	0x08000ae3
 8000a54:	08000b01 	.word	0x08000b01
 8000a58:	08000b1f 	.word	0x08000b1f
 8000a5c:	08000b3b 	.word	0x08000b3b
 8000a60:	08000b59 	.word	0x08000b59
 8000a64:	08000b77 	.word	0x08000b77
 8000a68:	08000b95 	.word	0x08000b95
 8000a6c:	08000bb3 	.word	0x08000bb3
 8000a70:	08000be5 	.word	0x08000be5
 8000a74:	08000be5 	.word	0x08000be5
 8000a78:	08000be5 	.word	0x08000be5
 8000a7c:	08000be5 	.word	0x08000be5
 8000a80:	08000be5 	.word	0x08000be5
 8000a84:	08000bd1 	.word	0x08000bd1
	{
		case TEACH_TORQUE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getTeachTroque(), 4);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a92:	4618      	mov	r0, r3
 8000a94:	f003 f894 	bl	8003bc0 <_ZNK13DriveSettings14getTeachTroqueEv>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4620      	mov	r0, r4
 8000aa0:	f003 fdf2 	bl	8004688 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000aa4:	e0a2      	b.n	8000bec <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case TEACH_SPEED_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getTeachSpeed(), 4);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f003 f85e 	bl	8003b72 <_ZNK13DriveSettings13getTeachSpeedEv>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2204      	movs	r2, #4
 8000aba:	4619      	mov	r1, r3
 8000abc:	4620      	mov	r0, r4
 8000abe:	f003 fde3 	bl	8004688 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000ac2:	e093      	b.n	8000bec <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case CLAMPING_TORQUE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getClampingTorque(), 4);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 ff65 	bl	800399e <_ZNK13DriveSettings17getClampingTorqueEv>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4620      	mov	r0, r4
 8000adc:	f003 fdd4 	bl	8004688 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000ae0:	e084      	b.n	8000bec <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case CLAMPING_SPEED_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getClampingSpeed(), 4);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000aec:	4618      	mov	r0, r3
 8000aee:	f002 ff2f 	bl	8003950 <_ZNK13DriveSettings16getClampingSpeedEv>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2204      	movs	r2, #4
 8000af6:	4619      	mov	r1, r3
 8000af8:	4620      	mov	r0, r4
 8000afa:	f003 fdc5 	bl	8004688 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000afe:	e075      	b.n	8000bec <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case SELF_SHUTDOWN_DELAY_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getSelfShutdownDelay(), 4);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f003 f80a 	bl	8003b24 <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2204      	movs	r2, #4
 8000b14:	4619      	mov	r1, r3
 8000b16:	4620      	mov	r0, r4
 8000b18:	f003 fdb6 	bl	8004688 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b1c:	e066      	b.n	8000bec <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case IN_POS_DIFF_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getInPosDiff(), 4);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f002 ff5f 	bl	80039ec <_ZNK13DriveSettings12getInPosDiffEv>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2204      	movs	r2, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	4620      	mov	r0, r4
 8000b36:	f003 fda7 	bl	8004688 <_ZN13TypeConverter12uint16ToByteEPhth>
		case OPENING_DISTANCE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOpeningDistance(), 4);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000b44:	4618      	mov	r0, r3
 8000b46:	f002 ff78 	bl	8003a3a <_ZNK13DriveSettings18getOpeningDistanceEv>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4620      	mov	r0, r4
 8000b52:	f003 fd99 	bl	8004688 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b56:	e049      	b.n	8000bec <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case UNDERVOLTAGE_WARNING_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getUnderVoltageWarning(),4);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000b62:	4618      	mov	r0, r3
 8000b64:	f003 f87a 	bl	8003c5c <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2204      	movs	r2, #4
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4620      	mov	r0, r4
 8000b70:	f003 fd8a 	bl	8004688 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b74:	e03a      	b.n	8000bec <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case UNDERVOLTAGE_ERROR_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getUnderVoltageError(), 4);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000b80:	4618      	mov	r0, r3
 8000b82:	f003 f844 	bl	8003c0e <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2204      	movs	r2, #4
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	f003 fd7b 	bl	8004688 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b92:	e02b      	b.n	8000bec <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case OVER_CURRENT_WARNING_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOverCurrentWarning(), 4);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 ff99 	bl	8003ad6 <_ZNK13DriveSettings21getOverCurrentWarningEv>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4620      	mov	r0, r4
 8000bac:	f003 fd6c 	bl	8004688 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000bb0:	e01c      	b.n	8000bec <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case OVER_CURRENT_ERROR_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOverCurrentError(), 4);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f003 f874 	bl	8003caa <_ZNK13DriveSettings19getOverCurrentErrorEv>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4620      	mov	r0, r4
 8000bca:	f003 fd5d 	bl	8004688 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000bce:	e00d      	b.n	8000bec <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case DEVICE_ADDRESS_ADDR:
			data2send[4] = driveSettings->getDeviceAddress();
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f003 f88f 	bl	8003cf8 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	461a      	mov	r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	741a      	strb	r2, [r3, #16]
			break;
 8000be2:	e003      	b.n	8000bec <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		default:
			data2send[1] = 0x1D;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	221d      	movs	r2, #29
 8000be8:	735a      	strb	r2, [r3, #13]
			break;
 8000bea:	bf00      	nop
	}
	data2send[5] = CRC8(data2send, 5);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	330c      	adds	r3, #12
 8000bf0:	2205      	movs	r2, #5
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f000 fbcd 	bl	8001394 <_ZN7BaseCOM4CRC8EPhh>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	745a      	strb	r2, [r3, #17]
	return data2send;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	330c      	adds	r3, #12
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd90      	pop	{r4, r7, pc}
 8000c0e:	bf00      	nop

08000c10 <_ZN7BaseCOM9GetStatusEh>:


uint8_t* BaseCOM::GetStatus(uint8_t addr)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	70fb      	strb	r3, [r7, #3]

	data2send[0] = 0x1F;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	221f      	movs	r2, #31
 8000c20:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f003 f866 	bl	8003cf8 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	461a      	mov	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_STATUS;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2213      	movs	r2, #19
 8000c38:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	78fa      	ldrb	r2, [r7, #3]
 8000c3e:	73da      	strb	r2, [r3, #15]

	switch (addr)
 8000c40:	78fb      	ldrb	r3, [r7, #3]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	2b07      	cmp	r3, #7
 8000c46:	d863      	bhi.n	8000d10 <_ZN7BaseCOM9GetStatusEh+0x100>
 8000c48:	a201      	add	r2, pc, #4	; (adr r2, 8000c50 <_ZN7BaseCOM9GetStatusEh+0x40>)
 8000c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4e:	bf00      	nop
 8000c50:	08000c71 	.word	0x08000c71
 8000c54:	08000c85 	.word	0x08000c85
 8000c58:	08000c99 	.word	0x08000c99
 8000c5c:	08000cad 	.word	0x08000cad
 8000c60:	08000cc1 	.word	0x08000cc1
 8000c64:	08000cd5 	.word	0x08000cd5
 8000c68:	08000ce9 	.word	0x08000ce9
 8000c6c:	08000cfd 	.word	0x08000cfd
	{
		case CLOSE_ADDR:
			data2send[4] = driveStatus->isClose();
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f003 fa11 	bl	800409c <_ZN11DriveStatus7isCloseEv>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	741a      	strb	r2, [r3, #16]
			break;
 8000c82:	e049      	b.n	8000d18 <_ZN7BaseCOM9GetStatusEh+0x108>
		case OPEN_ADDR:
			data2send[4] = driveStatus->isOpen();
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f003 fa2a 	bl	80040e2 <_ZN11DriveStatus6isOpenEv>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	461a      	mov	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	741a      	strb	r2, [r3, #16]
			break;
 8000c96:	e03f      	b.n	8000d18 <_ZN7BaseCOM9GetStatusEh+0x108>
		case TEACH_ADDR:
			data2send[4] = driveStatus->isTeach();
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f003 fad9 	bl	8004254 <_ZN11DriveStatus7isTeachEv>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	741a      	strb	r2, [r3, #16]
			break;
 8000caa:	e035      	b.n	8000d18 <_ZN7BaseCOM9GetStatusEh+0x108>
		case RESET_ADDR:
			data2send[4] = driveStatus->isReset();
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f003 fa85 	bl	80041c0 <_ZN11DriveStatus7isResetEv>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	461a      	mov	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	741a      	strb	r2, [r3, #16]
			break;
 8000cbe:	e02b      	b.n	8000d18 <_ZN7BaseCOM9GetStatusEh+0x108>
		case ENABLE_ADDR:
			data2send[4] = driveStatus->isEnable();
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f003 fa56 	bl	8004176 <_ZN11DriveStatus8isEnableEv>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461a      	mov	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	741a      	strb	r2, [r3, #16]
			break;
 8000cd2:	e021      	b.n	8000d18 <_ZN7BaseCOM9GetStatusEh+0x108>
		case DISABLE_ADDR:
			data2send[4] = driveStatus->isDisable();
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 fa27 	bl	800412c <_ZN11DriveStatus9isDisableEv>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	741a      	strb	r2, [r3, #16]
			break;
 8000ce6:	e017      	b.n	8000d18 <_ZN7BaseCOM9GetStatusEh+0x108>
		case STOP_ADDR:
			data2send[4] = driveStatus->isStop();
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f003 fa8c 	bl	800420a <_ZN11DriveStatus6isStopEv>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	741a      	strb	r2, [r3, #16]
			break;
 8000cfa:	e00d      	b.n	8000d18 <_ZN7BaseCOM9GetStatusEh+0x108>
		case ERROR_ADDR:
			data2send[4] = driveStatus->getError();
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f003 facc 	bl	800429e <_ZN11DriveStatus8getErrorEv>
 8000d06:	4603      	mov	r3, r0
 8000d08:	461a      	mov	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	741a      	strb	r2, [r3, #16]
			break;
 8000d0e:	e003      	b.n	8000d18 <_ZN7BaseCOM9GetStatusEh+0x108>
		default:
			data2send[0] = 0x1D;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	221d      	movs	r2, #29
 8000d14:	731a      	strb	r2, [r3, #12]
			break;
 8000d16:	bf00      	nop
	}
	data2send[5] = CRC8(data2send, 5);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	330c      	adds	r3, #12
 8000d1c:	2205      	movs	r2, #5
 8000d1e:	4619      	mov	r1, r3
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f000 fb37 	bl	8001394 <_ZN7BaseCOM4CRC8EPhh>
 8000d26:	4603      	mov	r3, r0
 8000d28:	461a      	mov	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	745a      	strb	r2, [r3, #17]

	return data2send;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	330c      	adds	r3, #12
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop

08000d3c <_ZN7BaseCOM10GetCommandEh>:


uint8_t* BaseCOM::GetCommand(uint8_t addr)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	70fb      	strb	r3, [r7, #3]
	data2send[0] = 0x1F;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	221f      	movs	r2, #31
 8000d4c:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f002 ffd0 	bl	8003cf8 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_COMMAND;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2212      	movs	r2, #18
 8000d64:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	78fa      	ldrb	r2, [r7, #3]
 8000d6a:	73da      	strb	r2, [r3, #15]

	switch (addr)
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	2b06      	cmp	r3, #6
 8000d72:	d857      	bhi.n	8000e24 <_ZN7BaseCOM10GetCommandEh+0xe8>
 8000d74:	a201      	add	r2, pc, #4	; (adr r2, 8000d7c <_ZN7BaseCOM10GetCommandEh+0x40>)
 8000d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7a:	bf00      	nop
 8000d7c:	08000d99 	.word	0x08000d99
 8000d80:	08000dad 	.word	0x08000dad
 8000d84:	08000dc1 	.word	0x08000dc1
 8000d88:	08000dd5 	.word	0x08000dd5
 8000d8c:	08000de9 	.word	0x08000de9
 8000d90:	08000dfd 	.word	0x08000dfd
 8000d94:	08000e11 	.word	0x08000e11
	{
		case CLOSE_ADDR:
			data2send[4] = driveCommand->isClose();
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f003 f844 	bl	8003e2a <_ZN12DriveCommand7isCloseEv>
 8000da2:	4603      	mov	r3, r0
 8000da4:	461a      	mov	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	741a      	strb	r2, [r3, #16]
			break;
 8000daa:	e03f      	b.n	8000e2c <_ZN7BaseCOM10GetCommandEh+0xf0>
		case OPEN_ADDR:
			data2send[4] = driveCommand->isOpen();
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f003 f85a 	bl	8003e6a <_ZN12DriveCommand6isOpenEv>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	741a      	strb	r2, [r3, #16]
			break;
 8000dbe:	e035      	b.n	8000e2c <_ZN7BaseCOM10GetCommandEh+0xf0>
		case TEACH_ADDR:
			data2send[4] = driveCommand->isTeach();
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f003 f8f0 	bl	8003faa <_ZN12DriveCommand7isTeachEv>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	741a      	strb	r2, [r3, #16]
			break;
 8000dd2:	e02b      	b.n	8000e2c <_ZN7BaseCOM10GetCommandEh+0xf0>
		case RESET_ADDR:
			data2send[4] = driveCommand->isReset();
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f003 f8a6 	bl	8003f2a <_ZN12DriveCommand7isResetEv>
 8000dde:	4603      	mov	r3, r0
 8000de0:	461a      	mov	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	741a      	strb	r2, [r3, #16]
			break;
 8000de6:	e021      	b.n	8000e2c <_ZN7BaseCOM10GetCommandEh+0xf0>
		case ENABLE_ADDR:
			data2send[4] = driveCommand->isEnable();
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 f87c 	bl	8003eea <_ZN12DriveCommand8isEnableEv>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	741a      	strb	r2, [r3, #16]
			break;
 8000dfa:	e017      	b.n	8000e2c <_ZN7BaseCOM10GetCommandEh+0xf0>
		case DISABLE_ADDR:
			data2send[4] = driveCommand->isDisable();
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f003 f852 	bl	8003eaa <_ZN12DriveCommand9isDisableEv>
 8000e06:	4603      	mov	r3, r0
 8000e08:	461a      	mov	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	741a      	strb	r2, [r3, #16]
			break;
 8000e0e:	e00d      	b.n	8000e2c <_ZN7BaseCOM10GetCommandEh+0xf0>
		case STOP_ADDR:
			data2send[4] = driveCommand->isStop();
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f003 f8a8 	bl	8003f6a <_ZN12DriveCommand6isStopEv>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	741a      	strb	r2, [r3, #16]
			break;
 8000e22:	e003      	b.n	8000e2c <_ZN7BaseCOM10GetCommandEh+0xf0>
		default:
			data2send[0] = 0x1D;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	221d      	movs	r2, #29
 8000e28:	731a      	strb	r2, [r3, #12]
			break;
 8000e2a:	bf00      	nop
	}
	data2send[5] = CRC8(data2send, 5);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	330c      	adds	r3, #12
 8000e30:	2205      	movs	r2, #5
 8000e32:	4619      	mov	r1, r3
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 faad 	bl	8001394 <_ZN7BaseCOM4CRC8EPhh>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	745a      	strb	r2, [r3, #17]

	return data2send;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	330c      	adds	r3, #12
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop

08000e50 <_ZN7BaseCOM11SetSettingsEPh>:



void BaseCOM::SetSettings(uint8_t *data)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[5] = crc

	uint16_t value = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	81fb      	strh	r3, [r7, #14]
	switch (data[3])
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	3303      	adds	r3, #3
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	3b10      	subs	r3, #16
 8000e66:	2b45      	cmp	r3, #69	; 0x45
 8000e68:	f200 817b 	bhi.w	8001162 <_ZN7BaseCOM11SetSettingsEPh+0x312>
 8000e6c:	a201      	add	r2, pc, #4	; (adr r2, 8000e74 <_ZN7BaseCOM11SetSettingsEPh+0x24>)
 8000e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e72:	bf00      	nop
 8000e74:	08000f8d 	.word	0x08000f8d
 8000e78:	08000fb5 	.word	0x08000fb5
 8000e7c:	08000fdd 	.word	0x08000fdd
 8000e80:	08001005 	.word	0x08001005
 8000e84:	080010cd 	.word	0x080010cd
 8000e88:	0800102d 	.word	0x0800102d
 8000e8c:	08001055 	.word	0x08001055
 8000e90:	080010f5 	.word	0x080010f5
 8000e94:	0800111d 	.word	0x0800111d
 8000e98:	0800107d 	.word	0x0800107d
 8000e9c:	080010a5 	.word	0x080010a5
 8000ea0:	08001163 	.word	0x08001163
 8000ea4:	08001163 	.word	0x08001163
 8000ea8:	08001163 	.word	0x08001163
 8000eac:	08001163 	.word	0x08001163
 8000eb0:	08001163 	.word	0x08001163
 8000eb4:	08001163 	.word	0x08001163
 8000eb8:	08001163 	.word	0x08001163
 8000ebc:	08001163 	.word	0x08001163
 8000ec0:	08001163 	.word	0x08001163
 8000ec4:	08001163 	.word	0x08001163
 8000ec8:	08001163 	.word	0x08001163
 8000ecc:	08001163 	.word	0x08001163
 8000ed0:	08001163 	.word	0x08001163
 8000ed4:	08001163 	.word	0x08001163
 8000ed8:	08001163 	.word	0x08001163
 8000edc:	08001163 	.word	0x08001163
 8000ee0:	08001163 	.word	0x08001163
 8000ee4:	08001163 	.word	0x08001163
 8000ee8:	08001163 	.word	0x08001163
 8000eec:	08001163 	.word	0x08001163
 8000ef0:	08001163 	.word	0x08001163
 8000ef4:	08001163 	.word	0x08001163
 8000ef8:	08001163 	.word	0x08001163
 8000efc:	08001163 	.word	0x08001163
 8000f00:	08001163 	.word	0x08001163
 8000f04:	08001163 	.word	0x08001163
 8000f08:	08001163 	.word	0x08001163
 8000f0c:	08001163 	.word	0x08001163
 8000f10:	08001163 	.word	0x08001163
 8000f14:	08001163 	.word	0x08001163
 8000f18:	08001163 	.word	0x08001163
 8000f1c:	08001163 	.word	0x08001163
 8000f20:	08001163 	.word	0x08001163
 8000f24:	08001163 	.word	0x08001163
 8000f28:	08001163 	.word	0x08001163
 8000f2c:	08001163 	.word	0x08001163
 8000f30:	08001163 	.word	0x08001163
 8000f34:	08001163 	.word	0x08001163
 8000f38:	08001163 	.word	0x08001163
 8000f3c:	08001163 	.word	0x08001163
 8000f40:	08001163 	.word	0x08001163
 8000f44:	08001163 	.word	0x08001163
 8000f48:	08001163 	.word	0x08001163
 8000f4c:	08001163 	.word	0x08001163
 8000f50:	08001163 	.word	0x08001163
 8000f54:	08001163 	.word	0x08001163
 8000f58:	08001163 	.word	0x08001163
 8000f5c:	08001163 	.word	0x08001163
 8000f60:	08001163 	.word	0x08001163
 8000f64:	08001163 	.word	0x08001163
 8000f68:	08001163 	.word	0x08001163
 8000f6c:	08001163 	.word	0x08001163
 8000f70:	08001163 	.word	0x08001163
 8000f74:	08001163 	.word	0x08001163
 8000f78:	08001163 	.word	0x08001163
 8000f7c:	08001163 	.word	0x08001163
 8000f80:	08001163 	.word	0x08001163
 8000f84:	08001163 	.word	0x08001163
 8000f88:	08001145 	.word	0x08001145
	{
		case TEACH_TORQUE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	3305      	adds	r3, #5
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	01db      	lsls	r3, r3, #7
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	81fb      	strh	r3, [r7, #14]
			driveSettings->setTeachTroque(value);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	89fa      	ldrh	r2, [r7, #14]
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f002 fe13 	bl	8003bd8 <_ZN13DriveSettings14setTeachTroqueEt>
			break;
 8000fb2:	e0d7      	b.n	8001164 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case TEACH_SPEED_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	3305      	adds	r3, #5
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	01db      	lsls	r3, r3, #7
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	81fb      	strh	r3, [r7, #14]
			driveSettings->setTeachSpeed(value);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	89fa      	ldrh	r2, [r7, #14]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f002 fdd8 	bl	8003b8a <_ZN13DriveSettings13setTeachSpeedEt>
			break;
 8000fda:	e0c3      	b.n	8001164 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case CLAMPING_TORQUE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	3305      	adds	r3, #5
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	01db      	lsls	r3, r3, #7
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	81fb      	strh	r3, [r7, #14]
			driveSettings->setClampingTorque(value);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	89fa      	ldrh	r2, [r7, #14]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f002 fcda 	bl	80039b6 <_ZN13DriveSettings17setClampingTorqueEt>
			break;
 8001002:	e0af      	b.n	8001164 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case CLAMPING_SPEED_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	3305      	adds	r3, #5
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	01db      	lsls	r3, r3, #7
 800100c:	b21a      	sxth	r2, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	3304      	adds	r3, #4
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b21b      	sxth	r3, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	b21b      	sxth	r3, r3
 800101a:	81fb      	strh	r3, [r7, #14]
			driveSettings->setClampingSpeed(value);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	89fa      	ldrh	r2, [r7, #14]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f002 fc9f 	bl	8003968 <_ZN13DriveSettings16setClampingSpeedEt>
			break;
 800102a:	e09b      	b.n	8001164 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case IN_POS_DIFF_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	3305      	adds	r3, #5
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	01db      	lsls	r3, r3, #7
 8001034:	b21a      	sxth	r2, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	3304      	adds	r3, #4
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21b      	sxth	r3, r3
 8001042:	81fb      	strh	r3, [r7, #14]
			driveSettings->setInPosDiff(value);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	89fa      	ldrh	r2, [r7, #14]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f002 fcd9 	bl	8003a04 <_ZN13DriveSettings12setInPosDiffEt>
			break;
 8001052:	e087      	b.n	8001164 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case OPENING_DISTANCE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	3305      	adds	r3, #5
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	01db      	lsls	r3, r3, #7
 800105c:	b21a      	sxth	r2, r3
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	3304      	adds	r3, #4
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21b      	sxth	r3, r3
 800106a:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOpeningDistance(value);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	89fa      	ldrh	r2, [r7, #14]
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f002 fcec 	bl	8003a52 <_ZN13DriveSettings18setOpeningDistanceEt>
			break;
 800107a:	e073      	b.n	8001164 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case OVER_CURRENT_WARNING_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	3305      	adds	r3, #5
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	01db      	lsls	r3, r3, #7
 8001084:	b21a      	sxth	r2, r3
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	3304      	adds	r3, #4
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21b      	sxth	r3, r3
 8001092:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOverCurrentWarning(value);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	89fa      	ldrh	r2, [r7, #14]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f002 fd26 	bl	8003aee <_ZN13DriveSettings21setOverCurrentWarningEt>
			break;
 80010a2:	e05f      	b.n	8001164 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case OVER_CURRENT_ERROR_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	3305      	adds	r3, #5
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	01db      	lsls	r3, r3, #7
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	3304      	adds	r3, #4
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOverCurrentError(value);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	89fa      	ldrh	r2, [r7, #14]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f002 fdfc 	bl	8003cc2 <_ZN13DriveSettings19setOverCurrentErrorEt>
			break;
 80010ca:	e04b      	b.n	8001164 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case SELF_SHUTDOWN_DELAY_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	3305      	adds	r3, #5
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	01db      	lsls	r3, r3, #7
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	3304      	adds	r3, #4
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	81fb      	strh	r3, [r7, #14]
			driveSettings->setSelfShutdownDelay(value);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	89fa      	ldrh	r2, [r7, #14]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f002 fd25 	bl	8003b3c <_ZN13DriveSettings20setSelfShutdownDelayEt>
			break;
 80010f2:	e037      	b.n	8001164 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case UNDERVOLTAGE_WARNING_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	3305      	adds	r3, #5
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	01db      	lsls	r3, r3, #7
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	3304      	adds	r3, #4
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b21b      	sxth	r3, r3
 8001106:	4313      	orrs	r3, r2
 8001108:	b21b      	sxth	r3, r3
 800110a:	81fb      	strh	r3, [r7, #14]
			driveSettings->setUnderVoltageWarning(value);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	89fa      	ldrh	r2, [r7, #14]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f002 fdad 	bl	8003c74 <_ZN13DriveSettings22setUnderVoltageWarningEt>
			break;
 800111a:	e023      	b.n	8001164 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case UNDERVOLTAGE_ERROR_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	3305      	adds	r3, #5
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	01db      	lsls	r3, r3, #7
 8001124:	b21a      	sxth	r2, r3
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	3304      	adds	r3, #4
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b21b      	sxth	r3, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	b21b      	sxth	r3, r3
 8001132:	81fb      	strh	r3, [r7, #14]
			driveSettings->setUnderVoltageError(value);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	89fa      	ldrh	r2, [r7, #14]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f002 fd72 	bl	8003c26 <_ZN13DriveSettings20setUnderVoltageErrorEt>
			break;
 8001142:	e00f      	b.n	8001164 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case SAVE_SETTINGS_ADDR:
			driveSettings->setSaveSettings(data[4] != 0);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	3304      	adds	r3, #4
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	bf14      	ite	ne
 8001152:	2301      	movne	r3, #1
 8001154:	2300      	moveq	r3, #0
 8001156:	b2db      	uxtb	r3, r3
 8001158:	4619      	mov	r1, r3
 800115a:	4610      	mov	r0, r2
 800115c:	f002 fdf8 	bl	8003d50 <_ZN13DriveSettings15setSaveSettingsEb>
			break;
 8001160:	e000      	b.n	8001164 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		default:
			break;
 8001162:	bf00      	nop
	}
}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <_ZN7BaseCOM9SetStatusEPh>:

void BaseCOM::SetStatus(uint8_t *data)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[5] = crc

	switch (data[3])
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	3303      	adds	r3, #3
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	3b01      	subs	r3, #1
 800117e:	2b06      	cmp	r3, #6
 8001180:	d879      	bhi.n	8001276 <_ZN7BaseCOM9SetStatusEPh+0x10a>
 8001182:	a201      	add	r2, pc, #4	; (adr r2, 8001188 <_ZN7BaseCOM9SetStatusEPh+0x1c>)
 8001184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001188:	080011a5 	.word	0x080011a5
 800118c:	080011c3 	.word	0x080011c3
 8001190:	080011e1 	.word	0x080011e1
 8001194:	080011ff 	.word	0x080011ff
 8001198:	0800121d 	.word	0x0800121d
 800119c:	0800123b 	.word	0x0800123b
 80011a0:	08001259 	.word	0x08001259
	{
		case CLOSE_ADDR:
			driveStatus->setClose(data[4] == 0x01);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	3304      	adds	r3, #4
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	bf0c      	ite	eq
 80011b2:	2301      	moveq	r3, #1
 80011b4:	2300      	movne	r3, #0
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	4619      	mov	r1, r3
 80011ba:	4610      	mov	r0, r2
 80011bc:	f002 ff7a 	bl	80040b4 <_ZN11DriveStatus8setCloseEb>
			break;
 80011c0:	e05a      	b.n	8001278 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case OPEN_ADDR:
			driveStatus->setOpen(data[4] == 0x01);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	3304      	adds	r3, #4
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	bf0c      	ite	eq
 80011d0:	2301      	moveq	r3, #1
 80011d2:	2300      	movne	r3, #0
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	4619      	mov	r1, r3
 80011d8:	4610      	mov	r0, r2
 80011da:	f002 ff8e 	bl	80040fa <_ZN11DriveStatus7setOpenEb>
			break;
 80011de:	e04b      	b.n	8001278 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case TEACH_ADDR:
			driveStatus->setTeach(data[4] == 0x01);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	3304      	adds	r3, #4
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	bf0c      	ite	eq
 80011ee:	2301      	moveq	r3, #1
 80011f0:	2300      	movne	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	4619      	mov	r1, r3
 80011f6:	4610      	mov	r0, r2
 80011f8:	f003 f838 	bl	800426c <_ZN11DriveStatus8setTeachEb>
			break;
 80011fc:	e03c      	b.n	8001278 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case RESET_ADDR:
			driveStatus->setReset(data[4] == 0x01);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	3304      	adds	r3, #4
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b01      	cmp	r3, #1
 800120a:	bf0c      	ite	eq
 800120c:	2301      	moveq	r3, #1
 800120e:	2300      	movne	r3, #0
 8001210:	b2db      	uxtb	r3, r3
 8001212:	4619      	mov	r1, r3
 8001214:	4610      	mov	r0, r2
 8001216:	f002 ffdf 	bl	80041d8 <_ZN11DriveStatus8setResetEb>
			break;
 800121a:	e02d      	b.n	8001278 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case ENABLE_ADDR:
			driveStatus->setEnable(data[4] == 0x01);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	3304      	adds	r3, #4
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b01      	cmp	r3, #1
 8001228:	bf0c      	ite	eq
 800122a:	2301      	moveq	r3, #1
 800122c:	2300      	movne	r3, #0
 800122e:	b2db      	uxtb	r3, r3
 8001230:	4619      	mov	r1, r3
 8001232:	4610      	mov	r0, r2
 8001234:	f002 ffab 	bl	800418e <_ZN11DriveStatus9setEnableEb>
			break;
 8001238:	e01e      	b.n	8001278 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case DISABLE_ADDR:
			driveStatus->setDisable(data[4] == 0x01);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	3304      	adds	r3, #4
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b01      	cmp	r3, #1
 8001246:	bf0c      	ite	eq
 8001248:	2301      	moveq	r3, #1
 800124a:	2300      	movne	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	4619      	mov	r1, r3
 8001250:	4610      	mov	r0, r2
 8001252:	f002 ff77 	bl	8004144 <_ZN11DriveStatus10setDisableEb>
			break;
 8001256:	e00f      	b.n	8001278 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case STOP_ADDR:
			driveStatus->setStop(data[4] == 0x01);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	3304      	adds	r3, #4
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b01      	cmp	r3, #1
 8001264:	bf0c      	ite	eq
 8001266:	2301      	moveq	r3, #1
 8001268:	2300      	movne	r3, #0
 800126a:	b2db      	uxtb	r3, r3
 800126c:	4619      	mov	r1, r3
 800126e:	4610      	mov	r0, r2
 8001270:	f002 ffd7 	bl	8004222 <_ZN11DriveStatus7setStopEb>
			break;
 8001274:	e000      	b.n	8001278 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		default:
			break;
 8001276:	bf00      	nop
	}
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <_ZN7BaseCOM10SetCommandEPh>:

void BaseCOM::SetCommand(uint8_t *data)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[5] = crc

	switch (data[3])
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	3303      	adds	r3, #3
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	3b01      	subs	r3, #1
 8001292:	2b06      	cmp	r3, #6
 8001294:	d879      	bhi.n	800138a <_ZN7BaseCOM10SetCommandEPh+0x10a>
 8001296:	a201      	add	r2, pc, #4	; (adr r2, 800129c <_ZN7BaseCOM10SetCommandEPh+0x1c>)
 8001298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129c:	080012b9 	.word	0x080012b9
 80012a0:	080012d7 	.word	0x080012d7
 80012a4:	080012f5 	.word	0x080012f5
 80012a8:	08001313 	.word	0x08001313
 80012ac:	08001331 	.word	0x08001331
 80012b0:	0800134f 	.word	0x0800134f
 80012b4:	0800136d 	.word	0x0800136d
	{
		case CLOSE_ADDR:
			driveCommand->setClose(data[4] == 0x01);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	3304      	adds	r3, #4
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	bf0c      	ite	eq
 80012c6:	2301      	moveq	r3, #1
 80012c8:	2300      	movne	r3, #0
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	4619      	mov	r1, r3
 80012ce:	4610      	mov	r0, r2
 80012d0:	f002 fdbc 	bl	8003e4c <_ZN12DriveCommand8setCloseEb>
			break;
 80012d4:	e05a      	b.n	800138c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case OPEN_ADDR:
			driveCommand->setOpen(data[4] == 0x01);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	3304      	adds	r3, #4
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	bf0c      	ite	eq
 80012e4:	2301      	moveq	r3, #1
 80012e6:	2300      	movne	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4619      	mov	r1, r3
 80012ec:	4610      	mov	r0, r2
 80012ee:	f002 fdcd 	bl	8003e8c <_ZN12DriveCommand7setOpenEb>
			break;
 80012f2:	e04b      	b.n	800138c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case TEACH_ADDR:
			driveCommand->setTeach(data[4] == 0x01);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	3304      	adds	r3, #4
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	bf0c      	ite	eq
 8001302:	2301      	moveq	r3, #1
 8001304:	2300      	movne	r3, #0
 8001306:	b2db      	uxtb	r3, r3
 8001308:	4619      	mov	r1, r3
 800130a:	4610      	mov	r0, r2
 800130c:	f002 fe5e 	bl	8003fcc <_ZN12DriveCommand8setTeachEb>
			break;
 8001310:	e03c      	b.n	800138c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case RESET_ADDR:
			driveCommand->setReset(data[4] == 0x01);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	3304      	adds	r3, #4
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b01      	cmp	r3, #1
 800131e:	bf0c      	ite	eq
 8001320:	2301      	moveq	r3, #1
 8001322:	2300      	movne	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	4619      	mov	r1, r3
 8001328:	4610      	mov	r0, r2
 800132a:	f002 fe0f 	bl	8003f4c <_ZN12DriveCommand8setResetEb>
			break;
 800132e:	e02d      	b.n	800138c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case ENABLE_ADDR:
			driveCommand->setEnable(data[4] == 0x01);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	3304      	adds	r3, #4
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b01      	cmp	r3, #1
 800133c:	bf0c      	ite	eq
 800133e:	2301      	moveq	r3, #1
 8001340:	2300      	movne	r3, #0
 8001342:	b2db      	uxtb	r3, r3
 8001344:	4619      	mov	r1, r3
 8001346:	4610      	mov	r0, r2
 8001348:	f002 fde0 	bl	8003f0c <_ZN12DriveCommand9setEnableEb>
			break;
 800134c:	e01e      	b.n	800138c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case DISABLE_ADDR:
			driveCommand->setDisable(data[4] == 0x01);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	3304      	adds	r3, #4
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b01      	cmp	r3, #1
 800135a:	bf0c      	ite	eq
 800135c:	2301      	moveq	r3, #1
 800135e:	2300      	movne	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	4619      	mov	r1, r3
 8001364:	4610      	mov	r0, r2
 8001366:	f002 fdb1 	bl	8003ecc <_ZN12DriveCommand10setDisableEb>
			break;
 800136a:	e00f      	b.n	800138c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case STOP_ADDR:
			driveCommand->setStop(data[4] == 0x01);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	3304      	adds	r3, #4
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b01      	cmp	r3, #1
 8001378:	bf0c      	ite	eq
 800137a:	2301      	moveq	r3, #1
 800137c:	2300      	movne	r3, #0
 800137e:	b2db      	uxtb	r3, r3
 8001380:	4619      	mov	r1, r3
 8001382:	4610      	mov	r0, r2
 8001384:	f002 fe02 	bl	8003f8c <_ZN12DriveCommand7setStopEb>
			break;
 8001388:	e000      	b.n	800138c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		default:
			break;
 800138a:	bf00      	nop
	}
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <_ZN7BaseCOM4CRC8EPhh>:




uint8_t BaseCOM::CRC8(uint8_t *data, uint8_t length)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	4613      	mov	r3, r2
 80013a0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0xff;
 80013a2:	23ff      	movs	r3, #255	; 0xff
 80013a4:	77fb      	strb	r3, [r7, #31]
	size_t i, j;
	for (i = 0; i < length; i++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d222      	bcs.n	80013f8 <_ZN7BaseCOM4CRC8EPhh+0x64>
	{
		crc ^= data[i];
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	4413      	add	r3, r2
 80013b8:	781a      	ldrb	r2, [r3, #0]
 80013ba:	7ffb      	ldrb	r3, [r7, #31]
 80013bc:	4053      	eors	r3, r2
 80013be:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	2b07      	cmp	r3, #7
 80013c8:	d812      	bhi.n	80013f0 <_ZN7BaseCOM4CRC8EPhh+0x5c>
		{
			if ((crc & 0x80) != 0)
 80013ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	da07      	bge.n	80013e2 <_ZN7BaseCOM4CRC8EPhh+0x4e>
				crc = (uint8_t) ((crc << 1) ^ 0x31);
 80013d2:	7ffb      	ldrb	r3, [r7, #31]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	b25b      	sxtb	r3, r3
 80013d8:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	77fb      	strb	r3, [r7, #31]
 80013e0:	e002      	b.n	80013e8 <_ZN7BaseCOM4CRC8EPhh+0x54>
			else
				crc <<= 1;
 80013e2:	7ffb      	ldrb	r3, [r7, #31]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3301      	adds	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	e7e9      	b.n	80013c4 <_ZN7BaseCOM4CRC8EPhh+0x30>
	for (i = 0; i < length; i++)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	3301      	adds	r3, #1
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	e7d8      	b.n	80013aa <_ZN7BaseCOM4CRC8EPhh+0x16>
		}
	}
	return crc;
 80013f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3724      	adds	r7, #36	; 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <_ZN5IOCom9TransmittEPhh>:

#include "IOCom.h"
#include "../AppMain/Defines.h"

bool IOCom::Transmitt(uint8_t *data, uint8_t length)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b084      	sub	sp, #16
 800140a:	af00      	add	r7, sp, #0
 800140c:	60f8      	str	r0, [r7, #12]
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	4613      	mov	r3, r2
 8001412:	71fb      	strb	r3, [r7, #7]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[5] = crc

	this->driveStatus->isEnable() == true ? Out1.Set() : Out1.Reset();
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800141a:	4618      	mov	r0, r3
 800141c:	f002 feab 	bl	8004176 <_ZN11DriveStatus8isEnableEv>
 8001420:	4603      	mov	r3, r0
 8001422:	2b01      	cmp	r3, #1
 8001424:	d105      	bne.n	8001432 <_ZN5IOCom9TransmittEPhh+0x2c>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	3318      	adds	r3, #24
 800142a:	4618      	mov	r0, r3
 800142c:	f001 fb83 	bl	8002b36 <_ZN10DigitalOut3SetEv>
 8001430:	e004      	b.n	800143c <_ZN5IOCom9TransmittEPhh+0x36>
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	3318      	adds	r3, #24
 8001436:	4618      	mov	r0, r3
 8001438:	f001 fb9b 	bl	8002b72 <_ZN10DigitalOut5ResetEv>
	this->driveStatus->isOpen() == true ? Out2.Set() : Out2.Reset();
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001442:	4618      	mov	r0, r3
 8001444:	f002 fe4d 	bl	80040e2 <_ZN11DriveStatus6isOpenEv>
 8001448:	4603      	mov	r3, r0
 800144a:	2b01      	cmp	r3, #1
 800144c:	d105      	bne.n	800145a <_ZN5IOCom9TransmittEPhh+0x54>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	3328      	adds	r3, #40	; 0x28
 8001452:	4618      	mov	r0, r3
 8001454:	f001 fb6f 	bl	8002b36 <_ZN10DigitalOut3SetEv>
 8001458:	e004      	b.n	8001464 <_ZN5IOCom9TransmittEPhh+0x5e>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3328      	adds	r3, #40	; 0x28
 800145e:	4618      	mov	r0, r3
 8001460:	f001 fb87 	bl	8002b72 <_ZN10DigitalOut5ResetEv>
	this->driveStatus->isClose() == true ? Out3.Set() : Out3.Reset();
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800146a:	4618      	mov	r0, r3
 800146c:	f002 fe16 	bl	800409c <_ZN11DriveStatus7isCloseEv>
 8001470:	4603      	mov	r3, r0
 8001472:	2b01      	cmp	r3, #1
 8001474:	d105      	bne.n	8001482 <_ZN5IOCom9TransmittEPhh+0x7c>
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	3338      	adds	r3, #56	; 0x38
 800147a:	4618      	mov	r0, r3
 800147c:	f001 fb5b 	bl	8002b36 <_ZN10DigitalOut3SetEv>
 8001480:	e004      	b.n	800148c <_ZN5IOCom9TransmittEPhh+0x86>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	3338      	adds	r3, #56	; 0x38
 8001486:	4618      	mov	r0, r3
 8001488:	f001 fb73 	bl	8002b72 <_ZN10DigitalOut5ResetEv>
	this->driveStatus->isStop() == true ? Out4.Set() : Out4.Reset();
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001492:	4618      	mov	r0, r3
 8001494:	f002 feb9 	bl	800420a <_ZN11DriveStatus6isStopEv>
 8001498:	4603      	mov	r3, r0
 800149a:	2b01      	cmp	r3, #1
 800149c:	d105      	bne.n	80014aa <_ZN5IOCom9TransmittEPhh+0xa4>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3348      	adds	r3, #72	; 0x48
 80014a2:	4618      	mov	r0, r3
 80014a4:	f001 fb47 	bl	8002b36 <_ZN10DigitalOut3SetEv>
 80014a8:	e004      	b.n	80014b4 <_ZN5IOCom9TransmittEPhh+0xae>
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3348      	adds	r3, #72	; 0x48
 80014ae:	4618      	mov	r0, r3
 80014b0:	f001 fb5f 	bl	8002b72 <_ZN10DigitalOut5ResetEv>
	this->driveStatus->isTeach() == true ? Out5.Set() : Out5.Reset();
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f002 feca 	bl	8004254 <_ZN11DriveStatus7isTeachEv>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d105      	bne.n	80014d2 <_ZN5IOCom9TransmittEPhh+0xcc>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3358      	adds	r3, #88	; 0x58
 80014ca:	4618      	mov	r0, r3
 80014cc:	f001 fb33 	bl	8002b36 <_ZN10DigitalOut3SetEv>
 80014d0:	e004      	b.n	80014dc <_ZN5IOCom9TransmittEPhh+0xd6>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	3358      	adds	r3, #88	; 0x58
 80014d6:	4618      	mov	r0, r3
 80014d8:	f001 fb4b 	bl	8002b72 <_ZN10DigitalOut5ResetEv>

	return true;
 80014dc:	2301      	movs	r3, #1
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <_ZN5IOCom7ReceiveEPhh>:

bool IOCom::Receive(uint8_t *data, uint8_t length)
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b087      	sub	sp, #28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	4613      	mov	r3, r2
 80014f4:	71fb      	strb	r3, [r7, #7]
	configeWriteStatus = CONFIG_WRITE;
 80014f6:	2102      	movs	r1, #2
 80014f8:	4854      	ldr	r0, [pc, #336]	; (800164c <_ZN5IOCom7ReceiveEPhh+0x164>)
 80014fa:	f005 fefb 	bl	80072f4 <HAL_GPIO_ReadPin>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b01      	cmp	r3, #1
 8001502:	bf0c      	ite	eq
 8001504:	2301      	moveq	r3, #1
 8001506:	2300      	movne	r3, #0
 8001508:	b2da      	uxtb	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

	if (configeWriteStatus && !previousConfigeWriteStatus)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 8092 	beq.w	8001640 <_ZN5IOCom7ReceiveEPhh+0x158>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8001522:	f083 0301 	eor.w	r3, r3, #1
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 8089 	beq.w	8001640 <_ZN5IOCom7ReceiveEPhh+0x158>
	{
		//read digial config
		uint8_t data = ((uint8_t) CONFIG_ADDR_7 << 7)
 800152e:	2104      	movs	r1, #4
 8001530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001534:	f005 fede 	bl	80072f4 <HAL_GPIO_ReadPin>
 8001538:	4603      	mov	r3, r0
 800153a:	2b80      	cmp	r3, #128	; 0x80
 800153c:	bf0c      	ite	eq
 800153e:	2301      	moveq	r3, #1
 8001540:	2300      	movne	r3, #0
 8001542:	b2db      	uxtb	r3, r3
 8001544:	461c      	mov	r4, r3
				+ (((uint8_t) CONFIG_ADDR_6) << 6)
 8001546:	2102      	movs	r1, #2
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f005 fed2 	bl	80072f4 <HAL_GPIO_ReadPin>
 8001550:	4603      	mov	r3, r0
 8001552:	2b01      	cmp	r3, #1
 8001554:	d101      	bne.n	800155a <_ZN5IOCom7ReceiveEPhh+0x72>
 8001556:	2340      	movs	r3, #64	; 0x40
 8001558:	e000      	b.n	800155c <_ZN5IOCom7ReceiveEPhh+0x74>
 800155a:	2300      	movs	r3, #0
 800155c:	4423      	add	r3, r4
 800155e:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_5) << 5)
 8001560:	2101      	movs	r1, #1
 8001562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001566:	f005 fec5 	bl	80072f4 <HAL_GPIO_ReadPin>
 800156a:	4603      	mov	r3, r0
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <_ZN5IOCom7ReceiveEPhh+0x8c>
 8001570:	2320      	movs	r3, #32
 8001572:	e000      	b.n	8001576 <_ZN5IOCom7ReceiveEPhh+0x8e>
 8001574:	2300      	movs	r3, #0
 8001576:	4423      	add	r3, r4
 8001578:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_4) << 4)
 800157a:	2108      	movs	r1, #8
 800157c:	4834      	ldr	r0, [pc, #208]	; (8001650 <_ZN5IOCom7ReceiveEPhh+0x168>)
 800157e:	f005 feb9 	bl	80072f4 <HAL_GPIO_ReadPin>
 8001582:	4603      	mov	r3, r0
 8001584:	2b01      	cmp	r3, #1
 8001586:	d101      	bne.n	800158c <_ZN5IOCom7ReceiveEPhh+0xa4>
 8001588:	2310      	movs	r3, #16
 800158a:	e000      	b.n	800158e <_ZN5IOCom7ReceiveEPhh+0xa6>
 800158c:	2300      	movs	r3, #0
 800158e:	4423      	add	r3, r4
 8001590:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_3) << 3)
 8001592:	2104      	movs	r1, #4
 8001594:	482e      	ldr	r0, [pc, #184]	; (8001650 <_ZN5IOCom7ReceiveEPhh+0x168>)
 8001596:	f005 fead 	bl	80072f4 <HAL_GPIO_ReadPin>
 800159a:	4603      	mov	r3, r0
 800159c:	2b01      	cmp	r3, #1
 800159e:	d101      	bne.n	80015a4 <_ZN5IOCom7ReceiveEPhh+0xbc>
 80015a0:	2308      	movs	r3, #8
 80015a2:	e000      	b.n	80015a6 <_ZN5IOCom7ReceiveEPhh+0xbe>
 80015a4:	2300      	movs	r3, #0
 80015a6:	4423      	add	r3, r4
 80015a8:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_2) << 2)
 80015aa:	2102      	movs	r1, #2
 80015ac:	4828      	ldr	r0, [pc, #160]	; (8001650 <_ZN5IOCom7ReceiveEPhh+0x168>)
 80015ae:	f005 fea1 	bl	80072f4 <HAL_GPIO_ReadPin>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <_ZN5IOCom7ReceiveEPhh+0xd4>
 80015b8:	2304      	movs	r3, #4
 80015ba:	e000      	b.n	80015be <_ZN5IOCom7ReceiveEPhh+0xd6>
 80015bc:	2300      	movs	r3, #0
 80015be:	4423      	add	r3, r4
 80015c0:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_1) << 1);
 80015c2:	2101      	movs	r1, #1
 80015c4:	4822      	ldr	r0, [pc, #136]	; (8001650 <_ZN5IOCom7ReceiveEPhh+0x168>)
 80015c6:	f005 fe95 	bl	80072f4 <HAL_GPIO_ReadPin>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d101      	bne.n	80015d4 <_ZN5IOCom7ReceiveEPhh+0xec>
 80015d0:	2302      	movs	r3, #2
 80015d2:	e000      	b.n	80015d6 <_ZN5IOCom7ReceiveEPhh+0xee>
 80015d4:	2300      	movs	r3, #0
 80015d6:	4423      	add	r3, r4
 80015d8:	75fb      	strb	r3, [r7, #23]

		switch (counter)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d827      	bhi.n	8001634 <_ZN5IOCom7ReceiveEPhh+0x14c>
 80015e4:	a201      	add	r2, pc, #4	; (adr r2, 80015ec <_ZN5IOCom7ReceiveEPhh+0x104>)
 80015e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ea:	bf00      	nop
 80015ec:	080015fd 	.word	0x080015fd
 80015f0:	0800163f 	.word	0x0800163f
 80015f4:	0800163f 	.word	0x0800163f
 80015f8:	08001617 	.word	0x08001617
		{
			case 0:
				reg = data;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	7dfa      	ldrb	r2, [r7, #23]
 8001600:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
				counter++;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800160a:	3301      	adds	r3, #1
 800160c:	b2da      	uxtb	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
			case 1:
				break;
 8001614:	e013      	b.n	800163e <_ZN5IOCom7ReceiveEPhh+0x156>
				break;
				payload |= ((uint16_t) data) << 7;
				counter++;
				break;
			case 3:
				payload |= data;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800161c:	7dfb      	ldrb	r3, [r7, #23]
 800161e:	b29b      	uxth	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	b29a      	uxth	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
				counter = 0;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
				break;
 8001632:	e005      	b.n	8001640 <_ZN5IOCom7ReceiveEPhh+0x158>
			default:
				counter = 0;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
				break;
 800163c:	e000      	b.n	8001640 <_ZN5IOCom7ReceiveEPhh+0x158>
				break;
 800163e:	bf00      	nop
		}
	}
	return false;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	371c      	adds	r7, #28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd90      	pop	{r4, r7, pc}
 800164a:	bf00      	nop
 800164c:	48001c00 	.word	0x48001c00
 8001650:	48000800 	.word	0x48000800

08001654 <_ZN8RFM95Com9TransmittEPhh>:

#include "RFM95Com.h"
#include "../AppMain/Defines.h"

bool RFM95Com::Transmitt(uint8_t *data, uint8_t length)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	4613      	mov	r3, r2
 8001660:	71fb      	strb	r3, [r7, #7]
	uint8_t *txData;

	if (this->driveCommand->isCommandChanged() != 0)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	4618      	mov	r0, r3
 8001668:	f002 fcd5 	bl	8004016 <_ZNK12DriveCommand16isCommandChangedEv>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	bf14      	ite	ne
 8001672:	2301      	movne	r3, #1
 8001674:	2300      	moveq	r3, #0
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 808d 	beq.w	8001798 <_ZN8RFM95Com9TransmittEPhh+0x144>
	{
		uint8_t command = driveCommand->getCommandChangedReg();
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	4618      	mov	r0, r3
 8001684:	f002 fcd8 	bl	8004038 <_ZNK12DriveCommand20getCommandChangedRegEv>
 8001688:	4603      	mov	r3, r0
 800168a:	767b      	strb	r3, [r7, #25]

		if (command & CLOSE_CHANGE)
 800168c:	7e7b      	ldrb	r3, [r7, #25]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00d      	beq.n	80016b2 <_ZN8RFM95Com9TransmittEPhh+0x5e>
		{
			txData = this->GetCommand(CLOSE_ADDR);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	3304      	adds	r3, #4
 800169a:	2101      	movs	r1, #1
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fb4d 	bl	8000d3c <_ZN7BaseCOM10GetCommandEh>
 80016a2:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(CLOSE_CHANGE);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	2101      	movs	r1, #1
 80016aa:	4618      	mov	r0, r3
 80016ac:	f002 fcd0 	bl	8004050 <_ZN12DriveCommand19ResetCommandChangedEh>
 80016b0:	e178      	b.n	80019a4 <_ZN8RFM95Com9TransmittEPhh+0x350>
		}
		else if (command & OPEN_CHANGE)
 80016b2:	7e7b      	ldrb	r3, [r7, #25]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00d      	beq.n	80016d8 <_ZN8RFM95Com9TransmittEPhh+0x84>
		{
			txData = this->GetCommand(OPEN_ADDR);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3304      	adds	r3, #4
 80016c0:	2102      	movs	r1, #2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fb3a 	bl	8000d3c <_ZN7BaseCOM10GetCommandEh>
 80016c8:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(OPEN_CHANGE);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	2102      	movs	r1, #2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f002 fcbd 	bl	8004050 <_ZN12DriveCommand19ResetCommandChangedEh>
 80016d6:	e165      	b.n	80019a4 <_ZN8RFM95Com9TransmittEPhh+0x350>
		}
		else if (command & TEACH_CHANGE)
 80016d8:	7e7b      	ldrb	r3, [r7, #25]
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00d      	beq.n	80016fe <_ZN8RFM95Com9TransmittEPhh+0xaa>
		{
			txData = this->GetCommand(TEACH_ADDR);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3304      	adds	r3, #4
 80016e6:	2103      	movs	r1, #3
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fb27 	bl	8000d3c <_ZN7BaseCOM10GetCommandEh>
 80016ee:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(TEACH_CHANGE);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	2104      	movs	r1, #4
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 fcaa 	bl	8004050 <_ZN12DriveCommand19ResetCommandChangedEh>
 80016fc:	e152      	b.n	80019a4 <_ZN8RFM95Com9TransmittEPhh+0x350>
		}
		else if (command & RESET_CHANGE)
 80016fe:	7e7b      	ldrb	r3, [r7, #25]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00d      	beq.n	8001724 <_ZN8RFM95Com9TransmittEPhh+0xd0>
		{
			txData = this->GetCommand(RESET_ADDR);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	3304      	adds	r3, #4
 800170c:	2104      	movs	r1, #4
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fb14 	bl	8000d3c <_ZN7BaseCOM10GetCommandEh>
 8001714:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(RESET_CHANGE);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	2108      	movs	r1, #8
 800171c:	4618      	mov	r0, r3
 800171e:	f002 fc97 	bl	8004050 <_ZN12DriveCommand19ResetCommandChangedEh>
 8001722:	e13f      	b.n	80019a4 <_ZN8RFM95Com9TransmittEPhh+0x350>
		}
		else if (command & ENABLE_CHANGE)
 8001724:	7e7b      	ldrb	r3, [r7, #25]
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00d      	beq.n	800174a <_ZN8RFM95Com9TransmittEPhh+0xf6>
		{
			txData = this->GetCommand(ENABLE_ADDR);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	3304      	adds	r3, #4
 8001732:	2105      	movs	r1, #5
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fb01 	bl	8000d3c <_ZN7BaseCOM10GetCommandEh>
 800173a:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(ENABLE_CHANGE);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	2110      	movs	r1, #16
 8001742:	4618      	mov	r0, r3
 8001744:	f002 fc84 	bl	8004050 <_ZN12DriveCommand19ResetCommandChangedEh>
 8001748:	e12c      	b.n	80019a4 <_ZN8RFM95Com9TransmittEPhh+0x350>
		}
		else if (command & DISABLE_CHANGE)
 800174a:	7e7b      	ldrb	r3, [r7, #25]
 800174c:	f003 0320 	and.w	r3, r3, #32
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00d      	beq.n	8001770 <_ZN8RFM95Com9TransmittEPhh+0x11c>
		{
			txData = this->GetCommand(DISABLE_ADDR);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	3304      	adds	r3, #4
 8001758:	2106      	movs	r1, #6
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff faee 	bl	8000d3c <_ZN7BaseCOM10GetCommandEh>
 8001760:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(DISABLE_CHANGE);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	2120      	movs	r1, #32
 8001768:	4618      	mov	r0, r3
 800176a:	f002 fc71 	bl	8004050 <_ZN12DriveCommand19ResetCommandChangedEh>
 800176e:	e119      	b.n	80019a4 <_ZN8RFM95Com9TransmittEPhh+0x350>
		}
		else if (command & STOP_CHANGE)
 8001770:	7e7b      	ldrb	r3, [r7, #25]
 8001772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 8114 	beq.w	80019a4 <_ZN8RFM95Com9TransmittEPhh+0x350>
		{
			txData = this->GetCommand(STOP_ADDR);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	3304      	adds	r3, #4
 8001780:	2107      	movs	r1, #7
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fada 	bl	8000d3c <_ZN7BaseCOM10GetCommandEh>
 8001788:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(STOP_CHANGE);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	2140      	movs	r1, #64	; 0x40
 8001790:	4618      	mov	r0, r3
 8001792:	f002 fc5d 	bl	8004050 <_ZN12DriveCommand19ResetCommandChangedEh>
 8001796:	e105      	b.n	80019a4 <_ZN8RFM95Com9TransmittEPhh+0x350>
		}
	}
	else if (driveSettings->isSettingsChanged() != 0)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	4618      	mov	r0, r3
 800179e:	f002 fae6 	bl	8003d6e <_ZN13DriveSettings17isSettingsChangedEv>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf14      	ite	ne
 80017a8:	2301      	movne	r3, #1
 80017aa:	2300      	moveq	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 80db 	beq.w	800196a <_ZN8RFM95Com9TransmittEPhh+0x316>
	{
		uint16_t commands = driveSettings->getSettingsChangedReg();
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f002 fae9 	bl	8003d90 <_ZNK13DriveSettings21getSettingsChangedRegEv>
 80017be:	4603      	mov	r3, r0
 80017c0:	837b      	strh	r3, [r7, #26]

		if (commands & TEACH_TORQUE_CHANGE)
 80017c2:	8b7b      	ldrh	r3, [r7, #26]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00d      	beq.n	80017e8 <_ZN8RFM95Com9TransmittEPhh+0x194>
		{
			txData = this->GetSettings(TEACH_TORQUE_ADDR);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	3304      	adds	r3, #4
 80017d0:	2110      	movs	r1, #16
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff f916 	bl	8000a04 <_ZN7BaseCOM11GetSettingsEh>
 80017d8:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(TEACH_TORQUE_CHANGE);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	2101      	movs	r1, #1
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 fae1 	bl	8003da8 <_ZN13DriveSettings20ResetSettingsChangedEt>
 80017e6:	e0dd      	b.n	80019a4 <_ZN8RFM95Com9TransmittEPhh+0x350>
		}
		else if (commands & TEACH_SPEED_CHANGE)
 80017e8:	8b7b      	ldrh	r3, [r7, #26]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00d      	beq.n	800180e <_ZN8RFM95Com9TransmittEPhh+0x1ba>
		{
			txData = this->GetSettings(TEACH_SPEED_ADDR);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2111      	movs	r1, #17
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff f903 	bl	8000a04 <_ZN7BaseCOM11GetSettingsEh>
 80017fe:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(TEACH_SPEED_CHANGE);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	2102      	movs	r1, #2
 8001806:	4618      	mov	r0, r3
 8001808:	f002 face 	bl	8003da8 <_ZN13DriveSettings20ResetSettingsChangedEt>
 800180c:	e0ca      	b.n	80019a4 <_ZN8RFM95Com9TransmittEPhh+0x350>
		}
		else if (commands & CLAMPING_TORQUE_CHANGE)
 800180e:	8b7b      	ldrh	r3, [r7, #26]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00d      	beq.n	8001834 <_ZN8RFM95Com9TransmittEPhh+0x1e0>
		{
			txData = this->GetSettings(CLAMPING_TORQUE_ADDR);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	3304      	adds	r3, #4
 800181c:	2112      	movs	r1, #18
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff f8f0 	bl	8000a04 <_ZN7BaseCOM11GetSettingsEh>
 8001824:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(CLAMPING_TORQUE_CHANGE);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	2104      	movs	r1, #4
 800182c:	4618      	mov	r0, r3
 800182e:	f002 fabb 	bl	8003da8 <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001832:	e0b7      	b.n	80019a4 <_ZN8RFM95Com9TransmittEPhh+0x350>
		}
		else if (commands & CLAMPING_SPEED_CHANGE)
 8001834:	8b7b      	ldrh	r3, [r7, #26]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00d      	beq.n	800185a <_ZN8RFM95Com9TransmittEPhh+0x206>
		{
			txData = this->GetSettings(CLAMPING_SPEED_ADDR);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3304      	adds	r3, #4
 8001842:	2113      	movs	r1, #19
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff f8dd 	bl	8000a04 <_ZN7BaseCOM11GetSettingsEh>
 800184a:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(CLAMPING_SPEED_CHANGE);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	2108      	movs	r1, #8
 8001852:	4618      	mov	r0, r3
 8001854:	f002 faa8 	bl	8003da8 <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001858:	e0a4      	b.n	80019a4 <_ZN8RFM95Com9TransmittEPhh+0x350>
		}
		else if (commands & SELF_SHUTDOWN_DELAY_CHANGE)
 800185a:	8b7b      	ldrh	r3, [r7, #26]
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00d      	beq.n	8001880 <_ZN8RFM95Com9TransmittEPhh+0x22c>
		{
			txData = this->GetSettings(SELF_SHUTDOWN_DELAY_ADDR);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	3304      	adds	r3, #4
 8001868:	2114      	movs	r1, #20
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff f8ca 	bl	8000a04 <_ZN7BaseCOM11GetSettingsEh>
 8001870:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(SELF_SHUTDOWN_DELAY_CHANGE);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	2110      	movs	r1, #16
 8001878:	4618      	mov	r0, r3
 800187a:	f002 fa95 	bl	8003da8 <_ZN13DriveSettings20ResetSettingsChangedEt>
 800187e:	e091      	b.n	80019a4 <_ZN8RFM95Com9TransmittEPhh+0x350>
		}
		else if (commands & IN_POS_DIFF_CHANGE)
 8001880:	8b7b      	ldrh	r3, [r7, #26]
 8001882:	f003 0320 	and.w	r3, r3, #32
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00d      	beq.n	80018a6 <_ZN8RFM95Com9TransmittEPhh+0x252>
		{
			txData = this->GetSettings(IN_POS_DIFF_ADDR);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3304      	adds	r3, #4
 800188e:	2115      	movs	r1, #21
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff f8b7 	bl	8000a04 <_ZN7BaseCOM11GetSettingsEh>
 8001896:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(IN_POS_DIFF_CHANGE);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	2120      	movs	r1, #32
 800189e:	4618      	mov	r0, r3
 80018a0:	f002 fa82 	bl	8003da8 <_ZN13DriveSettings20ResetSettingsChangedEt>
 80018a4:	e07e      	b.n	80019a4 <_ZN8RFM95Com9TransmittEPhh+0x350>
		}
		else if (commands & OPENING_DISTANCE_CHANGE)
 80018a6:	8b7b      	ldrh	r3, [r7, #26]
 80018a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00d      	beq.n	80018cc <_ZN8RFM95Com9TransmittEPhh+0x278>
		{
			txData = this->GetSettings(OPENING_DISTANCE_ADDR);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	3304      	adds	r3, #4
 80018b4:	2116      	movs	r1, #22
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f8a4 	bl	8000a04 <_ZN7BaseCOM11GetSettingsEh>
 80018bc:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(OPENING_DISTANCE_CHANGE);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	2140      	movs	r1, #64	; 0x40
 80018c4:	4618      	mov	r0, r3
 80018c6:	f002 fa6f 	bl	8003da8 <_ZN13DriveSettings20ResetSettingsChangedEt>
 80018ca:	e06b      	b.n	80019a4 <_ZN8RFM95Com9TransmittEPhh+0x350>
		}
		else if (commands & UNDERVOLTAGE_WARNING_CHANGE)
 80018cc:	8b7b      	ldrh	r3, [r7, #26]
 80018ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00d      	beq.n	80018f2 <_ZN8RFM95Com9TransmittEPhh+0x29e>
		{
			txData = this->GetSettings(UNDERVOLTAGE_WARNING_ADDR);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3304      	adds	r3, #4
 80018da:	2117      	movs	r1, #23
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff f891 	bl	8000a04 <_ZN7BaseCOM11GetSettingsEh>
 80018e2:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(UNDERVOLTAGE_WARNING_CHANGE);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	2180      	movs	r1, #128	; 0x80
 80018ea:	4618      	mov	r0, r3
 80018ec:	f002 fa5c 	bl	8003da8 <_ZN13DriveSettings20ResetSettingsChangedEt>
 80018f0:	e058      	b.n	80019a4 <_ZN8RFM95Com9TransmittEPhh+0x350>
		}
		else if (commands & UNDERVOLTAGE_ERROR_CHANGE)
 80018f2:	8b7b      	ldrh	r3, [r7, #26]
 80018f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00e      	beq.n	800191a <_ZN8RFM95Com9TransmittEPhh+0x2c6>
		{
			txData = this->GetSettings(UNDERVOLTAGE_ERROR_ADDR);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	3304      	adds	r3, #4
 8001900:	2118      	movs	r1, #24
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff f87e 	bl	8000a04 <_ZN7BaseCOM11GetSettingsEh>
 8001908:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(UNDERVOLTAGE_ERROR_CHANGE);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001912:	4618      	mov	r0, r3
 8001914:	f002 fa48 	bl	8003da8 <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001918:	e044      	b.n	80019a4 <_ZN8RFM95Com9TransmittEPhh+0x350>
		}
		else if (commands & OVER_CURRENT_WARNING_CHANGE)
 800191a:	8b7b      	ldrh	r3, [r7, #26]
 800191c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00e      	beq.n	8001942 <_ZN8RFM95Com9TransmittEPhh+0x2ee>
		{
			txData = this->GetSettings(OVER_CURRENT_WARNING_ADDR);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3304      	adds	r3, #4
 8001928:	2119      	movs	r1, #25
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff f86a 	bl	8000a04 <_ZN7BaseCOM11GetSettingsEh>
 8001930:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(OVER_CURRENT_WARNING_CHANGE);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f44f 7100 	mov.w	r1, #512	; 0x200
 800193a:	4618      	mov	r0, r3
 800193c:	f002 fa34 	bl	8003da8 <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001940:	e030      	b.n	80019a4 <_ZN8RFM95Com9TransmittEPhh+0x350>
		}
		else if (commands & OVER_CURRENT_ERROR_CHANGE)
 8001942:	8b7b      	ldrh	r3, [r7, #26]
 8001944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001948:	2b00      	cmp	r3, #0
 800194a:	d02b      	beq.n	80019a4 <_ZN8RFM95Com9TransmittEPhh+0x350>
		{
			txData = this->GetSettings(OVER_CURRENT_ERROR_ADDR);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3304      	adds	r3, #4
 8001950:	211a      	movs	r1, #26
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff f856 	bl	8000a04 <_ZN7BaseCOM11GetSettingsEh>
 8001958:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(OVER_CURRENT_ERROR_CHANGE);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001962:	4618      	mov	r0, r3
 8001964:	f002 fa20 	bl	8003da8 <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001968:	e01c      	b.n	80019a4 <_ZN8RFM95Com9TransmittEPhh+0x350>
		}
	}
	else
	{
		uint8_t dataTemp[] = {0x1F, driveSettings->getDeviceAddress(),GET_STATUS,0x00,0x00};
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	711a      	strb	r2, [r3, #4]
 8001974:	231f      	movs	r3, #31
 8001976:	753b      	strb	r3, [r7, #20]
 8001978:	2313      	movs	r3, #19
 800197a:	75bb      	strb	r3, [r7, #22]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	4618      	mov	r0, r3
 8001982:	f002 f9b9 	bl	8003cf8 <_ZNK13DriveSettings16getDeviceAddressEv>
 8001986:	4603      	mov	r3, r0
 8001988:	757b      	strb	r3, [r7, #21]
		dataTemp[5] = CRC8(dataTemp, 4);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	3304      	adds	r3, #4
 800198e:	f107 0114 	add.w	r1, r7, #20
 8001992:	2204      	movs	r2, #4
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fcfd 	bl	8001394 <_ZN7BaseCOM4CRC8EPhh>
 800199a:	4603      	mov	r3, r0
 800199c:	767b      	strb	r3, [r7, #25]
		txData = dataTemp;
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	61fb      	str	r3, [r7, #28]
	}

	rfm95->beginPacket();
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	2100      	movs	r1, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f001 fc9f 	bl	80032ee <_ZN10RFM95_LoRa11beginPacketEi>
	rfm95->write(txData, 5);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6998      	ldr	r0, [r3, #24]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	3304      	adds	r3, #4
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2205      	movs	r2, #5
 80019c0:	69f9      	ldr	r1, [r7, #28]
 80019c2:	4798      	blx	r3
	rfm95->endPacket();
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f001 fcb1 	bl	8003330 <_ZN10RFM95_LoRa9endPacketEv>
	return true;
 80019ce:	2301      	movs	r3, #1
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3720      	adds	r7, #32
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <_ZN8RFM95Com7ReceiveEPhh>:

bool RFM95Com::Receive(uint8_t *data, uint8_t length)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	4613      	mov	r3, r2
 80019e4:	71fb      	strb	r3, [r7, #7]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[5] = crc

	uint8_t packetSize = rfm95->parsePacket();
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	2100      	movs	r1, #0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f001 fcc1 	bl	8003374 <_ZN10RFM95_LoRa11parsePacketEi>
 80019f2:	4603      	mov	r3, r0
 80019f4:	75fb      	strb	r3, [r7, #23]
	if (packetSize != 0)
 80019f6:	7dfb      	ldrb	r3, [r7, #23]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d061      	beq.n	8001ac0 <_ZN8RFM95Com7ReceiveEPhh+0xe8>
	{
		uint8_t counter = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	75bb      	strb	r3, [r7, #22]
		while (rfm95->available())
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	699a      	ldr	r2, [r3, #24]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	3308      	adds	r3, #8
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4798      	blx	r3
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bf14      	ite	ne
 8001a18:	2301      	movne	r3, #1
 8001a1a:	2300      	moveq	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d013      	beq.n	8001a4a <_ZN8RFM95Com7ReceiveEPhh+0x72>
		{
			data[counter] = rfm95->read();
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	699a      	ldr	r2, [r3, #24]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	330c      	adds	r3, #12
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4610      	mov	r0, r2
 8001a32:	4798      	blx	r3
 8001a34:	4601      	mov	r1, r0
 8001a36:	7dbb      	ldrb	r3, [r7, #22]
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	b2ca      	uxtb	r2, r1
 8001a3e:	701a      	strb	r2, [r3, #0]
			if (counter > MAX_PACKET_2_RECEIVE)
 8001a40:	7dbb      	ldrb	r3, [r7, #22]
 8001a42:	2b0a      	cmp	r3, #10
 8001a44:	d9dc      	bls.n	8001a00 <_ZN8RFM95Com7ReceiveEPhh+0x28>
			{
				return false;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e03b      	b.n	8001ac2 <_ZN8RFM95Com7ReceiveEPhh+0xea>
			}
		}

		//check CRC
		if (CRC8(data, 4) != data[5])
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	2204      	movs	r2, #4
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fc9e 	bl	8001394 <_ZN7BaseCOM4CRC8EPhh>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	3305      	adds	r3, #5
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	bf14      	ite	ne
 8001a66:	2301      	movne	r3, #1
 8001a68:	2300      	moveq	r3, #0
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <_ZN8RFM95Com7ReceiveEPhh+0x9c>
		{
			//error crc error //ToDO
			return false;
 8001a70:	2300      	movs	r3, #0
 8001a72:	e026      	b.n	8001ac2 <_ZN8RFM95Com7ReceiveEPhh+0xea>
		}

		switch (data[2])
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	3302      	adds	r3, #2
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d014      	beq.n	8001aa8 <_ZN8RFM95Com7ReceiveEPhh+0xd0>
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	dc19      	bgt.n	8001ab6 <_ZN8RFM95Com7ReceiveEPhh+0xde>
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d002      	beq.n	8001a8c <_ZN8RFM95Com7ReceiveEPhh+0xb4>
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d007      	beq.n	8001a9a <_ZN8RFM95Com7ReceiveEPhh+0xc2>
 8001a8a:	e014      	b.n	8001ab6 <_ZN8RFM95Com7ReceiveEPhh+0xde>
		{
			case SEND_SETTINGS:
				this->SetSettings(data);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3304      	adds	r3, #4
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff f9dc 	bl	8000e50 <_ZN7BaseCOM11SetSettingsEPh>
				break;
 8001a98:	e012      	b.n	8001ac0 <_ZN8RFM95Com7ReceiveEPhh+0xe8>
			case SEND_COMMAND:
				this->SetCommand(data);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	68b9      	ldr	r1, [r7, #8]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fbed 	bl	8001280 <_ZN7BaseCOM10SetCommandEPh>
				break;
 8001aa6:	e00b      	b.n	8001ac0 <_ZN8RFM95Com7ReceiveEPhh+0xe8>
			case SEND_STATUS:
				this->SetStatus(data);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3304      	adds	r3, #4
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fb5c 	bl	800116c <_ZN7BaseCOM9SetStatusEPh>
				break;
 8001ab4:	e004      	b.n	8001ac0 <_ZN8RFM95Com7ReceiveEPhh+0xe8>
			default:
				//not sported command
				data[2] = 0;
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	3302      	adds	r3, #2
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
				break;
 8001abe:	bf00      	nop
		}
	}
	return true;
 8001ac0:	2301      	movs	r3, #1
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <_ZN6USBCom9TransmittEPhh>:
#include "../AppMain/Defines.h"
#include "usb_device.h"
#include "usbd_cdc_if.h"

bool USBCom::Transmitt(uint8_t *data, uint8_t length)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	71fb      	strb	r3, [r7, #7]
	if(data == NULL){
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <_ZN6USBCom9TransmittEPhh+0x18>
		return false;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e019      	b.n	8001b16 <_ZN6USBCom9TransmittEPhh+0x4c>
	}

	uint16_t counter = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	82fb      	strh	r3, [r7, #22]
	while (CDC_Transmit_FS((uint8_t*) data, length) != USBD_OK)
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	4619      	mov	r1, r3
 8001aec:	68b8      	ldr	r0, [r7, #8]
 8001aee:	f00d fc11 	bl	800f314 <CDC_Transmit_FS>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	bf14      	ite	ne
 8001af8:	2301      	movne	r3, #1
 8001afa:	2300      	moveq	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d008      	beq.n	8001b14 <_ZN6USBCom9TransmittEPhh+0x4a>
	{
		counter++;
 8001b02:	8afb      	ldrh	r3, [r7, #22]
 8001b04:	3301      	adds	r3, #1
 8001b06:	82fb      	strh	r3, [r7, #22]
		if (counter >= 1000)
 8001b08:	8afb      	ldrh	r3, [r7, #22]
 8001b0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b0e:	d3ea      	bcc.n	8001ae6 <_ZN6USBCom9TransmittEPhh+0x1c>
		{
			//ToDo USB Error
			return false;	//Transmit failed
 8001b10:	2300      	movs	r3, #0
 8001b12:	e000      	b.n	8001b16 <_ZN6USBCom9TransmittEPhh+0x4c>
		}
	}
	return true;	//Transmit successful
 8001b14:	2301      	movs	r3, #1
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <_ZN6USBCom7ReceiveEPhh>:



bool USBCom::Receive(uint8_t *data, uint8_t length)
{
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	71fb      	strb	r3, [r7, #7]
	uint8_t data2send[] = { 0x1D, 0x00, 0x00, 0x00, 0x00 };
 8001b2e:	4a5e      	ldr	r2, [pc, #376]	; (8001ca8 <_ZN6USBCom7ReceiveEPhh+0x188>)
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b38:	6018      	str	r0, [r3, #0]
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	7019      	strb	r1, [r3, #0]
	uint8_t crc = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	75fb      	strb	r3, [r7, #23]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[5] = crc

	if (length >= 5)
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	f240 80aa 	bls.w	8001c9e <_ZN6USBCom7ReceiveEPhh+0x17e>
	{
		//calculate CRC from received data
		crc = this->CRC8(data, 4);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	2204      	movs	r2, #4
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fc1e 	bl	8001394 <_ZN7BaseCOM4CRC8EPhh>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	75fb      	strb	r3, [r7, #23]
		if (crc != data[4])
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	3304      	adds	r3, #4
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	7dfa      	ldrb	r2, [r7, #23]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d003      	beq.n	8001b70 <_ZN6USBCom7ReceiveEPhh+0x50>
		{
			data[2] = 0;
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
		}

		switch (data[2])
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	3302      	adds	r3, #2
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	2b12      	cmp	r3, #18
 8001b7a:	d877      	bhi.n	8001c6c <_ZN6USBCom7ReceiveEPhh+0x14c>
 8001b7c:	a201      	add	r2, pc, #4	; (adr r2, 8001b84 <_ZN6USBCom7ReceiveEPhh+0x64>)
 8001b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b82:	bf00      	nop
 8001b84:	08001bd1 	.word	0x08001bd1
 8001b88:	08001bdf 	.word	0x08001bdf
 8001b8c:	08001bed 	.word	0x08001bed
 8001b90:	08001c6d 	.word	0x08001c6d
 8001b94:	08001c6d 	.word	0x08001c6d
 8001b98:	08001c6d 	.word	0x08001c6d
 8001b9c:	08001c6d 	.word	0x08001c6d
 8001ba0:	08001c6d 	.word	0x08001c6d
 8001ba4:	08001c6d 	.word	0x08001c6d
 8001ba8:	08001c6d 	.word	0x08001c6d
 8001bac:	08001c6d 	.word	0x08001c6d
 8001bb0:	08001c6d 	.word	0x08001c6d
 8001bb4:	08001c6d 	.word	0x08001c6d
 8001bb8:	08001c6d 	.word	0x08001c6d
 8001bbc:	08001c6d 	.word	0x08001c6d
 8001bc0:	08001c6d 	.word	0x08001c6d
 8001bc4:	08001bfb 	.word	0x08001bfb
 8001bc8:	08001c21 	.word	0x08001c21
 8001bcc:	08001c47 	.word	0x08001c47
		{
			case SEND_SETTINGS:
				this->SetSettings(data);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff f93a 	bl	8000e50 <_ZN7BaseCOM11SetSettingsEPh>
				break;
 8001bdc:	e04b      	b.n	8001c76 <_ZN6USBCom7ReceiveEPhh+0x156>
			case SEND_COMMAND:
				this->SetCommand(data);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	3304      	adds	r3, #4
 8001be2:	68b9      	ldr	r1, [r7, #8]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fb4b 	bl	8001280 <_ZN7BaseCOM10SetCommandEPh>
				break;
 8001bea:	e044      	b.n	8001c76 <_ZN6USBCom7ReceiveEPhh+0x156>
			case SEND_STATUS:
				this->SetStatus(data);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	3304      	adds	r3, #4
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff faba 	bl	800116c <_ZN7BaseCOM9SetStatusEPh>
				break;
 8001bf8:	e03d      	b.n	8001c76 <_ZN6USBCom7ReceiveEPhh+0x156>
			case GET_SETTINGS:
				return Transmitt(this->GetSettings(data[3]), 5);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681c      	ldr	r4, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	1d1a      	adds	r2, r3, #4
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	3303      	adds	r3, #3
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	f7fe fef9 	bl	8000a04 <_ZN7BaseCOM11GetSettingsEh>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2205      	movs	r2, #5
 8001c16:	4619      	mov	r1, r3
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	47a0      	blx	r4
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	e03f      	b.n	8001ca0 <_ZN6USBCom7ReceiveEPhh+0x180>
			case GET_COMMAND:
				return Transmitt(this->GetCommand(data[3]), 5);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681c      	ldr	r4, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	1d1a      	adds	r2, r3, #4
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	3303      	adds	r3, #3
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	4610      	mov	r0, r2
 8001c34:	f7ff f882 	bl	8000d3c <_ZN7BaseCOM10GetCommandEh>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2205      	movs	r2, #5
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	47a0      	blx	r4
 8001c42:	4603      	mov	r3, r0
 8001c44:	e02c      	b.n	8001ca0 <_ZN6USBCom7ReceiveEPhh+0x180>
			case GET_STATUS:
				return Transmitt(this->GetStatus(data[3]), 5);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681c      	ldr	r4, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	1d1a      	adds	r2, r3, #4
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	3303      	adds	r3, #3
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	4619      	mov	r1, r3
 8001c58:	4610      	mov	r0, r2
 8001c5a:	f7fe ffd9 	bl	8000c10 <_ZN7BaseCOM9GetStatusEh>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2205      	movs	r2, #5
 8001c62:	4619      	mov	r1, r3
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	47a0      	blx	r4
 8001c68:	4603      	mov	r3, r0
 8001c6a:	e019      	b.n	8001ca0 <_ZN6USBCom7ReceiveEPhh+0x180>
			default:
				//not suported command
				data[2] = 0;
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	3302      	adds	r3, #2
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
				break;
 8001c74:	bf00      	nop
		}

		data2send[4] = CRC8(data2send, 4);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	f107 0110 	add.w	r1, r7, #16
 8001c7e:	2204      	movs	r2, #4
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fb87 	bl	8001394 <_ZN7BaseCOM4CRC8EPhh>
 8001c86:	4603      	mov	r3, r0
 8001c88:	753b      	strb	r3, [r7, #20]
		return Transmitt(data2send, 5);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f107 0110 	add.w	r1, r7, #16
 8001c94:	2205      	movs	r2, #5
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	4798      	blx	r3
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	e000      	b.n	8001ca0 <_ZN6USBCom7ReceiveEPhh+0x180>
	}

	return false;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	371c      	adds	r7, #28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd90      	pop	{r4, r7, pc}
 8001ca8:	0800ff4c 	.word	0x0800ff4c

08001cac <_ZN5FlashC1EP13DriveSettingsP11DriveStatus>:
 */

#include "Flash.h"
#include "stm32l4xx_hal.h"

Flash::Flash(DriveSettings *driveSettings, DriveStatus *driveStatus)
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
{
	this->driveSettings = driveSettings;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	605a      	str	r2, [r3, #4]
}
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <_ZN5Flash9ReadFlashEv>:
 *
 * @param None
 * @return None
 */
void Flash::ReadFlash()
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b084      	sub	sp, #16
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < UFLASH_SIZE; i++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2b13      	cmp	r3, #19
 8001ce2:	dc12      	bgt.n	8001d0a <_ZN5Flash9ReadFlashEv+0x38>
	{
		tmpFlashArray[i] = *(uint64_t*) (FLASH_STAR_PAGE_ADDR + 64 * i);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8001cea:	f503 637e 	add.w	r3, r3, #4064	; 0xfe0
 8001cee:	019b      	lsls	r3, r3, #6
 8001cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	68f9      	ldr	r1, [r7, #12]
 8001cf8:	3101      	adds	r1, #1
 8001cfa:	00c9      	lsls	r1, r1, #3
 8001cfc:	4401      	add	r1, r0
 8001cfe:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < UFLASH_SIZE; i++)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3301      	adds	r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	e7e9      	b.n	8001cde <_ZN5Flash9ReadFlashEv+0xc>
	}

	driveSettings->setClampingSpeed(tmpFlashArray[0]);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6818      	ldr	r0, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d14:	b293      	uxth	r3, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	f001 fe26 	bl	8003968 <_ZN13DriveSettings16setClampingSpeedEt>
	driveSettings->setClampingTorque(tmpFlashArray[1]);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d26:	b293      	uxth	r3, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f001 fe44 	bl	80039b6 <_ZN13DriveSettings17setClampingTorqueEt>
	driveSettings->setTeachSpeed(tmpFlashArray[2]);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001d38:	b293      	uxth	r3, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f001 ff25 	bl	8003b8a <_ZN13DriveSettings13setTeachSpeedEt>
	driveSettings->setTeachTroque(tmpFlashArray[3]);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001d4a:	b293      	uxth	r3, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f001 ff43 	bl	8003bd8 <_ZN13DriveSettings14setTeachTroqueEt>

	driveSettings->setOverCurrentError(tmpFlashArray[4]);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001d5c:	b293      	uxth	r3, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f001 ffaf 	bl	8003cc2 <_ZN13DriveSettings19setOverCurrentErrorEt>
	driveSettings->setOverCurrentWarning(tmpFlashArray[5]);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001d6e:	b293      	uxth	r3, r2
 8001d70:	4619      	mov	r1, r3
 8001d72:	f001 febc 	bl	8003aee <_ZN13DriveSettings21setOverCurrentWarningEt>
	driveSettings->setUnderVoltageError(tmpFlashArray[6]);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001d80:	b293      	uxth	r3, r2
 8001d82:	4619      	mov	r1, r3
 8001d84:	f001 ff4f 	bl	8003c26 <_ZN13DriveSettings20setUnderVoltageErrorEt>
	driveSettings->setUnderVoltageWarning(tmpFlashArray[7]);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001d92:	b293      	uxth	r3, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	f001 ff6d 	bl	8003c74 <_ZN13DriveSettings22setUnderVoltageWarningEt>

	driveSettings->setSelfShutdownDelay(tmpFlashArray[8]);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001da4:	b293      	uxth	r3, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	f001 fec8 	bl	8003b3c <_ZN13DriveSettings20setSelfShutdownDelayEt>
	driveSettings->setInPosDiff(tmpFlashArray[9]);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001db6:	b293      	uxth	r3, r2
 8001db8:	4619      	mov	r1, r3
 8001dba:	f001 fe23 	bl	8003a04 <_ZN13DriveSettings12setInPosDiffEt>
	driveSettings->setOpeningDistance(tmpFlashArray[10]);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001dc8:	b293      	uxth	r3, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f001 fe41 	bl	8003a52 <_ZN13DriveSettings18setOpeningDistanceEt>

	driveSettings->setOverCurrentTimeThreshold(tmpFlashArray[11]);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001dda:	b293      	uxth	r3, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f001 fe5f 	bl	8003aa0 <_ZN13DriveSettings27setOverCurrentTimeThresholdEt>
	driveSettings->setDeviceAddress(tmpFlashArray[12]);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001dec:	b2d3      	uxtb	r3, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	f001 ff8e 	bl	8003d10 <_ZN13DriveSettings16setDeviceAddressEh>
}
 8001df4:	bf00      	nop
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_ZN5Flash9SaveFlashEv>:



void Flash::SaveFlash(){
 8001dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e00:	b096      	sub	sp, #88	; 0x58
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6578      	str	r0, [r7, #84]	; 0x54

		tmpFlashArray[0] = driveSettings->getClampingSpeed();
 8001e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f001 fda0 	bl	8003950 <_ZNK13DriveSettings16getClampingSpeedEv>
 8001e10:	4603      	mov	r3, r0
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	2200      	movs	r2, #0
 8001e16:	461c      	mov	r4, r3
 8001e18:	4615      	mov	r5, r2
 8001e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e1c:	e9c3 4502 	strd	r4, r5, [r3, #8]
		tmpFlashArray[1] = driveSettings->getClampingTorque();
 8001e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f001 fdba 	bl	800399e <_ZNK13DriveSettings17getClampingTorqueEv>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2200      	movs	r2, #0
 8001e30:	4698      	mov	r8, r3
 8001e32:	4691      	mov	r9, r2
 8001e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e36:	e9c3 8904 	strd	r8, r9, [r3, #16]
		tmpFlashArray[2] = driveSettings->getTeachSpeed();
 8001e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f001 fe97 	bl	8003b72 <_ZNK13DriveSettings13getTeachSpeedEv>
 8001e44:	4603      	mov	r3, r0
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	2200      	movs	r2, #0
 8001e4a:	469a      	mov	sl, r3
 8001e4c:	4693      	mov	fp, r2
 8001e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e50:	e9c3 ab06 	strd	sl, fp, [r3, #24]
		tmpFlashArray[3] = driveSettings->getTeachTroque();
 8001e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f001 feb1 	bl	8003bc0 <_ZNK13DriveSettings14getTeachTroqueEv>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	2200      	movs	r2, #0
 8001e64:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e66:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e6a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8001e6e:	e9c3 1208 	strd	r1, r2, [r3, #32]

		tmpFlashArray[4] = driveSettings->getOverCurrentError();
 8001e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f001 ff17 	bl	8003caa <_ZNK13DriveSettings19getOverCurrentErrorEv>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	2200      	movs	r2, #0
 8001e82:	643b      	str	r3, [r7, #64]	; 0x40
 8001e84:	647a      	str	r2, [r7, #68]	; 0x44
 8001e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e88:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8001e8c:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
		tmpFlashArray[5] = driveSettings->getOverCurrentWarning();
 8001e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f001 fe1e 	bl	8003ad6 <_ZNK13DriveSettings21getOverCurrentWarningEv>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ea2:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8001eaa:	e9c3 120c 	strd	r1, r2, [r3, #48]	; 0x30
		tmpFlashArray[6] = driveSettings->getUnderVoltageError();
 8001eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f001 feab 	bl	8003c0e <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8001ec0:	637a      	str	r2, [r7, #52]	; 0x34
 8001ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8001ec8:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tmpFlashArray[7] = driveSettings->getUnderVoltageWarning();
 8001ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f001 fec3 	bl	8003c5c <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2200      	movs	r2, #0
 8001edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ede:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001ee6:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

		tmpFlashArray[8] = driveSettings->getSelfShutdownDelay();
 8001eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f001 fe18 	bl	8003b24 <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	2200      	movs	r2, #0
 8001efa:	623b      	str	r3, [r7, #32]
 8001efc:	627a      	str	r2, [r7, #36]	; 0x24
 8001efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f00:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001f04:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
		tmpFlashArray[9] = driveSettings->getInPosDiff();
 8001f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f001 fd6d 	bl	80039ec <_ZNK13DriveSettings12getInPosDiffEv>
 8001f12:	4603      	mov	r3, r0
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2200      	movs	r2, #0
 8001f18:	61bb      	str	r3, [r7, #24]
 8001f1a:	61fa      	str	r2, [r7, #28]
 8001f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f1e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001f22:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
		tmpFlashArray[10] = driveSettings->getOpeningDistance();
 8001f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f001 fd85 	bl	8003a3a <_ZNK13DriveSettings18getOpeningDistanceEv>
 8001f30:	4603      	mov	r3, r0
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	2200      	movs	r2, #0
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	617a      	str	r2, [r7, #20]
 8001f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f3c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001f40:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58

		tmpFlashArray[11] = driveSettings->getOverCurrentTimeThreshold();
 8001f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f001 fd9d 	bl	8003a88 <_ZNK13DriveSettings27getOverCurrentTimeThresholdEv>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	2200      	movs	r2, #0
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	60fa      	str	r2, [r7, #12]
 8001f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f5a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001f5e:	e9c3 1218 	strd	r1, r2, [r3, #96]	; 0x60
		tmpFlashArray[12] = driveSettings->getDeviceAddress();
 8001f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f001 fec6 	bl	8003cf8 <_ZNK13DriveSettings16getDeviceAddressEv>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2200      	movs	r2, #0
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f78:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001f7c:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
		WriteFlash();
 8001f80:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001f82:	f000 f805 	bl	8001f90 <_ZN5Flash10WriteFlashEv>
}
 8001f86:	bf00      	nop
 8001f88:	3758      	adds	r7, #88	; 0x58
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001f90 <_ZN5Flash10WriteFlashEv>:
 *
 * @param None
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef Flash::WriteFlash()
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

	FLASH_EraseInitTypeDef EraseinitStruct;
	uint32_t sectorError = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60bb      	str	r3, [r7, #8]

	if (HAL_FLASH_Unlock() != HAL_OK)
 8001f9c:	f004 fe24 	bl	8006be8 <HAL_FLASH_Unlock>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	bf14      	ite	ne
 8001fa6:	2301      	movne	r3, #1
 8001fa8:	2300      	moveq	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d009      	beq.n	8001fc4 <_ZN5Flash10WriteFlashEv+0x34>
	{
		HAL_FLASH_Lock();
 8001fb0:	f004 fe3c 	bl	8006c2c <HAL_FLASH_Lock>
		driveStatus->setError(DriveStatus::E_FLASH_ERROR);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2101      	movs	r1, #1
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f002 f97b 	bl	80042b6 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
		return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e050      	b.n	8002066 <_ZN5Flash10WriteFlashEv+0xd6>
	}

	EraseinitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]
	EraseinitStruct.Banks = 1;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	613b      	str	r3, [r7, #16]
	EraseinitStruct.Page = UFLASH_PAGE;
 8001fcc:	237f      	movs	r3, #127	; 0x7f
 8001fce:	617b      	str	r3, [r7, #20]
	EraseinitStruct.NbPages = UFLASH_NPAGES;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	61bb      	str	r3, [r7, #24]

	if (HAL_FLASHEx_Erase(&EraseinitStruct, &sectorError) != HAL_OK)
 8001fd4:	f107 0208 	add.w	r2, r7, #8
 8001fd8:	f107 030c 	add.w	r3, r7, #12
 8001fdc:	4611      	mov	r1, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f004 fee8 	bl	8006db4 <HAL_FLASHEx_Erase>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	bf14      	ite	ne
 8001fea:	2301      	movne	r3, #1
 8001fec:	2300      	moveq	r3, #0
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d009      	beq.n	8002008 <_ZN5Flash10WriteFlashEv+0x78>
	{
		HAL_FLASH_Lock();
 8001ff4:	f004 fe1a 	bl	8006c2c <HAL_FLASH_Lock>
		driveStatus->setError(DriveStatus::E_FLASH_ERROR);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	4618      	mov	r0, r3
 8002000:	f002 f959 	bl	80042b6 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
		return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e02e      	b.n	8002066 <_ZN5Flash10WriteFlashEv+0xd6>
	}

	for (int i = 0; i < UFLASH_SIZE; i++)
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	2b13      	cmp	r3, #19
 8002010:	dc14      	bgt.n	800203c <_ZN5Flash10WriteFlashEv+0xac>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
				(FLASH_STAR_PAGE_ADDR + 64 * i), tmpFlashArray[i]);
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8002018:	f503 637e 	add.w	r3, r3, #4064	; 0xfe0
 800201c:	019b      	lsls	r3, r3, #6
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800201e:	4619      	mov	r1, r3
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3301      	adds	r3, #1
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4413      	add	r3, r2
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	2000      	movs	r0, #0
 8002030:	f004 fd6e 	bl	8006b10 <HAL_FLASH_Program>
	for (int i = 0; i < UFLASH_SIZE; i++)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	3301      	adds	r3, #1
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	e7e7      	b.n	800200c <_ZN5Flash10WriteFlashEv+0x7c>
	}

	if (HAL_FLASH_Lock() != HAL_OK)
 800203c:	f004 fdf6 	bl	8006c2c <HAL_FLASH_Lock>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	bf14      	ite	ne
 8002046:	2301      	movne	r3, #1
 8002048:	2300      	moveq	r3, #0
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d009      	beq.n	8002064 <_ZN5Flash10WriteFlashEv+0xd4>
	{
		HAL_FLASH_Lock();
 8002050:	f004 fdec 	bl	8006c2c <HAL_FLASH_Lock>
		driveStatus->setError(DriveStatus::E_FLASH_ERROR);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2101      	movs	r1, #1
 800205a:	4618      	mov	r0, r3
 800205c:	f002 f92b 	bl	80042b6 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
		return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <_ZN5Flash10WriteFlashEv+0xd6>
	}

	return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3720      	adds	r7, #32
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <_ZN5QueueC1Ev>:

#include "stdint.h"

#define BUFFER_SIZE 10

class Queue{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	705a      	strb	r2, [r3, #1]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand>:
 *      Author: marce
 */

#include "DI.h"

Digitll_IN_OUT::Digitll_IN_OUT(DriveSettings *driveSettings, DriveStatus *driveStatus,DriveCommand *driveCommand)
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af02      	add	r7, sp, #8
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ae:	493e      	ldr	r1, [pc, #248]	; (80021a8 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x118>)
 80020b0:	f000 fd26 	bl	8002b00 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f103 0010 	add.w	r0, r3, #16
 80020ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	4b3a      	ldr	r3, [pc, #232]	; (80021ac <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 80020c2:	2204      	movs	r2, #4
 80020c4:	4939      	ldr	r1, [pc, #228]	; (80021ac <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 80020c6:	f000 fd1b 	bl	8002b00 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f103 0020 	add.w	r0, r3, #32
 80020d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	4b34      	ldr	r3, [pc, #208]	; (80021a8 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x118>)
 80020d8:	2280      	movs	r2, #128	; 0x80
 80020da:	4933      	ldr	r1, [pc, #204]	; (80021a8 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x118>)
 80020dc:	f000 fd10 	bl	8002b00 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80020e6:	2301      	movs	r3, #1
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	4b30      	ldr	r3, [pc, #192]	; (80021ac <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 80020ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f0:	492e      	ldr	r1, [pc, #184]	; (80021ac <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 80020f2:	f000 fd05 	bl	8002b00 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80020fc:	2340      	movs	r3, #64	; 0x40
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x118>)
 8002102:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002106:	4929      	ldr	r1, [pc, #164]	; (80021ac <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 8002108:	f000 fcfa 	bl	8002b00 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8002112:	2302      	movs	r3, #2
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	4b25      	ldr	r3, [pc, #148]	; (80021ac <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 8002118:	2210      	movs	r2, #16
 800211a:	4923      	ldr	r1, [pc, #140]	; (80021a8 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x118>)
 800211c:	f000 fcf0 	bl	8002b00 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8002126:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	4b1f      	ldr	r3, [pc, #124]	; (80021ac <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 800212e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002132:	491e      	ldr	r1, [pc, #120]	; (80021ac <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 8002134:	f000 fce4 	bl	8002b00 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800213e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x118>)
 8002146:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800214a:	4917      	ldr	r1, [pc, #92]	; (80021a8 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x118>)
 800214c:	f000 fcd8 	bl	8002b00 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	338a      	adds	r3, #138	; 0x8a
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	338a      	adds	r3, #138	; 0x8a
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff78 	bl	800206e <_ZN5QueueC1Ev>
{
	this->driveSettings = driveSettings;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	this->driveStatus = driveStatus;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	this->driveCommand = driveCommand;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	timeoutCounter = 0;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85

}
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	48000800 	.word	0x48000800
 80021ac:	48000400 	.word	0x48000400

080021b0 <_ZN14Digitll_IN_OUT4ReadEv>:

void Digitll_IN_OUT::Read()
{
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]

	configeWriteStatus = CONFIG_WRITE;
 80021b8:	2102      	movs	r1, #2
 80021ba:	485d      	ldr	r0, [pc, #372]	; (8002330 <_ZN14Digitll_IN_OUT4ReadEv+0x180>)
 80021bc:	f005 f89a 	bl	80072f4 <HAL_GPIO_ReadPin>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	bf0c      	ite	eq
 80021c6:	2301      	moveq	r3, #1
 80021c8:	2300      	movne	r3, #0
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	if (configeWriteStatus && !previousConfigeWriteStatus)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 8084 	beq.w	80022e6 <_ZN14Digitll_IN_OUT4ReadEv+0x136>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80021e4:	f083 0301 	eor.w	r3, r3, #1
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d07b      	beq.n	80022e6 <_ZN14Digitll_IN_OUT4ReadEv+0x136>
	{
		//read digial config
		uint8_t data = ((uint8_t) CONFIG_ADDR_7 << 7)
 80021ee:	2104      	movs	r1, #4
 80021f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f4:	f005 f87e 	bl	80072f4 <HAL_GPIO_ReadPin>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b80      	cmp	r3, #128	; 0x80
 80021fc:	bf0c      	ite	eq
 80021fe:	2301      	moveq	r3, #1
 8002200:	2300      	movne	r3, #0
 8002202:	b2db      	uxtb	r3, r3
 8002204:	461c      	mov	r4, r3
				+ (((uint8_t) CONFIG_ADDR_6) << 6)
 8002206:	2102      	movs	r1, #2
 8002208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800220c:	f005 f872 	bl	80072f4 <HAL_GPIO_ReadPin>
 8002210:	4603      	mov	r3, r0
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <_ZN14Digitll_IN_OUT4ReadEv+0x6a>
 8002216:	2340      	movs	r3, #64	; 0x40
 8002218:	e000      	b.n	800221c <_ZN14Digitll_IN_OUT4ReadEv+0x6c>
 800221a:	2300      	movs	r3, #0
 800221c:	4423      	add	r3, r4
 800221e:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_5) << 5)
 8002220:	2101      	movs	r1, #1
 8002222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002226:	f005 f865 	bl	80072f4 <HAL_GPIO_ReadPin>
 800222a:	4603      	mov	r3, r0
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <_ZN14Digitll_IN_OUT4ReadEv+0x84>
 8002230:	2320      	movs	r3, #32
 8002232:	e000      	b.n	8002236 <_ZN14Digitll_IN_OUT4ReadEv+0x86>
 8002234:	2300      	movs	r3, #0
 8002236:	4423      	add	r3, r4
 8002238:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_4) << 4)
 800223a:	2108      	movs	r1, #8
 800223c:	483d      	ldr	r0, [pc, #244]	; (8002334 <_ZN14Digitll_IN_OUT4ReadEv+0x184>)
 800223e:	f005 f859 	bl	80072f4 <HAL_GPIO_ReadPin>
 8002242:	4603      	mov	r3, r0
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <_ZN14Digitll_IN_OUT4ReadEv+0x9c>
 8002248:	2310      	movs	r3, #16
 800224a:	e000      	b.n	800224e <_ZN14Digitll_IN_OUT4ReadEv+0x9e>
 800224c:	2300      	movs	r3, #0
 800224e:	4423      	add	r3, r4
 8002250:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_3) << 3)
 8002252:	2104      	movs	r1, #4
 8002254:	4837      	ldr	r0, [pc, #220]	; (8002334 <_ZN14Digitll_IN_OUT4ReadEv+0x184>)
 8002256:	f005 f84d 	bl	80072f4 <HAL_GPIO_ReadPin>
 800225a:	4603      	mov	r3, r0
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <_ZN14Digitll_IN_OUT4ReadEv+0xb4>
 8002260:	2308      	movs	r3, #8
 8002262:	e000      	b.n	8002266 <_ZN14Digitll_IN_OUT4ReadEv+0xb6>
 8002264:	2300      	movs	r3, #0
 8002266:	4423      	add	r3, r4
 8002268:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_2) << 2)
 800226a:	2102      	movs	r1, #2
 800226c:	4831      	ldr	r0, [pc, #196]	; (8002334 <_ZN14Digitll_IN_OUT4ReadEv+0x184>)
 800226e:	f005 f841 	bl	80072f4 <HAL_GPIO_ReadPin>
 8002272:	4603      	mov	r3, r0
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <_ZN14Digitll_IN_OUT4ReadEv+0xcc>
 8002278:	2304      	movs	r3, #4
 800227a:	e000      	b.n	800227e <_ZN14Digitll_IN_OUT4ReadEv+0xce>
 800227c:	2300      	movs	r3, #0
 800227e:	4423      	add	r3, r4
 8002280:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_1) << 1);
 8002282:	2101      	movs	r1, #1
 8002284:	482b      	ldr	r0, [pc, #172]	; (8002334 <_ZN14Digitll_IN_OUT4ReadEv+0x184>)
 8002286:	f005 f835 	bl	80072f4 <HAL_GPIO_ReadPin>
 800228a:	4603      	mov	r3, r0
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <_ZN14Digitll_IN_OUT4ReadEv+0xe4>
 8002290:	2302      	movs	r3, #2
 8002292:	e000      	b.n	8002296 <_ZN14Digitll_IN_OUT4ReadEv+0xe6>
 8002294:	2300      	movs	r3, #0
 8002296:	4423      	add	r3, r4
 8002298:	73fb      	strb	r3, [r7, #15]

		//Data/Adress check
		if (isAddressReceived)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d017      	beq.n	80022d4 <_ZN14Digitll_IN_OUT4ReadEv+0x124>
		{
			queue.Enqueue(data);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	338a      	adds	r3, #138	; 0x8a
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f002 f955 	bl	800455c <_ZN5Queue7EnqueueEh>
			expectedDataSize--;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			if (expectedDataSize == 0)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d108      	bne.n	80022de <_ZN14Digitll_IN_OUT4ReadEv+0x12e>
			{
				CheckData();
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f895 	bl	80023fc <_ZN14Digitll_IN_OUT9CheckDataEv>
 80022d2:	e004      	b.n	80022de <_ZN14Digitll_IN_OUT4ReadEv+0x12e>
			}
		}
		else
		{
			CheckAddress(data);
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	4619      	mov	r1, r3
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f82d 	bl	8002338 <_ZN14Digitll_IN_OUT12CheckAddressEh>
		}
		timeoutCounter = 0;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	}

	//Timeoutcounter handling
	if (timeoutCounter >= READ_TIMEOUT)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80022ec:	2b63      	cmp	r3, #99	; 0x63
 80022ee:	d90c      	bls.n	800230a <_ZN14Digitll_IN_OUT4ReadEv+0x15a>
	{
		timeoutCounter = 0;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		isAddressReceived = false;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		expectedDataSize = 0;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8002308:	e007      	b.n	800231a <_ZN14Digitll_IN_OUT4ReadEv+0x16a>
	}
	else
	{
		timeoutCounter++;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8002310:	3301      	adds	r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	}

	previousConfigeWriteStatus = configeWriteStatus;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 8002326:	bf00      	nop
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	bd90      	pop	{r4, r7, pc}
 800232e:	bf00      	nop
 8002330:	48001c00 	.word	0x48001c00
 8002334:	48000800 	.word	0x48000800

08002338 <_ZN14Digitll_IN_OUT12CheckAddressEh>:

bool Digitll_IN_OUT::CheckAddress(uint8_t data)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	70fb      	strb	r3, [r7, #3]
	receivedAddress = data;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	78fa      	ldrb	r2, [r7, #3]
 8002348:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	switch (data)
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	3b01      	subs	r3, #1
 8002350:	2b19      	cmp	r3, #25
 8002352:	d841      	bhi.n	80023d8 <_ZN14Digitll_IN_OUT12CheckAddressEh+0xa0>
 8002354:	a201      	add	r2, pc, #4	; (adr r2, 800235c <_ZN14Digitll_IN_OUT12CheckAddressEh+0x24>)
 8002356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235a:	bf00      	nop
 800235c:	080023c5 	.word	0x080023c5
 8002360:	080023c5 	.word	0x080023c5
 8002364:	080023c5 	.word	0x080023c5
 8002368:	080023c5 	.word	0x080023c5
 800236c:	080023c5 	.word	0x080023c5
 8002370:	080023c5 	.word	0x080023c5
 8002374:	080023c5 	.word	0x080023c5
 8002378:	080023d9 	.word	0x080023d9
 800237c:	080023d9 	.word	0x080023d9
 8002380:	080023d9 	.word	0x080023d9
 8002384:	080023d9 	.word	0x080023d9
 8002388:	080023d9 	.word	0x080023d9
 800238c:	080023d9 	.word	0x080023d9
 8002390:	080023d9 	.word	0x080023d9
 8002394:	080023d9 	.word	0x080023d9
 8002398:	080023c5 	.word	0x080023c5
 800239c:	080023c5 	.word	0x080023c5
 80023a0:	080023c5 	.word	0x080023c5
 80023a4:	080023c5 	.word	0x080023c5
 80023a8:	080023cf 	.word	0x080023cf
 80023ac:	080023c5 	.word	0x080023c5
 80023b0:	080023c5 	.word	0x080023c5
 80023b4:	080023cf 	.word	0x080023cf
 80023b8:	080023cf 	.word	0x080023cf
 80023bc:	080023c5 	.word	0x080023c5
 80023c0:	080023c5 	.word	0x080023c5
		case CLAMPING_SPEED:
		case IN_POS_DIFF:
		case OPENING_DISTANCE:
		case OVER_CURRENT_WARNING:
		case OVER_CURRENT_ERROR:
			expectedDataSize = 1;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			break;
 80023cc:	e00e      	b.n	80023ec <_ZN14Digitll_IN_OUT12CheckAddressEh+0xb4>
		case SELF_SHUTDOWN_DELAY:
		case UNDERVOLTAGE_WARNING:
		case UNDERVOLTAGE_ERROR:
			expectedDataSize = 2;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2202      	movs	r2, #2
 80023d2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			break;
 80023d6:	e009      	b.n	80023ec <_ZN14Digitll_IN_OUT12CheckAddressEh+0xb4>
		default:
			receivedAddress = 0;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			expectedDataSize = 0;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			return false;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e000      	b.n	80023ee <_ZN14Digitll_IN_OUT12CheckAddressEh+0xb6>
			break;
	}
	return true;
 80023ec:	2301      	movs	r3, #1
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop

080023fc <_ZN14Digitll_IN_OUT9CheckDataEv>:

void Digitll_IN_OUT::CheckData()
{
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	switch (receivedAddress)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800240a:	3b01      	subs	r3, #1
 800240c:	2b19      	cmp	r3, #25
 800240e:	f200 8339 	bhi.w	8002a84 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
 8002412:	a201      	add	r2, pc, #4	; (adr r2, 8002418 <_ZN14Digitll_IN_OUT9CheckDataEv+0x1c>)
 8002414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002418:	08002481 	.word	0x08002481
 800241c:	080024af 	.word	0x080024af
 8002420:	080024e5 	.word	0x080024e5
 8002424:	08002513 	.word	0x08002513
 8002428:	08002541 	.word	0x08002541
 800242c:	0800256f 	.word	0x0800256f
 8002430:	0800259d 	.word	0x0800259d
 8002434:	08002a85 	.word	0x08002a85
 8002438:	08002a85 	.word	0x08002a85
 800243c:	08002a85 	.word	0x08002a85
 8002440:	08002a85 	.word	0x08002a85
 8002444:	08002a85 	.word	0x08002a85
 8002448:	08002a85 	.word	0x08002a85
 800244c:	08002a85 	.word	0x08002a85
 8002450:	08002a85 	.word	0x08002a85
 8002454:	080025cb 	.word	0x080025cb
 8002458:	08002639 	.word	0x08002639
 800245c:	080026a7 	.word	0x080026a7
 8002460:	08002715 	.word	0x08002715
 8002464:	0800293b 	.word	0x0800293b
 8002468:	08002783 	.word	0x08002783
 800246c:	080027f1 	.word	0x080027f1
 8002470:	080029a9 	.word	0x080029a9
 8002474:	08002a17 	.word	0x08002a17
 8002478:	0800285f 	.word	0x0800285f
 800247c:	080028cd 	.word	0x080028cd
	{
		case CLOSE:
			driveCommand->setClose(queue.Dequeue() == 0x01);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	338a      	adds	r3, #138	; 0x8a
 800248a:	4618      	mov	r0, r3
 800248c:	f002 f8c4 	bl	8004618 <_ZN5Queue7DequeueEv>
 8002490:	4603      	mov	r3, r0
 8002492:	2b01      	cmp	r3, #1
 8002494:	bf0c      	ite	eq
 8002496:	2301      	moveq	r3, #1
 8002498:	2300      	movne	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	4619      	mov	r1, r3
 800249e:	4620      	mov	r0, r4
 80024a0:	f001 fcd4 	bl	8003e4c <_ZN12DriveCommand8setCloseEb>
			statusChangedReg = true;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			break;
 80024ac:	e2ea      	b.n	8002a84 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case OPEN:
			driveCommand->setOpen(queue.Dequeue() == 0x01);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	338a      	adds	r3, #138	; 0x8a
 80024b8:	4618      	mov	r0, r3
 80024ba:	f002 f8ad 	bl	8004618 <_ZN5Queue7DequeueEv>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	bf0c      	ite	eq
 80024c4:	2301      	moveq	r3, #1
 80024c6:	2300      	movne	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	4619      	mov	r1, r3
 80024cc:	4620      	mov	r0, r4
 80024ce:	f001 fcdd 	bl	8003e8c <_ZN12DriveCommand7setOpenEb>
			statusChangedReg = true;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			statusChangedReg = true;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			break;
 80024e2:	e2cf      	b.n	8002a84 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case TEACH:
			driveCommand->setTeach(queue.Dequeue() == 0x01);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	338a      	adds	r3, #138	; 0x8a
 80024ee:	4618      	mov	r0, r3
 80024f0:	f002 f892 	bl	8004618 <_ZN5Queue7DequeueEv>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	bf0c      	ite	eq
 80024fa:	2301      	moveq	r3, #1
 80024fc:	2300      	movne	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	4619      	mov	r1, r3
 8002502:	4620      	mov	r0, r4
 8002504:	f001 fd62 	bl	8003fcc <_ZN12DriveCommand8setTeachEb>
			statusChangedReg = true;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			break;
 8002510:	e2b8      	b.n	8002a84 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case RESET:
			driveCommand->setReset(queue.Dequeue() == 0x01);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	338a      	adds	r3, #138	; 0x8a
 800251c:	4618      	mov	r0, r3
 800251e:	f002 f87b 	bl	8004618 <_ZN5Queue7DequeueEv>
 8002522:	4603      	mov	r3, r0
 8002524:	2b01      	cmp	r3, #1
 8002526:	bf0c      	ite	eq
 8002528:	2301      	moveq	r3, #1
 800252a:	2300      	movne	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	4619      	mov	r1, r3
 8002530:	4620      	mov	r0, r4
 8002532:	f001 fd0b 	bl	8003f4c <_ZN12DriveCommand8setResetEb>
			statusChangedReg = true;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			break;
 800253e:	e2a1      	b.n	8002a84 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case ENABLE:
			driveCommand->setEnable(queue.Dequeue() == 0x01);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	338a      	adds	r3, #138	; 0x8a
 800254a:	4618      	mov	r0, r3
 800254c:	f002 f864 	bl	8004618 <_ZN5Queue7DequeueEv>
 8002550:	4603      	mov	r3, r0
 8002552:	2b01      	cmp	r3, #1
 8002554:	bf0c      	ite	eq
 8002556:	2301      	moveq	r3, #1
 8002558:	2300      	movne	r3, #0
 800255a:	b2db      	uxtb	r3, r3
 800255c:	4619      	mov	r1, r3
 800255e:	4620      	mov	r0, r4
 8002560:	f001 fcd4 	bl	8003f0c <_ZN12DriveCommand9setEnableEb>
			statusChangedReg = true;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			break;
 800256c:	e28a      	b.n	8002a84 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case DISABLE:
			driveCommand->setDisable(queue.Dequeue() == 0x01);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	338a      	adds	r3, #138	; 0x8a
 8002578:	4618      	mov	r0, r3
 800257a:	f002 f84d 	bl	8004618 <_ZN5Queue7DequeueEv>
 800257e:	4603      	mov	r3, r0
 8002580:	2b01      	cmp	r3, #1
 8002582:	bf0c      	ite	eq
 8002584:	2301      	moveq	r3, #1
 8002586:	2300      	movne	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	4619      	mov	r1, r3
 800258c:	4620      	mov	r0, r4
 800258e:	f001 fc9d 	bl	8003ecc <_ZN12DriveCommand10setDisableEb>
			statusChangedReg = true;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			break;
 800259a:	e273      	b.n	8002a84 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case STOP:
			driveCommand->setStop(queue.Dequeue() == 0x01);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	338a      	adds	r3, #138	; 0x8a
 80025a6:	4618      	mov	r0, r3
 80025a8:	f002 f836 	bl	8004618 <_ZN5Queue7DequeueEv>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	bf0c      	ite	eq
 80025b2:	2301      	moveq	r3, #1
 80025b4:	2300      	movne	r3, #0
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	4619      	mov	r1, r3
 80025ba:	4620      	mov	r0, r4
 80025bc:	f001 fce6 	bl	8003f8c <_ZN12DriveCommand7setStopEb>
			statusChangedReg = true;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			break;
 80025c8:	e25c      	b.n	8002a84 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case TEACH_TORQUE:
			dataTemp[0] = queue.Dequeue();
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	338a      	adds	r3, #138	; 0x8a
 80025ce:	4618      	mov	r0, r3
 80025d0:	f002 f822 	bl	8004618 <_ZN5Queue7DequeueEv>
 80025d4:	4603      	mov	r3, r0
 80025d6:	461a      	mov	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	338a      	adds	r3, #138	; 0x8a
 80025e2:	4618      	mov	r0, r3
 80025e4:	f002 f818 	bl	8004618 <_ZN5Queue7DequeueEv>
 80025e8:	4603      	mov	r3, r0
 80025ea:	461a      	mov	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80025f8:	01db      	lsls	r3, r3, #7
 80025fa:	b21a      	sxth	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002602:	b21b      	sxth	r3, r3
 8002604:	4313      	orrs	r3, r2
 8002606:	b21b      	sxth	r3, r3
 8002608:	b29a      	uxth	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setTeachTroque(value);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800261c:	4619      	mov	r1, r3
 800261e:	4610      	mov	r0, r2
 8002620:	f001 fada 	bl	8003bd8 <_ZN13DriveSettings14setTeachTroqueEt>
			settingsChangedReg |= TEACH_TORQUE_CHANGE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 8002636:	e225      	b.n	8002a84 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case TEACH_SPEED:
			dataTemp[0] = queue.Dequeue();
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	338a      	adds	r3, #138	; 0x8a
 800263c:	4618      	mov	r0, r3
 800263e:	f001 ffeb 	bl	8004618 <_ZN5Queue7DequeueEv>
 8002642:	4603      	mov	r3, r0
 8002644:	461a      	mov	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	338a      	adds	r3, #138	; 0x8a
 8002650:	4618      	mov	r0, r3
 8002652:	f001 ffe1 	bl	8004618 <_ZN5Queue7DequeueEv>
 8002656:	4603      	mov	r3, r0
 8002658:	461a      	mov	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8002666:	01db      	lsls	r3, r3, #7
 8002668:	b21a      	sxth	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002670:	b21b      	sxth	r3, r3
 8002672:	4313      	orrs	r3, r2
 8002674:	b21b      	sxth	r3, r3
 8002676:	b29a      	uxth	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setTeachSpeed(value);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800268a:	4619      	mov	r1, r3
 800268c:	4610      	mov	r0, r2
 800268e:	f001 fa7c 	bl	8003b8a <_ZN13DriveSettings13setTeachSpeedEt>
			settingsChangedReg |= TEACH_SPEED_CHANGE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	b29a      	uxth	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 80026a4:	e1ee      	b.n	8002a84 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case CLAMPING_TORQUE:
			dataTemp[0] = queue.Dequeue();
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	338a      	adds	r3, #138	; 0x8a
 80026aa:	4618      	mov	r0, r3
 80026ac:	f001 ffb4 	bl	8004618 <_ZN5Queue7DequeueEv>
 80026b0:	4603      	mov	r3, r0
 80026b2:	461a      	mov	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	338a      	adds	r3, #138	; 0x8a
 80026be:	4618      	mov	r0, r3
 80026c0:	f001 ffaa 	bl	8004618 <_ZN5Queue7DequeueEv>
 80026c4:	4603      	mov	r3, r0
 80026c6:	461a      	mov	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80026d4:	01db      	lsls	r3, r3, #7
 80026d6:	b21a      	sxth	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80026de:	b21b      	sxth	r3, r3
 80026e0:	4313      	orrs	r3, r2
 80026e2:	b21b      	sxth	r3, r3
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setClampingTorque(value);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80026f8:	4619      	mov	r1, r3
 80026fa:	4610      	mov	r0, r2
 80026fc:	f001 f95b 	bl	80039b6 <_ZN13DriveSettings17setClampingTorqueEt>
			settingsChangedReg |= CLAMPING_TORQUE_CHANGE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002706:	f043 0304 	orr.w	r3, r3, #4
 800270a:	b29a      	uxth	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 8002712:	e1b7      	b.n	8002a84 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case CLAMPING_SPEED:
			dataTemp[0] = queue.Dequeue();
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	338a      	adds	r3, #138	; 0x8a
 8002718:	4618      	mov	r0, r3
 800271a:	f001 ff7d 	bl	8004618 <_ZN5Queue7DequeueEv>
 800271e:	4603      	mov	r3, r0
 8002720:	461a      	mov	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	338a      	adds	r3, #138	; 0x8a
 800272c:	4618      	mov	r0, r3
 800272e:	f001 ff73 	bl	8004618 <_ZN5Queue7DequeueEv>
 8002732:	4603      	mov	r3, r0
 8002734:	461a      	mov	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8002742:	01db      	lsls	r3, r3, #7
 8002744:	b21a      	sxth	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800274c:	b21b      	sxth	r3, r3
 800274e:	4313      	orrs	r3, r2
 8002750:	b21b      	sxth	r3, r3
 8002752:	b29a      	uxth	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setClampingSpeed(value);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002766:	4619      	mov	r1, r3
 8002768:	4610      	mov	r0, r2
 800276a:	f001 f8fd 	bl	8003968 <_ZN13DriveSettings16setClampingSpeedEt>
			settingsChangedReg |= CLAMPING_SPEED_CHANGE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002774:	f043 0308 	orr.w	r3, r3, #8
 8002778:	b29a      	uxth	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 8002780:	e180      	b.n	8002a84 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case IN_POS_DIFF:
			dataTemp[0] = queue.Dequeue();
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	338a      	adds	r3, #138	; 0x8a
 8002786:	4618      	mov	r0, r3
 8002788:	f001 ff46 	bl	8004618 <_ZN5Queue7DequeueEv>
 800278c:	4603      	mov	r3, r0
 800278e:	461a      	mov	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	338a      	adds	r3, #138	; 0x8a
 800279a:	4618      	mov	r0, r3
 800279c:	f001 ff3c 	bl	8004618 <_ZN5Queue7DequeueEv>
 80027a0:	4603      	mov	r3, r0
 80027a2:	461a      	mov	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80027b0:	01db      	lsls	r3, r3, #7
 80027b2:	b21a      	sxth	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80027ba:	b21b      	sxth	r3, r3
 80027bc:	4313      	orrs	r3, r2
 80027be:	b21b      	sxth	r3, r3
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setInPosDiff(value);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80027d4:	4619      	mov	r1, r3
 80027d6:	4610      	mov	r0, r2
 80027d8:	f001 f914 	bl	8003a04 <_ZN13DriveSettings12setInPosDiffEt>
			settingsChangedReg |= IN_POS_DIFF_CHANGE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80027e2:	f043 0320 	orr.w	r3, r3, #32
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 80027ee:	e149      	b.n	8002a84 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case OPENING_DISTANCE:
			dataTemp[0] = queue.Dequeue();
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	338a      	adds	r3, #138	; 0x8a
 80027f4:	4618      	mov	r0, r3
 80027f6:	f001 ff0f 	bl	8004618 <_ZN5Queue7DequeueEv>
 80027fa:	4603      	mov	r3, r0
 80027fc:	461a      	mov	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	338a      	adds	r3, #138	; 0x8a
 8002808:	4618      	mov	r0, r3
 800280a:	f001 ff05 	bl	8004618 <_ZN5Queue7DequeueEv>
 800280e:	4603      	mov	r3, r0
 8002810:	461a      	mov	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800281e:	01db      	lsls	r3, r3, #7
 8002820:	b21a      	sxth	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002828:	b21b      	sxth	r3, r3
 800282a:	4313      	orrs	r3, r2
 800282c:	b21b      	sxth	r3, r3
 800282e:	b29a      	uxth	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setOpeningDistance(value);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002842:	4619      	mov	r1, r3
 8002844:	4610      	mov	r0, r2
 8002846:	f001 f904 	bl	8003a52 <_ZN13DriveSettings18setOpeningDistanceEt>
			settingsChangedReg |= OPENING_DISTANCE_CHANGE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002854:	b29a      	uxth	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 800285c:	e112      	b.n	8002a84 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case OVER_CURRENT_WARNING:
			dataTemp[0] = queue.Dequeue();
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	338a      	adds	r3, #138	; 0x8a
 8002862:	4618      	mov	r0, r3
 8002864:	f001 fed8 	bl	8004618 <_ZN5Queue7DequeueEv>
 8002868:	4603      	mov	r3, r0
 800286a:	461a      	mov	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	338a      	adds	r3, #138	; 0x8a
 8002876:	4618      	mov	r0, r3
 8002878:	f001 fece 	bl	8004618 <_ZN5Queue7DequeueEv>
 800287c:	4603      	mov	r3, r0
 800287e:	461a      	mov	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800288c:	01db      	lsls	r3, r3, #7
 800288e:	b21a      	sxth	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002896:	b21b      	sxth	r3, r3
 8002898:	4313      	orrs	r3, r2
 800289a:	b21b      	sxth	r3, r3
 800289c:	b29a      	uxth	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setOverCurrentWarning(value);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80028b0:	4619      	mov	r1, r3
 80028b2:	4610      	mov	r0, r2
 80028b4:	f001 f91b 	bl	8003aee <_ZN13DriveSettings21setOverCurrentWarningEt>
			settingsChangedReg |= OVER_CURRENT_WARNING_CHANGE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80028be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 80028ca:	e0db      	b.n	8002a84 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case OVER_CURRENT_ERROR:
			dataTemp[0] = queue.Dequeue();
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	338a      	adds	r3, #138	; 0x8a
 80028d0:	4618      	mov	r0, r3
 80028d2:	f001 fea1 	bl	8004618 <_ZN5Queue7DequeueEv>
 80028d6:	4603      	mov	r3, r0
 80028d8:	461a      	mov	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	338a      	adds	r3, #138	; 0x8a
 80028e4:	4618      	mov	r0, r3
 80028e6:	f001 fe97 	bl	8004618 <_ZN5Queue7DequeueEv>
 80028ea:	4603      	mov	r3, r0
 80028ec:	461a      	mov	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80028fa:	01db      	lsls	r3, r3, #7
 80028fc:	b21a      	sxth	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002904:	b21b      	sxth	r3, r3
 8002906:	4313      	orrs	r3, r2
 8002908:	b21b      	sxth	r3, r3
 800290a:	b29a      	uxth	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setOverCurrentError(value);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800291e:	4619      	mov	r1, r3
 8002920:	4610      	mov	r0, r2
 8002922:	f001 f9ce 	bl	8003cc2 <_ZN13DriveSettings19setOverCurrentErrorEt>
			settingsChangedReg |= OVER_CURRENT_ERROR_CHANGE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800292c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002930:	b29a      	uxth	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 8002938:	e0a4      	b.n	8002a84 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case SELF_SHUTDOWN_DELAY:
			dataTemp[0] = queue.Dequeue();
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	338a      	adds	r3, #138	; 0x8a
 800293e:	4618      	mov	r0, r3
 8002940:	f001 fe6a 	bl	8004618 <_ZN5Queue7DequeueEv>
 8002944:	4603      	mov	r3, r0
 8002946:	461a      	mov	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	338a      	adds	r3, #138	; 0x8a
 8002952:	4618      	mov	r0, r3
 8002954:	f001 fe60 	bl	8004618 <_ZN5Queue7DequeueEv>
 8002958:	4603      	mov	r3, r0
 800295a:	461a      	mov	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8002968:	01db      	lsls	r3, r3, #7
 800296a:	b21a      	sxth	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002972:	b21b      	sxth	r3, r3
 8002974:	4313      	orrs	r3, r2
 8002976:	b21b      	sxth	r3, r3
 8002978:	b29a      	uxth	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setSelfShutdownDelay(value);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800298c:	4619      	mov	r1, r3
 800298e:	4610      	mov	r0, r2
 8002990:	f001 f8d4 	bl	8003b3c <_ZN13DriveSettings20setSelfShutdownDelayEt>
			settingsChangedReg |= SELF_SHUTDOWN_DELAY_CHANGE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800299a:	f043 0310 	orr.w	r3, r3, #16
 800299e:	b29a      	uxth	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 80029a6:	e06d      	b.n	8002a84 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case UNDERVOLTAGE_WARNING:
			dataTemp[0] = queue.Dequeue();
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	338a      	adds	r3, #138	; 0x8a
 80029ac:	4618      	mov	r0, r3
 80029ae:	f001 fe33 	bl	8004618 <_ZN5Queue7DequeueEv>
 80029b2:	4603      	mov	r3, r0
 80029b4:	461a      	mov	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	338a      	adds	r3, #138	; 0x8a
 80029c0:	4618      	mov	r0, r3
 80029c2:	f001 fe29 	bl	8004618 <_ZN5Queue7DequeueEv>
 80029c6:	4603      	mov	r3, r0
 80029c8:	461a      	mov	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80029d6:	01db      	lsls	r3, r3, #7
 80029d8:	b21a      	sxth	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80029e0:	b21b      	sxth	r3, r3
 80029e2:	4313      	orrs	r3, r2
 80029e4:	b21b      	sxth	r3, r3
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setUnderVoltageWarning(value);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80029fa:	4619      	mov	r1, r3
 80029fc:	4610      	mov	r0, r2
 80029fe:	f001 f939 	bl	8003c74 <_ZN13DriveSettings22setUnderVoltageWarningEt>
			settingsChangedReg |= UNDERVOLTAGE_WARNING_CHANGE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 8002a14:	e036      	b.n	8002a84 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case UNDERVOLTAGE_ERROR:
			dataTemp[0] = queue.Dequeue();
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	338a      	adds	r3, #138	; 0x8a
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f001 fdfc 	bl	8004618 <_ZN5Queue7DequeueEv>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	338a      	adds	r3, #138	; 0x8a
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f001 fdf2 	bl	8004618 <_ZN5Queue7DequeueEv>
 8002a34:	4603      	mov	r3, r0
 8002a36:	461a      	mov	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8002a44:	01db      	lsls	r3, r3, #7
 8002a46:	b21a      	sxth	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002a4e:	b21b      	sxth	r3, r3
 8002a50:	4313      	orrs	r3, r2
 8002a52:	b21b      	sxth	r3, r3
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setUnderVoltageError(value);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	f001 f8db 	bl	8003c26 <_ZN13DriveSettings20setUnderVoltageErrorEt>
			settingsChangedReg |= UNDERVOLTAGE_ERROR_CHANGE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 8002a82:	bf00      	nop
	}
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd90      	pop	{r4, r7, pc}

08002a8c <_ZN14Digitll_IN_OUT17isSettingsChangedEv>:


uint16_t Digitll_IN_OUT::isSettingsChanged(){
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
	return settingsChangedReg;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>:

void Digitll_IN_OUT::ResetSettingsChanged(uint16_t bit){
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	807b      	strh	r3, [r7, #2]
	settingsChangedReg &= ~bit;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002ab8:	b21a      	sxth	r2, r3
 8002aba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	b21b      	sxth	r3, r3
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	b21b      	sxth	r3, r3
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <_ZN14Digitll_IN_OUT15isStatusChangedEv>:

bool Digitll_IN_OUT::isStatusChanged(){
 8002ada:	b480      	push	{r7}
 8002adc:	b085      	sub	sp, #20
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
	bool statusChangedRegTemp = statusChangedReg;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8002ae8:	73fb      	strb	r3, [r7, #15]
	statusChangedReg = false;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	return statusChangedRegTemp;
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>:
 */

#include "DO.h"
#include "../Tools/Delay.h"

DigitalOut::DigitalOut(GPIO_TypeDef* GPIOx_N, uint16_t GPIO_Pin_N, GPIO_TypeDef* GPIOx_P, uint16_t GPIO_Pin_P){
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	80fb      	strh	r3, [r7, #6]
	this->GPIO_Pin_N = GPIO_Pin_N;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	88fa      	ldrh	r2, [r7, #6]
 8002b14:	809a      	strh	r2, [r3, #4]
	this->GPIOx_N = GPIOx_N;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	601a      	str	r2, [r3, #0]
	this->GPIO_Pin_N = GPIO_Pin_P;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8b3a      	ldrh	r2, [r7, #24]
 8002b20:	809a      	strh	r2, [r3, #4]
	this->GPIOx_N = GPIOx_P;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	601a      	str	r2, [r3, #0]
}
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <_ZN10DigitalOut3SetEv>:


/*
 *
 */
void DigitalOut::Set() {
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
	//P set, N reset
	HAL_GPIO_WritePin(GPIOx_N, GPIO_Pin_N, GPIO_PIN_RESET);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	889b      	ldrh	r3, [r3, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f004 fbeb 	bl	8007324 <HAL_GPIO_WritePin>
	Delay::DWT_Delay_us(25);
 8002b4e:	2019      	movs	r0, #25
 8002b50:	f001 fcdc 	bl	800450c <_ZN5Delay12DWT_Delay_usEm>
	HAL_GPIO_WritePin(GPIOx_P, GPIO_Pin_P, GPIO_PIN_SET);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6898      	ldr	r0, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	899b      	ldrh	r3, [r3, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f004 fbe0 	bl	8007324 <HAL_GPIO_WritePin>
	status = true;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	739a      	strb	r2, [r3, #14]
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <_ZN10DigitalOut5ResetEv>:


/*
 *
 */
void DigitalOut::Reset() {
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOx_P, GPIO_Pin_P, GPIO_PIN_RESET);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6898      	ldr	r0, [r3, #8]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	899b      	ldrh	r3, [r3, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	4619      	mov	r1, r3
 8002b86:	f004 fbcd 	bl	8007324 <HAL_GPIO_WritePin>
	Delay::DWT_Delay_us(25);
 8002b8a:	2019      	movs	r0, #25
 8002b8c:	f001 fcbe 	bl	800450c <_ZN5Delay12DWT_Delay_usEm>
	HAL_GPIO_WritePin(GPIOx_N, GPIO_Pin_N, GPIO_PIN_SET);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	889b      	ldrh	r3, [r3, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	f004 fbc2 	bl	8007324 <HAL_GPIO_WritePin>
	status = false;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	739a      	strb	r2, [r3, #14]
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <_ZN3LEDC1EP12GPIO_TypeDeftb>:


#include "LED.h"


LED::LED(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool outputInverted) {
 8002bae:	b480      	push	{r7}
 8002bb0:	b085      	sub	sp, #20
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	4611      	mov	r1, r2
 8002bba:	461a      	mov	r2, r3
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	80fb      	strh	r3, [r7, #6]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	717b      	strb	r3, [r7, #5]

	this->GPIO_Pin = GPIO_Pin;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	88fa      	ldrh	r2, [r7, #6]
 8002bc8:	809a      	strh	r2, [r3, #4]
	this->GPIOx = GPIOx;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	601a      	str	r2, [r3, #0]
	this->outputInverted = outputInverted;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	797a      	ldrb	r2, [r7, #5]
 8002bd4:	719a      	strb	r2, [r3, #6]
}
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <_ZN3LED3OFFEv>:
}

/*
 * LED OFF method
 */
void LED::OFF() {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
	//check if output is inverted
	if(outputInverted){
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	799b      	ldrb	r3, [r3, #6]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <_ZN3LED3OFFEv+0x22>
		//clear output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	889b      	ldrh	r3, [r3, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f004 fb90 	bl	8007324 <HAL_GPIO_WritePin>
	}else{
		//write output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
	}
}
 8002c04:	e007      	b.n	8002c16 <_ZN3LED3OFFEv+0x32>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	889b      	ldrh	r3, [r3, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	4619      	mov	r1, r3
 8002c12:	f004 fb87 	bl	8007324 <HAL_GPIO_WritePin>
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <_ZN3LED6ToggleEv>:

/*
 * LED Toggle method
 */
void LED::Toggle() {
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	889b      	ldrh	r3, [r3, #4]
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4610      	mov	r0, r2
 8002c32:	f004 fb8f 	bl	8007354 <HAL_GPIO_TogglePin>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <_ZN13CommunicationC1EP11DriveStatusP13DriveSettingsP10RFM95_LoRaP14Digitll_IN_OUTP12DriveCommand>:
 *      Author: marce
 */

#include "Communication.h"

Communication::Communication(DriveStatus *driveStatus,
 8002c3e:	b480      	push	{r7}
 8002c40:	b085      	sub	sp, #20
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
 8002c4a:	603b      	str	r3, [r7, #0]
		DriveSettings *driveSettings, RFM95_LoRa *rfm95, Digitll_IN_OUT *digitalInOut, DriveCommand *driveCommand)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	3314      	adds	r3, #20
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	811a      	strh	r2, [r3, #8]
{
	this->driveSettings = driveSettings;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	605a      	str	r2, [r3, #4]
	this->driveStatus = driveStatus;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	601a      	str	r2, [r3, #0]
	this->rfm95 = rfm95;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	60da      	str	r2, [r3, #12]
	this->digitalInOut = digitalInOut;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	611a      	str	r2, [r3, #16]
	this->driveCommand = driveCommand;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	609a      	str	r2, [r3, #8]
}
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <_ZN13Communication9UpdateComEv>:
 * 1. Priority -> write Status (
 *
 *
 */
bool Communication::UpdateCom()
{
 8002c84:	b590      	push	{r4, r7, lr}
 8002c86:	b08b      	sub	sp, #44	; 0x2c
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
	uint8_t data2send[6] =
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	2300      	movs	r3, #0
 8002c92:	81bb      	strh	r3, [r7, #12]
	{ 0 };

	if (digitalInOut->isStatusChanged())
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff1e 	bl	8002ada <_ZN14Digitll_IN_OUT15isStatusChangedEv>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d065      	beq.n	8002d70 <_ZN13Communication9UpdateComEv+0xec>
	{
		uint8_t data = ((uint8_t) driveCommand->isClose() << 8)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f001 f8be 	bl	8003e2a <_ZN12DriveCommand7isCloseEv>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	021b      	lsls	r3, r3, #8
				| ((uint8_t) driveCommand->isDisable() << 8)
 8002cb2:	b25c      	sxtb	r4, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f001 f8f6 	bl	8003eaa <_ZN12DriveCommand9isDisableEv>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	b25b      	sxtb	r3, r3
 8002cc4:	4323      	orrs	r3, r4
 8002cc6:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveCommand->isEnable() << 8)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f001 f90c 	bl	8003eea <_ZN12DriveCommand8isEnableEv>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	b25b      	sxtb	r3, r3
 8002cd8:	4323      	orrs	r3, r4
 8002cda:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveCommand->isOpen() << 8)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f001 f8c2 	bl	8003e6a <_ZN12DriveCommand6isOpenEv>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	b25b      	sxtb	r3, r3
 8002cec:	4323      	orrs	r3, r4
 8002cee:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveCommand->isReset() << 8)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f001 f918 	bl	8003f2a <_ZN12DriveCommand7isResetEv>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	b25b      	sxtb	r3, r3
 8002d00:	4323      	orrs	r3, r4
 8002d02:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveCommand->isStop() << 8)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f001 f92e 	bl	8003f6a <_ZN12DriveCommand6isStopEv>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	021b      	lsls	r3, r3, #8
 8002d12:	b25b      	sxtb	r3, r3
 8002d14:	4323      	orrs	r3, r4
 8002d16:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveCommand->isTeach() << 8)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f001 f944 	bl	8003faa <_ZN12DriveCommand7isTeachEv>
 8002d22:	4603      	mov	r3, r0
 8002d24:	021b      	lsls	r3, r3, #8
 8002d26:	b25b      	sxtb	r3, r3
 8002d28:	4323      	orrs	r3, r4
 8002d2a:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveCommand->isWriteConfig() << 8);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f001 f95f 	bl	8003ff4 <_ZN12DriveCommand13isWriteConfigEv>
 8002d36:	4603      	mov	r3, r0
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	b25b      	sxtb	r3, r3
 8002d3c:	4323      	orrs	r3, r4
 8002d3e:	b25b      	sxtb	r3, r3
 8002d40:	73fb      	strb	r3, [r7, #15]

		data2send[0] = driveSettings->getDeviceAddress();
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 ffd6 	bl	8003cf8 <_ZNK13DriveSettings16getDeviceAddressEv>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	723b      	strb	r3, [r7, #8]
		//data2send[1] = SEND_COMMAND;
		data2send[2] = data;
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	72bb      	strb	r3, [r7, #10]
		data2send[3] = 5;
 8002d54:	2305      	movs	r3, #5
 8002d56:	72fb      	strb	r3, [r7, #11]
		data2send[4] = CRC8(data2send, data2send[3] - 1);
 8002d58:	7afb      	ldrb	r3, [r7, #11]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	f107 0308 	add.w	r3, r7, #8
 8002d62:	4619      	mov	r1, r3
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f99d 	bl	80030a4 <_ZN13Communication4CRC8EPhh>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	733b      	strb	r3, [r7, #12]
 8002d6e:	e17e      	b.n	800306e <_ZN13Communication9UpdateComEv+0x3ea>
	}
	else if (digitalInOut->isSettingsChanged() != 0)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fe89 	bl	8002a8c <_ZN14Digitll_IN_OUT17isSettingsChangedEv>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf14      	ite	ne
 8002d80:	2301      	movne	r3, #1
 8002d82:	2300      	moveq	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 815d 	beq.w	8003046 <_ZN13Communication9UpdateComEv+0x3c2>
	{
		uint16_t commands = digitalInOut->isSettingsChanged();
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fe7b 	bl	8002a8c <_ZN14Digitll_IN_OUT17isSettingsChangedEv>
 8002d96:	4603      	mov	r3, r0
 8002d98:	84fb      	strh	r3, [r7, #38]	; 0x26
		data2send[0] = driveSettings->getDeviceAddress();
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 ffaa 	bl	8003cf8 <_ZNK13DriveSettings16getDeviceAddressEv>
 8002da4:	4603      	mov	r3, r0
 8002da6:	723b      	strb	r3, [r7, #8]
		//data2send[1] = SEND_SETTINGS;

		if (commands & TEACH_TORQUE_CHANGE)
 8002da8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d017      	beq.n	8002de2 <_ZN13Communication9UpdateComEv+0x15e>
		{
			data2send[2] = TEACH_TORQUE;
 8002db2:	2310      	movs	r3, #16
 8002db4:	72bb      	strb	r3, [r7, #10]
			uint16_t value = driveSettings->getTeachTroque();
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 ff00 	bl	8003bc0 <_ZNK13DriveSettings14getTeachTroqueEv>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	823b      	strh	r3, [r7, #16]
			data2send[3] = value >> 8;
 8002dc4:	8a3b      	ldrh	r3, [r7, #16]
 8002dc6:	0a1b      	lsrs	r3, r3, #8
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8002dce:	8a3b      	ldrh	r3, [r7, #16]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(TEACH_TORQUE_CHANGE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	2101      	movs	r1, #1
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff fe63 	bl	8002aa6 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8002de0:	e123      	b.n	800302a <_ZN13Communication9UpdateComEv+0x3a6>
		}
		else if (commands & TEACH_SPEED_CHANGE)
 8002de2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d017      	beq.n	8002e1c <_ZN13Communication9UpdateComEv+0x198>
		{
			uint16_t value = driveSettings->getTeachSpeed();
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 febe 	bl	8003b72 <_ZNK13DriveSettings13getTeachSpeedEv>
 8002df6:	4603      	mov	r3, r0
 8002df8:	827b      	strh	r3, [r7, #18]
			data2send[2] = TEACH_SPEED;
 8002dfa:	2311      	movs	r3, #17
 8002dfc:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 8002dfe:	8a7b      	ldrh	r3, [r7, #18]
 8002e00:	0a1b      	lsrs	r3, r3, #8
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8002e08:	8a7b      	ldrh	r3, [r7, #18]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(TEACH_SPEED_CHANGE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	2102      	movs	r1, #2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff fe46 	bl	8002aa6 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8002e1a:	e106      	b.n	800302a <_ZN13Communication9UpdateComEv+0x3a6>
		}
		else if (commands & CLAMPING_TORQUE_CHANGE)
 8002e1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d017      	beq.n	8002e56 <_ZN13Communication9UpdateComEv+0x1d2>
		{
			uint16_t value = driveSettings->getClampingTorque();
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fdb7 	bl	800399e <_ZNK13DriveSettings17getClampingTorqueEv>
 8002e30:	4603      	mov	r3, r0
 8002e32:	82bb      	strh	r3, [r7, #20]
			data2send[2] = CLAMPING_TORQUE;
 8002e34:	2312      	movs	r3, #18
 8002e36:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 8002e38:	8abb      	ldrh	r3, [r7, #20]
 8002e3a:	0a1b      	lsrs	r3, r3, #8
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8002e42:	8abb      	ldrh	r3, [r7, #20]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(CLAMPING_TORQUE_CHANGE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2104      	movs	r1, #4
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fe29 	bl	8002aa6 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8002e54:	e0e9      	b.n	800302a <_ZN13Communication9UpdateComEv+0x3a6>
		}
		else if (commands & CLAMPING_SPEED_CHANGE)
 8002e56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d017      	beq.n	8002e90 <_ZN13Communication9UpdateComEv+0x20c>
		{
			uint16_t value = driveSettings->getClampingSpeed();
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fd73 	bl	8003950 <_ZNK13DriveSettings16getClampingSpeedEv>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	82fb      	strh	r3, [r7, #22]
			data2send[2] = CLAMPING_SPEED;
 8002e6e:	2313      	movs	r3, #19
 8002e70:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 8002e72:	8afb      	ldrh	r3, [r7, #22]
 8002e74:	0a1b      	lsrs	r3, r3, #8
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8002e7c:	8afb      	ldrh	r3, [r7, #22]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(CLAMPING_SPEED_CHANGE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2108      	movs	r1, #8
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff fe0c 	bl	8002aa6 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8002e8e:	e0cc      	b.n	800302a <_ZN13Communication9UpdateComEv+0x3a6>
		}
		else if (commands & SELF_SHUTDOWN_DELAY_CHANGE)
 8002e90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d017      	beq.n	8002eca <_ZN13Communication9UpdateComEv+0x246>
		{
			uint16_t value = driveSettings->getSelfShutdownDelay();
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fe40 	bl	8003b24 <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	833b      	strh	r3, [r7, #24]
			data2send[2] = SELF_SHUTDOWN_DELAY;
 8002ea8:	2314      	movs	r3, #20
 8002eaa:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 8002eac:	8b3b      	ldrh	r3, [r7, #24]
 8002eae:	0a1b      	lsrs	r3, r3, #8
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8002eb6:	8b3b      	ldrh	r3, [r7, #24]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(SELF_SHUTDOWN_DELAY_CHANGE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	2110      	movs	r1, #16
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fdef 	bl	8002aa6 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8002ec8:	e0af      	b.n	800302a <_ZN13Communication9UpdateComEv+0x3a6>
		}
		else if (commands & IN_POS_DIFF_CHANGE)
 8002eca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d017      	beq.n	8002f04 <_ZN13Communication9UpdateComEv+0x280>
		{
			uint16_t value = driveSettings->getInPosDiff();
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fd87 	bl	80039ec <_ZNK13DriveSettings12getInPosDiffEv>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	837b      	strh	r3, [r7, #26]
			data2send[2] = IN_POS_DIFF;
 8002ee2:	2315      	movs	r3, #21
 8002ee4:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 8002ee6:	8b7b      	ldrh	r3, [r7, #26]
 8002ee8:	0a1b      	lsrs	r3, r3, #8
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8002ef0:	8b7b      	ldrh	r3, [r7, #26]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(IN_POS_DIFF_CHANGE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2120      	movs	r1, #32
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff fdd2 	bl	8002aa6 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8002f02:	e092      	b.n	800302a <_ZN13Communication9UpdateComEv+0x3a6>
		}
		else if (commands & OPENING_DISTANCE_CHANGE)
 8002f04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d017      	beq.n	8002f3e <_ZN13Communication9UpdateComEv+0x2ba>
		{
			uint16_t value = driveSettings->getOpeningDistance();
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fd91 	bl	8003a3a <_ZNK13DriveSettings18getOpeningDistanceEv>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	83bb      	strh	r3, [r7, #28]
			data2send[2] = OPENING_DISTANCE;
 8002f1c:	2316      	movs	r3, #22
 8002f1e:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 8002f20:	8bbb      	ldrh	r3, [r7, #28]
 8002f22:	0a1b      	lsrs	r3, r3, #8
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8002f2a:	8bbb      	ldrh	r3, [r7, #28]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(OPENING_DISTANCE_CHANGE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	2140      	movs	r1, #64	; 0x40
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff fdb5 	bl	8002aa6 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8002f3c:	e075      	b.n	800302a <_ZN13Communication9UpdateComEv+0x3a6>
		}
		else if (commands & UNDERVOLTAGE_WARNING_CHANGE)
 8002f3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d017      	beq.n	8002f78 <_ZN13Communication9UpdateComEv+0x2f4>
		{
			uint16_t value = driveSettings->getUnderVoltageWarning();
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 fe85 	bl	8003c5c <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 8002f52:	4603      	mov	r3, r0
 8002f54:	83fb      	strh	r3, [r7, #30]
			data2send[2] = UNDERVOLTAGE_WARNING;
 8002f56:	2317      	movs	r3, #23
 8002f58:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 8002f5a:	8bfb      	ldrh	r3, [r7, #30]
 8002f5c:	0a1b      	lsrs	r3, r3, #8
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8002f64:	8bfb      	ldrh	r3, [r7, #30]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(UNDERVOLTAGE_WARNING_CHANGE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2180      	movs	r1, #128	; 0x80
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fd98 	bl	8002aa6 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8002f76:	e058      	b.n	800302a <_ZN13Communication9UpdateComEv+0x3a6>
		}
		else if (commands & UNDERVOLTAGE_ERROR_CHANGE)
 8002f78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d018      	beq.n	8002fb4 <_ZN13Communication9UpdateComEv+0x330>
		{
			uint16_t value = driveSettings->getUnderVoltageError();
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fe41 	bl	8003c0e <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	843b      	strh	r3, [r7, #32]
			data2send[2] = UNDERVOLTAGE_ERROR;
 8002f90:	2318      	movs	r3, #24
 8002f92:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 8002f94:	8c3b      	ldrh	r3, [r7, #32]
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8002f9e:	8c3b      	ldrh	r3, [r7, #32]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(UNDERVOLTAGE_ERROR_CHANGE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff fd7a 	bl	8002aa6 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8002fb2:	e03a      	b.n	800302a <_ZN13Communication9UpdateComEv+0x3a6>
		}
		else if (commands & OVER_CURRENT_WARNING_CHANGE)
 8002fb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002fb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d018      	beq.n	8002ff0 <_ZN13Communication9UpdateComEv+0x36c>
		{
			uint16_t value = driveSettings->getOverCurrentWarning();
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fd87 	bl	8003ad6 <_ZNK13DriveSettings21getOverCurrentWarningEv>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	847b      	strh	r3, [r7, #34]	; 0x22
			data2send[2] = OVER_CURRENT_WARNING;
 8002fcc:	2319      	movs	r3, #25
 8002fce:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 8002fd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002fd2:	0a1b      	lsrs	r3, r3, #8
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8002fda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(OVER_CURRENT_WARNING_CHANGE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fd5c 	bl	8002aa6 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8002fee:	e01c      	b.n	800302a <_ZN13Communication9UpdateComEv+0x3a6>
		}
		else if (commands & OVER_CURRENT_ERROR_CHANGE)
 8002ff0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d017      	beq.n	800302a <_ZN13Communication9UpdateComEv+0x3a6>
		{
			uint16_t value = driveSettings->getOverCurrentError();
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fe53 	bl	8003caa <_ZNK13DriveSettings19getOverCurrentErrorEv>
 8003004:	4603      	mov	r3, r0
 8003006:	84bb      	strh	r3, [r7, #36]	; 0x24
			data2send[2] = OVER_CURRENT_ERROR;
 8003008:	231a      	movs	r3, #26
 800300a:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 800300c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800300e:	0a1b      	lsrs	r3, r3, #8
 8003010:	b29b      	uxth	r3, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8003016:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003018:	b2db      	uxtb	r3, r3
 800301a:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(OVER_CURRENT_ERROR_CHANGE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff fd3e 	bl	8002aa6 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
		}

		data2send[4] = 6;
 800302a:	2306      	movs	r3, #6
 800302c:	733b      	strb	r3, [r7, #12]
		data2send[5] = CRC8(data2send, data2send[4]-1);
 800302e:	7b3b      	ldrb	r3, [r7, #12]
 8003030:	3b01      	subs	r3, #1
 8003032:	b2da      	uxtb	r2, r3
 8003034:	f107 0308 	add.w	r3, r7, #8
 8003038:	4619      	mov	r1, r3
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f832 	bl	80030a4 <_ZN13Communication4CRC8EPhh>
 8003040:	4603      	mov	r3, r0
 8003042:	737b      	strb	r3, [r7, #13]
 8003044:	e013      	b.n	800306e <_ZN13Communication9UpdateComEv+0x3ea>
	}
	else
	{
		data2send[0] = driveSettings->getDeviceAddress();
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fe54 	bl	8003cf8 <_ZNK13DriveSettings16getDeviceAddressEv>
 8003050:	4603      	mov	r3, r0
 8003052:	723b      	strb	r3, [r7, #8]
		//data2send[1] = SEND_STATUS_REQ;
		data2send[2] = 4;
 8003054:	2304      	movs	r3, #4
 8003056:	72bb      	strb	r3, [r7, #10]
		data2send[3] = CRC8(data2send, data2send[2]-1);
 8003058:	7abb      	ldrb	r3, [r7, #10]
 800305a:	3b01      	subs	r3, #1
 800305c:	b2da      	uxtb	r2, r3
 800305e:	f107 0308 	add.w	r3, r7, #8
 8003062:	4619      	mov	r1, r3
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f81d 	bl	80030a4 <_ZN13Communication4CRC8EPhh>
 800306a:	4603      	mov	r3, r0
 800306c:	72fb      	strb	r3, [r7, #11]
	}

	rfm95->beginPacket();
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	2100      	movs	r1, #0
 8003074:	4618      	mov	r0, r3
 8003076:	f000 f93a 	bl	80032ee <_ZN10RFM95_LoRa11beginPacketEi>
	rfm95->write(data2send, 6);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68d8      	ldr	r0, [r3, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3304      	adds	r3, #4
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f107 0108 	add.w	r1, r7, #8
 800308c:	2206      	movs	r2, #6
 800308e:	4798      	blx	r3
	rfm95->endPacket();
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4618      	mov	r0, r3
 8003096:	f000 f94b 	bl	8003330 <_ZN10RFM95_LoRa9endPacketEv>
	return true;
 800309a:	2301      	movs	r3, #1
}
 800309c:	4618      	mov	r0, r3
 800309e:	372c      	adds	r7, #44	; 0x2c
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd90      	pop	{r4, r7, pc}

080030a4 <_ZN13Communication4CRC8EPhh>:

}


uint8_t Communication::CRC8(uint8_t *data, uint8_t length)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b089      	sub	sp, #36	; 0x24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	4613      	mov	r3, r2
 80030b0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0xff;
 80030b2:	23ff      	movs	r3, #255	; 0xff
 80030b4:	77fb      	strb	r3, [r7, #31]
	size_t i, j;
	for (i = 0; i < length; i++)
 80030b6:	2300      	movs	r3, #0
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d222      	bcs.n	8003108 <_ZN13Communication4CRC8EPhh+0x64>
	{
		crc ^= data[i];
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	4413      	add	r3, r2
 80030c8:	781a      	ldrb	r2, [r3, #0]
 80030ca:	7ffb      	ldrb	r3, [r7, #31]
 80030cc:	4053      	eors	r3, r2
 80030ce:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	2b07      	cmp	r3, #7
 80030d8:	d812      	bhi.n	8003100 <_ZN13Communication4CRC8EPhh+0x5c>
		{
			if ((crc & 0x80) != 0)
 80030da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	da07      	bge.n	80030f2 <_ZN13Communication4CRC8EPhh+0x4e>
				crc = (uint8_t) ((crc << 1) ^ 0x31);
 80030e2:	7ffb      	ldrb	r3, [r7, #31]
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	b25b      	sxtb	r3, r3
 80030e8:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 80030ec:	b25b      	sxtb	r3, r3
 80030ee:	77fb      	strb	r3, [r7, #31]
 80030f0:	e002      	b.n	80030f8 <_ZN13Communication4CRC8EPhh+0x54>
			else
				crc <<= 1;
 80030f2:	7ffb      	ldrb	r3, [r7, #31]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	3301      	adds	r3, #1
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	e7e9      	b.n	80030d4 <_ZN13Communication4CRC8EPhh+0x30>
	for (i = 0; i < length; i++)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	3301      	adds	r3, #1
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	e7d8      	b.n	80030ba <_ZN13Communication4CRC8EPhh+0x16>
		}
	}
	return crc;
 8003108:	7ffb      	ldrb	r3, [r7, #31]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3724      	adds	r7, #36	; 0x24
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <_ZN10RFM95_LoRaC1Ev>:
 */

#include "RFM95.h"
#include "../AppMain/AppMain.h"

RFM95_LoRa::RFM95_LoRa() :
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(0)
 8003120:	4a0a      	ldr	r2, [pc, #40]	; (800314c <_ZN10RFM95_LoRaC1Ev+0x34>)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	611a      	str	r2, [r3, #16]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	615a      	str	r2, [r3, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	619a      	str	r2, [r3, #24]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	61da      	str	r2, [r3, #28]
{

}
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	0800ffe4 	.word	0x0800ffe4

08003150 <_ZN10RFM95_LoRa9selectRFMEv>:
 * @brief RFM95 chip select
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::selectRFM(){
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_RESET);
 8003158:	2200      	movs	r2, #0
 800315a:	2108      	movs	r1, #8
 800315c:	4803      	ldr	r0, [pc, #12]	; (800316c <_ZN10RFM95_LoRa9selectRFMEv+0x1c>)
 800315e:	f004 f8e1 	bl	8007324 <HAL_GPIO_WritePin>
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	48000400 	.word	0x48000400

08003170 <_ZN10RFM95_LoRa11deselectRFMEv>:
 * @brief RFM95 chip deselect
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::deselectRFM(){
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_SET);
 8003178:	2201      	movs	r2, #1
 800317a:	2108      	movs	r1, #8
 800317c:	4803      	ldr	r0, [pc, #12]	; (800318c <_ZN10RFM95_LoRa11deselectRFMEv+0x1c>)
 800317e:	f004 f8d1 	bl	8007324 <HAL_GPIO_WritePin>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	48000400 	.word	0x48000400

08003190 <_ZN10RFM95_LoRa8resetRFMEv>:

void RFM95_LoRa::resetRFM(){
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 8003198:	2200      	movs	r2, #0
 800319a:	2110      	movs	r1, #16
 800319c:	4808      	ldr	r0, [pc, #32]	; (80031c0 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 800319e:	f004 f8c1 	bl	8007324 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80031a2:	2001      	movs	r0, #1
 80031a4:	f002 f93c 	bl	8005420 <HAL_Delay>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 80031a8:	2201      	movs	r2, #1
 80031aa:	2110      	movs	r1, #16
 80031ac:	4804      	ldr	r0, [pc, #16]	; (80031c0 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 80031ae:	f004 f8b9 	bl	8007324 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80031b2:	2005      	movs	r0, #5
 80031b4:	f002 f934 	bl	8005420 <HAL_Delay>
}
 80031b8:	bf00      	nop
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	48000400 	.word	0x48000400

080031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>:

bool RFM95_LoRa::writeRegister(uint8_t addr, uint8_t data){
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	70fb      	strb	r3, [r7, #3]
 80031d0:	4613      	mov	r3, r2
 80031d2:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2] = {(uint8_t)(addr | 0x80), data};
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	733b      	strb	r3, [r7, #12]
 80031de:	78bb      	ldrb	r3, [r7, #2]
 80031e0:	737b      	strb	r3, [r7, #13]
	selectRFM();
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff ffb4 	bl	8003150 <_ZN10RFM95_LoRa9selectRFMEv>
	if(HAL_SPI_Transmit(&hspi3, (uint8_t*)buff, 2, 100) != HAL_OK){
 80031e8:	f107 010c 	add.w	r1, r7, #12
 80031ec:	2364      	movs	r3, #100	; 0x64
 80031ee:	2202      	movs	r2, #2
 80031f0:	480b      	ldr	r0, [pc, #44]	; (8003220 <_ZN10RFM95_LoRa13writeRegisterEhh+0x5c>)
 80031f2:	f007 f8c0 	bl	800a376 <HAL_SPI_Transmit>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d004      	beq.n	8003210 <_ZN10RFM95_LoRa13writeRegisterEhh+0x4c>
		deselectRFM();
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff ffb2 	bl	8003170 <_ZN10RFM95_LoRa11deselectRFMEv>
		return false;
 800320c:	2300      	movs	r3, #0
 800320e:	e003      	b.n	8003218 <_ZN10RFM95_LoRa13writeRegisterEhh+0x54>
	}
	deselectRFM();
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff ffad 	bl	8003170 <_ZN10RFM95_LoRa11deselectRFMEv>
	return true;
 8003216:	2301      	movs	r3, #1
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	20000588 	.word	0x20000588

08003224 <_ZN10RFM95_LoRa12readRegisterEh>:

uint8_t RFM95_LoRa::readRegister(uint8_t addr){
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af02      	add	r7, sp, #8
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	70fb      	strb	r3, [r7, #3]
	uint8_t rxData[2] = {0,0};
 8003230:	2300      	movs	r3, #0
 8003232:	81bb      	strh	r3, [r7, #12]
	uint8_t txData[1] = {addr};
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	723b      	strb	r3, [r7, #8]

	selectRFM();
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff ff89 	bl	8003150 <_ZN10RFM95_LoRa9selectRFMEv>
	HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)txData,(uint8_t*)rxData,2,100);
 800323e:	f107 020c 	add.w	r2, r7, #12
 8003242:	f107 0108 	add.w	r1, r7, #8
 8003246:	2364      	movs	r3, #100	; 0x64
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	2302      	movs	r3, #2
 800324c:	4805      	ldr	r0, [pc, #20]	; (8003264 <_ZN10RFM95_LoRa12readRegisterEh+0x40>)
 800324e:	f007 fa00 	bl	800a652 <HAL_SPI_TransmitReceive>
	deselectRFM();
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff ff8c 	bl	8003170 <_ZN10RFM95_LoRa11deselectRFMEv>
	return rxData[1];
 8003258:	7b7b      	ldrb	r3, [r7, #13]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000588 	.word	0x20000588

08003268 <_ZN10RFM95_LoRa5beginEl>:


int RFM95_LoRa::begin(long frequency){
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
 resetRFM();
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff ff8c 	bl	8003190 <_ZN10RFM95_LoRa8resetRFMEv>
  // check version
  uint8_t version = readRegister(REG_VERSION);
 8003278:	2142      	movs	r1, #66	; 0x42
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff ffd2 	bl	8003224 <_ZN10RFM95_LoRa12readRegisterEh>
 8003280:	4603      	mov	r3, r0
 8003282:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b12      	cmp	r3, #18
 8003288:	d001      	beq.n	800328e <_ZN10RFM95_LoRa5beginEl+0x26>
    return 0;
 800328a:	2300      	movs	r3, #0
 800328c:	e02b      	b.n	80032e6 <_ZN10RFM95_LoRa5beginEl+0x7e>
  }
  // put in sleep mode
  sleep();
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f995 	bl	80035be <_ZN10RFM95_LoRa5sleepEv>
  // set frequency
  setFrequency(frequency);
 8003294:	6839      	ldr	r1, [r7, #0]
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f9dc 	bl	8003654 <_ZN10RFM95_LoRa12setFrequencyEl>
  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 800329c:	2200      	movs	r2, #0
 800329e:	210e      	movs	r1, #14
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff ff8f 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 80032a6:	2200      	movs	r2, #0
 80032a8:	210f      	movs	r1, #15
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7ff ff8a 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 80032b0:	210c      	movs	r1, #12
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff ffb6 	bl	8003224 <_ZN10RFM95_LoRa12readRegisterEh>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f043 0303 	orr.w	r3, r3, #3
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	210c      	movs	r1, #12
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff ff7d 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 80032ca:	2204      	movs	r2, #4
 80032cc:	2126      	movs	r1, #38	; 0x26
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff ff78 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set output power to 17 dBm
  setTxPower(20);
 80032d4:	2201      	movs	r2, #1
 80032d6:	2114      	movs	r1, #20
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f97d 	bl	80035d8 <_ZN10RFM95_LoRa10setTxPowerEii>
  // put in standby mode
  idle();
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f960 	bl	80035a4 <_ZN10RFM95_LoRa4idleEv>
  return 1;
 80032e4:	2301      	movs	r3, #1
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <_ZN10RFM95_LoRa11beginPacketEi>:
  sleep();
}



int RFM95_LoRa::beginPacket(int implicitHeader){
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6039      	str	r1, [r7, #0]
  // put in standby mode
  idle();
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f953 	bl	80035a4 <_ZN10RFM95_LoRa4idleEv>

  if (implicitHeader) {
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <_ZN10RFM95_LoRa11beginPacketEi+0x1e>
    implicitHeaderMode();
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 fad8 	bl	80038ba <_ZN10RFM95_LoRa18implicitHeaderModeEv>
 800330a:	e002      	b.n	8003312 <_ZN10RFM95_LoRa11beginPacketEi+0x24>
  } else {
    explicitHeaderMode();
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fabc 	bl	800388a <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // reset FIFO address and paload length
  writeRegister(REG_FIFO_ADDR_PTR, 0);
 8003312:	2200      	movs	r2, #0
 8003314:	210d      	movs	r1, #13
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff ff54 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_PAYLOAD_LENGTH, 0);
 800331c:	2200      	movs	r2, #0
 800331e:	2122      	movs	r1, #34	; 0x22
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff ff4f 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 8003326:	2301      	movs	r3, #1
}
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <_ZN10RFM95_LoRa9endPacketEv>:



int RFM95_LoRa::endPacket(){
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  // put in TX mode
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8003338:	2283      	movs	r2, #131	; 0x83
 800333a:	2101      	movs	r1, #1
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7ff ff41 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // wait for TX done
  while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 8003342:	2112      	movs	r1, #18
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff ff6d 	bl	8003224 <_ZN10RFM95_LoRa12readRegisterEh>
 800334a:	4603      	mov	r3, r0
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	bf0c      	ite	eq
 8003354:	2301      	moveq	r3, #1
 8003356:	2300      	movne	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d000      	beq.n	8003360 <_ZN10RFM95_LoRa9endPacketEv+0x30>
 800335e:	e7f0      	b.n	8003342 <_ZN10RFM95_LoRa9endPacketEv+0x12>

  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8003360:	2208      	movs	r2, #8
 8003362:	2112      	movs	r1, #18
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff ff2d 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 800336a:	2301      	movs	r3, #1
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <_ZN10RFM95_LoRa11parsePacketEi>:



int RFM95_LoRa::parsePacket(int size)

{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  int packetLength = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 8003382:	2112      	movs	r1, #18
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff ff4d 	bl	8003224 <_ZN10RFM95_LoRa12readRegisterEh>
 800338a:	4603      	mov	r3, r0
 800338c:	60bb      	str	r3, [r7, #8]
  if (size > 0) {
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	dd0a      	ble.n	80033aa <_ZN10RFM95_LoRa11parsePacketEi+0x36>
    implicitHeaderMode();
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 fa90 	bl	80038ba <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	2122      	movs	r1, #34	; 0x22
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff ff0e 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
 80033a8:	e002      	b.n	80033b0 <_ZN10RFM95_LoRa11parsePacketEi+0x3c>
  } else {
    explicitHeaderMode();
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fa6d 	bl	800388a <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	2112      	movs	r1, #18
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff ff03 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d026      	beq.n	8003416 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d121      	bne.n	8003416 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
    // received a packet
    _packetIndex = 0;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	615a      	str	r2, [r3, #20]
    // read packet length
    if (_implicitHeaderMode) {
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d006      	beq.n	80033ee <_ZN10RFM95_LoRa11parsePacketEi+0x7a>
      packetLength = readRegister(REG_PAYLOAD_LENGTH);
 80033e0:	2122      	movs	r1, #34	; 0x22
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7ff ff1e 	bl	8003224 <_ZN10RFM95_LoRa12readRegisterEh>
 80033e8:	4603      	mov	r3, r0
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	e005      	b.n	80033fa <_ZN10RFM95_LoRa11parsePacketEi+0x86>
    } else {
      packetLength = readRegister(REG_RX_NB_BYTES);
 80033ee:	2113      	movs	r1, #19
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff ff17 	bl	8003224 <_ZN10RFM95_LoRa12readRegisterEh>
 80033f6:	4603      	mov	r3, r0
 80033f8:	60fb      	str	r3, [r7, #12]
    }
    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 80033fa:	2110      	movs	r1, #16
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff ff11 	bl	8003224 <_ZN10RFM95_LoRa12readRegisterEh>
 8003402:	4603      	mov	r3, r0
 8003404:	461a      	mov	r2, r3
 8003406:	210d      	movs	r1, #13
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff fedb 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in standby mode
    idle();
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f8c8 	bl	80035a4 <_ZN10RFM95_LoRa4idleEv>
 8003414:	e015      	b.n	8003442 <_ZN10RFM95_LoRa11parsePacketEi+0xce>
  } else if (readRegister(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
 8003416:	2101      	movs	r1, #1
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff ff03 	bl	8003224 <_ZN10RFM95_LoRa12readRegisterEh>
 800341e:	4603      	mov	r3, r0
 8003420:	2b86      	cmp	r3, #134	; 0x86
 8003422:	bf14      	ite	ne
 8003424:	2301      	movne	r3, #1
 8003426:	2300      	moveq	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d009      	beq.n	8003442 <_ZN10RFM95_LoRa11parsePacketEi+0xce>
    // not currently in RX mode
    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 800342e:	2200      	movs	r2, #0
 8003430:	210d      	movs	r1, #13
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7ff fec6 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in single RX mode
    writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8003438:	2286      	movs	r2, #134	; 0x86
 800343a:	2101      	movs	r1, #1
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff fec1 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  return packetLength;
 8003442:	68fb      	ldr	r3, [r7, #12]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <_ZN10RFM95_LoRa5writeEh>:

float RFM95_LoRa::packetSnr(){
  return ((int8_t)readRegister(REG_PKT_SNR_VALUE)) * 0.25;
}

size_t RFM95_LoRa::write(uint8_t byte){
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3304      	adds	r3, #4
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	1cf9      	adds	r1, r7, #3
 8003462:	2201      	movs	r2, #1
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	4798      	blx	r3
 8003468:	4603      	mov	r3, r0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <_ZN10RFM95_LoRa5writeEPKhj>:



size_t RFM95_LoRa::write(const uint8_t *buffer, size_t size){
 8003472:	b580      	push	{r7, lr}
 8003474:	b086      	sub	sp, #24
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 800347e:	2122      	movs	r1, #34	; 0x22
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7ff fecf 	bl	8003224 <_ZN10RFM95_LoRa12readRegisterEh>
 8003486:	4603      	mov	r3, r0
 8003488:	613b      	str	r3, [r7, #16]
  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4413      	add	r3, r2
 8003490:	2bff      	cmp	r3, #255	; 0xff
 8003492:	d903      	bls.n	800349c <_ZN10RFM95_LoRa5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800349a:	607b      	str	r3, [r7, #4]
  }
  // write data
  for (size_t i = 0; i < size; i++) {
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d20c      	bcs.n	80034c2 <_ZN10RFM95_LoRa5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	4413      	add	r3, r2
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	2100      	movs	r1, #0
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f7ff fe85 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	3301      	adds	r3, #1
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	e7ee      	b.n	80034a0 <_ZN10RFM95_LoRa5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	4413      	add	r3, r2
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	461a      	mov	r2, r3
 80034d0:	2122      	movs	r1, #34	; 0x22
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f7ff fe76 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return size;
 80034d8:	687b      	ldr	r3, [r7, #4]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <_ZN10RFM95_LoRa9availableEv>:


int RFM95_LoRa::available()
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 80034ea:	2113      	movs	r1, #19
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff fe99 	bl	8003224 <_ZN10RFM95_LoRa12readRegisterEh>
 80034f2:	4603      	mov	r3, r0
 80034f4:	461a      	mov	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	1ad3      	subs	r3, r2, r3
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <_ZN10RFM95_LoRa4readEv>:



int RFM95_LoRa::read(){
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  if (!available()) {
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3308      	adds	r3, #8
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	4798      	blx	r3
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	bf0c      	ite	eq
 800351e:	2301      	moveq	r3, #1
 8003520:	2300      	movne	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <_ZN10RFM95_LoRa4readEv+0x2a>
    return -1;
 8003528:	f04f 33ff 	mov.w	r3, #4294967295
 800352c:	e009      	b.n	8003542 <_ZN10RFM95_LoRa4readEv+0x3e>
  }
  _packetIndex++;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	615a      	str	r2, [r3, #20]
  return readRegister(REG_FIFO);
 8003538:	2100      	movs	r1, #0
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff fe72 	bl	8003224 <_ZN10RFM95_LoRa12readRegisterEh>
 8003540:	4603      	mov	r3, r0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <_ZN10RFM95_LoRa4peekEv>:



int RFM95_LoRa::peek(){
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3308      	adds	r3, #8
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4798      	blx	r3
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	bf0c      	ite	eq
 8003564:	2301      	moveq	r3, #1
 8003566:	2300      	movne	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <_ZN10RFM95_LoRa4peekEv+0x2a>
    return -1;
 800356e:	f04f 33ff 	mov.w	r3, #4294967295
 8003572:	e013      	b.n	800359c <_ZN10RFM95_LoRa4peekEv+0x52>
  }
  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 8003574:	210d      	movs	r1, #13
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff fe54 	bl	8003224 <_ZN10RFM95_LoRa12readRegisterEh>
 800357c:	4603      	mov	r3, r0
 800357e:	60fb      	str	r3, [r7, #12]
  // read
  uint8_t b = readRegister(REG_FIFO);
 8003580:	2100      	movs	r1, #0
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff fe4e 	bl	8003224 <_ZN10RFM95_LoRa12readRegisterEh>
 8003588:	4603      	mov	r3, r0
 800358a:	72fb      	strb	r3, [r7, #11]
  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	461a      	mov	r2, r3
 8003592:	210d      	movs	r1, #13
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff fe15 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return b;
 800359a:	7afb      	ldrb	r3, [r7, #11]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <_ZN10RFM95_LoRa4idleEv>:
    explicitHeaderMode();
  }
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
}

void RFM95_LoRa::idle(){
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 80035ac:	2281      	movs	r2, #129	; 0x81
 80035ae:	2101      	movs	r1, #1
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff fe07 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <_ZN10RFM95_LoRa5sleepEv>:

void RFM95_LoRa::sleep(){
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 80035c6:	2280      	movs	r2, #128	; 0x80
 80035c8:	2101      	movs	r1, #1
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7ff fdfa 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <_ZN10RFM95_LoRa10setTxPowerEii>:



void RFM95_LoRa::setTxPower(int level, int outputPin){
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d116      	bne.n	8003618 <_ZN10RFM95_LoRa10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	da02      	bge.n	80035f6 <_ZN10RFM95_LoRa10setTxPowerEii+0x1e>
      level = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60bb      	str	r3, [r7, #8]
 80035f4:	e004      	b.n	8003600 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
    } else if (level > 14) {
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2b0e      	cmp	r3, #14
 80035fa:	dd01      	ble.n	8003600 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
      level = 14;
 80035fc:	230e      	movs	r3, #14
 80035fe:	60bb      	str	r3, [r7, #8]
    }
    writeRegister(REG_PA_CONFIG, 0x70 | level);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	b25b      	sxtb	r3, r3
 8003604:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003608:	b25b      	sxtb	r3, r3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	461a      	mov	r2, r3
 800360e:	2109      	movs	r1, #9
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f7ff fdd7 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
    } else if (level > 17) {
      level = 17;
    }
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 8003616:	e018      	b.n	800364a <_ZN10RFM95_LoRa10setTxPowerEii+0x72>
    if (level < 2) {
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b01      	cmp	r3, #1
 800361c:	dc02      	bgt.n	8003624 <_ZN10RFM95_LoRa10setTxPowerEii+0x4c>
      level = 2;
 800361e:	2302      	movs	r3, #2
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	e004      	b.n	800362e <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
    } else if (level > 17) {
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b11      	cmp	r3, #17
 8003628:	dd01      	ble.n	800362e <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
      level = 17;
 800362a:	2311      	movs	r3, #17
 800362c:	60bb      	str	r3, [r7, #8]
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	3b02      	subs	r3, #2
 8003634:	b2db      	uxtb	r3, r3
 8003636:	b25b      	sxtb	r3, r3
 8003638:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800363c:	b25b      	sxtb	r3, r3
 800363e:	b2db      	uxtb	r3, r3
 8003640:	461a      	mov	r2, r3
 8003642:	2109      	movs	r1, #9
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f7ff fdbd 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800364a:	bf00      	nop
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <_ZN10RFM95_LoRa12setFrequencyEl>:



void RFM95_LoRa::setFrequency(long frequency){
 8003654:	b5b0      	push	{r4, r5, r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	6838      	ldr	r0, [r7, #0]
 8003662:	6108      	str	r0, [r1, #16]
  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8003664:	6839      	ldr	r1, [r7, #0]
 8003666:	17c8      	asrs	r0, r1, #31
 8003668:	460a      	mov	r2, r1
 800366a:	4603      	mov	r3, r0
 800366c:	1355      	asrs	r5, r2, #13
 800366e:	04d4      	lsls	r4, r2, #19
 8003670:	4a1a      	ldr	r2, [pc, #104]	; (80036dc <_ZN10RFM95_LoRa12setFrequencyEl+0x88>)
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	4620      	mov	r0, r4
 8003678:	4629      	mov	r1, r5
 800367a:	f7fc fda7 	bl	80001cc <__aeabi_uldivmod>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	e9c7 2302 	strd	r2, r3, [r7, #8]
  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8003686:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	0c02      	lsrs	r2, r0, #16
 8003694:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003698:	0c0b      	lsrs	r3, r1, #16
 800369a:	b2d3      	uxtb	r3, r2
 800369c:	461a      	mov	r2, r3
 800369e:	2106      	movs	r1, #6
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff fd8f 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 80036a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	f04f 0300 	mov.w	r3, #0
 80036b2:	0a02      	lsrs	r2, r0, #8
 80036b4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80036b8:	0a0b      	lsrs	r3, r1, #8
 80036ba:	b2d3      	uxtb	r3, r2
 80036bc:	461a      	mov	r2, r3
 80036be:	2107      	movs	r1, #7
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff fd7f 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 80036c6:	7a3b      	ldrb	r3, [r7, #8]
 80036c8:	461a      	mov	r2, r3
 80036ca:	2108      	movs	r1, #8
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff fd79 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80036d2:	bf00      	nop
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bdb0      	pop	{r4, r5, r7, pc}
 80036da:	bf00      	nop
 80036dc:	01e84800 	.word	0x01e84800

080036e0 <_ZN10RFM95_LoRa18setSpreadingFactorEi>:



void RFM95_LoRa::setSpreadingFactor(int sf){
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b05      	cmp	r3, #5
 80036ee:	dc02      	bgt.n	80036f6 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x16>
    sf = 6;
 80036f0:	2306      	movs	r3, #6
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	e004      	b.n	8003700 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b0c      	cmp	r3, #12
 80036fa:	dd01      	ble.n	8003700 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
    sf = 12;
 80036fc:	230c      	movs	r3, #12
 80036fe:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b06      	cmp	r3, #6
 8003704:	d10a      	bne.n	800371c <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 8003706:	22c5      	movs	r2, #197	; 0xc5
 8003708:	2131      	movs	r1, #49	; 0x31
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff fd5a 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 8003710:	220c      	movs	r2, #12
 8003712:	2137      	movs	r1, #55	; 0x37
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff fd55 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
 800371a:	e009      	b.n	8003730 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 800371c:	22c3      	movs	r2, #195	; 0xc3
 800371e:	2131      	movs	r1, #49	; 0x31
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff fd4f 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 8003726:	220a      	movs	r2, #10
 8003728:	2137      	movs	r1, #55	; 0x37
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff fd4a 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 8003730:	211e      	movs	r1, #30
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff fd76 	bl	8003224 <_ZN10RFM95_LoRa12readRegisterEh>
 8003738:	4603      	mov	r3, r0
 800373a:	b25b      	sxtb	r3, r3
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	b25a      	sxtb	r2, r3
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	b25b      	sxtb	r3, r3
 8003748:	4313      	orrs	r3, r2
 800374a:	b25b      	sxtb	r3, r3
 800374c:	b2db      	uxtb	r3, r3
 800374e:	461a      	mov	r2, r3
 8003750:	211e      	movs	r1, #30
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff fd36 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8003758:	bf00      	nop
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <_ZN10RFM95_LoRa18setSignalBandwidthEl>:


void RFM95_LoRa::setSignalBandwidth(long sbw){
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  int bw;
  if (sbw <= 7.8E3) {
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	f641 6278 	movw	r2, #7800	; 0x1e78
 8003770:	4293      	cmp	r3, r2
 8003772:	dc02      	bgt.n	800377a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x1a>
    bw = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	e03f      	b.n	80037fa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 10.4E3) {
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8003780:	4293      	cmp	r3, r2
 8003782:	dc02      	bgt.n	800378a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x2a>
    bw = 1;
 8003784:	2301      	movs	r3, #1
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	e037      	b.n	80037fa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 15.6E3) {
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 8003790:	4293      	cmp	r3, r2
 8003792:	dc02      	bgt.n	800379a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x3a>
    bw = 2;
 8003794:	2302      	movs	r3, #2
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	e02f      	b.n	80037fa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 20.8E3) {
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	f245 1240 	movw	r2, #20800	; 0x5140
 80037a0:	4293      	cmp	r3, r2
 80037a2:	dc02      	bgt.n	80037aa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x4a>
    bw = 3;
 80037a4:	2303      	movs	r3, #3
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	e027      	b.n	80037fa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 31.25E3) {
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	f647 2212 	movw	r2, #31250	; 0x7a12
 80037b0:	4293      	cmp	r3, r2
 80037b2:	dc02      	bgt.n	80037ba <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x5a>
    bw = 4;
 80037b4:	2304      	movs	r3, #4
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	e01f      	b.n	80037fa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 41.7E3) {
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 80037c0:	4293      	cmp	r3, r2
 80037c2:	dc02      	bgt.n	80037ca <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x6a>
    bw = 5;
 80037c4:	2305      	movs	r3, #5
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	e017      	b.n	80037fa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 62.5E3) {
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	f24f 4224 	movw	r2, #62500	; 0xf424
 80037d0:	4293      	cmp	r3, r2
 80037d2:	dc02      	bgt.n	80037da <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x7a>
    bw = 6;
 80037d4:	2306      	movs	r3, #6
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	e00f      	b.n	80037fa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 125E3) {
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	4a13      	ldr	r2, [pc, #76]	; (800382c <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xcc>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	dc02      	bgt.n	80037e8 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x88>
    bw = 7;
 80037e2:	2307      	movs	r3, #7
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	e008      	b.n	80037fa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 250E3) {
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	4a11      	ldr	r2, [pc, #68]	; (8003830 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xd0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	dc02      	bgt.n	80037f6 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x96>
    bw = 8;
 80037f0:	2308      	movs	r3, #8
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	e001      	b.n	80037fa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 80037f6:	2309      	movs	r3, #9
 80037f8:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 80037fa:	211d      	movs	r1, #29
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff fd11 	bl	8003224 <_ZN10RFM95_LoRa12readRegisterEh>
 8003802:	4603      	mov	r3, r0
 8003804:	b25b      	sxtb	r3, r3
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	b25a      	sxtb	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	b25b      	sxtb	r3, r3
 8003812:	4313      	orrs	r3, r2
 8003814:	b25b      	sxtb	r3, r3
 8003816:	b2db      	uxtb	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	211d      	movs	r1, #29
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff fcd1 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8003822:	bf00      	nop
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	0001e848 	.word	0x0001e848
 8003830:	0003d090 	.word	0x0003d090

08003834 <_ZN10RFM95_LoRa14setCodingRate4Ei>:



void RFM95_LoRa::setCodingRate4(int denominator){
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  if (denominator < 5) {
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b04      	cmp	r3, #4
 8003842:	dc02      	bgt.n	800384a <_ZN10RFM95_LoRa14setCodingRate4Ei+0x16>
    denominator = 5;
 8003844:	2305      	movs	r3, #5
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	e004      	b.n	8003854 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
  } else if (denominator > 8) {
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b08      	cmp	r3, #8
 800384e:	dd01      	ble.n	8003854 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
	  denominator = 8;
 8003850:	2308      	movs	r3, #8
 8003852:	603b      	str	r3, [r7, #0]
  }
  int cr = denominator - 4;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	3b04      	subs	r3, #4
 8003858:	60fb      	str	r3, [r7, #12]
  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 800385a:	211d      	movs	r1, #29
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff fce1 	bl	8003224 <_ZN10RFM95_LoRa12readRegisterEh>
 8003862:	4603      	mov	r3, r0
 8003864:	b25b      	sxtb	r3, r3
 8003866:	f023 030e 	bic.w	r3, r3, #14
 800386a:	b25a      	sxtb	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	b25b      	sxtb	r3, r3
 8003872:	4313      	orrs	r3, r2
 8003874:	b25b      	sxtb	r3, r3
 8003876:	b2db      	uxtb	r3, r3
 8003878:	461a      	mov	r2, r3
 800387a:	211d      	movs	r1, #29
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7ff fca1 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8003882:	bf00      	nop
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <_ZN10RFM95_LoRa18explicitHeaderModeEv>:
uint8_t RFM95_LoRa::random(){
  return readRegister(REG_RSSI_WIDEBAND);
}


void RFM95_LoRa::explicitHeaderMode(){
 800388a:	b580      	push	{r7, lr}
 800388c:	b082      	sub	sp, #8
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8003898:	211d      	movs	r1, #29
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff fcc2 	bl	8003224 <_ZN10RFM95_LoRa12readRegisterEh>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f023 0301 	bic.w	r3, r3, #1
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	461a      	mov	r2, r3
 80038aa:	211d      	movs	r1, #29
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff fc89 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <_ZN10RFM95_LoRa18implicitHeaderModeEv>:


void RFM95_LoRa::implicitHeaderMode(){
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 80038c8:	211d      	movs	r1, #29
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff fcaa 	bl	8003224 <_ZN10RFM95_LoRa12readRegisterEh>
 80038d0:	4603      	mov	r3, r0
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	211d      	movs	r1, #29
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7ff fc71 	bl	80031c4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <_ZN10RFM95_LoRa7InitRFMEv>:
    writeRegister(REG_FIFO_ADDR_PTR, 0);
  }
}


bool RFM95_LoRa::InitRFM(){
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]


	setFrequency(868000000);
 80038f4:	4914      	ldr	r1, [pc, #80]	; (8003948 <_ZN10RFM95_LoRa7InitRFMEv+0x5c>)
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff feac 	bl	8003654 <_ZN10RFM95_LoRa12setFrequencyEl>
	setTxPower(17, PA_OUTPUT_PA_BOOST_PIN);
 80038fc:	2201      	movs	r2, #1
 80038fe:	2111      	movs	r1, #17
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff fe69 	bl	80035d8 <_ZN10RFM95_LoRa10setTxPowerEii>
	setSignalBandwidth(31.25E3);
 8003906:	f647 2112 	movw	r1, #31250	; 0x7a12
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff ff28 	bl	8003760 <_ZN10RFM95_LoRa18setSignalBandwidthEl>
	setSpreadingFactor(12);
 8003910:	210c      	movs	r1, #12
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff fee4 	bl	80036e0 <_ZN10RFM95_LoRa18setSpreadingFactorEi>
	setCodingRate4(5);
 8003918:	2105      	movs	r1, #5
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff ff8a 	bl	8003834 <_ZN10RFM95_LoRa14setCodingRate4Ei>
	if (!begin(866E6)) {
 8003920:	490a      	ldr	r1, [pc, #40]	; (800394c <_ZN10RFM95_LoRa7InitRFMEv+0x60>)
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff fca0 	bl	8003268 <_ZN10RFM95_LoRa5beginEl>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	bf0c      	ite	eq
 800392e:	2301      	moveq	r3, #1
 8003930:	2300      	movne	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <_ZN10RFM95_LoRa7InitRFMEv+0x50>
		return false;
 8003938:	2300      	movs	r3, #0
 800393a:	e000      	b.n	800393e <_ZN10RFM95_LoRa7InitRFMEv+0x52>
	}
	return true;
 800393c:	2301      	movs	r3, #1
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	33bca100 	.word	0x33bca100
 800394c:	339e1c80 	.word	0x339e1c80

08003950 <_ZNK13DriveSettings16getClampingSpeedEv>:

/****************************************************************************************
 / * 	Clamping speed get/set
 ****************************************************************************************/
uint16_t DriveSettings::getClampingSpeed() const
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
	return clampingSpeed;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	891b      	ldrh	r3, [r3, #8]
}
 800395c:	4618      	mov	r0, r3
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <_ZN13DriveSettings16setClampingSpeedEt>:

void DriveSettings::setClampingSpeed(uint16_t clampingSpeed)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	807b      	strh	r3, [r7, #2]
	if (this->clampingSpeed != clampingSpeed)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	891b      	ldrh	r3, [r3, #8]
 8003978:	887a      	ldrh	r2, [r7, #2]
 800397a:	429a      	cmp	r2, r3
 800397c:	d009      	beq.n	8003992 <_ZN13DriveSettings16setClampingSpeedEt+0x2a>
	{
		this->clampingSpeed = clampingSpeed;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	887a      	ldrh	r2, [r7, #2]
 8003982:	811a      	strh	r2, [r3, #8]
		this->settingsChangedReg |= CLAMPING_SPEED_CHANGE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	8b9b      	ldrh	r3, [r3, #28]
 8003988:	f043 0308 	orr.w	r3, r3, #8
 800398c:	b29a      	uxth	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	839a      	strh	r2, [r3, #28]
	}
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <_ZNK13DriveSettings17getClampingTorqueEv>:

/****************************************************************************************
 / * 	Clamping torque get/set
 ****************************************************************************************/
uint16_t DriveSettings::getClampingTorque() const
{
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
	return clampingTorque;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	889b      	ldrh	r3, [r3, #4]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <_ZN13DriveSettings17setClampingTorqueEt>:

void DriveSettings::setClampingTorque(uint16_t clampingTorque)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	460b      	mov	r3, r1
 80039c0:	807b      	strh	r3, [r7, #2]
	if (this->clampingTorque != clampingTorque)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	889b      	ldrh	r3, [r3, #4]
 80039c6:	887a      	ldrh	r2, [r7, #2]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d009      	beq.n	80039e0 <_ZN13DriveSettings17setClampingTorqueEt+0x2a>
	{
		this->clampingTorque = clampingTorque;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	887a      	ldrh	r2, [r7, #2]
 80039d0:	809a      	strh	r2, [r3, #4]
		this->settingsChangedReg |= CLAMPING_TORQUE_CHANGE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	8b9b      	ldrh	r3, [r3, #28]
 80039d6:	f043 0304 	orr.w	r3, r3, #4
 80039da:	b29a      	uxth	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	839a      	strh	r2, [r3, #28]
	}
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <_ZNK13DriveSettings12getInPosDiffEv>:

/****************************************************************************************
 / * 	clamping position difference get/set
 ****************************************************************************************/
uint16_t DriveSettings::getInPosDiff() const
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	return inPosDiff;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	899b      	ldrh	r3, [r3, #12]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <_ZN13DriveSettings12setInPosDiffEt>:

void DriveSettings::setInPosDiff(uint16_t inPosDiff)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	807b      	strh	r3, [r7, #2]
	if (this->inPosDiff != inPosDiff)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	899b      	ldrh	r3, [r3, #12]
 8003a14:	887a      	ldrh	r2, [r7, #2]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d009      	beq.n	8003a2e <_ZN13DriveSettings12setInPosDiffEt+0x2a>
	{
		this->inPosDiff = inPosDiff;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	887a      	ldrh	r2, [r7, #2]
 8003a1e:	819a      	strh	r2, [r3, #12]
		this->settingsChangedReg |= IN_POS_DIFF_CHANGE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8b9b      	ldrh	r3, [r3, #28]
 8003a24:	f043 0320 	orr.w	r3, r3, #32
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	839a      	strh	r2, [r3, #28]
	}

}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <_ZNK13DriveSettings18getOpeningDistanceEv>:

/****************************************************************************************
 / * 	opening distance get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOpeningDistance() const
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
	return openingDistance;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	89db      	ldrh	r3, [r3, #14]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <_ZN13DriveSettings18setOpeningDistanceEt>:

void DriveSettings::setOpeningDistance(uint16_t openingDistance)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	807b      	strh	r3, [r7, #2]
	if (this->openingDistance != openingDistance)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	89db      	ldrh	r3, [r3, #14]
 8003a62:	887a      	ldrh	r2, [r7, #2]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d009      	beq.n	8003a7c <_ZN13DriveSettings18setOpeningDistanceEt+0x2a>
	{
		this->openingDistance = openingDistance;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	887a      	ldrh	r2, [r7, #2]
 8003a6c:	81da      	strh	r2, [r3, #14]
		this->settingsChangedReg |= OPENING_DISTANCE_CHANGE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	8b9b      	ldrh	r3, [r3, #28]
 8003a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	839a      	strh	r2, [r3, #28]
	}
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <_ZNK13DriveSettings27getOverCurrentTimeThresholdEv>:

/****************************************************************************************
 / * 	overcurrent time threshold get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOverCurrentTimeThreshold() const
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	return overCurrentTimeThreshold;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	8b1b      	ldrh	r3, [r3, #24]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <_ZN13DriveSettings27setOverCurrentTimeThresholdEt>:

void DriveSettings::setOverCurrentTimeThreshold(
		uint16_t overCurrentTimeThreshold)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	807b      	strh	r3, [r7, #2]
	if (this->overCurrentTimeThreshold != overCurrentTimeThreshold)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	8b1b      	ldrh	r3, [r3, #24]
 8003ab0:	887a      	ldrh	r2, [r7, #2]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d009      	beq.n	8003aca <_ZN13DriveSettings27setOverCurrentTimeThresholdEt+0x2a>
	{
		this->overCurrentTimeThreshold = overCurrentTimeThreshold;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	887a      	ldrh	r2, [r7, #2]
 8003aba:	831a      	strh	r2, [r3, #24]
		this->settingsChangedReg |= OVER_CURRENT_TIME_TH_CHANGE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8b9b      	ldrh	r3, [r3, #28]
 8003ac0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	839a      	strh	r2, [r3, #28]
	}
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <_ZNK13DriveSettings21getOverCurrentWarningEv>:

/****************************************************************************************
 / * 	overcurrent warning get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOverCurrentWarning() const
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
	return overCurrentWarning;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	8a9b      	ldrh	r3, [r3, #20]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <_ZN13DriveSettings21setOverCurrentWarningEt>:

void DriveSettings::setOverCurrentWarning(uint16_t overCurrentWarning)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	460b      	mov	r3, r1
 8003af8:	807b      	strh	r3, [r7, #2]
	if (this->overCurrentWarning != overCurrentWarning)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	8a9b      	ldrh	r3, [r3, #20]
 8003afe:	887a      	ldrh	r2, [r7, #2]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d009      	beq.n	8003b18 <_ZN13DriveSettings21setOverCurrentWarningEt+0x2a>
	{
		this->overCurrentWarning = overCurrentWarning;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	887a      	ldrh	r2, [r7, #2]
 8003b08:	829a      	strh	r2, [r3, #20]
		this->settingsChangedReg |= OVER_CURRENT_WARNING_CHANGE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	8b9b      	ldrh	r3, [r3, #28]
 8003b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	839a      	strh	r2, [r3, #28]
	}
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <_ZNK13DriveSettings20getSelfShutdownDelayEv>:
/****************************************************************************************
 / * 	self shutdown delay get/set
 ****************************************************************************************/
uint16_t DriveSettings::getSelfShutdownDelay() const
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
	return selfShutdownDelay;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	895b      	ldrh	r3, [r3, #10]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <_ZN13DriveSettings20setSelfShutdownDelayEt>:

void DriveSettings::setSelfShutdownDelay(uint16_t selfShutdownDelay)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	807b      	strh	r3, [r7, #2]
	if (this->selfShutdownDelay != selfShutdownDelay)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	895b      	ldrh	r3, [r3, #10]
 8003b4c:	887a      	ldrh	r2, [r7, #2]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d009      	beq.n	8003b66 <_ZN13DriveSettings20setSelfShutdownDelayEt+0x2a>
	{
		this->selfShutdownDelay = selfShutdownDelay;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	887a      	ldrh	r2, [r7, #2]
 8003b56:	815a      	strh	r2, [r3, #10]
		this->settingsChangedReg |= SELF_SHUTDOWN_DELAY_CHANGE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8b9b      	ldrh	r3, [r3, #28]
 8003b5c:	f043 0310 	orr.w	r3, r3, #16
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	839a      	strh	r2, [r3, #28]
	}
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <_ZNK13DriveSettings13getTeachSpeedEv>:

/****************************************************************************************
 / * 	teach speed get/set
 ****************************************************************************************/
uint16_t DriveSettings::getTeachSpeed() const
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
	return teachSpeed;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	88db      	ldrh	r3, [r3, #6]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <_ZN13DriveSettings13setTeachSpeedEt>:

void DriveSettings::setTeachSpeed(uint16_t teachSpeed)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	460b      	mov	r3, r1
 8003b94:	807b      	strh	r3, [r7, #2]
	if (this->teachSpeed != teachSpeed)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	88db      	ldrh	r3, [r3, #6]
 8003b9a:	887a      	ldrh	r2, [r7, #2]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d009      	beq.n	8003bb4 <_ZN13DriveSettings13setTeachSpeedEt+0x2a>
	{
		this->teachSpeed = teachSpeed;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	887a      	ldrh	r2, [r7, #2]
 8003ba4:	80da      	strh	r2, [r3, #6]
		this->settingsChangedReg |= TEACH_SPEED_CHANGE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	8b9b      	ldrh	r3, [r3, #28]
 8003baa:	f043 0302 	orr.w	r3, r3, #2
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	839a      	strh	r2, [r3, #28]
	}
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <_ZNK13DriveSettings14getTeachTroqueEv>:
/****************************************************************************************
 / * 	teach torque get/set
 ****************************************************************************************/
uint16_t DriveSettings::getTeachTroque() const
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
	return teachTroque;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	885b      	ldrh	r3, [r3, #2]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <_ZN13DriveSettings14setTeachTroqueEt>:

void DriveSettings::setTeachTroque(uint16_t teachTroque)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	807b      	strh	r3, [r7, #2]
	if (this->teachTroque != teachTroque)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	885b      	ldrh	r3, [r3, #2]
 8003be8:	887a      	ldrh	r2, [r7, #2]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d009      	beq.n	8003c02 <_ZN13DriveSettings14setTeachTroqueEt+0x2a>
	{
		this->teachTroque = teachTroque;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	887a      	ldrh	r2, [r7, #2]
 8003bf2:	805a      	strh	r2, [r3, #2]
		this->settingsChangedReg |= TEACH_TORQUE_CHANGE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	8b9b      	ldrh	r3, [r3, #28]
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	839a      	strh	r2, [r3, #28]
	}
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <_ZNK13DriveSettings20getUnderVoltageErrorEv>:
/****************************************************************************************
 / * 	undervoltage error get/set
 ****************************************************************************************/
uint16_t DriveSettings::getUnderVoltageError() const
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
	return underVoltageError;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8a5b      	ldrh	r3, [r3, #18]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <_ZN13DriveSettings20setUnderVoltageErrorEt>:

void DriveSettings::setUnderVoltageError(uint16_t underVoltageError)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	807b      	strh	r3, [r7, #2]
	if (this->underVoltageError != underVoltageError)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	8a5b      	ldrh	r3, [r3, #18]
 8003c36:	887a      	ldrh	r2, [r7, #2]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d009      	beq.n	8003c50 <_ZN13DriveSettings20setUnderVoltageErrorEt+0x2a>
	{
		this->underVoltageError = underVoltageError;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	887a      	ldrh	r2, [r7, #2]
 8003c40:	825a      	strh	r2, [r3, #18]
		this->settingsChangedReg |= UNDERVOLTAGE_ERROR_CHANGE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	8b9b      	ldrh	r3, [r3, #28]
 8003c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	839a      	strh	r2, [r3, #28]
	}
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <_ZNK13DriveSettings22getUnderVoltageWarningEv>:

/****************************************************************************************
 / * 	undervoltage warning get/set
 ****************************************************************************************/
uint16_t DriveSettings::getUnderVoltageWarning() const
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	return underVoltageWarning;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	8a1b      	ldrh	r3, [r3, #16]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <_ZN13DriveSettings22setUnderVoltageWarningEt>:

void DriveSettings::setUnderVoltageWarning(uint16_t underVoltageWarning)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	807b      	strh	r3, [r7, #2]
	if (this->underVoltageWarning != underVoltageWarning)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8a1b      	ldrh	r3, [r3, #16]
 8003c84:	887a      	ldrh	r2, [r7, #2]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d009      	beq.n	8003c9e <_ZN13DriveSettings22setUnderVoltageWarningEt+0x2a>
	{
		this->underVoltageWarning = underVoltageWarning;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	887a      	ldrh	r2, [r7, #2]
 8003c8e:	821a      	strh	r2, [r3, #16]
		this->settingsChangedReg |= UNDERVOLTAGE_WARNING_CHANGE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8b9b      	ldrh	r3, [r3, #28]
 8003c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	839a      	strh	r2, [r3, #28]
	}
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <_ZNK13DriveSettings19getOverCurrentErrorEv>:
/****************************************************************************************
 / * 	overcurrent error get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOverCurrentError() const
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
	return overCurrentError;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	8adb      	ldrh	r3, [r3, #22]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <_ZN13DriveSettings19setOverCurrentErrorEt>:

void DriveSettings::setOverCurrentError(uint16_t overCurrentError)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	807b      	strh	r3, [r7, #2]
	if (this->overCurrentError != overCurrentError)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	8adb      	ldrh	r3, [r3, #22]
 8003cd2:	887a      	ldrh	r2, [r7, #2]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d009      	beq.n	8003cec <_ZN13DriveSettings19setOverCurrentErrorEt+0x2a>
	{
		this->overCurrentError = overCurrentError;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	887a      	ldrh	r2, [r7, #2]
 8003cdc:	82da      	strh	r2, [r3, #22]
		this->settingsChangedReg |= OVER_CURRENT_ERROR_CHANGE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	8b9b      	ldrh	r3, [r3, #28]
 8003ce2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	839a      	strh	r2, [r3, #28]
	}
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <_ZNK13DriveSettings16getDeviceAddressEv>:
/****************************************************************************************
 / * 	device address get/set
 ****************************************************************************************/
uint8_t DriveSettings::getDeviceAddress() const
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
	return deviceAddress;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	781b      	ldrb	r3, [r3, #0]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <_ZN13DriveSettings16setDeviceAddressEh>:

void DriveSettings::setDeviceAddress(uint8_t deviceAddress = 0)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	70fb      	strb	r3, [r7, #3]
	this->deviceAddress = deviceAddress;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	78fa      	ldrb	r2, [r7, #3]
 8003d20:	701a      	strb	r2, [r3, #0]
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <_ZN13DriveSettings14isSaveSettingsEv>:

/****************************************************************************************
 / * 	device address get/set
 ****************************************************************************************/
bool DriveSettings::isSaveSettings()
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b085      	sub	sp, #20
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
	bool saveSettingsTemp = this->saveSettings;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	7e9b      	ldrb	r3, [r3, #26]
 8003d3a:	73fb      	strb	r3, [r7, #15]
	this->saveSettings = false;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	769a      	strb	r2, [r3, #26]
	return saveSettingsTemp;
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <_ZN13DriveSettings15setSaveSettingsEb>:

void DriveSettings::setSaveSettings(bool saveSettings)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	70fb      	strb	r3, [r7, #3]
	this->saveSettings = saveSettings;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	78fa      	ldrb	r2, [r7, #3]
 8003d60:	769a      	strb	r2, [r3, #26]
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <_ZN13DriveSettings17isSettingsChangedEv>:




bool DriveSettings::isSettingsChanged()
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
	return (settingsChangedReg != 0);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8b9b      	ldrh	r3, [r3, #28]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	bf14      	ite	ne
 8003d7e:	2301      	movne	r3, #1
 8003d80:	2300      	moveq	r3, #0
 8003d82:	b2db      	uxtb	r3, r3
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <_ZNK13DriveSettings21getSettingsChangedRegEv>:

uint16_t DriveSettings::getSettingsChangedReg() const
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	return this->settingsChangedReg;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8b9b      	ldrh	r3, [r3, #28]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <_ZN13DriveSettings20ResetSettingsChangedEt>:

void DriveSettings::ResetSettingsChanged(uint16_t bit){
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	807b      	strh	r3, [r7, #2]
	settingsChangedReg &= ~bit;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	8b9b      	ldrh	r3, [r3, #28]
 8003db8:	b21a      	sxth	r2, r3
 8003dba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	b21b      	sxth	r3, r3
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	b21b      	sxth	r3, r3
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	839a      	strh	r2, [r3, #28]
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <_ZN12DriveCommandC1Ev>:
 *      Author: marce
 */

#include "DriveCommand.h"

DriveCommand::DriveCommand()
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	701a      	strb	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	705a      	strb	r2, [r3, #1]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	709a      	strb	r2, [r3, #2]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	70da      	strb	r2, [r3, #3]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	711a      	strb	r2, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	715a      	strb	r2, [r3, #5]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	719a      	strb	r2, [r3, #6]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	71da      	strb	r2, [r3, #7]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	721a      	strb	r2, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	725a      	strb	r2, [r3, #9]
{
}
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <_ZN12DriveCommand7isCloseEv>:

/****************************************************************************************
 / * 	close get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isClose()
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b085      	sub	sp, #20
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
	bool closeTemp = close;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	73fb      	strb	r3, [r7, #15]
	close = false;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	701a      	strb	r2, [r3, #0]
	return closeTemp;
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <_ZN12DriveCommand8setCloseEb>:

void DriveCommand::setClose(bool close)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	70fb      	strb	r3, [r7, #3]
	this->close = close;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	78fa      	ldrb	r2, [r7, #3]
 8003e5c:	701a      	strb	r2, [r3, #0]
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <_ZN12DriveCommand6isOpenEv>:

/****************************************************************************************
 / * 	open get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isOpen()
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b085      	sub	sp, #20
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
	bool openTemp = open;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	785b      	ldrb	r3, [r3, #1]
 8003e76:	73fb      	strb	r3, [r7, #15]
	open = false;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	705a      	strb	r2, [r3, #1]
	return openTemp;
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <_ZN12DriveCommand7setOpenEb>:

void DriveCommand::setOpen(bool open)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	70fb      	strb	r3, [r7, #3]
	this->open = open;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	78fa      	ldrb	r2, [r7, #3]
 8003e9c:	705a      	strb	r2, [r3, #1]
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <_ZN12DriveCommand9isDisableEv>:

/****************************************************************************************
 / * 	disable get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isDisable()
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b085      	sub	sp, #20
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
	bool disableTemp = disable;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	799b      	ldrb	r3, [r3, #6]
 8003eb6:	73fb      	strb	r3, [r7, #15]
	disable = false;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	719a      	strb	r2, [r3, #6]
	return disableTemp;
 8003ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <_ZN12DriveCommand10setDisableEb>:

void DriveCommand::setDisable(bool disable)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	70fb      	strb	r3, [r7, #3]
	this->disable = disable;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	78fa      	ldrb	r2, [r7, #3]
 8003edc:	719a      	strb	r2, [r3, #6]
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <_ZN12DriveCommand8isEnableEv>:

/****************************************************************************************
 / * 	enable get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isEnable()
{
 8003eea:	b480      	push	{r7}
 8003eec:	b085      	sub	sp, #20
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
	bool enableTemp = enable;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	791b      	ldrb	r3, [r3, #4]
 8003ef6:	73fb      	strb	r3, [r7, #15]
	enable = false;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	711a      	strb	r2, [r3, #4]
	return enableTemp;
 8003efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <_ZN12DriveCommand9setEnableEb>:

void DriveCommand::setEnable(bool enable)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	70fb      	strb	r3, [r7, #3]
	this->enable = enable;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	711a      	strb	r2, [r3, #4]
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <_ZN12DriveCommand7isResetEv>:

/****************************************************************************************
 / * 	reset get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isReset()
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b085      	sub	sp, #20
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
	bool resetTemp = reset;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	78db      	ldrb	r3, [r3, #3]
 8003f36:	73fb      	strb	r3, [r7, #15]
	reset = false;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	70da      	strb	r2, [r3, #3]
	return resetTemp;
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <_ZN12DriveCommand8setResetEb>:

void DriveCommand::setReset(bool reset)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	70fb      	strb	r3, [r7, #3]
	this->reset = reset;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	78fa      	ldrb	r2, [r7, #3]
 8003f5c:	70da      	strb	r2, [r3, #3]
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <_ZN12DriveCommand6isStopEv>:

/****************************************************************************************
 * 	stop get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isStop()
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b085      	sub	sp, #20
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
	bool stopTemp = stop;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	795b      	ldrb	r3, [r3, #5]
 8003f76:	73fb      	strb	r3, [r7, #15]
	stop = false;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	715a      	strb	r2, [r3, #5]
	return stopTemp;
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <_ZN12DriveCommand7setStopEb>:

void DriveCommand::setStop(bool stop)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	70fb      	strb	r3, [r7, #3]
	this->stop = stop;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	78fa      	ldrb	r2, [r7, #3]
 8003f9c:	715a      	strb	r2, [r3, #5]
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <_ZN12DriveCommand7isTeachEv>:

/****************************************************************************************
 * 	teach get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isTeach()
{
 8003faa:	b480      	push	{r7}
 8003fac:	b085      	sub	sp, #20
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
	bool teachTemp = teach;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	789b      	ldrb	r3, [r3, #2]
 8003fb6:	73fb      	strb	r3, [r7, #15]
	teach = false;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	709a      	strb	r2, [r3, #2]
	return teachTemp;
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <_ZN12DriveCommand8setTeachEb>:

void DriveCommand::setTeach(bool teach)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	70fb      	strb	r3, [r7, #3]
	if (this->teach != teach)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	789b      	ldrb	r3, [r3, #2]
 8003fdc:	78fa      	ldrb	r2, [r7, #3]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d002      	beq.n	8003fe8 <_ZN12DriveCommand8setTeachEb+0x1c>
	{
		this->teach = teach;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	709a      	strb	r2, [r3, #2]
	}

}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <_ZN12DriveCommand13isWriteConfigEv>:

/****************************************************************************************
 * 	write config get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isWriteConfig()
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
	bool writeConfigTemp = writeConfig;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	79db      	ldrb	r3, [r3, #7]
 8004000:	73fb      	strb	r3, [r7, #15]
	writeConfig = false;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	71da      	strb	r2, [r3, #7]
	return writeConfigTemp;
 8004008:	7bfb      	ldrb	r3, [r7, #15]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <_ZNK12DriveCommand16isCommandChangedEv>:
/****************************************************************************************
 * 	has commands changed get/set (read reset)
 ****************************************************************************************/

bool DriveCommand::isCommandChanged() const
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
	return (commandChangeReg != 0);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	7a5b      	ldrb	r3, [r3, #9]
 8004022:	2b00      	cmp	r3, #0
 8004024:	bf14      	ite	ne
 8004026:	2301      	movne	r3, #1
 8004028:	2300      	moveq	r3, #0
 800402a:	b2db      	uxtb	r3, r3
}
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <_ZNK12DriveCommand20getCommandChangedRegEv>:

uint8_t DriveCommand::getCommandChangedReg() const
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
	return this->commandChangeReg;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	7a5b      	ldrb	r3, [r3, #9]
}
 8004044:	4618      	mov	r0, r3
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <_ZN12DriveCommand19ResetCommandChangedEh>:

void DriveCommand::ResetCommandChanged(uint8_t bit)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	70fb      	strb	r3, [r7, #3]
	this->commandChangeReg &= ~bit;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	7a5b      	ldrb	r3, [r3, #9]
 8004060:	b25a      	sxtb	r2, r3
 8004062:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004066:	43db      	mvns	r3, r3
 8004068:	b25b      	sxtb	r3, r3
 800406a:	4013      	ands	r3, r2
 800406c:	b25b      	sxtb	r3, r3
 800406e:	b2da      	uxtb	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	725a      	strb	r2, [r3, #9]
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <_ZN11DriveStatusC1Ev>:
 *      Author: marce
 */

#include "DriveStatus.h"

DriveStatus::DriveStatus()
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	721a      	strb	r2, [r3, #8]
{
}
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4618      	mov	r0, r3
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <_ZN11DriveStatus7isCloseEv>:

/****************************************************************************************
 / * 	close get/set
 ****************************************************************************************/
bool DriveStatus::isClose()
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
	return close;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	785b      	ldrb	r3, [r3, #1]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <_ZN11DriveStatus8setCloseEb>:

void DriveStatus::setClose(bool close)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	70fb      	strb	r3, [r7, #3]
	if (this->close != close)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	785b      	ldrb	r3, [r3, #1]
 80040c4:	78fa      	ldrb	r2, [r7, #3]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d005      	beq.n	80040d6 <_ZN11DriveStatus8setCloseEb+0x22>
	{
		this->close = close;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	78fa      	ldrb	r2, [r7, #3]
 80040ce:	705a      	strb	r2, [r3, #1]
		statusChanged = true;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	721a      	strb	r2, [r3, #8]
	}
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <_ZN11DriveStatus6isOpenEv>:

/****************************************************************************************
 / * 	open get/set
 ****************************************************************************************/
bool DriveStatus::isOpen()
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
	return open;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	789b      	ldrb	r3, [r3, #2]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <_ZN11DriveStatus7setOpenEb>:

void DriveStatus::setOpen(bool open)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	460b      	mov	r3, r1
 8004104:	70fb      	strb	r3, [r7, #3]
	if (this->open = open)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	78fa      	ldrb	r2, [r7, #3]
 800410a:	709a      	strb	r2, [r3, #2]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	789b      	ldrb	r3, [r3, #2]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <_ZN11DriveStatus7setOpenEb+0x26>
	{
		this->open = open;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	78fa      	ldrb	r2, [r7, #3]
 8004118:	709a      	strb	r2, [r3, #2]
		statusChanged = true;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	721a      	strb	r2, [r3, #8]
	}
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <_ZN11DriveStatus9isDisableEv>:

/****************************************************************************************
 / * 	disable get/set
 ****************************************************************************************/
bool DriveStatus::isDisable()
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	return disable;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	79db      	ldrb	r3, [r3, #7]
}
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <_ZN11DriveStatus10setDisableEb>:

void DriveStatus::setDisable(bool disable)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	70fb      	strb	r3, [r7, #3]
	if (this->disable = disable)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	78fa      	ldrb	r2, [r7, #3]
 8004154:	71da      	strb	r2, [r3, #7]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	79db      	ldrb	r3, [r3, #7]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d005      	beq.n	800416a <_ZN11DriveStatus10setDisableEb+0x26>
	{
		this->disable = disable;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	78fa      	ldrb	r2, [r7, #3]
 8004162:	71da      	strb	r2, [r3, #7]
		statusChanged = true;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	721a      	strb	r2, [r3, #8]
	}
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <_ZN11DriveStatus8isEnableEv>:

/****************************************************************************************
 / * 	enable get/set
 ****************************************************************************************/
bool DriveStatus::isEnable()
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
	return enable;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	795b      	ldrb	r3, [r3, #5]
}
 8004182:	4618      	mov	r0, r3
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <_ZN11DriveStatus9setEnableEb>:

void DriveStatus::setEnable(bool enable)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	460b      	mov	r3, r1
 8004198:	70fb      	strb	r3, [r7, #3]
	if (this->enable = enable)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	78fa      	ldrb	r2, [r7, #3]
 800419e:	715a      	strb	r2, [r3, #5]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	795b      	ldrb	r3, [r3, #5]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <_ZN11DriveStatus9setEnableEb+0x26>
	{
		this->enable = enable;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	78fa      	ldrb	r2, [r7, #3]
 80041ac:	715a      	strb	r2, [r3, #5]
		statusChanged = true;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	721a      	strb	r2, [r3, #8]
	}
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <_ZN11DriveStatus7isResetEv>:

/****************************************************************************************
 / * 	reset get/set
 ****************************************************************************************/
bool DriveStatus::isReset()
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
	return reset;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	791b      	ldrb	r3, [r3, #4]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <_ZN11DriveStatus8setResetEb>:

void DriveStatus::setReset(bool reset)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	70fb      	strb	r3, [r7, #3]
	if (this->reset = reset)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	78fa      	ldrb	r2, [r7, #3]
 80041e8:	711a      	strb	r2, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	791b      	ldrb	r3, [r3, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d005      	beq.n	80041fe <_ZN11DriveStatus8setResetEb+0x26>
	{
		this->reset = reset;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	78fa      	ldrb	r2, [r7, #3]
 80041f6:	711a      	strb	r2, [r3, #4]
		statusChanged = true;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	721a      	strb	r2, [r3, #8]
	}
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <_ZN11DriveStatus6isStopEv>:

/****************************************************************************************
 / * 	stop get/set
 /****************************************************************************************/
bool DriveStatus::isStop()
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
	return stop;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	799b      	ldrb	r3, [r3, #6]
}
 8004216:	4618      	mov	r0, r3
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <_ZN11DriveStatus7setStopEb>:

void DriveStatus::setStop(bool stop)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	460b      	mov	r3, r1
 800422c:	70fb      	strb	r3, [r7, #3]
	if (this->stop = stop)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	78fa      	ldrb	r2, [r7, #3]
 8004232:	719a      	strb	r2, [r3, #6]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	799b      	ldrb	r3, [r3, #6]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <_ZN11DriveStatus7setStopEb+0x26>
	{
		this->stop = stop;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	78fa      	ldrb	r2, [r7, #3]
 8004240:	719a      	strb	r2, [r3, #6]
		statusChanged = true;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	721a      	strb	r2, [r3, #8]
	}
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <_ZN11DriveStatus7isTeachEv>:

/****************************************************************************************
 / * 	teach get/set
 /****************************************************************************************/
bool DriveStatus::isTeach()
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
	return teach;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	78db      	ldrb	r3, [r3, #3]
}
 8004260:	4618      	mov	r0, r3
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <_ZN11DriveStatus8setTeachEb>:

void DriveStatus::setTeach(bool teach)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	70fb      	strb	r3, [r7, #3]
	if (this->teach = teach)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	78fa      	ldrb	r2, [r7, #3]
 800427c:	70da      	strb	r2, [r3, #3]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	78db      	ldrb	r3, [r3, #3]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d005      	beq.n	8004292 <_ZN11DriveStatus8setTeachEb+0x26>
	{
		this->teach = teach;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	78fa      	ldrb	r2, [r7, #3]
 800428a:	70da      	strb	r2, [r3, #3]
		statusChanged = true;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	721a      	strb	r2, [r3, #8]
	}
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <_ZN11DriveStatus8getErrorEv>:

/****************************************************************************************
 / * 	write config get/set
 ****************************************************************************************/
DriveStatus::_ERROR DriveStatus::getError()
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
	return this->error;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	781b      	ldrb	r3, [r3, #0]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <_ZN11DriveStatus8setErrorENS_6_ERRORE>:

void DriveStatus::setError(_ERROR error)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	460b      	mov	r3, r1
 80042c0:	70fb      	strb	r3, [r7, #3]
	if (this->error = error)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	78fa      	ldrb	r2, [r7, #3]
 80042c6:	701a      	strb	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bf14      	ite	ne
 80042d0:	2301      	movne	r3, #1
 80042d2:	2300      	moveq	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <_ZN11DriveStatus8setErrorENS_6_ERRORE+0x2a>
	{
		statusChanged = true;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	721a      	strb	r2, [r3, #8]
	}
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <_ZN11TaskHandler11UpdateTasksEv>:

#include "TaskHandler.h"
#include "gpio.h"

//update tasks, should be called every 1ms
void TaskHandler::UpdateTasks() {
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]

	//1ms

	//2ms
	if(counter % 2 == 0){
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	899b      	ldrh	r3, [r3, #12]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d102      	bne.n	8004306 <_ZN11TaskHandler11UpdateTasksEv+0x1a>
		adcUpdateTask = true;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	70da      	strb	r2, [r3, #3]
	}


	//15ms
	if(counter % 15 == 0){
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	899a      	ldrh	r2, [r3, #12]
 800430a:	4b2c      	ldr	r3, [pc, #176]	; (80043bc <_ZN11TaskHandler11UpdateTasksEv+0xd0>)
 800430c:	fba3 1302 	umull	r1, r3, r3, r2
 8004310:	08d9      	lsrs	r1, r3, #3
 8004312:	460b      	mov	r3, r1
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	1a5b      	subs	r3, r3, r1
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d102      	bne.n	8004326 <_ZN11TaskHandler11UpdateTasksEv+0x3a>
		ioUpdateTask = true;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	709a      	strb	r2, [r3, #2]
	}



	//100ms
	if(counter % 100 == 0){
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	899b      	ldrh	r3, [r3, #12]
 800432a:	4a25      	ldr	r2, [pc, #148]	; (80043c0 <_ZN11TaskHandler11UpdateTasksEv+0xd4>)
 800432c:	fba2 1203 	umull	r1, r2, r2, r3
 8004330:	0952      	lsrs	r2, r2, #5
 8004332:	2164      	movs	r1, #100	; 0x64
 8004334:	fb01 f202 	mul.w	r2, r1, r2
 8004338:	1a9b      	subs	r3, r3, r2
 800433a:	b29b      	uxth	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d102      	bne.n	8004346 <_ZN11TaskHandler11UpdateTasksEv+0x5a>
		errorTask = true;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	701a      	strb	r2, [r3, #0]
	}


	//500ms
	if(counter % 500 == 0){
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	899b      	ldrh	r3, [r3, #12]
 800434a:	4a1e      	ldr	r2, [pc, #120]	; (80043c4 <_ZN11TaskHandler11UpdateTasksEv+0xd8>)
 800434c:	fba2 1203 	umull	r1, r2, r2, r3
 8004350:	0952      	lsrs	r2, r2, #5
 8004352:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004356:	fb01 f202 	mul.w	r2, r1, r2
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d105      	bne.n	800436e <_ZN11TaskHandler11UpdateTasksEv+0x82>
		ledUpdateTask = true;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	711a      	strb	r2, [r3, #4]
		comTask = true;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	705a      	strb	r2, [r3, #1]
	}


	//1000ms
	if(counter % 1000 == 0){
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	899b      	ldrh	r3, [r3, #12]
 8004372:	4a14      	ldr	r2, [pc, #80]	; (80043c4 <_ZN11TaskHandler11UpdateTasksEv+0xd8>)
 8004374:	fba2 1203 	umull	r1, r2, r2, r3
 8004378:	0992      	lsrs	r2, r2, #6
 800437a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800437e:	fb01 f202 	mul.w	r2, r1, r2
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <_ZN11TaskHandler11UpdateTasksEv+0xa4>
		saveTask = true;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	715a      	strb	r2, [r3, #5]
	}



	//increment counter
	if(counter > 2999){
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	899b      	ldrh	r3, [r3, #12]
 8004394:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004398:	4293      	cmp	r3, r2
 800439a:	d903      	bls.n	80043a4 <_ZN11TaskHandler11UpdateTasksEv+0xb8>
		counter = 1;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	819a      	strh	r2, [r3, #12]
	}else{
		counter++;
	}

}
 80043a2:	e005      	b.n	80043b0 <_ZN11TaskHandler11UpdateTasksEv+0xc4>
		counter++;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	899b      	ldrh	r3, [r3, #12]
 80043a8:	3301      	adds	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	819a      	strh	r2, [r3, #12]
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	88888889 	.word	0x88888889
 80043c0:	51eb851f 	.word	0x51eb851f
 80043c4:	10624dd3 	.word	0x10624dd3

080043c8 <_ZN11TaskHandler9isComTaskEv>:



bool TaskHandler::isComTask()  {
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	bool comTaskTemp = (comTask & comTaskEnable);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	785b      	ldrb	r3, [r3, #1]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	461a      	mov	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	79db      	ldrb	r3, [r3, #7]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	4013      	ands	r3, r2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	bf14      	ite	ne
 80043e4:	2301      	movne	r3, #1
 80043e6:	2300      	moveq	r3, #0
 80043e8:	73fb      	strb	r3, [r7, #15]
	comTask = false;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	705a      	strb	r2, [r3, #1]
	return comTaskTemp;
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <_ZN11TaskHandler10isSaveTaskEv>:

bool TaskHandler::isSaveTask(){
 80043fe:	b480      	push	{r7}
 8004400:	b085      	sub	sp, #20
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
	bool saveTaskTemp = (saveTask & saveTaskEnable);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	795b      	ldrb	r3, [r3, #5]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	461a      	mov	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	7adb      	ldrb	r3, [r3, #11]
 8004412:	b2db      	uxtb	r3, r3
 8004414:	4013      	ands	r3, r2
 8004416:	2b00      	cmp	r3, #0
 8004418:	bf14      	ite	ne
 800441a:	2301      	movne	r3, #1
 800441c:	2300      	moveq	r3, #0
 800441e:	73fb      	strb	r3, [r7, #15]
	saveTask = false;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	715a      	strb	r2, [r3, #5]
	return saveTaskTemp;
 8004426:	7bfb      	ldrb	r3, [r7, #15]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <_ZN11TaskHandler11isErrorTaskEv>:


bool TaskHandler::isErrorTask()  {
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
	bool errorTaskTemp = (errorTask & errorTaskEnable);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	461a      	mov	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	799b      	ldrb	r3, [r3, #6]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	4013      	ands	r3, r2
 800444c:	2b00      	cmp	r3, #0
 800444e:	bf14      	ite	ne
 8004450:	2301      	movne	r3, #1
 8004452:	2300      	moveq	r3, #0
 8004454:	73fb      	strb	r3, [r7, #15]
	errorTask = false;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]
	return errorTaskTemp;
 800445c:	7bfb      	ldrb	r3, [r7, #15]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <_ZN11TaskHandler14isIoUpdateTaskEv>:

bool TaskHandler::isIoUpdateTask()  {
 800446a:	b480      	push	{r7}
 800446c:	b085      	sub	sp, #20
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
	bool ioUpdateTaskTemp = (ioUpdateTask & ioUpdateTaskEnable);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	789b      	ldrb	r3, [r3, #2]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	461a      	mov	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	7a1b      	ldrb	r3, [r3, #8]
 800447e:	b2db      	uxtb	r3, r3
 8004480:	4013      	ands	r3, r2
 8004482:	2b00      	cmp	r3, #0
 8004484:	bf14      	ite	ne
 8004486:	2301      	movne	r3, #1
 8004488:	2300      	moveq	r3, #0
 800448a:	73fb      	strb	r3, [r7, #15]
	ioUpdateTask = false;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	709a      	strb	r2, [r3, #2]
	return ioUpdateTaskTemp;
 8004492:	7bfb      	ldrb	r3, [r7, #15]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <_ZN11TaskHandler15isLEDUpdateTaskEv>:
	adcUpdateTask = false;
	return adcUpdateTaskTemp;
}


bool TaskHandler::isLEDUpdateTask(){
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
	bool ledUpdateTaskTemp = (ledUpdateTask & ledUpdateTaskEnable);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	791b      	ldrb	r3, [r3, #4]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	461a      	mov	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	7a9b      	ldrb	r3, [r3, #10]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	4013      	ands	r3, r2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	bf14      	ite	ne
 80044bc:	2301      	movne	r3, #1
 80044be:	2300      	moveq	r3, #0
 80044c0:	73fb      	strb	r3, [r7, #15]
	ledUpdateTask = false;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	711a      	strb	r2, [r3, #4]
	return ledUpdateTaskTemp;
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
	...

080044d8 <_ZN5Delay8DWT_InitEv>:


/*
 * Mikrosenkunden delay Initialisieren
 */
void Delay::DWT_Init(void) {
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <_ZN5Delay8DWT_InitEv+0x2c>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4a08      	ldr	r2, [pc, #32]	; (8004504 <_ZN5Delay8DWT_InitEv+0x2c>)
 80044e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044e6:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 80044e8:	4b07      	ldr	r3, [pc, #28]	; (8004508 <_ZN5Delay8DWT_InitEv+0x30>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80044ee:	4b06      	ldr	r3, [pc, #24]	; (8004508 <_ZN5Delay8DWT_InitEv+0x30>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a05      	ldr	r2, [pc, #20]	; (8004508 <_ZN5Delay8DWT_InitEv+0x30>)
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	6013      	str	r3, [r2, #0]
}
 80044fa:	bf00      	nop
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	e000edf0 	.word	0xe000edf0
 8004508:	e0001000 	.word	0xe0001000

0800450c <_ZN5Delay12DWT_Delay_usEm>:

/*
 * Mikrosenkunden delay für Push-Pull ansteuerung
 */
void Delay::DWT_Delay_us(volatile uint32_t microseconds) {
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8004514:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <_ZN5Delay12DWT_Delay_usEm+0x48>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	60fb      	str	r3, [r7, #12]
	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800451a:	f005 fae1 	bl	8009ae0 <HAL_RCC_GetHCLKFreq>
 800451e:	4603      	mov	r3, r0
 8004520:	4a0d      	ldr	r2, [pc, #52]	; (8004558 <_ZN5Delay12DWT_Delay_usEm+0x4c>)
 8004522:	fba2 2303 	umull	r2, r3, r2, r3
 8004526:	0c9b      	lsrs	r3, r3, #18
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	fb02 f303 	mul.w	r3, r2, r3
 800452e:	607b      	str	r3, [r7, #4]
	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8004530:	4b08      	ldr	r3, [pc, #32]	; (8004554 <_ZN5Delay12DWT_Delay_usEm+0x48>)
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	1ad2      	subs	r2, r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	429a      	cmp	r2, r3
 800453c:	bf34      	ite	cc
 800453e:	2301      	movcc	r3, #1
 8004540:	2300      	movcs	r3, #0
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d000      	beq.n	800454a <_ZN5Delay12DWT_Delay_usEm+0x3e>
 8004548:	e7f2      	b.n	8004530 <_ZN5Delay12DWT_Delay_usEm+0x24>
}
 800454a:	bf00      	nop
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	e0001000 	.word	0xe0001000
 8004558:	431bde83 	.word	0x431bde83

0800455c <_ZN5Queue7EnqueueEh>:
 *
 * @param data to push in queue
 * @return none
 */
void Queue::Enqueue(uint8_t data)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	70fb      	strb	r3, [r7, #3]
	//push data to buffer
	buffer[enqueuePointer] = data;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	461a      	mov	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4413      	add	r3, r2
 8004572:	78fa      	ldrb	r2, [r7, #3]
 8004574:	709a      	strb	r2, [r3, #2]

	if (dequeuePointer == 0 && enqueuePointer == BUFFER_SIZE - 1)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	785b      	ldrb	r3, [r3, #1]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10d      	bne.n	800459a <_ZN5Queue7EnqueueEh+0x3e>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	2b09      	cmp	r3, #9
 8004584:	d109      	bne.n	800459a <_ZN5Queue7EnqueueEh+0x3e>
	{
		dequeuePointer++;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	785b      	ldrb	r3, [r3, #1]
 800458a:	3301      	adds	r3, #1
 800458c:	b2da      	uxtb	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	705a      	strb	r2, [r3, #1]
		enqueuePointer = 0;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]
 8004598:	e038      	b.n	800460c <_ZN5Queue7EnqueueEh+0xb0>
	}
	else if (dequeuePointer == BUFFER_SIZE - 1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	785b      	ldrb	r3, [r3, #1]
 800459e:	2b09      	cmp	r3, #9
 80045a0:	d111      	bne.n	80045c6 <_ZN5Queue7EnqueueEh+0x6a>
			&& enqueuePointer == dequeuePointer - 1)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	785b      	ldrb	r3, [r3, #1]
 80045ac:	3b01      	subs	r3, #1
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d109      	bne.n	80045c6 <_ZN5Queue7EnqueueEh+0x6a>
	{
		dequeuePointer = 0;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	705a      	strb	r2, [r3, #1]
		enqueuePointer++;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	3301      	adds	r3, #1
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	701a      	strb	r2, [r3, #0]
 80045c4:	e022      	b.n	800460c <_ZN5Queue7EnqueueEh+0xb0>
	}
	else if (enqueuePointer + 1 == dequeuePointer)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	3301      	adds	r3, #1
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	7852      	ldrb	r2, [r2, #1]
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d10c      	bne.n	80045ee <_ZN5Queue7EnqueueEh+0x92>
	{
		dequeuePointer++;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	785b      	ldrb	r3, [r3, #1]
 80045d8:	3301      	adds	r3, #1
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	705a      	strb	r2, [r3, #1]
		enqueuePointer++;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	3301      	adds	r3, #1
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		enqueuePointer++;
	}
}
 80045ec:	e00e      	b.n	800460c <_ZN5Queue7EnqueueEh+0xb0>
	else if (enqueuePointer == BUFFER_SIZE - 1)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b09      	cmp	r3, #9
 80045f4:	d103      	bne.n	80045fe <_ZN5Queue7EnqueueEh+0xa2>
		enqueuePointer = 0;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	701a      	strb	r2, [r3, #0]
}
 80045fc:	e006      	b.n	800460c <_ZN5Queue7EnqueueEh+0xb0>
		enqueuePointer++;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	3301      	adds	r3, #1
 8004604:	b2da      	uxtb	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	701a      	strb	r2, [r3, #0]
}
 800460a:	e7ff      	b.n	800460c <_ZN5Queue7EnqueueEh+0xb0>
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <_ZN5Queue7DequeueEv>:
 *
 * @param none
 * @return data at actual dequeue position
 */
uint8_t Queue::Dequeue()
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
	//return 0 if queue is empty
	if (IsEmpty())
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f81e 	bl	8004662 <_ZN5Queue7IsEmptyEv>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <_ZN5Queue7DequeueEv+0x18>
	{
		return 0;
 800462c:	2300      	movs	r3, #0
 800462e:	e014      	b.n	800465a <_ZN5Queue7DequeueEv+0x42>
	}
	//get acutal dequeue pointer
	uint8_t dequeuePointerTemp = dequeuePointer;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	785b      	ldrb	r3, [r3, #1]
 8004634:	73fb      	strb	r3, [r7, #15]

	//incfement dequeuePointer, set to 0 if queue overflow occures
	if (dequeuePointer == BUFFER_SIZE - 1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	785b      	ldrb	r3, [r3, #1]
 800463a:	2b09      	cmp	r3, #9
 800463c:	d103      	bne.n	8004646 <_ZN5Queue7DequeueEv+0x2e>
	{
		dequeuePointer = 0;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	705a      	strb	r2, [r3, #1]
 8004644:	e005      	b.n	8004652 <_ZN5Queue7DequeueEv+0x3a>
	}
	else
	{
		dequeuePointer++;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	785b      	ldrb	r3, [r3, #1]
 800464a:	3301      	adds	r3, #1
 800464c:	b2da      	uxtb	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	705a      	strb	r2, [r3, #1]
	}
	//return queue data
	return buffer[dequeuePointerTemp];
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	4413      	add	r3, r2
 8004658:	789b      	ldrb	r3, [r3, #2]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <_ZN5Queue7IsEmptyEv>:
 *
 * @param none
 * @return true if queue is empty otherwise false
 */
bool Queue::IsEmpty()
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
	return (enqueuePointer == dequeuePointer);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	781a      	ldrb	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	785b      	ldrb	r3, [r3, #1]
 8004672:	429a      	cmp	r2, r3
 8004674:	bf0c      	ite	eq
 8004676:	2301      	moveq	r3, #1
 8004678:	2300      	movne	r3, #0
 800467a:	b2db      	uxtb	r3, r3
}
 800467c:	4618      	mov	r0, r3
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <_ZN13TypeConverter12uint16ToByteEPhth>:
	int16_t byte2 = byteArray[1]<<8;
	return(byte1 + byte2);
}


void TypeConverter::uint16ToByte(uint8_t* byteArray, uint16_t data, uint8_t offset){
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	807b      	strh	r3, [r7, #2]
 8004694:	4613      	mov	r3, r2
 8004696:	707b      	strb	r3, [r7, #1]
	byteArray[offset] = data;
 8004698:	787b      	ldrb	r3, [r7, #1]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	4413      	add	r3, r2
 800469e:	887a      	ldrh	r2, [r7, #2]
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	701a      	strb	r2, [r3, #0]
	byteArray[offset+1] = data>>8;
 80046a4:	887b      	ldrh	r3, [r7, #2]
 80046a6:	0a1b      	lsrs	r3, r3, #8
 80046a8:	b299      	uxth	r1, r3
 80046aa:	787b      	ldrb	r3, [r7, #1]
 80046ac:	3301      	adds	r3, #1
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	4413      	add	r3, r2
 80046b2:	b2ca      	uxtb	r2, r1
 80046b4:	701a      	strb	r2, [r3, #0]
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
	...

080046c4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80046ca:	463b      	mov	r3, r7
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	605a      	str	r2, [r3, #4]
 80046d2:	609a      	str	r2, [r3, #8]
 80046d4:	60da      	str	r2, [r3, #12]
 80046d6:	611a      	str	r2, [r3, #16]
 80046d8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80046da:	4b29      	ldr	r3, [pc, #164]	; (8004780 <MX_ADC1_Init+0xbc>)
 80046dc:	4a29      	ldr	r2, [pc, #164]	; (8004784 <MX_ADC1_Init+0xc0>)
 80046de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80046e0:	4b27      	ldr	r3, [pc, #156]	; (8004780 <MX_ADC1_Init+0xbc>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80046e6:	4b26      	ldr	r3, [pc, #152]	; (8004780 <MX_ADC1_Init+0xbc>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80046ec:	4b24      	ldr	r3, [pc, #144]	; (8004780 <MX_ADC1_Init+0xbc>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80046f2:	4b23      	ldr	r3, [pc, #140]	; (8004780 <MX_ADC1_Init+0xbc>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80046f8:	4b21      	ldr	r3, [pc, #132]	; (8004780 <MX_ADC1_Init+0xbc>)
 80046fa:	2204      	movs	r2, #4
 80046fc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80046fe:	4b20      	ldr	r3, [pc, #128]	; (8004780 <MX_ADC1_Init+0xbc>)
 8004700:	2200      	movs	r2, #0
 8004702:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004704:	4b1e      	ldr	r3, [pc, #120]	; (8004780 <MX_ADC1_Init+0xbc>)
 8004706:	2200      	movs	r2, #0
 8004708:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800470a:	4b1d      	ldr	r3, [pc, #116]	; (8004780 <MX_ADC1_Init+0xbc>)
 800470c:	2201      	movs	r2, #1
 800470e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004710:	4b1b      	ldr	r3, [pc, #108]	; (8004780 <MX_ADC1_Init+0xbc>)
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004718:	4b19      	ldr	r3, [pc, #100]	; (8004780 <MX_ADC1_Init+0xbc>)
 800471a:	2200      	movs	r2, #0
 800471c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800471e:	4b18      	ldr	r3, [pc, #96]	; (8004780 <MX_ADC1_Init+0xbc>)
 8004720:	2200      	movs	r2, #0
 8004722:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004724:	4b16      	ldr	r3, [pc, #88]	; (8004780 <MX_ADC1_Init+0xbc>)
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800472c:	4b14      	ldr	r3, [pc, #80]	; (8004780 <MX_ADC1_Init+0xbc>)
 800472e:	2200      	movs	r2, #0
 8004730:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8004732:	4b13      	ldr	r3, [pc, #76]	; (8004780 <MX_ADC1_Init+0xbc>)
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800473a:	4811      	ldr	r0, [pc, #68]	; (8004780 <MX_ADC1_Init+0xbc>)
 800473c:	f001 f820 	bl	8005780 <HAL_ADC_Init>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8004746:	f000 fb97 	bl	8004e78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800474a:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <MX_ADC1_Init+0xc4>)
 800474c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800474e:	2306      	movs	r3, #6
 8004750:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004752:	2300      	movs	r3, #0
 8004754:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004756:	237f      	movs	r3, #127	; 0x7f
 8004758:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800475a:	2304      	movs	r3, #4
 800475c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004762:	463b      	mov	r3, r7
 8004764:	4619      	mov	r1, r3
 8004766:	4806      	ldr	r0, [pc, #24]	; (8004780 <MX_ADC1_Init+0xbc>)
 8004768:	f001 f952 	bl	8005a10 <HAL_ADC_ConfigChannel>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8004772:	f000 fb81 	bl	8004e78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004776:	bf00      	nop
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20000224 	.word	0x20000224
 8004784:	50040000 	.word	0x50040000
 8004788:	2e300800 	.word	0x2e300800

0800478c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b0a2      	sub	sp, #136	; 0x88
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004794:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	605a      	str	r2, [r3, #4]
 800479e:	609a      	str	r2, [r3, #8]
 80047a0:	60da      	str	r2, [r3, #12]
 80047a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80047a4:	f107 0314 	add.w	r3, r7, #20
 80047a8:	2260      	movs	r2, #96	; 0x60
 80047aa:	2100      	movs	r1, #0
 80047ac:	4618      	mov	r0, r3
 80047ae:	f00b fac3 	bl	800fd38 <memset>
  if(adcHandle->Instance==ADC1)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a3b      	ldr	r2, [pc, #236]	; (80048a4 <HAL_ADC_MspInit+0x118>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d16e      	bne.n	800489a <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80047bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047c0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80047c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80047c6:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80047c8:	2301      	movs	r3, #1
 80047ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80047cc:	2301      	movs	r3, #1
 80047ce:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80047d0:	2310      	movs	r3, #16
 80047d2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80047d4:	2307      	movs	r3, #7
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80047d8:	2302      	movs	r3, #2
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80047dc:	2302      	movs	r3, #2
 80047de:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80047e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047e4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047e6:	f107 0314 	add.w	r3, r7, #20
 80047ea:	4618      	mov	r0, r3
 80047ec:	f005 f9e4 	bl	8009bb8 <HAL_RCCEx_PeriphCLKConfig>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80047f6:	f000 fb3f 	bl	8004e78 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80047fa:	4b2b      	ldr	r3, [pc, #172]	; (80048a8 <HAL_ADC_MspInit+0x11c>)
 80047fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047fe:	4a2a      	ldr	r2, [pc, #168]	; (80048a8 <HAL_ADC_MspInit+0x11c>)
 8004800:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004806:	4b28      	ldr	r3, [pc, #160]	; (80048a8 <HAL_ADC_MspInit+0x11c>)
 8004808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800480a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800480e:	613b      	str	r3, [r7, #16]
 8004810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004812:	4b25      	ldr	r3, [pc, #148]	; (80048a8 <HAL_ADC_MspInit+0x11c>)
 8004814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004816:	4a24      	ldr	r2, [pc, #144]	; (80048a8 <HAL_ADC_MspInit+0x11c>)
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800481e:	4b22      	ldr	r3, [pc, #136]	; (80048a8 <HAL_ADC_MspInit+0x11c>)
 8004820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800482a:	23c0      	movs	r3, #192	; 0xc0
 800482c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800482e:	230b      	movs	r3, #11
 8004830:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004832:	2300      	movs	r3, #0
 8004834:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004836:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800483a:	4619      	mov	r1, r3
 800483c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004840:	f002 fbde 	bl	8007000 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004844:	4b19      	ldr	r3, [pc, #100]	; (80048ac <HAL_ADC_MspInit+0x120>)
 8004846:	4a1a      	ldr	r2, [pc, #104]	; (80048b0 <HAL_ADC_MspInit+0x124>)
 8004848:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800484a:	4b18      	ldr	r3, [pc, #96]	; (80048ac <HAL_ADC_MspInit+0x120>)
 800484c:	2200      	movs	r2, #0
 800484e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004850:	4b16      	ldr	r3, [pc, #88]	; (80048ac <HAL_ADC_MspInit+0x120>)
 8004852:	2200      	movs	r2, #0
 8004854:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004856:	4b15      	ldr	r3, [pc, #84]	; (80048ac <HAL_ADC_MspInit+0x120>)
 8004858:	2200      	movs	r2, #0
 800485a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800485c:	4b13      	ldr	r3, [pc, #76]	; (80048ac <HAL_ADC_MspInit+0x120>)
 800485e:	2280      	movs	r2, #128	; 0x80
 8004860:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004862:	4b12      	ldr	r3, [pc, #72]	; (80048ac <HAL_ADC_MspInit+0x120>)
 8004864:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004868:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800486a:	4b10      	ldr	r3, [pc, #64]	; (80048ac <HAL_ADC_MspInit+0x120>)
 800486c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004870:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004872:	4b0e      	ldr	r3, [pc, #56]	; (80048ac <HAL_ADC_MspInit+0x120>)
 8004874:	2200      	movs	r2, #0
 8004876:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004878:	4b0c      	ldr	r3, [pc, #48]	; (80048ac <HAL_ADC_MspInit+0x120>)
 800487a:	2200      	movs	r2, #0
 800487c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800487e:	480b      	ldr	r0, [pc, #44]	; (80048ac <HAL_ADC_MspInit+0x120>)
 8004880:	f001 ffde 	bl	8006840 <HAL_DMA_Init>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 800488a:	f000 faf5 	bl	8004e78 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a06      	ldr	r2, [pc, #24]	; (80048ac <HAL_ADC_MspInit+0x120>)
 8004892:	64da      	str	r2, [r3, #76]	; 0x4c
 8004894:	4a05      	ldr	r2, [pc, #20]	; (80048ac <HAL_ADC_MspInit+0x120>)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800489a:	bf00      	nop
 800489c:	3788      	adds	r7, #136	; 0x88
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	50040000 	.word	0x50040000
 80048a8:	40021000 	.word	0x40021000
 80048ac:	20000288 	.word	0x20000288
 80048b0:	40020008 	.word	0x40020008

080048b4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80048b8:	4b0d      	ldr	r3, [pc, #52]	; (80048f0 <MX_CRC_Init+0x3c>)
 80048ba:	4a0e      	ldr	r2, [pc, #56]	; (80048f4 <MX_CRC_Init+0x40>)
 80048bc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80048be:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <MX_CRC_Init+0x3c>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80048c4:	4b0a      	ldr	r3, [pc, #40]	; (80048f0 <MX_CRC_Init+0x3c>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80048ca:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <MX_CRC_Init+0x3c>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80048d0:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <MX_CRC_Init+0x3c>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80048d6:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <MX_CRC_Init+0x3c>)
 80048d8:	2201      	movs	r2, #1
 80048da:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80048dc:	4804      	ldr	r0, [pc, #16]	; (80048f0 <MX_CRC_Init+0x3c>)
 80048de:	f001 fd89 	bl	80063f4 <HAL_CRC_Init>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80048e8:	f000 fac6 	bl	8004e78 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80048ec:	bf00      	nop
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	200002d0 	.word	0x200002d0
 80048f4:	40023000 	.word	0x40023000

080048f8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a0a      	ldr	r2, [pc, #40]	; (8004930 <HAL_CRC_MspInit+0x38>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d10b      	bne.n	8004922 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800490a:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <HAL_CRC_MspInit+0x3c>)
 800490c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490e:	4a09      	ldr	r2, [pc, #36]	; (8004934 <HAL_CRC_MspInit+0x3c>)
 8004910:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004914:	6493      	str	r3, [r2, #72]	; 0x48
 8004916:	4b07      	ldr	r3, [pc, #28]	; (8004934 <HAL_CRC_MspInit+0x3c>)
 8004918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800491a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8004922:	bf00      	nop
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40023000 	.word	0x40023000
 8004934:	40021000 	.word	0x40021000

08004938 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08a      	sub	sp, #40	; 0x28
 800493c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800493e:	1d3b      	adds	r3, r7, #4
 8004940:	2224      	movs	r2, #36	; 0x24
 8004942:	2100      	movs	r1, #0
 8004944:	4618      	mov	r0, r3
 8004946:	f00b f9f7 	bl	800fd38 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800494a:	4b17      	ldr	r3, [pc, #92]	; (80049a8 <MX_DAC1_Init+0x70>)
 800494c:	4a17      	ldr	r2, [pc, #92]	; (80049ac <MX_DAC1_Init+0x74>)
 800494e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004950:	4815      	ldr	r0, [pc, #84]	; (80049a8 <MX_DAC1_Init+0x70>)
 8004952:	f001 fe39 	bl	80065c8 <HAL_DAC_Init>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800495c:	f000 fa8c 	bl	8004e78 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004960:	2300      	movs	r3, #0
 8004962:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004964:	2300      	movs	r3, #0
 8004966:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004968:	2300      	movs	r3, #0
 800496a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800496c:	2300      	movs	r3, #0
 800496e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004970:	2300      	movs	r3, #0
 8004972:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004974:	1d3b      	adds	r3, r7, #4
 8004976:	2200      	movs	r2, #0
 8004978:	4619      	mov	r1, r3
 800497a:	480b      	ldr	r0, [pc, #44]	; (80049a8 <MX_DAC1_Init+0x70>)
 800497c:	f001 fe46 	bl	800660c <HAL_DAC_ConfigChannel>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8004986:	f000 fa77 	bl	8004e78 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800498a:	1d3b      	adds	r3, r7, #4
 800498c:	2210      	movs	r2, #16
 800498e:	4619      	mov	r1, r3
 8004990:	4805      	ldr	r0, [pc, #20]	; (80049a8 <MX_DAC1_Init+0x70>)
 8004992:	f001 fe3b 	bl	800660c <HAL_DAC_ConfigChannel>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 800499c:	f000 fa6c 	bl	8004e78 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80049a0:	bf00      	nop
 80049a2:	3728      	adds	r7, #40	; 0x28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	200002f4 	.word	0x200002f4
 80049ac:	40007400 	.word	0x40007400

080049b0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08a      	sub	sp, #40	; 0x28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049b8:	f107 0314 	add.w	r3, r7, #20
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	605a      	str	r2, [r3, #4]
 80049c2:	609a      	str	r2, [r3, #8]
 80049c4:	60da      	str	r2, [r3, #12]
 80049c6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a40      	ldr	r2, [pc, #256]	; (8004ad0 <HAL_DAC_MspInit+0x120>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d17a      	bne.n	8004ac8 <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80049d2:	4b40      	ldr	r3, [pc, #256]	; (8004ad4 <HAL_DAC_MspInit+0x124>)
 80049d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d6:	4a3f      	ldr	r2, [pc, #252]	; (8004ad4 <HAL_DAC_MspInit+0x124>)
 80049d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049dc:	6593      	str	r3, [r2, #88]	; 0x58
 80049de:	4b3d      	ldr	r3, [pc, #244]	; (8004ad4 <HAL_DAC_MspInit+0x124>)
 80049e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049e6:	613b      	str	r3, [r7, #16]
 80049e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049ea:	4b3a      	ldr	r3, [pc, #232]	; (8004ad4 <HAL_DAC_MspInit+0x124>)
 80049ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ee:	4a39      	ldr	r2, [pc, #228]	; (8004ad4 <HAL_DAC_MspInit+0x124>)
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049f6:	4b37      	ldr	r3, [pc, #220]	; (8004ad4 <HAL_DAC_MspInit+0x124>)
 80049f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004a02:	2330      	movs	r3, #48	; 0x30
 8004a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a06:	2303      	movs	r3, #3
 8004a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a0e:	f107 0314 	add.w	r3, r7, #20
 8004a12:	4619      	mov	r1, r3
 8004a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a18:	f002 faf2 	bl	8007000 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8004a1c:	4b2e      	ldr	r3, [pc, #184]	; (8004ad8 <HAL_DAC_MspInit+0x128>)
 8004a1e:	4a2f      	ldr	r2, [pc, #188]	; (8004adc <HAL_DAC_MspInit+0x12c>)
 8004a20:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8004a22:	4b2d      	ldr	r3, [pc, #180]	; (8004ad8 <HAL_DAC_MspInit+0x128>)
 8004a24:	2206      	movs	r2, #6
 8004a26:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a28:	4b2b      	ldr	r3, [pc, #172]	; (8004ad8 <HAL_DAC_MspInit+0x128>)
 8004a2a:	2210      	movs	r2, #16
 8004a2c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a2e:	4b2a      	ldr	r3, [pc, #168]	; (8004ad8 <HAL_DAC_MspInit+0x128>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004a34:	4b28      	ldr	r3, [pc, #160]	; (8004ad8 <HAL_DAC_MspInit+0x128>)
 8004a36:	2280      	movs	r2, #128	; 0x80
 8004a38:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004a3a:	4b27      	ldr	r3, [pc, #156]	; (8004ad8 <HAL_DAC_MspInit+0x128>)
 8004a3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a40:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004a42:	4b25      	ldr	r3, [pc, #148]	; (8004ad8 <HAL_DAC_MspInit+0x128>)
 8004a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a48:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 8004a4a:	4b23      	ldr	r3, [pc, #140]	; (8004ad8 <HAL_DAC_MspInit+0x128>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004a50:	4b21      	ldr	r3, [pc, #132]	; (8004ad8 <HAL_DAC_MspInit+0x128>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8004a56:	4820      	ldr	r0, [pc, #128]	; (8004ad8 <HAL_DAC_MspInit+0x128>)
 8004a58:	f001 fef2 	bl	8006840 <HAL_DMA_Init>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8004a62:	f000 fa09 	bl	8004e78 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a1b      	ldr	r2, [pc, #108]	; (8004ad8 <HAL_DAC_MspInit+0x128>)
 8004a6a:	609a      	str	r2, [r3, #8]
 8004a6c:	4a1a      	ldr	r2, [pc, #104]	; (8004ad8 <HAL_DAC_MspInit+0x128>)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8004a72:	4b1b      	ldr	r3, [pc, #108]	; (8004ae0 <HAL_DAC_MspInit+0x130>)
 8004a74:	4a1b      	ldr	r2, [pc, #108]	; (8004ae4 <HAL_DAC_MspInit+0x134>)
 8004a76:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8004a78:	4b19      	ldr	r3, [pc, #100]	; (8004ae0 <HAL_DAC_MspInit+0x130>)
 8004a7a:	2205      	movs	r2, #5
 8004a7c:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a7e:	4b18      	ldr	r3, [pc, #96]	; (8004ae0 <HAL_DAC_MspInit+0x130>)
 8004a80:	2210      	movs	r2, #16
 8004a82:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a84:	4b16      	ldr	r3, [pc, #88]	; (8004ae0 <HAL_DAC_MspInit+0x130>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8004a8a:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <HAL_DAC_MspInit+0x130>)
 8004a8c:	2280      	movs	r2, #128	; 0x80
 8004a8e:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004a90:	4b13      	ldr	r3, [pc, #76]	; (8004ae0 <HAL_DAC_MspInit+0x130>)
 8004a92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a96:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004a98:	4b11      	ldr	r3, [pc, #68]	; (8004ae0 <HAL_DAC_MspInit+0x130>)
 8004a9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a9e:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_NORMAL;
 8004aa0:	4b0f      	ldr	r3, [pc, #60]	; (8004ae0 <HAL_DAC_MspInit+0x130>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8004aa6:	4b0e      	ldr	r3, [pc, #56]	; (8004ae0 <HAL_DAC_MspInit+0x130>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8004aac:	480c      	ldr	r0, [pc, #48]	; (8004ae0 <HAL_DAC_MspInit+0x130>)
 8004aae:	f001 fec7 	bl	8006840 <HAL_DMA_Init>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8004ab8:	f000 f9de 	bl	8004e78 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a08      	ldr	r2, [pc, #32]	; (8004ae0 <HAL_DAC_MspInit+0x130>)
 8004ac0:	60da      	str	r2, [r3, #12]
 8004ac2:	4a07      	ldr	r2, [pc, #28]	; (8004ae0 <HAL_DAC_MspInit+0x130>)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8004ac8:	bf00      	nop
 8004aca:	3728      	adds	r7, #40	; 0x28
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40007400 	.word	0x40007400
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	20000308 	.word	0x20000308
 8004adc:	40020030 	.word	0x40020030
 8004ae0:	20000350 	.word	0x20000350
 8004ae4:	40020044 	.word	0x40020044

08004ae8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004aee:	4b14      	ldr	r3, [pc, #80]	; (8004b40 <MX_DMA_Init+0x58>)
 8004af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af2:	4a13      	ldr	r2, [pc, #76]	; (8004b40 <MX_DMA_Init+0x58>)
 8004af4:	f043 0301 	orr.w	r3, r3, #1
 8004af8:	6493      	str	r3, [r2, #72]	; 0x48
 8004afa:	4b11      	ldr	r3, [pc, #68]	; (8004b40 <MX_DMA_Init+0x58>)
 8004afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	607b      	str	r3, [r7, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004b06:	2200      	movs	r2, #0
 8004b08:	2100      	movs	r1, #0
 8004b0a:	200b      	movs	r0, #11
 8004b0c:	f001 fc3b 	bl	8006386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004b10:	200b      	movs	r0, #11
 8004b12:	f001 fc54 	bl	80063be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004b16:	2200      	movs	r2, #0
 8004b18:	2100      	movs	r1, #0
 8004b1a:	200d      	movs	r0, #13
 8004b1c:	f001 fc33 	bl	8006386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004b20:	200d      	movs	r0, #13
 8004b22:	f001 fc4c 	bl	80063be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004b26:	2200      	movs	r2, #0
 8004b28:	2100      	movs	r1, #0
 8004b2a:	200e      	movs	r0, #14
 8004b2c:	f001 fc2b 	bl	8006386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004b30:	200e      	movs	r0, #14
 8004b32:	f001 fc44 	bl	80063be <HAL_NVIC_EnableIRQ>

}
 8004b36:	bf00      	nop
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40021000 	.word	0x40021000

08004b44 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08a      	sub	sp, #40	; 0x28
 8004b48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b4a:	f107 0314 	add.w	r3, r7, #20
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	605a      	str	r2, [r3, #4]
 8004b54:	609a      	str	r2, [r3, #8]
 8004b56:	60da      	str	r2, [r3, #12]
 8004b58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b5a:	4b67      	ldr	r3, [pc, #412]	; (8004cf8 <MX_GPIO_Init+0x1b4>)
 8004b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5e:	4a66      	ldr	r2, [pc, #408]	; (8004cf8 <MX_GPIO_Init+0x1b4>)
 8004b60:	f043 0304 	orr.w	r3, r3, #4
 8004b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b66:	4b64      	ldr	r3, [pc, #400]	; (8004cf8 <MX_GPIO_Init+0x1b4>)
 8004b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6a:	f003 0304 	and.w	r3, r3, #4
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b72:	4b61      	ldr	r3, [pc, #388]	; (8004cf8 <MX_GPIO_Init+0x1b4>)
 8004b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b76:	4a60      	ldr	r2, [pc, #384]	; (8004cf8 <MX_GPIO_Init+0x1b4>)
 8004b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b7e:	4b5e      	ldr	r3, [pc, #376]	; (8004cf8 <MX_GPIO_Init+0x1b4>)
 8004b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b8a:	4b5b      	ldr	r3, [pc, #364]	; (8004cf8 <MX_GPIO_Init+0x1b4>)
 8004b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8e:	4a5a      	ldr	r2, [pc, #360]	; (8004cf8 <MX_GPIO_Init+0x1b4>)
 8004b90:	f043 0301 	orr.w	r3, r3, #1
 8004b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b96:	4b58      	ldr	r3, [pc, #352]	; (8004cf8 <MX_GPIO_Init+0x1b4>)
 8004b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	60bb      	str	r3, [r7, #8]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ba2:	4b55      	ldr	r3, [pc, #340]	; (8004cf8 <MX_GPIO_Init+0x1b4>)
 8004ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba6:	4a54      	ldr	r2, [pc, #336]	; (8004cf8 <MX_GPIO_Init+0x1b4>)
 8004ba8:	f043 0302 	orr.w	r3, r3, #2
 8004bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bae:	4b52      	ldr	r3, [pc, #328]	; (8004cf8 <MX_GPIO_Init+0x1b4>)
 8004bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	607b      	str	r3, [r7, #4]
 8004bb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DI_OUT_8_P_Pin|DI_OUT_8_N_Pin|DI_OUT_6_N_Pin|DI_OUT_5_P_Pin
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f24c 31d0 	movw	r1, #50128	; 0xc3d0
 8004bc0:	484e      	ldr	r0, [pc, #312]	; (8004cfc <MX_GPIO_Init+0x1b8>)
 8004bc2:	f002 fbaf 	bl	8007324 <HAL_GPIO_WritePin>
                          |DI_OUT_3_N_Pin|DI_OUT_3_P_Pin|DI_OUT_1_N_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DI_OUT_4_P_Pin|DI_OUT_6_P_Pin|DI_OUT_2_N_Pin|DI_OUT_4_N_Pin
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f64e 41ff 	movw	r1, #60671	; 0xecff
 8004bcc:	484c      	ldr	r0, [pc, #304]	; (8004d00 <MX_GPIO_Init+0x1bc>)
 8004bce:	f002 fba9 	bl	8007324 <HAL_GPIO_WritePin>
                          |DI_OUT_2_P_Pin|DI_OUT_7_N_Pin|DI_OUT_7_P_Pin|DI_OUT_5_N_Pin
                          |RFM_NSS_Pin|RFM_RST_Pin|RFM_DI_3_Pin|RFM_DI_0_Pin
                          |RFM_DI_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DI_OUT_1_P_Pin|LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bdc:	f002 fba2 	bl	8007324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004be0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004be6:	2303      	movs	r3, #3
 8004be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bee:	f107 0314 	add.w	r3, r7, #20
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	4841      	ldr	r0, [pc, #260]	; (8004cfc <MX_GPIO_Init+0x1b8>)
 8004bf6:	f002 fa03 	bl	8007000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DI_OUT_8_P_Pin|DI_OUT_8_N_Pin|DI_OUT_6_N_Pin|DI_OUT_5_P_Pin
 8004bfa:	f24c 33d0 	movw	r3, #50128	; 0xc3d0
 8004bfe:	617b      	str	r3, [r7, #20]
                          |DI_OUT_3_N_Pin|DI_OUT_3_P_Pin|DI_OUT_1_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c00:	2301      	movs	r3, #1
 8004c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c04:	2300      	movs	r3, #0
 8004c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c0c:	f107 0314 	add.w	r3, r7, #20
 8004c10:	4619      	mov	r1, r3
 8004c12:	483a      	ldr	r0, [pc, #232]	; (8004cfc <MX_GPIO_Init+0x1b8>)
 8004c14:	f002 f9f4 	bl	8007000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8004c18:	2309      	movs	r3, #9
 8004c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c20:	2300      	movs	r3, #0
 8004c22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004c24:	f107 0314 	add.w	r3, r7, #20
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4836      	ldr	r0, [pc, #216]	; (8004d04 <MX_GPIO_Init+0x1c0>)
 8004c2c:	f002 f9e8 	bl	8007000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DI_1_Pin;
 8004c30:	2302      	movs	r3, #2
 8004c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DI_1_GPIO_Port, &GPIO_InitStruct);
 8004c3c:	f107 0314 	add.w	r3, r7, #20
 8004c40:	4619      	mov	r1, r3
 8004c42:	4830      	ldr	r0, [pc, #192]	; (8004d04 <MX_GPIO_Init+0x1c0>)
 8004c44:	f002 f9dc 	bl	8007000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DI_2_Pin|DI_3_Pin|DI_4_Pin|DI_5_Pin;
 8004c48:	230f      	movs	r3, #15
 8004c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c54:	f107 0314 	add.w	r3, r7, #20
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4828      	ldr	r0, [pc, #160]	; (8004cfc <MX_GPIO_Init+0x1b8>)
 8004c5c:	f002 f9d0 	bl	8007000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DI_6_Pin|DI_7_Pin|DI_8_Pin;
 8004c60:	2307      	movs	r3, #7
 8004c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c64:	2300      	movs	r3, #0
 8004c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c6c:	f107 0314 	add.w	r3, r7, #20
 8004c70:	4619      	mov	r1, r3
 8004c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c76:	f002 f9c3 	bl	8007000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_15;
 8004c7a:	f248 0308 	movw	r3, #32776	; 0x8008
 8004c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c80:	2303      	movs	r3, #3
 8004c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c84:	2300      	movs	r3, #0
 8004c86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c88:	f107 0314 	add.w	r3, r7, #20
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c92:	f002 f9b5 	bl	8007000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DI_OUT_4_P_Pin|DI_OUT_6_P_Pin|DI_OUT_2_N_Pin|DI_OUT_4_N_Pin
 8004c96:	f64e 43ff 	movw	r3, #60671	; 0xecff
 8004c9a:	617b      	str	r3, [r7, #20]
                          |DI_OUT_2_P_Pin|DI_OUT_7_N_Pin|DI_OUT_7_P_Pin|DI_OUT_5_N_Pin
                          |RFM_NSS_Pin|RFM_RST_Pin|RFM_DI_3_Pin|RFM_DI_0_Pin
                          |RFM_DI_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ca8:	f107 0314 	add.w	r3, r7, #20
 8004cac:	4619      	mov	r1, r3
 8004cae:	4814      	ldr	r0, [pc, #80]	; (8004d00 <MX_GPIO_Init+0x1bc>)
 8004cb0:	f002 f9a6 	bl	8007000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 8004cb4:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8004cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cc2:	f107 0314 	add.w	r3, r7, #20
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	480d      	ldr	r0, [pc, #52]	; (8004d00 <MX_GPIO_Init+0x1bc>)
 8004cca:	f002 f999 	bl	8007000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DI_OUT_1_P_Pin|LED_R_Pin|LED_G_Pin;
 8004cce:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ce0:	f107 0314 	add.w	r3, r7, #20
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cea:	f002 f989 	bl	8007000 <HAL_GPIO_Init>

}
 8004cee:	bf00      	nop
 8004cf0:	3728      	adds	r7, #40	; 0x28
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	48000800 	.word	0x48000800
 8004d00:	48000400 	.word	0x48000400
 8004d04:	48001c00 	.word	0x48001c00

08004d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d0c:	f000 fb13 	bl	8005336 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d10:	f000 f818 	bl	8004d44 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d14:	f7ff ff16 	bl	8004b44 <MX_GPIO_Init>
  MX_DMA_Init();
 8004d18:	f7ff fee6 	bl	8004ae8 <MX_DMA_Init>
  MX_ADC1_Init();
 8004d1c:	f7ff fcd2 	bl	80046c4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8004d20:	f7ff fe0a 	bl	8004938 <MX_DAC1_Init>
  MX_SPI3_Init();
 8004d24:	f000 f8cc 	bl	8004ec0 <MX_SPI3_Init>
  MX_CRC_Init();
 8004d28:	f7ff fdc4 	bl	80048b4 <MX_CRC_Init>
  MX_TIM6_Init();
 8004d2c:	f000 fa34 	bl	8005198 <MX_TIM6_Init>
  MX_TIM7_Init();
 8004d30:	f000 fa68 	bl	8005204 <MX_TIM7_Init>
  MX_USB_DEVICE_Init();
 8004d34:	f00a fa2a 	bl	800f18c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  appMain.Startup();
 8004d38:	4801      	ldr	r0, [pc, #4]	; (8004d40 <main+0x38>)
 8004d3a:	f7fb fdc7 	bl	80008cc <_ZN7AppMain7StartupEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004d3e:	e7fe      	b.n	8004d3e <main+0x36>
 8004d40:	20000398 	.word	0x20000398

08004d44 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b096      	sub	sp, #88	; 0x58
 8004d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d4a:	f107 0314 	add.w	r3, r7, #20
 8004d4e:	2244      	movs	r2, #68	; 0x44
 8004d50:	2100      	movs	r1, #0
 8004d52:	4618      	mov	r0, r3
 8004d54:	f00a fff0 	bl	800fd38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d58:	463b      	mov	r3, r7
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	605a      	str	r2, [r3, #4]
 8004d60:	609a      	str	r2, [r3, #8]
 8004d62:	60da      	str	r2, [r3, #12]
 8004d64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004d66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004d6a:	f004 f8b3 	bl	8008ed4 <HAL_PWREx_ControlVoltageScaling>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	bf14      	ite	ne
 8004d74:	2301      	movne	r3, #1
 8004d76:	2300      	moveq	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8004d7e:	f000 f87b 	bl	8004e78 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8004d82:	2330      	movs	r3, #48	; 0x30
 8004d84:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004d86:	2301      	movs	r3, #1
 8004d88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004d92:	2360      	movs	r3, #96	; 0x60
 8004d94:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d96:	2302      	movs	r3, #2
 8004d98:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8004da2:	2324      	movs	r3, #36	; 0x24
 8004da4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004da6:	2307      	movs	r3, #7
 8004da8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004daa:	2302      	movs	r3, #2
 8004dac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004dae:	2302      	movs	r3, #2
 8004db0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004db2:	f107 0314 	add.w	r3, r7, #20
 8004db6:	4618      	mov	r0, r3
 8004db8:	f004 f8f2 	bl	8008fa0 <HAL_RCC_OscConfig>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	bf14      	ite	ne
 8004dc2:	2301      	movne	r3, #1
 8004dc4:	2300      	moveq	r3, #0
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8004dcc:	f000 f854 	bl	8004e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004dd0:	230f      	movs	r3, #15
 8004dd2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004de0:	2300      	movs	r3, #0
 8004de2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004de4:	463b      	mov	r3, r7
 8004de6:	2104      	movs	r1, #4
 8004de8:	4618      	mov	r0, r3
 8004dea:	f004 fced 	bl	80097c8 <HAL_RCC_ClockConfig>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	bf14      	ite	ne
 8004df4:	2301      	movne	r3, #1
 8004df6:	2300      	moveq	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 8004dfe:	f000 f83b 	bl	8004e78 <Error_Handler>
  }
}
 8004e02:	bf00      	nop
 8004e04:	3758      	adds	r7, #88	; 0x58
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <HAL_TIM_PeriodElapsedCallback>:


/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]


	if(htim->Instance == TIM7){
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a04      	ldr	r2, [pc, #16]	; (8004e2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d102      	bne.n	8004e24 <HAL_TIM_PeriodElapsedCallback+0x18>
		appMain.taskStatus.UpdateTasks();
 8004e1e:	4804      	ldr	r0, [pc, #16]	; (8004e30 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8004e20:	f7ff fa64 	bl	80042ec <_ZN11TaskHandler11UpdateTasksEv>
	}



}
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	40001400 	.word	0x40001400
 8004e30:	200003b8 	.word	0x200003b8

08004e34 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]

}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <USB_CDC_RX_Interrupt>:




void USB_CDC_RX_Interrupt(uint8_t *data, uint32_t length)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
	appMain.usbCOM->Receive(data, length);
 8004e52:	4b08      	ldr	r3, [pc, #32]	; (8004e74 <USB_CDC_RX_Interrupt+0x2c>)
 8004e54:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 8004e58:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <USB_CDC_RX_Interrupt+0x2c>)
 8004e5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3304      	adds	r3, #4
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	4798      	blx	r3
}
 8004e6c:	bf00      	nop
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	20000398 	.word	0x20000398

08004e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e7c:	b672      	cpsid	i
}
 8004e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e80:	e7fe      	b.n	8004e80 <Error_Handler+0x8>
	...

08004e84 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d107      	bne.n	8004ea4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d102      	bne.n	8004ea4 <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 8004e9e:	4803      	ldr	r0, [pc, #12]	; (8004eac <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8004ea0:	f7fb fc67 	bl	8000772 <_ZN7AppMainC1Ev>
}
 8004ea4:	bf00      	nop
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	20000398 	.word	0x20000398

08004eb0 <_GLOBAL__sub_I_appMain>:
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004eb8:	2001      	movs	r0, #1
 8004eba:	f7ff ffe3 	bl	8004e84 <_Z41__static_initialization_and_destruction_0ii>
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004ec4:	4b1b      	ldr	r3, [pc, #108]	; (8004f34 <MX_SPI3_Init+0x74>)
 8004ec6:	4a1c      	ldr	r2, [pc, #112]	; (8004f38 <MX_SPI3_Init+0x78>)
 8004ec8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004eca:	4b1a      	ldr	r3, [pc, #104]	; (8004f34 <MX_SPI3_Init+0x74>)
 8004ecc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004ed0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004ed2:	4b18      	ldr	r3, [pc, #96]	; (8004f34 <MX_SPI3_Init+0x74>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ed8:	4b16      	ldr	r3, [pc, #88]	; (8004f34 <MX_SPI3_Init+0x74>)
 8004eda:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004ede:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ee0:	4b14      	ldr	r3, [pc, #80]	; (8004f34 <MX_SPI3_Init+0x74>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ee6:	4b13      	ldr	r3, [pc, #76]	; (8004f34 <MX_SPI3_Init+0x74>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004eec:	4b11      	ldr	r3, [pc, #68]	; (8004f34 <MX_SPI3_Init+0x74>)
 8004eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ef2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004ef4:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <MX_SPI3_Init+0x74>)
 8004ef6:	2218      	movs	r2, #24
 8004ef8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004efa:	4b0e      	ldr	r3, [pc, #56]	; (8004f34 <MX_SPI3_Init+0x74>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f00:	4b0c      	ldr	r3, [pc, #48]	; (8004f34 <MX_SPI3_Init+0x74>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f06:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <MX_SPI3_Init+0x74>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004f0c:	4b09      	ldr	r3, [pc, #36]	; (8004f34 <MX_SPI3_Init+0x74>)
 8004f0e:	2207      	movs	r2, #7
 8004f10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004f12:	4b08      	ldr	r3, [pc, #32]	; (8004f34 <MX_SPI3_Init+0x74>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004f18:	4b06      	ldr	r3, [pc, #24]	; (8004f34 <MX_SPI3_Init+0x74>)
 8004f1a:	2208      	movs	r2, #8
 8004f1c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004f1e:	4805      	ldr	r0, [pc, #20]	; (8004f34 <MX_SPI3_Init+0x74>)
 8004f20:	f005 f986 	bl	800a230 <HAL_SPI_Init>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8004f2a:	f7ff ffa5 	bl	8004e78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004f2e:	bf00      	nop
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20000588 	.word	0x20000588
 8004f38:	40003c00 	.word	0x40003c00

08004f3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08a      	sub	sp, #40	; 0x28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f44:	f107 0314 	add.w	r3, r7, #20
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	605a      	str	r2, [r3, #4]
 8004f4e:	609a      	str	r2, [r3, #8]
 8004f50:	60da      	str	r2, [r3, #12]
 8004f52:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a17      	ldr	r2, [pc, #92]	; (8004fb8 <HAL_SPI_MspInit+0x7c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d128      	bne.n	8004fb0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004f5e:	4b17      	ldr	r3, [pc, #92]	; (8004fbc <HAL_SPI_MspInit+0x80>)
 8004f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f62:	4a16      	ldr	r2, [pc, #88]	; (8004fbc <HAL_SPI_MspInit+0x80>)
 8004f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f68:	6593      	str	r3, [r2, #88]	; 0x58
 8004f6a:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <HAL_SPI_MspInit+0x80>)
 8004f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f72:	613b      	str	r3, [r7, #16]
 8004f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f76:	4b11      	ldr	r3, [pc, #68]	; (8004fbc <HAL_SPI_MspInit+0x80>)
 8004f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7a:	4a10      	ldr	r2, [pc, #64]	; (8004fbc <HAL_SPI_MspInit+0x80>)
 8004f7c:	f043 0304 	orr.w	r3, r3, #4
 8004f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f82:	4b0e      	ldr	r3, [pc, #56]	; (8004fbc <HAL_SPI_MspInit+0x80>)
 8004f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f86:	f003 0304 	and.w	r3, r3, #4
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004f8e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f94:	2302      	movs	r3, #2
 8004f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004fa0:	2306      	movs	r3, #6
 8004fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fa4:	f107 0314 	add.w	r3, r7, #20
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4805      	ldr	r0, [pc, #20]	; (8004fc0 <HAL_SPI_MspInit+0x84>)
 8004fac:	f002 f828 	bl	8007000 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004fb0:	bf00      	nop
 8004fb2:	3728      	adds	r7, #40	; 0x28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	40003c00 	.word	0x40003c00
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	48000800 	.word	0x48000800

08004fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fca:	4b0f      	ldr	r3, [pc, #60]	; (8005008 <HAL_MspInit+0x44>)
 8004fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fce:	4a0e      	ldr	r2, [pc, #56]	; (8005008 <HAL_MspInit+0x44>)
 8004fd0:	f043 0301 	orr.w	r3, r3, #1
 8004fd4:	6613      	str	r3, [r2, #96]	; 0x60
 8004fd6:	4b0c      	ldr	r3, [pc, #48]	; (8005008 <HAL_MspInit+0x44>)
 8004fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	607b      	str	r3, [r7, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fe2:	4b09      	ldr	r3, [pc, #36]	; (8005008 <HAL_MspInit+0x44>)
 8004fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe6:	4a08      	ldr	r2, [pc, #32]	; (8005008 <HAL_MspInit+0x44>)
 8004fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fec:	6593      	str	r3, [r2, #88]	; 0x58
 8004fee:	4b06      	ldr	r3, [pc, #24]	; (8005008 <HAL_MspInit+0x44>)
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40021000 	.word	0x40021000

0800500c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005010:	e7fe      	b.n	8005010 <NMI_Handler+0x4>

08005012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005012:	b480      	push	{r7}
 8005014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005016:	e7fe      	b.n	8005016 <HardFault_Handler+0x4>

08005018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800501c:	e7fe      	b.n	800501c <MemManage_Handler+0x4>

0800501e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800501e:	b480      	push	{r7}
 8005020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005022:	e7fe      	b.n	8005022 <BusFault_Handler+0x4>

08005024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005028:	e7fe      	b.n	8005028 <UsageFault_Handler+0x4>

0800502a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800502a:	b480      	push	{r7}
 800502c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800502e:	bf00      	nop
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800503c:	bf00      	nop
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005046:	b480      	push	{r7}
 8005048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800504a:	bf00      	nop
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005058:	f000 f9c2 	bl	80053e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800505c:	bf00      	nop
 800505e:	bd80      	pop	{r7, pc}

08005060 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005064:	4802      	ldr	r0, [pc, #8]	; (8005070 <DMA1_Channel1_IRQHandler+0x10>)
 8005066:	f001 fca3 	bl	80069b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800506a:	bf00      	nop
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	20000288 	.word	0x20000288

08005074 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8005078:	4802      	ldr	r0, [pc, #8]	; (8005084 <DMA1_Channel3_IRQHandler+0x10>)
 800507a:	f001 fc99 	bl	80069b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800507e:	bf00      	nop
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20000308 	.word	0x20000308

08005088 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 800508c:	4802      	ldr	r0, [pc, #8]	; (8005098 <DMA1_Channel4_IRQHandler+0x10>)
 800508e:	f001 fc8f 	bl	80069b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005092:	bf00      	nop
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20000350 	.word	0x20000350

0800509c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80050a0:	4802      	ldr	r0, [pc, #8]	; (80050ac <TIM7_IRQHandler+0x10>)
 80050a2:	f005 fef9 	bl	800ae98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80050a6:	bf00      	nop
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	2000063c 	.word	0x2000063c

080050b0 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80050b4:	4802      	ldr	r0, [pc, #8]	; (80050c0 <USB_IRQHandler+0x10>)
 80050b6:	f002 faa0 	bl	80075fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80050ba:	bf00      	nop
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	20000d58 	.word	0x20000d58

080050c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
	return 1;
 80050c8:	2301      	movs	r3, #1
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <_kill>:

int _kill(int pid, int sig)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80050de:	f00a fdf9 	bl	800fcd4 <__errno>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2216      	movs	r2, #22
 80050e6:	601a      	str	r2, [r3, #0]
	return -1;
 80050e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <_exit>:

void _exit (int status)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80050fc:	f04f 31ff 	mov.w	r1, #4294967295
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7ff ffe7 	bl	80050d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005106:	e7fe      	b.n	8005106 <_exit+0x12>

08005108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005110:	4a14      	ldr	r2, [pc, #80]	; (8005164 <_sbrk+0x5c>)
 8005112:	4b15      	ldr	r3, [pc, #84]	; (8005168 <_sbrk+0x60>)
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800511c:	4b13      	ldr	r3, [pc, #76]	; (800516c <_sbrk+0x64>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d102      	bne.n	800512a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005124:	4b11      	ldr	r3, [pc, #68]	; (800516c <_sbrk+0x64>)
 8005126:	4a12      	ldr	r2, [pc, #72]	; (8005170 <_sbrk+0x68>)
 8005128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800512a:	4b10      	ldr	r3, [pc, #64]	; (800516c <_sbrk+0x64>)
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4413      	add	r3, r2
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	429a      	cmp	r2, r3
 8005136:	d207      	bcs.n	8005148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005138:	f00a fdcc 	bl	800fcd4 <__errno>
 800513c:	4603      	mov	r3, r0
 800513e:	220c      	movs	r2, #12
 8005140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005142:	f04f 33ff 	mov.w	r3, #4294967295
 8005146:	e009      	b.n	800515c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005148:	4b08      	ldr	r3, [pc, #32]	; (800516c <_sbrk+0x64>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800514e:	4b07      	ldr	r3, [pc, #28]	; (800516c <_sbrk+0x64>)
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4413      	add	r3, r2
 8005156:	4a05      	ldr	r2, [pc, #20]	; (800516c <_sbrk+0x64>)
 8005158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800515a:	68fb      	ldr	r3, [r7, #12]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	20010000 	.word	0x20010000
 8005168:	00000400 	.word	0x00000400
 800516c:	200005ec 	.word	0x200005ec
 8005170:	20001288 	.word	0x20001288

08005174 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005178:	4b06      	ldr	r3, [pc, #24]	; (8005194 <SystemInit+0x20>)
 800517a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517e:	4a05      	ldr	r2, [pc, #20]	; (8005194 <SystemInit+0x20>)
 8005180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005188:	bf00      	nop
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	e000ed00 	.word	0xe000ed00

08005198 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800519e:	1d3b      	adds	r3, r7, #4
 80051a0:	2200      	movs	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	605a      	str	r2, [r3, #4]
 80051a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80051a8:	4b14      	ldr	r3, [pc, #80]	; (80051fc <MX_TIM6_Init+0x64>)
 80051aa:	4a15      	ldr	r2, [pc, #84]	; (8005200 <MX_TIM6_Init+0x68>)
 80051ac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 80051ae:	4b13      	ldr	r3, [pc, #76]	; (80051fc <MX_TIM6_Init+0x64>)
 80051b0:	220a      	movs	r2, #10
 80051b2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051b4:	4b11      	ldr	r3, [pc, #68]	; (80051fc <MX_TIM6_Init+0x64>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16000;
 80051ba:	4b10      	ldr	r3, [pc, #64]	; (80051fc <MX_TIM6_Init+0x64>)
 80051bc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80051c0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051c2:	4b0e      	ldr	r3, [pc, #56]	; (80051fc <MX_TIM6_Init+0x64>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80051c8:	480c      	ldr	r0, [pc, #48]	; (80051fc <MX_TIM6_Init+0x64>)
 80051ca:	f005 fdb9 	bl	800ad40 <HAL_TIM_Base_Init>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80051d4:	f7ff fe50 	bl	8004e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051d8:	2300      	movs	r3, #0
 80051da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80051e0:	1d3b      	adds	r3, r7, #4
 80051e2:	4619      	mov	r1, r3
 80051e4:	4805      	ldr	r0, [pc, #20]	; (80051fc <MX_TIM6_Init+0x64>)
 80051e6:	f005 fff9 	bl	800b1dc <HAL_TIMEx_MasterConfigSynchronization>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80051f0:	f7ff fe42 	bl	8004e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80051f4:	bf00      	nop
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	200005f0 	.word	0x200005f0
 8005200:	40001000 	.word	0x40001000

08005204 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800520a:	1d3b      	adds	r3, r7, #4
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	605a      	str	r2, [r3, #4]
 8005212:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005214:	4b14      	ldr	r3, [pc, #80]	; (8005268 <MX_TIM7_Init+0x64>)
 8005216:	4a15      	ldr	r2, [pc, #84]	; (800526c <MX_TIM7_Init+0x68>)
 8005218:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10;
 800521a:	4b13      	ldr	r3, [pc, #76]	; (8005268 <MX_TIM7_Init+0x64>)
 800521c:	220a      	movs	r2, #10
 800521e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005220:	4b11      	ldr	r3, [pc, #68]	; (8005268 <MX_TIM7_Init+0x64>)
 8005222:	2200      	movs	r2, #0
 8005224:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7199;
 8005226:	4b10      	ldr	r3, [pc, #64]	; (8005268 <MX_TIM7_Init+0x64>)
 8005228:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800522c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800522e:	4b0e      	ldr	r3, [pc, #56]	; (8005268 <MX_TIM7_Init+0x64>)
 8005230:	2200      	movs	r2, #0
 8005232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005234:	480c      	ldr	r0, [pc, #48]	; (8005268 <MX_TIM7_Init+0x64>)
 8005236:	f005 fd83 	bl	800ad40 <HAL_TIM_Base_Init>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005240:	f7ff fe1a 	bl	8004e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005244:	2320      	movs	r3, #32
 8005246:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005248:	2300      	movs	r3, #0
 800524a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800524c:	1d3b      	adds	r3, r7, #4
 800524e:	4619      	mov	r1, r3
 8005250:	4805      	ldr	r0, [pc, #20]	; (8005268 <MX_TIM7_Init+0x64>)
 8005252:	f005 ffc3 	bl	800b1dc <HAL_TIMEx_MasterConfigSynchronization>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800525c:	f7ff fe0c 	bl	8004e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005260:	bf00      	nop
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	2000063c 	.word	0x2000063c
 800526c:	40001400 	.word	0x40001400

08005270 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a16      	ldr	r2, [pc, #88]	; (80052d8 <HAL_TIM_Base_MspInit+0x68>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d10c      	bne.n	800529c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005282:	4b16      	ldr	r3, [pc, #88]	; (80052dc <HAL_TIM_Base_MspInit+0x6c>)
 8005284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005286:	4a15      	ldr	r2, [pc, #84]	; (80052dc <HAL_TIM_Base_MspInit+0x6c>)
 8005288:	f043 0310 	orr.w	r3, r3, #16
 800528c:	6593      	str	r3, [r2, #88]	; 0x58
 800528e:	4b13      	ldr	r3, [pc, #76]	; (80052dc <HAL_TIM_Base_MspInit+0x6c>)
 8005290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005292:	f003 0310 	and.w	r3, r3, #16
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800529a:	e018      	b.n	80052ce <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a0f      	ldr	r2, [pc, #60]	; (80052e0 <HAL_TIM_Base_MspInit+0x70>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d113      	bne.n	80052ce <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80052a6:	4b0d      	ldr	r3, [pc, #52]	; (80052dc <HAL_TIM_Base_MspInit+0x6c>)
 80052a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052aa:	4a0c      	ldr	r2, [pc, #48]	; (80052dc <HAL_TIM_Base_MspInit+0x6c>)
 80052ac:	f043 0320 	orr.w	r3, r3, #32
 80052b0:	6593      	str	r3, [r2, #88]	; 0x58
 80052b2:	4b0a      	ldr	r3, [pc, #40]	; (80052dc <HAL_TIM_Base_MspInit+0x6c>)
 80052b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	60bb      	str	r3, [r7, #8]
 80052bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80052be:	2200      	movs	r2, #0
 80052c0:	2100      	movs	r1, #0
 80052c2:	2037      	movs	r0, #55	; 0x37
 80052c4:	f001 f85f 	bl	8006386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80052c8:	2037      	movs	r0, #55	; 0x37
 80052ca:	f001 f878 	bl	80063be <HAL_NVIC_EnableIRQ>
}
 80052ce:	bf00      	nop
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40001000 	.word	0x40001000
 80052dc:	40021000 	.word	0x40021000
 80052e0:	40001400 	.word	0x40001400

080052e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80052e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800531c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80052e8:	f7ff ff44 	bl	8005174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80052ec:	480c      	ldr	r0, [pc, #48]	; (8005320 <LoopForever+0x6>)
  ldr r1, =_edata
 80052ee:	490d      	ldr	r1, [pc, #52]	; (8005324 <LoopForever+0xa>)
  ldr r2, =_sidata
 80052f0:	4a0d      	ldr	r2, [pc, #52]	; (8005328 <LoopForever+0xe>)
  movs r3, #0
 80052f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052f4:	e002      	b.n	80052fc <LoopCopyDataInit>

080052f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052fa:	3304      	adds	r3, #4

080052fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005300:	d3f9      	bcc.n	80052f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005302:	4a0a      	ldr	r2, [pc, #40]	; (800532c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005304:	4c0a      	ldr	r4, [pc, #40]	; (8005330 <LoopForever+0x16>)
  movs r3, #0
 8005306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005308:	e001      	b.n	800530e <LoopFillZerobss>

0800530a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800530a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800530c:	3204      	adds	r2, #4

0800530e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800530e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005310:	d3fb      	bcc.n	800530a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005312:	f00a fce5 	bl	800fce0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005316:	f7ff fcf7 	bl	8004d08 <main>

0800531a <LoopForever>:

LoopForever:
    b LoopForever
 800531a:	e7fe      	b.n	800531a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800531c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8005320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005324:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8005328:	0801004c 	.word	0x0801004c
  ldr r2, =_sbss
 800532c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8005330:	20001288 	.word	0x20001288

08005334 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005334:	e7fe      	b.n	8005334 <ADC1_IRQHandler>

08005336 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b082      	sub	sp, #8
 800533a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005340:	2003      	movs	r0, #3
 8005342:	f001 f815 	bl	8006370 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005346:	200f      	movs	r0, #15
 8005348:	f000 f80e 	bl	8005368 <HAL_InitTick>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	71fb      	strb	r3, [r7, #7]
 8005356:	e001      	b.n	800535c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005358:	f7ff fe34 	bl	8004fc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800535c:	79fb      	ldrb	r3, [r7, #7]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005374:	4b17      	ldr	r3, [pc, #92]	; (80053d4 <HAL_InitTick+0x6c>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d023      	beq.n	80053c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800537c:	4b16      	ldr	r3, [pc, #88]	; (80053d8 <HAL_InitTick+0x70>)
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	4b14      	ldr	r3, [pc, #80]	; (80053d4 <HAL_InitTick+0x6c>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	4619      	mov	r1, r3
 8005386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800538a:	fbb3 f3f1 	udiv	r3, r3, r1
 800538e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005392:	4618      	mov	r0, r3
 8005394:	f001 f821 	bl	80063da <HAL_SYSTICK_Config>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10f      	bne.n	80053be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b0f      	cmp	r3, #15
 80053a2:	d809      	bhi.n	80053b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053a4:	2200      	movs	r2, #0
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	f04f 30ff 	mov.w	r0, #4294967295
 80053ac:	f000 ffeb 	bl	8006386 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80053b0:	4a0a      	ldr	r2, [pc, #40]	; (80053dc <HAL_InitTick+0x74>)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	e007      	b.n	80053c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	73fb      	strb	r3, [r7, #15]
 80053bc:	e004      	b.n	80053c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	73fb      	strb	r3, [r7, #15]
 80053c2:	e001      	b.n	80053c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20000008 	.word	0x20000008
 80053d8:	20000000 	.word	0x20000000
 80053dc:	20000004 	.word	0x20000004

080053e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80053e4:	4b06      	ldr	r3, [pc, #24]	; (8005400 <HAL_IncTick+0x20>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	4b06      	ldr	r3, [pc, #24]	; (8005404 <HAL_IncTick+0x24>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4413      	add	r3, r2
 80053f0:	4a04      	ldr	r2, [pc, #16]	; (8005404 <HAL_IncTick+0x24>)
 80053f2:	6013      	str	r3, [r2, #0]
}
 80053f4:	bf00      	nop
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	20000008 	.word	0x20000008
 8005404:	20000688 	.word	0x20000688

08005408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005408:	b480      	push	{r7}
 800540a:	af00      	add	r7, sp, #0
  return uwTick;
 800540c:	4b03      	ldr	r3, [pc, #12]	; (800541c <HAL_GetTick+0x14>)
 800540e:	681b      	ldr	r3, [r3, #0]
}
 8005410:	4618      	mov	r0, r3
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	20000688 	.word	0x20000688

08005420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005428:	f7ff ffee 	bl	8005408 <HAL_GetTick>
 800542c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005438:	d005      	beq.n	8005446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800543a:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <HAL_Delay+0x44>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4413      	add	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005446:	bf00      	nop
 8005448:	f7ff ffde 	bl	8005408 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	429a      	cmp	r2, r3
 8005456:	d8f7      	bhi.n	8005448 <HAL_Delay+0x28>
  {
  }
}
 8005458:	bf00      	nop
 800545a:	bf00      	nop
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20000008 	.word	0x20000008

08005468 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	609a      	str	r2, [r3, #8]
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	609a      	str	r2, [r3, #8]
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
 80054dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3360      	adds	r3, #96	; 0x60
 80054e2:	461a      	mov	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	4b08      	ldr	r3, [pc, #32]	; (8005514 <LL_ADC_SetOffset+0x44>)
 80054f2:	4013      	ands	r3, r2
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	4313      	orrs	r3, r2
 8005500:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005508:	bf00      	nop
 800550a:	371c      	adds	r7, #28
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	03fff000 	.word	0x03fff000

08005518 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	3360      	adds	r3, #96	; 0x60
 8005526:	461a      	mov	r2, r3
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3360      	adds	r3, #96	; 0x60
 8005554:	461a      	mov	r2, r3
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	431a      	orrs	r2, r3
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800557a:	b480      	push	{r7}
 800557c:	b087      	sub	sp, #28
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3330      	adds	r3, #48	; 0x30
 800558a:	461a      	mov	r2, r3
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	0a1b      	lsrs	r3, r3, #8
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	f003 030c 	and.w	r3, r3, #12
 8005596:	4413      	add	r3, r2
 8005598:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f003 031f 	and.w	r3, r3, #31
 80055a4:	211f      	movs	r1, #31
 80055a6:	fa01 f303 	lsl.w	r3, r1, r3
 80055aa:	43db      	mvns	r3, r3
 80055ac:	401a      	ands	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	0e9b      	lsrs	r3, r3, #26
 80055b2:	f003 011f 	and.w	r1, r3, #31
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f003 031f 	and.w	r3, r3, #31
 80055bc:	fa01 f303 	lsl.w	r3, r1, r3
 80055c0:	431a      	orrs	r2, r3
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80055c6:	bf00      	nop
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b087      	sub	sp, #28
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	3314      	adds	r3, #20
 80055e2:	461a      	mov	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	0e5b      	lsrs	r3, r3, #25
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	4413      	add	r3, r2
 80055f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	0d1b      	lsrs	r3, r3, #20
 80055fa:	f003 031f 	and.w	r3, r3, #31
 80055fe:	2107      	movs	r1, #7
 8005600:	fa01 f303 	lsl.w	r3, r1, r3
 8005604:	43db      	mvns	r3, r3
 8005606:	401a      	ands	r2, r3
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	0d1b      	lsrs	r3, r3, #20
 800560c:	f003 031f 	and.w	r3, r3, #31
 8005610:	6879      	ldr	r1, [r7, #4]
 8005612:	fa01 f303 	lsl.w	r3, r1, r3
 8005616:	431a      	orrs	r2, r3
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800561c:	bf00      	nop
 800561e:	371c      	adds	r7, #28
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005640:	43db      	mvns	r3, r3
 8005642:	401a      	ands	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f003 0318 	and.w	r3, r3, #24
 800564a:	4908      	ldr	r1, [pc, #32]	; (800566c <LL_ADC_SetChannelSingleDiff+0x44>)
 800564c:	40d9      	lsrs	r1, r3
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	400b      	ands	r3, r1
 8005652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005656:	431a      	orrs	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800565e:	bf00      	nop
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	0007ffff 	.word	0x0007ffff

08005670 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005680:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6093      	str	r3, [r2, #8]
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056a8:	d101      	bne.n	80056ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80056aa:	2301      	movs	r3, #1
 80056ac:	e000      	b.n	80056b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80056cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80056d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056f8:	d101      	bne.n	80056fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80056fa:	2301      	movs	r3, #1
 80056fc:	e000      	b.n	8005700 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <LL_ADC_IsEnabled+0x18>
 8005720:	2301      	movs	r3, #1
 8005722:	e000      	b.n	8005726 <LL_ADC_IsEnabled+0x1a>
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 0304 	and.w	r3, r3, #4
 8005742:	2b04      	cmp	r3, #4
 8005744:	d101      	bne.n	800574a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 0308 	and.w	r3, r3, #8
 8005768:	2b08      	cmp	r3, #8
 800576a:	d101      	bne.n	8005770 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800576c:	2301      	movs	r3, #1
 800576e:	e000      	b.n	8005772 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
	...

08005780 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b088      	sub	sp, #32
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005788:	2300      	movs	r3, #0
 800578a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800578c:	2300      	movs	r3, #0
 800578e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e12c      	b.n	80059f4 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d109      	bne.n	80057bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7fe ffef 	bl	800478c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7ff ff67 	bl	8005694 <LL_ADC_IsDeepPowerDownEnabled>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d004      	beq.n	80057d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff ff4d 	bl	8005670 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4618      	mov	r0, r3
 80057dc:	f7ff ff82 	bl	80056e4 <LL_ADC_IsInternalRegulatorEnabled>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d115      	bne.n	8005812 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff ff66 	bl	80056bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057f0:	4b82      	ldr	r3, [pc, #520]	; (80059fc <HAL_ADC_Init+0x27c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	099b      	lsrs	r3, r3, #6
 80057f6:	4a82      	ldr	r2, [pc, #520]	; (8005a00 <HAL_ADC_Init+0x280>)
 80057f8:	fba2 2303 	umull	r2, r3, r2, r3
 80057fc:	099b      	lsrs	r3, r3, #6
 80057fe:	3301      	adds	r3, #1
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005804:	e002      	b.n	800580c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	3b01      	subs	r3, #1
 800580a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1f9      	bne.n	8005806 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff ff64 	bl	80056e4 <LL_ADC_IsInternalRegulatorEnabled>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10d      	bne.n	800583e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005826:	f043 0210 	orr.w	r2, r3, #16
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005832:	f043 0201 	orr.w	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff ff75 	bl	8005732 <LL_ADC_REG_IsConversionOngoing>
 8005848:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584e:	f003 0310 	and.w	r3, r3, #16
 8005852:	2b00      	cmp	r3, #0
 8005854:	f040 80c5 	bne.w	80059e2 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	2b00      	cmp	r3, #0
 800585c:	f040 80c1 	bne.w	80059e2 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005864:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005868:	f043 0202 	orr.w	r2, r3, #2
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff ff49 	bl	800570c <LL_ADC_IsEnabled>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10b      	bne.n	8005898 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005880:	4860      	ldr	r0, [pc, #384]	; (8005a04 <HAL_ADC_Init+0x284>)
 8005882:	f7ff ff43 	bl	800570c <LL_ADC_IsEnabled>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d105      	bne.n	8005898 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	4619      	mov	r1, r3
 8005892:	485d      	ldr	r0, [pc, #372]	; (8005a08 <HAL_ADC_Init+0x288>)
 8005894:	f7ff fde8 	bl	8005468 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	7e5b      	ldrb	r3, [r3, #25]
 800589c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80058a2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80058a8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80058ae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058b6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80058b8:	4313      	orrs	r3, r2
 80058ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d106      	bne.n	80058d4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	3b01      	subs	r3, #1
 80058cc:	045b      	lsls	r3, r3, #17
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d009      	beq.n	80058f0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	4b45      	ldr	r3, [pc, #276]	; (8005a0c <HAL_ADC_Init+0x28c>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6812      	ldr	r2, [r2, #0]
 80058fe:	69b9      	ldr	r1, [r7, #24]
 8005900:	430b      	orrs	r3, r1
 8005902:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4618      	mov	r0, r3
 800590a:	f7ff ff12 	bl	8005732 <LL_ADC_REG_IsConversionOngoing>
 800590e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4618      	mov	r0, r3
 8005916:	f7ff ff1f 	bl	8005758 <LL_ADC_INJ_IsConversionOngoing>
 800591a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d13d      	bne.n	800599e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d13a      	bne.n	800599e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800592c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005934:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005936:	4313      	orrs	r3, r2
 8005938:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005944:	f023 0302 	bic.w	r3, r3, #2
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	6812      	ldr	r2, [r2, #0]
 800594c:	69b9      	ldr	r1, [r7, #24]
 800594e:	430b      	orrs	r3, r1
 8005950:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005958:	2b01      	cmp	r3, #1
 800595a:	d118      	bne.n	800598e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005966:	f023 0304 	bic.w	r3, r3, #4
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005972:	4311      	orrs	r1, r2
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005978:	4311      	orrs	r1, r2
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800597e:	430a      	orrs	r2, r1
 8005980:	431a      	orrs	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0201 	orr.w	r2, r2, #1
 800598a:	611a      	str	r2, [r3, #16]
 800598c:	e007      	b.n	800599e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	691a      	ldr	r2, [r3, #16]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0201 	bic.w	r2, r2, #1
 800599c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d10c      	bne.n	80059c0 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ac:	f023 010f 	bic.w	r1, r3, #15
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	1e5a      	subs	r2, r3, #1
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	631a      	str	r2, [r3, #48]	; 0x30
 80059be:	e007      	b.n	80059d0 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 020f 	bic.w	r2, r2, #15
 80059ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d4:	f023 0303 	bic.w	r3, r3, #3
 80059d8:	f043 0201 	orr.w	r2, r3, #1
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	655a      	str	r2, [r3, #84]	; 0x54
 80059e0:	e007      	b.n	80059f2 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e6:	f043 0210 	orr.w	r2, r3, #16
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80059f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3720      	adds	r7, #32
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	20000000 	.word	0x20000000
 8005a00:	053e2d63 	.word	0x053e2d63
 8005a04:	50040000 	.word	0x50040000
 8005a08:	50040300 	.word	0x50040300
 8005a0c:	fff0c007 	.word	0xfff0c007

08005a10 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b0b6      	sub	sp, #216	; 0xd8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <HAL_ADC_ConfigChannel+0x22>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	e3b9      	b.n	80061a6 <HAL_ADC_ConfigChannel+0x796>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7ff fe77 	bl	8005732 <LL_ADC_REG_IsConversionOngoing>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f040 839e 	bne.w	8006188 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2b05      	cmp	r3, #5
 8005a52:	d824      	bhi.n	8005a9e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	3b02      	subs	r3, #2
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d81b      	bhi.n	8005a96 <HAL_ADC_ConfigChannel+0x86>
 8005a5e:	a201      	add	r2, pc, #4	; (adr r2, 8005a64 <HAL_ADC_ConfigChannel+0x54>)
 8005a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a64:	08005a75 	.word	0x08005a75
 8005a68:	08005a7d 	.word	0x08005a7d
 8005a6c:	08005a85 	.word	0x08005a85
 8005a70:	08005a8d 	.word	0x08005a8d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	220c      	movs	r2, #12
 8005a78:	605a      	str	r2, [r3, #4]
          break;
 8005a7a:	e011      	b.n	8005aa0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2212      	movs	r2, #18
 8005a80:	605a      	str	r2, [r3, #4]
          break;
 8005a82:	e00d      	b.n	8005aa0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2218      	movs	r2, #24
 8005a88:	605a      	str	r2, [r3, #4]
          break;
 8005a8a:	e009      	b.n	8005aa0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a92:	605a      	str	r2, [r3, #4]
          break;
 8005a94:	e004      	b.n	8005aa0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2206      	movs	r2, #6
 8005a9a:	605a      	str	r2, [r3, #4]
          break;
 8005a9c:	e000      	b.n	8005aa0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8005a9e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6818      	ldr	r0, [r3, #0]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	6859      	ldr	r1, [r3, #4]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	461a      	mov	r2, r3
 8005aae:	f7ff fd64 	bl	800557a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7ff fe3b 	bl	8005732 <LL_ADC_REG_IsConversionOngoing>
 8005abc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7ff fe47 	bl	8005758 <LL_ADC_INJ_IsConversionOngoing>
 8005aca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005ace:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f040 81a6 	bne.w	8005e24 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005ad8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f040 81a1 	bne.w	8005e24 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6818      	ldr	r0, [r3, #0]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	6819      	ldr	r1, [r3, #0]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	461a      	mov	r2, r3
 8005af0:	f7ff fd6f 	bl	80055d2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	695a      	ldr	r2, [r3, #20]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	08db      	lsrs	r3, r3, #3
 8005b00:	f003 0303 	and.w	r3, r3, #3
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	2b04      	cmp	r3, #4
 8005b14:	d00a      	beq.n	8005b2c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6818      	ldr	r0, [r3, #0]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	6919      	ldr	r1, [r3, #16]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b26:	f7ff fcd3 	bl	80054d0 <LL_ADC_SetOffset>
 8005b2a:	e17b      	b.n	8005e24 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2100      	movs	r1, #0
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff fcf0 	bl	8005518 <LL_ADC_GetOffsetChannel>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10a      	bne.n	8005b58 <HAL_ADC_ConfigChannel+0x148>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2100      	movs	r1, #0
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff fce5 	bl	8005518 <LL_ADC_GetOffsetChannel>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	0e9b      	lsrs	r3, r3, #26
 8005b52:	f003 021f 	and.w	r2, r3, #31
 8005b56:	e01e      	b.n	8005b96 <HAL_ADC_ConfigChannel+0x186>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7ff fcda 	bl	8005518 <LL_ADC_GetOffsetChannel>
 8005b64:	4603      	mov	r3, r0
 8005b66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b6e:	fa93 f3a3 	rbit	r3, r3
 8005b72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005b76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005b7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8005b86:	2320      	movs	r3, #32
 8005b88:	e004      	b.n	8005b94 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8005b8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b8e:	fab3 f383 	clz	r3, r3
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d105      	bne.n	8005bae <HAL_ADC_ConfigChannel+0x19e>
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	0e9b      	lsrs	r3, r3, #26
 8005ba8:	f003 031f 	and.w	r3, r3, #31
 8005bac:	e018      	b.n	8005be0 <HAL_ADC_ConfigChannel+0x1d0>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005bba:	fa93 f3a3 	rbit	r3, r3
 8005bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005bc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005bca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8005bd2:	2320      	movs	r3, #32
 8005bd4:	e004      	b.n	8005be0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8005bd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005bda:	fab3 f383 	clz	r3, r3
 8005bde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d106      	bne.n	8005bf2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2200      	movs	r2, #0
 8005bea:	2100      	movs	r1, #0
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7ff fca9 	bl	8005544 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7ff fc8d 	bl	8005518 <LL_ADC_GetOffsetChannel>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10a      	bne.n	8005c1e <HAL_ADC_ConfigChannel+0x20e>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7ff fc82 	bl	8005518 <LL_ADC_GetOffsetChannel>
 8005c14:	4603      	mov	r3, r0
 8005c16:	0e9b      	lsrs	r3, r3, #26
 8005c18:	f003 021f 	and.w	r2, r3, #31
 8005c1c:	e01e      	b.n	8005c5c <HAL_ADC_ConfigChannel+0x24c>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2101      	movs	r1, #1
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff fc77 	bl	8005518 <LL_ADC_GetOffsetChannel>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c34:	fa93 f3a3 	rbit	r3, r3
 8005c38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005c3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005c44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8005c4c:	2320      	movs	r3, #32
 8005c4e:	e004      	b.n	8005c5a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8005c50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c54:	fab3 f383 	clz	r3, r3
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d105      	bne.n	8005c74 <HAL_ADC_ConfigChannel+0x264>
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	0e9b      	lsrs	r3, r3, #26
 8005c6e:	f003 031f 	and.w	r3, r3, #31
 8005c72:	e018      	b.n	8005ca6 <HAL_ADC_ConfigChannel+0x296>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c80:	fa93 f3a3 	rbit	r3, r3
 8005c84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005c88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005c8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005c90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8005c98:	2320      	movs	r3, #32
 8005c9a:	e004      	b.n	8005ca6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8005c9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ca0:	fab3 f383 	clz	r3, r3
 8005ca4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d106      	bne.n	8005cb8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7ff fc46 	bl	8005544 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2102      	movs	r1, #2
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff fc2a 	bl	8005518 <LL_ADC_GetOffsetChannel>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <HAL_ADC_ConfigChannel+0x2d4>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2102      	movs	r1, #2
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff fc1f 	bl	8005518 <LL_ADC_GetOffsetChannel>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	0e9b      	lsrs	r3, r3, #26
 8005cde:	f003 021f 	and.w	r2, r3, #31
 8005ce2:	e01e      	b.n	8005d22 <HAL_ADC_ConfigChannel+0x312>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2102      	movs	r1, #2
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7ff fc14 	bl	8005518 <LL_ADC_GetOffsetChannel>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cfa:	fa93 f3a3 	rbit	r3, r3
 8005cfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005d02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005d0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8005d12:	2320      	movs	r3, #32
 8005d14:	e004      	b.n	8005d20 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005d16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d1a:	fab3 f383 	clz	r3, r3
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d105      	bne.n	8005d3a <HAL_ADC_ConfigChannel+0x32a>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	0e9b      	lsrs	r3, r3, #26
 8005d34:	f003 031f 	and.w	r3, r3, #31
 8005d38:	e016      	b.n	8005d68 <HAL_ADC_ConfigChannel+0x358>
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d46:	fa93 f3a3 	rbit	r3, r3
 8005d4a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005d4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005d52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8005d5a:	2320      	movs	r3, #32
 8005d5c:	e004      	b.n	8005d68 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8005d5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d62:	fab3 f383 	clz	r3, r3
 8005d66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d106      	bne.n	8005d7a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2200      	movs	r2, #0
 8005d72:	2102      	movs	r1, #2
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff fbe5 	bl	8005544 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2103      	movs	r1, #3
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff fbc9 	bl	8005518 <LL_ADC_GetOffsetChannel>
 8005d86:	4603      	mov	r3, r0
 8005d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10a      	bne.n	8005da6 <HAL_ADC_ConfigChannel+0x396>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2103      	movs	r1, #3
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff fbbe 	bl	8005518 <LL_ADC_GetOffsetChannel>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	0e9b      	lsrs	r3, r3, #26
 8005da0:	f003 021f 	and.w	r2, r3, #31
 8005da4:	e017      	b.n	8005dd6 <HAL_ADC_ConfigChannel+0x3c6>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2103      	movs	r1, #3
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff fbb3 	bl	8005518 <LL_ADC_GetOffsetChannel>
 8005db2:	4603      	mov	r3, r0
 8005db4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005db8:	fa93 f3a3 	rbit	r3, r3
 8005dbc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005dbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dc0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005dc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d101      	bne.n	8005dcc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8005dc8:	2320      	movs	r3, #32
 8005dca:	e003      	b.n	8005dd4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8005dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dce:	fab3 f383 	clz	r3, r3
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d105      	bne.n	8005dee <HAL_ADC_ConfigChannel+0x3de>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	0e9b      	lsrs	r3, r3, #26
 8005de8:	f003 031f 	and.w	r3, r3, #31
 8005dec:	e011      	b.n	8005e12 <HAL_ADC_ConfigChannel+0x402>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005df6:	fa93 f3a3 	rbit	r3, r3
 8005dfa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005dfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dfe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8005e06:	2320      	movs	r3, #32
 8005e08:	e003      	b.n	8005e12 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8005e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e0c:	fab3 f383 	clz	r3, r3
 8005e10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d106      	bne.n	8005e24 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	2103      	movs	r1, #3
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7ff fb90 	bl	8005544 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7ff fc6f 	bl	800570c <LL_ADC_IsEnabled>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f040 813f 	bne.w	80060b4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6818      	ldr	r0, [r3, #0]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	6819      	ldr	r1, [r3, #0]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	461a      	mov	r2, r3
 8005e44:	f7ff fbf0 	bl	8005628 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	4a8e      	ldr	r2, [pc, #568]	; (8006088 <HAL_ADC_ConfigChannel+0x678>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	f040 8130 	bne.w	80060b4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10b      	bne.n	8005e7c <HAL_ADC_ConfigChannel+0x46c>
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	0e9b      	lsrs	r3, r3, #26
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	f003 031f 	and.w	r3, r3, #31
 8005e70:	2b09      	cmp	r3, #9
 8005e72:	bf94      	ite	ls
 8005e74:	2301      	movls	r3, #1
 8005e76:	2300      	movhi	r3, #0
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	e019      	b.n	8005eb0 <HAL_ADC_ConfigChannel+0x4a0>
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e84:	fa93 f3a3 	rbit	r3, r3
 8005e88:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005e8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e8c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005e8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005e94:	2320      	movs	r3, #32
 8005e96:	e003      	b.n	8005ea0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8005e98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e9a:	fab3 f383 	clz	r3, r3
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	f003 031f 	and.w	r3, r3, #31
 8005ea6:	2b09      	cmp	r3, #9
 8005ea8:	bf94      	ite	ls
 8005eaa:	2301      	movls	r3, #1
 8005eac:	2300      	movhi	r3, #0
 8005eae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d079      	beq.n	8005fa8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d107      	bne.n	8005ed0 <HAL_ADC_ConfigChannel+0x4c0>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	0e9b      	lsrs	r3, r3, #26
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	069b      	lsls	r3, r3, #26
 8005eca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ece:	e015      	b.n	8005efc <HAL_ADC_ConfigChannel+0x4ec>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ed8:	fa93 f3a3 	rbit	r3, r3
 8005edc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ee0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8005ee8:	2320      	movs	r3, #32
 8005eea:	e003      	b.n	8005ef4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8005eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eee:	fab3 f383 	clz	r3, r3
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	069b      	lsls	r3, r3, #26
 8005ef8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d109      	bne.n	8005f1c <HAL_ADC_ConfigChannel+0x50c>
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	0e9b      	lsrs	r3, r3, #26
 8005f0e:	3301      	adds	r3, #1
 8005f10:	f003 031f 	and.w	r3, r3, #31
 8005f14:	2101      	movs	r1, #1
 8005f16:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1a:	e017      	b.n	8005f4c <HAL_ADC_ConfigChannel+0x53c>
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f24:	fa93 f3a3 	rbit	r3, r3
 8005f28:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f2c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8005f34:	2320      	movs	r3, #32
 8005f36:	e003      	b.n	8005f40 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8005f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f3a:	fab3 f383 	clz	r3, r3
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	3301      	adds	r3, #1
 8005f42:	f003 031f 	and.w	r3, r3, #31
 8005f46:	2101      	movs	r1, #1
 8005f48:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4c:	ea42 0103 	orr.w	r1, r2, r3
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10a      	bne.n	8005f72 <HAL_ADC_ConfigChannel+0x562>
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	0e9b      	lsrs	r3, r3, #26
 8005f62:	3301      	adds	r3, #1
 8005f64:	f003 021f 	and.w	r2, r3, #31
 8005f68:	4613      	mov	r3, r2
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	4413      	add	r3, r2
 8005f6e:	051b      	lsls	r3, r3, #20
 8005f70:	e018      	b.n	8005fa4 <HAL_ADC_ConfigChannel+0x594>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7a:	fa93 f3a3 	rbit	r3, r3
 8005f7e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8005f8a:	2320      	movs	r3, #32
 8005f8c:	e003      	b.n	8005f96 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8005f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f90:	fab3 f383 	clz	r3, r3
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	3301      	adds	r3, #1
 8005f98:	f003 021f 	and.w	r2, r3, #31
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	4413      	add	r3, r2
 8005fa2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	e080      	b.n	80060aa <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d107      	bne.n	8005fc4 <HAL_ADC_ConfigChannel+0x5b4>
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	0e9b      	lsrs	r3, r3, #26
 8005fba:	3301      	adds	r3, #1
 8005fbc:	069b      	lsls	r3, r3, #26
 8005fbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005fc2:	e015      	b.n	8005ff0 <HAL_ADC_ConfigChannel+0x5e0>
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fcc:	fa93 f3a3 	rbit	r3, r3
 8005fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d101      	bne.n	8005fe0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8005fdc:	2320      	movs	r3, #32
 8005fde:	e003      	b.n	8005fe8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe2:	fab3 f383 	clz	r3, r3
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	3301      	adds	r3, #1
 8005fea:	069b      	lsls	r3, r3, #26
 8005fec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d109      	bne.n	8006010 <HAL_ADC_ConfigChannel+0x600>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	0e9b      	lsrs	r3, r3, #26
 8006002:	3301      	adds	r3, #1
 8006004:	f003 031f 	and.w	r3, r3, #31
 8006008:	2101      	movs	r1, #1
 800600a:	fa01 f303 	lsl.w	r3, r1, r3
 800600e:	e017      	b.n	8006040 <HAL_ADC_ConfigChannel+0x630>
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	fa93 f3a3 	rbit	r3, r3
 800601c:	61fb      	str	r3, [r7, #28]
  return result;
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8006028:	2320      	movs	r3, #32
 800602a:	e003      	b.n	8006034 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	fab3 f383 	clz	r3, r3
 8006032:	b2db      	uxtb	r3, r3
 8006034:	3301      	adds	r3, #1
 8006036:	f003 031f 	and.w	r3, r3, #31
 800603a:	2101      	movs	r1, #1
 800603c:	fa01 f303 	lsl.w	r3, r1, r3
 8006040:	ea42 0103 	orr.w	r1, r2, r3
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10d      	bne.n	800606c <HAL_ADC_ConfigChannel+0x65c>
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	0e9b      	lsrs	r3, r3, #26
 8006056:	3301      	adds	r3, #1
 8006058:	f003 021f 	and.w	r2, r3, #31
 800605c:	4613      	mov	r3, r2
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	4413      	add	r3, r2
 8006062:	3b1e      	subs	r3, #30
 8006064:	051b      	lsls	r3, r3, #20
 8006066:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800606a:	e01d      	b.n	80060a8 <HAL_ADC_ConfigChannel+0x698>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	fa93 f3a3 	rbit	r3, r3
 8006078:	613b      	str	r3, [r7, #16]
  return result;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d103      	bne.n	800608c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8006084:	2320      	movs	r3, #32
 8006086:	e005      	b.n	8006094 <HAL_ADC_ConfigChannel+0x684>
 8006088:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	fab3 f383 	clz	r3, r3
 8006092:	b2db      	uxtb	r3, r3
 8006094:	3301      	adds	r3, #1
 8006096:	f003 021f 	and.w	r2, r3, #31
 800609a:	4613      	mov	r3, r2
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	4413      	add	r3, r2
 80060a0:	3b1e      	subs	r3, #30
 80060a2:	051b      	lsls	r3, r3, #20
 80060a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80060a8:	430b      	orrs	r3, r1
 80060aa:	683a      	ldr	r2, [r7, #0]
 80060ac:	6892      	ldr	r2, [r2, #8]
 80060ae:	4619      	mov	r1, r3
 80060b0:	f7ff fa8f 	bl	80055d2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	4b3d      	ldr	r3, [pc, #244]	; (80061b0 <HAL_ADC_ConfigChannel+0x7a0>)
 80060ba:	4013      	ands	r3, r2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d06c      	beq.n	800619a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80060c0:	483c      	ldr	r0, [pc, #240]	; (80061b4 <HAL_ADC_ConfigChannel+0x7a4>)
 80060c2:	f7ff f9f7 	bl	80054b4 <LL_ADC_GetCommonPathInternalCh>
 80060c6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a3a      	ldr	r2, [pc, #232]	; (80061b8 <HAL_ADC_ConfigChannel+0x7a8>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d127      	bne.n	8006124 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80060d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80060d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d121      	bne.n	8006124 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a35      	ldr	r2, [pc, #212]	; (80061bc <HAL_ADC_ConfigChannel+0x7ac>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d157      	bne.n	800619a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80060ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80060ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80060f2:	4619      	mov	r1, r3
 80060f4:	482f      	ldr	r0, [pc, #188]	; (80061b4 <HAL_ADC_ConfigChannel+0x7a4>)
 80060f6:	f7ff f9ca 	bl	800548e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80060fa:	4b31      	ldr	r3, [pc, #196]	; (80061c0 <HAL_ADC_ConfigChannel+0x7b0>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	099b      	lsrs	r3, r3, #6
 8006100:	4a30      	ldr	r2, [pc, #192]	; (80061c4 <HAL_ADC_ConfigChannel+0x7b4>)
 8006102:	fba2 2303 	umull	r2, r3, r2, r3
 8006106:	099b      	lsrs	r3, r3, #6
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	4613      	mov	r3, r2
 800610c:	005b      	lsls	r3, r3, #1
 800610e:	4413      	add	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006114:	e002      	b.n	800611c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3b01      	subs	r3, #1
 800611a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1f9      	bne.n	8006116 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006122:	e03a      	b.n	800619a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a27      	ldr	r2, [pc, #156]	; (80061c8 <HAL_ADC_ConfigChannel+0x7b8>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d113      	bne.n	8006156 <HAL_ADC_ConfigChannel+0x746>
 800612e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006132:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10d      	bne.n	8006156 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a1f      	ldr	r2, [pc, #124]	; (80061bc <HAL_ADC_ConfigChannel+0x7ac>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d12a      	bne.n	800619a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006148:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800614c:	4619      	mov	r1, r3
 800614e:	4819      	ldr	r0, [pc, #100]	; (80061b4 <HAL_ADC_ConfigChannel+0x7a4>)
 8006150:	f7ff f99d 	bl	800548e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006154:	e021      	b.n	800619a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a1c      	ldr	r2, [pc, #112]	; (80061cc <HAL_ADC_ConfigChannel+0x7bc>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d11c      	bne.n	800619a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006160:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006164:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d116      	bne.n	800619a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a12      	ldr	r2, [pc, #72]	; (80061bc <HAL_ADC_ConfigChannel+0x7ac>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d111      	bne.n	800619a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006176:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800617a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800617e:	4619      	mov	r1, r3
 8006180:	480c      	ldr	r0, [pc, #48]	; (80061b4 <HAL_ADC_ConfigChannel+0x7a4>)
 8006182:	f7ff f984 	bl	800548e <LL_ADC_SetCommonPathInternalCh>
 8006186:	e008      	b.n	800619a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618c:	f043 0220 	orr.w	r2, r3, #32
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80061a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	37d8      	adds	r7, #216	; 0xd8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	80080000 	.word	0x80080000
 80061b4:	50040300 	.word	0x50040300
 80061b8:	c7520000 	.word	0xc7520000
 80061bc:	50040000 	.word	0x50040000
 80061c0:	20000000 	.word	0x20000000
 80061c4:	053e2d63 	.word	0x053e2d63
 80061c8:	cb840000 	.word	0xcb840000
 80061cc:	80000001 	.word	0x80000001

080061d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f003 0307 	and.w	r3, r3, #7
 80061de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061e0:	4b0c      	ldr	r3, [pc, #48]	; (8006214 <__NVIC_SetPriorityGrouping+0x44>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061ec:	4013      	ands	r3, r2
 80061ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006202:	4a04      	ldr	r2, [pc, #16]	; (8006214 <__NVIC_SetPriorityGrouping+0x44>)
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	60d3      	str	r3, [r2, #12]
}
 8006208:	bf00      	nop
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	e000ed00 	.word	0xe000ed00

08006218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006218:	b480      	push	{r7}
 800621a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800621c:	4b04      	ldr	r3, [pc, #16]	; (8006230 <__NVIC_GetPriorityGrouping+0x18>)
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	0a1b      	lsrs	r3, r3, #8
 8006222:	f003 0307 	and.w	r3, r3, #7
}
 8006226:	4618      	mov	r0, r3
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	e000ed00 	.word	0xe000ed00

08006234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	4603      	mov	r3, r0
 800623c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800623e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006242:	2b00      	cmp	r3, #0
 8006244:	db0b      	blt.n	800625e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006246:	79fb      	ldrb	r3, [r7, #7]
 8006248:	f003 021f 	and.w	r2, r3, #31
 800624c:	4907      	ldr	r1, [pc, #28]	; (800626c <__NVIC_EnableIRQ+0x38>)
 800624e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006252:	095b      	lsrs	r3, r3, #5
 8006254:	2001      	movs	r0, #1
 8006256:	fa00 f202 	lsl.w	r2, r0, r2
 800625a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800625e:	bf00      	nop
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	e000e100 	.word	0xe000e100

08006270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	4603      	mov	r3, r0
 8006278:	6039      	str	r1, [r7, #0]
 800627a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800627c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006280:	2b00      	cmp	r3, #0
 8006282:	db0a      	blt.n	800629a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	b2da      	uxtb	r2, r3
 8006288:	490c      	ldr	r1, [pc, #48]	; (80062bc <__NVIC_SetPriority+0x4c>)
 800628a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800628e:	0112      	lsls	r2, r2, #4
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	440b      	add	r3, r1
 8006294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006298:	e00a      	b.n	80062b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	b2da      	uxtb	r2, r3
 800629e:	4908      	ldr	r1, [pc, #32]	; (80062c0 <__NVIC_SetPriority+0x50>)
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	f003 030f 	and.w	r3, r3, #15
 80062a6:	3b04      	subs	r3, #4
 80062a8:	0112      	lsls	r2, r2, #4
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	440b      	add	r3, r1
 80062ae:	761a      	strb	r2, [r3, #24]
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	e000e100 	.word	0xe000e100
 80062c0:	e000ed00 	.word	0xe000ed00

080062c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b089      	sub	sp, #36	; 0x24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	f1c3 0307 	rsb	r3, r3, #7
 80062de:	2b04      	cmp	r3, #4
 80062e0:	bf28      	it	cs
 80062e2:	2304      	movcs	r3, #4
 80062e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	3304      	adds	r3, #4
 80062ea:	2b06      	cmp	r3, #6
 80062ec:	d902      	bls.n	80062f4 <NVIC_EncodePriority+0x30>
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	3b03      	subs	r3, #3
 80062f2:	e000      	b.n	80062f6 <NVIC_EncodePriority+0x32>
 80062f4:	2300      	movs	r3, #0
 80062f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062f8:	f04f 32ff 	mov.w	r2, #4294967295
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006302:	43da      	mvns	r2, r3
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	401a      	ands	r2, r3
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800630c:	f04f 31ff 	mov.w	r1, #4294967295
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	fa01 f303 	lsl.w	r3, r1, r3
 8006316:	43d9      	mvns	r1, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800631c:	4313      	orrs	r3, r2
         );
}
 800631e:	4618      	mov	r0, r3
 8006320:	3724      	adds	r7, #36	; 0x24
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
	...

0800632c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3b01      	subs	r3, #1
 8006338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800633c:	d301      	bcc.n	8006342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800633e:	2301      	movs	r3, #1
 8006340:	e00f      	b.n	8006362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006342:	4a0a      	ldr	r2, [pc, #40]	; (800636c <SysTick_Config+0x40>)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3b01      	subs	r3, #1
 8006348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800634a:	210f      	movs	r1, #15
 800634c:	f04f 30ff 	mov.w	r0, #4294967295
 8006350:	f7ff ff8e 	bl	8006270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006354:	4b05      	ldr	r3, [pc, #20]	; (800636c <SysTick_Config+0x40>)
 8006356:	2200      	movs	r2, #0
 8006358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800635a:	4b04      	ldr	r3, [pc, #16]	; (800636c <SysTick_Config+0x40>)
 800635c:	2207      	movs	r2, #7
 800635e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	e000e010 	.word	0xe000e010

08006370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7ff ff29 	bl	80061d0 <__NVIC_SetPriorityGrouping>
}
 800637e:	bf00      	nop
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b086      	sub	sp, #24
 800638a:	af00      	add	r7, sp, #0
 800638c:	4603      	mov	r3, r0
 800638e:	60b9      	str	r1, [r7, #8]
 8006390:	607a      	str	r2, [r7, #4]
 8006392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006394:	2300      	movs	r3, #0
 8006396:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006398:	f7ff ff3e 	bl	8006218 <__NVIC_GetPriorityGrouping>
 800639c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	68b9      	ldr	r1, [r7, #8]
 80063a2:	6978      	ldr	r0, [r7, #20]
 80063a4:	f7ff ff8e 	bl	80062c4 <NVIC_EncodePriority>
 80063a8:	4602      	mov	r2, r0
 80063aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063ae:	4611      	mov	r1, r2
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff ff5d 	bl	8006270 <__NVIC_SetPriority>
}
 80063b6:	bf00      	nop
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b082      	sub	sp, #8
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	4603      	mov	r3, r0
 80063c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7ff ff31 	bl	8006234 <__NVIC_EnableIRQ>
}
 80063d2:	bf00      	nop
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b082      	sub	sp, #8
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7ff ffa2 	bl	800632c <SysTick_Config>
 80063e8:	4603      	mov	r3, r0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
	...

080063f4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e054      	b.n	80064b0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	7f5b      	ldrb	r3, [r3, #29]
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d105      	bne.n	800641c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7fe fa6e 	bl	80048f8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	791b      	ldrb	r3, [r3, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10c      	bne.n	8006444 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a22      	ldr	r2, [pc, #136]	; (80064b8 <HAL_CRC_Init+0xc4>)
 8006430:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0218 	bic.w	r2, r2, #24
 8006440:	609a      	str	r2, [r3, #8]
 8006442:	e00c      	b.n	800645e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6899      	ldr	r1, [r3, #8]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	461a      	mov	r2, r3
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f834 	bl	80064bc <HAL_CRCEx_Polynomial_Set>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e028      	b.n	80064b0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	795b      	ldrb	r3, [r3, #5]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d105      	bne.n	8006472 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f04f 32ff 	mov.w	r2, #4294967295
 800646e:	611a      	str	r2, [r3, #16]
 8006470:	e004      	b.n	800647c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	6912      	ldr	r2, [r2, #16]
 800647a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	695a      	ldr	r2, [r3, #20]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	699a      	ldr	r2, [r3, #24]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	04c11db7 	.word	0x04c11db7

080064bc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80064cc:	231f      	movs	r3, #31
 80064ce:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80064d0:	bf00      	nop
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	1e5a      	subs	r2, r3, #1
 80064d6:	613a      	str	r2, [r7, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d009      	beq.n	80064f0 <HAL_CRCEx_Polynomial_Set+0x34>
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	f003 031f 	and.w	r3, r3, #31
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	fa22 f303 	lsr.w	r3, r2, r3
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0f0      	beq.n	80064d2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b18      	cmp	r3, #24
 80064f4:	d846      	bhi.n	8006584 <HAL_CRCEx_Polynomial_Set+0xc8>
 80064f6:	a201      	add	r2, pc, #4	; (adr r2, 80064fc <HAL_CRCEx_Polynomial_Set+0x40>)
 80064f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fc:	0800658b 	.word	0x0800658b
 8006500:	08006585 	.word	0x08006585
 8006504:	08006585 	.word	0x08006585
 8006508:	08006585 	.word	0x08006585
 800650c:	08006585 	.word	0x08006585
 8006510:	08006585 	.word	0x08006585
 8006514:	08006585 	.word	0x08006585
 8006518:	08006585 	.word	0x08006585
 800651c:	08006579 	.word	0x08006579
 8006520:	08006585 	.word	0x08006585
 8006524:	08006585 	.word	0x08006585
 8006528:	08006585 	.word	0x08006585
 800652c:	08006585 	.word	0x08006585
 8006530:	08006585 	.word	0x08006585
 8006534:	08006585 	.word	0x08006585
 8006538:	08006585 	.word	0x08006585
 800653c:	0800656d 	.word	0x0800656d
 8006540:	08006585 	.word	0x08006585
 8006544:	08006585 	.word	0x08006585
 8006548:	08006585 	.word	0x08006585
 800654c:	08006585 	.word	0x08006585
 8006550:	08006585 	.word	0x08006585
 8006554:	08006585 	.word	0x08006585
 8006558:	08006585 	.word	0x08006585
 800655c:	08006561 	.word	0x08006561
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	2b06      	cmp	r3, #6
 8006564:	d913      	bls.n	800658e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800656a:	e010      	b.n	800658e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	2b07      	cmp	r3, #7
 8006570:	d90f      	bls.n	8006592 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006576:	e00c      	b.n	8006592 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	2b0f      	cmp	r3, #15
 800657c:	d90b      	bls.n	8006596 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006582:	e008      	b.n	8006596 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	75fb      	strb	r3, [r7, #23]
      break;
 8006588:	e006      	b.n	8006598 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800658a:	bf00      	nop
 800658c:	e004      	b.n	8006598 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800658e:	bf00      	nop
 8006590:	e002      	b.n	8006598 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006592:	bf00      	nop
 8006594:	e000      	b.n	8006598 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006596:	bf00      	nop
  }
  if (status == HAL_OK)
 8006598:	7dfb      	ldrb	r3, [r7, #23]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10d      	bne.n	80065ba <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f023 0118 	bic.w	r1, r3, #24
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80065ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	371c      	adds	r7, #28
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e014      	b.n	8006604 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	791b      	ldrb	r3, [r3, #4]
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d105      	bne.n	80065f0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7fe f9e0 	bl	80049b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	795b      	ldrb	r3, [r3, #5]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d101      	bne.n	8006628 <HAL_DAC_ConfigChannel+0x1c>
 8006624:	2302      	movs	r3, #2
 8006626:	e107      	b.n	8006838 <HAL_DAC_ConfigChannel+0x22c>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2201      	movs	r2, #1
 800662c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2202      	movs	r2, #2
 8006632:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b04      	cmp	r3, #4
 800663a:	d174      	bne.n	8006726 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800663c:	f7fe fee4 	bl	8005408 <HAL_GetTick>
 8006640:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d134      	bne.n	80066b2 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006648:	e011      	b.n	800666e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800664a:	f7fe fedd 	bl	8005408 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	2b01      	cmp	r3, #1
 8006656:	d90a      	bls.n	800666e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	f043 0208 	orr.w	r2, r3, #8
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2203      	movs	r2, #3
 8006668:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e0e4      	b.n	8006838 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e6      	bne.n	800664a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800667c:	2001      	movs	r0, #1
 800667e:	f7fe fecf 	bl	8005420 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	6992      	ldr	r2, [r2, #24]
 800668a:	641a      	str	r2, [r3, #64]	; 0x40
 800668c:	e01e      	b.n	80066cc <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800668e:	f7fe febb 	bl	8005408 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	2b01      	cmp	r3, #1
 800669a:	d90a      	bls.n	80066b2 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f043 0208 	orr.w	r2, r3, #8
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2203      	movs	r2, #3
 80066ac:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e0c2      	b.n	8006838 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	dbe8      	blt.n	800668e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80066bc:	2001      	movs	r0, #1
 80066be:	f7fe feaf 	bl	8005420 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	6992      	ldr	r2, [r2, #24]
 80066ca:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f003 0310 	and.w	r3, r3, #16
 80066d8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80066dc:	fa01 f303 	lsl.w	r3, r1, r3
 80066e0:	43db      	mvns	r3, r3
 80066e2:	ea02 0103 	and.w	r1, r2, r3
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	69da      	ldr	r2, [r3, #28]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f003 0310 	and.w	r3, r3, #16
 80066f0:	409a      	lsls	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f003 0310 	and.w	r3, r3, #16
 8006706:	21ff      	movs	r1, #255	; 0xff
 8006708:	fa01 f303 	lsl.w	r3, r1, r3
 800670c:	43db      	mvns	r3, r3
 800670e:	ea02 0103 	and.w	r1, r2, r3
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	6a1a      	ldr	r2, [r3, #32]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f003 0310 	and.w	r3, r3, #16
 800671c:	409a      	lsls	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d11d      	bne.n	800676a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006734:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f003 0310 	and.w	r3, r3, #16
 800673c:	221f      	movs	r2, #31
 800673e:	fa02 f303 	lsl.w	r3, r2, r3
 8006742:	43db      	mvns	r3, r3
 8006744:	69ba      	ldr	r2, [r7, #24]
 8006746:	4013      	ands	r3, r2
 8006748:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f003 0310 	and.w	r3, r3, #16
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	fa02 f303 	lsl.w	r3, r2, r3
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	4313      	orrs	r3, r2
 8006760:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006770:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f003 0310 	and.w	r3, r3, #16
 8006778:	2207      	movs	r2, #7
 800677a:	fa02 f303 	lsl.w	r3, r2, r3
 800677e:	43db      	mvns	r3, r3
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	4013      	ands	r3, r2
 8006784:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	431a      	orrs	r2, r3
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	4313      	orrs	r3, r2
 8006796:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f003 0310 	and.w	r3, r3, #16
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	fa02 f303 	lsl.w	r3, r2, r3
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6819      	ldr	r1, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f003 0310 	and.w	r3, r3, #16
 80067be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80067c2:	fa02 f303 	lsl.w	r3, r2, r3
 80067c6:	43da      	mvns	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	400a      	ands	r2, r1
 80067ce:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f003 0310 	and.w	r3, r3, #16
 80067de:	f640 72fc 	movw	r2, #4092	; 0xffc
 80067e2:	fa02 f303 	lsl.w	r3, r2, r3
 80067e6:	43db      	mvns	r3, r3
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	4013      	ands	r3, r2
 80067ec:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f003 0310 	and.w	r3, r3, #16
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	4313      	orrs	r3, r2
 8006804:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6819      	ldr	r1, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f003 0310 	and.w	r3, r3, #16
 800681a:	22c0      	movs	r2, #192	; 0xc0
 800681c:	fa02 f303 	lsl.w	r3, r2, r3
 8006820:	43da      	mvns	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	400a      	ands	r2, r1
 8006828:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2201      	movs	r2, #1
 800682e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3720      	adds	r7, #32
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e098      	b.n	8006984 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	4b4d      	ldr	r3, [pc, #308]	; (8006990 <HAL_DMA_Init+0x150>)
 800685a:	429a      	cmp	r2, r3
 800685c:	d80f      	bhi.n	800687e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	461a      	mov	r2, r3
 8006864:	4b4b      	ldr	r3, [pc, #300]	; (8006994 <HAL_DMA_Init+0x154>)
 8006866:	4413      	add	r3, r2
 8006868:	4a4b      	ldr	r2, [pc, #300]	; (8006998 <HAL_DMA_Init+0x158>)
 800686a:	fba2 2303 	umull	r2, r3, r2, r3
 800686e:	091b      	lsrs	r3, r3, #4
 8006870:	009a      	lsls	r2, r3, #2
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a48      	ldr	r2, [pc, #288]	; (800699c <HAL_DMA_Init+0x15c>)
 800687a:	641a      	str	r2, [r3, #64]	; 0x40
 800687c:	e00e      	b.n	800689c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	461a      	mov	r2, r3
 8006884:	4b46      	ldr	r3, [pc, #280]	; (80069a0 <HAL_DMA_Init+0x160>)
 8006886:	4413      	add	r3, r2
 8006888:	4a43      	ldr	r2, [pc, #268]	; (8006998 <HAL_DMA_Init+0x158>)
 800688a:	fba2 2303 	umull	r2, r3, r2, r3
 800688e:	091b      	lsrs	r3, r3, #4
 8006890:	009a      	lsls	r2, r3, #2
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a42      	ldr	r2, [pc, #264]	; (80069a4 <HAL_DMA_Init+0x164>)
 800689a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80068b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80068c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068f6:	d039      	beq.n	800696c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fc:	4a27      	ldr	r2, [pc, #156]	; (800699c <HAL_DMA_Init+0x15c>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d11a      	bne.n	8006938 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006902:	4b29      	ldr	r3, [pc, #164]	; (80069a8 <HAL_DMA_Init+0x168>)
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690a:	f003 031c 	and.w	r3, r3, #28
 800690e:	210f      	movs	r1, #15
 8006910:	fa01 f303 	lsl.w	r3, r1, r3
 8006914:	43db      	mvns	r3, r3
 8006916:	4924      	ldr	r1, [pc, #144]	; (80069a8 <HAL_DMA_Init+0x168>)
 8006918:	4013      	ands	r3, r2
 800691a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800691c:	4b22      	ldr	r3, [pc, #136]	; (80069a8 <HAL_DMA_Init+0x168>)
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6859      	ldr	r1, [r3, #4]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006928:	f003 031c 	and.w	r3, r3, #28
 800692c:	fa01 f303 	lsl.w	r3, r1, r3
 8006930:	491d      	ldr	r1, [pc, #116]	; (80069a8 <HAL_DMA_Init+0x168>)
 8006932:	4313      	orrs	r3, r2
 8006934:	600b      	str	r3, [r1, #0]
 8006936:	e019      	b.n	800696c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006938:	4b1c      	ldr	r3, [pc, #112]	; (80069ac <HAL_DMA_Init+0x16c>)
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006940:	f003 031c 	and.w	r3, r3, #28
 8006944:	210f      	movs	r1, #15
 8006946:	fa01 f303 	lsl.w	r3, r1, r3
 800694a:	43db      	mvns	r3, r3
 800694c:	4917      	ldr	r1, [pc, #92]	; (80069ac <HAL_DMA_Init+0x16c>)
 800694e:	4013      	ands	r3, r2
 8006950:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006952:	4b16      	ldr	r3, [pc, #88]	; (80069ac <HAL_DMA_Init+0x16c>)
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6859      	ldr	r1, [r3, #4]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800695e:	f003 031c 	and.w	r3, r3, #28
 8006962:	fa01 f303 	lsl.w	r3, r1, r3
 8006966:	4911      	ldr	r1, [pc, #68]	; (80069ac <HAL_DMA_Init+0x16c>)
 8006968:	4313      	orrs	r3, r2
 800696a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	40020407 	.word	0x40020407
 8006994:	bffdfff8 	.word	0xbffdfff8
 8006998:	cccccccd 	.word	0xcccccccd
 800699c:	40020000 	.word	0x40020000
 80069a0:	bffdfbf8 	.word	0xbffdfbf8
 80069a4:	40020400 	.word	0x40020400
 80069a8:	400200a8 	.word	0x400200a8
 80069ac:	400204a8 	.word	0x400204a8

080069b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069cc:	f003 031c 	and.w	r3, r3, #28
 80069d0:	2204      	movs	r2, #4
 80069d2:	409a      	lsls	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4013      	ands	r3, r2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d026      	beq.n	8006a2a <HAL_DMA_IRQHandler+0x7a>
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f003 0304 	and.w	r3, r3, #4
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d021      	beq.n	8006a2a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0320 	and.w	r3, r3, #32
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d107      	bne.n	8006a04 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0204 	bic.w	r2, r2, #4
 8006a02:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a08:	f003 021c 	and.w	r2, r3, #28
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a10:	2104      	movs	r1, #4
 8006a12:	fa01 f202 	lsl.w	r2, r1, r2
 8006a16:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d071      	beq.n	8006b04 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006a28:	e06c      	b.n	8006b04 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2e:	f003 031c 	and.w	r3, r3, #28
 8006a32:	2202      	movs	r2, #2
 8006a34:	409a      	lsls	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d02e      	beq.n	8006a9c <HAL_DMA_IRQHandler+0xec>
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	f003 0302 	and.w	r3, r3, #2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d029      	beq.n	8006a9c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10b      	bne.n	8006a6e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 020a 	bic.w	r2, r2, #10
 8006a64:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a72:	f003 021c 	and.w	r2, r3, #28
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	2102      	movs	r1, #2
 8006a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8006a80:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d038      	beq.n	8006b04 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006a9a:	e033      	b.n	8006b04 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa0:	f003 031c 	and.w	r3, r3, #28
 8006aa4:	2208      	movs	r2, #8
 8006aa6:	409a      	lsls	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d02a      	beq.n	8006b06 <HAL_DMA_IRQHandler+0x156>
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	f003 0308 	and.w	r3, r3, #8
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d025      	beq.n	8006b06 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 020e 	bic.w	r2, r2, #14
 8006ac8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ace:	f003 021c 	and.w	r2, r3, #28
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8006adc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d004      	beq.n	8006b06 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop
}
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006b22:	4b2f      	ldr	r3, [pc, #188]	; (8006be0 <HAL_FLASH_Program+0xd0>)
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d101      	bne.n	8006b2e <HAL_FLASH_Program+0x1e>
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	e053      	b.n	8006bd6 <HAL_FLASH_Program+0xc6>
 8006b2e:	4b2c      	ldr	r3, [pc, #176]	; (8006be0 <HAL_FLASH_Program+0xd0>)
 8006b30:	2201      	movs	r2, #1
 8006b32:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006b34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006b38:	f000 f888 	bl	8006c4c <FLASH_WaitForLastOperation>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8006b40:	7dfb      	ldrb	r3, [r7, #23]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d143      	bne.n	8006bce <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006b46:	4b26      	ldr	r3, [pc, #152]	; (8006be0 <HAL_FLASH_Program+0xd0>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006b4c:	4b25      	ldr	r3, [pc, #148]	; (8006be4 <HAL_FLASH_Program+0xd4>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d009      	beq.n	8006b6c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006b58:	4b22      	ldr	r3, [pc, #136]	; (8006be4 <HAL_FLASH_Program+0xd4>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a21      	ldr	r2, [pc, #132]	; (8006be4 <HAL_FLASH_Program+0xd4>)
 8006b5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b62:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006b64:	4b1e      	ldr	r3, [pc, #120]	; (8006be0 <HAL_FLASH_Program+0xd0>)
 8006b66:	2202      	movs	r2, #2
 8006b68:	771a      	strb	r2, [r3, #28]
 8006b6a:	e002      	b.n	8006b72 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006b6c:	4b1c      	ldr	r3, [pc, #112]	; (8006be0 <HAL_FLASH_Program+0xd0>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d107      	bne.n	8006b88 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8006b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b7c:	68b8      	ldr	r0, [r7, #8]
 8006b7e:	f000 f8bd 	bl	8006cfc <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8006b82:	2301      	movs	r3, #1
 8006b84:	613b      	str	r3, [r7, #16]
 8006b86:	e010      	b.n	8006baa <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d002      	beq.n	8006b94 <HAL_FLASH_Program+0x84>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d10a      	bne.n	8006baa <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	4619      	mov	r1, r3
 8006b98:	68b8      	ldr	r0, [r7, #8]
 8006b9a:	f000 f8d5 	bl	8006d48 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d102      	bne.n	8006baa <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8006ba4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006ba8:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006baa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006bae:	f000 f84d 	bl	8006c4c <FLASH_WaitForLastOperation>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d006      	beq.n	8006bca <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8006bbc:	4b09      	ldr	r3, [pc, #36]	; (8006be4 <HAL_FLASH_Program+0xd4>)
 8006bbe:	695a      	ldr	r2, [r3, #20]
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	43db      	mvns	r3, r3
 8006bc4:	4907      	ldr	r1, [pc, #28]	; (8006be4 <HAL_FLASH_Program+0xd4>)
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006bca:	f000 f9cf 	bl	8006f6c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006bce:	4b04      	ldr	r3, [pc, #16]	; (8006be0 <HAL_FLASH_Program+0xd0>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	701a      	strb	r2, [r3, #0]

  return status;
 8006bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	2000000c 	.word	0x2000000c
 8006be4:	40022000 	.word	0x40022000

08006be8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006bf2:	4b0b      	ldr	r3, [pc, #44]	; (8006c20 <HAL_FLASH_Unlock+0x38>)
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	da0b      	bge.n	8006c12 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006bfa:	4b09      	ldr	r3, [pc, #36]	; (8006c20 <HAL_FLASH_Unlock+0x38>)
 8006bfc:	4a09      	ldr	r2, [pc, #36]	; (8006c24 <HAL_FLASH_Unlock+0x3c>)
 8006bfe:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006c00:	4b07      	ldr	r3, [pc, #28]	; (8006c20 <HAL_FLASH_Unlock+0x38>)
 8006c02:	4a09      	ldr	r2, [pc, #36]	; (8006c28 <HAL_FLASH_Unlock+0x40>)
 8006c04:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006c06:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <HAL_FLASH_Unlock+0x38>)
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	da01      	bge.n	8006c12 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006c12:	79fb      	ldrb	r3, [r7, #7]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	40022000 	.word	0x40022000
 8006c24:	45670123 	.word	0x45670123
 8006c28:	cdef89ab 	.word	0xcdef89ab

08006c2c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006c30:	4b05      	ldr	r3, [pc, #20]	; (8006c48 <HAL_FLASH_Lock+0x1c>)
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	4a04      	ldr	r2, [pc, #16]	; (8006c48 <HAL_FLASH_Lock+0x1c>)
 8006c36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c3a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	40022000 	.word	0x40022000

08006c4c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8006c54:	f7fe fbd8 	bl	8005408 <HAL_GetTick>
 8006c58:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006c5a:	e00d      	b.n	8006c78 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c62:	d009      	beq.n	8006c78 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8006c64:	f7fe fbd0 	bl	8005408 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d801      	bhi.n	8006c78 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e036      	b.n	8006ce6 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006c78:	4b1d      	ldr	r3, [pc, #116]	; (8006cf0 <FLASH_WaitForLastOperation+0xa4>)
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1eb      	bne.n	8006c5c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006c84:	4b1a      	ldr	r3, [pc, #104]	; (8006cf0 <FLASH_WaitForLastOperation+0xa4>)
 8006c86:	691a      	ldr	r2, [r3, #16]
 8006c88:	4b1a      	ldr	r3, [pc, #104]	; (8006cf4 <FLASH_WaitForLastOperation+0xa8>)
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d01e      	beq.n	8006cd2 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8006c94:	4b18      	ldr	r3, [pc, #96]	; (8006cf8 <FLASH_WaitForLastOperation+0xac>)
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	4a16      	ldr	r2, [pc, #88]	; (8006cf8 <FLASH_WaitForLastOperation+0xac>)
 8006c9e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d007      	beq.n	8006cba <FLASH_WaitForLastOperation+0x6e>
 8006caa:	4b11      	ldr	r3, [pc, #68]	; (8006cf0 <FLASH_WaitForLastOperation+0xa4>)
 8006cac:	699a      	ldr	r2, [r3, #24]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006cb4:	490e      	ldr	r1, [pc, #56]	; (8006cf0 <FLASH_WaitForLastOperation+0xa4>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	618b      	str	r3, [r1, #24]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d004      	beq.n	8006cce <FLASH_WaitForLastOperation+0x82>
 8006cc4:	4a0a      	ldr	r2, [pc, #40]	; (8006cf0 <FLASH_WaitForLastOperation+0xa4>)
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006ccc:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e009      	b.n	8006ce6 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006cd2:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <FLASH_WaitForLastOperation+0xa4>)
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006cde:	4b04      	ldr	r3, [pc, #16]	; (8006cf0 <FLASH_WaitForLastOperation+0xa4>)
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	40022000 	.word	0x40022000
 8006cf4:	0002c3fa 	.word	0x0002c3fa
 8006cf8:	2000000c 	.word	0x2000000c

08006cfc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006d08:	4b0e      	ldr	r3, [pc, #56]	; (8006d44 <FLASH_Program_DoubleWord+0x48>)
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	4a0d      	ldr	r2, [pc, #52]	; (8006d44 <FLASH_Program_DoubleWord+0x48>)
 8006d0e:	f043 0301 	orr.w	r3, r3, #1
 8006d12:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006d1a:	f3bf 8f6f 	isb	sy
}
 8006d1e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8006d20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d24:	f04f 0200 	mov.w	r2, #0
 8006d28:	f04f 0300 	mov.w	r3, #0
 8006d2c:	000a      	movs	r2, r1
 8006d2e:	2300      	movs	r3, #0
 8006d30:	68f9      	ldr	r1, [r7, #12]
 8006d32:	3104      	adds	r1, #4
 8006d34:	4613      	mov	r3, r2
 8006d36:	600b      	str	r3, [r1, #0]
}
 8006d38:	bf00      	nop
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	40022000 	.word	0x40022000

08006d48 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b089      	sub	sp, #36	; 0x24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8006d52:	2340      	movs	r3, #64	; 0x40
 8006d54:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006d5e:	4b14      	ldr	r3, [pc, #80]	; (8006db0 <FLASH_Program_Fast+0x68>)
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	4a13      	ldr	r2, [pc, #76]	; (8006db0 <FLASH_Program_Fast+0x68>)
 8006d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d68:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8006d6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d70:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8006d72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006d74:	b672      	cpsid	i
}
 8006d76:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	3304      	adds	r3, #4
 8006d84:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	3304      	adds	r3, #4
 8006d8a:	617b      	str	r3, [r7, #20]
    row_index--;
 8006d8c:	7ffb      	ldrb	r3, [r7, #31]
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8006d92:	7ffb      	ldrb	r3, [r7, #31]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1ef      	bne.n	8006d78 <FLASH_Program_Fast+0x30>
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	f383 8810 	msr	PRIMASK, r3
}
 8006da2:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8006da4:	bf00      	nop
 8006da6:	3724      	adds	r7, #36	; 0x24
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	40022000 	.word	0x40022000

08006db4 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006dbe:	4b48      	ldr	r3, [pc, #288]	; (8006ee0 <HAL_FLASHEx_Erase+0x12c>)
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d101      	bne.n	8006dca <HAL_FLASHEx_Erase+0x16>
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	e085      	b.n	8006ed6 <HAL_FLASHEx_Erase+0x122>
 8006dca:	4b45      	ldr	r3, [pc, #276]	; (8006ee0 <HAL_FLASHEx_Erase+0x12c>)
 8006dcc:	2201      	movs	r2, #1
 8006dce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006dd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006dd4:	f7ff ff3a 	bl	8006c4c <FLASH_WaitForLastOperation>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d175      	bne.n	8006ece <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006de2:	4b3f      	ldr	r3, [pc, #252]	; (8006ee0 <HAL_FLASHEx_Erase+0x12c>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8006de8:	4b3e      	ldr	r3, [pc, #248]	; (8006ee4 <HAL_FLASHEx_Erase+0x130>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d013      	beq.n	8006e1c <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006df4:	4b3b      	ldr	r3, [pc, #236]	; (8006ee4 <HAL_FLASHEx_Erase+0x130>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d009      	beq.n	8006e14 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8006e00:	4b38      	ldr	r3, [pc, #224]	; (8006ee4 <HAL_FLASHEx_Erase+0x130>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a37      	ldr	r2, [pc, #220]	; (8006ee4 <HAL_FLASHEx_Erase+0x130>)
 8006e06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e0a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8006e0c:	4b34      	ldr	r3, [pc, #208]	; (8006ee0 <HAL_FLASHEx_Erase+0x12c>)
 8006e0e:	2203      	movs	r2, #3
 8006e10:	771a      	strb	r2, [r3, #28]
 8006e12:	e016      	b.n	8006e42 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8006e14:	4b32      	ldr	r3, [pc, #200]	; (8006ee0 <HAL_FLASHEx_Erase+0x12c>)
 8006e16:	2201      	movs	r2, #1
 8006e18:	771a      	strb	r2, [r3, #28]
 8006e1a:	e012      	b.n	8006e42 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006e1c:	4b31      	ldr	r3, [pc, #196]	; (8006ee4 <HAL_FLASHEx_Erase+0x130>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d009      	beq.n	8006e3c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006e28:	4b2e      	ldr	r3, [pc, #184]	; (8006ee4 <HAL_FLASHEx_Erase+0x130>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a2d      	ldr	r2, [pc, #180]	; (8006ee4 <HAL_FLASHEx_Erase+0x130>)
 8006e2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e32:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006e34:	4b2a      	ldr	r3, [pc, #168]	; (8006ee0 <HAL_FLASHEx_Erase+0x12c>)
 8006e36:	2202      	movs	r2, #2
 8006e38:	771a      	strb	r2, [r3, #28]
 8006e3a:	e002      	b.n	8006e42 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006e3c:	4b28      	ldr	r3, [pc, #160]	; (8006ee0 <HAL_FLASHEx_Erase+0x12c>)
 8006e3e:	2200      	movs	r2, #0
 8006e40:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d111      	bne.n	8006e6e <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 f84a 	bl	8006ee8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006e54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006e58:	f7ff fef8 	bl	8006c4c <FLASH_WaitForLastOperation>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8006e60:	4b20      	ldr	r3, [pc, #128]	; (8006ee4 <HAL_FLASHEx_Erase+0x130>)
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	4a1f      	ldr	r2, [pc, #124]	; (8006ee4 <HAL_FLASHEx_Erase+0x130>)
 8006e66:	f023 0304 	bic.w	r3, r3, #4
 8006e6a:	6153      	str	r3, [r2, #20]
 8006e6c:	e02d      	b.n	8006eca <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	f04f 32ff 	mov.w	r2, #4294967295
 8006e74:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	60bb      	str	r3, [r7, #8]
 8006e7c:	e01d      	b.n	8006eba <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	4619      	mov	r1, r3
 8006e84:	68b8      	ldr	r0, [r7, #8]
 8006e86:	f000 f84d 	bl	8006f24 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006e8a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006e8e:	f7ff fedd 	bl	8006c4c <FLASH_WaitForLastOperation>
 8006e92:	4603      	mov	r3, r0
 8006e94:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006e96:	4b13      	ldr	r3, [pc, #76]	; (8006ee4 <HAL_FLASHEx_Erase+0x130>)
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	4a12      	ldr	r2, [pc, #72]	; (8006ee4 <HAL_FLASHEx_Erase+0x130>)
 8006e9c:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8006ea0:	f023 0302 	bic.w	r3, r3, #2
 8006ea4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	601a      	str	r2, [r3, #0]
          break;
 8006eb2:	e00a      	b.n	8006eca <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	60bb      	str	r3, [r7, #8]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	689a      	ldr	r2, [r3, #8]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d3d9      	bcc.n	8006e7e <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006eca:	f000 f84f 	bl	8006f6c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006ece:	4b04      	ldr	r3, [pc, #16]	; (8006ee0 <HAL_FLASHEx_Erase+0x12c>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	701a      	strb	r2, [r3, #0]

  return status;
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	2000000c 	.word	0x2000000c
 8006ee4:	40022000 	.word	0x40022000

08006ee8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d005      	beq.n	8006f06 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8006efa:	4b09      	ldr	r3, [pc, #36]	; (8006f20 <FLASH_MassErase+0x38>)
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	4a08      	ldr	r2, [pc, #32]	; (8006f20 <FLASH_MassErase+0x38>)
 8006f00:	f043 0304 	orr.w	r3, r3, #4
 8006f04:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006f06:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <FLASH_MassErase+0x38>)
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	4a05      	ldr	r2, [pc, #20]	; (8006f20 <FLASH_MassErase+0x38>)
 8006f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f10:	6153      	str	r3, [r2, #20]
}
 8006f12:	bf00      	nop
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	40022000 	.word	0x40022000

08006f24 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8006f2e:	4b0e      	ldr	r3, [pc, #56]	; (8006f68 <FLASH_PageErase+0x44>)
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	00db      	lsls	r3, r3, #3
 8006f3a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8006f3e:	490a      	ldr	r1, [pc, #40]	; (8006f68 <FLASH_PageErase+0x44>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006f44:	4b08      	ldr	r3, [pc, #32]	; (8006f68 <FLASH_PageErase+0x44>)
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	4a07      	ldr	r2, [pc, #28]	; (8006f68 <FLASH_PageErase+0x44>)
 8006f4a:	f043 0302 	orr.w	r3, r3, #2
 8006f4e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006f50:	4b05      	ldr	r3, [pc, #20]	; (8006f68 <FLASH_PageErase+0x44>)
 8006f52:	695b      	ldr	r3, [r3, #20]
 8006f54:	4a04      	ldr	r2, [pc, #16]	; (8006f68 <FLASH_PageErase+0x44>)
 8006f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f5a:	6153      	str	r3, [r2, #20]
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	40022000 	.word	0x40022000

08006f6c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8006f72:	4b21      	ldr	r3, [pc, #132]	; (8006ff8 <FLASH_FlushCaches+0x8c>)
 8006f74:	7f1b      	ldrb	r3, [r3, #28]
 8006f76:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8006f78:	79fb      	ldrb	r3, [r7, #7]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d002      	beq.n	8006f84 <FLASH_FlushCaches+0x18>
 8006f7e:	79fb      	ldrb	r3, [r7, #7]
 8006f80:	2b03      	cmp	r3, #3
 8006f82:	d117      	bne.n	8006fb4 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006f84:	4b1d      	ldr	r3, [pc, #116]	; (8006ffc <FLASH_FlushCaches+0x90>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a1c      	ldr	r2, [pc, #112]	; (8006ffc <FLASH_FlushCaches+0x90>)
 8006f8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f8e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006f90:	4b1a      	ldr	r3, [pc, #104]	; (8006ffc <FLASH_FlushCaches+0x90>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a19      	ldr	r2, [pc, #100]	; (8006ffc <FLASH_FlushCaches+0x90>)
 8006f96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006f9a:	6013      	str	r3, [r2, #0]
 8006f9c:	4b17      	ldr	r3, [pc, #92]	; (8006ffc <FLASH_FlushCaches+0x90>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a16      	ldr	r2, [pc, #88]	; (8006ffc <FLASH_FlushCaches+0x90>)
 8006fa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fa6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006fa8:	4b14      	ldr	r3, [pc, #80]	; (8006ffc <FLASH_FlushCaches+0x90>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a13      	ldr	r2, [pc, #76]	; (8006ffc <FLASH_FlushCaches+0x90>)
 8006fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006fb2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8006fb4:	79fb      	ldrb	r3, [r7, #7]
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d002      	beq.n	8006fc0 <FLASH_FlushCaches+0x54>
 8006fba:	79fb      	ldrb	r3, [r7, #7]
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d111      	bne.n	8006fe4 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006fc0:	4b0e      	ldr	r3, [pc, #56]	; (8006ffc <FLASH_FlushCaches+0x90>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a0d      	ldr	r2, [pc, #52]	; (8006ffc <FLASH_FlushCaches+0x90>)
 8006fc6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006fca:	6013      	str	r3, [r2, #0]
 8006fcc:	4b0b      	ldr	r3, [pc, #44]	; (8006ffc <FLASH_FlushCaches+0x90>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a0a      	ldr	r2, [pc, #40]	; (8006ffc <FLASH_FlushCaches+0x90>)
 8006fd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fd6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006fd8:	4b08      	ldr	r3, [pc, #32]	; (8006ffc <FLASH_FlushCaches+0x90>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a07      	ldr	r2, [pc, #28]	; (8006ffc <FLASH_FlushCaches+0x90>)
 8006fde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006fe2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006fe4:	4b04      	ldr	r3, [pc, #16]	; (8006ff8 <FLASH_FlushCaches+0x8c>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	771a      	strb	r2, [r3, #28]
}
 8006fea:	bf00      	nop
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	2000000c 	.word	0x2000000c
 8006ffc:	40022000 	.word	0x40022000

08007000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007000:	b480      	push	{r7}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800700a:	2300      	movs	r3, #0
 800700c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800700e:	e154      	b.n	80072ba <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	2101      	movs	r1, #1
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	fa01 f303 	lsl.w	r3, r1, r3
 800701c:	4013      	ands	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	f000 8146 	beq.w	80072b4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f003 0303 	and.w	r3, r3, #3
 8007030:	2b01      	cmp	r3, #1
 8007032:	d005      	beq.n	8007040 <HAL_GPIO_Init+0x40>
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f003 0303 	and.w	r3, r3, #3
 800703c:	2b02      	cmp	r3, #2
 800703e:	d130      	bne.n	80070a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	2203      	movs	r2, #3
 800704c:	fa02 f303 	lsl.w	r3, r2, r3
 8007050:	43db      	mvns	r3, r3
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	4013      	ands	r3, r2
 8007056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	68da      	ldr	r2, [r3, #12]
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	005b      	lsls	r3, r3, #1
 8007060:	fa02 f303 	lsl.w	r3, r2, r3
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	4313      	orrs	r3, r2
 8007068:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007076:	2201      	movs	r2, #1
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	fa02 f303 	lsl.w	r3, r2, r3
 800707e:	43db      	mvns	r3, r3
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	4013      	ands	r3, r2
 8007084:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	091b      	lsrs	r3, r3, #4
 800708c:	f003 0201 	and.w	r2, r3, #1
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	fa02 f303 	lsl.w	r3, r2, r3
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	4313      	orrs	r3, r2
 800709a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f003 0303 	and.w	r3, r3, #3
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d017      	beq.n	80070de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	2203      	movs	r2, #3
 80070ba:	fa02 f303 	lsl.w	r3, r2, r3
 80070be:	43db      	mvns	r3, r3
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	4013      	ands	r3, r2
 80070c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	689a      	ldr	r2, [r3, #8]
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	fa02 f303 	lsl.w	r3, r2, r3
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f003 0303 	and.w	r3, r3, #3
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d123      	bne.n	8007132 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	08da      	lsrs	r2, r3, #3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	3208      	adds	r2, #8
 80070f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	220f      	movs	r2, #15
 8007102:	fa02 f303 	lsl.w	r3, r2, r3
 8007106:	43db      	mvns	r3, r3
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	4013      	ands	r3, r2
 800710c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	691a      	ldr	r2, [r3, #16]
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f003 0307 	and.w	r3, r3, #7
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	fa02 f303 	lsl.w	r3, r2, r3
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	4313      	orrs	r3, r2
 8007122:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	08da      	lsrs	r2, r3, #3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	3208      	adds	r2, #8
 800712c:	6939      	ldr	r1, [r7, #16]
 800712e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	005b      	lsls	r3, r3, #1
 800713c:	2203      	movs	r2, #3
 800713e:	fa02 f303 	lsl.w	r3, r2, r3
 8007142:	43db      	mvns	r3, r3
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	4013      	ands	r3, r2
 8007148:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f003 0203 	and.w	r2, r3, #3
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	fa02 f303 	lsl.w	r3, r2, r3
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	4313      	orrs	r3, r2
 800715e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800716e:	2b00      	cmp	r3, #0
 8007170:	f000 80a0 	beq.w	80072b4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007174:	4b58      	ldr	r3, [pc, #352]	; (80072d8 <HAL_GPIO_Init+0x2d8>)
 8007176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007178:	4a57      	ldr	r2, [pc, #348]	; (80072d8 <HAL_GPIO_Init+0x2d8>)
 800717a:	f043 0301 	orr.w	r3, r3, #1
 800717e:	6613      	str	r3, [r2, #96]	; 0x60
 8007180:	4b55      	ldr	r3, [pc, #340]	; (80072d8 <HAL_GPIO_Init+0x2d8>)
 8007182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	60bb      	str	r3, [r7, #8]
 800718a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800718c:	4a53      	ldr	r2, [pc, #332]	; (80072dc <HAL_GPIO_Init+0x2dc>)
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	089b      	lsrs	r3, r3, #2
 8007192:	3302      	adds	r3, #2
 8007194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007198:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f003 0303 	and.w	r3, r3, #3
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	220f      	movs	r2, #15
 80071a4:	fa02 f303 	lsl.w	r3, r2, r3
 80071a8:	43db      	mvns	r3, r3
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	4013      	ands	r3, r2
 80071ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80071b6:	d019      	beq.n	80071ec <HAL_GPIO_Init+0x1ec>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a49      	ldr	r2, [pc, #292]	; (80072e0 <HAL_GPIO_Init+0x2e0>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d013      	beq.n	80071e8 <HAL_GPIO_Init+0x1e8>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a48      	ldr	r2, [pc, #288]	; (80072e4 <HAL_GPIO_Init+0x2e4>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d00d      	beq.n	80071e4 <HAL_GPIO_Init+0x1e4>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a47      	ldr	r2, [pc, #284]	; (80072e8 <HAL_GPIO_Init+0x2e8>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d007      	beq.n	80071e0 <HAL_GPIO_Init+0x1e0>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a46      	ldr	r2, [pc, #280]	; (80072ec <HAL_GPIO_Init+0x2ec>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d101      	bne.n	80071dc <HAL_GPIO_Init+0x1dc>
 80071d8:	2304      	movs	r3, #4
 80071da:	e008      	b.n	80071ee <HAL_GPIO_Init+0x1ee>
 80071dc:	2307      	movs	r3, #7
 80071de:	e006      	b.n	80071ee <HAL_GPIO_Init+0x1ee>
 80071e0:	2303      	movs	r3, #3
 80071e2:	e004      	b.n	80071ee <HAL_GPIO_Init+0x1ee>
 80071e4:	2302      	movs	r3, #2
 80071e6:	e002      	b.n	80071ee <HAL_GPIO_Init+0x1ee>
 80071e8:	2301      	movs	r3, #1
 80071ea:	e000      	b.n	80071ee <HAL_GPIO_Init+0x1ee>
 80071ec:	2300      	movs	r3, #0
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	f002 0203 	and.w	r2, r2, #3
 80071f4:	0092      	lsls	r2, r2, #2
 80071f6:	4093      	lsls	r3, r2
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80071fe:	4937      	ldr	r1, [pc, #220]	; (80072dc <HAL_GPIO_Init+0x2dc>)
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	089b      	lsrs	r3, r3, #2
 8007204:	3302      	adds	r3, #2
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800720c:	4b38      	ldr	r3, [pc, #224]	; (80072f0 <HAL_GPIO_Init+0x2f0>)
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	43db      	mvns	r3, r3
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	4013      	ands	r3, r2
 800721a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d003      	beq.n	8007230 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	4313      	orrs	r3, r2
 800722e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007230:	4a2f      	ldr	r2, [pc, #188]	; (80072f0 <HAL_GPIO_Init+0x2f0>)
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007236:	4b2e      	ldr	r3, [pc, #184]	; (80072f0 <HAL_GPIO_Init+0x2f0>)
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	43db      	mvns	r3, r3
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	4013      	ands	r3, r2
 8007244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d003      	beq.n	800725a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4313      	orrs	r3, r2
 8007258:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800725a:	4a25      	ldr	r2, [pc, #148]	; (80072f0 <HAL_GPIO_Init+0x2f0>)
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007260:	4b23      	ldr	r3, [pc, #140]	; (80072f0 <HAL_GPIO_Init+0x2f0>)
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	43db      	mvns	r3, r3
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	4013      	ands	r3, r2
 800726e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	4313      	orrs	r3, r2
 8007282:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007284:	4a1a      	ldr	r2, [pc, #104]	; (80072f0 <HAL_GPIO_Init+0x2f0>)
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800728a:	4b19      	ldr	r3, [pc, #100]	; (80072f0 <HAL_GPIO_Init+0x2f0>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	43db      	mvns	r3, r3
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	4013      	ands	r3, r2
 8007298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d003      	beq.n	80072ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80072ae:	4a10      	ldr	r2, [pc, #64]	; (80072f0 <HAL_GPIO_Init+0x2f0>)
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	3301      	adds	r3, #1
 80072b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	fa22 f303 	lsr.w	r3, r2, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f47f aea3 	bne.w	8007010 <HAL_GPIO_Init+0x10>
  }
}
 80072ca:	bf00      	nop
 80072cc:	bf00      	nop
 80072ce:	371c      	adds	r7, #28
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	40021000 	.word	0x40021000
 80072dc:	40010000 	.word	0x40010000
 80072e0:	48000400 	.word	0x48000400
 80072e4:	48000800 	.word	0x48000800
 80072e8:	48000c00 	.word	0x48000c00
 80072ec:	48001000 	.word	0x48001000
 80072f0:	40010400 	.word	0x40010400

080072f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	460b      	mov	r3, r1
 80072fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	691a      	ldr	r2, [r3, #16]
 8007304:	887b      	ldrh	r3, [r7, #2]
 8007306:	4013      	ands	r3, r2
 8007308:	2b00      	cmp	r3, #0
 800730a:	d002      	beq.n	8007312 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800730c:	2301      	movs	r3, #1
 800730e:	73fb      	strb	r3, [r7, #15]
 8007310:	e001      	b.n	8007316 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007312:	2300      	movs	r3, #0
 8007314:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007316:	7bfb      	ldrb	r3, [r7, #15]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	807b      	strh	r3, [r7, #2]
 8007330:	4613      	mov	r3, r2
 8007332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007334:	787b      	ldrb	r3, [r7, #1]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800733a:	887a      	ldrh	r2, [r7, #2]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007340:	e002      	b.n	8007348 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007342:	887a      	ldrh	r2, [r7, #2]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	460b      	mov	r3, r1
 800735e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007366:	887a      	ldrh	r2, [r7, #2]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4013      	ands	r3, r2
 800736c:	041a      	lsls	r2, r3, #16
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	43d9      	mvns	r1, r3
 8007372:	887b      	ldrh	r3, [r7, #2]
 8007374:	400b      	ands	r3, r1
 8007376:	431a      	orrs	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	619a      	str	r2, [r3, #24]
}
 800737c:	bf00      	nop
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800738a:	b08b      	sub	sp, #44	; 0x2c
 800738c:	af06      	add	r7, sp, #24
 800738e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e109      	b.n	80075ae <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d106      	bne.n	80073b4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f008 f8f8 	bl	800f5a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2203      	movs	r2, #3
 80073b8:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f003 ffb7 	bl	800b334 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	603b      	str	r3, [r7, #0]
 80073cc:	687e      	ldr	r6, [r7, #4]
 80073ce:	466d      	mov	r5, sp
 80073d0:	f106 0410 	add.w	r4, r6, #16
 80073d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80073d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80073dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80073e0:	1d33      	adds	r3, r6, #4
 80073e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80073e4:	6838      	ldr	r0, [r7, #0]
 80073e6:	f003 ff7d 	bl	800b2e4 <USB_CoreInit>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d005      	beq.n	80073fc <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e0d8      	b.n	80075ae <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2100      	movs	r1, #0
 8007402:	4618      	mov	r0, r3
 8007404:	f003 ffb1 	bl	800b36a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007408:	2300      	movs	r3, #0
 800740a:	73fb      	strb	r3, [r7, #15]
 800740c:	e04d      	b.n	80074aa <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800740e:	7bfb      	ldrb	r3, [r7, #15]
 8007410:	6879      	ldr	r1, [r7, #4]
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	4613      	mov	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	00db      	lsls	r3, r3, #3
 800741c:	440b      	add	r3, r1
 800741e:	3305      	adds	r3, #5
 8007420:	2201      	movs	r2, #1
 8007422:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007424:	7bfb      	ldrb	r3, [r7, #15]
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	4613      	mov	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	00db      	lsls	r3, r3, #3
 8007432:	440b      	add	r3, r1
 8007434:	3304      	adds	r3, #4
 8007436:	7bfa      	ldrb	r2, [r7, #15]
 8007438:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800743a:	7bfa      	ldrb	r2, [r7, #15]
 800743c:	7bfb      	ldrb	r3, [r7, #15]
 800743e:	b298      	uxth	r0, r3
 8007440:	6879      	ldr	r1, [r7, #4]
 8007442:	4613      	mov	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	00db      	lsls	r3, r3, #3
 800744a:	440b      	add	r3, r1
 800744c:	333a      	adds	r3, #58	; 0x3a
 800744e:	4602      	mov	r2, r0
 8007450:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007452:	7bfb      	ldrb	r3, [r7, #15]
 8007454:	6879      	ldr	r1, [r7, #4]
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	4613      	mov	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4413      	add	r3, r2
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	440b      	add	r3, r1
 8007462:	3307      	adds	r3, #7
 8007464:	2200      	movs	r2, #0
 8007466:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007468:	7bfa      	ldrb	r2, [r7, #15]
 800746a:	6879      	ldr	r1, [r7, #4]
 800746c:	4613      	mov	r3, r2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	4413      	add	r3, r2
 8007472:	00db      	lsls	r3, r3, #3
 8007474:	440b      	add	r3, r1
 8007476:	333c      	adds	r3, #60	; 0x3c
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800747c:	7bfa      	ldrb	r2, [r7, #15]
 800747e:	6879      	ldr	r1, [r7, #4]
 8007480:	4613      	mov	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	00db      	lsls	r3, r3, #3
 8007488:	440b      	add	r3, r1
 800748a:	3340      	adds	r3, #64	; 0x40
 800748c:	2200      	movs	r2, #0
 800748e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007490:	7bfa      	ldrb	r2, [r7, #15]
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	4613      	mov	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	00db      	lsls	r3, r3, #3
 800749c:	440b      	add	r3, r1
 800749e:	3344      	adds	r3, #68	; 0x44
 80074a0:	2200      	movs	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
 80074a6:	3301      	adds	r3, #1
 80074a8:	73fb      	strb	r3, [r7, #15]
 80074aa:	7bfa      	ldrb	r2, [r7, #15]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d3ac      	bcc.n	800740e <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074b4:	2300      	movs	r3, #0
 80074b6:	73fb      	strb	r3, [r7, #15]
 80074b8:	e044      	b.n	8007544 <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80074ba:	7bfa      	ldrb	r2, [r7, #15]
 80074bc:	6879      	ldr	r1, [r7, #4]
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	440b      	add	r3, r1
 80074c8:	f203 136d 	addw	r3, r3, #365	; 0x16d
 80074cc:	2200      	movs	r2, #0
 80074ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80074d0:	7bfa      	ldrb	r2, [r7, #15]
 80074d2:	6879      	ldr	r1, [r7, #4]
 80074d4:	4613      	mov	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	440b      	add	r3, r1
 80074de:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80074e2:	7bfa      	ldrb	r2, [r7, #15]
 80074e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80074e6:	7bfa      	ldrb	r2, [r7, #15]
 80074e8:	6879      	ldr	r1, [r7, #4]
 80074ea:	4613      	mov	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	00db      	lsls	r3, r3, #3
 80074f2:	440b      	add	r3, r1
 80074f4:	f203 136f 	addw	r3, r3, #367	; 0x16f
 80074f8:	2200      	movs	r2, #0
 80074fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80074fc:	7bfa      	ldrb	r2, [r7, #15]
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	4613      	mov	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	00db      	lsls	r3, r3, #3
 8007508:	440b      	add	r3, r1
 800750a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007512:	7bfa      	ldrb	r2, [r7, #15]
 8007514:	6879      	ldr	r1, [r7, #4]
 8007516:	4613      	mov	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4413      	add	r3, r2
 800751c:	00db      	lsls	r3, r3, #3
 800751e:	440b      	add	r3, r1
 8007520:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007524:	2200      	movs	r2, #0
 8007526:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007528:	7bfa      	ldrb	r2, [r7, #15]
 800752a:	6879      	ldr	r1, [r7, #4]
 800752c:	4613      	mov	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4413      	add	r3, r2
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	440b      	add	r3, r1
 8007536:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800753a:	2200      	movs	r2, #0
 800753c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800753e:	7bfb      	ldrb	r3, [r7, #15]
 8007540:	3301      	adds	r3, #1
 8007542:	73fb      	strb	r3, [r7, #15]
 8007544:	7bfa      	ldrb	r2, [r7, #15]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	429a      	cmp	r2, r3
 800754c:	d3b5      	bcc.n	80074ba <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	603b      	str	r3, [r7, #0]
 8007554:	687e      	ldr	r6, [r7, #4]
 8007556:	466d      	mov	r5, sp
 8007558:	f106 0410 	add.w	r4, r6, #16
 800755c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800755e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007560:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007564:	e885 0003 	stmia.w	r5, {r0, r1}
 8007568:	1d33      	adds	r3, r6, #4
 800756a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800756c:	6838      	ldr	r0, [r7, #0]
 800756e:	f003 ff09 	bl	800b384 <USB_DevInit>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d005      	beq.n	8007584 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2202      	movs	r2, #2
 800757c:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e014      	b.n	80075ae <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d102      	bne.n	80075a2 <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f001 fc55 	bl	8008e4c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f006 f915 	bl	800d7d6 <USB_DevDisconnect>

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b082      	sub	sp, #8
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d101      	bne.n	80075cc <HAL_PCD_Start+0x16>
 80075c8:	2302      	movs	r3, #2
 80075ca:	e012      	b.n	80075f2 <HAL_PCD_Start+0x3c>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4618      	mov	r0, r3
 80075da:	f003 fe94 	bl	800b306 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f006 f8e0 	bl	800d7a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b084      	sub	sp, #16
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4618      	mov	r0, r3
 8007608:	f006 f8fa 	bl	800d800 <USB_ReadInterrupts>
 800760c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fb3e 	bl	8007c9a <PCD_EP_ISR_Handler>

    return;
 800761e:	e110      	b.n	8007842 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007626:	2b00      	cmp	r3, #0
 8007628:	d013      	beq.n	8007652 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007632:	b29a      	uxth	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800763c:	b292      	uxth	r2, r2
 800763e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f008 f83f 	bl	800f6c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007648:	2100      	movs	r1, #0
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f8fc 	bl	8007848 <HAL_PCD_SetAddress>

    return;
 8007650:	e0f7      	b.n	8007842 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00c      	beq.n	8007676 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007664:	b29a      	uxth	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800766e:	b292      	uxth	r2, r2
 8007670:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007674:	e0e5      	b.n	8007842 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00c      	beq.n	800769a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007688:	b29a      	uxth	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007692:	b292      	uxth	r2, r2
 8007694:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007698:	e0d3      	b.n	8007842 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d034      	beq.n	800770e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f022 0204 	bic.w	r2, r2, #4
 80076b6:	b292      	uxth	r2, r2
 80076b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f022 0208 	bic.w	r2, r2, #8
 80076ce:	b292      	uxth	r2, r2
 80076d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d107      	bne.n	80076ee <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80076e6:	2100      	movs	r1, #0
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f001 fbd9 	bl	8008ea0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f008 f822 	bl	800f738 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007706:	b292      	uxth	r2, r2
 8007708:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800770c:	e099      	b.n	8007842 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007714:	2b00      	cmp	r3, #0
 8007716:	d027      	beq.n	8007768 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007720:	b29a      	uxth	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f042 0208 	orr.w	r2, r2, #8
 800772a:	b292      	uxth	r2, r2
 800772c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007738:	b29a      	uxth	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007742:	b292      	uxth	r2, r2
 8007744:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007750:	b29a      	uxth	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f042 0204 	orr.w	r2, r2, #4
 800775a:	b292      	uxth	r2, r2
 800775c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f007 ffcf 	bl	800f704 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007766:	e06c      	b.n	8007842 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800776e:	2b00      	cmp	r3, #0
 8007770:	d040      	beq.n	80077f4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800777a:	b29a      	uxth	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007784:	b292      	uxth	r2, r2
 8007786:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8007790:	2b00      	cmp	r3, #0
 8007792:	d12b      	bne.n	80077ec <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800779c:	b29a      	uxth	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f042 0204 	orr.w	r2, r2, #4
 80077a6:	b292      	uxth	r2, r2
 80077a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f042 0208 	orr.w	r2, r2, #8
 80077be:	b292      	uxth	r2, r2
 80077c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	089b      	lsrs	r3, r3, #2
 80077d8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80077e2:	2101      	movs	r1, #1
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f001 fb5b 	bl	8008ea0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80077ea:	e02a      	b.n	8007842 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f007 ff89 	bl	800f704 <HAL_PCD_SuspendCallback>
    return;
 80077f2:	e026      	b.n	8007842 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00f      	beq.n	800781e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007806:	b29a      	uxth	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007810:	b292      	uxth	r2, r2
 8007812:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f007 ff47 	bl	800f6aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800781c:	e011      	b.n	8007842 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00c      	beq.n	8007842 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007830:	b29a      	uxth	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800783a:	b292      	uxth	r2, r2
 800783c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007840:	bf00      	nop
  }
}
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	460b      	mov	r3, r1
 8007852:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800785a:	2b01      	cmp	r3, #1
 800785c:	d101      	bne.n	8007862 <HAL_PCD_SetAddress+0x1a>
 800785e:	2302      	movs	r3, #2
 8007860:	e013      	b.n	800788a <HAL_PCD_SetAddress+0x42>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2201      	movs	r2, #1
 8007866:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	78fa      	ldrb	r2, [r7, #3]
 800786e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	78fa      	ldrb	r2, [r7, #3]
 8007878:	4611      	mov	r1, r2
 800787a:	4618      	mov	r0, r3
 800787c:	f005 ff80 	bl	800d780 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	4608      	mov	r0, r1
 800789c:	4611      	mov	r1, r2
 800789e:	461a      	mov	r2, r3
 80078a0:	4603      	mov	r3, r0
 80078a2:	70fb      	strb	r3, [r7, #3]
 80078a4:	460b      	mov	r3, r1
 80078a6:	803b      	strh	r3, [r7, #0]
 80078a8:	4613      	mov	r3, r2
 80078aa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80078b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	da0f      	bge.n	80078d8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078b8:	78fb      	ldrb	r3, [r7, #3]
 80078ba:	f003 0307 	and.w	r3, r3, #7
 80078be:	1c5a      	adds	r2, r3, #1
 80078c0:	4613      	mov	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4413      	add	r3, r2
 80078c6:	00db      	lsls	r3, r3, #3
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	4413      	add	r3, r2
 80078cc:	3304      	adds	r3, #4
 80078ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2201      	movs	r2, #1
 80078d4:	705a      	strb	r2, [r3, #1]
 80078d6:	e00f      	b.n	80078f8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80078d8:	78fb      	ldrb	r3, [r7, #3]
 80078da:	f003 0207 	and.w	r2, r3, #7
 80078de:	4613      	mov	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4413      	add	r3, r2
 80078e4:	00db      	lsls	r3, r3, #3
 80078e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	4413      	add	r3, r2
 80078ee:	3304      	adds	r3, #4
 80078f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80078f8:	78fb      	ldrb	r3, [r7, #3]
 80078fa:	f003 0307 	and.w	r3, r3, #7
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007904:	883a      	ldrh	r2, [r7, #0]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	78ba      	ldrb	r2, [r7, #2]
 800790e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	785b      	ldrb	r3, [r3, #1]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d004      	beq.n	8007922 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	b29a      	uxth	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007922:	78bb      	ldrb	r3, [r7, #2]
 8007924:	2b02      	cmp	r3, #2
 8007926:	d102      	bne.n	800792e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8007934:	2b01      	cmp	r3, #1
 8007936:	d101      	bne.n	800793c <HAL_PCD_EP_Open+0xaa>
 8007938:	2302      	movs	r3, #2
 800793a:	e00e      	b.n	800795a <HAL_PCD_EP_Open+0xc8>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68f9      	ldr	r1, [r7, #12]
 800794a:	4618      	mov	r0, r3
 800794c:	f003 fd3c 	bl	800b3c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8007958:	7afb      	ldrb	r3, [r7, #11]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b084      	sub	sp, #16
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	460b      	mov	r3, r1
 800796c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800796e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007972:	2b00      	cmp	r3, #0
 8007974:	da0f      	bge.n	8007996 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007976:	78fb      	ldrb	r3, [r7, #3]
 8007978:	f003 0307 	and.w	r3, r3, #7
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	4613      	mov	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	00db      	lsls	r3, r3, #3
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	4413      	add	r3, r2
 800798a:	3304      	adds	r3, #4
 800798c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2201      	movs	r2, #1
 8007992:	705a      	strb	r2, [r3, #1]
 8007994:	e00f      	b.n	80079b6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007996:	78fb      	ldrb	r3, [r7, #3]
 8007998:	f003 0207 	and.w	r2, r3, #7
 800799c:	4613      	mov	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	00db      	lsls	r3, r3, #3
 80079a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	4413      	add	r3, r2
 80079ac:	3304      	adds	r3, #4
 80079ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80079b6:	78fb      	ldrb	r3, [r7, #3]
 80079b8:	f003 0307 	and.w	r3, r3, #7
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d101      	bne.n	80079d0 <HAL_PCD_EP_Close+0x6e>
 80079cc:	2302      	movs	r3, #2
 80079ce:	e00e      	b.n	80079ee <HAL_PCD_EP_Close+0x8c>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68f9      	ldr	r1, [r7, #12]
 80079de:	4618      	mov	r0, r3
 80079e0:	f004 f8ac 	bl	800bb3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b086      	sub	sp, #24
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	60f8      	str	r0, [r7, #12]
 80079fe:	607a      	str	r2, [r7, #4]
 8007a00:	603b      	str	r3, [r7, #0]
 8007a02:	460b      	mov	r3, r1
 8007a04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a06:	7afb      	ldrb	r3, [r7, #11]
 8007a08:	f003 0207 	and.w	r2, r3, #7
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	00db      	lsls	r3, r3, #3
 8007a14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	683a      	ldr	r2, [r7, #0]
 8007a2a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	2200      	movs	r2, #0
 8007a36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a38:	7afb      	ldrb	r3, [r7, #11]
 8007a3a:	f003 0307 	and.w	r3, r3, #7
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007a44:	7afb      	ldrb	r3, [r7, #11]
 8007a46:	f003 0307 	and.w	r3, r3, #7
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d106      	bne.n	8007a5c <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6979      	ldr	r1, [r7, #20]
 8007a54:	4618      	mov	r0, r3
 8007a56:	f004 fa5e 	bl	800bf16 <USB_EPStartXfer>
 8007a5a:	e005      	b.n	8007a68 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6979      	ldr	r1, [r7, #20]
 8007a62:	4618      	mov	r0, r3
 8007a64:	f004 fa57 	bl	800bf16 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3718      	adds	r7, #24
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b083      	sub	sp, #12
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007a7e:	78fb      	ldrb	r3, [r7, #3]
 8007a80:	f003 0207 	and.w	r2, r3, #7
 8007a84:	6879      	ldr	r1, [r7, #4]
 8007a86:	4613      	mov	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	00db      	lsls	r3, r3, #3
 8007a8e:	440b      	add	r3, r1
 8007a90:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007a94:	681b      	ldr	r3, [r3, #0]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b086      	sub	sp, #24
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	60f8      	str	r0, [r7, #12]
 8007aaa:	607a      	str	r2, [r7, #4]
 8007aac:	603b      	str	r3, [r7, #0]
 8007aae:	460b      	mov	r3, r1
 8007ab0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ab2:	7afb      	ldrb	r3, [r7, #11]
 8007ab4:	f003 0307 	and.w	r3, r3, #7
 8007ab8:	1c5a      	adds	r2, r3, #1
 8007aba:	4613      	mov	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	00db      	lsls	r3, r3, #3
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	3304      	adds	r3, #4
 8007ac8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	2201      	movs	r2, #1
 8007aee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007af0:	7afb      	ldrb	r3, [r7, #11]
 8007af2:	f003 0307 	and.w	r3, r3, #7
 8007af6:	b2da      	uxtb	r2, r3
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007afc:	7afb      	ldrb	r3, [r7, #11]
 8007afe:	f003 0307 	and.w	r3, r3, #7
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d106      	bne.n	8007b14 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6979      	ldr	r1, [r7, #20]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f004 fa02 	bl	800bf16 <USB_EPStartXfer>
 8007b12:	e005      	b.n	8007b20 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6979      	ldr	r1, [r7, #20]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f004 f9fb 	bl	800bf16 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3718      	adds	r7, #24
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b084      	sub	sp, #16
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	460b      	mov	r3, r1
 8007b34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007b36:	78fb      	ldrb	r3, [r7, #3]
 8007b38:	f003 0207 	and.w	r2, r3, #7
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d901      	bls.n	8007b48 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e04e      	b.n	8007be6 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007b48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	da0f      	bge.n	8007b70 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b50:	78fb      	ldrb	r3, [r7, #3]
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	1c5a      	adds	r2, r3, #1
 8007b58:	4613      	mov	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	4413      	add	r3, r2
 8007b5e:	00db      	lsls	r3, r3, #3
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	4413      	add	r3, r2
 8007b64:	3304      	adds	r3, #4
 8007b66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	705a      	strb	r2, [r3, #1]
 8007b6e:	e00d      	b.n	8007b8c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007b70:	78fa      	ldrb	r2, [r7, #3]
 8007b72:	4613      	mov	r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	4413      	add	r3, r2
 8007b78:	00db      	lsls	r3, r3, #3
 8007b7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	4413      	add	r3, r2
 8007b82:	3304      	adds	r3, #4
 8007b84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b92:	78fb      	ldrb	r3, [r7, #3]
 8007b94:	f003 0307 	and.w	r3, r3, #7
 8007b98:	b2da      	uxtb	r2, r3
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d101      	bne.n	8007bac <HAL_PCD_EP_SetStall+0x82>
 8007ba8:	2302      	movs	r3, #2
 8007baa:	e01c      	b.n	8007be6 <HAL_PCD_EP_SetStall+0xbc>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68f9      	ldr	r1, [r7, #12]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f005 fce1 	bl	800d582 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007bc0:	78fb      	ldrb	r3, [r7, #3]
 8007bc2:	f003 0307 	and.w	r3, r3, #7
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d108      	bne.n	8007bdc <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	f005 fe22 	bl	800d820 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007bfa:	78fb      	ldrb	r3, [r7, #3]
 8007bfc:	f003 020f 	and.w	r2, r3, #15
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d901      	bls.n	8007c0c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e042      	b.n	8007c92 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	da0f      	bge.n	8007c34 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c14:	78fb      	ldrb	r3, [r7, #3]
 8007c16:	f003 0307 	and.w	r3, r3, #7
 8007c1a:	1c5a      	adds	r2, r3, #1
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	00db      	lsls	r3, r3, #3
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	4413      	add	r3, r2
 8007c28:	3304      	adds	r3, #4
 8007c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	705a      	strb	r2, [r3, #1]
 8007c32:	e00f      	b.n	8007c54 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c34:	78fb      	ldrb	r3, [r7, #3]
 8007c36:	f003 0207 	and.w	r2, r3, #7
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4413      	add	r3, r2
 8007c40:	00db      	lsls	r3, r3, #3
 8007c42:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	4413      	add	r3, r2
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c5a:	78fb      	ldrb	r3, [r7, #3]
 8007c5c:	f003 0307 	and.w	r3, r3, #7
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d101      	bne.n	8007c74 <HAL_PCD_EP_ClrStall+0x86>
 8007c70:	2302      	movs	r3, #2
 8007c72:	e00e      	b.n	8007c92 <HAL_PCD_EP_ClrStall+0xa4>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68f9      	ldr	r1, [r7, #12]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f005 fcce 	bl	800d624 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b096      	sub	sp, #88	; 0x58
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007ca2:	e3a9      	b.n	80083f8 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007cac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007cb0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	f003 030f 	and.w	r3, r3, #15
 8007cba:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8007cbe:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f040 8169 	bne.w	8007f9a <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007cc8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007ccc:	f003 0310 	and.w	r3, r3, #16
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d150      	bne.n	8007d76 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	881b      	ldrh	r3, [r3, #0]
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ce4:	81fb      	strh	r3, [r7, #14]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	89fb      	ldrh	r3, [r7, #14]
 8007cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	332c      	adds	r3, #44	; 0x2c
 8007cfc:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	461a      	mov	r2, r3
 8007d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	00db      	lsls	r3, r3, #3
 8007d10:	4413      	add	r3, r2
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	6812      	ldr	r2, [r2, #0]
 8007d16:	4413      	add	r3, r2
 8007d18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d24:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d28:	695a      	ldr	r2, [r3, #20]
 8007d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	441a      	add	r2, r3
 8007d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d32:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007d34:	2100      	movs	r1, #0
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f007 fc9d 	bl	800f676 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 8357 	beq.w	80083f8 <PCD_EP_ISR_Handler+0x75e>
 8007d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d4c:	699b      	ldr	r3, [r3, #24]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f040 8352 	bne.w	80083f8 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d60:	b2da      	uxtb	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	b292      	uxth	r2, r2
 8007d68:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007d74:	e340      	b.n	80083f8 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8007d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	881b      	ldrh	r3, [r3, #0]
 8007d84:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007d88:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d032      	beq.n	8007dfa <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	461a      	mov	r2, r3
 8007da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	00db      	lsls	r3, r3, #3
 8007da6:	4413      	add	r3, r2
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	6812      	ldr	r2, [r2, #0]
 8007dac:	4413      	add	r3, r2
 8007dae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007db2:	881b      	ldrh	r3, [r3, #0]
 8007db4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dba:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6818      	ldr	r0, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8007dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dc8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dcc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	f005 fd74 	bl	800d8bc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007de0:	4013      	ands	r3, r2
 8007de2:	823b      	strh	r3, [r7, #16]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	8a3a      	ldrh	r2, [r7, #16]
 8007dea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007dee:	b292      	uxth	r2, r2
 8007df0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f007 fc12 	bl	800f61c <HAL_PCD_SetupStageCallback>
 8007df8:	e2fe      	b.n	80083f8 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007dfa:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f280 82fa 	bge.w	80083f8 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007e10:	4013      	ands	r3, r2
 8007e12:	83fb      	strh	r3, [r7, #30]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	8bfa      	ldrh	r2, [r7, #30]
 8007e1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e1e:	b292      	uxth	r2, r2
 8007e20:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	00db      	lsls	r3, r3, #3
 8007e34:	4413      	add	r3, r2
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	6812      	ldr	r2, [r2, #0]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e40:	881b      	ldrh	r3, [r3, #0]
 8007e42:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e48:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d019      	beq.n	8007e86 <PCD_EP_ISR_Handler+0x1ec>
 8007e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d015      	beq.n	8007e86 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6818      	ldr	r0, [r3, #0]
 8007e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e60:	6959      	ldr	r1, [r3, #20]
 8007e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e64:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e68:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	f005 fd26 	bl	800d8bc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e72:	695a      	ldr	r2, [r3, #20]
 8007e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e76:	69db      	ldr	r3, [r3, #28]
 8007e78:	441a      	add	r2, r3
 8007e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e7c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007e7e:	2100      	movs	r1, #0
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f007 fbdd 	bl	800f640 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	881b      	ldrh	r3, [r3, #0]
 8007e8c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007e90:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f040 82ad 	bne.w	80083f8 <PCD_EP_ISR_Handler+0x75e>
 8007e9e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007ea2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007ea6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007eaa:	f000 82a5 	beq.w	80083f8 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	61bb      	str	r3, [r7, #24]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	61bb      	str	r3, [r7, #24]
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ecc:	617b      	str	r3, [r7, #20]
 8007ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	2b3e      	cmp	r3, #62	; 0x3e
 8007ed4:	d918      	bls.n	8007f08 <PCD_EP_ISR_Handler+0x26e>
 8007ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	095b      	lsrs	r3, r3, #5
 8007edc:	647b      	str	r3, [r7, #68]	; 0x44
 8007ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	f003 031f 	and.w	r3, r3, #31
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d102      	bne.n	8007ef0 <PCD_EP_ISR_Handler+0x256>
 8007eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eec:	3b01      	subs	r3, #1
 8007eee:	647b      	str	r3, [r7, #68]	; 0x44
 8007ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	029b      	lsls	r3, r3, #10
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	801a      	strh	r2, [r3, #0]
 8007f06:	e029      	b.n	8007f5c <PCD_EP_ISR_Handler+0x2c2>
 8007f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d112      	bne.n	8007f36 <PCD_EP_ISR_Handler+0x29c>
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	881b      	ldrh	r3, [r3, #0]
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	801a      	strh	r2, [r3, #0]
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	801a      	strh	r2, [r3, #0]
 8007f34:	e012      	b.n	8007f5c <PCD_EP_ISR_Handler+0x2c2>
 8007f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	085b      	lsrs	r3, r3, #1
 8007f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8007f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d002      	beq.n	8007f50 <PCD_EP_ISR_Handler+0x2b6>
 8007f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8007f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	029b      	lsls	r3, r3, #10
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f6c:	827b      	strh	r3, [r7, #18]
 8007f6e:	8a7b      	ldrh	r3, [r7, #18]
 8007f70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007f74:	827b      	strh	r3, [r7, #18]
 8007f76:	8a7b      	ldrh	r3, [r7, #18]
 8007f78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007f7c:	827b      	strh	r3, [r7, #18]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	8a7b      	ldrh	r3, [r7, #18]
 8007f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	8013      	strh	r3, [r2, #0]
 8007f98:	e22e      	b.n	80083f8 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	881b      	ldrh	r3, [r3, #0]
 8007faa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007fae:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f280 80f7 	bge.w	80081a6 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4413      	add	r3, r2
 8007fc6:	881b      	ldrh	r3, [r3, #0]
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007fce:	4013      	ands	r3, r2
 8007fd0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	461a      	mov	r2, r3
 8007fda:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8007fe6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007fea:	b292      	uxth	r2, r2
 8007fec:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007fee:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4413      	add	r3, r2
 8007ff8:	00db      	lsls	r3, r3, #3
 8007ffa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	4413      	add	r3, r2
 8008002:	3304      	adds	r3, #4
 8008004:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8008006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008008:	7b1b      	ldrb	r3, [r3, #12]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d123      	bne.n	8008056 <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008016:	b29b      	uxth	r3, r3
 8008018:	461a      	mov	r2, r3
 800801a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	00db      	lsls	r3, r3, #3
 8008020:	4413      	add	r3, r2
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	6812      	ldr	r2, [r2, #0]
 8008026:	4413      	add	r3, r2
 8008028:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800802c:	881b      	ldrh	r3, [r3, #0]
 800802e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008032:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8008036:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800803a:	2b00      	cmp	r3, #0
 800803c:	f000 808e 	beq.w	800815c <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6818      	ldr	r0, [r3, #0]
 8008044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008046:	6959      	ldr	r1, [r3, #20]
 8008048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800804a:	88da      	ldrh	r2, [r3, #6]
 800804c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008050:	f005 fc34 	bl	800d8bc <USB_ReadPMA>
 8008054:	e082      	b.n	800815c <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8008056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008058:	78db      	ldrb	r3, [r3, #3]
 800805a:	2b02      	cmp	r3, #2
 800805c:	d10a      	bne.n	8008074 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800805e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8008062:	461a      	mov	r2, r3
 8008064:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f9d4 	bl	8008414 <HAL_PCD_EP_DB_Receive>
 800806c:	4603      	mov	r3, r0
 800806e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008072:	e073      	b.n	800815c <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	461a      	mov	r2, r3
 800807a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	b29b      	uxth	r3, r3
 8008086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800808a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	441a      	add	r2, r3
 80080a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80080a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	461a      	mov	r2, r3
 80080be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	881b      	ldrh	r3, [r3, #0]
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d022      	beq.n	8008118 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080da:	b29b      	uxth	r3, r3
 80080dc:	461a      	mov	r2, r3
 80080de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	00db      	lsls	r3, r3, #3
 80080e4:	4413      	add	r3, r2
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	6812      	ldr	r2, [r2, #0]
 80080ea:	4413      	add	r3, r2
 80080ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080f0:	881b      	ldrh	r3, [r3, #0]
 80080f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80080fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d02c      	beq.n	800815c <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6818      	ldr	r0, [r3, #0]
 8008106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008108:	6959      	ldr	r1, [r3, #20]
 800810a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800810c:	891a      	ldrh	r2, [r3, #8]
 800810e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008112:	f005 fbd3 	bl	800d8bc <USB_ReadPMA>
 8008116:	e021      	b.n	800815c <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008120:	b29b      	uxth	r3, r3
 8008122:	461a      	mov	r2, r3
 8008124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	00db      	lsls	r3, r3, #3
 800812a:	4413      	add	r3, r2
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	6812      	ldr	r2, [r2, #0]
 8008130:	4413      	add	r3, r2
 8008132:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008136:	881b      	ldrh	r3, [r3, #0]
 8008138:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800813c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8008140:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008144:	2b00      	cmp	r3, #0
 8008146:	d009      	beq.n	800815c <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6818      	ldr	r0, [r3, #0]
 800814c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800814e:	6959      	ldr	r1, [r3, #20]
 8008150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008152:	895a      	ldrh	r2, [r3, #10]
 8008154:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008158:	f005 fbb0 	bl	800d8bc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800815c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800815e:	69da      	ldr	r2, [r3, #28]
 8008160:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008164:	441a      	add	r2, r3
 8008166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008168:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800816a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800816c:	695a      	ldr	r2, [r3, #20]
 800816e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008172:	441a      	add	r2, r3
 8008174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008176:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8008178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d005      	beq.n	800818c <PCD_EP_ISR_Handler+0x4f2>
 8008180:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8008184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	429a      	cmp	r2, r3
 800818a:	d206      	bcs.n	800819a <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800818c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	4619      	mov	r1, r3
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f007 fa54 	bl	800f640 <HAL_PCD_DataOutStageCallback>
 8008198:	e005      	b.n	80081a6 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80081a0:	4618      	mov	r0, r3
 80081a2:	f003 feb8 	bl	800bf16 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80081a6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80081aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f000 8122 	beq.w	80083f8 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 80081b4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80081b8:	1c5a      	adds	r2, r3, #1
 80081ba:	4613      	mov	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	00db      	lsls	r3, r3, #3
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	4413      	add	r3, r2
 80081c6:	3304      	adds	r3, #4
 80081c8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	461a      	mov	r2, r3
 80081d0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	881b      	ldrh	r3, [r3, #0]
 80081da:	b29b      	uxth	r3, r3
 80081dc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80081e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	461a      	mov	r2, r3
 80081ee:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	441a      	add	r2, r3
 80081f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80081fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008202:	b29b      	uxth	r3, r3
 8008204:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8008206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008208:	78db      	ldrb	r3, [r3, #3]
 800820a:	2b01      	cmp	r3, #1
 800820c:	f040 80a2 	bne.w	8008354 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8008210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008212:	2200      	movs	r2, #0
 8008214:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8008216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008218:	7b1b      	ldrb	r3, [r3, #12]
 800821a:	2b00      	cmp	r3, #0
 800821c:	f000 8093 	beq.w	8008346 <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008220:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8008224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008228:	2b00      	cmp	r3, #0
 800822a:	d046      	beq.n	80082ba <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800822c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800822e:	785b      	ldrb	r3, [r3, #1]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d126      	bne.n	8008282 <PCD_EP_ISR_Handler+0x5e8>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	627b      	str	r3, [r7, #36]	; 0x24
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008242:	b29b      	uxth	r3, r3
 8008244:	461a      	mov	r2, r3
 8008246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008248:	4413      	add	r3, r2
 800824a:	627b      	str	r3, [r7, #36]	; 0x24
 800824c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	00da      	lsls	r2, r3, #3
 8008252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008254:	4413      	add	r3, r2
 8008256:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800825a:	623b      	str	r3, [r7, #32]
 800825c:	6a3b      	ldr	r3, [r7, #32]
 800825e:	881b      	ldrh	r3, [r3, #0]
 8008260:	b29b      	uxth	r3, r3
 8008262:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008266:	b29a      	uxth	r2, r3
 8008268:	6a3b      	ldr	r3, [r7, #32]
 800826a:	801a      	strh	r2, [r3, #0]
 800826c:	6a3b      	ldr	r3, [r7, #32]
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	b29b      	uxth	r3, r3
 8008272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800827a:	b29a      	uxth	r2, r3
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	801a      	strh	r2, [r3, #0]
 8008280:	e061      	b.n	8008346 <PCD_EP_ISR_Handler+0x6ac>
 8008282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008284:	785b      	ldrb	r3, [r3, #1]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d15d      	bne.n	8008346 <PCD_EP_ISR_Handler+0x6ac>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008298:	b29b      	uxth	r3, r3
 800829a:	461a      	mov	r2, r3
 800829c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829e:	4413      	add	r3, r2
 80082a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	00da      	lsls	r2, r3, #3
 80082a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082aa:	4413      	add	r3, r2
 80082ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80082b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80082b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b4:	2200      	movs	r2, #0
 80082b6:	801a      	strh	r2, [r3, #0]
 80082b8:	e045      	b.n	8008346 <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082c2:	785b      	ldrb	r3, [r3, #1]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d126      	bne.n	8008316 <PCD_EP_ISR_Handler+0x67c>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	637b      	str	r3, [r7, #52]	; 0x34
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	461a      	mov	r2, r3
 80082da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082dc:	4413      	add	r3, r2
 80082de:	637b      	str	r3, [r7, #52]	; 0x34
 80082e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	00da      	lsls	r2, r3, #3
 80082e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e8:	4413      	add	r3, r2
 80082ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80082ee:	633b      	str	r3, [r7, #48]	; 0x30
 80082f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f2:	881b      	ldrh	r3, [r3, #0]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fe:	801a      	strh	r2, [r3, #0]
 8008300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	b29b      	uxth	r3, r3
 8008306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800830a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800830e:	b29a      	uxth	r2, r3
 8008310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008312:	801a      	strh	r2, [r3, #0]
 8008314:	e017      	b.n	8008346 <PCD_EP_ISR_Handler+0x6ac>
 8008316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008318:	785b      	ldrb	r3, [r3, #1]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d113      	bne.n	8008346 <PCD_EP_ISR_Handler+0x6ac>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008326:	b29b      	uxth	r3, r3
 8008328:	461a      	mov	r2, r3
 800832a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800832c:	4413      	add	r3, r2
 800832e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	00da      	lsls	r2, r3, #3
 8008336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008338:	4413      	add	r3, r2
 800833a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800833e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008342:	2200      	movs	r2, #0
 8008344:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	4619      	mov	r1, r3
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f007 f992 	bl	800f676 <HAL_PCD_DataInStageCallback>
 8008352:	e051      	b.n	80083f8 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8008354:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8008358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800835c:	2b00      	cmp	r3, #0
 800835e:	d144      	bne.n	80083ea <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008368:	b29b      	uxth	r3, r3
 800836a:	461a      	mov	r2, r3
 800836c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	00db      	lsls	r3, r3, #3
 8008372:	4413      	add	r3, r2
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	6812      	ldr	r2, [r2, #0]
 8008378:	4413      	add	r3, r2
 800837a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800837e:	881b      	ldrh	r3, [r3, #0]
 8008380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008384:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8008388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800838a:	699a      	ldr	r2, [r3, #24]
 800838c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008390:	429a      	cmp	r2, r3
 8008392:	d907      	bls.n	80083a4 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 8008394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008396:	699a      	ldr	r2, [r3, #24]
 8008398:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800839c:	1ad2      	subs	r2, r2, r3
 800839e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083a0:	619a      	str	r2, [r3, #24]
 80083a2:	e002      	b.n	80083aa <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 80083a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083a6:	2200      	movs	r2, #0
 80083a8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80083aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d106      	bne.n	80083c0 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80083b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	4619      	mov	r1, r3
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f007 f95c 	bl	800f676 <HAL_PCD_DataInStageCallback>
 80083be:	e01b      	b.n	80083f8 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80083c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083c2:	695a      	ldr	r2, [r3, #20]
 80083c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80083c8:	441a      	add	r2, r3
 80083ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083cc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80083ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083d0:	69da      	ldr	r2, [r3, #28]
 80083d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80083d6:	441a      	add	r2, r3
 80083d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083da:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80083e2:	4618      	mov	r0, r3
 80083e4:	f003 fd97 	bl	800bf16 <USB_EPStartXfer>
 80083e8:	e006      	b.n	80083f8 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80083ea:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80083ee:	461a      	mov	r2, r3
 80083f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f917 	bl	8008626 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008400:	b29b      	uxth	r3, r3
 8008402:	b21b      	sxth	r3, r3
 8008404:	2b00      	cmp	r3, #0
 8008406:	f6ff ac4d 	blt.w	8007ca4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3758      	adds	r7, #88	; 0x58
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b088      	sub	sp, #32
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	4613      	mov	r3, r2
 8008420:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008422:	88fb      	ldrh	r3, [r7, #6]
 8008424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d07c      	beq.n	8008526 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008434:	b29b      	uxth	r3, r3
 8008436:	461a      	mov	r2, r3
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	00db      	lsls	r3, r3, #3
 800843e:	4413      	add	r3, r2
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	6812      	ldr	r2, [r2, #0]
 8008444:	4413      	add	r3, r2
 8008446:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008450:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	699a      	ldr	r2, [r3, #24]
 8008456:	8b7b      	ldrh	r3, [r7, #26]
 8008458:	429a      	cmp	r2, r3
 800845a:	d306      	bcc.n	800846a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	699a      	ldr	r2, [r3, #24]
 8008460:	8b7b      	ldrh	r3, [r7, #26]
 8008462:	1ad2      	subs	r2, r2, r3
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	619a      	str	r2, [r3, #24]
 8008468:	e002      	b.n	8008470 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2200      	movs	r2, #0
 800846e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d123      	bne.n	80084c0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	461a      	mov	r2, r3
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	4413      	add	r3, r2
 8008486:	881b      	ldrh	r3, [r3, #0]
 8008488:	b29b      	uxth	r3, r3
 800848a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800848e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008492:	833b      	strh	r3, [r7, #24]
 8008494:	8b3b      	ldrh	r3, [r7, #24]
 8008496:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800849a:	833b      	strh	r3, [r7, #24]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	461a      	mov	r2, r3
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	441a      	add	r2, r3
 80084aa:	8b3b      	ldrh	r3, [r7, #24]
 80084ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084bc:	b29b      	uxth	r3, r3
 80084be:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80084c0:	88fb      	ldrh	r3, [r7, #6]
 80084c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d01f      	beq.n	800850a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	461a      	mov	r2, r3
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	881b      	ldrh	r3, [r3, #0]
 80084da:	b29b      	uxth	r3, r3
 80084dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084e4:	82fb      	strh	r3, [r7, #22]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	461a      	mov	r2, r3
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	441a      	add	r2, r3
 80084f4:	8afb      	ldrh	r3, [r7, #22]
 80084f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008502:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008506:	b29b      	uxth	r3, r3
 8008508:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800850a:	8b7b      	ldrh	r3, [r7, #26]
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 8085 	beq.w	800861c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6818      	ldr	r0, [r3, #0]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	6959      	ldr	r1, [r3, #20]
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	891a      	ldrh	r2, [r3, #8]
 800851e:	8b7b      	ldrh	r3, [r7, #26]
 8008520:	f005 f9cc 	bl	800d8bc <USB_ReadPMA>
 8008524:	e07a      	b.n	800861c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800852e:	b29b      	uxth	r3, r3
 8008530:	461a      	mov	r2, r3
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	00db      	lsls	r3, r3, #3
 8008538:	4413      	add	r3, r2
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	6812      	ldr	r2, [r2, #0]
 800853e:	4413      	add	r3, r2
 8008540:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800854a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	699a      	ldr	r2, [r3, #24]
 8008550:	8b7b      	ldrh	r3, [r7, #26]
 8008552:	429a      	cmp	r2, r3
 8008554:	d306      	bcc.n	8008564 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	699a      	ldr	r2, [r3, #24]
 800855a:	8b7b      	ldrh	r3, [r7, #26]
 800855c:	1ad2      	subs	r2, r2, r3
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	619a      	str	r2, [r3, #24]
 8008562:	e002      	b.n	800856a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	2200      	movs	r2, #0
 8008568:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d123      	bne.n	80085ba <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	881b      	ldrh	r3, [r3, #0]
 8008582:	b29b      	uxth	r3, r3
 8008584:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800858c:	83fb      	strh	r3, [r7, #30]
 800858e:	8bfb      	ldrh	r3, [r7, #30]
 8008590:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008594:	83fb      	strh	r3, [r7, #30]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	441a      	add	r2, r3
 80085a4:	8bfb      	ldrh	r3, [r7, #30]
 80085a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80085ba:	88fb      	ldrh	r3, [r7, #6]
 80085bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d11f      	bne.n	8008604 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	461a      	mov	r2, r3
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4413      	add	r3, r2
 80085d2:	881b      	ldrh	r3, [r3, #0]
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085de:	83bb      	strh	r3, [r7, #28]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	461a      	mov	r2, r3
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	441a      	add	r2, r3
 80085ee:	8bbb      	ldrh	r3, [r7, #28]
 80085f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008600:	b29b      	uxth	r3, r3
 8008602:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008604:	8b7b      	ldrh	r3, [r7, #26]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d008      	beq.n	800861c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6818      	ldr	r0, [r3, #0]
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	6959      	ldr	r1, [r3, #20]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	895a      	ldrh	r2, [r3, #10]
 8008616:	8b7b      	ldrh	r3, [r7, #26]
 8008618:	f005 f950 	bl	800d8bc <USB_ReadPMA>
    }
  }

  return count;
 800861c:	8b7b      	ldrh	r3, [r7, #26]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3720      	adds	r7, #32
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b0a2      	sub	sp, #136	; 0x88
 800862a:	af00      	add	r7, sp, #0
 800862c:	60f8      	str	r0, [r7, #12]
 800862e:	60b9      	str	r1, [r7, #8]
 8008630:	4613      	mov	r3, r2
 8008632:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008634:	88fb      	ldrh	r3, [r7, #6]
 8008636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800863a:	2b00      	cmp	r3, #0
 800863c:	f000 81c5 	beq.w	80089ca <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008648:	b29b      	uxth	r3, r3
 800864a:	461a      	mov	r2, r3
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	00db      	lsls	r3, r3, #3
 8008652:	4413      	add	r3, r2
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	6812      	ldr	r2, [r2, #0]
 8008658:	4413      	add	r3, r2
 800865a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800865e:	881b      	ldrh	r3, [r3, #0]
 8008660:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008664:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	699a      	ldr	r2, [r3, #24]
 800866c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008670:	429a      	cmp	r2, r3
 8008672:	d907      	bls.n	8008684 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	699a      	ldr	r2, [r3, #24]
 8008678:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800867c:	1ad2      	subs	r2, r2, r3
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	619a      	str	r2, [r3, #24]
 8008682:	e002      	b.n	800868a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	2200      	movs	r2, #0
 8008688:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	2b00      	cmp	r3, #0
 8008690:	f040 80b9 	bne.w	8008806 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	785b      	ldrb	r3, [r3, #1]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d126      	bne.n	80086ea <HAL_PCD_EP_DB_Transmit+0xc4>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	461a      	mov	r2, r3
 80086ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b0:	4413      	add	r3, r2
 80086b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	00da      	lsls	r2, r3, #3
 80086ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086bc:	4413      	add	r3, r2
 80086be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80086c2:	627b      	str	r3, [r7, #36]	; 0x24
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	881b      	ldrh	r3, [r3, #0]
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	801a      	strh	r2, [r3, #0]
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	881b      	ldrh	r3, [r3, #0]
 80086d8:	b29b      	uxth	r3, r3
 80086da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e6:	801a      	strh	r2, [r3, #0]
 80086e8:	e01a      	b.n	8008720 <HAL_PCD_EP_DB_Transmit+0xfa>
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	785b      	ldrb	r3, [r3, #1]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d116      	bne.n	8008720 <HAL_PCD_EP_DB_Transmit+0xfa>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	633b      	str	r3, [r7, #48]	; 0x30
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008700:	b29b      	uxth	r3, r3
 8008702:	461a      	mov	r2, r3
 8008704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008706:	4413      	add	r3, r2
 8008708:	633b      	str	r3, [r7, #48]	; 0x30
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	00da      	lsls	r2, r3, #3
 8008710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008712:	4413      	add	r3, r2
 8008714:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800871a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871c:	2200      	movs	r2, #0
 800871e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	623b      	str	r3, [r7, #32]
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	785b      	ldrb	r3, [r3, #1]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d126      	bne.n	800877c <HAL_PCD_EP_DB_Transmit+0x156>
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	61bb      	str	r3, [r7, #24]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800873c:	b29b      	uxth	r3, r3
 800873e:	461a      	mov	r2, r3
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	4413      	add	r3, r2
 8008744:	61bb      	str	r3, [r7, #24]
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	00da      	lsls	r2, r3, #3
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	4413      	add	r3, r2
 8008750:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008754:	617b      	str	r3, [r7, #20]
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	881b      	ldrh	r3, [r3, #0]
 800875a:	b29b      	uxth	r3, r3
 800875c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008760:	b29a      	uxth	r2, r3
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	801a      	strh	r2, [r3, #0]
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	881b      	ldrh	r3, [r3, #0]
 800876a:	b29b      	uxth	r3, r3
 800876c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008774:	b29a      	uxth	r2, r3
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	801a      	strh	r2, [r3, #0]
 800877a:	e017      	b.n	80087ac <HAL_PCD_EP_DB_Transmit+0x186>
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	785b      	ldrb	r3, [r3, #1]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d113      	bne.n	80087ac <HAL_PCD_EP_DB_Transmit+0x186>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800878c:	b29b      	uxth	r3, r3
 800878e:	461a      	mov	r2, r3
 8008790:	6a3b      	ldr	r3, [r7, #32]
 8008792:	4413      	add	r3, r2
 8008794:	623b      	str	r3, [r7, #32]
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	00da      	lsls	r2, r3, #3
 800879c:	6a3b      	ldr	r3, [r7, #32]
 800879e:	4413      	add	r3, r2
 80087a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80087a4:	61fb      	str	r3, [r7, #28]
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	2200      	movs	r2, #0
 80087aa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	4619      	mov	r1, r3
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f006 ff5f 	bl	800f676 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80087b8:	88fb      	ldrh	r3, [r7, #6]
 80087ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f000 82d2 	beq.w	8008d68 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	461a      	mov	r2, r3
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	881b      	ldrh	r3, [r3, #0]
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087de:	827b      	strh	r3, [r7, #18]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	461a      	mov	r2, r3
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	441a      	add	r2, r3
 80087ee:	8a7b      	ldrh	r3, [r7, #18]
 80087f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008800:	b29b      	uxth	r3, r3
 8008802:	8013      	strh	r3, [r2, #0]
 8008804:	e2b0      	b.n	8008d68 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008806:	88fb      	ldrh	r3, [r7, #6]
 8008808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d021      	beq.n	8008854 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	461a      	mov	r2, r3
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	881b      	ldrh	r3, [r3, #0]
 8008820:	b29b      	uxth	r3, r3
 8008822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800882a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	461a      	mov	r2, r3
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	441a      	add	r2, r3
 800883c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008848:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800884c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008850:	b29b      	uxth	r3, r3
 8008852:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800885a:	2b01      	cmp	r3, #1
 800885c:	f040 8284 	bne.w	8008d68 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	695a      	ldr	r2, [r3, #20]
 8008864:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008868:	441a      	add	r2, r3
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	69da      	ldr	r2, [r3, #28]
 8008872:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008876:	441a      	add	r2, r3
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	6a1a      	ldr	r2, [r3, #32]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	429a      	cmp	r2, r3
 8008886:	d309      	bcc.n	800889c <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	6a1a      	ldr	r2, [r3, #32]
 8008892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008894:	1ad2      	subs	r2, r2, r3
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	621a      	str	r2, [r3, #32]
 800889a:	e015      	b.n	80088c8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	6a1b      	ldr	r3, [r3, #32]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d107      	bne.n	80088b4 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80088a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80088a8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80088b2:	e009      	b.n	80088c8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	6a1b      	ldr	r3, [r3, #32]
 80088c0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	2200      	movs	r2, #0
 80088c6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	785b      	ldrb	r3, [r3, #1]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d155      	bne.n	800897c <HAL_PCD_EP_DB_Transmit+0x356>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088de:	b29b      	uxth	r3, r3
 80088e0:	461a      	mov	r2, r3
 80088e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e4:	4413      	add	r3, r2
 80088e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	00da      	lsls	r2, r3, #3
 80088ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f0:	4413      	add	r3, r2
 80088f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80088f6:	637b      	str	r3, [r7, #52]	; 0x34
 80088f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088fa:	2b3e      	cmp	r3, #62	; 0x3e
 80088fc:	d916      	bls.n	800892c <HAL_PCD_EP_DB_Transmit+0x306>
 80088fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008900:	095b      	lsrs	r3, r3, #5
 8008902:	64bb      	str	r3, [r7, #72]	; 0x48
 8008904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008906:	f003 031f 	and.w	r3, r3, #31
 800890a:	2b00      	cmp	r3, #0
 800890c:	d102      	bne.n	8008914 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800890e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008910:	3b01      	subs	r3, #1
 8008912:	64bb      	str	r3, [r7, #72]	; 0x48
 8008914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008916:	b29b      	uxth	r3, r3
 8008918:	029b      	lsls	r3, r3, #10
 800891a:	b29b      	uxth	r3, r3
 800891c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008924:	b29a      	uxth	r2, r3
 8008926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008928:	801a      	strh	r2, [r3, #0]
 800892a:	e043      	b.n	80089b4 <HAL_PCD_EP_DB_Transmit+0x38e>
 800892c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800892e:	2b00      	cmp	r3, #0
 8008930:	d112      	bne.n	8008958 <HAL_PCD_EP_DB_Transmit+0x332>
 8008932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008934:	881b      	ldrh	r3, [r3, #0]
 8008936:	b29b      	uxth	r3, r3
 8008938:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800893c:	b29a      	uxth	r2, r3
 800893e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008940:	801a      	strh	r2, [r3, #0]
 8008942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008944:	881b      	ldrh	r3, [r3, #0]
 8008946:	b29b      	uxth	r3, r3
 8008948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800894c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008950:	b29a      	uxth	r2, r3
 8008952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008954:	801a      	strh	r2, [r3, #0]
 8008956:	e02d      	b.n	80089b4 <HAL_PCD_EP_DB_Transmit+0x38e>
 8008958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800895a:	085b      	lsrs	r3, r3, #1
 800895c:	64bb      	str	r3, [r7, #72]	; 0x48
 800895e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008960:	f003 0301 	and.w	r3, r3, #1
 8008964:	2b00      	cmp	r3, #0
 8008966:	d002      	beq.n	800896e <HAL_PCD_EP_DB_Transmit+0x348>
 8008968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800896a:	3301      	adds	r3, #1
 800896c:	64bb      	str	r3, [r7, #72]	; 0x48
 800896e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008970:	b29b      	uxth	r3, r3
 8008972:	029b      	lsls	r3, r3, #10
 8008974:	b29a      	uxth	r2, r3
 8008976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008978:	801a      	strh	r2, [r3, #0]
 800897a:	e01b      	b.n	80089b4 <HAL_PCD_EP_DB_Transmit+0x38e>
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	785b      	ldrb	r3, [r3, #1]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d117      	bne.n	80089b4 <HAL_PCD_EP_DB_Transmit+0x38e>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	643b      	str	r3, [r7, #64]	; 0x40
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008992:	b29b      	uxth	r3, r3
 8008994:	461a      	mov	r2, r3
 8008996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008998:	4413      	add	r3, r2
 800899a:	643b      	str	r3, [r7, #64]	; 0x40
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	00da      	lsls	r2, r3, #3
 80089a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089a4:	4413      	add	r3, r2
 80089a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80089aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089b2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6818      	ldr	r0, [r3, #0]
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	6959      	ldr	r1, [r3, #20]
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	891a      	ldrh	r2, [r3, #8]
 80089c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	f004 ff38 	bl	800d838 <USB_WritePMA>
 80089c8:	e1ce      	b.n	8008d68 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	461a      	mov	r2, r3
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	00db      	lsls	r3, r3, #3
 80089dc:	4413      	add	r3, r2
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	6812      	ldr	r2, [r2, #0]
 80089e2:	4413      	add	r3, r2
 80089e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80089e8:	881b      	ldrh	r3, [r3, #0]
 80089ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	699a      	ldr	r2, [r3, #24]
 80089f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d307      	bcc.n	8008a0e <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	699a      	ldr	r2, [r3, #24]
 8008a02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008a06:	1ad2      	subs	r2, r2, r3
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	619a      	str	r2, [r3, #24]
 8008a0c:	e002      	b.n	8008a14 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	2200      	movs	r2, #0
 8008a12:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	699b      	ldr	r3, [r3, #24]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f040 80c4 	bne.w	8008ba6 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	785b      	ldrb	r3, [r3, #1]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d126      	bne.n	8008a74 <HAL_PCD_EP_DB_Transmit+0x44e>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	461a      	mov	r2, r3
 8008a38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a3a:	4413      	add	r3, r2
 8008a3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	00da      	lsls	r2, r3, #3
 8008a44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a46:	4413      	add	r3, r2
 8008a48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a4c:	667b      	str	r3, [r7, #100]	; 0x64
 8008a4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a50:	881b      	ldrh	r3, [r3, #0]
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a5c:	801a      	strh	r2, [r3, #0]
 8008a5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a60:	881b      	ldrh	r3, [r3, #0]
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a70:	801a      	strh	r2, [r3, #0]
 8008a72:	e01a      	b.n	8008aaa <HAL_PCD_EP_DB_Transmit+0x484>
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	785b      	ldrb	r3, [r3, #1]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d116      	bne.n	8008aaa <HAL_PCD_EP_DB_Transmit+0x484>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	673b      	str	r3, [r7, #112]	; 0x70
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a90:	4413      	add	r3, r2
 8008a92:	673b      	str	r3, [r7, #112]	; 0x70
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	00da      	lsls	r2, r3, #3
 8008a9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008aa2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	785b      	ldrb	r3, [r3, #1]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d12f      	bne.n	8008b18 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	461a      	mov	r2, r3
 8008acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	00da      	lsls	r2, r3, #3
 8008adc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008ae6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008aea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008aee:	881b      	ldrh	r3, [r3, #0]
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008afc:	801a      	strh	r2, [r3, #0]
 8008afe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b02:	881b      	ldrh	r3, [r3, #0]
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b14:	801a      	strh	r2, [r3, #0]
 8008b16:	e017      	b.n	8008b48 <HAL_PCD_EP_DB_Transmit+0x522>
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	785b      	ldrb	r3, [r3, #1]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d113      	bne.n	8008b48 <HAL_PCD_EP_DB_Transmit+0x522>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b2e:	4413      	add	r3, r2
 8008b30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	00da      	lsls	r2, r3, #3
 8008b38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b3a:	4413      	add	r3, r2
 8008b3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b40:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b44:	2200      	movs	r2, #0
 8008b46:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f006 fd91 	bl	800f676 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008b54:	88fb      	ldrh	r3, [r7, #6]
 8008b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f040 8104 	bne.w	8008d68 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	461a      	mov	r2, r3
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4413      	add	r3, r2
 8008b6e:	881b      	ldrh	r3, [r3, #0]
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b7a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	461a      	mov	r2, r3
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	441a      	add	r2, r3
 8008b8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	8013      	strh	r3, [r2, #0]
 8008ba4:	e0e0      	b.n	8008d68 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008ba6:	88fb      	ldrh	r3, [r7, #6]
 8008ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d121      	bne.n	8008bf4 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	4413      	add	r3, r2
 8008bbe:	881b      	ldrh	r3, [r3, #0]
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	441a      	add	r2, r3
 8008bdc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008be8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	f040 80b4 	bne.w	8008d68 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	695a      	ldr	r2, [r3, #20]
 8008c04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008c08:	441a      	add	r2, r3
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	69da      	ldr	r2, [r3, #28]
 8008c12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008c16:	441a      	add	r2, r3
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	6a1a      	ldr	r2, [r3, #32]
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d309      	bcc.n	8008c3c <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	6a1a      	ldr	r2, [r3, #32]
 8008c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c34:	1ad2      	subs	r2, r2, r3
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	621a      	str	r2, [r3, #32]
 8008c3a:	e015      	b.n	8008c68 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	6a1b      	ldr	r3, [r3, #32]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d107      	bne.n	8008c54 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8008c44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008c48:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008c52:	e009      	b.n	8008c68 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	6a1b      	ldr	r3, [r3, #32]
 8008c58:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	663b      	str	r3, [r7, #96]	; 0x60
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	785b      	ldrb	r3, [r3, #1]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d155      	bne.n	8008d22 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	461a      	mov	r2, r3
 8008c88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c8a:	4413      	add	r3, r2
 8008c8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	00da      	lsls	r2, r3, #3
 8008c94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c96:	4413      	add	r3, r2
 8008c98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c9c:	657b      	str	r3, [r7, #84]	; 0x54
 8008c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ca0:	2b3e      	cmp	r3, #62	; 0x3e
 8008ca2:	d916      	bls.n	8008cd2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8008ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ca6:	095b      	lsrs	r3, r3, #5
 8008ca8:	677b      	str	r3, [r7, #116]	; 0x74
 8008caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cac:	f003 031f 	and.w	r3, r3, #31
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d102      	bne.n	8008cba <HAL_PCD_EP_DB_Transmit+0x694>
 8008cb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	677b      	str	r3, [r7, #116]	; 0x74
 8008cba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	029b      	lsls	r3, r3, #10
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cce:	801a      	strh	r2, [r3, #0]
 8008cd0:	e040      	b.n	8008d54 <HAL_PCD_EP_DB_Transmit+0x72e>
 8008cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d112      	bne.n	8008cfe <HAL_PCD_EP_DB_Transmit+0x6d8>
 8008cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cda:	881b      	ldrh	r3, [r3, #0]
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ce6:	801a      	strh	r2, [r3, #0]
 8008ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cea:	881b      	ldrh	r3, [r3, #0]
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cfa:	801a      	strh	r2, [r3, #0]
 8008cfc:	e02a      	b.n	8008d54 <HAL_PCD_EP_DB_Transmit+0x72e>
 8008cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d00:	085b      	lsrs	r3, r3, #1
 8008d02:	677b      	str	r3, [r7, #116]	; 0x74
 8008d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d06:	f003 0301 	and.w	r3, r3, #1
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d002      	beq.n	8008d14 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8008d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d10:	3301      	adds	r3, #1
 8008d12:	677b      	str	r3, [r7, #116]	; 0x74
 8008d14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	029b      	lsls	r3, r3, #10
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d1e:	801a      	strh	r2, [r3, #0]
 8008d20:	e018      	b.n	8008d54 <HAL_PCD_EP_DB_Transmit+0x72e>
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	785b      	ldrb	r3, [r3, #1]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d114      	bne.n	8008d54 <HAL_PCD_EP_DB_Transmit+0x72e>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	461a      	mov	r2, r3
 8008d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d38:	4413      	add	r3, r2
 8008d3a:	663b      	str	r3, [r7, #96]	; 0x60
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	00da      	lsls	r2, r3, #3
 8008d42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d44:	4413      	add	r3, r2
 8008d46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d52:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6818      	ldr	r0, [r3, #0]
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	6959      	ldr	r1, [r3, #20]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	895a      	ldrh	r2, [r3, #10]
 8008d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	f004 fd68 	bl	800d838 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	4413      	add	r3, r2
 8008d76:	881b      	ldrh	r3, [r3, #0]
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d82:	823b      	strh	r3, [r7, #16]
 8008d84:	8a3b      	ldrh	r3, [r7, #16]
 8008d86:	f083 0310 	eor.w	r3, r3, #16
 8008d8a:	823b      	strh	r3, [r7, #16]
 8008d8c:	8a3b      	ldrh	r3, [r7, #16]
 8008d8e:	f083 0320 	eor.w	r3, r3, #32
 8008d92:	823b      	strh	r3, [r7, #16]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	441a      	add	r2, r3
 8008da2:	8a3b      	ldrh	r3, [r7, #16]
 8008da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3788      	adds	r7, #136	; 0x88
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008dc2:	b480      	push	{r7}
 8008dc4:	b087      	sub	sp, #28
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	60f8      	str	r0, [r7, #12]
 8008dca:	607b      	str	r3, [r7, #4]
 8008dcc:	460b      	mov	r3, r1
 8008dce:	817b      	strh	r3, [r7, #10]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008dd4:	897b      	ldrh	r3, [r7, #10]
 8008dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00c      	beq.n	8008dfa <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008de0:	897b      	ldrh	r3, [r7, #10]
 8008de2:	f003 0307 	and.w	r3, r3, #7
 8008de6:	1c5a      	adds	r2, r3, #1
 8008de8:	4613      	mov	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	4413      	add	r3, r2
 8008dee:	00db      	lsls	r3, r3, #3
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	4413      	add	r3, r2
 8008df4:	3304      	adds	r3, #4
 8008df6:	617b      	str	r3, [r7, #20]
 8008df8:	e00a      	b.n	8008e10 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008dfa:	897a      	ldrh	r2, [r7, #10]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4413      	add	r3, r2
 8008e02:	00db      	lsls	r3, r3, #3
 8008e04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008e10:	893b      	ldrh	r3, [r7, #8]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d107      	bne.n	8008e26 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	b29a      	uxth	r2, r3
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	80da      	strh	r2, [r3, #6]
 8008e24:	e00b      	b.n	8008e3e <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	0c1b      	lsrs	r3, r3, #16
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	371c      	adds	r7, #28
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	f043 0301 	orr.w	r3, r3, #1
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	f043 0302 	orr.w	r3, r3, #2
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8008e92:	2300      	movs	r3, #0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3714      	adds	r7, #20
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008ebc:	4b04      	ldr	r3, [pc, #16]	; (8008ed0 <HAL_PWREx_GetVoltageRange+0x18>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	40007000 	.word	0x40007000

08008ed4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ee2:	d130      	bne.n	8008f46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008ee4:	4b23      	ldr	r3, [pc, #140]	; (8008f74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ef0:	d038      	beq.n	8008f64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008ef2:	4b20      	ldr	r3, [pc, #128]	; (8008f74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008efa:	4a1e      	ldr	r2, [pc, #120]	; (8008f74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008efc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008f02:	4b1d      	ldr	r3, [pc, #116]	; (8008f78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2232      	movs	r2, #50	; 0x32
 8008f08:	fb02 f303 	mul.w	r3, r2, r3
 8008f0c:	4a1b      	ldr	r2, [pc, #108]	; (8008f7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f12:	0c9b      	lsrs	r3, r3, #18
 8008f14:	3301      	adds	r3, #1
 8008f16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f18:	e002      	b.n	8008f20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f20:	4b14      	ldr	r3, [pc, #80]	; (8008f74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008f22:	695b      	ldr	r3, [r3, #20]
 8008f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f2c:	d102      	bne.n	8008f34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1f2      	bne.n	8008f1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008f34:	4b0f      	ldr	r3, [pc, #60]	; (8008f74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008f36:	695b      	ldr	r3, [r3, #20]
 8008f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f40:	d110      	bne.n	8008f64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	e00f      	b.n	8008f66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008f46:	4b0b      	ldr	r3, [pc, #44]	; (8008f74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f52:	d007      	beq.n	8008f64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008f54:	4b07      	ldr	r3, [pc, #28]	; (8008f74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008f5c:	4a05      	ldr	r2, [pc, #20]	; (8008f74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008f5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008f62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	40007000 	.word	0x40007000
 8008f78:	20000000 	.word	0x20000000
 8008f7c:	431bde83 	.word	0x431bde83

08008f80 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8008f80:	b480      	push	{r7}
 8008f82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8008f84:	4b05      	ldr	r3, [pc, #20]	; (8008f9c <HAL_PWREx_EnableVddUSB+0x1c>)
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	4a04      	ldr	r2, [pc, #16]	; (8008f9c <HAL_PWREx_EnableVddUSB+0x1c>)
 8008f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008f8e:	6053      	str	r3, [r2, #4]
}
 8008f90:	bf00      	nop
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	40007000 	.word	0x40007000

08008fa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b088      	sub	sp, #32
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d102      	bne.n	8008fb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	f000 bc02 	b.w	80097b8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fb4:	4b96      	ldr	r3, [pc, #600]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f003 030c 	and.w	r3, r3, #12
 8008fbc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008fbe:	4b94      	ldr	r3, [pc, #592]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	f003 0303 	and.w	r3, r3, #3
 8008fc6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 0310 	and.w	r3, r3, #16
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 80e4 	beq.w	800919e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d007      	beq.n	8008fec <HAL_RCC_OscConfig+0x4c>
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	2b0c      	cmp	r3, #12
 8008fe0:	f040 808b 	bne.w	80090fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	f040 8087 	bne.w	80090fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008fec:	4b88      	ldr	r3, [pc, #544]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 0302 	and.w	r3, r3, #2
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d005      	beq.n	8009004 <HAL_RCC_OscConfig+0x64>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d101      	bne.n	8009004 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	e3d9      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a1a      	ldr	r2, [r3, #32]
 8009008:	4b81      	ldr	r3, [pc, #516]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 0308 	and.w	r3, r3, #8
 8009010:	2b00      	cmp	r3, #0
 8009012:	d004      	beq.n	800901e <HAL_RCC_OscConfig+0x7e>
 8009014:	4b7e      	ldr	r3, [pc, #504]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800901c:	e005      	b.n	800902a <HAL_RCC_OscConfig+0x8a>
 800901e:	4b7c      	ldr	r3, [pc, #496]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 8009020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009024:	091b      	lsrs	r3, r3, #4
 8009026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800902a:	4293      	cmp	r3, r2
 800902c:	d223      	bcs.n	8009076 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	4618      	mov	r0, r3
 8009034:	f000 fd60 	bl	8009af8 <RCC_SetFlashLatencyFromMSIRange>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d001      	beq.n	8009042 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	e3ba      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009042:	4b73      	ldr	r3, [pc, #460]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a72      	ldr	r2, [pc, #456]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 8009048:	f043 0308 	orr.w	r3, r3, #8
 800904c:	6013      	str	r3, [r2, #0]
 800904e:	4b70      	ldr	r3, [pc, #448]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a1b      	ldr	r3, [r3, #32]
 800905a:	496d      	ldr	r1, [pc, #436]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 800905c:	4313      	orrs	r3, r2
 800905e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009060:	4b6b      	ldr	r3, [pc, #428]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	69db      	ldr	r3, [r3, #28]
 800906c:	021b      	lsls	r3, r3, #8
 800906e:	4968      	ldr	r1, [pc, #416]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 8009070:	4313      	orrs	r3, r2
 8009072:	604b      	str	r3, [r1, #4]
 8009074:	e025      	b.n	80090c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009076:	4b66      	ldr	r3, [pc, #408]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a65      	ldr	r2, [pc, #404]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 800907c:	f043 0308 	orr.w	r3, r3, #8
 8009080:	6013      	str	r3, [r2, #0]
 8009082:	4b63      	ldr	r3, [pc, #396]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a1b      	ldr	r3, [r3, #32]
 800908e:	4960      	ldr	r1, [pc, #384]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 8009090:	4313      	orrs	r3, r2
 8009092:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009094:	4b5e      	ldr	r3, [pc, #376]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	69db      	ldr	r3, [r3, #28]
 80090a0:	021b      	lsls	r3, r3, #8
 80090a2:	495b      	ldr	r1, [pc, #364]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 80090a4:	4313      	orrs	r3, r2
 80090a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d109      	bne.n	80090c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a1b      	ldr	r3, [r3, #32]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 fd20 	bl	8009af8 <RCC_SetFlashLatencyFromMSIRange>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d001      	beq.n	80090c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	e37a      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80090c2:	f000 fc81 	bl	80099c8 <HAL_RCC_GetSysClockFreq>
 80090c6:	4602      	mov	r2, r0
 80090c8:	4b51      	ldr	r3, [pc, #324]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	091b      	lsrs	r3, r3, #4
 80090ce:	f003 030f 	and.w	r3, r3, #15
 80090d2:	4950      	ldr	r1, [pc, #320]	; (8009214 <HAL_RCC_OscConfig+0x274>)
 80090d4:	5ccb      	ldrb	r3, [r1, r3]
 80090d6:	f003 031f 	and.w	r3, r3, #31
 80090da:	fa22 f303 	lsr.w	r3, r2, r3
 80090de:	4a4e      	ldr	r2, [pc, #312]	; (8009218 <HAL_RCC_OscConfig+0x278>)
 80090e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80090e2:	4b4e      	ldr	r3, [pc, #312]	; (800921c <HAL_RCC_OscConfig+0x27c>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fc f93e 	bl	8005368 <HAL_InitTick>
 80090ec:	4603      	mov	r3, r0
 80090ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80090f0:	7bfb      	ldrb	r3, [r7, #15]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d052      	beq.n	800919c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
 80090f8:	e35e      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d032      	beq.n	8009168 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009102:	4b43      	ldr	r3, [pc, #268]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a42      	ldr	r2, [pc, #264]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 8009108:	f043 0301 	orr.w	r3, r3, #1
 800910c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800910e:	f7fc f97b 	bl	8005408 <HAL_GetTick>
 8009112:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009114:	e008      	b.n	8009128 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009116:	f7fc f977 	bl	8005408 <HAL_GetTick>
 800911a:	4602      	mov	r2, r0
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	2b02      	cmp	r3, #2
 8009122:	d901      	bls.n	8009128 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8009124:	2303      	movs	r3, #3
 8009126:	e347      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009128:	4b39      	ldr	r3, [pc, #228]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 0302 	and.w	r3, r3, #2
 8009130:	2b00      	cmp	r3, #0
 8009132:	d0f0      	beq.n	8009116 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009134:	4b36      	ldr	r3, [pc, #216]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a35      	ldr	r2, [pc, #212]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 800913a:	f043 0308 	orr.w	r3, r3, #8
 800913e:	6013      	str	r3, [r2, #0]
 8009140:	4b33      	ldr	r3, [pc, #204]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a1b      	ldr	r3, [r3, #32]
 800914c:	4930      	ldr	r1, [pc, #192]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 800914e:	4313      	orrs	r3, r2
 8009150:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009152:	4b2f      	ldr	r3, [pc, #188]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	69db      	ldr	r3, [r3, #28]
 800915e:	021b      	lsls	r3, r3, #8
 8009160:	492b      	ldr	r1, [pc, #172]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 8009162:	4313      	orrs	r3, r2
 8009164:	604b      	str	r3, [r1, #4]
 8009166:	e01a      	b.n	800919e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009168:	4b29      	ldr	r3, [pc, #164]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a28      	ldr	r2, [pc, #160]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 800916e:	f023 0301 	bic.w	r3, r3, #1
 8009172:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009174:	f7fc f948 	bl	8005408 <HAL_GetTick>
 8009178:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800917a:	e008      	b.n	800918e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800917c:	f7fc f944 	bl	8005408 <HAL_GetTick>
 8009180:	4602      	mov	r2, r0
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	2b02      	cmp	r3, #2
 8009188:	d901      	bls.n	800918e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800918a:	2303      	movs	r3, #3
 800918c:	e314      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800918e:	4b20      	ldr	r3, [pc, #128]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 0302 	and.w	r3, r3, #2
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1f0      	bne.n	800917c <HAL_RCC_OscConfig+0x1dc>
 800919a:	e000      	b.n	800919e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800919c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f003 0301 	and.w	r3, r3, #1
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d073      	beq.n	8009292 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	2b08      	cmp	r3, #8
 80091ae:	d005      	beq.n	80091bc <HAL_RCC_OscConfig+0x21c>
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	2b0c      	cmp	r3, #12
 80091b4:	d10e      	bne.n	80091d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	2b03      	cmp	r3, #3
 80091ba:	d10b      	bne.n	80091d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091bc:	4b14      	ldr	r3, [pc, #80]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d063      	beq.n	8009290 <HAL_RCC_OscConfig+0x2f0>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d15f      	bne.n	8009290 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e2f1      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091dc:	d106      	bne.n	80091ec <HAL_RCC_OscConfig+0x24c>
 80091de:	4b0c      	ldr	r3, [pc, #48]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a0b      	ldr	r2, [pc, #44]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 80091e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091e8:	6013      	str	r3, [r2, #0]
 80091ea:	e025      	b.n	8009238 <HAL_RCC_OscConfig+0x298>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091f4:	d114      	bne.n	8009220 <HAL_RCC_OscConfig+0x280>
 80091f6:	4b06      	ldr	r3, [pc, #24]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a05      	ldr	r2, [pc, #20]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 80091fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009200:	6013      	str	r3, [r2, #0]
 8009202:	4b03      	ldr	r3, [pc, #12]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a02      	ldr	r2, [pc, #8]	; (8009210 <HAL_RCC_OscConfig+0x270>)
 8009208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800920c:	6013      	str	r3, [r2, #0]
 800920e:	e013      	b.n	8009238 <HAL_RCC_OscConfig+0x298>
 8009210:	40021000 	.word	0x40021000
 8009214:	0800fff8 	.word	0x0800fff8
 8009218:	20000000 	.word	0x20000000
 800921c:	20000004 	.word	0x20000004
 8009220:	4ba0      	ldr	r3, [pc, #640]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a9f      	ldr	r2, [pc, #636]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 8009226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800922a:	6013      	str	r3, [r2, #0]
 800922c:	4b9d      	ldr	r3, [pc, #628]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a9c      	ldr	r2, [pc, #624]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 8009232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d013      	beq.n	8009268 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009240:	f7fc f8e2 	bl	8005408 <HAL_GetTick>
 8009244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009246:	e008      	b.n	800925a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009248:	f7fc f8de 	bl	8005408 <HAL_GetTick>
 800924c:	4602      	mov	r2, r0
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	2b64      	cmp	r3, #100	; 0x64
 8009254:	d901      	bls.n	800925a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8009256:	2303      	movs	r3, #3
 8009258:	e2ae      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800925a:	4b92      	ldr	r3, [pc, #584]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009262:	2b00      	cmp	r3, #0
 8009264:	d0f0      	beq.n	8009248 <HAL_RCC_OscConfig+0x2a8>
 8009266:	e014      	b.n	8009292 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009268:	f7fc f8ce 	bl	8005408 <HAL_GetTick>
 800926c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800926e:	e008      	b.n	8009282 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009270:	f7fc f8ca 	bl	8005408 <HAL_GetTick>
 8009274:	4602      	mov	r2, r0
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	1ad3      	subs	r3, r2, r3
 800927a:	2b64      	cmp	r3, #100	; 0x64
 800927c:	d901      	bls.n	8009282 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800927e:	2303      	movs	r3, #3
 8009280:	e29a      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009282:	4b88      	ldr	r3, [pc, #544]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1f0      	bne.n	8009270 <HAL_RCC_OscConfig+0x2d0>
 800928e:	e000      	b.n	8009292 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 0302 	and.w	r3, r3, #2
 800929a:	2b00      	cmp	r3, #0
 800929c:	d060      	beq.n	8009360 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	2b04      	cmp	r3, #4
 80092a2:	d005      	beq.n	80092b0 <HAL_RCC_OscConfig+0x310>
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	2b0c      	cmp	r3, #12
 80092a8:	d119      	bne.n	80092de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d116      	bne.n	80092de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80092b0:	4b7c      	ldr	r3, [pc, #496]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d005      	beq.n	80092c8 <HAL_RCC_OscConfig+0x328>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d101      	bne.n	80092c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	e277      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092c8:	4b76      	ldr	r3, [pc, #472]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	061b      	lsls	r3, r3, #24
 80092d6:	4973      	ldr	r1, [pc, #460]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 80092d8:	4313      	orrs	r3, r2
 80092da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80092dc:	e040      	b.n	8009360 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d023      	beq.n	800932e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80092e6:	4b6f      	ldr	r3, [pc, #444]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a6e      	ldr	r2, [pc, #440]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 80092ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092f2:	f7fc f889 	bl	8005408 <HAL_GetTick>
 80092f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80092f8:	e008      	b.n	800930c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80092fa:	f7fc f885 	bl	8005408 <HAL_GetTick>
 80092fe:	4602      	mov	r2, r0
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	2b02      	cmp	r3, #2
 8009306:	d901      	bls.n	800930c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009308:	2303      	movs	r3, #3
 800930a:	e255      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800930c:	4b65      	ldr	r3, [pc, #404]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009314:	2b00      	cmp	r3, #0
 8009316:	d0f0      	beq.n	80092fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009318:	4b62      	ldr	r3, [pc, #392]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	061b      	lsls	r3, r3, #24
 8009326:	495f      	ldr	r1, [pc, #380]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 8009328:	4313      	orrs	r3, r2
 800932a:	604b      	str	r3, [r1, #4]
 800932c:	e018      	b.n	8009360 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800932e:	4b5d      	ldr	r3, [pc, #372]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a5c      	ldr	r2, [pc, #368]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 8009334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800933a:	f7fc f865 	bl	8005408 <HAL_GetTick>
 800933e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009340:	e008      	b.n	8009354 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009342:	f7fc f861 	bl	8005408 <HAL_GetTick>
 8009346:	4602      	mov	r2, r0
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	1ad3      	subs	r3, r2, r3
 800934c:	2b02      	cmp	r3, #2
 800934e:	d901      	bls.n	8009354 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009350:	2303      	movs	r3, #3
 8009352:	e231      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009354:	4b53      	ldr	r3, [pc, #332]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1f0      	bne.n	8009342 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 0308 	and.w	r3, r3, #8
 8009368:	2b00      	cmp	r3, #0
 800936a:	d03c      	beq.n	80093e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	695b      	ldr	r3, [r3, #20]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d01c      	beq.n	80093ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009374:	4b4b      	ldr	r3, [pc, #300]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 8009376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800937a:	4a4a      	ldr	r2, [pc, #296]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 800937c:	f043 0301 	orr.w	r3, r3, #1
 8009380:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009384:	f7fc f840 	bl	8005408 <HAL_GetTick>
 8009388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800938a:	e008      	b.n	800939e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800938c:	f7fc f83c 	bl	8005408 <HAL_GetTick>
 8009390:	4602      	mov	r2, r0
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	2b02      	cmp	r3, #2
 8009398:	d901      	bls.n	800939e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800939a:	2303      	movs	r3, #3
 800939c:	e20c      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800939e:	4b41      	ldr	r3, [pc, #260]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 80093a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093a4:	f003 0302 	and.w	r3, r3, #2
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d0ef      	beq.n	800938c <HAL_RCC_OscConfig+0x3ec>
 80093ac:	e01b      	b.n	80093e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80093ae:	4b3d      	ldr	r3, [pc, #244]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 80093b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093b4:	4a3b      	ldr	r2, [pc, #236]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 80093b6:	f023 0301 	bic.w	r3, r3, #1
 80093ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093be:	f7fc f823 	bl	8005408 <HAL_GetTick>
 80093c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80093c4:	e008      	b.n	80093d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80093c6:	f7fc f81f 	bl	8005408 <HAL_GetTick>
 80093ca:	4602      	mov	r2, r0
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	1ad3      	subs	r3, r2, r3
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	d901      	bls.n	80093d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80093d4:	2303      	movs	r3, #3
 80093d6:	e1ef      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80093d8:	4b32      	ldr	r3, [pc, #200]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 80093da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093de:	f003 0302 	and.w	r3, r3, #2
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1ef      	bne.n	80093c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 0304 	and.w	r3, r3, #4
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f000 80a6 	beq.w	8009540 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093f4:	2300      	movs	r3, #0
 80093f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80093f8:	4b2a      	ldr	r3, [pc, #168]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 80093fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009400:	2b00      	cmp	r3, #0
 8009402:	d10d      	bne.n	8009420 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009404:	4b27      	ldr	r3, [pc, #156]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 8009406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009408:	4a26      	ldr	r2, [pc, #152]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 800940a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800940e:	6593      	str	r3, [r2, #88]	; 0x58
 8009410:	4b24      	ldr	r3, [pc, #144]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 8009412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009418:	60bb      	str	r3, [r7, #8]
 800941a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800941c:	2301      	movs	r3, #1
 800941e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009420:	4b21      	ldr	r3, [pc, #132]	; (80094a8 <HAL_RCC_OscConfig+0x508>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009428:	2b00      	cmp	r3, #0
 800942a:	d118      	bne.n	800945e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800942c:	4b1e      	ldr	r3, [pc, #120]	; (80094a8 <HAL_RCC_OscConfig+0x508>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a1d      	ldr	r2, [pc, #116]	; (80094a8 <HAL_RCC_OscConfig+0x508>)
 8009432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009436:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009438:	f7fb ffe6 	bl	8005408 <HAL_GetTick>
 800943c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800943e:	e008      	b.n	8009452 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009440:	f7fb ffe2 	bl	8005408 <HAL_GetTick>
 8009444:	4602      	mov	r2, r0
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	2b02      	cmp	r3, #2
 800944c:	d901      	bls.n	8009452 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800944e:	2303      	movs	r3, #3
 8009450:	e1b2      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009452:	4b15      	ldr	r3, [pc, #84]	; (80094a8 <HAL_RCC_OscConfig+0x508>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800945a:	2b00      	cmp	r3, #0
 800945c:	d0f0      	beq.n	8009440 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	2b01      	cmp	r3, #1
 8009464:	d108      	bne.n	8009478 <HAL_RCC_OscConfig+0x4d8>
 8009466:	4b0f      	ldr	r3, [pc, #60]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 8009468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800946c:	4a0d      	ldr	r2, [pc, #52]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 800946e:	f043 0301 	orr.w	r3, r3, #1
 8009472:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009476:	e029      	b.n	80094cc <HAL_RCC_OscConfig+0x52c>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	2b05      	cmp	r3, #5
 800947e:	d115      	bne.n	80094ac <HAL_RCC_OscConfig+0x50c>
 8009480:	4b08      	ldr	r3, [pc, #32]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 8009482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009486:	4a07      	ldr	r2, [pc, #28]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 8009488:	f043 0304 	orr.w	r3, r3, #4
 800948c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009490:	4b04      	ldr	r3, [pc, #16]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 8009492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009496:	4a03      	ldr	r2, [pc, #12]	; (80094a4 <HAL_RCC_OscConfig+0x504>)
 8009498:	f043 0301 	orr.w	r3, r3, #1
 800949c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80094a0:	e014      	b.n	80094cc <HAL_RCC_OscConfig+0x52c>
 80094a2:	bf00      	nop
 80094a4:	40021000 	.word	0x40021000
 80094a8:	40007000 	.word	0x40007000
 80094ac:	4b9a      	ldr	r3, [pc, #616]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 80094ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094b2:	4a99      	ldr	r2, [pc, #612]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 80094b4:	f023 0301 	bic.w	r3, r3, #1
 80094b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80094bc:	4b96      	ldr	r3, [pc, #600]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 80094be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094c2:	4a95      	ldr	r2, [pc, #596]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 80094c4:	f023 0304 	bic.w	r3, r3, #4
 80094c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d016      	beq.n	8009502 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094d4:	f7fb ff98 	bl	8005408 <HAL_GetTick>
 80094d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80094da:	e00a      	b.n	80094f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094dc:	f7fb ff94 	bl	8005408 <HAL_GetTick>
 80094e0:	4602      	mov	r2, r0
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d901      	bls.n	80094f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e162      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80094f2:	4b89      	ldr	r3, [pc, #548]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 80094f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094f8:	f003 0302 	and.w	r3, r3, #2
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d0ed      	beq.n	80094dc <HAL_RCC_OscConfig+0x53c>
 8009500:	e015      	b.n	800952e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009502:	f7fb ff81 	bl	8005408 <HAL_GetTick>
 8009506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009508:	e00a      	b.n	8009520 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800950a:	f7fb ff7d 	bl	8005408 <HAL_GetTick>
 800950e:	4602      	mov	r2, r0
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	1ad3      	subs	r3, r2, r3
 8009514:	f241 3288 	movw	r2, #5000	; 0x1388
 8009518:	4293      	cmp	r3, r2
 800951a:	d901      	bls.n	8009520 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800951c:	2303      	movs	r3, #3
 800951e:	e14b      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009520:	4b7d      	ldr	r3, [pc, #500]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 8009522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009526:	f003 0302 	and.w	r3, r3, #2
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1ed      	bne.n	800950a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800952e:	7ffb      	ldrb	r3, [r7, #31]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d105      	bne.n	8009540 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009534:	4b78      	ldr	r3, [pc, #480]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 8009536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009538:	4a77      	ldr	r2, [pc, #476]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 800953a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800953e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 0320 	and.w	r3, r3, #32
 8009548:	2b00      	cmp	r3, #0
 800954a:	d03c      	beq.n	80095c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009550:	2b00      	cmp	r3, #0
 8009552:	d01c      	beq.n	800958e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009554:	4b70      	ldr	r3, [pc, #448]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 8009556:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800955a:	4a6f      	ldr	r2, [pc, #444]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 800955c:	f043 0301 	orr.w	r3, r3, #1
 8009560:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009564:	f7fb ff50 	bl	8005408 <HAL_GetTick>
 8009568:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800956a:	e008      	b.n	800957e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800956c:	f7fb ff4c 	bl	8005408 <HAL_GetTick>
 8009570:	4602      	mov	r2, r0
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	2b02      	cmp	r3, #2
 8009578:	d901      	bls.n	800957e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800957a:	2303      	movs	r3, #3
 800957c:	e11c      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800957e:	4b66      	ldr	r3, [pc, #408]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 8009580:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009584:	f003 0302 	and.w	r3, r3, #2
 8009588:	2b00      	cmp	r3, #0
 800958a:	d0ef      	beq.n	800956c <HAL_RCC_OscConfig+0x5cc>
 800958c:	e01b      	b.n	80095c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800958e:	4b62      	ldr	r3, [pc, #392]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 8009590:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009594:	4a60      	ldr	r2, [pc, #384]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 8009596:	f023 0301 	bic.w	r3, r3, #1
 800959a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800959e:	f7fb ff33 	bl	8005408 <HAL_GetTick>
 80095a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80095a4:	e008      	b.n	80095b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80095a6:	f7fb ff2f 	bl	8005408 <HAL_GetTick>
 80095aa:	4602      	mov	r2, r0
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d901      	bls.n	80095b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80095b4:	2303      	movs	r3, #3
 80095b6:	e0ff      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80095b8:	4b57      	ldr	r3, [pc, #348]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 80095ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80095be:	f003 0302 	and.w	r3, r3, #2
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d1ef      	bne.n	80095a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 80f3 	beq.w	80097b6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	f040 80c9 	bne.w	800976c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80095da:	4b4f      	ldr	r3, [pc, #316]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	f003 0203 	and.w	r2, r3, #3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d12c      	bne.n	8009648 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f8:	3b01      	subs	r3, #1
 80095fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d123      	bne.n	8009648 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800960a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800960c:	429a      	cmp	r2, r3
 800960e:	d11b      	bne.n	8009648 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800961c:	429a      	cmp	r2, r3
 800961e:	d113      	bne.n	8009648 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800962a:	085b      	lsrs	r3, r3, #1
 800962c:	3b01      	subs	r3, #1
 800962e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009630:	429a      	cmp	r2, r3
 8009632:	d109      	bne.n	8009648 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963e:	085b      	lsrs	r3, r3, #1
 8009640:	3b01      	subs	r3, #1
 8009642:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009644:	429a      	cmp	r2, r3
 8009646:	d06b      	beq.n	8009720 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	2b0c      	cmp	r3, #12
 800964c:	d062      	beq.n	8009714 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800964e:	4b32      	ldr	r3, [pc, #200]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e0ac      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800965e:	4b2e      	ldr	r3, [pc, #184]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a2d      	ldr	r2, [pc, #180]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 8009664:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009668:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800966a:	f7fb fecd 	bl	8005408 <HAL_GetTick>
 800966e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009670:	e008      	b.n	8009684 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009672:	f7fb fec9 	bl	8005408 <HAL_GetTick>
 8009676:	4602      	mov	r2, r0
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	2b02      	cmp	r3, #2
 800967e:	d901      	bls.n	8009684 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8009680:	2303      	movs	r3, #3
 8009682:	e099      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009684:	4b24      	ldr	r3, [pc, #144]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800968c:	2b00      	cmp	r3, #0
 800968e:	d1f0      	bne.n	8009672 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009690:	4b21      	ldr	r3, [pc, #132]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 8009692:	68da      	ldr	r2, [r3, #12]
 8009694:	4b21      	ldr	r3, [pc, #132]	; (800971c <HAL_RCC_OscConfig+0x77c>)
 8009696:	4013      	ands	r3, r2
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80096a0:	3a01      	subs	r2, #1
 80096a2:	0112      	lsls	r2, r2, #4
 80096a4:	4311      	orrs	r1, r2
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80096aa:	0212      	lsls	r2, r2, #8
 80096ac:	4311      	orrs	r1, r2
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80096b2:	0852      	lsrs	r2, r2, #1
 80096b4:	3a01      	subs	r2, #1
 80096b6:	0552      	lsls	r2, r2, #21
 80096b8:	4311      	orrs	r1, r2
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80096be:	0852      	lsrs	r2, r2, #1
 80096c0:	3a01      	subs	r2, #1
 80096c2:	0652      	lsls	r2, r2, #25
 80096c4:	4311      	orrs	r1, r2
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80096ca:	06d2      	lsls	r2, r2, #27
 80096cc:	430a      	orrs	r2, r1
 80096ce:	4912      	ldr	r1, [pc, #72]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 80096d0:	4313      	orrs	r3, r2
 80096d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80096d4:	4b10      	ldr	r3, [pc, #64]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a0f      	ldr	r2, [pc, #60]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 80096da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80096e0:	4b0d      	ldr	r3, [pc, #52]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	4a0c      	ldr	r2, [pc, #48]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 80096e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80096ec:	f7fb fe8c 	bl	8005408 <HAL_GetTick>
 80096f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096f2:	e008      	b.n	8009706 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096f4:	f7fb fe88 	bl	8005408 <HAL_GetTick>
 80096f8:	4602      	mov	r2, r0
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	1ad3      	subs	r3, r2, r3
 80096fe:	2b02      	cmp	r3, #2
 8009700:	d901      	bls.n	8009706 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8009702:	2303      	movs	r3, #3
 8009704:	e058      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009706:	4b04      	ldr	r3, [pc, #16]	; (8009718 <HAL_RCC_OscConfig+0x778>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800970e:	2b00      	cmp	r3, #0
 8009710:	d0f0      	beq.n	80096f4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009712:	e050      	b.n	80097b6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	e04f      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
 8009718:	40021000 	.word	0x40021000
 800971c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009720:	4b27      	ldr	r3, [pc, #156]	; (80097c0 <HAL_RCC_OscConfig+0x820>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009728:	2b00      	cmp	r3, #0
 800972a:	d144      	bne.n	80097b6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800972c:	4b24      	ldr	r3, [pc, #144]	; (80097c0 <HAL_RCC_OscConfig+0x820>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a23      	ldr	r2, [pc, #140]	; (80097c0 <HAL_RCC_OscConfig+0x820>)
 8009732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009736:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009738:	4b21      	ldr	r3, [pc, #132]	; (80097c0 <HAL_RCC_OscConfig+0x820>)
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	4a20      	ldr	r2, [pc, #128]	; (80097c0 <HAL_RCC_OscConfig+0x820>)
 800973e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009742:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009744:	f7fb fe60 	bl	8005408 <HAL_GetTick>
 8009748:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800974a:	e008      	b.n	800975e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800974c:	f7fb fe5c 	bl	8005408 <HAL_GetTick>
 8009750:	4602      	mov	r2, r0
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	1ad3      	subs	r3, r2, r3
 8009756:	2b02      	cmp	r3, #2
 8009758:	d901      	bls.n	800975e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800975a:	2303      	movs	r3, #3
 800975c:	e02c      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800975e:	4b18      	ldr	r3, [pc, #96]	; (80097c0 <HAL_RCC_OscConfig+0x820>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009766:	2b00      	cmp	r3, #0
 8009768:	d0f0      	beq.n	800974c <HAL_RCC_OscConfig+0x7ac>
 800976a:	e024      	b.n	80097b6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	2b0c      	cmp	r3, #12
 8009770:	d01f      	beq.n	80097b2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009772:	4b13      	ldr	r3, [pc, #76]	; (80097c0 <HAL_RCC_OscConfig+0x820>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a12      	ldr	r2, [pc, #72]	; (80097c0 <HAL_RCC_OscConfig+0x820>)
 8009778:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800977c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800977e:	f7fb fe43 	bl	8005408 <HAL_GetTick>
 8009782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009784:	e008      	b.n	8009798 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009786:	f7fb fe3f 	bl	8005408 <HAL_GetTick>
 800978a:	4602      	mov	r2, r0
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	2b02      	cmp	r3, #2
 8009792:	d901      	bls.n	8009798 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8009794:	2303      	movs	r3, #3
 8009796:	e00f      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009798:	4b09      	ldr	r3, [pc, #36]	; (80097c0 <HAL_RCC_OscConfig+0x820>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1f0      	bne.n	8009786 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80097a4:	4b06      	ldr	r3, [pc, #24]	; (80097c0 <HAL_RCC_OscConfig+0x820>)
 80097a6:	68da      	ldr	r2, [r3, #12]
 80097a8:	4905      	ldr	r1, [pc, #20]	; (80097c0 <HAL_RCC_OscConfig+0x820>)
 80097aa:	4b06      	ldr	r3, [pc, #24]	; (80097c4 <HAL_RCC_OscConfig+0x824>)
 80097ac:	4013      	ands	r3, r2
 80097ae:	60cb      	str	r3, [r1, #12]
 80097b0:	e001      	b.n	80097b6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	e000      	b.n	80097b8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3720      	adds	r7, #32
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	40021000 	.word	0x40021000
 80097c4:	feeefffc 	.word	0xfeeefffc

080097c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d101      	bne.n	80097dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	e0e7      	b.n	80099ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80097dc:	4b75      	ldr	r3, [pc, #468]	; (80099b4 <HAL_RCC_ClockConfig+0x1ec>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f003 0307 	and.w	r3, r3, #7
 80097e4:	683a      	ldr	r2, [r7, #0]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d910      	bls.n	800980c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097ea:	4b72      	ldr	r3, [pc, #456]	; (80099b4 <HAL_RCC_ClockConfig+0x1ec>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f023 0207 	bic.w	r2, r3, #7
 80097f2:	4970      	ldr	r1, [pc, #448]	; (80099b4 <HAL_RCC_ClockConfig+0x1ec>)
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80097fa:	4b6e      	ldr	r3, [pc, #440]	; (80099b4 <HAL_RCC_ClockConfig+0x1ec>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f003 0307 	and.w	r3, r3, #7
 8009802:	683a      	ldr	r2, [r7, #0]
 8009804:	429a      	cmp	r2, r3
 8009806:	d001      	beq.n	800980c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e0cf      	b.n	80099ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 0302 	and.w	r3, r3, #2
 8009814:	2b00      	cmp	r3, #0
 8009816:	d010      	beq.n	800983a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	689a      	ldr	r2, [r3, #8]
 800981c:	4b66      	ldr	r3, [pc, #408]	; (80099b8 <HAL_RCC_ClockConfig+0x1f0>)
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009824:	429a      	cmp	r2, r3
 8009826:	d908      	bls.n	800983a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009828:	4b63      	ldr	r3, [pc, #396]	; (80099b8 <HAL_RCC_ClockConfig+0x1f0>)
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	4960      	ldr	r1, [pc, #384]	; (80099b8 <HAL_RCC_ClockConfig+0x1f0>)
 8009836:	4313      	orrs	r3, r2
 8009838:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 0301 	and.w	r3, r3, #1
 8009842:	2b00      	cmp	r3, #0
 8009844:	d04c      	beq.n	80098e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	2b03      	cmp	r3, #3
 800984c:	d107      	bne.n	800985e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800984e:	4b5a      	ldr	r3, [pc, #360]	; (80099b8 <HAL_RCC_ClockConfig+0x1f0>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009856:	2b00      	cmp	r3, #0
 8009858:	d121      	bne.n	800989e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e0a6      	b.n	80099ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	2b02      	cmp	r3, #2
 8009864:	d107      	bne.n	8009876 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009866:	4b54      	ldr	r3, [pc, #336]	; (80099b8 <HAL_RCC_ClockConfig+0x1f0>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800986e:	2b00      	cmp	r3, #0
 8009870:	d115      	bne.n	800989e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	e09a      	b.n	80099ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d107      	bne.n	800988e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800987e:	4b4e      	ldr	r3, [pc, #312]	; (80099b8 <HAL_RCC_ClockConfig+0x1f0>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 0302 	and.w	r3, r3, #2
 8009886:	2b00      	cmp	r3, #0
 8009888:	d109      	bne.n	800989e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e08e      	b.n	80099ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800988e:	4b4a      	ldr	r3, [pc, #296]	; (80099b8 <HAL_RCC_ClockConfig+0x1f0>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009896:	2b00      	cmp	r3, #0
 8009898:	d101      	bne.n	800989e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e086      	b.n	80099ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800989e:	4b46      	ldr	r3, [pc, #280]	; (80099b8 <HAL_RCC_ClockConfig+0x1f0>)
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	f023 0203 	bic.w	r2, r3, #3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	4943      	ldr	r1, [pc, #268]	; (80099b8 <HAL_RCC_ClockConfig+0x1f0>)
 80098ac:	4313      	orrs	r3, r2
 80098ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098b0:	f7fb fdaa 	bl	8005408 <HAL_GetTick>
 80098b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098b6:	e00a      	b.n	80098ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80098b8:	f7fb fda6 	bl	8005408 <HAL_GetTick>
 80098bc:	4602      	mov	r2, r0
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d901      	bls.n	80098ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80098ca:	2303      	movs	r3, #3
 80098cc:	e06e      	b.n	80099ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098ce:	4b3a      	ldr	r3, [pc, #232]	; (80099b8 <HAL_RCC_ClockConfig+0x1f0>)
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	f003 020c 	and.w	r2, r3, #12
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	429a      	cmp	r2, r3
 80098de:	d1eb      	bne.n	80098b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f003 0302 	and.w	r3, r3, #2
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d010      	beq.n	800990e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	689a      	ldr	r2, [r3, #8]
 80098f0:	4b31      	ldr	r3, [pc, #196]	; (80099b8 <HAL_RCC_ClockConfig+0x1f0>)
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d208      	bcs.n	800990e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80098fc:	4b2e      	ldr	r3, [pc, #184]	; (80099b8 <HAL_RCC_ClockConfig+0x1f0>)
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	492b      	ldr	r1, [pc, #172]	; (80099b8 <HAL_RCC_ClockConfig+0x1f0>)
 800990a:	4313      	orrs	r3, r2
 800990c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800990e:	4b29      	ldr	r3, [pc, #164]	; (80099b4 <HAL_RCC_ClockConfig+0x1ec>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f003 0307 	and.w	r3, r3, #7
 8009916:	683a      	ldr	r2, [r7, #0]
 8009918:	429a      	cmp	r2, r3
 800991a:	d210      	bcs.n	800993e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800991c:	4b25      	ldr	r3, [pc, #148]	; (80099b4 <HAL_RCC_ClockConfig+0x1ec>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f023 0207 	bic.w	r2, r3, #7
 8009924:	4923      	ldr	r1, [pc, #140]	; (80099b4 <HAL_RCC_ClockConfig+0x1ec>)
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	4313      	orrs	r3, r2
 800992a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800992c:	4b21      	ldr	r3, [pc, #132]	; (80099b4 <HAL_RCC_ClockConfig+0x1ec>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f003 0307 	and.w	r3, r3, #7
 8009934:	683a      	ldr	r2, [r7, #0]
 8009936:	429a      	cmp	r2, r3
 8009938:	d001      	beq.n	800993e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e036      	b.n	80099ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f003 0304 	and.w	r3, r3, #4
 8009946:	2b00      	cmp	r3, #0
 8009948:	d008      	beq.n	800995c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800994a:	4b1b      	ldr	r3, [pc, #108]	; (80099b8 <HAL_RCC_ClockConfig+0x1f0>)
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	4918      	ldr	r1, [pc, #96]	; (80099b8 <HAL_RCC_ClockConfig+0x1f0>)
 8009958:	4313      	orrs	r3, r2
 800995a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f003 0308 	and.w	r3, r3, #8
 8009964:	2b00      	cmp	r3, #0
 8009966:	d009      	beq.n	800997c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009968:	4b13      	ldr	r3, [pc, #76]	; (80099b8 <HAL_RCC_ClockConfig+0x1f0>)
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	691b      	ldr	r3, [r3, #16]
 8009974:	00db      	lsls	r3, r3, #3
 8009976:	4910      	ldr	r1, [pc, #64]	; (80099b8 <HAL_RCC_ClockConfig+0x1f0>)
 8009978:	4313      	orrs	r3, r2
 800997a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800997c:	f000 f824 	bl	80099c8 <HAL_RCC_GetSysClockFreq>
 8009980:	4602      	mov	r2, r0
 8009982:	4b0d      	ldr	r3, [pc, #52]	; (80099b8 <HAL_RCC_ClockConfig+0x1f0>)
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	091b      	lsrs	r3, r3, #4
 8009988:	f003 030f 	and.w	r3, r3, #15
 800998c:	490b      	ldr	r1, [pc, #44]	; (80099bc <HAL_RCC_ClockConfig+0x1f4>)
 800998e:	5ccb      	ldrb	r3, [r1, r3]
 8009990:	f003 031f 	and.w	r3, r3, #31
 8009994:	fa22 f303 	lsr.w	r3, r2, r3
 8009998:	4a09      	ldr	r2, [pc, #36]	; (80099c0 <HAL_RCC_ClockConfig+0x1f8>)
 800999a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800999c:	4b09      	ldr	r3, [pc, #36]	; (80099c4 <HAL_RCC_ClockConfig+0x1fc>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7fb fce1 	bl	8005368 <HAL_InitTick>
 80099a6:	4603      	mov	r3, r0
 80099a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80099aa:	7afb      	ldrb	r3, [r7, #11]
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	40022000 	.word	0x40022000
 80099b8:	40021000 	.word	0x40021000
 80099bc:	0800fff8 	.word	0x0800fff8
 80099c0:	20000000 	.word	0x20000000
 80099c4:	20000004 	.word	0x20000004

080099c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b089      	sub	sp, #36	; 0x24
 80099cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80099ce:	2300      	movs	r3, #0
 80099d0:	61fb      	str	r3, [r7, #28]
 80099d2:	2300      	movs	r3, #0
 80099d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099d6:	4b3e      	ldr	r3, [pc, #248]	; (8009ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	f003 030c 	and.w	r3, r3, #12
 80099de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80099e0:	4b3b      	ldr	r3, [pc, #236]	; (8009ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	f003 0303 	and.w	r3, r3, #3
 80099e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d005      	beq.n	80099fc <HAL_RCC_GetSysClockFreq+0x34>
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	2b0c      	cmp	r3, #12
 80099f4:	d121      	bne.n	8009a3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d11e      	bne.n	8009a3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80099fc:	4b34      	ldr	r3, [pc, #208]	; (8009ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 0308 	and.w	r3, r3, #8
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d107      	bne.n	8009a18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009a08:	4b31      	ldr	r3, [pc, #196]	; (8009ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a0e:	0a1b      	lsrs	r3, r3, #8
 8009a10:	f003 030f 	and.w	r3, r3, #15
 8009a14:	61fb      	str	r3, [r7, #28]
 8009a16:	e005      	b.n	8009a24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009a18:	4b2d      	ldr	r3, [pc, #180]	; (8009ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	091b      	lsrs	r3, r3, #4
 8009a1e:	f003 030f 	and.w	r3, r3, #15
 8009a22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009a24:	4a2b      	ldr	r2, [pc, #172]	; (8009ad4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009a26:	69fb      	ldr	r3, [r7, #28]
 8009a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10d      	bne.n	8009a50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009a38:	e00a      	b.n	8009a50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	2b04      	cmp	r3, #4
 8009a3e:	d102      	bne.n	8009a46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009a40:	4b25      	ldr	r3, [pc, #148]	; (8009ad8 <HAL_RCC_GetSysClockFreq+0x110>)
 8009a42:	61bb      	str	r3, [r7, #24]
 8009a44:	e004      	b.n	8009a50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	2b08      	cmp	r3, #8
 8009a4a:	d101      	bne.n	8009a50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009a4c:	4b23      	ldr	r3, [pc, #140]	; (8009adc <HAL_RCC_GetSysClockFreq+0x114>)
 8009a4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	2b0c      	cmp	r3, #12
 8009a54:	d134      	bne.n	8009ac0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009a56:	4b1e      	ldr	r3, [pc, #120]	; (8009ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	f003 0303 	and.w	r3, r3, #3
 8009a5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d003      	beq.n	8009a6e <HAL_RCC_GetSysClockFreq+0xa6>
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	2b03      	cmp	r3, #3
 8009a6a:	d003      	beq.n	8009a74 <HAL_RCC_GetSysClockFreq+0xac>
 8009a6c:	e005      	b.n	8009a7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009a6e:	4b1a      	ldr	r3, [pc, #104]	; (8009ad8 <HAL_RCC_GetSysClockFreq+0x110>)
 8009a70:	617b      	str	r3, [r7, #20]
      break;
 8009a72:	e005      	b.n	8009a80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009a74:	4b19      	ldr	r3, [pc, #100]	; (8009adc <HAL_RCC_GetSysClockFreq+0x114>)
 8009a76:	617b      	str	r3, [r7, #20]
      break;
 8009a78:	e002      	b.n	8009a80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	617b      	str	r3, [r7, #20]
      break;
 8009a7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009a80:	4b13      	ldr	r3, [pc, #76]	; (8009ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	091b      	lsrs	r3, r3, #4
 8009a86:	f003 0307 	and.w	r3, r3, #7
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009a8e:	4b10      	ldr	r3, [pc, #64]	; (8009ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	0a1b      	lsrs	r3, r3, #8
 8009a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	fb03 f202 	mul.w	r2, r3, r2
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aa4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009aa6:	4b0a      	ldr	r3, [pc, #40]	; (8009ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	0e5b      	lsrs	r3, r3, #25
 8009aac:	f003 0303 	and.w	r3, r3, #3
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	005b      	lsls	r3, r3, #1
 8009ab4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009ab6:	697a      	ldr	r2, [r7, #20]
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8009abe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009ac0:	69bb      	ldr	r3, [r7, #24]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3724      	adds	r7, #36	; 0x24
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	40021000 	.word	0x40021000
 8009ad4:	08010008 	.word	0x08010008
 8009ad8:	00f42400 	.word	0x00f42400
 8009adc:	007a1200 	.word	0x007a1200

08009ae0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009ae4:	4b03      	ldr	r3, [pc, #12]	; (8009af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	20000000 	.word	0x20000000

08009af8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b086      	sub	sp, #24
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009b00:	2300      	movs	r3, #0
 8009b02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009b04:	4b2a      	ldr	r3, [pc, #168]	; (8009bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d003      	beq.n	8009b18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009b10:	f7ff f9d2 	bl	8008eb8 <HAL_PWREx_GetVoltageRange>
 8009b14:	6178      	str	r0, [r7, #20]
 8009b16:	e014      	b.n	8009b42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009b18:	4b25      	ldr	r3, [pc, #148]	; (8009bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b1c:	4a24      	ldr	r2, [pc, #144]	; (8009bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b22:	6593      	str	r3, [r2, #88]	; 0x58
 8009b24:	4b22      	ldr	r3, [pc, #136]	; (8009bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b2c:	60fb      	str	r3, [r7, #12]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009b30:	f7ff f9c2 	bl	8008eb8 <HAL_PWREx_GetVoltageRange>
 8009b34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009b36:	4b1e      	ldr	r3, [pc, #120]	; (8009bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b3a:	4a1d      	ldr	r2, [pc, #116]	; (8009bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b48:	d10b      	bne.n	8009b62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2b80      	cmp	r3, #128	; 0x80
 8009b4e:	d919      	bls.n	8009b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2ba0      	cmp	r3, #160	; 0xa0
 8009b54:	d902      	bls.n	8009b5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009b56:	2302      	movs	r3, #2
 8009b58:	613b      	str	r3, [r7, #16]
 8009b5a:	e013      	b.n	8009b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	613b      	str	r3, [r7, #16]
 8009b60:	e010      	b.n	8009b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2b80      	cmp	r3, #128	; 0x80
 8009b66:	d902      	bls.n	8009b6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009b68:	2303      	movs	r3, #3
 8009b6a:	613b      	str	r3, [r7, #16]
 8009b6c:	e00a      	b.n	8009b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2b80      	cmp	r3, #128	; 0x80
 8009b72:	d102      	bne.n	8009b7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009b74:	2302      	movs	r3, #2
 8009b76:	613b      	str	r3, [r7, #16]
 8009b78:	e004      	b.n	8009b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2b70      	cmp	r3, #112	; 0x70
 8009b7e:	d101      	bne.n	8009b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009b80:	2301      	movs	r3, #1
 8009b82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009b84:	4b0b      	ldr	r3, [pc, #44]	; (8009bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f023 0207 	bic.w	r2, r3, #7
 8009b8c:	4909      	ldr	r1, [pc, #36]	; (8009bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009b94:	4b07      	ldr	r3, [pc, #28]	; (8009bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f003 0307 	and.w	r3, r3, #7
 8009b9c:	693a      	ldr	r2, [r7, #16]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d001      	beq.n	8009ba6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e000      	b.n	8009ba8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3718      	adds	r7, #24
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	40021000 	.word	0x40021000
 8009bb4:	40022000 	.word	0x40022000

08009bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b086      	sub	sp, #24
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d031      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bd8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009bdc:	d01a      	beq.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8009bde:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009be2:	d814      	bhi.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d009      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009be8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009bec:	d10f      	bne.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8009bee:	4b5d      	ldr	r3, [pc, #372]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	4a5c      	ldr	r2, [pc, #368]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bf8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009bfa:	e00c      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	3304      	adds	r3, #4
 8009c00:	2100      	movs	r1, #0
 8009c02:	4618      	mov	r0, r3
 8009c04:	f000 fa22 	bl	800a04c <RCCEx_PLLSAI1_Config>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009c0c:	e003      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	74fb      	strb	r3, [r7, #19]
      break;
 8009c12:	e000      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8009c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c16:	7cfb      	ldrb	r3, [r7, #19]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10b      	bne.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009c1c:	4b51      	ldr	r3, [pc, #324]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c2a:	494e      	ldr	r1, [pc, #312]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009c32:	e001      	b.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c34:	7cfb      	ldrb	r3, [r7, #19]
 8009c36:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f000 809e 	beq.w	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c46:	2300      	movs	r3, #0
 8009c48:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009c4a:	4b46      	ldr	r3, [pc, #280]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d101      	bne.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8009c56:	2301      	movs	r3, #1
 8009c58:	e000      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00d      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c60:	4b40      	ldr	r3, [pc, #256]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c64:	4a3f      	ldr	r2, [pc, #252]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c6a:	6593      	str	r3, [r2, #88]	; 0x58
 8009c6c:	4b3d      	ldr	r3, [pc, #244]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c74:	60bb      	str	r3, [r7, #8]
 8009c76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009c7c:	4b3a      	ldr	r3, [pc, #232]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a39      	ldr	r2, [pc, #228]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8009c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c88:	f7fb fbbe 	bl	8005408 <HAL_GetTick>
 8009c8c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009c8e:	e009      	b.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c90:	f7fb fbba 	bl	8005408 <HAL_GetTick>
 8009c94:	4602      	mov	r2, r0
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d902      	bls.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	74fb      	strb	r3, [r7, #19]
        break;
 8009ca2:	e005      	b.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009ca4:	4b30      	ldr	r3, [pc, #192]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d0ef      	beq.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8009cb0:	7cfb      	ldrb	r3, [r7, #19]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d15a      	bne.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009cb6:	4b2b      	ldr	r3, [pc, #172]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cc0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d01e      	beq.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ccc:	697a      	ldr	r2, [r7, #20]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d019      	beq.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009cd2:	4b24      	ldr	r3, [pc, #144]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cdc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009cde:	4b21      	ldr	r3, [pc, #132]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ce4:	4a1f      	ldr	r2, [pc, #124]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009cee:	4b1d      	ldr	r3, [pc, #116]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cf4:	4a1b      	ldr	r2, [pc, #108]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009cfe:	4a19      	ldr	r2, [pc, #100]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	f003 0301 	and.w	r3, r3, #1
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d016      	beq.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d10:	f7fb fb7a 	bl	8005408 <HAL_GetTick>
 8009d14:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d16:	e00b      	b.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d18:	f7fb fb76 	bl	8005408 <HAL_GetTick>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d902      	bls.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8009d2a:	2303      	movs	r3, #3
 8009d2c:	74fb      	strb	r3, [r7, #19]
            break;
 8009d2e:	e006      	b.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d30:	4b0c      	ldr	r3, [pc, #48]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d36:	f003 0302 	and.w	r3, r3, #2
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d0ec      	beq.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8009d3e:	7cfb      	ldrb	r3, [r7, #19]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d10b      	bne.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d44:	4b07      	ldr	r3, [pc, #28]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d52:	4904      	ldr	r1, [pc, #16]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009d54:	4313      	orrs	r3, r2
 8009d56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009d5a:	e009      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009d5c:	7cfb      	ldrb	r3, [r7, #19]
 8009d5e:	74bb      	strb	r3, [r7, #18]
 8009d60:	e006      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8009d62:	bf00      	nop
 8009d64:	40021000 	.word	0x40021000
 8009d68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d6c:	7cfb      	ldrb	r3, [r7, #19]
 8009d6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009d70:	7c7b      	ldrb	r3, [r7, #17]
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d105      	bne.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d76:	4b8d      	ldr	r3, [pc, #564]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d7a:	4a8c      	ldr	r2, [pc, #560]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f003 0301 	and.w	r3, r3, #1
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00a      	beq.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009d8e:	4b87      	ldr	r3, [pc, #540]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d94:	f023 0203 	bic.w	r2, r3, #3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6a1b      	ldr	r3, [r3, #32]
 8009d9c:	4983      	ldr	r1, [pc, #524]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f003 0302 	and.w	r3, r3, #2
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00a      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009db0:	4b7e      	ldr	r3, [pc, #504]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009db6:	f023 020c 	bic.w	r2, r3, #12
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dbe:	497b      	ldr	r1, [pc, #492]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f003 0304 	and.w	r3, r3, #4
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00a      	beq.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009dd2:	4b76      	ldr	r3, [pc, #472]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dd8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de0:	4972      	ldr	r1, [pc, #456]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009de2:	4313      	orrs	r3, r2
 8009de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f003 0320 	and.w	r3, r3, #32
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00a      	beq.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009df4:	4b6d      	ldr	r3, [pc, #436]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dfa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e02:	496a      	ldr	r1, [pc, #424]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009e04:	4313      	orrs	r3, r2
 8009e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00a      	beq.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009e16:	4b65      	ldr	r3, [pc, #404]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e24:	4961      	ldr	r1, [pc, #388]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009e26:	4313      	orrs	r3, r2
 8009e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00a      	beq.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009e38:	4b5c      	ldr	r3, [pc, #368]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e46:	4959      	ldr	r1, [pc, #356]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00a      	beq.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009e5a:	4b54      	ldr	r3, [pc, #336]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e68:	4950      	ldr	r1, [pc, #320]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d00a      	beq.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009e7c:	4b4b      	ldr	r3, [pc, #300]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e8a:	4948      	ldr	r1, [pc, #288]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00a      	beq.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009e9e:	4b43      	ldr	r3, [pc, #268]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ea4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eac:	493f      	ldr	r1, [pc, #252]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d028      	beq.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009ec0:	4b3a      	ldr	r3, [pc, #232]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ec6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ece:	4937      	ldr	r1, [pc, #220]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ede:	d106      	bne.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ee0:	4b32      	ldr	r3, [pc, #200]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	4a31      	ldr	r2, [pc, #196]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009ee6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009eea:	60d3      	str	r3, [r2, #12]
 8009eec:	e011      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ef2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ef6:	d10c      	bne.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	3304      	adds	r3, #4
 8009efc:	2101      	movs	r1, #1
 8009efe:	4618      	mov	r0, r3
 8009f00:	f000 f8a4 	bl	800a04c <RCCEx_PLLSAI1_Config>
 8009f04:	4603      	mov	r3, r0
 8009f06:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009f08:	7cfb      	ldrb	r3, [r7, #19]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8009f0e:	7cfb      	ldrb	r3, [r7, #19]
 8009f10:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d028      	beq.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009f1e:	4b23      	ldr	r3, [pc, #140]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f2c:	491f      	ldr	r1, [pc, #124]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f3c:	d106      	bne.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f3e:	4b1b      	ldr	r3, [pc, #108]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	4a1a      	ldr	r2, [pc, #104]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009f44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f48:	60d3      	str	r3, [r2, #12]
 8009f4a:	e011      	b.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f54:	d10c      	bne.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	3304      	adds	r3, #4
 8009f5a:	2101      	movs	r1, #1
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 f875 	bl	800a04c <RCCEx_PLLSAI1_Config>
 8009f62:	4603      	mov	r3, r0
 8009f64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009f66:	7cfb      	ldrb	r3, [r7, #19]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d001      	beq.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8009f6c:	7cfb      	ldrb	r3, [r7, #19]
 8009f6e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d02b      	beq.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f7c:	4b0b      	ldr	r3, [pc, #44]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f8a:	4908      	ldr	r1, [pc, #32]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f9a:	d109      	bne.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f9c:	4b03      	ldr	r3, [pc, #12]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	4a02      	ldr	r2, [pc, #8]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fa6:	60d3      	str	r3, [r2, #12]
 8009fa8:	e014      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8009faa:	bf00      	nop
 8009fac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009fb8:	d10c      	bne.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	3304      	adds	r3, #4
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f000 f843 	bl	800a04c <RCCEx_PLLSAI1_Config>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009fca:	7cfb      	ldrb	r3, [r7, #19]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d001      	beq.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8009fd0:	7cfb      	ldrb	r3, [r7, #19]
 8009fd2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d01c      	beq.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009fe0:	4b19      	ldr	r3, [pc, #100]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fe6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fee:	4916      	ldr	r1, [pc, #88]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ffa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ffe:	d10c      	bne.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	3304      	adds	r3, #4
 800a004:	2102      	movs	r1, #2
 800a006:	4618      	mov	r0, r3
 800a008:	f000 f820 	bl	800a04c <RCCEx_PLLSAI1_Config>
 800a00c:	4603      	mov	r3, r0
 800a00e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a010:	7cfb      	ldrb	r3, [r7, #19]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800a016:	7cfb      	ldrb	r3, [r7, #19]
 800a018:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00a      	beq.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a026:	4b08      	ldr	r3, [pc, #32]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a02c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a034:	4904      	ldr	r1, [pc, #16]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a036:	4313      	orrs	r3, r2
 800a038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a03c:	7cbb      	ldrb	r3, [r7, #18]
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3718      	adds	r7, #24
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	40021000 	.word	0x40021000

0800a04c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a056:	2300      	movs	r3, #0
 800a058:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a05a:	4b74      	ldr	r3, [pc, #464]	; (800a22c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	f003 0303 	and.w	r3, r3, #3
 800a062:	2b00      	cmp	r3, #0
 800a064:	d018      	beq.n	800a098 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a066:	4b71      	ldr	r3, [pc, #452]	; (800a22c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	f003 0203 	and.w	r2, r3, #3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	429a      	cmp	r2, r3
 800a074:	d10d      	bne.n	800a092 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
       ||
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d009      	beq.n	800a092 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a07e:	4b6b      	ldr	r3, [pc, #428]	; (800a22c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	091b      	lsrs	r3, r3, #4
 800a084:	f003 0307 	and.w	r3, r3, #7
 800a088:	1c5a      	adds	r2, r3, #1
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	685b      	ldr	r3, [r3, #4]
       ||
 800a08e:	429a      	cmp	r2, r3
 800a090:	d047      	beq.n	800a122 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	73fb      	strb	r3, [r7, #15]
 800a096:	e044      	b.n	800a122 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b03      	cmp	r3, #3
 800a09e:	d018      	beq.n	800a0d2 <RCCEx_PLLSAI1_Config+0x86>
 800a0a0:	2b03      	cmp	r3, #3
 800a0a2:	d825      	bhi.n	800a0f0 <RCCEx_PLLSAI1_Config+0xa4>
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d002      	beq.n	800a0ae <RCCEx_PLLSAI1_Config+0x62>
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d009      	beq.n	800a0c0 <RCCEx_PLLSAI1_Config+0x74>
 800a0ac:	e020      	b.n	800a0f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a0ae:	4b5f      	ldr	r3, [pc, #380]	; (800a22c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 0302 	and.w	r3, r3, #2
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d11d      	bne.n	800a0f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0be:	e01a      	b.n	800a0f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a0c0:	4b5a      	ldr	r3, [pc, #360]	; (800a22c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d116      	bne.n	800a0fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0d0:	e013      	b.n	800a0fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a0d2:	4b56      	ldr	r3, [pc, #344]	; (800a22c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d10f      	bne.n	800a0fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a0de:	4b53      	ldr	r3, [pc, #332]	; (800a22c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d109      	bne.n	800a0fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a0ee:	e006      	b.n	800a0fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a0f4:	e004      	b.n	800a100 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a0f6:	bf00      	nop
 800a0f8:	e002      	b.n	800a100 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a0fa:	bf00      	nop
 800a0fc:	e000      	b.n	800a100 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a0fe:	bf00      	nop
    }

    if(status == HAL_OK)
 800a100:	7bfb      	ldrb	r3, [r7, #15]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d10d      	bne.n	800a122 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a106:	4b49      	ldr	r3, [pc, #292]	; (800a22c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6819      	ldr	r1, [r3, #0]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	3b01      	subs	r3, #1
 800a118:	011b      	lsls	r3, r3, #4
 800a11a:	430b      	orrs	r3, r1
 800a11c:	4943      	ldr	r1, [pc, #268]	; (800a22c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a11e:	4313      	orrs	r3, r2
 800a120:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a122:	7bfb      	ldrb	r3, [r7, #15]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d17c      	bne.n	800a222 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a128:	4b40      	ldr	r3, [pc, #256]	; (800a22c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a3f      	ldr	r2, [pc, #252]	; (800a22c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a12e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a132:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a134:	f7fb f968 	bl	8005408 <HAL_GetTick>
 800a138:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a13a:	e009      	b.n	800a150 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a13c:	f7fb f964 	bl	8005408 <HAL_GetTick>
 800a140:	4602      	mov	r2, r0
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	2b02      	cmp	r3, #2
 800a148:	d902      	bls.n	800a150 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a14a:	2303      	movs	r3, #3
 800a14c:	73fb      	strb	r3, [r7, #15]
        break;
 800a14e:	e005      	b.n	800a15c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a150:	4b36      	ldr	r3, [pc, #216]	; (800a22c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1ef      	bne.n	800a13c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a15c:	7bfb      	ldrb	r3, [r7, #15]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d15f      	bne.n	800a222 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d110      	bne.n	800a18a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a168:	4b30      	ldr	r3, [pc, #192]	; (800a22c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800a170:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	6892      	ldr	r2, [r2, #8]
 800a178:	0211      	lsls	r1, r2, #8
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	68d2      	ldr	r2, [r2, #12]
 800a17e:	06d2      	lsls	r2, r2, #27
 800a180:	430a      	orrs	r2, r1
 800a182:	492a      	ldr	r1, [pc, #168]	; (800a22c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a184:	4313      	orrs	r3, r2
 800a186:	610b      	str	r3, [r1, #16]
 800a188:	e027      	b.n	800a1da <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d112      	bne.n	800a1b6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a190:	4b26      	ldr	r3, [pc, #152]	; (800a22c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a192:	691b      	ldr	r3, [r3, #16]
 800a194:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a198:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	6892      	ldr	r2, [r2, #8]
 800a1a0:	0211      	lsls	r1, r2, #8
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	6912      	ldr	r2, [r2, #16]
 800a1a6:	0852      	lsrs	r2, r2, #1
 800a1a8:	3a01      	subs	r2, #1
 800a1aa:	0552      	lsls	r2, r2, #21
 800a1ac:	430a      	orrs	r2, r1
 800a1ae:	491f      	ldr	r1, [pc, #124]	; (800a22c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	610b      	str	r3, [r1, #16]
 800a1b4:	e011      	b.n	800a1da <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a1b6:	4b1d      	ldr	r3, [pc, #116]	; (800a22c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a1be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	6892      	ldr	r2, [r2, #8]
 800a1c6:	0211      	lsls	r1, r2, #8
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	6952      	ldr	r2, [r2, #20]
 800a1cc:	0852      	lsrs	r2, r2, #1
 800a1ce:	3a01      	subs	r2, #1
 800a1d0:	0652      	lsls	r2, r2, #25
 800a1d2:	430a      	orrs	r2, r1
 800a1d4:	4915      	ldr	r1, [pc, #84]	; (800a22c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a1da:	4b14      	ldr	r3, [pc, #80]	; (800a22c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a13      	ldr	r2, [pc, #76]	; (800a22c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a1e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a1e4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1e6:	f7fb f90f 	bl	8005408 <HAL_GetTick>
 800a1ea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a1ec:	e009      	b.n	800a202 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a1ee:	f7fb f90b 	bl	8005408 <HAL_GetTick>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	d902      	bls.n	800a202 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	73fb      	strb	r3, [r7, #15]
          break;
 800a200:	e005      	b.n	800a20e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a202:	4b0a      	ldr	r3, [pc, #40]	; (800a22c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d0ef      	beq.n	800a1ee <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800a20e:	7bfb      	ldrb	r3, [r7, #15]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d106      	bne.n	800a222 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a214:	4b05      	ldr	r3, [pc, #20]	; (800a22c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a216:	691a      	ldr	r2, [r3, #16]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	699b      	ldr	r3, [r3, #24]
 800a21c:	4903      	ldr	r1, [pc, #12]	; (800a22c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a21e:	4313      	orrs	r3, r2
 800a220:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a222:	7bfb      	ldrb	r3, [r7, #15]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	40021000 	.word	0x40021000

0800a230 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d101      	bne.n	800a242 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	e095      	b.n	800a36e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a246:	2b00      	cmp	r3, #0
 800a248:	d108      	bne.n	800a25c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a252:	d009      	beq.n	800a268 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	61da      	str	r2, [r3, #28]
 800a25a:	e005      	b.n	800a268 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b00      	cmp	r3, #0
 800a278:	d106      	bne.n	800a288 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f7fa fe5a 	bl	8004f3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2202      	movs	r2, #2
 800a28c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a29e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a2a8:	d902      	bls.n	800a2b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	60fb      	str	r3, [r7, #12]
 800a2ae:	e002      	b.n	800a2b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a2b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a2be:	d007      	beq.n	800a2d0 <HAL_SPI_Init+0xa0>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a2c8:	d002      	beq.n	800a2d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a2e0:	431a      	orrs	r2, r3
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	f003 0302 	and.w	r3, r3, #2
 800a2ea:	431a      	orrs	r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	695b      	ldr	r3, [r3, #20]
 800a2f0:	f003 0301 	and.w	r3, r3, #1
 800a2f4:	431a      	orrs	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	699b      	ldr	r3, [r3, #24]
 800a2fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2fe:	431a      	orrs	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	69db      	ldr	r3, [r3, #28]
 800a304:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a308:	431a      	orrs	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6a1b      	ldr	r3, [r3, #32]
 800a30e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a312:	ea42 0103 	orr.w	r1, r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a31a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	430a      	orrs	r2, r1
 800a324:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	699b      	ldr	r3, [r3, #24]
 800a32a:	0c1b      	lsrs	r3, r3, #16
 800a32c:	f003 0204 	and.w	r2, r3, #4
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a334:	f003 0310 	and.w	r3, r3, #16
 800a338:	431a      	orrs	r2, r3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a33e:	f003 0308 	and.w	r3, r3, #8
 800a342:	431a      	orrs	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a34c:	ea42 0103 	orr.w	r1, r2, r3
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	430a      	orrs	r2, r1
 800a35c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3710      	adds	r7, #16
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b088      	sub	sp, #32
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	60f8      	str	r0, [r7, #12]
 800a37e:	60b9      	str	r1, [r7, #8]
 800a380:	603b      	str	r3, [r7, #0]
 800a382:	4613      	mov	r3, r2
 800a384:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a386:	2300      	movs	r3, #0
 800a388:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a390:	2b01      	cmp	r3, #1
 800a392:	d101      	bne.n	800a398 <HAL_SPI_Transmit+0x22>
 800a394:	2302      	movs	r3, #2
 800a396:	e158      	b.n	800a64a <HAL_SPI_Transmit+0x2d4>
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3a0:	f7fb f832 	bl	8005408 <HAL_GetTick>
 800a3a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a3a6:	88fb      	ldrh	r3, [r7, #6]
 800a3a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d002      	beq.n	800a3bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a3b6:	2302      	movs	r3, #2
 800a3b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a3ba:	e13d      	b.n	800a638 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d002      	beq.n	800a3c8 <HAL_SPI_Transmit+0x52>
 800a3c2:	88fb      	ldrh	r3, [r7, #6]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d102      	bne.n	800a3ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a3cc:	e134      	b.n	800a638 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2203      	movs	r2, #3
 800a3d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	88fa      	ldrh	r2, [r7, #6]
 800a3e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	88fa      	ldrh	r2, [r7, #6]
 800a3ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2200      	movs	r2, #0
 800a408:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a418:	d10f      	bne.n	800a43a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a428:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a438:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a444:	2b40      	cmp	r3, #64	; 0x40
 800a446:	d007      	beq.n	800a458 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a456:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a460:	d94b      	bls.n	800a4fa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d002      	beq.n	800a470 <HAL_SPI_Transmit+0xfa>
 800a46a:	8afb      	ldrh	r3, [r7, #22]
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d13e      	bne.n	800a4ee <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a474:	881a      	ldrh	r2, [r3, #0]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a480:	1c9a      	adds	r2, r3, #2
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	3b01      	subs	r3, #1
 800a48e:	b29a      	uxth	r2, r3
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a494:	e02b      	b.n	800a4ee <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	f003 0302 	and.w	r3, r3, #2
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d112      	bne.n	800a4ca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a8:	881a      	ldrh	r2, [r3, #0]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b4:	1c9a      	adds	r2, r3, #2
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a4c8:	e011      	b.n	800a4ee <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4ca:	f7fa ff9d 	bl	8005408 <HAL_GetTick>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	1ad3      	subs	r3, r2, r3
 800a4d4:	683a      	ldr	r2, [r7, #0]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d803      	bhi.n	800a4e2 <HAL_SPI_Transmit+0x16c>
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e0:	d102      	bne.n	800a4e8 <HAL_SPI_Transmit+0x172>
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d102      	bne.n	800a4ee <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800a4e8:	2303      	movs	r3, #3
 800a4ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a4ec:	e0a4      	b.n	800a638 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d1ce      	bne.n	800a496 <HAL_SPI_Transmit+0x120>
 800a4f8:	e07c      	b.n	800a5f4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d002      	beq.n	800a508 <HAL_SPI_Transmit+0x192>
 800a502:	8afb      	ldrh	r3, [r7, #22]
 800a504:	2b01      	cmp	r3, #1
 800a506:	d170      	bne.n	800a5ea <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d912      	bls.n	800a538 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a516:	881a      	ldrh	r2, [r3, #0]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a522:	1c9a      	adds	r2, r3, #2
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	3b02      	subs	r3, #2
 800a530:	b29a      	uxth	r2, r3
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a536:	e058      	b.n	800a5ea <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	330c      	adds	r3, #12
 800a542:	7812      	ldrb	r2, [r2, #0]
 800a544:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a54a:	1c5a      	adds	r2, r3, #1
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a554:	b29b      	uxth	r3, r3
 800a556:	3b01      	subs	r3, #1
 800a558:	b29a      	uxth	r2, r3
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a55e:	e044      	b.n	800a5ea <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	f003 0302 	and.w	r3, r3, #2
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	d12b      	bne.n	800a5c6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a572:	b29b      	uxth	r3, r3
 800a574:	2b01      	cmp	r3, #1
 800a576:	d912      	bls.n	800a59e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57c:	881a      	ldrh	r2, [r3, #0]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a588:	1c9a      	adds	r2, r3, #2
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a592:	b29b      	uxth	r3, r3
 800a594:	3b02      	subs	r3, #2
 800a596:	b29a      	uxth	r2, r3
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a59c:	e025      	b.n	800a5ea <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	330c      	adds	r3, #12
 800a5a8:	7812      	ldrb	r2, [r2, #0]
 800a5aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b0:	1c5a      	adds	r2, r3, #1
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	3b01      	subs	r3, #1
 800a5be:	b29a      	uxth	r2, r3
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a5c4:	e011      	b.n	800a5ea <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5c6:	f7fa ff1f 	bl	8005408 <HAL_GetTick>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	1ad3      	subs	r3, r2, r3
 800a5d0:	683a      	ldr	r2, [r7, #0]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d803      	bhi.n	800a5de <HAL_SPI_Transmit+0x268>
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5dc:	d102      	bne.n	800a5e4 <HAL_SPI_Transmit+0x26e>
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d102      	bne.n	800a5ea <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800a5e4:	2303      	movs	r3, #3
 800a5e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a5e8:	e026      	b.n	800a638 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d1b5      	bne.n	800a560 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a5f4:	69ba      	ldr	r2, [r7, #24]
 800a5f6:	6839      	ldr	r1, [r7, #0]
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f000 fb5b 	bl	800acb4 <SPI_EndRxTxTransaction>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2220      	movs	r2, #32
 800a608:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d10a      	bne.n	800a628 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a612:	2300      	movs	r3, #0
 800a614:	613b      	str	r3, [r7, #16]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	613b      	str	r3, [r7, #16]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	613b      	str	r3, [r7, #16]
 800a626:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d002      	beq.n	800a636 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	77fb      	strb	r3, [r7, #31]
 800a634:	e000      	b.n	800a638 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800a636:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a648:	7ffb      	ldrb	r3, [r7, #31]
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3720      	adds	r7, #32
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a652:	b580      	push	{r7, lr}
 800a654:	b08a      	sub	sp, #40	; 0x28
 800a656:	af00      	add	r7, sp, #0
 800a658:	60f8      	str	r0, [r7, #12]
 800a65a:	60b9      	str	r1, [r7, #8]
 800a65c:	607a      	str	r2, [r7, #4]
 800a65e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a660:	2301      	movs	r3, #1
 800a662:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a664:	2300      	movs	r3, #0
 800a666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a670:	2b01      	cmp	r3, #1
 800a672:	d101      	bne.n	800a678 <HAL_SPI_TransmitReceive+0x26>
 800a674:	2302      	movs	r3, #2
 800a676:	e1fb      	b.n	800aa70 <HAL_SPI_TransmitReceive+0x41e>
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2201      	movs	r2, #1
 800a67c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a680:	f7fa fec2 	bl	8005408 <HAL_GetTick>
 800a684:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a68c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a694:	887b      	ldrh	r3, [r7, #2]
 800a696:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a698:	887b      	ldrh	r3, [r7, #2]
 800a69a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a69c:	7efb      	ldrb	r3, [r7, #27]
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d00e      	beq.n	800a6c0 <HAL_SPI_TransmitReceive+0x6e>
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6a8:	d106      	bne.n	800a6b8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d102      	bne.n	800a6b8 <HAL_SPI_TransmitReceive+0x66>
 800a6b2:	7efb      	ldrb	r3, [r7, #27]
 800a6b4:	2b04      	cmp	r3, #4
 800a6b6:	d003      	beq.n	800a6c0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a6b8:	2302      	movs	r3, #2
 800a6ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a6be:	e1cd      	b.n	800aa5c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d005      	beq.n	800a6d2 <HAL_SPI_TransmitReceive+0x80>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d002      	beq.n	800a6d2 <HAL_SPI_TransmitReceive+0x80>
 800a6cc:	887b      	ldrh	r3, [r7, #2]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d103      	bne.n	800a6da <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a6d8:	e1c0      	b.n	800aa5c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	2b04      	cmp	r3, #4
 800a6e4:	d003      	beq.n	800a6ee <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2205      	movs	r2, #5
 800a6ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	887a      	ldrh	r2, [r7, #2]
 800a6fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	887a      	ldrh	r2, [r7, #2]
 800a706:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	887a      	ldrh	r2, [r7, #2]
 800a714:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	887a      	ldrh	r2, [r7, #2]
 800a71a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2200      	movs	r2, #0
 800a726:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a730:	d802      	bhi.n	800a738 <HAL_SPI_TransmitReceive+0xe6>
 800a732:	8a3b      	ldrh	r3, [r7, #16]
 800a734:	2b01      	cmp	r3, #1
 800a736:	d908      	bls.n	800a74a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	685a      	ldr	r2, [r3, #4]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a746:	605a      	str	r2, [r3, #4]
 800a748:	e007      	b.n	800a75a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	685a      	ldr	r2, [r3, #4]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a758:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a764:	2b40      	cmp	r3, #64	; 0x40
 800a766:	d007      	beq.n	800a778 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a776:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a780:	d97c      	bls.n	800a87c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d002      	beq.n	800a790 <HAL_SPI_TransmitReceive+0x13e>
 800a78a:	8a7b      	ldrh	r3, [r7, #18]
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d169      	bne.n	800a864 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a794:	881a      	ldrh	r2, [r3, #0]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a0:	1c9a      	adds	r2, r3, #2
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	3b01      	subs	r3, #1
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a7b4:	e056      	b.n	800a864 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	f003 0302 	and.w	r3, r3, #2
 800a7c0:	2b02      	cmp	r3, #2
 800a7c2:	d11b      	bne.n	800a7fc <HAL_SPI_TransmitReceive+0x1aa>
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d016      	beq.n	800a7fc <HAL_SPI_TransmitReceive+0x1aa>
 800a7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d113      	bne.n	800a7fc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d8:	881a      	ldrh	r2, [r3, #0]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e4:	1c9a      	adds	r2, r3, #2
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	3b01      	subs	r3, #1
 800a7f2:	b29a      	uxth	r2, r3
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	f003 0301 	and.w	r3, r3, #1
 800a806:	2b01      	cmp	r3, #1
 800a808:	d11c      	bne.n	800a844 <HAL_SPI_TransmitReceive+0x1f2>
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a810:	b29b      	uxth	r3, r3
 800a812:	2b00      	cmp	r3, #0
 800a814:	d016      	beq.n	800a844 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	68da      	ldr	r2, [r3, #12]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a820:	b292      	uxth	r2, r2
 800a822:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a828:	1c9a      	adds	r2, r3, #2
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a834:	b29b      	uxth	r3, r3
 800a836:	3b01      	subs	r3, #1
 800a838:	b29a      	uxth	r2, r3
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a840:	2301      	movs	r3, #1
 800a842:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a844:	f7fa fde0 	bl	8005408 <HAL_GetTick>
 800a848:	4602      	mov	r2, r0
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	1ad3      	subs	r3, r2, r3
 800a84e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a850:	429a      	cmp	r2, r3
 800a852:	d807      	bhi.n	800a864 <HAL_SPI_TransmitReceive+0x212>
 800a854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a85a:	d003      	beq.n	800a864 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a85c:	2303      	movs	r3, #3
 800a85e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a862:	e0fb      	b.n	800aa5c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a868:	b29b      	uxth	r3, r3
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d1a3      	bne.n	800a7b6 <HAL_SPI_TransmitReceive+0x164>
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a874:	b29b      	uxth	r3, r3
 800a876:	2b00      	cmp	r3, #0
 800a878:	d19d      	bne.n	800a7b6 <HAL_SPI_TransmitReceive+0x164>
 800a87a:	e0df      	b.n	800aa3c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d003      	beq.n	800a88c <HAL_SPI_TransmitReceive+0x23a>
 800a884:	8a7b      	ldrh	r3, [r7, #18]
 800a886:	2b01      	cmp	r3, #1
 800a888:	f040 80cb 	bne.w	800aa22 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a890:	b29b      	uxth	r3, r3
 800a892:	2b01      	cmp	r3, #1
 800a894:	d912      	bls.n	800a8bc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a89a:	881a      	ldrh	r2, [r3, #0]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a6:	1c9a      	adds	r2, r3, #2
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	3b02      	subs	r3, #2
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a8ba:	e0b2      	b.n	800aa22 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	330c      	adds	r3, #12
 800a8c6:	7812      	ldrb	r2, [r2, #0]
 800a8c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ce:	1c5a      	adds	r2, r3, #1
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	b29a      	uxth	r2, r3
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a8e2:	e09e      	b.n	800aa22 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	f003 0302 	and.w	r3, r3, #2
 800a8ee:	2b02      	cmp	r3, #2
 800a8f0:	d134      	bne.n	800a95c <HAL_SPI_TransmitReceive+0x30a>
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d02f      	beq.n	800a95c <HAL_SPI_TransmitReceive+0x30a>
 800a8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d12c      	bne.n	800a95c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a906:	b29b      	uxth	r3, r3
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d912      	bls.n	800a932 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a910:	881a      	ldrh	r2, [r3, #0]
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a91c:	1c9a      	adds	r2, r3, #2
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a926:	b29b      	uxth	r3, r3
 800a928:	3b02      	subs	r3, #2
 800a92a:	b29a      	uxth	r2, r3
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a930:	e012      	b.n	800a958 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	330c      	adds	r3, #12
 800a93c:	7812      	ldrb	r2, [r2, #0]
 800a93e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a944:	1c5a      	adds	r2, r3, #1
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a94e:	b29b      	uxth	r3, r3
 800a950:	3b01      	subs	r3, #1
 800a952:	b29a      	uxth	r2, r3
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a958:	2300      	movs	r3, #0
 800a95a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	f003 0301 	and.w	r3, r3, #1
 800a966:	2b01      	cmp	r3, #1
 800a968:	d148      	bne.n	800a9fc <HAL_SPI_TransmitReceive+0x3aa>
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a970:	b29b      	uxth	r3, r3
 800a972:	2b00      	cmp	r3, #0
 800a974:	d042      	beq.n	800a9fc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d923      	bls.n	800a9ca <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	68da      	ldr	r2, [r3, #12]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98c:	b292      	uxth	r2, r2
 800a98e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a994:	1c9a      	adds	r2, r3, #2
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	3b02      	subs	r3, #2
 800a9a4:	b29a      	uxth	r2, r3
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d81f      	bhi.n	800a9f8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	685a      	ldr	r2, [r3, #4]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a9c6:	605a      	str	r2, [r3, #4]
 800a9c8:	e016      	b.n	800a9f8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f103 020c 	add.w	r2, r3, #12
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d6:	7812      	ldrb	r2, [r2, #0]
 800a9d8:	b2d2      	uxtb	r2, r2
 800a9da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e0:	1c5a      	adds	r2, r3, #1
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	3b01      	subs	r3, #1
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a9fc:	f7fa fd04 	bl	8005408 <HAL_GetTick>
 800aa00:	4602      	mov	r2, r0
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d803      	bhi.n	800aa14 <HAL_SPI_TransmitReceive+0x3c2>
 800aa0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa12:	d102      	bne.n	800aa1a <HAL_SPI_TransmitReceive+0x3c8>
 800aa14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d103      	bne.n	800aa22 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800aa20:	e01c      	b.n	800aa5c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f47f af5b 	bne.w	800a8e4 <HAL_SPI_TransmitReceive+0x292>
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f47f af54 	bne.w	800a8e4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aa3c:	69fa      	ldr	r2, [r7, #28]
 800aa3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f000 f937 	bl	800acb4 <SPI_EndRxTxTransaction>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d006      	beq.n	800aa5a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2220      	movs	r2, #32
 800aa56:	661a      	str	r2, [r3, #96]	; 0x60
 800aa58:	e000      	b.n	800aa5c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800aa5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800aa6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3728      	adds	r7, #40	; 0x28
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b088      	sub	sp, #32
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	603b      	str	r3, [r7, #0]
 800aa84:	4613      	mov	r3, r2
 800aa86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800aa88:	f7fa fcbe 	bl	8005408 <HAL_GetTick>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa90:	1a9b      	subs	r3, r3, r2
 800aa92:	683a      	ldr	r2, [r7, #0]
 800aa94:	4413      	add	r3, r2
 800aa96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800aa98:	f7fa fcb6 	bl	8005408 <HAL_GetTick>
 800aa9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800aa9e:	4b39      	ldr	r3, [pc, #228]	; (800ab84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	015b      	lsls	r3, r3, #5
 800aaa4:	0d1b      	lsrs	r3, r3, #20
 800aaa6:	69fa      	ldr	r2, [r7, #28]
 800aaa8:	fb02 f303 	mul.w	r3, r2, r3
 800aaac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aaae:	e054      	b.n	800ab5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aab6:	d050      	beq.n	800ab5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800aab8:	f7fa fca6 	bl	8005408 <HAL_GetTick>
 800aabc:	4602      	mov	r2, r0
 800aabe:	69bb      	ldr	r3, [r7, #24]
 800aac0:	1ad3      	subs	r3, r2, r3
 800aac2:	69fa      	ldr	r2, [r7, #28]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d902      	bls.n	800aace <SPI_WaitFlagStateUntilTimeout+0x56>
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d13d      	bne.n	800ab4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	685a      	ldr	r2, [r3, #4]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800aadc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aae6:	d111      	bne.n	800ab0c <SPI_WaitFlagStateUntilTimeout+0x94>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aaf0:	d004      	beq.n	800aafc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aafa:	d107      	bne.n	800ab0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab14:	d10f      	bne.n	800ab36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ab24:	601a      	str	r2, [r3, #0]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ab34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2200      	movs	r2, #0
 800ab42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ab46:	2303      	movs	r3, #3
 800ab48:	e017      	b.n	800ab7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d101      	bne.n	800ab54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ab50:	2300      	movs	r3, #0
 800ab52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	3b01      	subs	r3, #1
 800ab58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	689a      	ldr	r2, [r3, #8]
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	4013      	ands	r3, r2
 800ab64:	68ba      	ldr	r2, [r7, #8]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	bf0c      	ite	eq
 800ab6a:	2301      	moveq	r3, #1
 800ab6c:	2300      	movne	r3, #0
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	461a      	mov	r2, r3
 800ab72:	79fb      	ldrb	r3, [r7, #7]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d19b      	bne.n	800aab0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3720      	adds	r7, #32
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	20000000 	.word	0x20000000

0800ab88 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b08a      	sub	sp, #40	; 0x28
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	607a      	str	r2, [r7, #4]
 800ab94:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ab96:	2300      	movs	r3, #0
 800ab98:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ab9a:	f7fa fc35 	bl	8005408 <HAL_GetTick>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba2:	1a9b      	subs	r3, r3, r2
 800aba4:	683a      	ldr	r2, [r7, #0]
 800aba6:	4413      	add	r3, r2
 800aba8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800abaa:	f7fa fc2d 	bl	8005408 <HAL_GetTick>
 800abae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	330c      	adds	r3, #12
 800abb6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800abb8:	4b3d      	ldr	r3, [pc, #244]	; (800acb0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	4613      	mov	r3, r2
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	4413      	add	r3, r2
 800abc2:	00da      	lsls	r2, r3, #3
 800abc4:	1ad3      	subs	r3, r2, r3
 800abc6:	0d1b      	lsrs	r3, r3, #20
 800abc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abca:	fb02 f303 	mul.w	r3, r2, r3
 800abce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800abd0:	e060      	b.n	800ac94 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800abd8:	d107      	bne.n	800abea <SPI_WaitFifoStateUntilTimeout+0x62>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d104      	bne.n	800abea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800abe8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf0:	d050      	beq.n	800ac94 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800abf2:	f7fa fc09 	bl	8005408 <HAL_GetTick>
 800abf6:	4602      	mov	r2, r0
 800abf8:	6a3b      	ldr	r3, [r7, #32]
 800abfa:	1ad3      	subs	r3, r2, r3
 800abfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d902      	bls.n	800ac08 <SPI_WaitFifoStateUntilTimeout+0x80>
 800ac02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d13d      	bne.n	800ac84 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	685a      	ldr	r2, [r3, #4]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ac16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac20:	d111      	bne.n	800ac46 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac2a:	d004      	beq.n	800ac36 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac34:	d107      	bne.n	800ac46 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac4e:	d10f      	bne.n	800ac70 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ac5e:	601a      	str	r2, [r3, #0]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ac6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ac80:	2303      	movs	r3, #3
 800ac82:	e010      	b.n	800aca6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ac84:	69bb      	ldr	r3, [r7, #24]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d101      	bne.n	800ac8e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	3b01      	subs	r3, #1
 800ac92:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	689a      	ldr	r2, [r3, #8]
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	4013      	ands	r3, r2
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d196      	bne.n	800abd2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3728      	adds	r7, #40	; 0x28
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	20000000 	.word	0x20000000

0800acb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b086      	sub	sp, #24
 800acb8:	af02      	add	r7, sp, #8
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	9300      	str	r3, [sp, #0]
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	2200      	movs	r2, #0
 800acc8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f7ff ff5b 	bl	800ab88 <SPI_WaitFifoStateUntilTimeout>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d007      	beq.n	800ace8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acdc:	f043 0220 	orr.w	r2, r3, #32
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ace4:	2303      	movs	r3, #3
 800ace6:	e027      	b.n	800ad38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	9300      	str	r3, [sp, #0]
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	2200      	movs	r2, #0
 800acf0:	2180      	movs	r1, #128	; 0x80
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	f7ff fec0 	bl	800aa78 <SPI_WaitFlagStateUntilTimeout>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d007      	beq.n	800ad0e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad02:	f043 0220 	orr.w	r2, r3, #32
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ad0a:	2303      	movs	r3, #3
 800ad0c:	e014      	b.n	800ad38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	9300      	str	r3, [sp, #0]
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	2200      	movs	r2, #0
 800ad16:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ad1a:	68f8      	ldr	r0, [r7, #12]
 800ad1c:	f7ff ff34 	bl	800ab88 <SPI_WaitFifoStateUntilTimeout>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d007      	beq.n	800ad36 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad2a:	f043 0220 	orr.w	r2, r3, #32
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ad32:	2303      	movs	r3, #3
 800ad34:	e000      	b.n	800ad38 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ad36:	2300      	movs	r3, #0
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3710      	adds	r7, #16
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d101      	bne.n	800ad52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e049      	b.n	800ade6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d106      	bne.n	800ad6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f7fa fa82 	bl	8005270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2202      	movs	r2, #2
 800ad70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	3304      	adds	r3, #4
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	4610      	mov	r0, r2
 800ad80:	f000 f9c8 	bl	800b114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2201      	movs	r2, #1
 800ad88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2201      	movs	r2, #1
 800ada8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2201      	movs	r2, #1
 800adb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2201      	movs	r2, #1
 800adb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2201      	movs	r2, #1
 800add0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2201      	movs	r2, #1
 800add8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2201      	movs	r2, #1
 800ade0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3708      	adds	r7, #8
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
	...

0800adf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b085      	sub	sp, #20
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d001      	beq.n	800ae08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ae04:	2301      	movs	r3, #1
 800ae06:	e03b      	b.n	800ae80 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2202      	movs	r2, #2
 800ae0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	68da      	ldr	r2, [r3, #12]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f042 0201 	orr.w	r2, r2, #1
 800ae1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a19      	ldr	r2, [pc, #100]	; (800ae8c <HAL_TIM_Base_Start_IT+0x9c>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d009      	beq.n	800ae3e <HAL_TIM_Base_Start_IT+0x4e>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae32:	d004      	beq.n	800ae3e <HAL_TIM_Base_Start_IT+0x4e>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a15      	ldr	r2, [pc, #84]	; (800ae90 <HAL_TIM_Base_Start_IT+0xa0>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d115      	bne.n	800ae6a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	689a      	ldr	r2, [r3, #8]
 800ae44:	4b13      	ldr	r3, [pc, #76]	; (800ae94 <HAL_TIM_Base_Start_IT+0xa4>)
 800ae46:	4013      	ands	r3, r2
 800ae48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2b06      	cmp	r3, #6
 800ae4e:	d015      	beq.n	800ae7c <HAL_TIM_Base_Start_IT+0x8c>
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae56:	d011      	beq.n	800ae7c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f042 0201 	orr.w	r2, r2, #1
 800ae66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae68:	e008      	b.n	800ae7c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f042 0201 	orr.w	r2, r2, #1
 800ae78:	601a      	str	r2, [r3, #0]
 800ae7a:	e000      	b.n	800ae7e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae7e:	2300      	movs	r3, #0
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3714      	adds	r7, #20
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr
 800ae8c:	40012c00 	.word	0x40012c00
 800ae90:	40014000 	.word	0x40014000
 800ae94:	00010007 	.word	0x00010007

0800ae98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	691b      	ldr	r3, [r3, #16]
 800aea6:	f003 0302 	and.w	r3, r3, #2
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	d122      	bne.n	800aef4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	68db      	ldr	r3, [r3, #12]
 800aeb4:	f003 0302 	and.w	r3, r3, #2
 800aeb8:	2b02      	cmp	r3, #2
 800aeba:	d11b      	bne.n	800aef4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f06f 0202 	mvn.w	r2, #2
 800aec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2201      	movs	r2, #1
 800aeca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	699b      	ldr	r3, [r3, #24]
 800aed2:	f003 0303 	and.w	r3, r3, #3
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d003      	beq.n	800aee2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 f905 	bl	800b0ea <HAL_TIM_IC_CaptureCallback>
 800aee0:	e005      	b.n	800aeee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 f8f7 	bl	800b0d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f7f9 ffa3 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	691b      	ldr	r3, [r3, #16]
 800aefa:	f003 0304 	and.w	r3, r3, #4
 800aefe:	2b04      	cmp	r3, #4
 800af00:	d122      	bne.n	800af48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	f003 0304 	and.w	r3, r3, #4
 800af0c:	2b04      	cmp	r3, #4
 800af0e:	d11b      	bne.n	800af48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f06f 0204 	mvn.w	r2, #4
 800af18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2202      	movs	r2, #2
 800af1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	699b      	ldr	r3, [r3, #24]
 800af26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d003      	beq.n	800af36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 f8db 	bl	800b0ea <HAL_TIM_IC_CaptureCallback>
 800af34:	e005      	b.n	800af42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 f8cd 	bl	800b0d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f7f9 ff79 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2200      	movs	r2, #0
 800af46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	691b      	ldr	r3, [r3, #16]
 800af4e:	f003 0308 	and.w	r3, r3, #8
 800af52:	2b08      	cmp	r3, #8
 800af54:	d122      	bne.n	800af9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	f003 0308 	and.w	r3, r3, #8
 800af60:	2b08      	cmp	r3, #8
 800af62:	d11b      	bne.n	800af9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f06f 0208 	mvn.w	r2, #8
 800af6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2204      	movs	r2, #4
 800af72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	69db      	ldr	r3, [r3, #28]
 800af7a:	f003 0303 	and.w	r3, r3, #3
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d003      	beq.n	800af8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 f8b1 	bl	800b0ea <HAL_TIM_IC_CaptureCallback>
 800af88:	e005      	b.n	800af96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 f8a3 	bl	800b0d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f7f9 ff4f 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	f003 0310 	and.w	r3, r3, #16
 800afa6:	2b10      	cmp	r3, #16
 800afa8:	d122      	bne.n	800aff0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	f003 0310 	and.w	r3, r3, #16
 800afb4:	2b10      	cmp	r3, #16
 800afb6:	d11b      	bne.n	800aff0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f06f 0210 	mvn.w	r2, #16
 800afc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2208      	movs	r2, #8
 800afc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	69db      	ldr	r3, [r3, #28]
 800afce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d003      	beq.n	800afde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 f887 	bl	800b0ea <HAL_TIM_IC_CaptureCallback>
 800afdc:	e005      	b.n	800afea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 f879 	bl	800b0d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7f9 ff25 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	691b      	ldr	r3, [r3, #16]
 800aff6:	f003 0301 	and.w	r3, r3, #1
 800affa:	2b01      	cmp	r3, #1
 800affc:	d10e      	bne.n	800b01c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	f003 0301 	and.w	r3, r3, #1
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d107      	bne.n	800b01c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f06f 0201 	mvn.w	r2, #1
 800b014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f7f9 fef8 	bl	8004e0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b026:	2b80      	cmp	r3, #128	; 0x80
 800b028:	d10e      	bne.n	800b048 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	68db      	ldr	r3, [r3, #12]
 800b030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b034:	2b80      	cmp	r3, #128	; 0x80
 800b036:	d107      	bne.n	800b048 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 f93a 	bl	800b2bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	691b      	ldr	r3, [r3, #16]
 800b04e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b056:	d10e      	bne.n	800b076 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b062:	2b80      	cmp	r3, #128	; 0x80
 800b064:	d107      	bne.n	800b076 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b06e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 f92d 	bl	800b2d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	691b      	ldr	r3, [r3, #16]
 800b07c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b080:	2b40      	cmp	r3, #64	; 0x40
 800b082:	d10e      	bne.n	800b0a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	68db      	ldr	r3, [r3, #12]
 800b08a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b08e:	2b40      	cmp	r3, #64	; 0x40
 800b090:	d107      	bne.n	800b0a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b09a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 f82e 	bl	800b0fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	691b      	ldr	r3, [r3, #16]
 800b0a8:	f003 0320 	and.w	r3, r3, #32
 800b0ac:	2b20      	cmp	r3, #32
 800b0ae:	d10e      	bne.n	800b0ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	68db      	ldr	r3, [r3, #12]
 800b0b6:	f003 0320 	and.w	r3, r3, #32
 800b0ba:	2b20      	cmp	r3, #32
 800b0bc:	d107      	bne.n	800b0ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f06f 0220 	mvn.w	r2, #32
 800b0c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 f8ed 	bl	800b2a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b0ce:	bf00      	nop
 800b0d0:	3708      	adds	r7, #8
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b0d6:	b480      	push	{r7}
 800b0d8:	b083      	sub	sp, #12
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b0de:	bf00      	nop
 800b0e0:	370c      	adds	r7, #12
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr

0800b0ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b0ea:	b480      	push	{r7}
 800b0ec:	b083      	sub	sp, #12
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b0f2:	bf00      	nop
 800b0f4:	370c      	adds	r7, #12
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr

0800b0fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b0fe:	b480      	push	{r7}
 800b100:	b083      	sub	sp, #12
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b106:	bf00      	nop
 800b108:	370c      	adds	r7, #12
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
	...

0800b114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b114:	b480      	push	{r7}
 800b116:	b085      	sub	sp, #20
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	4a2a      	ldr	r2, [pc, #168]	; (800b1d0 <TIM_Base_SetConfig+0xbc>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d003      	beq.n	800b134 <TIM_Base_SetConfig+0x20>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b132:	d108      	bne.n	800b146 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b13a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	4313      	orrs	r3, r2
 800b144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4a21      	ldr	r2, [pc, #132]	; (800b1d0 <TIM_Base_SetConfig+0xbc>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d00b      	beq.n	800b166 <TIM_Base_SetConfig+0x52>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b154:	d007      	beq.n	800b166 <TIM_Base_SetConfig+0x52>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4a1e      	ldr	r2, [pc, #120]	; (800b1d4 <TIM_Base_SetConfig+0xc0>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d003      	beq.n	800b166 <TIM_Base_SetConfig+0x52>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4a1d      	ldr	r2, [pc, #116]	; (800b1d8 <TIM_Base_SetConfig+0xc4>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d108      	bne.n	800b178 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b16c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	68fa      	ldr	r2, [r7, #12]
 800b174:	4313      	orrs	r3, r2
 800b176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	695b      	ldr	r3, [r3, #20]
 800b182:	4313      	orrs	r3, r2
 800b184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	689a      	ldr	r2, [r3, #8]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4a0c      	ldr	r2, [pc, #48]	; (800b1d0 <TIM_Base_SetConfig+0xbc>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d007      	beq.n	800b1b4 <TIM_Base_SetConfig+0xa0>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	4a0b      	ldr	r2, [pc, #44]	; (800b1d4 <TIM_Base_SetConfig+0xc0>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d003      	beq.n	800b1b4 <TIM_Base_SetConfig+0xa0>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4a0a      	ldr	r2, [pc, #40]	; (800b1d8 <TIM_Base_SetConfig+0xc4>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d103      	bne.n	800b1bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	691a      	ldr	r2, [r3, #16]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	615a      	str	r2, [r3, #20]
}
 800b1c2:	bf00      	nop
 800b1c4:	3714      	adds	r7, #20
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	40012c00 	.word	0x40012c00
 800b1d4:	40014000 	.word	0x40014000
 800b1d8:	40014400 	.word	0x40014400

0800b1dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b085      	sub	sp, #20
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d101      	bne.n	800b1f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b1f0:	2302      	movs	r3, #2
 800b1f2:	e04f      	b.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2202      	movs	r2, #2
 800b200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a21      	ldr	r2, [pc, #132]	; (800b2a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d108      	bne.n	800b230 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b224:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	68fa      	ldr	r2, [r7, #12]
 800b22c:	4313      	orrs	r3, r2
 800b22e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b236:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	4313      	orrs	r3, r2
 800b240:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	68fa      	ldr	r2, [r7, #12]
 800b248:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4a14      	ldr	r2, [pc, #80]	; (800b2a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d009      	beq.n	800b268 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b25c:	d004      	beq.n	800b268 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a10      	ldr	r2, [pc, #64]	; (800b2a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d10c      	bne.n	800b282 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b26e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	68ba      	ldr	r2, [r7, #8]
 800b276:	4313      	orrs	r3, r2
 800b278:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68ba      	ldr	r2, [r7, #8]
 800b280:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2201      	movs	r2, #1
 800b286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b292:	2300      	movs	r3, #0
}
 800b294:	4618      	mov	r0, r3
 800b296:	3714      	adds	r7, #20
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr
 800b2a0:	40012c00 	.word	0x40012c00
 800b2a4:	40014000 	.word	0x40014000

0800b2a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b2b0:	bf00      	nop
 800b2b2:	370c      	adds	r7, #12
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b2c4:	bf00      	nop
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr

0800b2d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b2d8:	bf00      	nop
 800b2da:	370c      	adds	r7, #12
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b2e4:	b084      	sub	sp, #16
 800b2e6:	b480      	push	{r7}
 800b2e8:	b083      	sub	sp, #12
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
 800b2ee:	f107 0014 	add.w	r0, r7, #20
 800b2f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b2f6:	2300      	movs	r3, #0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	b004      	add	sp, #16
 800b304:	4770      	bx	lr

0800b306 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b306:	b480      	push	{r7}
 800b308:	b085      	sub	sp, #20
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b316:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b31a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	b29a      	uxth	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b326:	2300      	movs	r3, #0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3714      	adds	r7, #20
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b33c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b340:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b348:	b29a      	uxth	r2, r3
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	43db      	mvns	r3, r3
 800b350:	b29b      	uxth	r3, r3
 800b352:	4013      	ands	r3, r2
 800b354:	b29a      	uxth	r2, r3
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b35c:	2300      	movs	r3, #0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3714      	adds	r7, #20
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr

0800b36a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800b36a:	b480      	push	{r7}
 800b36c:	b083      	sub	sp, #12
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
 800b372:	460b      	mov	r3, r1
 800b374:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b376:	2300      	movs	r3, #0
}
 800b378:	4618      	mov	r0, r3
 800b37a:	370c      	adds	r7, #12
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b384:	b084      	sub	sp, #16
 800b386:	b480      	push	{r7}
 800b388:	b083      	sub	sp, #12
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
 800b38e:	f107 0014 	add.w	r0, r7, #20
 800b392:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2201      	movs	r2, #1
 800b39a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800b3b6:	2300      	movs	r3, #0
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	b004      	add	sp, #16
 800b3c4:	4770      	bx	lr
	...

0800b3c8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b09d      	sub	sp, #116	; 0x74
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	4413      	add	r3, r2
 800b3e2:	881b      	ldrh	r3, [r3, #0]
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800b3ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3ee:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	78db      	ldrb	r3, [r3, #3]
 800b3f6:	2b03      	cmp	r3, #3
 800b3f8:	d81f      	bhi.n	800b43a <USB_ActivateEndpoint+0x72>
 800b3fa:	a201      	add	r2, pc, #4	; (adr r2, 800b400 <USB_ActivateEndpoint+0x38>)
 800b3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b400:	0800b411 	.word	0x0800b411
 800b404:	0800b42d 	.word	0x0800b42d
 800b408:	0800b443 	.word	0x0800b443
 800b40c:	0800b41f 	.word	0x0800b41f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b410:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b414:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b418:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b41c:	e012      	b.n	800b444 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b41e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b422:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800b426:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b42a:	e00b      	b.n	800b444 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b42c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b430:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b434:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b438:	e004      	b.n	800b444 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800b43a:	2301      	movs	r3, #1
 800b43c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800b440:	e000      	b.n	800b444 <USB_ActivateEndpoint+0x7c>
      break;
 800b442:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	441a      	add	r2, r3
 800b44e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b45a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b45e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b462:	b29b      	uxth	r3, r3
 800b464:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	009b      	lsls	r3, r3, #2
 800b46e:	4413      	add	r3, r2
 800b470:	881b      	ldrh	r3, [r3, #0]
 800b472:	b29b      	uxth	r3, r3
 800b474:	b21b      	sxth	r3, r3
 800b476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b47a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b47e:	b21a      	sxth	r2, r3
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	b21b      	sxth	r3, r3
 800b486:	4313      	orrs	r3, r2
 800b488:	b21b      	sxth	r3, r3
 800b48a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	441a      	add	r2, r3
 800b498:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800b49c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	7b1b      	ldrb	r3, [r3, #12]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	f040 816e 	bne.w	800b796 <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	785b      	ldrb	r3, [r3, #1]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	f000 8084 	beq.w	800b5cc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	61bb      	str	r3, [r7, #24]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	69bb      	ldr	r3, [r7, #24]
 800b4d4:	4413      	add	r3, r2
 800b4d6:	61bb      	str	r3, [r7, #24]
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	00da      	lsls	r2, r3, #3
 800b4de:	69bb      	ldr	r3, [r7, #24]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b4e6:	617b      	str	r3, [r7, #20]
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	88db      	ldrh	r3, [r3, #6]
 800b4ec:	085b      	lsrs	r3, r3, #1
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	005b      	lsls	r3, r3, #1
 800b4f2:	b29a      	uxth	r2, r3
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	4413      	add	r3, r2
 800b502:	881b      	ldrh	r3, [r3, #0]
 800b504:	827b      	strh	r3, [r7, #18]
 800b506:	8a7b      	ldrh	r3, [r7, #18]
 800b508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d01b      	beq.n	800b548 <USB_ActivateEndpoint+0x180>
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	4413      	add	r3, r2
 800b51a:	881b      	ldrh	r3, [r3, #0]
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b526:	823b      	strh	r3, [r7, #16]
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	009b      	lsls	r3, r3, #2
 800b530:	441a      	add	r2, r3
 800b532:	8a3b      	ldrh	r3, [r7, #16]
 800b534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b53c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b540:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b544:	b29b      	uxth	r3, r3
 800b546:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	78db      	ldrb	r3, [r3, #3]
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d020      	beq.n	800b592 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	009b      	lsls	r3, r3, #2
 800b558:	4413      	add	r3, r2
 800b55a:	881b      	ldrh	r3, [r3, #0]
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b566:	81bb      	strh	r3, [r7, #12]
 800b568:	89bb      	ldrh	r3, [r7, #12]
 800b56a:	f083 0320 	eor.w	r3, r3, #32
 800b56e:	81bb      	strh	r3, [r7, #12]
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	441a      	add	r2, r3
 800b57a:	89bb      	ldrh	r3, [r7, #12]
 800b57c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	8013      	strh	r3, [r2, #0]
 800b590:	e2cb      	b.n	800bb2a <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	4413      	add	r3, r2
 800b59c:	881b      	ldrh	r3, [r3, #0]
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5a8:	81fb      	strh	r3, [r7, #14]
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	441a      	add	r2, r3
 800b5b4:	89fb      	ldrh	r3, [r7, #14]
 800b5b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	8013      	strh	r3, [r2, #0]
 800b5ca:	e2ae      	b.n	800bb2a <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	633b      	str	r3, [r7, #48]	; 0x30
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	461a      	mov	r2, r3
 800b5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5dc:	4413      	add	r3, r2
 800b5de:	633b      	str	r3, [r7, #48]	; 0x30
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	00da      	lsls	r2, r3, #3
 800b5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e8:	4413      	add	r3, r2
 800b5ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b5ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	88db      	ldrh	r3, [r3, #6]
 800b5f4:	085b      	lsrs	r3, r3, #1
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	005b      	lsls	r3, r3, #1
 800b5fa:	b29a      	uxth	r2, r3
 800b5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5fe:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	62bb      	str	r3, [r7, #40]	; 0x28
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	461a      	mov	r2, r3
 800b60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b610:	4413      	add	r3, r2
 800b612:	62bb      	str	r3, [r7, #40]	; 0x28
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	00da      	lsls	r2, r3, #3
 800b61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61c:	4413      	add	r3, r2
 800b61e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b622:	627b      	str	r3, [r7, #36]	; 0x24
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	691b      	ldr	r3, [r3, #16]
 800b628:	2b3e      	cmp	r3, #62	; 0x3e
 800b62a:	d918      	bls.n	800b65e <USB_ActivateEndpoint+0x296>
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	691b      	ldr	r3, [r3, #16]
 800b630:	095b      	lsrs	r3, r3, #5
 800b632:	66bb      	str	r3, [r7, #104]	; 0x68
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	691b      	ldr	r3, [r3, #16]
 800b638:	f003 031f 	and.w	r3, r3, #31
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d102      	bne.n	800b646 <USB_ActivateEndpoint+0x27e>
 800b640:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b642:	3b01      	subs	r3, #1
 800b644:	66bb      	str	r3, [r7, #104]	; 0x68
 800b646:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b648:	b29b      	uxth	r3, r3
 800b64a:	029b      	lsls	r3, r3, #10
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b656:	b29a      	uxth	r2, r3
 800b658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65a:	801a      	strh	r2, [r3, #0]
 800b65c:	e029      	b.n	800b6b2 <USB_ActivateEndpoint+0x2ea>
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	691b      	ldr	r3, [r3, #16]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d112      	bne.n	800b68c <USB_ActivateEndpoint+0x2c4>
 800b666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b668:	881b      	ldrh	r3, [r3, #0]
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b670:	b29a      	uxth	r2, r3
 800b672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b674:	801a      	strh	r2, [r3, #0]
 800b676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b678:	881b      	ldrh	r3, [r3, #0]
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b684:	b29a      	uxth	r2, r3
 800b686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b688:	801a      	strh	r2, [r3, #0]
 800b68a:	e012      	b.n	800b6b2 <USB_ActivateEndpoint+0x2ea>
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	691b      	ldr	r3, [r3, #16]
 800b690:	085b      	lsrs	r3, r3, #1
 800b692:	66bb      	str	r3, [r7, #104]	; 0x68
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	691b      	ldr	r3, [r3, #16]
 800b698:	f003 0301 	and.w	r3, r3, #1
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d002      	beq.n	800b6a6 <USB_ActivateEndpoint+0x2de>
 800b6a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	029b      	lsls	r3, r3, #10
 800b6ac:	b29a      	uxth	r2, r3
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	4413      	add	r3, r2
 800b6bc:	881b      	ldrh	r3, [r3, #0]
 800b6be:	847b      	strh	r3, [r7, #34]	; 0x22
 800b6c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d01b      	beq.n	800b702 <USB_ActivateEndpoint+0x33a>
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	4413      	add	r3, r2
 800b6d4:	881b      	ldrh	r3, [r3, #0]
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6e0:	843b      	strh	r3, [r7, #32]
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	441a      	add	r2, r3
 800b6ec:	8c3b      	ldrh	r3, [r7, #32]
 800b6ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b6fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d124      	bne.n	800b754 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	4413      	add	r3, r2
 800b714:	881b      	ldrh	r3, [r3, #0]
 800b716:	b29b      	uxth	r3, r3
 800b718:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b71c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b720:	83bb      	strh	r3, [r7, #28]
 800b722:	8bbb      	ldrh	r3, [r7, #28]
 800b724:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b728:	83bb      	strh	r3, [r7, #28]
 800b72a:	8bbb      	ldrh	r3, [r7, #28]
 800b72c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b730:	83bb      	strh	r3, [r7, #28]
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	441a      	add	r2, r3
 800b73c:	8bbb      	ldrh	r3, [r7, #28]
 800b73e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b74a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b74e:	b29b      	uxth	r3, r3
 800b750:	8013      	strh	r3, [r2, #0]
 800b752:	e1ea      	b.n	800bb2a <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	4413      	add	r3, r2
 800b75e:	881b      	ldrh	r3, [r3, #0]
 800b760:	b29b      	uxth	r3, r3
 800b762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b76a:	83fb      	strh	r3, [r7, #30]
 800b76c:	8bfb      	ldrh	r3, [r7, #30]
 800b76e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b772:	83fb      	strh	r3, [r7, #30]
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	441a      	add	r2, r3
 800b77e:	8bfb      	ldrh	r3, [r7, #30]
 800b780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b78c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b790:	b29b      	uxth	r3, r3
 800b792:	8013      	strh	r3, [r2, #0]
 800b794:	e1c9      	b.n	800bb2a <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	78db      	ldrb	r3, [r3, #3]
 800b79a:	2b02      	cmp	r3, #2
 800b79c:	d11e      	bne.n	800b7dc <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b79e:	687a      	ldr	r2, [r7, #4]
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	4413      	add	r3, r2
 800b7a8:	881b      	ldrh	r3, [r3, #0]
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7b4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	441a      	add	r2, r3
 800b7c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b7c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7ce:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b7d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	8013      	strh	r3, [r2, #0]
 800b7da:	e01d      	b.n	800b818 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	4413      	add	r3, r2
 800b7e6:	881b      	ldrh	r3, [r3, #0]
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b7ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7f2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	009b      	lsls	r3, r3, #2
 800b7fe:	441a      	add	r2, r3
 800b800:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800b804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b80c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b814:	b29b      	uxth	r3, r3
 800b816:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b822:	b29b      	uxth	r3, r3
 800b824:	461a      	mov	r2, r3
 800b826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b828:	4413      	add	r3, r2
 800b82a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	00da      	lsls	r2, r3, #3
 800b832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b834:	4413      	add	r3, r2
 800b836:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b83a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	891b      	ldrh	r3, [r3, #8]
 800b840:	085b      	lsrs	r3, r3, #1
 800b842:	b29b      	uxth	r3, r3
 800b844:	005b      	lsls	r3, r3, #1
 800b846:	b29a      	uxth	r2, r3
 800b848:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b84a:	801a      	strh	r2, [r3, #0]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	657b      	str	r3, [r7, #84]	; 0x54
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b856:	b29b      	uxth	r3, r3
 800b858:	461a      	mov	r2, r3
 800b85a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b85c:	4413      	add	r3, r2
 800b85e:	657b      	str	r3, [r7, #84]	; 0x54
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	00da      	lsls	r2, r3, #3
 800b866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b868:	4413      	add	r3, r2
 800b86a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b86e:	653b      	str	r3, [r7, #80]	; 0x50
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	895b      	ldrh	r3, [r3, #10]
 800b874:	085b      	lsrs	r3, r3, #1
 800b876:	b29b      	uxth	r3, r3
 800b878:	005b      	lsls	r3, r3, #1
 800b87a:	b29a      	uxth	r2, r3
 800b87c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b87e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	785b      	ldrb	r3, [r3, #1]
 800b884:	2b00      	cmp	r3, #0
 800b886:	f040 8093 	bne.w	800b9b0 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	009b      	lsls	r3, r3, #2
 800b892:	4413      	add	r3, r2
 800b894:	881b      	ldrh	r3, [r3, #0]
 800b896:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b89a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b89e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d01b      	beq.n	800b8de <USB_ActivateEndpoint+0x516>
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	009b      	lsls	r3, r3, #2
 800b8ae:	4413      	add	r3, r2
 800b8b0:	881b      	ldrh	r3, [r3, #0]
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	009b      	lsls	r3, r3, #2
 800b8c6:	441a      	add	r2, r3
 800b8c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b8ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b8d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	4413      	add	r3, r2
 800b8e8:	881b      	ldrh	r3, [r3, #0]
 800b8ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b8ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b8ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d01b      	beq.n	800b92e <USB_ActivateEndpoint+0x566>
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	009b      	lsls	r3, r3, #2
 800b8fe:	4413      	add	r3, r2
 800b900:	881b      	ldrh	r3, [r3, #0]
 800b902:	b29b      	uxth	r3, r3
 800b904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b90c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	441a      	add	r2, r3
 800b918:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b91a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b91e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b926:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	4413      	add	r3, r2
 800b938:	881b      	ldrh	r3, [r3, #0]
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b944:	873b      	strh	r3, [r7, #56]	; 0x38
 800b946:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b948:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b94c:	873b      	strh	r3, [r7, #56]	; 0x38
 800b94e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b950:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b954:	873b      	strh	r3, [r7, #56]	; 0x38
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	441a      	add	r2, r3
 800b960:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b96a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b96e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b972:	b29b      	uxth	r3, r3
 800b974:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	4413      	add	r3, r2
 800b980:	881b      	ldrh	r3, [r3, #0]
 800b982:	b29b      	uxth	r3, r3
 800b984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b98c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	441a      	add	r2, r3
 800b998:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b99a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b99e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	8013      	strh	r3, [r2, #0]
 800b9ae:	e0bc      	b.n	800bb2a <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	4413      	add	r3, r2
 800b9ba:	881b      	ldrh	r3, [r3, #0]
 800b9bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b9c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b9c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d01d      	beq.n	800ba08 <USB_ActivateEndpoint+0x640>
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	4413      	add	r3, r2
 800b9d6:	881b      	ldrh	r3, [r3, #0]
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9e2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	441a      	add	r2, r3
 800b9f0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b9f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ba00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba04:	b29b      	uxth	r3, r3
 800ba06:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	4413      	add	r3, r2
 800ba12:	881b      	ldrh	r3, [r3, #0]
 800ba14:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ba18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ba1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d01d      	beq.n	800ba60 <USB_ActivateEndpoint+0x698>
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	4413      	add	r3, r2
 800ba2e:	881b      	ldrh	r3, [r3, #0]
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba3a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	441a      	add	r2, r3
 800ba48:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ba4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	78db      	ldrb	r3, [r3, #3]
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d024      	beq.n	800bab2 <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	4413      	add	r3, r2
 800ba72:	881b      	ldrh	r3, [r3, #0]
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba7e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ba82:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ba86:	f083 0320 	eor.w	r3, r3, #32
 800ba8a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	009b      	lsls	r3, r3, #2
 800ba96:	441a      	add	r2, r3
 800ba98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ba9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800baa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800baa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800baa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baac:	b29b      	uxth	r3, r3
 800baae:	8013      	strh	r3, [r2, #0]
 800bab0:	e01d      	b.n	800baee <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	4413      	add	r3, r2
 800babc:	881b      	ldrh	r3, [r3, #0]
 800babe:	b29b      	uxth	r3, r3
 800bac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bac8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	441a      	add	r2, r3
 800bad6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800bada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baea:	b29b      	uxth	r3, r3
 800baec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	4413      	add	r3, r2
 800baf8:	881b      	ldrh	r3, [r3, #0]
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb04:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	009b      	lsls	r3, r3, #2
 800bb10:	441a      	add	r2, r3
 800bb12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bb16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800bb2a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3774      	adds	r7, #116	; 0x74
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop

0800bb3c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b08d      	sub	sp, #52	; 0x34
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	7b1b      	ldrb	r3, [r3, #12]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	f040 808e 	bne.w	800bc6c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	785b      	ldrb	r3, [r3, #1]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d044      	beq.n	800bbe2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	781b      	ldrb	r3, [r3, #0]
 800bb5e:	009b      	lsls	r3, r3, #2
 800bb60:	4413      	add	r3, r2
 800bb62:	881b      	ldrh	r3, [r3, #0]
 800bb64:	81bb      	strh	r3, [r7, #12]
 800bb66:	89bb      	ldrh	r3, [r7, #12]
 800bb68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d01b      	beq.n	800bba8 <USB_DeactivateEndpoint+0x6c>
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	4413      	add	r3, r2
 800bb7a:	881b      	ldrh	r3, [r3, #0]
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb86:	817b      	strh	r3, [r7, #10]
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	441a      	add	r2, r3
 800bb92:	897b      	ldrh	r3, [r7, #10]
 800bb94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bba0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	4413      	add	r3, r2
 800bbb2:	881b      	ldrh	r3, [r3, #0]
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbbe:	813b      	strh	r3, [r7, #8]
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	441a      	add	r2, r3
 800bbca:	893b      	ldrh	r3, [r7, #8]
 800bbcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	8013      	strh	r3, [r2, #0]
 800bbe0:	e192      	b.n	800bf08 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	4413      	add	r3, r2
 800bbec:	881b      	ldrh	r3, [r3, #0]
 800bbee:	827b      	strh	r3, [r7, #18]
 800bbf0:	8a7b      	ldrh	r3, [r7, #18]
 800bbf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d01b      	beq.n	800bc32 <USB_DeactivateEndpoint+0xf6>
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	4413      	add	r3, r2
 800bc04:	881b      	ldrh	r3, [r3, #0]
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc10:	823b      	strh	r3, [r7, #16]
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	441a      	add	r2, r3
 800bc1c:	8a3b      	ldrh	r3, [r7, #16]
 800bc1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bc2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	4413      	add	r3, r2
 800bc3c:	881b      	ldrh	r3, [r3, #0]
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc48:	81fb      	strh	r3, [r7, #14]
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	441a      	add	r2, r3
 800bc54:	89fb      	ldrh	r3, [r7, #14]
 800bc56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	8013      	strh	r3, [r2, #0]
 800bc6a:	e14d      	b.n	800bf08 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	785b      	ldrb	r3, [r3, #1]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	f040 80a5 	bne.w	800bdc0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	4413      	add	r3, r2
 800bc80:	881b      	ldrh	r3, [r3, #0]
 800bc82:	843b      	strh	r3, [r7, #32]
 800bc84:	8c3b      	ldrh	r3, [r7, #32]
 800bc86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d01b      	beq.n	800bcc6 <USB_DeactivateEndpoint+0x18a>
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	4413      	add	r3, r2
 800bc98:	881b      	ldrh	r3, [r3, #0]
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bca4:	83fb      	strh	r3, [r7, #30]
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	441a      	add	r2, r3
 800bcb0:	8bfb      	ldrh	r3, [r7, #30]
 800bcb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bcb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bcba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bcbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bcc6:	687a      	ldr	r2, [r7, #4]
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	4413      	add	r3, r2
 800bcd0:	881b      	ldrh	r3, [r3, #0]
 800bcd2:	83bb      	strh	r3, [r7, #28]
 800bcd4:	8bbb      	ldrh	r3, [r7, #28]
 800bcd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d01b      	beq.n	800bd16 <USB_DeactivateEndpoint+0x1da>
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	009b      	lsls	r3, r3, #2
 800bce6:	4413      	add	r3, r2
 800bce8:	881b      	ldrh	r3, [r3, #0]
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcf4:	837b      	strh	r3, [r7, #26]
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	441a      	add	r2, r3
 800bd00:	8b7b      	ldrh	r3, [r7, #26]
 800bd02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	4413      	add	r3, r2
 800bd20:	881b      	ldrh	r3, [r3, #0]
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd2c:	833b      	strh	r3, [r7, #24]
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	441a      	add	r2, r3
 800bd38:	8b3b      	ldrh	r3, [r7, #24]
 800bd3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	4413      	add	r3, r2
 800bd58:	881b      	ldrh	r3, [r3, #0]
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd64:	82fb      	strh	r3, [r7, #22]
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	441a      	add	r2, r3
 800bd70:	8afb      	ldrh	r3, [r7, #22]
 800bd72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd82:	b29b      	uxth	r3, r3
 800bd84:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	4413      	add	r3, r2
 800bd90:	881b      	ldrh	r3, [r3, #0]
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd9c:	82bb      	strh	r3, [r7, #20]
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	441a      	add	r2, r3
 800bda8:	8abb      	ldrh	r3, [r7, #20]
 800bdaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	8013      	strh	r3, [r2, #0]
 800bdbe:	e0a3      	b.n	800bf08 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	009b      	lsls	r3, r3, #2
 800bdc8:	4413      	add	r3, r2
 800bdca:	881b      	ldrh	r3, [r3, #0]
 800bdcc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bdce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bdd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d01b      	beq.n	800be10 <USB_DeactivateEndpoint+0x2d4>
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	4413      	add	r3, r2
 800bde2:	881b      	ldrh	r3, [r3, #0]
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	009b      	lsls	r3, r3, #2
 800bdf8:	441a      	add	r2, r3
 800bdfa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bdfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800be08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	009b      	lsls	r3, r3, #2
 800be18:	4413      	add	r3, r2
 800be1a:	881b      	ldrh	r3, [r3, #0]
 800be1c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800be1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800be20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be24:	2b00      	cmp	r3, #0
 800be26:	d01b      	beq.n	800be60 <USB_DeactivateEndpoint+0x324>
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	009b      	lsls	r3, r3, #2
 800be30:	4413      	add	r3, r2
 800be32:	881b      	ldrh	r3, [r3, #0]
 800be34:	b29b      	uxth	r3, r3
 800be36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be3e:	853b      	strh	r3, [r7, #40]	; 0x28
 800be40:	687a      	ldr	r2, [r7, #4]
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	441a      	add	r2, r3
 800be4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800be4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	4413      	add	r3, r2
 800be6a:	881b      	ldrh	r3, [r3, #0]
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be76:	84fb      	strh	r3, [r7, #38]	; 0x26
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	441a      	add	r2, r3
 800be82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800be90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be94:	b29b      	uxth	r3, r3
 800be96:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	009b      	lsls	r3, r3, #2
 800bea0:	4413      	add	r3, r2
 800bea2:	881b      	ldrh	r3, [r3, #0]
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800beaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800beae:	84bb      	strh	r3, [r7, #36]	; 0x24
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	441a      	add	r2, r3
 800beba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800becc:	b29b      	uxth	r3, r3
 800bece:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	4413      	add	r3, r2
 800beda:	881b      	ldrh	r3, [r3, #0]
 800bedc:	b29b      	uxth	r3, r3
 800bede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bee6:	847b      	strh	r3, [r7, #34]	; 0x22
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	441a      	add	r2, r3
 800bef2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800befc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800bf08:	2300      	movs	r3, #0
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3734      	adds	r7, #52	; 0x34
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr

0800bf16 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bf16:	b580      	push	{r7, lr}
 800bf18:	b0c2      	sub	sp, #264	; 0x108
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf24:	6018      	str	r0, [r3, #0]
 800bf26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf2e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bf30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	785b      	ldrb	r3, [r3, #1]
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	f040 867b 	bne.w	800cc38 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800bf42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	699a      	ldr	r2, [r3, #24]
 800bf4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	691b      	ldr	r3, [r3, #16]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d908      	bls.n	800bf70 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800bf5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	691b      	ldr	r3, [r3, #16]
 800bf6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800bf6e:	e007      	b.n	800bf80 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800bf70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	699b      	ldr	r3, [r3, #24]
 800bf7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800bf80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	7b1b      	ldrb	r3, [r3, #12]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d13a      	bne.n	800c006 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800bf90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	6959      	ldr	r1, [r3, #20]
 800bf9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	88da      	ldrh	r2, [r3, #6]
 800bfa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bfb2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bfb6:	6800      	ldr	r0, [r0, #0]
 800bfb8:	f001 fc3e 	bl	800d838 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bfbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	613b      	str	r3, [r7, #16]
 800bfc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	461a      	mov	r2, r3
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	4413      	add	r3, r2
 800bfde:	613b      	str	r3, [r7, #16]
 800bfe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	00da      	lsls	r2, r3, #3
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	4413      	add	r3, r2
 800bff2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bff6:	60fb      	str	r3, [r7, #12]
 800bff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bffc:	b29a      	uxth	r2, r3
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	801a      	strh	r2, [r3, #0]
 800c002:	f000 bde3 	b.w	800cbcc <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c00a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	78db      	ldrb	r3, [r3, #3]
 800c012:	2b02      	cmp	r3, #2
 800c014:	f040 843a 	bne.w	800c88c <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c01c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	6a1a      	ldr	r2, [r3, #32]
 800c024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	691b      	ldr	r3, [r3, #16]
 800c030:	429a      	cmp	r2, r3
 800c032:	f240 83b7 	bls.w	800c7a4 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c03a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	009b      	lsls	r3, r3, #2
 800c04e:	4413      	add	r3, r2
 800c050:	881b      	ldrh	r3, [r3, #0]
 800c052:	b29b      	uxth	r3, r3
 800c054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c05c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800c060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c064:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c06e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	441a      	add	r2, r3
 800c07a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c07e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c086:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c08a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c08e:	b29b      	uxth	r3, r3
 800c090:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	6a1a      	ldr	r2, [r3, #32]
 800c09e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0a2:	1ad2      	subs	r2, r2, r3
 800c0a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c0b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	4413      	add	r3, r2
 800c0ca:	881b      	ldrh	r3, [r3, #0]
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	f000 81b3 	beq.w	800c43e <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c0d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	633b      	str	r3, [r7, #48]	; 0x30
 800c0e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	785b      	ldrb	r3, [r3, #1]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d16d      	bne.n	800c1d0 <USB_EPStartXfer+0x2ba>
 800c0f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800c100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c104:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c10e:	b29b      	uxth	r3, r3
 800c110:	461a      	mov	r2, r3
 800c112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c114:	4413      	add	r3, r2
 800c116:	62bb      	str	r3, [r7, #40]	; 0x28
 800c118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c11c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	00da      	lsls	r2, r3, #3
 800c126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c128:	4413      	add	r3, r2
 800c12a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c12e:	627b      	str	r3, [r7, #36]	; 0x24
 800c130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c134:	2b3e      	cmp	r3, #62	; 0x3e
 800c136:	d91c      	bls.n	800c172 <USB_EPStartXfer+0x25c>
 800c138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c13c:	095b      	lsrs	r3, r3, #5
 800c13e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c146:	f003 031f 	and.w	r3, r3, #31
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d104      	bne.n	800c158 <USB_EPStartXfer+0x242>
 800c14e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c152:	3b01      	subs	r3, #1
 800c154:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c158:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c15c:	b29b      	uxth	r3, r3
 800c15e:	029b      	lsls	r3, r3, #10
 800c160:	b29b      	uxth	r3, r3
 800c162:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c166:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c16a:	b29a      	uxth	r2, r3
 800c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16e:	801a      	strh	r2, [r3, #0]
 800c170:	e053      	b.n	800c21a <USB_EPStartXfer+0x304>
 800c172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c176:	2b00      	cmp	r3, #0
 800c178:	d112      	bne.n	800c1a0 <USB_EPStartXfer+0x28a>
 800c17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17c:	881b      	ldrh	r3, [r3, #0]
 800c17e:	b29b      	uxth	r3, r3
 800c180:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c184:	b29a      	uxth	r2, r3
 800c186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c188:	801a      	strh	r2, [r3, #0]
 800c18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18c:	881b      	ldrh	r3, [r3, #0]
 800c18e:	b29b      	uxth	r3, r3
 800c190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c198:	b29a      	uxth	r2, r3
 800c19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19c:	801a      	strh	r2, [r3, #0]
 800c19e:	e03c      	b.n	800c21a <USB_EPStartXfer+0x304>
 800c1a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1a4:	085b      	lsrs	r3, r3, #1
 800c1a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c1aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1ae:	f003 0301 	and.w	r3, r3, #1
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d004      	beq.n	800c1c0 <USB_EPStartXfer+0x2aa>
 800c1b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c1c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	029b      	lsls	r3, r3, #10
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1cc:	801a      	strh	r2, [r3, #0]
 800c1ce:	e024      	b.n	800c21a <USB_EPStartXfer+0x304>
 800c1d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	785b      	ldrb	r3, [r3, #1]
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d11c      	bne.n	800c21a <USB_EPStartXfer+0x304>
 800c1e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f4:	4413      	add	r3, r2
 800c1f6:	633b      	str	r3, [r7, #48]	; 0x30
 800c1f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	00da      	lsls	r2, r3, #3
 800c206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c208:	4413      	add	r3, r2
 800c20a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c20e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c214:	b29a      	uxth	r2, r3
 800c216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c218:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c21a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c21e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	895b      	ldrh	r3, [r3, #10]
 800c226:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c22a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c22e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	6959      	ldr	r1, [r3, #20]
 800c236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c240:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c244:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c248:	6800      	ldr	r0, [r0, #0]
 800c24a:	f001 faf5 	bl	800d838 <USB_WritePMA>
            ep->xfer_buff += len;
 800c24e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	695a      	ldr	r2, [r3, #20]
 800c25a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c25e:	441a      	add	r2, r3
 800c260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c26c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	6a1a      	ldr	r2, [r3, #32]
 800c278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c27c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	691b      	ldr	r3, [r3, #16]
 800c284:	429a      	cmp	r2, r3
 800c286:	d90f      	bls.n	800c2a8 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800c288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c28c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	6a1a      	ldr	r2, [r3, #32]
 800c294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c298:	1ad2      	subs	r2, r2, r3
 800c29a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c29e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	621a      	str	r2, [r3, #32]
 800c2a6:	e00e      	b.n	800c2c6 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800c2a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	6a1b      	ldr	r3, [r3, #32]
 800c2b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800c2b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c2c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	785b      	ldrb	r3, [r3, #1]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d16d      	bne.n	800c3b2 <USB_EPStartXfer+0x49c>
 800c2d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	61bb      	str	r3, [r7, #24]
 800c2e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	69bb      	ldr	r3, [r7, #24]
 800c2f6:	4413      	add	r3, r2
 800c2f8:	61bb      	str	r3, [r7, #24]
 800c2fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	00da      	lsls	r2, r3, #3
 800c308:	69bb      	ldr	r3, [r7, #24]
 800c30a:	4413      	add	r3, r2
 800c30c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c310:	617b      	str	r3, [r7, #20]
 800c312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c316:	2b3e      	cmp	r3, #62	; 0x3e
 800c318:	d91c      	bls.n	800c354 <USB_EPStartXfer+0x43e>
 800c31a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c31e:	095b      	lsrs	r3, r3, #5
 800c320:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c328:	f003 031f 	and.w	r3, r3, #31
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d104      	bne.n	800c33a <USB_EPStartXfer+0x424>
 800c330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c334:	3b01      	subs	r3, #1
 800c336:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c33a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c33e:	b29b      	uxth	r3, r3
 800c340:	029b      	lsls	r3, r3, #10
 800c342:	b29b      	uxth	r3, r3
 800c344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c34c:	b29a      	uxth	r2, r3
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	801a      	strh	r2, [r3, #0]
 800c352:	e059      	b.n	800c408 <USB_EPStartXfer+0x4f2>
 800c354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d112      	bne.n	800c382 <USB_EPStartXfer+0x46c>
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	881b      	ldrh	r3, [r3, #0]
 800c360:	b29b      	uxth	r3, r3
 800c362:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c366:	b29a      	uxth	r2, r3
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	801a      	strh	r2, [r3, #0]
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	881b      	ldrh	r3, [r3, #0]
 800c370:	b29b      	uxth	r3, r3
 800c372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c37a:	b29a      	uxth	r2, r3
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	801a      	strh	r2, [r3, #0]
 800c380:	e042      	b.n	800c408 <USB_EPStartXfer+0x4f2>
 800c382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c386:	085b      	lsrs	r3, r3, #1
 800c388:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c390:	f003 0301 	and.w	r3, r3, #1
 800c394:	2b00      	cmp	r3, #0
 800c396:	d004      	beq.n	800c3a2 <USB_EPStartXfer+0x48c>
 800c398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c39c:	3301      	adds	r3, #1
 800c39e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c3a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	029b      	lsls	r3, r3, #10
 800c3aa:	b29a      	uxth	r2, r3
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	801a      	strh	r2, [r3, #0]
 800c3b0:	e02a      	b.n	800c408 <USB_EPStartXfer+0x4f2>
 800c3b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	785b      	ldrb	r3, [r3, #1]
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	d122      	bne.n	800c408 <USB_EPStartXfer+0x4f2>
 800c3c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	623b      	str	r3, [r7, #32]
 800c3ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	461a      	mov	r2, r3
 800c3e0:	6a3b      	ldr	r3, [r7, #32]
 800c3e2:	4413      	add	r3, r2
 800c3e4:	623b      	str	r3, [r7, #32]
 800c3e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	00da      	lsls	r2, r3, #3
 800c3f4:	6a3b      	ldr	r3, [r7, #32]
 800c3f6:	4413      	add	r3, r2
 800c3f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c3fc:	61fb      	str	r3, [r7, #28]
 800c3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c402:	b29a      	uxth	r2, r3
 800c404:	69fb      	ldr	r3, [r7, #28]
 800c406:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c40c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	891b      	ldrh	r3, [r3, #8]
 800c414:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c41c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	6959      	ldr	r1, [r3, #20]
 800c424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c428:	b29b      	uxth	r3, r3
 800c42a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c42e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c432:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c436:	6800      	ldr	r0, [r0, #0]
 800c438:	f001 f9fe 	bl	800d838 <USB_WritePMA>
 800c43c:	e3c6      	b.n	800cbcc <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c43e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	785b      	ldrb	r3, [r3, #1]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d16d      	bne.n	800c52a <USB_EPStartXfer+0x614>
 800c44e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c452:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	64bb      	str	r3, [r7, #72]	; 0x48
 800c45a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c45e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c468:	b29b      	uxth	r3, r3
 800c46a:	461a      	mov	r2, r3
 800c46c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c46e:	4413      	add	r3, r2
 800c470:	64bb      	str	r3, [r7, #72]	; 0x48
 800c472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	00da      	lsls	r2, r3, #3
 800c480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c482:	4413      	add	r3, r2
 800c484:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c488:	647b      	str	r3, [r7, #68]	; 0x44
 800c48a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c48e:	2b3e      	cmp	r3, #62	; 0x3e
 800c490:	d91c      	bls.n	800c4cc <USB_EPStartXfer+0x5b6>
 800c492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c496:	095b      	lsrs	r3, r3, #5
 800c498:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c49c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4a0:	f003 031f 	and.w	r3, r3, #31
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d104      	bne.n	800c4b2 <USB_EPStartXfer+0x59c>
 800c4a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c4ac:	3b01      	subs	r3, #1
 800c4ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c4b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	029b      	lsls	r3, r3, #10
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4c4:	b29a      	uxth	r2, r3
 800c4c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4c8:	801a      	strh	r2, [r3, #0]
 800c4ca:	e059      	b.n	800c580 <USB_EPStartXfer+0x66a>
 800c4cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d112      	bne.n	800c4fa <USB_EPStartXfer+0x5e4>
 800c4d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4d6:	881b      	ldrh	r3, [r3, #0]
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c4de:	b29a      	uxth	r2, r3
 800c4e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4e2:	801a      	strh	r2, [r3, #0]
 800c4e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4e6:	881b      	ldrh	r3, [r3, #0]
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4f2:	b29a      	uxth	r2, r3
 800c4f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4f6:	801a      	strh	r2, [r3, #0]
 800c4f8:	e042      	b.n	800c580 <USB_EPStartXfer+0x66a>
 800c4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4fe:	085b      	lsrs	r3, r3, #1
 800c500:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c508:	f003 0301 	and.w	r3, r3, #1
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d004      	beq.n	800c51a <USB_EPStartXfer+0x604>
 800c510:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c514:	3301      	adds	r3, #1
 800c516:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c51a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c51e:	b29b      	uxth	r3, r3
 800c520:	029b      	lsls	r3, r3, #10
 800c522:	b29a      	uxth	r2, r3
 800c524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c526:	801a      	strh	r2, [r3, #0]
 800c528:	e02a      	b.n	800c580 <USB_EPStartXfer+0x66a>
 800c52a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c52e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	785b      	ldrb	r3, [r3, #1]
 800c536:	2b01      	cmp	r3, #1
 800c538:	d122      	bne.n	800c580 <USB_EPStartXfer+0x66a>
 800c53a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c53e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	653b      	str	r3, [r7, #80]	; 0x50
 800c546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c54a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c554:	b29b      	uxth	r3, r3
 800c556:	461a      	mov	r2, r3
 800c558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c55a:	4413      	add	r3, r2
 800c55c:	653b      	str	r3, [r7, #80]	; 0x50
 800c55e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	00da      	lsls	r2, r3, #3
 800c56c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c56e:	4413      	add	r3, r2
 800c570:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c574:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c57a:	b29a      	uxth	r2, r3
 800c57c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c57e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	891b      	ldrh	r3, [r3, #8]
 800c58c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	6959      	ldr	r1, [r3, #20]
 800c59c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5a0:	b29b      	uxth	r3, r3
 800c5a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c5a6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c5aa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c5ae:	6800      	ldr	r0, [r0, #0]
 800c5b0:	f001 f942 	bl	800d838 <USB_WritePMA>
            ep->xfer_buff += len;
 800c5b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	695a      	ldr	r2, [r3, #20]
 800c5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5c4:	441a      	add	r2, r3
 800c5c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c5d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	6a1a      	ldr	r2, [r3, #32]
 800c5de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	691b      	ldr	r3, [r3, #16]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d90f      	bls.n	800c60e <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800c5ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	6a1a      	ldr	r2, [r3, #32]
 800c5fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5fe:	1ad2      	subs	r2, r2, r3
 800c600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	621a      	str	r2, [r3, #32]
 800c60c:	e00e      	b.n	800c62c <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800c60e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	6a1b      	ldr	r3, [r3, #32]
 800c61a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800c61e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	2200      	movs	r2, #0
 800c62a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c62c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c630:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	643b      	str	r3, [r7, #64]	; 0x40
 800c638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c63c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	785b      	ldrb	r3, [r3, #1]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d16d      	bne.n	800c724 <USB_EPStartXfer+0x80e>
 800c648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c64c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	63bb      	str	r3, [r7, #56]	; 0x38
 800c654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c658:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c662:	b29b      	uxth	r3, r3
 800c664:	461a      	mov	r2, r3
 800c666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c668:	4413      	add	r3, r2
 800c66a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c66c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	00da      	lsls	r2, r3, #3
 800c67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67c:	4413      	add	r3, r2
 800c67e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c682:	637b      	str	r3, [r7, #52]	; 0x34
 800c684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c688:	2b3e      	cmp	r3, #62	; 0x3e
 800c68a:	d91c      	bls.n	800c6c6 <USB_EPStartXfer+0x7b0>
 800c68c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c690:	095b      	lsrs	r3, r3, #5
 800c692:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c69a:	f003 031f 	and.w	r3, r3, #31
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d104      	bne.n	800c6ac <USB_EPStartXfer+0x796>
 800c6a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6a6:	3b01      	subs	r3, #1
 800c6a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c6ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	029b      	lsls	r3, r3, #10
 800c6b4:	b29b      	uxth	r3, r3
 800c6b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6be:	b29a      	uxth	r2, r3
 800c6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c2:	801a      	strh	r2, [r3, #0]
 800c6c4:	e053      	b.n	800c76e <USB_EPStartXfer+0x858>
 800c6c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d112      	bne.n	800c6f4 <USB_EPStartXfer+0x7de>
 800c6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d0:	881b      	ldrh	r3, [r3, #0]
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c6d8:	b29a      	uxth	r2, r3
 800c6da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6dc:	801a      	strh	r2, [r3, #0]
 800c6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6e0:	881b      	ldrh	r3, [r3, #0]
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6ec:	b29a      	uxth	r2, r3
 800c6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6f0:	801a      	strh	r2, [r3, #0]
 800c6f2:	e03c      	b.n	800c76e <USB_EPStartXfer+0x858>
 800c6f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6f8:	085b      	lsrs	r3, r3, #1
 800c6fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c702:	f003 0301 	and.w	r3, r3, #1
 800c706:	2b00      	cmp	r3, #0
 800c708:	d004      	beq.n	800c714 <USB_EPStartXfer+0x7fe>
 800c70a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c70e:	3301      	adds	r3, #1
 800c710:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c718:	b29b      	uxth	r3, r3
 800c71a:	029b      	lsls	r3, r3, #10
 800c71c:	b29a      	uxth	r2, r3
 800c71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c720:	801a      	strh	r2, [r3, #0]
 800c722:	e024      	b.n	800c76e <USB_EPStartXfer+0x858>
 800c724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	785b      	ldrb	r3, [r3, #1]
 800c730:	2b01      	cmp	r3, #1
 800c732:	d11c      	bne.n	800c76e <USB_EPStartXfer+0x858>
 800c734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c738:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c742:	b29b      	uxth	r3, r3
 800c744:	461a      	mov	r2, r3
 800c746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c748:	4413      	add	r3, r2
 800c74a:	643b      	str	r3, [r7, #64]	; 0x40
 800c74c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	00da      	lsls	r2, r3, #3
 800c75a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c75c:	4413      	add	r3, r2
 800c75e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c762:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c768:	b29a      	uxth	r2, r3
 800c76a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c76c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c76e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	895b      	ldrh	r3, [r3, #10]
 800c77a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c77e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	6959      	ldr	r1, [r3, #20]
 800c78a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c78e:	b29b      	uxth	r3, r3
 800c790:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c794:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c798:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c79c:	6800      	ldr	r0, [r0, #0]
 800c79e:	f001 f84b 	bl	800d838 <USB_WritePMA>
 800c7a2:	e213      	b.n	800cbcc <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c7a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	6a1b      	ldr	r3, [r3, #32]
 800c7b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c7b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	4413      	add	r3, r2
 800c7ce:	881b      	ldrh	r3, [r3, #0]
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800c7d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7da:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800c7de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	781b      	ldrb	r3, [r3, #0]
 800c7f4:	009b      	lsls	r3, r3, #2
 800c7f6:	441a      	add	r2, r3
 800c7f8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c7fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c800:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c814:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c81c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c820:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	461a      	mov	r2, r3
 800c82e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c830:	4413      	add	r3, r2
 800c832:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	00da      	lsls	r2, r3, #3
 800c842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c844:	4413      	add	r3, r2
 800c846:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c84a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c84c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c850:	b29a      	uxth	r2, r3
 800c852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c854:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c85a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	891b      	ldrh	r3, [r3, #8]
 800c862:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c86a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	6959      	ldr	r1, [r3, #20]
 800c872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c876:	b29b      	uxth	r3, r3
 800c878:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c87c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c880:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c884:	6800      	ldr	r0, [r0, #0]
 800c886:	f000 ffd7 	bl	800d838 <USB_WritePMA>
 800c88a:	e19f      	b.n	800cbcc <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c88c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	6a1a      	ldr	r2, [r3, #32]
 800c898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c89c:	1ad2      	subs	r2, r2, r3
 800c89e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c8aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	009b      	lsls	r3, r3, #2
 800c8c2:	4413      	add	r3, r2
 800c8c4:	881b      	ldrh	r3, [r3, #0]
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	f000 80bc 	beq.w	800ca4a <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c8d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	673b      	str	r3, [r7, #112]	; 0x70
 800c8de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	785b      	ldrb	r3, [r3, #1]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d16d      	bne.n	800c9ca <USB_EPStartXfer+0xab4>
 800c8ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	66bb      	str	r3, [r7, #104]	; 0x68
 800c8fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c908:	b29b      	uxth	r3, r3
 800c90a:	461a      	mov	r2, r3
 800c90c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c90e:	4413      	add	r3, r2
 800c910:	66bb      	str	r3, [r7, #104]	; 0x68
 800c912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	00da      	lsls	r2, r3, #3
 800c920:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c922:	4413      	add	r3, r2
 800c924:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c928:	667b      	str	r3, [r7, #100]	; 0x64
 800c92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c92e:	2b3e      	cmp	r3, #62	; 0x3e
 800c930:	d91c      	bls.n	800c96c <USB_EPStartXfer+0xa56>
 800c932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c936:	095b      	lsrs	r3, r3, #5
 800c938:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c93c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c940:	f003 031f 	and.w	r3, r3, #31
 800c944:	2b00      	cmp	r3, #0
 800c946:	d104      	bne.n	800c952 <USB_EPStartXfer+0xa3c>
 800c948:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c94c:	3b01      	subs	r3, #1
 800c94e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c952:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c956:	b29b      	uxth	r3, r3
 800c958:	029b      	lsls	r3, r3, #10
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c964:	b29a      	uxth	r2, r3
 800c966:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c968:	801a      	strh	r2, [r3, #0]
 800c96a:	e053      	b.n	800ca14 <USB_EPStartXfer+0xafe>
 800c96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c970:	2b00      	cmp	r3, #0
 800c972:	d112      	bne.n	800c99a <USB_EPStartXfer+0xa84>
 800c974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c976:	881b      	ldrh	r3, [r3, #0]
 800c978:	b29b      	uxth	r3, r3
 800c97a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c97e:	b29a      	uxth	r2, r3
 800c980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c982:	801a      	strh	r2, [r3, #0]
 800c984:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c986:	881b      	ldrh	r3, [r3, #0]
 800c988:	b29b      	uxth	r3, r3
 800c98a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c98e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c992:	b29a      	uxth	r2, r3
 800c994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c996:	801a      	strh	r2, [r3, #0]
 800c998:	e03c      	b.n	800ca14 <USB_EPStartXfer+0xafe>
 800c99a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c99e:	085b      	lsrs	r3, r3, #1
 800c9a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c9a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9a8:	f003 0301 	and.w	r3, r3, #1
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d004      	beq.n	800c9ba <USB_EPStartXfer+0xaa4>
 800c9b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c9ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	029b      	lsls	r3, r3, #10
 800c9c2:	b29a      	uxth	r2, r3
 800c9c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9c6:	801a      	strh	r2, [r3, #0]
 800c9c8:	e024      	b.n	800ca14 <USB_EPStartXfer+0xafe>
 800c9ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	785b      	ldrb	r3, [r3, #1]
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	d11c      	bne.n	800ca14 <USB_EPStartXfer+0xafe>
 800c9da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9e8:	b29b      	uxth	r3, r3
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9ee:	4413      	add	r3, r2
 800c9f0:	673b      	str	r3, [r7, #112]	; 0x70
 800c9f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	00da      	lsls	r2, r3, #3
 800ca00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca02:	4413      	add	r3, r2
 800ca04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ca08:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ca0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca0e:	b29a      	uxth	r2, r3
 800ca10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca12:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ca14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	895b      	ldrh	r3, [r3, #10]
 800ca20:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ca24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	6959      	ldr	r1, [r3, #20]
 800ca30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ca3a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ca3e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ca42:	6800      	ldr	r0, [r0, #0]
 800ca44:	f000 fef8 	bl	800d838 <USB_WritePMA>
 800ca48:	e0c0      	b.n	800cbcc <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ca4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	785b      	ldrb	r3, [r3, #1]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d16d      	bne.n	800cb36 <USB_EPStartXfer+0xc20>
 800ca5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ca66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	461a      	mov	r2, r3
 800ca78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca7a:	4413      	add	r3, r2
 800ca7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ca7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	00da      	lsls	r2, r3, #3
 800ca8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca8e:	4413      	add	r3, r2
 800ca90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ca94:	67bb      	str	r3, [r7, #120]	; 0x78
 800ca96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca9a:	2b3e      	cmp	r3, #62	; 0x3e
 800ca9c:	d91c      	bls.n	800cad8 <USB_EPStartXfer+0xbc2>
 800ca9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800caa2:	095b      	lsrs	r3, r3, #5
 800caa4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800caa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800caac:	f003 031f 	and.w	r3, r3, #31
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d104      	bne.n	800cabe <USB_EPStartXfer+0xba8>
 800cab4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800cab8:	3b01      	subs	r3, #1
 800caba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cabe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800cac2:	b29b      	uxth	r3, r3
 800cac4:	029b      	lsls	r3, r3, #10
 800cac6:	b29b      	uxth	r3, r3
 800cac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cacc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cad0:	b29a      	uxth	r2, r3
 800cad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cad4:	801a      	strh	r2, [r3, #0]
 800cad6:	e05f      	b.n	800cb98 <USB_EPStartXfer+0xc82>
 800cad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d112      	bne.n	800cb06 <USB_EPStartXfer+0xbf0>
 800cae0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cae2:	881b      	ldrh	r3, [r3, #0]
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800caea:	b29a      	uxth	r2, r3
 800caec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800caee:	801a      	strh	r2, [r3, #0]
 800caf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800caf2:	881b      	ldrh	r3, [r3, #0]
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cafa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cafe:	b29a      	uxth	r2, r3
 800cb00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb02:	801a      	strh	r2, [r3, #0]
 800cb04:	e048      	b.n	800cb98 <USB_EPStartXfer+0xc82>
 800cb06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb0a:	085b      	lsrs	r3, r3, #1
 800cb0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cb10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb14:	f003 0301 	and.w	r3, r3, #1
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d004      	beq.n	800cb26 <USB_EPStartXfer+0xc10>
 800cb1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800cb20:	3301      	adds	r3, #1
 800cb22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cb26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	029b      	lsls	r3, r3, #10
 800cb2e:	b29a      	uxth	r2, r3
 800cb30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb32:	801a      	strh	r2, [r3, #0]
 800cb34:	e030      	b.n	800cb98 <USB_EPStartXfer+0xc82>
 800cb36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	785b      	ldrb	r3, [r3, #1]
 800cb42:	2b01      	cmp	r3, #1
 800cb44:	d128      	bne.n	800cb98 <USB_EPStartXfer+0xc82>
 800cb46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cb54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb62:	b29b      	uxth	r3, r3
 800cb64:	461a      	mov	r2, r3
 800cb66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cb6a:	4413      	add	r3, r2
 800cb6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cb70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	00da      	lsls	r2, r3, #3
 800cb7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cb82:	4413      	add	r3, r2
 800cb84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cb88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cb8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb90:	b29a      	uxth	r2, r3
 800cb92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cb96:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cb98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	891b      	ldrh	r3, [r3, #8]
 800cba4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	6959      	ldr	r1, [r3, #20]
 800cbb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cbbe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cbc2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cbc6:	6800      	ldr	r0, [r0, #0]
 800cbc8:	f000 fe36 	bl	800d838 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800cbcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cbd4:	681a      	ldr	r2, [r3, #0]
 800cbd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	4413      	add	r3, r2
 800cbe6:	881b      	ldrh	r3, [r3, #0]
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cbee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbf2:	817b      	strh	r3, [r7, #10]
 800cbf4:	897b      	ldrh	r3, [r7, #10]
 800cbf6:	f083 0310 	eor.w	r3, r3, #16
 800cbfa:	817b      	strh	r3, [r7, #10]
 800cbfc:	897b      	ldrh	r3, [r7, #10]
 800cbfe:	f083 0320 	eor.w	r3, r3, #32
 800cc02:	817b      	strh	r3, [r7, #10]
 800cc04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	441a      	add	r2, r3
 800cc1e:	897b      	ldrh	r3, [r7, #10]
 800cc20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	8013      	strh	r3, [r2, #0]
 800cc34:	f000 bc9f 	b.w	800d576 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800cc38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	7b1b      	ldrb	r3, [r3, #12]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	f040 80ae 	bne.w	800cda6 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800cc4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	699a      	ldr	r2, [r3, #24]
 800cc56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	691b      	ldr	r3, [r3, #16]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d917      	bls.n	800cc96 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800cc66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	691b      	ldr	r3, [r3, #16]
 800cc72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800cc76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	699a      	ldr	r2, [r3, #24]
 800cc82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc86:	1ad2      	subs	r2, r2, r3
 800cc88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	619a      	str	r2, [r3, #24]
 800cc94:	e00e      	b.n	800ccb4 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800cc96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	699b      	ldr	r3, [r3, #24]
 800cca2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800cca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ccb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ccc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ccd0:	b29b      	uxth	r3, r3
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ccd8:	4413      	add	r3, r2
 800ccda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ccde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cce2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	00da      	lsls	r2, r3, #3
 800ccec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ccf0:	4413      	add	r3, r2
 800ccf2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ccf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ccfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccfe:	2b3e      	cmp	r3, #62	; 0x3e
 800cd00:	d91d      	bls.n	800cd3e <USB_EPStartXfer+0xe28>
 800cd02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd06:	095b      	lsrs	r3, r3, #5
 800cd08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cd0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd10:	f003 031f 	and.w	r3, r3, #31
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d104      	bne.n	800cd22 <USB_EPStartXfer+0xe0c>
 800cd18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cd1c:	3b01      	subs	r3, #1
 800cd1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cd22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	029b      	lsls	r3, r3, #10
 800cd2a:	b29b      	uxth	r3, r3
 800cd2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd34:	b29a      	uxth	r2, r3
 800cd36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd3a:	801a      	strh	r2, [r3, #0]
 800cd3c:	e3e1      	b.n	800d502 <USB_EPStartXfer+0x15ec>
 800cd3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d116      	bne.n	800cd74 <USB_EPStartXfer+0xe5e>
 800cd46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd4a:	881b      	ldrh	r3, [r3, #0]
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cd52:	b29a      	uxth	r2, r3
 800cd54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd58:	801a      	strh	r2, [r3, #0]
 800cd5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd5e:	881b      	ldrh	r3, [r3, #0]
 800cd60:	b29b      	uxth	r3, r3
 800cd62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd6a:	b29a      	uxth	r2, r3
 800cd6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd70:	801a      	strh	r2, [r3, #0]
 800cd72:	e3c6      	b.n	800d502 <USB_EPStartXfer+0x15ec>
 800cd74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd78:	085b      	lsrs	r3, r3, #1
 800cd7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cd7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd82:	f003 0301 	and.w	r3, r3, #1
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d004      	beq.n	800cd94 <USB_EPStartXfer+0xe7e>
 800cd8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cd8e:	3301      	adds	r3, #1
 800cd90:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cd94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cd98:	b29b      	uxth	r3, r3
 800cd9a:	029b      	lsls	r3, r3, #10
 800cd9c:	b29a      	uxth	r2, r3
 800cd9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cda2:	801a      	strh	r2, [r3, #0]
 800cda4:	e3ad      	b.n	800d502 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800cda6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	78db      	ldrb	r3, [r3, #3]
 800cdb2:	2b02      	cmp	r3, #2
 800cdb4:	f040 8200 	bne.w	800d1b8 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800cdb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	785b      	ldrb	r3, [r3, #1]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	f040 8091 	bne.w	800ceec <USB_EPStartXfer+0xfd6>
 800cdca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cdd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cddc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	461a      	mov	r2, r3
 800cdea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cdee:	4413      	add	r3, r2
 800cdf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cdf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	781b      	ldrb	r3, [r3, #0]
 800ce00:	00da      	lsls	r2, r3, #3
 800ce02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce06:	4413      	add	r3, r2
 800ce08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ce0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ce10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	691b      	ldr	r3, [r3, #16]
 800ce1c:	2b3e      	cmp	r3, #62	; 0x3e
 800ce1e:	d925      	bls.n	800ce6c <USB_EPStartXfer+0xf56>
 800ce20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	691b      	ldr	r3, [r3, #16]
 800ce2c:	095b      	lsrs	r3, r3, #5
 800ce2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ce32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	691b      	ldr	r3, [r3, #16]
 800ce3e:	f003 031f 	and.w	r3, r3, #31
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d104      	bne.n	800ce50 <USB_EPStartXfer+0xf3a>
 800ce46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce4a:	3b01      	subs	r3, #1
 800ce4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ce50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce54:	b29b      	uxth	r3, r3
 800ce56:	029b      	lsls	r3, r3, #10
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce62:	b29a      	uxth	r2, r3
 800ce64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ce68:	801a      	strh	r2, [r3, #0]
 800ce6a:	e074      	b.n	800cf56 <USB_EPStartXfer+0x1040>
 800ce6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	691b      	ldr	r3, [r3, #16]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d116      	bne.n	800ceaa <USB_EPStartXfer+0xf94>
 800ce7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ce80:	881b      	ldrh	r3, [r3, #0]
 800ce82:	b29b      	uxth	r3, r3
 800ce84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ce88:	b29a      	uxth	r2, r3
 800ce8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ce8e:	801a      	strh	r2, [r3, #0]
 800ce90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ce94:	881b      	ldrh	r3, [r3, #0]
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cea0:	b29a      	uxth	r2, r3
 800cea2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cea6:	801a      	strh	r2, [r3, #0]
 800cea8:	e055      	b.n	800cf56 <USB_EPStartXfer+0x1040>
 800ceaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ceae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	691b      	ldr	r3, [r3, #16]
 800ceb6:	085b      	lsrs	r3, r3, #1
 800ceb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	691b      	ldr	r3, [r3, #16]
 800cec8:	f003 0301 	and.w	r3, r3, #1
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d004      	beq.n	800ceda <USB_EPStartXfer+0xfc4>
 800ced0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ced4:	3301      	adds	r3, #1
 800ced6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ceda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cede:	b29b      	uxth	r3, r3
 800cee0:	029b      	lsls	r3, r3, #10
 800cee2:	b29a      	uxth	r2, r3
 800cee4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cee8:	801a      	strh	r2, [r3, #0]
 800ceea:	e034      	b.n	800cf56 <USB_EPStartXfer+0x1040>
 800ceec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	785b      	ldrb	r3, [r3, #1]
 800cef8:	2b01      	cmp	r3, #1
 800cefa:	d12c      	bne.n	800cf56 <USB_EPStartXfer+0x1040>
 800cefc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cf0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf18:	b29b      	uxth	r3, r3
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cf20:	4413      	add	r3, r2
 800cf22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cf26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	00da      	lsls	r2, r3, #3
 800cf34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cf38:	4413      	add	r3, r2
 800cf3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cf3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cf42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	691b      	ldr	r3, [r3, #16]
 800cf4e:	b29a      	uxth	r2, r3
 800cf50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cf54:	801a      	strh	r2, [r3, #0]
 800cf56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cf64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	785b      	ldrb	r3, [r3, #1]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	f040 8091 	bne.w	800d098 <USB_EPStartXfer+0x1182>
 800cf76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cf84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	461a      	mov	r2, r3
 800cf96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cf9a:	4413      	add	r3, r2
 800cf9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cfa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	00da      	lsls	r2, r3, #3
 800cfae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cfb2:	4413      	add	r3, r2
 800cfb4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cfb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cfbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	691b      	ldr	r3, [r3, #16]
 800cfc8:	2b3e      	cmp	r3, #62	; 0x3e
 800cfca:	d925      	bls.n	800d018 <USB_EPStartXfer+0x1102>
 800cfcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	691b      	ldr	r3, [r3, #16]
 800cfd8:	095b      	lsrs	r3, r3, #5
 800cfda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cfde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	691b      	ldr	r3, [r3, #16]
 800cfea:	f003 031f 	and.w	r3, r3, #31
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d104      	bne.n	800cffc <USB_EPStartXfer+0x10e6>
 800cff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cff6:	3b01      	subs	r3, #1
 800cff8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d000:	b29b      	uxth	r3, r3
 800d002:	029b      	lsls	r3, r3, #10
 800d004:	b29b      	uxth	r3, r3
 800d006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d00a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d00e:	b29a      	uxth	r2, r3
 800d010:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d014:	801a      	strh	r2, [r3, #0]
 800d016:	e06d      	b.n	800d0f4 <USB_EPStartXfer+0x11de>
 800d018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d01c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	691b      	ldr	r3, [r3, #16]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d116      	bne.n	800d056 <USB_EPStartXfer+0x1140>
 800d028:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d02c:	881b      	ldrh	r3, [r3, #0]
 800d02e:	b29b      	uxth	r3, r3
 800d030:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d034:	b29a      	uxth	r2, r3
 800d036:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d03a:	801a      	strh	r2, [r3, #0]
 800d03c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d040:	881b      	ldrh	r3, [r3, #0]
 800d042:	b29b      	uxth	r3, r3
 800d044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d04c:	b29a      	uxth	r2, r3
 800d04e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d052:	801a      	strh	r2, [r3, #0]
 800d054:	e04e      	b.n	800d0f4 <USB_EPStartXfer+0x11de>
 800d056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d05a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	691b      	ldr	r3, [r3, #16]
 800d062:	085b      	lsrs	r3, r3, #1
 800d064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d06c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	691b      	ldr	r3, [r3, #16]
 800d074:	f003 0301 	and.w	r3, r3, #1
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d004      	beq.n	800d086 <USB_EPStartXfer+0x1170>
 800d07c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d080:	3301      	adds	r3, #1
 800d082:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d08a:	b29b      	uxth	r3, r3
 800d08c:	029b      	lsls	r3, r3, #10
 800d08e:	b29a      	uxth	r2, r3
 800d090:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d094:	801a      	strh	r2, [r3, #0]
 800d096:	e02d      	b.n	800d0f4 <USB_EPStartXfer+0x11de>
 800d098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d09c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	785b      	ldrb	r3, [r3, #1]
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d125      	bne.n	800d0f4 <USB_EPStartXfer+0x11de>
 800d0a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d0b6:	b29b      	uxth	r3, r3
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d0be:	4413      	add	r3, r2
 800d0c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d0c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	00da      	lsls	r2, r3, #3
 800d0d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d0d6:	4413      	add	r3, r2
 800d0d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d0dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d0e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	691b      	ldr	r3, [r3, #16]
 800d0ec:	b29a      	uxth	r2, r3
 800d0ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d0f2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d0f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	69db      	ldr	r3, [r3, #28]
 800d100:	2b00      	cmp	r3, #0
 800d102:	f000 81fe 	beq.w	800d502 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d10a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d10e:	681a      	ldr	r2, [r3, #0]
 800d110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	009b      	lsls	r3, r3, #2
 800d11e:	4413      	add	r3, r2
 800d120:	881b      	ldrh	r3, [r3, #0]
 800d122:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d126:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d12a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d005      	beq.n	800d13e <USB_EPStartXfer+0x1228>
 800d132:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d10d      	bne.n	800d15a <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d13e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d146:	2b00      	cmp	r3, #0
 800d148:	f040 81db 	bne.w	800d502 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d14c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d154:	2b00      	cmp	r3, #0
 800d156:	f040 81d4 	bne.w	800d502 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d15a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d15e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	009b      	lsls	r3, r3, #2
 800d172:	4413      	add	r3, r2
 800d174:	881b      	ldrh	r3, [r3, #0]
 800d176:	b29b      	uxth	r3, r3
 800d178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d17c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d180:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800d184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d188:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d18c:	681a      	ldr	r2, [r3, #0]
 800d18e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	441a      	add	r2, r3
 800d19e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800d1a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d1a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d1aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d1ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d1b2:	b29b      	uxth	r3, r3
 800d1b4:	8013      	strh	r3, [r2, #0]
 800d1b6:	e1a4      	b.n	800d502 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d1b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	78db      	ldrb	r3, [r3, #3]
 800d1c4:	2b01      	cmp	r3, #1
 800d1c6:	f040 819a 	bne.w	800d4fe <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d1ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	699a      	ldr	r2, [r3, #24]
 800d1d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	691b      	ldr	r3, [r3, #16]
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d917      	bls.n	800d216 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800d1e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	691b      	ldr	r3, [r3, #16]
 800d1f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800d1f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	699a      	ldr	r2, [r3, #24]
 800d202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d206:	1ad2      	subs	r2, r2, r3
 800d208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d20c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	619a      	str	r2, [r3, #24]
 800d214:	e00e      	b.n	800d234 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800d216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d21a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	699b      	ldr	r3, [r3, #24]
 800d222:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800d226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d22a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	2200      	movs	r2, #0
 800d232:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	785b      	ldrb	r3, [r3, #1]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d178      	bne.n	800d336 <USB_EPStartXfer+0x1420>
 800d244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d248:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d256:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d260:	b29b      	uxth	r3, r3
 800d262:	461a      	mov	r2, r3
 800d264:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d268:	4413      	add	r3, r2
 800d26a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d26e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	00da      	lsls	r2, r3, #3
 800d27c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d280:	4413      	add	r3, r2
 800d282:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d286:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d28a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d28e:	2b3e      	cmp	r3, #62	; 0x3e
 800d290:	d91d      	bls.n	800d2ce <USB_EPStartXfer+0x13b8>
 800d292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d296:	095b      	lsrs	r3, r3, #5
 800d298:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d29c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2a0:	f003 031f 	and.w	r3, r3, #31
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d104      	bne.n	800d2b2 <USB_EPStartXfer+0x139c>
 800d2a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2ac:	3b01      	subs	r3, #1
 800d2ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d2b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	029b      	lsls	r3, r3, #10
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2c4:	b29a      	uxth	r2, r3
 800d2c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d2ca:	801a      	strh	r2, [r3, #0]
 800d2cc:	e064      	b.n	800d398 <USB_EPStartXfer+0x1482>
 800d2ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d116      	bne.n	800d304 <USB_EPStartXfer+0x13ee>
 800d2d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d2da:	881b      	ldrh	r3, [r3, #0]
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d2e2:	b29a      	uxth	r2, r3
 800d2e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d2e8:	801a      	strh	r2, [r3, #0]
 800d2ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d2ee:	881b      	ldrh	r3, [r3, #0]
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2fa:	b29a      	uxth	r2, r3
 800d2fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d300:	801a      	strh	r2, [r3, #0]
 800d302:	e049      	b.n	800d398 <USB_EPStartXfer+0x1482>
 800d304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d308:	085b      	lsrs	r3, r3, #1
 800d30a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d312:	f003 0301 	and.w	r3, r3, #1
 800d316:	2b00      	cmp	r3, #0
 800d318:	d004      	beq.n	800d324 <USB_EPStartXfer+0x140e>
 800d31a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d31e:	3301      	adds	r3, #1
 800d320:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d328:	b29b      	uxth	r3, r3
 800d32a:	029b      	lsls	r3, r3, #10
 800d32c:	b29a      	uxth	r2, r3
 800d32e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d332:	801a      	strh	r2, [r3, #0]
 800d334:	e030      	b.n	800d398 <USB_EPStartXfer+0x1482>
 800d336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d33a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	785b      	ldrb	r3, [r3, #1]
 800d342:	2b01      	cmp	r3, #1
 800d344:	d128      	bne.n	800d398 <USB_EPStartXfer+0x1482>
 800d346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d34a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d358:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d362:	b29b      	uxth	r3, r3
 800d364:	461a      	mov	r2, r3
 800d366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d36a:	4413      	add	r3, r2
 800d36c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	00da      	lsls	r2, r3, #3
 800d37e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d382:	4413      	add	r3, r2
 800d384:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d390:	b29a      	uxth	r2, r3
 800d392:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d396:	801a      	strh	r2, [r3, #0]
 800d398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d39c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d3a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	785b      	ldrb	r3, [r3, #1]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d178      	bne.n	800d4a8 <USB_EPStartXfer+0x1592>
 800d3b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d3c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d3da:	4413      	add	r3, r2
 800d3dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d3e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	00da      	lsls	r2, r3, #3
 800d3ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d3f2:	4413      	add	r3, r2
 800d3f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d3f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d3fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d400:	2b3e      	cmp	r3, #62	; 0x3e
 800d402:	d91d      	bls.n	800d440 <USB_EPStartXfer+0x152a>
 800d404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d408:	095b      	lsrs	r3, r3, #5
 800d40a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d40e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d412:	f003 031f 	and.w	r3, r3, #31
 800d416:	2b00      	cmp	r3, #0
 800d418:	d104      	bne.n	800d424 <USB_EPStartXfer+0x150e>
 800d41a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d41e:	3b01      	subs	r3, #1
 800d420:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d424:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d428:	b29b      	uxth	r3, r3
 800d42a:	029b      	lsls	r3, r3, #10
 800d42c:	b29b      	uxth	r3, r3
 800d42e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d436:	b29a      	uxth	r2, r3
 800d438:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d43c:	801a      	strh	r2, [r3, #0]
 800d43e:	e060      	b.n	800d502 <USB_EPStartXfer+0x15ec>
 800d440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d444:	2b00      	cmp	r3, #0
 800d446:	d116      	bne.n	800d476 <USB_EPStartXfer+0x1560>
 800d448:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d44c:	881b      	ldrh	r3, [r3, #0]
 800d44e:	b29b      	uxth	r3, r3
 800d450:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d454:	b29a      	uxth	r2, r3
 800d456:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d45a:	801a      	strh	r2, [r3, #0]
 800d45c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d460:	881b      	ldrh	r3, [r3, #0]
 800d462:	b29b      	uxth	r3, r3
 800d464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d46c:	b29a      	uxth	r2, r3
 800d46e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d472:	801a      	strh	r2, [r3, #0]
 800d474:	e045      	b.n	800d502 <USB_EPStartXfer+0x15ec>
 800d476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d47a:	085b      	lsrs	r3, r3, #1
 800d47c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d484:	f003 0301 	and.w	r3, r3, #1
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d004      	beq.n	800d496 <USB_EPStartXfer+0x1580>
 800d48c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d490:	3301      	adds	r3, #1
 800d492:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d496:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d49a:	b29b      	uxth	r3, r3
 800d49c:	029b      	lsls	r3, r3, #10
 800d49e:	b29a      	uxth	r2, r3
 800d4a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d4a4:	801a      	strh	r2, [r3, #0]
 800d4a6:	e02c      	b.n	800d502 <USB_EPStartXfer+0x15ec>
 800d4a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	785b      	ldrb	r3, [r3, #1]
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d124      	bne.n	800d502 <USB_EPStartXfer+0x15ec>
 800d4b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d4c6:	b29b      	uxth	r3, r3
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d4ce:	4413      	add	r3, r2
 800d4d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d4d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	00da      	lsls	r2, r3, #3
 800d4e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d4e6:	4413      	add	r3, r2
 800d4e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d4ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d4f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4f4:	b29a      	uxth	r2, r3
 800d4f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d4fa:	801a      	strh	r2, [r3, #0]
 800d4fc:	e001      	b.n	800d502 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800d4fe:	2301      	movs	r3, #1
 800d500:	e03a      	b.n	800d578 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d506:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	009b      	lsls	r3, r3, #2
 800d51a:	4413      	add	r3, r2
 800d51c:	881b      	ldrh	r3, [r3, #0]
 800d51e:	b29b      	uxth	r3, r3
 800d520:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d528:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d52c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d530:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d534:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d538:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d53c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d540:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d548:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	009b      	lsls	r3, r3, #2
 800d55c:	441a      	add	r2, r3
 800d55e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d56a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d56e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d572:	b29b      	uxth	r3, r3
 800d574:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d576:	2300      	movs	r3, #0
}
 800d578:	4618      	mov	r0, r3
 800d57a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}

0800d582 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d582:	b480      	push	{r7}
 800d584:	b085      	sub	sp, #20
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
 800d58a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	785b      	ldrb	r3, [r3, #1]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d020      	beq.n	800d5d6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d594:	687a      	ldr	r2, [r7, #4]
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	009b      	lsls	r3, r3, #2
 800d59c:	4413      	add	r3, r2
 800d59e:	881b      	ldrh	r3, [r3, #0]
 800d5a0:	b29b      	uxth	r3, r3
 800d5a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d5a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5aa:	81bb      	strh	r3, [r7, #12]
 800d5ac:	89bb      	ldrh	r3, [r7, #12]
 800d5ae:	f083 0310 	eor.w	r3, r3, #16
 800d5b2:	81bb      	strh	r3, [r7, #12]
 800d5b4:	687a      	ldr	r2, [r7, #4]
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	781b      	ldrb	r3, [r3, #0]
 800d5ba:	009b      	lsls	r3, r3, #2
 800d5bc:	441a      	add	r2, r3
 800d5be:	89bb      	ldrh	r3, [r7, #12]
 800d5c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d5c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d5c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d5cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	8013      	strh	r3, [r2, #0]
 800d5d4:	e01f      	b.n	800d616 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d5d6:	687a      	ldr	r2, [r7, #4]
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	009b      	lsls	r3, r3, #2
 800d5de:	4413      	add	r3, r2
 800d5e0:	881b      	ldrh	r3, [r3, #0]
 800d5e2:	b29b      	uxth	r3, r3
 800d5e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d5e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5ec:	81fb      	strh	r3, [r7, #14]
 800d5ee:	89fb      	ldrh	r3, [r7, #14]
 800d5f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d5f4:	81fb      	strh	r3, [r7, #14]
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	441a      	add	r2, r3
 800d600:	89fb      	ldrh	r3, [r7, #14]
 800d602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d60a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d60e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d612:	b29b      	uxth	r3, r3
 800d614:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d616:	2300      	movs	r3, #0
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3714      	adds	r7, #20
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr

0800d624 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d624:	b480      	push	{r7}
 800d626:	b087      	sub	sp, #28
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	7b1b      	ldrb	r3, [r3, #12]
 800d632:	2b00      	cmp	r3, #0
 800d634:	f040 809d 	bne.w	800d772 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	785b      	ldrb	r3, [r3, #1]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d04c      	beq.n	800d6da <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	4413      	add	r3, r2
 800d64a:	881b      	ldrh	r3, [r3, #0]
 800d64c:	823b      	strh	r3, [r7, #16]
 800d64e:	8a3b      	ldrh	r3, [r7, #16]
 800d650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d654:	2b00      	cmp	r3, #0
 800d656:	d01b      	beq.n	800d690 <USB_EPClearStall+0x6c>
 800d658:	687a      	ldr	r2, [r7, #4]
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	009b      	lsls	r3, r3, #2
 800d660:	4413      	add	r3, r2
 800d662:	881b      	ldrh	r3, [r3, #0]
 800d664:	b29b      	uxth	r3, r3
 800d666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d66a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d66e:	81fb      	strh	r3, [r7, #14]
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	009b      	lsls	r3, r3, #2
 800d678:	441a      	add	r2, r3
 800d67a:	89fb      	ldrh	r3, [r7, #14]
 800d67c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d688:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d68c:	b29b      	uxth	r3, r3
 800d68e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	78db      	ldrb	r3, [r3, #3]
 800d694:	2b01      	cmp	r3, #1
 800d696:	d06c      	beq.n	800d772 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d698:	687a      	ldr	r2, [r7, #4]
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	4413      	add	r3, r2
 800d6a2:	881b      	ldrh	r3, [r3, #0]
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d6aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6ae:	81bb      	strh	r3, [r7, #12]
 800d6b0:	89bb      	ldrh	r3, [r7, #12]
 800d6b2:	f083 0320 	eor.w	r3, r3, #32
 800d6b6:	81bb      	strh	r3, [r7, #12]
 800d6b8:	687a      	ldr	r2, [r7, #4]
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	009b      	lsls	r3, r3, #2
 800d6c0:	441a      	add	r2, r3
 800d6c2:	89bb      	ldrh	r3, [r7, #12]
 800d6c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d6c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d6cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d6d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	8013      	strh	r3, [r2, #0]
 800d6d8:	e04b      	b.n	800d772 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d6da:	687a      	ldr	r2, [r7, #4]
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	781b      	ldrb	r3, [r3, #0]
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	4413      	add	r3, r2
 800d6e4:	881b      	ldrh	r3, [r3, #0]
 800d6e6:	82fb      	strh	r3, [r7, #22]
 800d6e8:	8afb      	ldrh	r3, [r7, #22]
 800d6ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d01b      	beq.n	800d72a <USB_EPClearStall+0x106>
 800d6f2:	687a      	ldr	r2, [r7, #4]
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	009b      	lsls	r3, r3, #2
 800d6fa:	4413      	add	r3, r2
 800d6fc:	881b      	ldrh	r3, [r3, #0]
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d708:	82bb      	strh	r3, [r7, #20]
 800d70a:	687a      	ldr	r2, [r7, #4]
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	009b      	lsls	r3, r3, #2
 800d712:	441a      	add	r2, r3
 800d714:	8abb      	ldrh	r3, [r7, #20]
 800d716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d71a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d71e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d726:	b29b      	uxth	r3, r3
 800d728:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d72a:	687a      	ldr	r2, [r7, #4]
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	009b      	lsls	r3, r3, #2
 800d732:	4413      	add	r3, r2
 800d734:	881b      	ldrh	r3, [r3, #0]
 800d736:	b29b      	uxth	r3, r3
 800d738:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d73c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d740:	827b      	strh	r3, [r7, #18]
 800d742:	8a7b      	ldrh	r3, [r7, #18]
 800d744:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d748:	827b      	strh	r3, [r7, #18]
 800d74a:	8a7b      	ldrh	r3, [r7, #18]
 800d74c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d750:	827b      	strh	r3, [r7, #18]
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	009b      	lsls	r3, r3, #2
 800d75a:	441a      	add	r2, r3
 800d75c:	8a7b      	ldrh	r3, [r7, #18]
 800d75e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d762:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d76a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d76e:	b29b      	uxth	r3, r3
 800d770:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d772:	2300      	movs	r3, #0
}
 800d774:	4618      	mov	r0, r3
 800d776:	371c      	adds	r7, #28
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr

0800d780 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d780:	b480      	push	{r7}
 800d782:	b083      	sub	sp, #12
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	460b      	mov	r3, r1
 800d78a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d78c:	78fb      	ldrb	r3, [r7, #3]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d103      	bne.n	800d79a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2280      	movs	r2, #128	; 0x80
 800d796:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800d79a:	2300      	movs	r3, #0
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	370c      	adds	r7, #12
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr

0800d7a8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b083      	sub	sp, #12
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7c0:	b29a      	uxth	r2, r3
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800d7c8:	2300      	movs	r3, #0
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	370c      	adds	r7, #12
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d4:	4770      	bx	lr

0800d7d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800d7d6:	b480      	push	{r7}
 800d7d8:	b083      	sub	sp, #12
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d7e4:	b29b      	uxth	r3, r3
 800d7e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d7ea:	b29a      	uxth	r2, r3
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800d7f2:	2300      	movs	r3, #0
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	370c      	adds	r7, #12
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr

0800d800 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800d800:	b480      	push	{r7}
 800d802:	b085      	sub	sp, #20
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d80e:	b29b      	uxth	r3, r3
 800d810:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d812:	68fb      	ldr	r3, [r7, #12]
}
 800d814:	4618      	mov	r0, r3
 800d816:	3714      	adds	r7, #20
 800d818:	46bd      	mov	sp, r7
 800d81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81e:	4770      	bx	lr

0800d820 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800d820:	b480      	push	{r7}
 800d822:	b083      	sub	sp, #12
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800d82a:	2300      	movs	r3, #0
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	370c      	adds	r7, #12
 800d830:	46bd      	mov	sp, r7
 800d832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d836:	4770      	bx	lr

0800d838 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d838:	b480      	push	{r7}
 800d83a:	b08b      	sub	sp, #44	; 0x2c
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	60f8      	str	r0, [r7, #12]
 800d840:	60b9      	str	r1, [r7, #8]
 800d842:	4611      	mov	r1, r2
 800d844:	461a      	mov	r2, r3
 800d846:	460b      	mov	r3, r1
 800d848:	80fb      	strh	r3, [r7, #6]
 800d84a:	4613      	mov	r3, r2
 800d84c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d84e:	88bb      	ldrh	r3, [r7, #4]
 800d850:	3301      	adds	r3, #1
 800d852:	085b      	lsrs	r3, r3, #1
 800d854:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d85e:	88fa      	ldrh	r2, [r7, #6]
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	4413      	add	r3, r2
 800d864:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d868:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d86a:	69bb      	ldr	r3, [r7, #24]
 800d86c:	627b      	str	r3, [r7, #36]	; 0x24
 800d86e:	e01b      	b.n	800d8a8 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	3301      	adds	r3, #1
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	021b      	lsls	r3, r3, #8
 800d87e:	b21a      	sxth	r2, r3
 800d880:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d884:	4313      	orrs	r3, r2
 800d886:	b21b      	sxth	r3, r3
 800d888:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800d88a:	6a3b      	ldr	r3, [r7, #32]
 800d88c:	8a7a      	ldrh	r2, [r7, #18]
 800d88e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d890:	6a3b      	ldr	r3, [r7, #32]
 800d892:	3302      	adds	r3, #2
 800d894:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d896:	69fb      	ldr	r3, [r7, #28]
 800d898:	3301      	adds	r3, #1
 800d89a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	3301      	adds	r3, #1
 800d8a0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a4:	3b01      	subs	r3, #1
 800d8a6:	627b      	str	r3, [r7, #36]	; 0x24
 800d8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d1e0      	bne.n	800d870 <USB_WritePMA+0x38>
  }
}
 800d8ae:	bf00      	nop
 800d8b0:	bf00      	nop
 800d8b2:	372c      	adds	r7, #44	; 0x2c
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr

0800d8bc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b08b      	sub	sp, #44	; 0x2c
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	60f8      	str	r0, [r7, #12]
 800d8c4:	60b9      	str	r1, [r7, #8]
 800d8c6:	4611      	mov	r1, r2
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	460b      	mov	r3, r1
 800d8cc:	80fb      	strh	r3, [r7, #6]
 800d8ce:	4613      	mov	r3, r2
 800d8d0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d8d2:	88bb      	ldrh	r3, [r7, #4]
 800d8d4:	085b      	lsrs	r3, r3, #1
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d8e2:	88fa      	ldrh	r2, [r7, #6]
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	4413      	add	r3, r2
 800d8e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d8ec:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d8ee:	69bb      	ldr	r3, [r7, #24]
 800d8f0:	627b      	str	r3, [r7, #36]	; 0x24
 800d8f2:	e018      	b.n	800d926 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800d8f4:	6a3b      	ldr	r3, [r7, #32]
 800d8f6:	881b      	ldrh	r3, [r3, #0]
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d8fc:	6a3b      	ldr	r3, [r7, #32]
 800d8fe:	3302      	adds	r3, #2
 800d900:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	b2da      	uxtb	r2, r3
 800d906:	69fb      	ldr	r3, [r7, #28]
 800d908:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	3301      	adds	r3, #1
 800d90e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	0a1b      	lsrs	r3, r3, #8
 800d914:	b2da      	uxtb	r2, r3
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d91a:	69fb      	ldr	r3, [r7, #28]
 800d91c:	3301      	adds	r3, #1
 800d91e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d922:	3b01      	subs	r3, #1
 800d924:	627b      	str	r3, [r7, #36]	; 0x24
 800d926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d1e3      	bne.n	800d8f4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d92c:	88bb      	ldrh	r3, [r7, #4]
 800d92e:	f003 0301 	and.w	r3, r3, #1
 800d932:	b29b      	uxth	r3, r3
 800d934:	2b00      	cmp	r3, #0
 800d936:	d007      	beq.n	800d948 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800d938:	6a3b      	ldr	r3, [r7, #32]
 800d93a:	881b      	ldrh	r3, [r3, #0]
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	b2da      	uxtb	r2, r3
 800d944:	69fb      	ldr	r3, [r7, #28]
 800d946:	701a      	strb	r2, [r3, #0]
  }
}
 800d948:	bf00      	nop
 800d94a:	372c      	adds	r7, #44	; 0x2c
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr

0800d954 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b084      	sub	sp, #16
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	460b      	mov	r3, r1
 800d95e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d960:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d964:	f002 f960 	bl	800fc28 <USBD_static_malloc>
 800d968:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d105      	bne.n	800d97c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2200      	movs	r2, #0
 800d974:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d978:	2302      	movs	r3, #2
 800d97a:	e066      	b.n	800da4a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	68fa      	ldr	r2, [r7, #12]
 800d980:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	7c1b      	ldrb	r3, [r3, #16]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d119      	bne.n	800d9c0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d98c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d990:	2202      	movs	r2, #2
 800d992:	2181      	movs	r1, #129	; 0x81
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f001 ff7f 	bl	800f898 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2201      	movs	r2, #1
 800d99e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d9a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d9a4:	2202      	movs	r2, #2
 800d9a6:	2101      	movs	r1, #1
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f001 ff75 	bl	800f898 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2210      	movs	r2, #16
 800d9ba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d9be:	e016      	b.n	800d9ee <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d9c0:	2340      	movs	r3, #64	; 0x40
 800d9c2:	2202      	movs	r2, #2
 800d9c4:	2181      	movs	r1, #129	; 0x81
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f001 ff66 	bl	800f898 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d9d2:	2340      	movs	r3, #64	; 0x40
 800d9d4:	2202      	movs	r2, #2
 800d9d6:	2101      	movs	r1, #1
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f001 ff5d 	bl	800f898 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2210      	movs	r2, #16
 800d9ea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d9ee:	2308      	movs	r3, #8
 800d9f0:	2203      	movs	r2, #3
 800d9f2:	2182      	movs	r1, #130	; 0x82
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f001 ff4f 	bl	800f898 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2200      	movs	r2, #0
 800da10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2200      	movs	r2, #0
 800da18:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	7c1b      	ldrb	r3, [r3, #16]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d109      	bne.n	800da38 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800da2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da2e:	2101      	movs	r1, #1
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f002 f8ad 	bl	800fb90 <USBD_LL_PrepareReceive>
 800da36:	e007      	b.n	800da48 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800da3e:	2340      	movs	r3, #64	; 0x40
 800da40:	2101      	movs	r1, #1
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f002 f8a4 	bl	800fb90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800da48:	2300      	movs	r3, #0
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3710      	adds	r7, #16
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}

0800da52 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da52:	b580      	push	{r7, lr}
 800da54:	b082      	sub	sp, #8
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
 800da5a:	460b      	mov	r3, r1
 800da5c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800da5e:	2181      	movs	r1, #129	; 0x81
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f001 ff57 	bl	800f914 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2200      	movs	r2, #0
 800da6a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800da6c:	2101      	movs	r1, #1
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f001 ff50 	bl	800f914 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2200      	movs	r2, #0
 800da78:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800da7c:	2182      	movs	r1, #130	; 0x82
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f001 ff48 	bl	800f914 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2200      	movs	r2, #0
 800da88:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2200      	movs	r2, #0
 800da90:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d00e      	beq.n	800dabc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800daa4:	685b      	ldr	r3, [r3, #4]
 800daa6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800daae:	4618      	mov	r0, r3
 800dab0:	f002 f8c8 	bl	800fc44 <USBD_static_free>
    pdev->pClassData = NULL;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2200      	movs	r2, #0
 800dab8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800dabc:	2300      	movs	r3, #0
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3708      	adds	r7, #8
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
	...

0800dac8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b086      	sub	sp, #24
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dad8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800dada:	2300      	movs	r3, #0
 800dadc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800dade:	2300      	movs	r3, #0
 800dae0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800dae2:	2300      	movs	r3, #0
 800dae4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d101      	bne.n	800daf0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800daec:	2303      	movs	r3, #3
 800daee:	e0af      	b.n	800dc50 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	781b      	ldrb	r3, [r3, #0]
 800daf4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d03f      	beq.n	800db7c <USBD_CDC_Setup+0xb4>
 800dafc:	2b20      	cmp	r3, #32
 800dafe:	f040 809f 	bne.w	800dc40 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	88db      	ldrh	r3, [r3, #6]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d02e      	beq.n	800db68 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	b25b      	sxtb	r3, r3
 800db10:	2b00      	cmp	r3, #0
 800db12:	da16      	bge.n	800db42 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db1a:	689b      	ldr	r3, [r3, #8]
 800db1c:	683a      	ldr	r2, [r7, #0]
 800db1e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800db20:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800db22:	683a      	ldr	r2, [r7, #0]
 800db24:	88d2      	ldrh	r2, [r2, #6]
 800db26:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	88db      	ldrh	r3, [r3, #6]
 800db2c:	2b07      	cmp	r3, #7
 800db2e:	bf28      	it	cs
 800db30:	2307      	movcs	r3, #7
 800db32:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	89fa      	ldrh	r2, [r7, #14]
 800db38:	4619      	mov	r1, r3
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f001 faa5 	bl	800f08a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800db40:	e085      	b.n	800dc4e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	785a      	ldrb	r2, [r3, #1]
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	88db      	ldrh	r3, [r3, #6]
 800db50:	b2da      	uxtb	r2, r3
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800db58:	6939      	ldr	r1, [r7, #16]
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	88db      	ldrh	r3, [r3, #6]
 800db5e:	461a      	mov	r2, r3
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f001 fabe 	bl	800f0e2 <USBD_CtlPrepareRx>
      break;
 800db66:	e072      	b.n	800dc4e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db6e:	689b      	ldr	r3, [r3, #8]
 800db70:	683a      	ldr	r2, [r7, #0]
 800db72:	7850      	ldrb	r0, [r2, #1]
 800db74:	2200      	movs	r2, #0
 800db76:	6839      	ldr	r1, [r7, #0]
 800db78:	4798      	blx	r3
      break;
 800db7a:	e068      	b.n	800dc4e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	785b      	ldrb	r3, [r3, #1]
 800db80:	2b0b      	cmp	r3, #11
 800db82:	d852      	bhi.n	800dc2a <USBD_CDC_Setup+0x162>
 800db84:	a201      	add	r2, pc, #4	; (adr r2, 800db8c <USBD_CDC_Setup+0xc4>)
 800db86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db8a:	bf00      	nop
 800db8c:	0800dbbd 	.word	0x0800dbbd
 800db90:	0800dc39 	.word	0x0800dc39
 800db94:	0800dc2b 	.word	0x0800dc2b
 800db98:	0800dc2b 	.word	0x0800dc2b
 800db9c:	0800dc2b 	.word	0x0800dc2b
 800dba0:	0800dc2b 	.word	0x0800dc2b
 800dba4:	0800dc2b 	.word	0x0800dc2b
 800dba8:	0800dc2b 	.word	0x0800dc2b
 800dbac:	0800dc2b 	.word	0x0800dc2b
 800dbb0:	0800dc2b 	.word	0x0800dc2b
 800dbb4:	0800dbe7 	.word	0x0800dbe7
 800dbb8:	0800dc11 	.word	0x0800dc11
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbc2:	b2db      	uxtb	r3, r3
 800dbc4:	2b03      	cmp	r3, #3
 800dbc6:	d107      	bne.n	800dbd8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dbc8:	f107 030a 	add.w	r3, r7, #10
 800dbcc:	2202      	movs	r2, #2
 800dbce:	4619      	mov	r1, r3
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f001 fa5a 	bl	800f08a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dbd6:	e032      	b.n	800dc3e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800dbd8:	6839      	ldr	r1, [r7, #0]
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f001 f9e4 	bl	800efa8 <USBD_CtlError>
            ret = USBD_FAIL;
 800dbe0:	2303      	movs	r3, #3
 800dbe2:	75fb      	strb	r3, [r7, #23]
          break;
 800dbe4:	e02b      	b.n	800dc3e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbec:	b2db      	uxtb	r3, r3
 800dbee:	2b03      	cmp	r3, #3
 800dbf0:	d107      	bne.n	800dc02 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800dbf2:	f107 030d 	add.w	r3, r7, #13
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f001 fa45 	bl	800f08a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dc00:	e01d      	b.n	800dc3e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800dc02:	6839      	ldr	r1, [r7, #0]
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f001 f9cf 	bl	800efa8 <USBD_CtlError>
            ret = USBD_FAIL;
 800dc0a:	2303      	movs	r3, #3
 800dc0c:	75fb      	strb	r3, [r7, #23]
          break;
 800dc0e:	e016      	b.n	800dc3e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc16:	b2db      	uxtb	r3, r3
 800dc18:	2b03      	cmp	r3, #3
 800dc1a:	d00f      	beq.n	800dc3c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800dc1c:	6839      	ldr	r1, [r7, #0]
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f001 f9c2 	bl	800efa8 <USBD_CtlError>
            ret = USBD_FAIL;
 800dc24:	2303      	movs	r3, #3
 800dc26:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800dc28:	e008      	b.n	800dc3c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800dc2a:	6839      	ldr	r1, [r7, #0]
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f001 f9bb 	bl	800efa8 <USBD_CtlError>
          ret = USBD_FAIL;
 800dc32:	2303      	movs	r3, #3
 800dc34:	75fb      	strb	r3, [r7, #23]
          break;
 800dc36:	e002      	b.n	800dc3e <USBD_CDC_Setup+0x176>
          break;
 800dc38:	bf00      	nop
 800dc3a:	e008      	b.n	800dc4e <USBD_CDC_Setup+0x186>
          break;
 800dc3c:	bf00      	nop
      }
      break;
 800dc3e:	e006      	b.n	800dc4e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800dc40:	6839      	ldr	r1, [r7, #0]
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f001 f9b0 	bl	800efa8 <USBD_CtlError>
      ret = USBD_FAIL;
 800dc48:	2303      	movs	r3, #3
 800dc4a:	75fb      	strb	r3, [r7, #23]
      break;
 800dc4c:	bf00      	nop
  }

  return (uint8_t)ret;
 800dc4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3718      	adds	r7, #24
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b084      	sub	sp, #16
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	460b      	mov	r3, r1
 800dc62:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dc6a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d101      	bne.n	800dc7a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dc76:	2303      	movs	r3, #3
 800dc78:	e04f      	b.n	800dd1a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc80:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800dc82:	78fa      	ldrb	r2, [r7, #3]
 800dc84:	6879      	ldr	r1, [r7, #4]
 800dc86:	4613      	mov	r3, r2
 800dc88:	009b      	lsls	r3, r3, #2
 800dc8a:	4413      	add	r3, r2
 800dc8c:	009b      	lsls	r3, r3, #2
 800dc8e:	440b      	add	r3, r1
 800dc90:	3318      	adds	r3, #24
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d029      	beq.n	800dcec <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800dc98:	78fa      	ldrb	r2, [r7, #3]
 800dc9a:	6879      	ldr	r1, [r7, #4]
 800dc9c:	4613      	mov	r3, r2
 800dc9e:	009b      	lsls	r3, r3, #2
 800dca0:	4413      	add	r3, r2
 800dca2:	009b      	lsls	r3, r3, #2
 800dca4:	440b      	add	r3, r1
 800dca6:	3318      	adds	r3, #24
 800dca8:	681a      	ldr	r2, [r3, #0]
 800dcaa:	78f9      	ldrb	r1, [r7, #3]
 800dcac:	68f8      	ldr	r0, [r7, #12]
 800dcae:	460b      	mov	r3, r1
 800dcb0:	009b      	lsls	r3, r3, #2
 800dcb2:	440b      	add	r3, r1
 800dcb4:	00db      	lsls	r3, r3, #3
 800dcb6:	4403      	add	r3, r0
 800dcb8:	333c      	adds	r3, #60	; 0x3c
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	fbb2 f1f3 	udiv	r1, r2, r3
 800dcc0:	fb01 f303 	mul.w	r3, r1, r3
 800dcc4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d110      	bne.n	800dcec <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800dcca:	78fa      	ldrb	r2, [r7, #3]
 800dccc:	6879      	ldr	r1, [r7, #4]
 800dcce:	4613      	mov	r3, r2
 800dcd0:	009b      	lsls	r3, r3, #2
 800dcd2:	4413      	add	r3, r2
 800dcd4:	009b      	lsls	r3, r3, #2
 800dcd6:	440b      	add	r3, r1
 800dcd8:	3318      	adds	r3, #24
 800dcda:	2200      	movs	r2, #0
 800dcdc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dcde:	78f9      	ldrb	r1, [r7, #3]
 800dce0:	2300      	movs	r3, #0
 800dce2:	2200      	movs	r2, #0
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f001 ff1b 	bl	800fb20 <USBD_LL_Transmit>
 800dcea:	e015      	b.n	800dd18 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dcfa:	691b      	ldr	r3, [r3, #16]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d00b      	beq.n	800dd18 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd06:	691b      	ldr	r3, [r3, #16]
 800dd08:	68ba      	ldr	r2, [r7, #8]
 800dd0a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800dd0e:	68ba      	ldr	r2, [r7, #8]
 800dd10:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800dd14:	78fa      	ldrb	r2, [r7, #3]
 800dd16:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800dd18:	2300      	movs	r3, #0
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3710      	adds	r7, #16
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}

0800dd22 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b084      	sub	sp, #16
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
 800dd2a:	460b      	mov	r3, r1
 800dd2c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd34:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d101      	bne.n	800dd44 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dd40:	2303      	movs	r3, #3
 800dd42:	e015      	b.n	800dd70 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800dd44:	78fb      	ldrb	r3, [r7, #3]
 800dd46:	4619      	mov	r1, r3
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f001 ff59 	bl	800fc00 <USBD_LL_GetRxDataSize>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd5c:	68db      	ldr	r3, [r3, #12]
 800dd5e:	68fa      	ldr	r2, [r7, #12]
 800dd60:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800dd64:	68fa      	ldr	r2, [r7, #12]
 800dd66:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800dd6a:	4611      	mov	r1, r2
 800dd6c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800dd6e:	2300      	movs	r3, #0
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3710      	adds	r7, #16
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd86:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d101      	bne.n	800dd92 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800dd8e:	2303      	movs	r3, #3
 800dd90:	e01b      	b.n	800ddca <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d015      	beq.n	800ddc8 <USBD_CDC_EP0_RxReady+0x50>
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800dda2:	2bff      	cmp	r3, #255	; 0xff
 800dda4:	d010      	beq.n	800ddc8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ddac:	689b      	ldr	r3, [r3, #8]
 800ddae:	68fa      	ldr	r2, [r7, #12]
 800ddb0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ddb4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ddb6:	68fa      	ldr	r2, [r7, #12]
 800ddb8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ddbc:	b292      	uxth	r2, r2
 800ddbe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	22ff      	movs	r2, #255	; 0xff
 800ddc4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ddc8:	2300      	movs	r3, #0
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3710      	adds	r7, #16
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
	...

0800ddd4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b083      	sub	sp, #12
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2243      	movs	r2, #67	; 0x43
 800dde0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800dde2:	4b03      	ldr	r3, [pc, #12]	; (800ddf0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	370c      	adds	r7, #12
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr
 800ddf0:	200000b4 	.word	0x200000b4

0800ddf4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b083      	sub	sp, #12
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2243      	movs	r2, #67	; 0x43
 800de00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800de02:	4b03      	ldr	r3, [pc, #12]	; (800de10 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800de04:	4618      	mov	r0, r3
 800de06:	370c      	adds	r7, #12
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr
 800de10:	20000070 	.word	0x20000070

0800de14 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800de14:	b480      	push	{r7}
 800de16:	b083      	sub	sp, #12
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2243      	movs	r2, #67	; 0x43
 800de20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800de22:	4b03      	ldr	r3, [pc, #12]	; (800de30 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800de24:	4618      	mov	r0, r3
 800de26:	370c      	adds	r7, #12
 800de28:	46bd      	mov	sp, r7
 800de2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2e:	4770      	bx	lr
 800de30:	200000f8 	.word	0x200000f8

0800de34 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800de34:	b480      	push	{r7}
 800de36:	b083      	sub	sp, #12
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	220a      	movs	r2, #10
 800de40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800de42:	4b03      	ldr	r3, [pc, #12]	; (800de50 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800de44:	4618      	mov	r0, r3
 800de46:	370c      	adds	r7, #12
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr
 800de50:	2000002c 	.word	0x2000002c

0800de54 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800de54:	b480      	push	{r7}
 800de56:	b083      	sub	sp, #12
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d101      	bne.n	800de68 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800de64:	2303      	movs	r3, #3
 800de66:	e004      	b.n	800de72 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	683a      	ldr	r2, [r7, #0]
 800de6c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	370c      	adds	r7, #12
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr

0800de7e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800de7e:	b480      	push	{r7}
 800de80:	b087      	sub	sp, #28
 800de82:	af00      	add	r7, sp, #0
 800de84:	60f8      	str	r0, [r7, #12]
 800de86:	60b9      	str	r1, [r7, #8]
 800de88:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de90:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d101      	bne.n	800de9c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800de98:	2303      	movs	r3, #3
 800de9a:	e008      	b.n	800deae <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	68ba      	ldr	r2, [r7, #8]
 800dea0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800dea4:	697b      	ldr	r3, [r7, #20]
 800dea6:	687a      	ldr	r2, [r7, #4]
 800dea8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800deac:	2300      	movs	r3, #0
}
 800deae:	4618      	mov	r0, r3
 800deb0:	371c      	adds	r7, #28
 800deb2:	46bd      	mov	sp, r7
 800deb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb8:	4770      	bx	lr

0800deba <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800deba:	b480      	push	{r7}
 800debc:	b085      	sub	sp, #20
 800debe:	af00      	add	r7, sp, #0
 800dec0:	6078      	str	r0, [r7, #4]
 800dec2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800deca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d101      	bne.n	800ded6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ded2:	2303      	movs	r3, #3
 800ded4:	e004      	b.n	800dee0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	683a      	ldr	r2, [r7, #0]
 800deda:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800dede:	2300      	movs	r3, #0
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3714      	adds	r7, #20
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr

0800deec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800defa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800defc:	2301      	movs	r3, #1
 800defe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df06:	2b00      	cmp	r3, #0
 800df08:	d101      	bne.n	800df0e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800df0a:	2303      	movs	r3, #3
 800df0c:	e01a      	b.n	800df44 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800df14:	2b00      	cmp	r3, #0
 800df16:	d114      	bne.n	800df42 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	2201      	movs	r2, #1
 800df1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800df36:	2181      	movs	r1, #129	; 0x81
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f001 fdf1 	bl	800fb20 <USBD_LL_Transmit>

    ret = USBD_OK;
 800df3e:	2300      	movs	r3, #0
 800df40:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800df42:	7bfb      	ldrb	r3, [r7, #15]
}
 800df44:	4618      	mov	r0, r3
 800df46:	3710      	adds	r7, #16
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}

0800df4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b084      	sub	sp, #16
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df62:	2b00      	cmp	r3, #0
 800df64:	d101      	bne.n	800df6a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800df66:	2303      	movs	r3, #3
 800df68:	e016      	b.n	800df98 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	7c1b      	ldrb	r3, [r3, #16]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d109      	bne.n	800df86 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df78:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df7c:	2101      	movs	r1, #1
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f001 fe06 	bl	800fb90 <USBD_LL_PrepareReceive>
 800df84:	e007      	b.n	800df96 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df8c:	2340      	movs	r3, #64	; 0x40
 800df8e:	2101      	movs	r1, #1
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f001 fdfd 	bl	800fb90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800df96:	2300      	movs	r3, #0
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3710      	adds	r7, #16
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b086      	sub	sp, #24
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	60b9      	str	r1, [r7, #8]
 800dfaa:	4613      	mov	r3, r2
 800dfac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d101      	bne.n	800dfb8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800dfb4:	2303      	movs	r3, #3
 800dfb6:	e01f      	b.n	800dff8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d003      	beq.n	800dfde <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	68ba      	ldr	r2, [r7, #8]
 800dfda:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	79fa      	ldrb	r2, [r7, #7]
 800dfea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800dfec:	68f8      	ldr	r0, [r7, #12]
 800dfee:	f001 fbbf 	bl	800f770 <USBD_LL_Init>
 800dff2:	4603      	mov	r3, r0
 800dff4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800dff6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3718      	adds	r7, #24
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e00a:	2300      	movs	r3, #0
 800e00c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d101      	bne.n	800e018 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e014:	2303      	movs	r3, #3
 800e016:	e016      	b.n	800e046 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	683a      	ldr	r2, [r7, #0]
 800e01c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d00b      	beq.n	800e044 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e034:	f107 020e 	add.w	r2, r7, #14
 800e038:	4610      	mov	r0, r2
 800e03a:	4798      	blx	r3
 800e03c:	4602      	mov	r2, r0
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e044:	2300      	movs	r3, #0
}
 800e046:	4618      	mov	r0, r3
 800e048:	3710      	adds	r7, #16
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}

0800e04e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e04e:	b580      	push	{r7, lr}
 800e050:	b082      	sub	sp, #8
 800e052:	af00      	add	r7, sp, #0
 800e054:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f001 fbec 	bl	800f834 <USBD_LL_Start>
 800e05c:	4603      	mov	r3, r0
}
 800e05e:	4618      	mov	r0, r3
 800e060:	3708      	adds	r7, #8
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}

0800e066 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e066:	b480      	push	{r7}
 800e068:	b083      	sub	sp, #12
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e06e:	2300      	movs	r3, #0
}
 800e070:	4618      	mov	r0, r3
 800e072:	370c      	adds	r7, #12
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr

0800e07c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b084      	sub	sp, #16
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	460b      	mov	r3, r1
 800e086:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e088:	2303      	movs	r3, #3
 800e08a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e092:	2b00      	cmp	r3, #0
 800e094:	d009      	beq.n	800e0aa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	78fa      	ldrb	r2, [r7, #3]
 800e0a0:	4611      	mov	r1, r2
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	4798      	blx	r3
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e0aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3710      	adds	r7, #16
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}

0800e0b4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b082      	sub	sp, #8
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
 800e0bc:	460b      	mov	r3, r1
 800e0be:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d007      	beq.n	800e0da <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0d0:	685b      	ldr	r3, [r3, #4]
 800e0d2:	78fa      	ldrb	r2, [r7, #3]
 800e0d4:	4611      	mov	r1, r2
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	4798      	blx	r3
  }

  return USBD_OK;
 800e0da:	2300      	movs	r3, #0
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3708      	adds	r7, #8
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}

0800e0e4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b084      	sub	sp, #16
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e0f4:	6839      	ldr	r1, [r7, #0]
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f000 ff1c 	bl	800ef34 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2201      	movs	r2, #1
 800e100:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e10a:	461a      	mov	r2, r3
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e118:	f003 031f 	and.w	r3, r3, #31
 800e11c:	2b02      	cmp	r3, #2
 800e11e:	d01a      	beq.n	800e156 <USBD_LL_SetupStage+0x72>
 800e120:	2b02      	cmp	r3, #2
 800e122:	d822      	bhi.n	800e16a <USBD_LL_SetupStage+0x86>
 800e124:	2b00      	cmp	r3, #0
 800e126:	d002      	beq.n	800e12e <USBD_LL_SetupStage+0x4a>
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d00a      	beq.n	800e142 <USBD_LL_SetupStage+0x5e>
 800e12c:	e01d      	b.n	800e16a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e134:	4619      	mov	r1, r3
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f000 f9ee 	bl	800e518 <USBD_StdDevReq>
 800e13c:	4603      	mov	r3, r0
 800e13e:	73fb      	strb	r3, [r7, #15]
      break;
 800e140:	e020      	b.n	800e184 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e148:	4619      	mov	r1, r3
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f000 fa52 	bl	800e5f4 <USBD_StdItfReq>
 800e150:	4603      	mov	r3, r0
 800e152:	73fb      	strb	r3, [r7, #15]
      break;
 800e154:	e016      	b.n	800e184 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e15c:	4619      	mov	r1, r3
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 fa91 	bl	800e686 <USBD_StdEPReq>
 800e164:	4603      	mov	r3, r0
 800e166:	73fb      	strb	r3, [r7, #15]
      break;
 800e168:	e00c      	b.n	800e184 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e170:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e174:	b2db      	uxtb	r3, r3
 800e176:	4619      	mov	r1, r3
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f001 fc01 	bl	800f980 <USBD_LL_StallEP>
 800e17e:	4603      	mov	r3, r0
 800e180:	73fb      	strb	r3, [r7, #15]
      break;
 800e182:	bf00      	nop
  }

  return ret;
 800e184:	7bfb      	ldrb	r3, [r7, #15]
}
 800e186:	4618      	mov	r0, r3
 800e188:	3710      	adds	r7, #16
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}

0800e18e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e18e:	b580      	push	{r7, lr}
 800e190:	b086      	sub	sp, #24
 800e192:	af00      	add	r7, sp, #0
 800e194:	60f8      	str	r0, [r7, #12]
 800e196:	460b      	mov	r3, r1
 800e198:	607a      	str	r2, [r7, #4]
 800e19a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e19c:	7afb      	ldrb	r3, [r7, #11]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d138      	bne.n	800e214 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e1a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e1b0:	2b03      	cmp	r3, #3
 800e1b2:	d14a      	bne.n	800e24a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	689a      	ldr	r2, [r3, #8]
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	68db      	ldr	r3, [r3, #12]
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	d913      	bls.n	800e1e8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	689a      	ldr	r2, [r3, #8]
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	1ad2      	subs	r2, r2, r3
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	68da      	ldr	r2, [r3, #12]
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	689b      	ldr	r3, [r3, #8]
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	bf28      	it	cs
 800e1da:	4613      	movcs	r3, r2
 800e1dc:	461a      	mov	r2, r3
 800e1de:	6879      	ldr	r1, [r7, #4]
 800e1e0:	68f8      	ldr	r0, [r7, #12]
 800e1e2:	f000 ff9b 	bl	800f11c <USBD_CtlContinueRx>
 800e1e6:	e030      	b.n	800e24a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1ee:	b2db      	uxtb	r3, r3
 800e1f0:	2b03      	cmp	r3, #3
 800e1f2:	d10b      	bne.n	800e20c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1fa:	691b      	ldr	r3, [r3, #16]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d005      	beq.n	800e20c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e206:	691b      	ldr	r3, [r3, #16]
 800e208:	68f8      	ldr	r0, [r7, #12]
 800e20a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e20c:	68f8      	ldr	r0, [r7, #12]
 800e20e:	f000 ff96 	bl	800f13e <USBD_CtlSendStatus>
 800e212:	e01a      	b.n	800e24a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	2b03      	cmp	r3, #3
 800e21e:	d114      	bne.n	800e24a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e226:	699b      	ldr	r3, [r3, #24]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d00e      	beq.n	800e24a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e232:	699b      	ldr	r3, [r3, #24]
 800e234:	7afa      	ldrb	r2, [r7, #11]
 800e236:	4611      	mov	r1, r2
 800e238:	68f8      	ldr	r0, [r7, #12]
 800e23a:	4798      	blx	r3
 800e23c:	4603      	mov	r3, r0
 800e23e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e240:	7dfb      	ldrb	r3, [r7, #23]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d001      	beq.n	800e24a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800e246:	7dfb      	ldrb	r3, [r7, #23]
 800e248:	e000      	b.n	800e24c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800e24a:	2300      	movs	r3, #0
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3718      	adds	r7, #24
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b086      	sub	sp, #24
 800e258:	af00      	add	r7, sp, #0
 800e25a:	60f8      	str	r0, [r7, #12]
 800e25c:	460b      	mov	r3, r1
 800e25e:	607a      	str	r2, [r7, #4]
 800e260:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e262:	7afb      	ldrb	r3, [r7, #11]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d16b      	bne.n	800e340 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	3314      	adds	r3, #20
 800e26c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e274:	2b02      	cmp	r3, #2
 800e276:	d156      	bne.n	800e326 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	689a      	ldr	r2, [r3, #8]
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	68db      	ldr	r3, [r3, #12]
 800e280:	429a      	cmp	r2, r3
 800e282:	d914      	bls.n	800e2ae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	689a      	ldr	r2, [r3, #8]
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	68db      	ldr	r3, [r3, #12]
 800e28c:	1ad2      	subs	r2, r2, r3
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	689b      	ldr	r3, [r3, #8]
 800e296:	461a      	mov	r2, r3
 800e298:	6879      	ldr	r1, [r7, #4]
 800e29a:	68f8      	ldr	r0, [r7, #12]
 800e29c:	f000 ff10 	bl	800f0c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	2100      	movs	r1, #0
 800e2a6:	68f8      	ldr	r0, [r7, #12]
 800e2a8:	f001 fc72 	bl	800fb90 <USBD_LL_PrepareReceive>
 800e2ac:	e03b      	b.n	800e326 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	68da      	ldr	r2, [r3, #12]
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	689b      	ldr	r3, [r3, #8]
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d11c      	bne.n	800e2f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	685a      	ldr	r2, [r3, #4]
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d316      	bcc.n	800e2f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	685a      	ldr	r2, [r3, #4]
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d20f      	bcs.n	800e2f4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	2100      	movs	r1, #0
 800e2d8:	68f8      	ldr	r0, [r7, #12]
 800e2da:	f000 fef1 	bl	800f0c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	2100      	movs	r1, #0
 800e2ec:	68f8      	ldr	r0, [r7, #12]
 800e2ee:	f001 fc4f 	bl	800fb90 <USBD_LL_PrepareReceive>
 800e2f2:	e018      	b.n	800e326 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2fa:	b2db      	uxtb	r3, r3
 800e2fc:	2b03      	cmp	r3, #3
 800e2fe:	d10b      	bne.n	800e318 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e306:	68db      	ldr	r3, [r3, #12]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d005      	beq.n	800e318 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e312:	68db      	ldr	r3, [r3, #12]
 800e314:	68f8      	ldr	r0, [r7, #12]
 800e316:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e318:	2180      	movs	r1, #128	; 0x80
 800e31a:	68f8      	ldr	r0, [r7, #12]
 800e31c:	f001 fb30 	bl	800f980 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e320:	68f8      	ldr	r0, [r7, #12]
 800e322:	f000 ff1f 	bl	800f164 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e32c:	2b01      	cmp	r3, #1
 800e32e:	d122      	bne.n	800e376 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e330:	68f8      	ldr	r0, [r7, #12]
 800e332:	f7ff fe98 	bl	800e066 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	2200      	movs	r2, #0
 800e33a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e33e:	e01a      	b.n	800e376 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e346:	b2db      	uxtb	r3, r3
 800e348:	2b03      	cmp	r3, #3
 800e34a:	d114      	bne.n	800e376 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e352:	695b      	ldr	r3, [r3, #20]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d00e      	beq.n	800e376 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e35e:	695b      	ldr	r3, [r3, #20]
 800e360:	7afa      	ldrb	r2, [r7, #11]
 800e362:	4611      	mov	r1, r2
 800e364:	68f8      	ldr	r0, [r7, #12]
 800e366:	4798      	blx	r3
 800e368:	4603      	mov	r3, r0
 800e36a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e36c:	7dfb      	ldrb	r3, [r7, #23]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d001      	beq.n	800e376 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e372:	7dfb      	ldrb	r3, [r7, #23]
 800e374:	e000      	b.n	800e378 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e376:	2300      	movs	r3, #0
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3718      	adds	r7, #24
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2201      	movs	r2, #1
 800e38c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2200      	movs	r2, #0
 800e394:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2200      	movs	r2, #0
 800e39c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d101      	bne.n	800e3b4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e3b0:	2303      	movs	r3, #3
 800e3b2:	e02f      	b.n	800e414 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d00f      	beq.n	800e3de <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3c4:	685b      	ldr	r3, [r3, #4]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d009      	beq.n	800e3de <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	6852      	ldr	r2, [r2, #4]
 800e3d6:	b2d2      	uxtb	r2, r2
 800e3d8:	4611      	mov	r1, r2
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e3de:	2340      	movs	r3, #64	; 0x40
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	2100      	movs	r1, #0
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f001 fa57 	bl	800f898 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2240      	movs	r2, #64	; 0x40
 800e3f6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e3fa:	2340      	movs	r3, #64	; 0x40
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	2180      	movs	r1, #128	; 0x80
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f001 fa49 	bl	800f898 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2201      	movs	r2, #1
 800e40a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2240      	movs	r2, #64	; 0x40
 800e410:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e412:	2300      	movs	r3, #0
}
 800e414:	4618      	mov	r0, r3
 800e416:	3708      	adds	r7, #8
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}

0800e41c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e41c:	b480      	push	{r7}
 800e41e:	b083      	sub	sp, #12
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	460b      	mov	r3, r1
 800e426:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	78fa      	ldrb	r2, [r7, #3]
 800e42c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e42e:	2300      	movs	r3, #0
}
 800e430:	4618      	mov	r0, r3
 800e432:	370c      	adds	r7, #12
 800e434:	46bd      	mov	sp, r7
 800e436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43a:	4770      	bx	lr

0800e43c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e43c:	b480      	push	{r7}
 800e43e:	b083      	sub	sp, #12
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e44a:	b2da      	uxtb	r2, r3
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2204      	movs	r2, #4
 800e456:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e45a:	2300      	movs	r3, #0
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	370c      	adds	r7, #12
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr

0800e468 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e468:	b480      	push	{r7}
 800e46a:	b083      	sub	sp, #12
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e476:	b2db      	uxtb	r3, r3
 800e478:	2b04      	cmp	r3, #4
 800e47a:	d106      	bne.n	800e48a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e482:	b2da      	uxtb	r2, r3
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e48a:	2300      	movs	r3, #0
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	370c      	adds	r7, #12
 800e490:	46bd      	mov	sp, r7
 800e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e496:	4770      	bx	lr

0800e498 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b082      	sub	sp, #8
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d101      	bne.n	800e4ae <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e4aa:	2303      	movs	r3, #3
 800e4ac:	e012      	b.n	800e4d4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4b4:	b2db      	uxtb	r3, r3
 800e4b6:	2b03      	cmp	r3, #3
 800e4b8:	d10b      	bne.n	800e4d2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4c0:	69db      	ldr	r3, [r3, #28]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d005      	beq.n	800e4d2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4cc:	69db      	ldr	r3, [r3, #28]
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e4d2:	2300      	movs	r3, #0
}
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	3708      	adds	r7, #8
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}

0800e4dc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b087      	sub	sp, #28
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	781b      	ldrb	r3, [r3, #0]
 800e4ec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	3301      	adds	r3, #1
 800e4f2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e4fa:	8a3b      	ldrh	r3, [r7, #16]
 800e4fc:	021b      	lsls	r3, r3, #8
 800e4fe:	b21a      	sxth	r2, r3
 800e500:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e504:	4313      	orrs	r3, r2
 800e506:	b21b      	sxth	r3, r3
 800e508:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e50a:	89fb      	ldrh	r3, [r7, #14]
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	371c      	adds	r7, #28
 800e510:	46bd      	mov	sp, r7
 800e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e516:	4770      	bx	lr

0800e518 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b084      	sub	sp, #16
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e522:	2300      	movs	r3, #0
 800e524:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	781b      	ldrb	r3, [r3, #0]
 800e52a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e52e:	2b40      	cmp	r3, #64	; 0x40
 800e530:	d005      	beq.n	800e53e <USBD_StdDevReq+0x26>
 800e532:	2b40      	cmp	r3, #64	; 0x40
 800e534:	d853      	bhi.n	800e5de <USBD_StdDevReq+0xc6>
 800e536:	2b00      	cmp	r3, #0
 800e538:	d00b      	beq.n	800e552 <USBD_StdDevReq+0x3a>
 800e53a:	2b20      	cmp	r3, #32
 800e53c:	d14f      	bne.n	800e5de <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e544:	689b      	ldr	r3, [r3, #8]
 800e546:	6839      	ldr	r1, [r7, #0]
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	4798      	blx	r3
 800e54c:	4603      	mov	r3, r0
 800e54e:	73fb      	strb	r3, [r7, #15]
      break;
 800e550:	e04a      	b.n	800e5e8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	785b      	ldrb	r3, [r3, #1]
 800e556:	2b09      	cmp	r3, #9
 800e558:	d83b      	bhi.n	800e5d2 <USBD_StdDevReq+0xba>
 800e55a:	a201      	add	r2, pc, #4	; (adr r2, 800e560 <USBD_StdDevReq+0x48>)
 800e55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e560:	0800e5b5 	.word	0x0800e5b5
 800e564:	0800e5c9 	.word	0x0800e5c9
 800e568:	0800e5d3 	.word	0x0800e5d3
 800e56c:	0800e5bf 	.word	0x0800e5bf
 800e570:	0800e5d3 	.word	0x0800e5d3
 800e574:	0800e593 	.word	0x0800e593
 800e578:	0800e589 	.word	0x0800e589
 800e57c:	0800e5d3 	.word	0x0800e5d3
 800e580:	0800e5ab 	.word	0x0800e5ab
 800e584:	0800e59d 	.word	0x0800e59d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e588:	6839      	ldr	r1, [r7, #0]
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f000 f9de 	bl	800e94c <USBD_GetDescriptor>
          break;
 800e590:	e024      	b.n	800e5dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e592:	6839      	ldr	r1, [r7, #0]
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f000 fb43 	bl	800ec20 <USBD_SetAddress>
          break;
 800e59a:	e01f      	b.n	800e5dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e59c:	6839      	ldr	r1, [r7, #0]
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f000 fb82 	bl	800eca8 <USBD_SetConfig>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	73fb      	strb	r3, [r7, #15]
          break;
 800e5a8:	e018      	b.n	800e5dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e5aa:	6839      	ldr	r1, [r7, #0]
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f000 fc21 	bl	800edf4 <USBD_GetConfig>
          break;
 800e5b2:	e013      	b.n	800e5dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e5b4:	6839      	ldr	r1, [r7, #0]
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f000 fc52 	bl	800ee60 <USBD_GetStatus>
          break;
 800e5bc:	e00e      	b.n	800e5dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e5be:	6839      	ldr	r1, [r7, #0]
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f000 fc81 	bl	800eec8 <USBD_SetFeature>
          break;
 800e5c6:	e009      	b.n	800e5dc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e5c8:	6839      	ldr	r1, [r7, #0]
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f000 fc90 	bl	800eef0 <USBD_ClrFeature>
          break;
 800e5d0:	e004      	b.n	800e5dc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e5d2:	6839      	ldr	r1, [r7, #0]
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f000 fce7 	bl	800efa8 <USBD_CtlError>
          break;
 800e5da:	bf00      	nop
      }
      break;
 800e5dc:	e004      	b.n	800e5e8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e5de:	6839      	ldr	r1, [r7, #0]
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f000 fce1 	bl	800efa8 <USBD_CtlError>
      break;
 800e5e6:	bf00      	nop
  }

  return ret;
 800e5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3710      	adds	r7, #16
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop

0800e5f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b084      	sub	sp, #16
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e5fe:	2300      	movs	r3, #0
 800e600:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	781b      	ldrb	r3, [r3, #0]
 800e606:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e60a:	2b40      	cmp	r3, #64	; 0x40
 800e60c:	d005      	beq.n	800e61a <USBD_StdItfReq+0x26>
 800e60e:	2b40      	cmp	r3, #64	; 0x40
 800e610:	d82f      	bhi.n	800e672 <USBD_StdItfReq+0x7e>
 800e612:	2b00      	cmp	r3, #0
 800e614:	d001      	beq.n	800e61a <USBD_StdItfReq+0x26>
 800e616:	2b20      	cmp	r3, #32
 800e618:	d12b      	bne.n	800e672 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e620:	b2db      	uxtb	r3, r3
 800e622:	3b01      	subs	r3, #1
 800e624:	2b02      	cmp	r3, #2
 800e626:	d81d      	bhi.n	800e664 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	889b      	ldrh	r3, [r3, #4]
 800e62c:	b2db      	uxtb	r3, r3
 800e62e:	2b01      	cmp	r3, #1
 800e630:	d813      	bhi.n	800e65a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e638:	689b      	ldr	r3, [r3, #8]
 800e63a:	6839      	ldr	r1, [r7, #0]
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	4798      	blx	r3
 800e640:	4603      	mov	r3, r0
 800e642:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	88db      	ldrh	r3, [r3, #6]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d110      	bne.n	800e66e <USBD_StdItfReq+0x7a>
 800e64c:	7bfb      	ldrb	r3, [r7, #15]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d10d      	bne.n	800e66e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f000 fd73 	bl	800f13e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e658:	e009      	b.n	800e66e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e65a:	6839      	ldr	r1, [r7, #0]
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f000 fca3 	bl	800efa8 <USBD_CtlError>
          break;
 800e662:	e004      	b.n	800e66e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e664:	6839      	ldr	r1, [r7, #0]
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f000 fc9e 	bl	800efa8 <USBD_CtlError>
          break;
 800e66c:	e000      	b.n	800e670 <USBD_StdItfReq+0x7c>
          break;
 800e66e:	bf00      	nop
      }
      break;
 800e670:	e004      	b.n	800e67c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e672:	6839      	ldr	r1, [r7, #0]
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f000 fc97 	bl	800efa8 <USBD_CtlError>
      break;
 800e67a:	bf00      	nop
  }

  return ret;
 800e67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3710      	adds	r7, #16
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}

0800e686 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e686:	b580      	push	{r7, lr}
 800e688:	b084      	sub	sp, #16
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6078      	str	r0, [r7, #4]
 800e68e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e690:	2300      	movs	r3, #0
 800e692:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	889b      	ldrh	r3, [r3, #4]
 800e698:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	781b      	ldrb	r3, [r3, #0]
 800e69e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e6a2:	2b40      	cmp	r3, #64	; 0x40
 800e6a4:	d007      	beq.n	800e6b6 <USBD_StdEPReq+0x30>
 800e6a6:	2b40      	cmp	r3, #64	; 0x40
 800e6a8:	f200 8145 	bhi.w	800e936 <USBD_StdEPReq+0x2b0>
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d00c      	beq.n	800e6ca <USBD_StdEPReq+0x44>
 800e6b0:	2b20      	cmp	r3, #32
 800e6b2:	f040 8140 	bne.w	800e936 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6bc:	689b      	ldr	r3, [r3, #8]
 800e6be:	6839      	ldr	r1, [r7, #0]
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	4798      	blx	r3
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	73fb      	strb	r3, [r7, #15]
      break;
 800e6c8:	e13a      	b.n	800e940 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	785b      	ldrb	r3, [r3, #1]
 800e6ce:	2b03      	cmp	r3, #3
 800e6d0:	d007      	beq.n	800e6e2 <USBD_StdEPReq+0x5c>
 800e6d2:	2b03      	cmp	r3, #3
 800e6d4:	f300 8129 	bgt.w	800e92a <USBD_StdEPReq+0x2a4>
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d07f      	beq.n	800e7dc <USBD_StdEPReq+0x156>
 800e6dc:	2b01      	cmp	r3, #1
 800e6de:	d03c      	beq.n	800e75a <USBD_StdEPReq+0xd4>
 800e6e0:	e123      	b.n	800e92a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6e8:	b2db      	uxtb	r3, r3
 800e6ea:	2b02      	cmp	r3, #2
 800e6ec:	d002      	beq.n	800e6f4 <USBD_StdEPReq+0x6e>
 800e6ee:	2b03      	cmp	r3, #3
 800e6f0:	d016      	beq.n	800e720 <USBD_StdEPReq+0x9a>
 800e6f2:	e02c      	b.n	800e74e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e6f4:	7bbb      	ldrb	r3, [r7, #14]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d00d      	beq.n	800e716 <USBD_StdEPReq+0x90>
 800e6fa:	7bbb      	ldrb	r3, [r7, #14]
 800e6fc:	2b80      	cmp	r3, #128	; 0x80
 800e6fe:	d00a      	beq.n	800e716 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e700:	7bbb      	ldrb	r3, [r7, #14]
 800e702:	4619      	mov	r1, r3
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f001 f93b 	bl	800f980 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e70a:	2180      	movs	r1, #128	; 0x80
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f001 f937 	bl	800f980 <USBD_LL_StallEP>
 800e712:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e714:	e020      	b.n	800e758 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e716:	6839      	ldr	r1, [r7, #0]
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f000 fc45 	bl	800efa8 <USBD_CtlError>
              break;
 800e71e:	e01b      	b.n	800e758 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	885b      	ldrh	r3, [r3, #2]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d10e      	bne.n	800e746 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e728:	7bbb      	ldrb	r3, [r7, #14]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d00b      	beq.n	800e746 <USBD_StdEPReq+0xc0>
 800e72e:	7bbb      	ldrb	r3, [r7, #14]
 800e730:	2b80      	cmp	r3, #128	; 0x80
 800e732:	d008      	beq.n	800e746 <USBD_StdEPReq+0xc0>
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	88db      	ldrh	r3, [r3, #6]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d104      	bne.n	800e746 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e73c:	7bbb      	ldrb	r3, [r7, #14]
 800e73e:	4619      	mov	r1, r3
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f001 f91d 	bl	800f980 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f000 fcf9 	bl	800f13e <USBD_CtlSendStatus>

              break;
 800e74c:	e004      	b.n	800e758 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e74e:	6839      	ldr	r1, [r7, #0]
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f000 fc29 	bl	800efa8 <USBD_CtlError>
              break;
 800e756:	bf00      	nop
          }
          break;
 800e758:	e0ec      	b.n	800e934 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e760:	b2db      	uxtb	r3, r3
 800e762:	2b02      	cmp	r3, #2
 800e764:	d002      	beq.n	800e76c <USBD_StdEPReq+0xe6>
 800e766:	2b03      	cmp	r3, #3
 800e768:	d016      	beq.n	800e798 <USBD_StdEPReq+0x112>
 800e76a:	e030      	b.n	800e7ce <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e76c:	7bbb      	ldrb	r3, [r7, #14]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d00d      	beq.n	800e78e <USBD_StdEPReq+0x108>
 800e772:	7bbb      	ldrb	r3, [r7, #14]
 800e774:	2b80      	cmp	r3, #128	; 0x80
 800e776:	d00a      	beq.n	800e78e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e778:	7bbb      	ldrb	r3, [r7, #14]
 800e77a:	4619      	mov	r1, r3
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f001 f8ff 	bl	800f980 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e782:	2180      	movs	r1, #128	; 0x80
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f001 f8fb 	bl	800f980 <USBD_LL_StallEP>
 800e78a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e78c:	e025      	b.n	800e7da <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e78e:	6839      	ldr	r1, [r7, #0]
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f000 fc09 	bl	800efa8 <USBD_CtlError>
              break;
 800e796:	e020      	b.n	800e7da <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	885b      	ldrh	r3, [r3, #2]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d11b      	bne.n	800e7d8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e7a0:	7bbb      	ldrb	r3, [r7, #14]
 800e7a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d004      	beq.n	800e7b4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e7aa:	7bbb      	ldrb	r3, [r7, #14]
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f001 f91c 	bl	800f9ec <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f000 fcc2 	bl	800f13e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7c0:	689b      	ldr	r3, [r3, #8]
 800e7c2:	6839      	ldr	r1, [r7, #0]
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	4798      	blx	r3
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e7cc:	e004      	b.n	800e7d8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e7ce:	6839      	ldr	r1, [r7, #0]
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f000 fbe9 	bl	800efa8 <USBD_CtlError>
              break;
 800e7d6:	e000      	b.n	800e7da <USBD_StdEPReq+0x154>
              break;
 800e7d8:	bf00      	nop
          }
          break;
 800e7da:	e0ab      	b.n	800e934 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7e2:	b2db      	uxtb	r3, r3
 800e7e4:	2b02      	cmp	r3, #2
 800e7e6:	d002      	beq.n	800e7ee <USBD_StdEPReq+0x168>
 800e7e8:	2b03      	cmp	r3, #3
 800e7ea:	d032      	beq.n	800e852 <USBD_StdEPReq+0x1cc>
 800e7ec:	e097      	b.n	800e91e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e7ee:	7bbb      	ldrb	r3, [r7, #14]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d007      	beq.n	800e804 <USBD_StdEPReq+0x17e>
 800e7f4:	7bbb      	ldrb	r3, [r7, #14]
 800e7f6:	2b80      	cmp	r3, #128	; 0x80
 800e7f8:	d004      	beq.n	800e804 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e7fa:	6839      	ldr	r1, [r7, #0]
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f000 fbd3 	bl	800efa8 <USBD_CtlError>
                break;
 800e802:	e091      	b.n	800e928 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e804:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	da0b      	bge.n	800e824 <USBD_StdEPReq+0x19e>
 800e80c:	7bbb      	ldrb	r3, [r7, #14]
 800e80e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e812:	4613      	mov	r3, r2
 800e814:	009b      	lsls	r3, r3, #2
 800e816:	4413      	add	r3, r2
 800e818:	009b      	lsls	r3, r3, #2
 800e81a:	3310      	adds	r3, #16
 800e81c:	687a      	ldr	r2, [r7, #4]
 800e81e:	4413      	add	r3, r2
 800e820:	3304      	adds	r3, #4
 800e822:	e00b      	b.n	800e83c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e824:	7bbb      	ldrb	r3, [r7, #14]
 800e826:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e82a:	4613      	mov	r3, r2
 800e82c:	009b      	lsls	r3, r3, #2
 800e82e:	4413      	add	r3, r2
 800e830:	009b      	lsls	r3, r3, #2
 800e832:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e836:	687a      	ldr	r2, [r7, #4]
 800e838:	4413      	add	r3, r2
 800e83a:	3304      	adds	r3, #4
 800e83c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	2200      	movs	r2, #0
 800e842:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	2202      	movs	r2, #2
 800e848:	4619      	mov	r1, r3
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f000 fc1d 	bl	800f08a <USBD_CtlSendData>
              break;
 800e850:	e06a      	b.n	800e928 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e852:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e856:	2b00      	cmp	r3, #0
 800e858:	da11      	bge.n	800e87e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e85a:	7bbb      	ldrb	r3, [r7, #14]
 800e85c:	f003 020f 	and.w	r2, r3, #15
 800e860:	6879      	ldr	r1, [r7, #4]
 800e862:	4613      	mov	r3, r2
 800e864:	009b      	lsls	r3, r3, #2
 800e866:	4413      	add	r3, r2
 800e868:	009b      	lsls	r3, r3, #2
 800e86a:	440b      	add	r3, r1
 800e86c:	3324      	adds	r3, #36	; 0x24
 800e86e:	881b      	ldrh	r3, [r3, #0]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d117      	bne.n	800e8a4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e874:	6839      	ldr	r1, [r7, #0]
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f000 fb96 	bl	800efa8 <USBD_CtlError>
                  break;
 800e87c:	e054      	b.n	800e928 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e87e:	7bbb      	ldrb	r3, [r7, #14]
 800e880:	f003 020f 	and.w	r2, r3, #15
 800e884:	6879      	ldr	r1, [r7, #4]
 800e886:	4613      	mov	r3, r2
 800e888:	009b      	lsls	r3, r3, #2
 800e88a:	4413      	add	r3, r2
 800e88c:	009b      	lsls	r3, r3, #2
 800e88e:	440b      	add	r3, r1
 800e890:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e894:	881b      	ldrh	r3, [r3, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d104      	bne.n	800e8a4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e89a:	6839      	ldr	r1, [r7, #0]
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f000 fb83 	bl	800efa8 <USBD_CtlError>
                  break;
 800e8a2:	e041      	b.n	800e928 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e8a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	da0b      	bge.n	800e8c4 <USBD_StdEPReq+0x23e>
 800e8ac:	7bbb      	ldrb	r3, [r7, #14]
 800e8ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e8b2:	4613      	mov	r3, r2
 800e8b4:	009b      	lsls	r3, r3, #2
 800e8b6:	4413      	add	r3, r2
 800e8b8:	009b      	lsls	r3, r3, #2
 800e8ba:	3310      	adds	r3, #16
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	4413      	add	r3, r2
 800e8c0:	3304      	adds	r3, #4
 800e8c2:	e00b      	b.n	800e8dc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e8c4:	7bbb      	ldrb	r3, [r7, #14]
 800e8c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e8ca:	4613      	mov	r3, r2
 800e8cc:	009b      	lsls	r3, r3, #2
 800e8ce:	4413      	add	r3, r2
 800e8d0:	009b      	lsls	r3, r3, #2
 800e8d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e8d6:	687a      	ldr	r2, [r7, #4]
 800e8d8:	4413      	add	r3, r2
 800e8da:	3304      	adds	r3, #4
 800e8dc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e8de:	7bbb      	ldrb	r3, [r7, #14]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d002      	beq.n	800e8ea <USBD_StdEPReq+0x264>
 800e8e4:	7bbb      	ldrb	r3, [r7, #14]
 800e8e6:	2b80      	cmp	r3, #128	; 0x80
 800e8e8:	d103      	bne.n	800e8f2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	601a      	str	r2, [r3, #0]
 800e8f0:	e00e      	b.n	800e910 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e8f2:	7bbb      	ldrb	r3, [r7, #14]
 800e8f4:	4619      	mov	r1, r3
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f001 f8ae 	bl	800fa58 <USBD_LL_IsStallEP>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d003      	beq.n	800e90a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	2201      	movs	r2, #1
 800e906:	601a      	str	r2, [r3, #0]
 800e908:	e002      	b.n	800e910 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	2200      	movs	r2, #0
 800e90e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	2202      	movs	r2, #2
 800e914:	4619      	mov	r1, r3
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f000 fbb7 	bl	800f08a <USBD_CtlSendData>
              break;
 800e91c:	e004      	b.n	800e928 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e91e:	6839      	ldr	r1, [r7, #0]
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f000 fb41 	bl	800efa8 <USBD_CtlError>
              break;
 800e926:	bf00      	nop
          }
          break;
 800e928:	e004      	b.n	800e934 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e92a:	6839      	ldr	r1, [r7, #0]
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f000 fb3b 	bl	800efa8 <USBD_CtlError>
          break;
 800e932:	bf00      	nop
      }
      break;
 800e934:	e004      	b.n	800e940 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e936:	6839      	ldr	r1, [r7, #0]
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f000 fb35 	bl	800efa8 <USBD_CtlError>
      break;
 800e93e:	bf00      	nop
  }

  return ret;
 800e940:	7bfb      	ldrb	r3, [r7, #15]
}
 800e942:	4618      	mov	r0, r3
 800e944:	3710      	adds	r7, #16
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
	...

0800e94c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b084      	sub	sp, #16
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e956:	2300      	movs	r3, #0
 800e958:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e95a:	2300      	movs	r3, #0
 800e95c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e95e:	2300      	movs	r3, #0
 800e960:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	885b      	ldrh	r3, [r3, #2]
 800e966:	0a1b      	lsrs	r3, r3, #8
 800e968:	b29b      	uxth	r3, r3
 800e96a:	3b01      	subs	r3, #1
 800e96c:	2b06      	cmp	r3, #6
 800e96e:	f200 8128 	bhi.w	800ebc2 <USBD_GetDescriptor+0x276>
 800e972:	a201      	add	r2, pc, #4	; (adr r2, 800e978 <USBD_GetDescriptor+0x2c>)
 800e974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e978:	0800e995 	.word	0x0800e995
 800e97c:	0800e9ad 	.word	0x0800e9ad
 800e980:	0800e9ed 	.word	0x0800e9ed
 800e984:	0800ebc3 	.word	0x0800ebc3
 800e988:	0800ebc3 	.word	0x0800ebc3
 800e98c:	0800eb63 	.word	0x0800eb63
 800e990:	0800eb8f 	.word	0x0800eb8f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	687a      	ldr	r2, [r7, #4]
 800e99e:	7c12      	ldrb	r2, [r2, #16]
 800e9a0:	f107 0108 	add.w	r1, r7, #8
 800e9a4:	4610      	mov	r0, r2
 800e9a6:	4798      	blx	r3
 800e9a8:	60f8      	str	r0, [r7, #12]
      break;
 800e9aa:	e112      	b.n	800ebd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	7c1b      	ldrb	r3, [r3, #16]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d10d      	bne.n	800e9d0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9bc:	f107 0208 	add.w	r2, r7, #8
 800e9c0:	4610      	mov	r0, r2
 800e9c2:	4798      	blx	r3
 800e9c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	2202      	movs	r2, #2
 800e9cc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e9ce:	e100      	b.n	800ebd2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9d8:	f107 0208 	add.w	r2, r7, #8
 800e9dc:	4610      	mov	r0, r2
 800e9de:	4798      	blx	r3
 800e9e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	2202      	movs	r2, #2
 800e9e8:	701a      	strb	r2, [r3, #0]
      break;
 800e9ea:	e0f2      	b.n	800ebd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	885b      	ldrh	r3, [r3, #2]
 800e9f0:	b2db      	uxtb	r3, r3
 800e9f2:	2b05      	cmp	r3, #5
 800e9f4:	f200 80ac 	bhi.w	800eb50 <USBD_GetDescriptor+0x204>
 800e9f8:	a201      	add	r2, pc, #4	; (adr r2, 800ea00 <USBD_GetDescriptor+0xb4>)
 800e9fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9fe:	bf00      	nop
 800ea00:	0800ea19 	.word	0x0800ea19
 800ea04:	0800ea4d 	.word	0x0800ea4d
 800ea08:	0800ea81 	.word	0x0800ea81
 800ea0c:	0800eab5 	.word	0x0800eab5
 800ea10:	0800eae9 	.word	0x0800eae9
 800ea14:	0800eb1d 	.word	0x0800eb1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea1e:	685b      	ldr	r3, [r3, #4]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d00b      	beq.n	800ea3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea2a:	685b      	ldr	r3, [r3, #4]
 800ea2c:	687a      	ldr	r2, [r7, #4]
 800ea2e:	7c12      	ldrb	r2, [r2, #16]
 800ea30:	f107 0108 	add.w	r1, r7, #8
 800ea34:	4610      	mov	r0, r2
 800ea36:	4798      	blx	r3
 800ea38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ea3a:	e091      	b.n	800eb60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ea3c:	6839      	ldr	r1, [r7, #0]
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f000 fab2 	bl	800efa8 <USBD_CtlError>
            err++;
 800ea44:	7afb      	ldrb	r3, [r7, #11]
 800ea46:	3301      	adds	r3, #1
 800ea48:	72fb      	strb	r3, [r7, #11]
          break;
 800ea4a:	e089      	b.n	800eb60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea52:	689b      	ldr	r3, [r3, #8]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d00b      	beq.n	800ea70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea5e:	689b      	ldr	r3, [r3, #8]
 800ea60:	687a      	ldr	r2, [r7, #4]
 800ea62:	7c12      	ldrb	r2, [r2, #16]
 800ea64:	f107 0108 	add.w	r1, r7, #8
 800ea68:	4610      	mov	r0, r2
 800ea6a:	4798      	blx	r3
 800ea6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ea6e:	e077      	b.n	800eb60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ea70:	6839      	ldr	r1, [r7, #0]
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f000 fa98 	bl	800efa8 <USBD_CtlError>
            err++;
 800ea78:	7afb      	ldrb	r3, [r7, #11]
 800ea7a:	3301      	adds	r3, #1
 800ea7c:	72fb      	strb	r3, [r7, #11]
          break;
 800ea7e:	e06f      	b.n	800eb60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea86:	68db      	ldr	r3, [r3, #12]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d00b      	beq.n	800eaa4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	687a      	ldr	r2, [r7, #4]
 800ea96:	7c12      	ldrb	r2, [r2, #16]
 800ea98:	f107 0108 	add.w	r1, r7, #8
 800ea9c:	4610      	mov	r0, r2
 800ea9e:	4798      	blx	r3
 800eaa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eaa2:	e05d      	b.n	800eb60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eaa4:	6839      	ldr	r1, [r7, #0]
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f000 fa7e 	bl	800efa8 <USBD_CtlError>
            err++;
 800eaac:	7afb      	ldrb	r3, [r7, #11]
 800eaae:	3301      	adds	r3, #1
 800eab0:	72fb      	strb	r3, [r7, #11]
          break;
 800eab2:	e055      	b.n	800eb60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eaba:	691b      	ldr	r3, [r3, #16]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d00b      	beq.n	800ead8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eac6:	691b      	ldr	r3, [r3, #16]
 800eac8:	687a      	ldr	r2, [r7, #4]
 800eaca:	7c12      	ldrb	r2, [r2, #16]
 800eacc:	f107 0108 	add.w	r1, r7, #8
 800ead0:	4610      	mov	r0, r2
 800ead2:	4798      	blx	r3
 800ead4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ead6:	e043      	b.n	800eb60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ead8:	6839      	ldr	r1, [r7, #0]
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f000 fa64 	bl	800efa8 <USBD_CtlError>
            err++;
 800eae0:	7afb      	ldrb	r3, [r7, #11]
 800eae2:	3301      	adds	r3, #1
 800eae4:	72fb      	strb	r3, [r7, #11]
          break;
 800eae6:	e03b      	b.n	800eb60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eaee:	695b      	ldr	r3, [r3, #20]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d00b      	beq.n	800eb0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eafa:	695b      	ldr	r3, [r3, #20]
 800eafc:	687a      	ldr	r2, [r7, #4]
 800eafe:	7c12      	ldrb	r2, [r2, #16]
 800eb00:	f107 0108 	add.w	r1, r7, #8
 800eb04:	4610      	mov	r0, r2
 800eb06:	4798      	blx	r3
 800eb08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb0a:	e029      	b.n	800eb60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eb0c:	6839      	ldr	r1, [r7, #0]
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f000 fa4a 	bl	800efa8 <USBD_CtlError>
            err++;
 800eb14:	7afb      	ldrb	r3, [r7, #11]
 800eb16:	3301      	adds	r3, #1
 800eb18:	72fb      	strb	r3, [r7, #11]
          break;
 800eb1a:	e021      	b.n	800eb60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb22:	699b      	ldr	r3, [r3, #24]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d00b      	beq.n	800eb40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb2e:	699b      	ldr	r3, [r3, #24]
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	7c12      	ldrb	r2, [r2, #16]
 800eb34:	f107 0108 	add.w	r1, r7, #8
 800eb38:	4610      	mov	r0, r2
 800eb3a:	4798      	blx	r3
 800eb3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb3e:	e00f      	b.n	800eb60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eb40:	6839      	ldr	r1, [r7, #0]
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f000 fa30 	bl	800efa8 <USBD_CtlError>
            err++;
 800eb48:	7afb      	ldrb	r3, [r7, #11]
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	72fb      	strb	r3, [r7, #11]
          break;
 800eb4e:	e007      	b.n	800eb60 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800eb50:	6839      	ldr	r1, [r7, #0]
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 fa28 	bl	800efa8 <USBD_CtlError>
          err++;
 800eb58:	7afb      	ldrb	r3, [r7, #11]
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800eb5e:	bf00      	nop
      }
      break;
 800eb60:	e037      	b.n	800ebd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	7c1b      	ldrb	r3, [r3, #16]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d109      	bne.n	800eb7e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb72:	f107 0208 	add.w	r2, r7, #8
 800eb76:	4610      	mov	r0, r2
 800eb78:	4798      	blx	r3
 800eb7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eb7c:	e029      	b.n	800ebd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800eb7e:	6839      	ldr	r1, [r7, #0]
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f000 fa11 	bl	800efa8 <USBD_CtlError>
        err++;
 800eb86:	7afb      	ldrb	r3, [r7, #11]
 800eb88:	3301      	adds	r3, #1
 800eb8a:	72fb      	strb	r3, [r7, #11]
      break;
 800eb8c:	e021      	b.n	800ebd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	7c1b      	ldrb	r3, [r3, #16]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d10d      	bne.n	800ebb2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb9e:	f107 0208 	add.w	r2, r7, #8
 800eba2:	4610      	mov	r0, r2
 800eba4:	4798      	blx	r3
 800eba6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	3301      	adds	r3, #1
 800ebac:	2207      	movs	r2, #7
 800ebae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ebb0:	e00f      	b.n	800ebd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ebb2:	6839      	ldr	r1, [r7, #0]
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f000 f9f7 	bl	800efa8 <USBD_CtlError>
        err++;
 800ebba:	7afb      	ldrb	r3, [r7, #11]
 800ebbc:	3301      	adds	r3, #1
 800ebbe:	72fb      	strb	r3, [r7, #11]
      break;
 800ebc0:	e007      	b.n	800ebd2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ebc2:	6839      	ldr	r1, [r7, #0]
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f000 f9ef 	bl	800efa8 <USBD_CtlError>
      err++;
 800ebca:	7afb      	ldrb	r3, [r7, #11]
 800ebcc:	3301      	adds	r3, #1
 800ebce:	72fb      	strb	r3, [r7, #11]
      break;
 800ebd0:	bf00      	nop
  }

  if (err != 0U)
 800ebd2:	7afb      	ldrb	r3, [r7, #11]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d11e      	bne.n	800ec16 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	88db      	ldrh	r3, [r3, #6]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d016      	beq.n	800ec0e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ebe0:	893b      	ldrh	r3, [r7, #8]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d00e      	beq.n	800ec04 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	88da      	ldrh	r2, [r3, #6]
 800ebea:	893b      	ldrh	r3, [r7, #8]
 800ebec:	4293      	cmp	r3, r2
 800ebee:	bf28      	it	cs
 800ebf0:	4613      	movcs	r3, r2
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ebf6:	893b      	ldrh	r3, [r7, #8]
 800ebf8:	461a      	mov	r2, r3
 800ebfa:	68f9      	ldr	r1, [r7, #12]
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f000 fa44 	bl	800f08a <USBD_CtlSendData>
 800ec02:	e009      	b.n	800ec18 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ec04:	6839      	ldr	r1, [r7, #0]
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f000 f9ce 	bl	800efa8 <USBD_CtlError>
 800ec0c:	e004      	b.n	800ec18 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	f000 fa95 	bl	800f13e <USBD_CtlSendStatus>
 800ec14:	e000      	b.n	800ec18 <USBD_GetDescriptor+0x2cc>
    return;
 800ec16:	bf00      	nop
  }
}
 800ec18:	3710      	adds	r7, #16
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
 800ec1e:	bf00      	nop

0800ec20 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b084      	sub	sp, #16
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	889b      	ldrh	r3, [r3, #4]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d131      	bne.n	800ec96 <USBD_SetAddress+0x76>
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	88db      	ldrh	r3, [r3, #6]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d12d      	bne.n	800ec96 <USBD_SetAddress+0x76>
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	885b      	ldrh	r3, [r3, #2]
 800ec3e:	2b7f      	cmp	r3, #127	; 0x7f
 800ec40:	d829      	bhi.n	800ec96 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	885b      	ldrh	r3, [r3, #2]
 800ec46:	b2db      	uxtb	r3, r3
 800ec48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec54:	b2db      	uxtb	r3, r3
 800ec56:	2b03      	cmp	r3, #3
 800ec58:	d104      	bne.n	800ec64 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ec5a:	6839      	ldr	r1, [r7, #0]
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f000 f9a3 	bl	800efa8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec62:	e01d      	b.n	800eca0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	7bfa      	ldrb	r2, [r7, #15]
 800ec68:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ec6c:	7bfb      	ldrb	r3, [r7, #15]
 800ec6e:	4619      	mov	r1, r3
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f000 ff1f 	bl	800fab4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f000 fa61 	bl	800f13e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ec7c:	7bfb      	ldrb	r3, [r7, #15]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d004      	beq.n	800ec8c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2202      	movs	r2, #2
 800ec86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec8a:	e009      	b.n	800eca0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2201      	movs	r2, #1
 800ec90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec94:	e004      	b.n	800eca0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ec96:	6839      	ldr	r1, [r7, #0]
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f000 f985 	bl	800efa8 <USBD_CtlError>
  }
}
 800ec9e:	bf00      	nop
 800eca0:	bf00      	nop
 800eca2:	3710      	adds	r7, #16
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}

0800eca8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	885b      	ldrh	r3, [r3, #2]
 800ecba:	b2da      	uxtb	r2, r3
 800ecbc:	4b4c      	ldr	r3, [pc, #304]	; (800edf0 <USBD_SetConfig+0x148>)
 800ecbe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ecc0:	4b4b      	ldr	r3, [pc, #300]	; (800edf0 <USBD_SetConfig+0x148>)
 800ecc2:	781b      	ldrb	r3, [r3, #0]
 800ecc4:	2b01      	cmp	r3, #1
 800ecc6:	d905      	bls.n	800ecd4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ecc8:	6839      	ldr	r1, [r7, #0]
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f000 f96c 	bl	800efa8 <USBD_CtlError>
    return USBD_FAIL;
 800ecd0:	2303      	movs	r3, #3
 800ecd2:	e088      	b.n	800ede6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecda:	b2db      	uxtb	r3, r3
 800ecdc:	2b02      	cmp	r3, #2
 800ecde:	d002      	beq.n	800ece6 <USBD_SetConfig+0x3e>
 800ece0:	2b03      	cmp	r3, #3
 800ece2:	d025      	beq.n	800ed30 <USBD_SetConfig+0x88>
 800ece4:	e071      	b.n	800edca <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ece6:	4b42      	ldr	r3, [pc, #264]	; (800edf0 <USBD_SetConfig+0x148>)
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d01c      	beq.n	800ed28 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ecee:	4b40      	ldr	r3, [pc, #256]	; (800edf0 <USBD_SetConfig+0x148>)
 800ecf0:	781b      	ldrb	r3, [r3, #0]
 800ecf2:	461a      	mov	r2, r3
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ecf8:	4b3d      	ldr	r3, [pc, #244]	; (800edf0 <USBD_SetConfig+0x148>)
 800ecfa:	781b      	ldrb	r3, [r3, #0]
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f7ff f9bc 	bl	800e07c <USBD_SetClassConfig>
 800ed04:	4603      	mov	r3, r0
 800ed06:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ed08:	7bfb      	ldrb	r3, [r7, #15]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d004      	beq.n	800ed18 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ed0e:	6839      	ldr	r1, [r7, #0]
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f000 f949 	bl	800efa8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ed16:	e065      	b.n	800ede4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f000 fa10 	bl	800f13e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2203      	movs	r2, #3
 800ed22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ed26:	e05d      	b.n	800ede4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	f000 fa08 	bl	800f13e <USBD_CtlSendStatus>
      break;
 800ed2e:	e059      	b.n	800ede4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ed30:	4b2f      	ldr	r3, [pc, #188]	; (800edf0 <USBD_SetConfig+0x148>)
 800ed32:	781b      	ldrb	r3, [r3, #0]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d112      	bne.n	800ed5e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2202      	movs	r2, #2
 800ed3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ed40:	4b2b      	ldr	r3, [pc, #172]	; (800edf0 <USBD_SetConfig+0x148>)
 800ed42:	781b      	ldrb	r3, [r3, #0]
 800ed44:	461a      	mov	r2, r3
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ed4a:	4b29      	ldr	r3, [pc, #164]	; (800edf0 <USBD_SetConfig+0x148>)
 800ed4c:	781b      	ldrb	r3, [r3, #0]
 800ed4e:	4619      	mov	r1, r3
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	f7ff f9af 	bl	800e0b4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f000 f9f1 	bl	800f13e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ed5c:	e042      	b.n	800ede4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ed5e:	4b24      	ldr	r3, [pc, #144]	; (800edf0 <USBD_SetConfig+0x148>)
 800ed60:	781b      	ldrb	r3, [r3, #0]
 800ed62:	461a      	mov	r2, r3
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	685b      	ldr	r3, [r3, #4]
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d02a      	beq.n	800edc2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	685b      	ldr	r3, [r3, #4]
 800ed70:	b2db      	uxtb	r3, r3
 800ed72:	4619      	mov	r1, r3
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f7ff f99d 	bl	800e0b4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ed7a:	4b1d      	ldr	r3, [pc, #116]	; (800edf0 <USBD_SetConfig+0x148>)
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	461a      	mov	r2, r3
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ed84:	4b1a      	ldr	r3, [pc, #104]	; (800edf0 <USBD_SetConfig+0x148>)
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	4619      	mov	r1, r3
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f7ff f976 	bl	800e07c <USBD_SetClassConfig>
 800ed90:	4603      	mov	r3, r0
 800ed92:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ed94:	7bfb      	ldrb	r3, [r7, #15]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d00f      	beq.n	800edba <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ed9a:	6839      	ldr	r1, [r7, #0]
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f000 f903 	bl	800efa8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	685b      	ldr	r3, [r3, #4]
 800eda6:	b2db      	uxtb	r3, r3
 800eda8:	4619      	mov	r1, r3
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f7ff f982 	bl	800e0b4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2202      	movs	r2, #2
 800edb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800edb8:	e014      	b.n	800ede4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f000 f9bf 	bl	800f13e <USBD_CtlSendStatus>
      break;
 800edc0:	e010      	b.n	800ede4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f000 f9bb 	bl	800f13e <USBD_CtlSendStatus>
      break;
 800edc8:	e00c      	b.n	800ede4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800edca:	6839      	ldr	r1, [r7, #0]
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f000 f8eb 	bl	800efa8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800edd2:	4b07      	ldr	r3, [pc, #28]	; (800edf0 <USBD_SetConfig+0x148>)
 800edd4:	781b      	ldrb	r3, [r3, #0]
 800edd6:	4619      	mov	r1, r3
 800edd8:	6878      	ldr	r0, [r7, #4]
 800edda:	f7ff f96b 	bl	800e0b4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800edde:	2303      	movs	r3, #3
 800ede0:	73fb      	strb	r3, [r7, #15]
      break;
 800ede2:	bf00      	nop
  }

  return ret;
 800ede4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3710      	adds	r7, #16
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}
 800edee:	bf00      	nop
 800edf0:	2000068c 	.word	0x2000068c

0800edf4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b082      	sub	sp, #8
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
 800edfc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	88db      	ldrh	r3, [r3, #6]
 800ee02:	2b01      	cmp	r3, #1
 800ee04:	d004      	beq.n	800ee10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ee06:	6839      	ldr	r1, [r7, #0]
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f000 f8cd 	bl	800efa8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ee0e:	e023      	b.n	800ee58 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee16:	b2db      	uxtb	r3, r3
 800ee18:	2b02      	cmp	r3, #2
 800ee1a:	dc02      	bgt.n	800ee22 <USBD_GetConfig+0x2e>
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	dc03      	bgt.n	800ee28 <USBD_GetConfig+0x34>
 800ee20:	e015      	b.n	800ee4e <USBD_GetConfig+0x5a>
 800ee22:	2b03      	cmp	r3, #3
 800ee24:	d00b      	beq.n	800ee3e <USBD_GetConfig+0x4a>
 800ee26:	e012      	b.n	800ee4e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	3308      	adds	r3, #8
 800ee32:	2201      	movs	r2, #1
 800ee34:	4619      	mov	r1, r3
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f000 f927 	bl	800f08a <USBD_CtlSendData>
        break;
 800ee3c:	e00c      	b.n	800ee58 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	3304      	adds	r3, #4
 800ee42:	2201      	movs	r2, #1
 800ee44:	4619      	mov	r1, r3
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	f000 f91f 	bl	800f08a <USBD_CtlSendData>
        break;
 800ee4c:	e004      	b.n	800ee58 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ee4e:	6839      	ldr	r1, [r7, #0]
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f000 f8a9 	bl	800efa8 <USBD_CtlError>
        break;
 800ee56:	bf00      	nop
}
 800ee58:	bf00      	nop
 800ee5a:	3708      	adds	r7, #8
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b082      	sub	sp, #8
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee70:	b2db      	uxtb	r3, r3
 800ee72:	3b01      	subs	r3, #1
 800ee74:	2b02      	cmp	r3, #2
 800ee76:	d81e      	bhi.n	800eeb6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	88db      	ldrh	r3, [r3, #6]
 800ee7c:	2b02      	cmp	r3, #2
 800ee7e:	d004      	beq.n	800ee8a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ee80:	6839      	ldr	r1, [r7, #0]
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f000 f890 	bl	800efa8 <USBD_CtlError>
        break;
 800ee88:	e01a      	b.n	800eec0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2201      	movs	r2, #1
 800ee8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d005      	beq.n	800eea6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	68db      	ldr	r3, [r3, #12]
 800ee9e:	f043 0202 	orr.w	r2, r3, #2
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	330c      	adds	r3, #12
 800eeaa:	2202      	movs	r2, #2
 800eeac:	4619      	mov	r1, r3
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f000 f8eb 	bl	800f08a <USBD_CtlSendData>
      break;
 800eeb4:	e004      	b.n	800eec0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800eeb6:	6839      	ldr	r1, [r7, #0]
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f000 f875 	bl	800efa8 <USBD_CtlError>
      break;
 800eebe:	bf00      	nop
  }
}
 800eec0:	bf00      	nop
 800eec2:	3708      	adds	r7, #8
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}

0800eec8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b082      	sub	sp, #8
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	885b      	ldrh	r3, [r3, #2]
 800eed6:	2b01      	cmp	r3, #1
 800eed8:	d106      	bne.n	800eee8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2201      	movs	r2, #1
 800eede:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f000 f92b 	bl	800f13e <USBD_CtlSendStatus>
  }
}
 800eee8:	bf00      	nop
 800eeea:	3708      	adds	r7, #8
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}

0800eef0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b082      	sub	sp, #8
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
 800eef8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef00:	b2db      	uxtb	r3, r3
 800ef02:	3b01      	subs	r3, #1
 800ef04:	2b02      	cmp	r3, #2
 800ef06:	d80b      	bhi.n	800ef20 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	885b      	ldrh	r3, [r3, #2]
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	d10c      	bne.n	800ef2a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2200      	movs	r2, #0
 800ef14:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f000 f910 	bl	800f13e <USBD_CtlSendStatus>
      }
      break;
 800ef1e:	e004      	b.n	800ef2a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ef20:	6839      	ldr	r1, [r7, #0]
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f000 f840 	bl	800efa8 <USBD_CtlError>
      break;
 800ef28:	e000      	b.n	800ef2c <USBD_ClrFeature+0x3c>
      break;
 800ef2a:	bf00      	nop
  }
}
 800ef2c:	bf00      	nop
 800ef2e:	3708      	adds	r7, #8
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}

0800ef34 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b084      	sub	sp, #16
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	781a      	ldrb	r2, [r3, #0]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	3301      	adds	r3, #1
 800ef4e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	781a      	ldrb	r2, [r3, #0]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ef5e:	68f8      	ldr	r0, [r7, #12]
 800ef60:	f7ff fabc 	bl	800e4dc <SWAPBYTE>
 800ef64:	4603      	mov	r3, r0
 800ef66:	461a      	mov	r2, r3
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	3301      	adds	r3, #1
 800ef70:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	3301      	adds	r3, #1
 800ef76:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ef78:	68f8      	ldr	r0, [r7, #12]
 800ef7a:	f7ff faaf 	bl	800e4dc <SWAPBYTE>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	461a      	mov	r2, r3
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	3301      	adds	r3, #1
 800ef8a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	3301      	adds	r3, #1
 800ef90:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ef92:	68f8      	ldr	r0, [r7, #12]
 800ef94:	f7ff faa2 	bl	800e4dc <SWAPBYTE>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	80da      	strh	r2, [r3, #6]
}
 800efa0:	bf00      	nop
 800efa2:	3710      	adds	r7, #16
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b082      	sub	sp, #8
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800efb2:	2180      	movs	r1, #128	; 0x80
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f000 fce3 	bl	800f980 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800efba:	2100      	movs	r1, #0
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f000 fcdf 	bl	800f980 <USBD_LL_StallEP>
}
 800efc2:	bf00      	nop
 800efc4:	3708      	adds	r7, #8
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}

0800efca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800efca:	b580      	push	{r7, lr}
 800efcc:	b086      	sub	sp, #24
 800efce:	af00      	add	r7, sp, #0
 800efd0:	60f8      	str	r0, [r7, #12]
 800efd2:	60b9      	str	r1, [r7, #8]
 800efd4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800efd6:	2300      	movs	r3, #0
 800efd8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d036      	beq.n	800f04e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800efe4:	6938      	ldr	r0, [r7, #16]
 800efe6:	f000 f836 	bl	800f056 <USBD_GetLen>
 800efea:	4603      	mov	r3, r0
 800efec:	3301      	adds	r3, #1
 800efee:	b29b      	uxth	r3, r3
 800eff0:	005b      	lsls	r3, r3, #1
 800eff2:	b29a      	uxth	r2, r3
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800eff8:	7dfb      	ldrb	r3, [r7, #23]
 800effa:	68ba      	ldr	r2, [r7, #8]
 800effc:	4413      	add	r3, r2
 800effe:	687a      	ldr	r2, [r7, #4]
 800f000:	7812      	ldrb	r2, [r2, #0]
 800f002:	701a      	strb	r2, [r3, #0]
  idx++;
 800f004:	7dfb      	ldrb	r3, [r7, #23]
 800f006:	3301      	adds	r3, #1
 800f008:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f00a:	7dfb      	ldrb	r3, [r7, #23]
 800f00c:	68ba      	ldr	r2, [r7, #8]
 800f00e:	4413      	add	r3, r2
 800f010:	2203      	movs	r2, #3
 800f012:	701a      	strb	r2, [r3, #0]
  idx++;
 800f014:	7dfb      	ldrb	r3, [r7, #23]
 800f016:	3301      	adds	r3, #1
 800f018:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f01a:	e013      	b.n	800f044 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f01c:	7dfb      	ldrb	r3, [r7, #23]
 800f01e:	68ba      	ldr	r2, [r7, #8]
 800f020:	4413      	add	r3, r2
 800f022:	693a      	ldr	r2, [r7, #16]
 800f024:	7812      	ldrb	r2, [r2, #0]
 800f026:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f028:	693b      	ldr	r3, [r7, #16]
 800f02a:	3301      	adds	r3, #1
 800f02c:	613b      	str	r3, [r7, #16]
    idx++;
 800f02e:	7dfb      	ldrb	r3, [r7, #23]
 800f030:	3301      	adds	r3, #1
 800f032:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f034:	7dfb      	ldrb	r3, [r7, #23]
 800f036:	68ba      	ldr	r2, [r7, #8]
 800f038:	4413      	add	r3, r2
 800f03a:	2200      	movs	r2, #0
 800f03c:	701a      	strb	r2, [r3, #0]
    idx++;
 800f03e:	7dfb      	ldrb	r3, [r7, #23]
 800f040:	3301      	adds	r3, #1
 800f042:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d1e7      	bne.n	800f01c <USBD_GetString+0x52>
 800f04c:	e000      	b.n	800f050 <USBD_GetString+0x86>
    return;
 800f04e:	bf00      	nop
  }
}
 800f050:	3718      	adds	r7, #24
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}

0800f056 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f056:	b480      	push	{r7}
 800f058:	b085      	sub	sp, #20
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f05e:	2300      	movs	r3, #0
 800f060:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f066:	e005      	b.n	800f074 <USBD_GetLen+0x1e>
  {
    len++;
 800f068:	7bfb      	ldrb	r3, [r7, #15]
 800f06a:	3301      	adds	r3, #1
 800f06c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	3301      	adds	r3, #1
 800f072:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d1f5      	bne.n	800f068 <USBD_GetLen+0x12>
  }

  return len;
 800f07c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3714      	adds	r7, #20
 800f082:	46bd      	mov	sp, r7
 800f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f088:	4770      	bx	lr

0800f08a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f08a:	b580      	push	{r7, lr}
 800f08c:	b084      	sub	sp, #16
 800f08e:	af00      	add	r7, sp, #0
 800f090:	60f8      	str	r0, [r7, #12]
 800f092:	60b9      	str	r1, [r7, #8]
 800f094:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2202      	movs	r2, #2
 800f09a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	687a      	ldr	r2, [r7, #4]
 800f0a2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	687a      	ldr	r2, [r7, #4]
 800f0a8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	68ba      	ldr	r2, [r7, #8]
 800f0ae:	2100      	movs	r1, #0
 800f0b0:	68f8      	ldr	r0, [r7, #12]
 800f0b2:	f000 fd35 	bl	800fb20 <USBD_LL_Transmit>

  return USBD_OK;
 800f0b6:	2300      	movs	r3, #0
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	3710      	adds	r7, #16
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}

0800f0c0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b084      	sub	sp, #16
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	60f8      	str	r0, [r7, #12]
 800f0c8:	60b9      	str	r1, [r7, #8]
 800f0ca:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	68ba      	ldr	r2, [r7, #8]
 800f0d0:	2100      	movs	r1, #0
 800f0d2:	68f8      	ldr	r0, [r7, #12]
 800f0d4:	f000 fd24 	bl	800fb20 <USBD_LL_Transmit>

  return USBD_OK;
 800f0d8:	2300      	movs	r3, #0
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3710      	adds	r7, #16
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}

0800f0e2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f0e2:	b580      	push	{r7, lr}
 800f0e4:	b084      	sub	sp, #16
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	60f8      	str	r0, [r7, #12]
 800f0ea:	60b9      	str	r1, [r7, #8]
 800f0ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	2203      	movs	r2, #3
 800f0f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	687a      	ldr	r2, [r7, #4]
 800f0fa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	687a      	ldr	r2, [r7, #4]
 800f102:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	68ba      	ldr	r2, [r7, #8]
 800f10a:	2100      	movs	r1, #0
 800f10c:	68f8      	ldr	r0, [r7, #12]
 800f10e:	f000 fd3f 	bl	800fb90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f112:	2300      	movs	r3, #0
}
 800f114:	4618      	mov	r0, r3
 800f116:	3710      	adds	r7, #16
 800f118:	46bd      	mov	sp, r7
 800f11a:	bd80      	pop	{r7, pc}

0800f11c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b084      	sub	sp, #16
 800f120:	af00      	add	r7, sp, #0
 800f122:	60f8      	str	r0, [r7, #12]
 800f124:	60b9      	str	r1, [r7, #8]
 800f126:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	68ba      	ldr	r2, [r7, #8]
 800f12c:	2100      	movs	r1, #0
 800f12e:	68f8      	ldr	r0, [r7, #12]
 800f130:	f000 fd2e 	bl	800fb90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f134:	2300      	movs	r3, #0
}
 800f136:	4618      	mov	r0, r3
 800f138:	3710      	adds	r7, #16
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}

0800f13e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f13e:	b580      	push	{r7, lr}
 800f140:	b082      	sub	sp, #8
 800f142:	af00      	add	r7, sp, #0
 800f144:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2204      	movs	r2, #4
 800f14a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f14e:	2300      	movs	r3, #0
 800f150:	2200      	movs	r2, #0
 800f152:	2100      	movs	r1, #0
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f000 fce3 	bl	800fb20 <USBD_LL_Transmit>

  return USBD_OK;
 800f15a:	2300      	movs	r3, #0
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3708      	adds	r7, #8
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}

0800f164 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b082      	sub	sp, #8
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2205      	movs	r2, #5
 800f170:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f174:	2300      	movs	r3, #0
 800f176:	2200      	movs	r2, #0
 800f178:	2100      	movs	r1, #0
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f000 fd08 	bl	800fb90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f180:	2300      	movs	r3, #0
}
 800f182:	4618      	mov	r0, r3
 800f184:	3708      	adds	r7, #8
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}
	...

0800f18c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f190:	2200      	movs	r2, #0
 800f192:	4912      	ldr	r1, [pc, #72]	; (800f1dc <MX_USB_DEVICE_Init+0x50>)
 800f194:	4812      	ldr	r0, [pc, #72]	; (800f1e0 <MX_USB_DEVICE_Init+0x54>)
 800f196:	f7fe ff03 	bl	800dfa0 <USBD_Init>
 800f19a:	4603      	mov	r3, r0
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d001      	beq.n	800f1a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f1a0:	f7f5 fe6a 	bl	8004e78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f1a4:	490f      	ldr	r1, [pc, #60]	; (800f1e4 <MX_USB_DEVICE_Init+0x58>)
 800f1a6:	480e      	ldr	r0, [pc, #56]	; (800f1e0 <MX_USB_DEVICE_Init+0x54>)
 800f1a8:	f7fe ff2a 	bl	800e000 <USBD_RegisterClass>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d001      	beq.n	800f1b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f1b2:	f7f5 fe61 	bl	8004e78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f1b6:	490c      	ldr	r1, [pc, #48]	; (800f1e8 <MX_USB_DEVICE_Init+0x5c>)
 800f1b8:	4809      	ldr	r0, [pc, #36]	; (800f1e0 <MX_USB_DEVICE_Init+0x54>)
 800f1ba:	f7fe fe4b 	bl	800de54 <USBD_CDC_RegisterInterface>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d001      	beq.n	800f1c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f1c4:	f7f5 fe58 	bl	8004e78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f1c8:	4805      	ldr	r0, [pc, #20]	; (800f1e0 <MX_USB_DEVICE_Init+0x54>)
 800f1ca:	f7fe ff40 	bl	800e04e <USBD_Start>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d001      	beq.n	800f1d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f1d4:	f7f5 fe50 	bl	8004e78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f1d8:	bf00      	nop
 800f1da:	bd80      	pop	{r7, pc}
 800f1dc:	20000150 	.word	0x20000150
 800f1e0:	20000690 	.word	0x20000690
 800f1e4:	20000038 	.word	0x20000038
 800f1e8:	2000013c 	.word	0x2000013c

0800f1ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	4905      	ldr	r1, [pc, #20]	; (800f208 <CDC_Init_FS+0x1c>)
 800f1f4:	4805      	ldr	r0, [pc, #20]	; (800f20c <CDC_Init_FS+0x20>)
 800f1f6:	f7fe fe42 	bl	800de7e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f1fa:	4905      	ldr	r1, [pc, #20]	; (800f210 <CDC_Init_FS+0x24>)
 800f1fc:	4803      	ldr	r0, [pc, #12]	; (800f20c <CDC_Init_FS+0x20>)
 800f1fe:	f7fe fe5c 	bl	800deba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f202:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f204:	4618      	mov	r0, r3
 800f206:	bd80      	pop	{r7, pc}
 800f208:	20000a5c 	.word	0x20000a5c
 800f20c:	20000690 	.word	0x20000690
 800f210:	20000960 	.word	0x20000960

0800f214 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f214:	b480      	push	{r7}
 800f216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f218:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	46bd      	mov	sp, r7
 800f21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f222:	4770      	bx	lr

0800f224 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f224:	b480      	push	{r7}
 800f226:	b083      	sub	sp, #12
 800f228:	af00      	add	r7, sp, #0
 800f22a:	4603      	mov	r3, r0
 800f22c:	6039      	str	r1, [r7, #0]
 800f22e:	71fb      	strb	r3, [r7, #7]
 800f230:	4613      	mov	r3, r2
 800f232:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f234:	79fb      	ldrb	r3, [r7, #7]
 800f236:	2b23      	cmp	r3, #35	; 0x23
 800f238:	d84a      	bhi.n	800f2d0 <CDC_Control_FS+0xac>
 800f23a:	a201      	add	r2, pc, #4	; (adr r2, 800f240 <CDC_Control_FS+0x1c>)
 800f23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f240:	0800f2d1 	.word	0x0800f2d1
 800f244:	0800f2d1 	.word	0x0800f2d1
 800f248:	0800f2d1 	.word	0x0800f2d1
 800f24c:	0800f2d1 	.word	0x0800f2d1
 800f250:	0800f2d1 	.word	0x0800f2d1
 800f254:	0800f2d1 	.word	0x0800f2d1
 800f258:	0800f2d1 	.word	0x0800f2d1
 800f25c:	0800f2d1 	.word	0x0800f2d1
 800f260:	0800f2d1 	.word	0x0800f2d1
 800f264:	0800f2d1 	.word	0x0800f2d1
 800f268:	0800f2d1 	.word	0x0800f2d1
 800f26c:	0800f2d1 	.word	0x0800f2d1
 800f270:	0800f2d1 	.word	0x0800f2d1
 800f274:	0800f2d1 	.word	0x0800f2d1
 800f278:	0800f2d1 	.word	0x0800f2d1
 800f27c:	0800f2d1 	.word	0x0800f2d1
 800f280:	0800f2d1 	.word	0x0800f2d1
 800f284:	0800f2d1 	.word	0x0800f2d1
 800f288:	0800f2d1 	.word	0x0800f2d1
 800f28c:	0800f2d1 	.word	0x0800f2d1
 800f290:	0800f2d1 	.word	0x0800f2d1
 800f294:	0800f2d1 	.word	0x0800f2d1
 800f298:	0800f2d1 	.word	0x0800f2d1
 800f29c:	0800f2d1 	.word	0x0800f2d1
 800f2a0:	0800f2d1 	.word	0x0800f2d1
 800f2a4:	0800f2d1 	.word	0x0800f2d1
 800f2a8:	0800f2d1 	.word	0x0800f2d1
 800f2ac:	0800f2d1 	.word	0x0800f2d1
 800f2b0:	0800f2d1 	.word	0x0800f2d1
 800f2b4:	0800f2d1 	.word	0x0800f2d1
 800f2b8:	0800f2d1 	.word	0x0800f2d1
 800f2bc:	0800f2d1 	.word	0x0800f2d1
 800f2c0:	0800f2d1 	.word	0x0800f2d1
 800f2c4:	0800f2d1 	.word	0x0800f2d1
 800f2c8:	0800f2d1 	.word	0x0800f2d1
 800f2cc:	0800f2d1 	.word	0x0800f2d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f2d0:	bf00      	nop
  }

  return (USBD_OK);
 800f2d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	370c      	adds	r7, #12
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2de:	4770      	bx	lr

0800f2e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b082      	sub	sp, #8
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
 800f2e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f2ea:	6879      	ldr	r1, [r7, #4]
 800f2ec:	4808      	ldr	r0, [pc, #32]	; (800f310 <CDC_Receive_FS+0x30>)
 800f2ee:	f7fe fde4 	bl	800deba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f2f2:	4807      	ldr	r0, [pc, #28]	; (800f310 <CDC_Receive_FS+0x30>)
 800f2f4:	f7fe fe2a 	bl	800df4c <USBD_CDC_ReceivePacket>
  USB_CDC_RX_Interrupt(Buf, *Len);
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	4619      	mov	r1, r3
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f7f5 fda2 	bl	8004e48 <USB_CDC_RX_Interrupt>
  return (USBD_OK);
 800f304:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f306:	4618      	mov	r0, r3
 800f308:	3708      	adds	r7, #8
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}
 800f30e:	bf00      	nop
 800f310:	20000690 	.word	0x20000690

0800f314 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b084      	sub	sp, #16
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
 800f31c:	460b      	mov	r3, r1
 800f31e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f320:	2300      	movs	r3, #0
 800f322:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f324:	4b0d      	ldr	r3, [pc, #52]	; (800f35c <CDC_Transmit_FS+0x48>)
 800f326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f32a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f332:	2b00      	cmp	r3, #0
 800f334:	d001      	beq.n	800f33a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f336:	2301      	movs	r3, #1
 800f338:	e00b      	b.n	800f352 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f33a:	887b      	ldrh	r3, [r7, #2]
 800f33c:	461a      	mov	r2, r3
 800f33e:	6879      	ldr	r1, [r7, #4]
 800f340:	4806      	ldr	r0, [pc, #24]	; (800f35c <CDC_Transmit_FS+0x48>)
 800f342:	f7fe fd9c 	bl	800de7e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f346:	4805      	ldr	r0, [pc, #20]	; (800f35c <CDC_Transmit_FS+0x48>)
 800f348:	f7fe fdd0 	bl	800deec <USBD_CDC_TransmitPacket>
 800f34c:	4603      	mov	r3, r0
 800f34e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f350:	7bfb      	ldrb	r3, [r7, #15]
}
 800f352:	4618      	mov	r0, r3
 800f354:	3710      	adds	r7, #16
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}
 800f35a:	bf00      	nop
 800f35c:	20000690 	.word	0x20000690

0800f360 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f360:	b480      	push	{r7}
 800f362:	b087      	sub	sp, #28
 800f364:	af00      	add	r7, sp, #0
 800f366:	60f8      	str	r0, [r7, #12]
 800f368:	60b9      	str	r1, [r7, #8]
 800f36a:	4613      	mov	r3, r2
 800f36c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f36e:	2300      	movs	r3, #0
 800f370:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f372:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f376:	4618      	mov	r0, r3
 800f378:	371c      	adds	r7, #28
 800f37a:	46bd      	mov	sp, r7
 800f37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f380:	4770      	bx	lr
	...

0800f384 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f384:	b480      	push	{r7}
 800f386:	b083      	sub	sp, #12
 800f388:	af00      	add	r7, sp, #0
 800f38a:	4603      	mov	r3, r0
 800f38c:	6039      	str	r1, [r7, #0]
 800f38e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	2212      	movs	r2, #18
 800f394:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f396:	4b03      	ldr	r3, [pc, #12]	; (800f3a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f398:	4618      	mov	r0, r3
 800f39a:	370c      	adds	r7, #12
 800f39c:	46bd      	mov	sp, r7
 800f39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a2:	4770      	bx	lr
 800f3a4:	2000016c 	.word	0x2000016c

0800f3a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b083      	sub	sp, #12
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	6039      	str	r1, [r7, #0]
 800f3b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	2204      	movs	r2, #4
 800f3b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f3ba:	4b03      	ldr	r3, [pc, #12]	; (800f3c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	370c      	adds	r7, #12
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr
 800f3c8:	20000180 	.word	0x20000180

0800f3cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b082      	sub	sp, #8
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	6039      	str	r1, [r7, #0]
 800f3d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f3d8:	79fb      	ldrb	r3, [r7, #7]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d105      	bne.n	800f3ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f3de:	683a      	ldr	r2, [r7, #0]
 800f3e0:	4907      	ldr	r1, [pc, #28]	; (800f400 <USBD_FS_ProductStrDescriptor+0x34>)
 800f3e2:	4808      	ldr	r0, [pc, #32]	; (800f404 <USBD_FS_ProductStrDescriptor+0x38>)
 800f3e4:	f7ff fdf1 	bl	800efca <USBD_GetString>
 800f3e8:	e004      	b.n	800f3f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f3ea:	683a      	ldr	r2, [r7, #0]
 800f3ec:	4904      	ldr	r1, [pc, #16]	; (800f400 <USBD_FS_ProductStrDescriptor+0x34>)
 800f3ee:	4805      	ldr	r0, [pc, #20]	; (800f404 <USBD_FS_ProductStrDescriptor+0x38>)
 800f3f0:	f7ff fdeb 	bl	800efca <USBD_GetString>
  }
  return USBD_StrDesc;
 800f3f4:	4b02      	ldr	r3, [pc, #8]	; (800f400 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3708      	adds	r7, #8
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}
 800f3fe:	bf00      	nop
 800f400:	20000b58 	.word	0x20000b58
 800f404:	0800ff54 	.word	0x0800ff54

0800f408 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	4603      	mov	r3, r0
 800f410:	6039      	str	r1, [r7, #0]
 800f412:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f414:	683a      	ldr	r2, [r7, #0]
 800f416:	4904      	ldr	r1, [pc, #16]	; (800f428 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f418:	4804      	ldr	r0, [pc, #16]	; (800f42c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f41a:	f7ff fdd6 	bl	800efca <USBD_GetString>
  return USBD_StrDesc;
 800f41e:	4b02      	ldr	r3, [pc, #8]	; (800f428 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f420:	4618      	mov	r0, r3
 800f422:	3708      	adds	r7, #8
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}
 800f428:	20000b58 	.word	0x20000b58
 800f42c:	0800ff6c 	.word	0x0800ff6c

0800f430 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	af00      	add	r7, sp, #0
 800f436:	4603      	mov	r3, r0
 800f438:	6039      	str	r1, [r7, #0]
 800f43a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	221a      	movs	r2, #26
 800f440:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f442:	f000 f843 	bl	800f4cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f446:	4b02      	ldr	r3, [pc, #8]	; (800f450 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f448:	4618      	mov	r0, r3
 800f44a:	3708      	adds	r7, #8
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}
 800f450:	20000184 	.word	0x20000184

0800f454 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b082      	sub	sp, #8
 800f458:	af00      	add	r7, sp, #0
 800f45a:	4603      	mov	r3, r0
 800f45c:	6039      	str	r1, [r7, #0]
 800f45e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f460:	79fb      	ldrb	r3, [r7, #7]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d105      	bne.n	800f472 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f466:	683a      	ldr	r2, [r7, #0]
 800f468:	4907      	ldr	r1, [pc, #28]	; (800f488 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f46a:	4808      	ldr	r0, [pc, #32]	; (800f48c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f46c:	f7ff fdad 	bl	800efca <USBD_GetString>
 800f470:	e004      	b.n	800f47c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f472:	683a      	ldr	r2, [r7, #0]
 800f474:	4904      	ldr	r1, [pc, #16]	; (800f488 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f476:	4805      	ldr	r0, [pc, #20]	; (800f48c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f478:	f7ff fda7 	bl	800efca <USBD_GetString>
  }
  return USBD_StrDesc;
 800f47c:	4b02      	ldr	r3, [pc, #8]	; (800f488 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3708      	adds	r7, #8
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
 800f486:	bf00      	nop
 800f488:	20000b58 	.word	0x20000b58
 800f48c:	0800ff80 	.word	0x0800ff80

0800f490 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	4603      	mov	r3, r0
 800f498:	6039      	str	r1, [r7, #0]
 800f49a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f49c:	79fb      	ldrb	r3, [r7, #7]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d105      	bne.n	800f4ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f4a2:	683a      	ldr	r2, [r7, #0]
 800f4a4:	4907      	ldr	r1, [pc, #28]	; (800f4c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f4a6:	4808      	ldr	r0, [pc, #32]	; (800f4c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f4a8:	f7ff fd8f 	bl	800efca <USBD_GetString>
 800f4ac:	e004      	b.n	800f4b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f4ae:	683a      	ldr	r2, [r7, #0]
 800f4b0:	4904      	ldr	r1, [pc, #16]	; (800f4c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f4b2:	4805      	ldr	r0, [pc, #20]	; (800f4c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f4b4:	f7ff fd89 	bl	800efca <USBD_GetString>
  }
  return USBD_StrDesc;
 800f4b8:	4b02      	ldr	r3, [pc, #8]	; (800f4c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3708      	adds	r7, #8
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}
 800f4c2:	bf00      	nop
 800f4c4:	20000b58 	.word	0x20000b58
 800f4c8:	0800ff8c 	.word	0x0800ff8c

0800f4cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b084      	sub	sp, #16
 800f4d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f4d2:	4b0f      	ldr	r3, [pc, #60]	; (800f510 <Get_SerialNum+0x44>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f4d8:	4b0e      	ldr	r3, [pc, #56]	; (800f514 <Get_SerialNum+0x48>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f4de:	4b0e      	ldr	r3, [pc, #56]	; (800f518 <Get_SerialNum+0x4c>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f4e4:	68fa      	ldr	r2, [r7, #12]
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	4413      	add	r3, r2
 800f4ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d009      	beq.n	800f506 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f4f2:	2208      	movs	r2, #8
 800f4f4:	4909      	ldr	r1, [pc, #36]	; (800f51c <Get_SerialNum+0x50>)
 800f4f6:	68f8      	ldr	r0, [r7, #12]
 800f4f8:	f000 f814 	bl	800f524 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f4fc:	2204      	movs	r2, #4
 800f4fe:	4908      	ldr	r1, [pc, #32]	; (800f520 <Get_SerialNum+0x54>)
 800f500:	68b8      	ldr	r0, [r7, #8]
 800f502:	f000 f80f 	bl	800f524 <IntToUnicode>
  }
}
 800f506:	bf00      	nop
 800f508:	3710      	adds	r7, #16
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	bf00      	nop
 800f510:	1fff7590 	.word	0x1fff7590
 800f514:	1fff7594 	.word	0x1fff7594
 800f518:	1fff7598 	.word	0x1fff7598
 800f51c:	20000186 	.word	0x20000186
 800f520:	20000196 	.word	0x20000196

0800f524 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f524:	b480      	push	{r7}
 800f526:	b087      	sub	sp, #28
 800f528:	af00      	add	r7, sp, #0
 800f52a:	60f8      	str	r0, [r7, #12]
 800f52c:	60b9      	str	r1, [r7, #8]
 800f52e:	4613      	mov	r3, r2
 800f530:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f532:	2300      	movs	r3, #0
 800f534:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f536:	2300      	movs	r3, #0
 800f538:	75fb      	strb	r3, [r7, #23]
 800f53a:	e027      	b.n	800f58c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	0f1b      	lsrs	r3, r3, #28
 800f540:	2b09      	cmp	r3, #9
 800f542:	d80b      	bhi.n	800f55c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	0f1b      	lsrs	r3, r3, #28
 800f548:	b2da      	uxtb	r2, r3
 800f54a:	7dfb      	ldrb	r3, [r7, #23]
 800f54c:	005b      	lsls	r3, r3, #1
 800f54e:	4619      	mov	r1, r3
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	440b      	add	r3, r1
 800f554:	3230      	adds	r2, #48	; 0x30
 800f556:	b2d2      	uxtb	r2, r2
 800f558:	701a      	strb	r2, [r3, #0]
 800f55a:	e00a      	b.n	800f572 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	0f1b      	lsrs	r3, r3, #28
 800f560:	b2da      	uxtb	r2, r3
 800f562:	7dfb      	ldrb	r3, [r7, #23]
 800f564:	005b      	lsls	r3, r3, #1
 800f566:	4619      	mov	r1, r3
 800f568:	68bb      	ldr	r3, [r7, #8]
 800f56a:	440b      	add	r3, r1
 800f56c:	3237      	adds	r2, #55	; 0x37
 800f56e:	b2d2      	uxtb	r2, r2
 800f570:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	011b      	lsls	r3, r3, #4
 800f576:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f578:	7dfb      	ldrb	r3, [r7, #23]
 800f57a:	005b      	lsls	r3, r3, #1
 800f57c:	3301      	adds	r3, #1
 800f57e:	68ba      	ldr	r2, [r7, #8]
 800f580:	4413      	add	r3, r2
 800f582:	2200      	movs	r2, #0
 800f584:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f586:	7dfb      	ldrb	r3, [r7, #23]
 800f588:	3301      	adds	r3, #1
 800f58a:	75fb      	strb	r3, [r7, #23]
 800f58c:	7dfa      	ldrb	r2, [r7, #23]
 800f58e:	79fb      	ldrb	r3, [r7, #7]
 800f590:	429a      	cmp	r2, r3
 800f592:	d3d3      	bcc.n	800f53c <IntToUnicode+0x18>
  }
}
 800f594:	bf00      	nop
 800f596:	bf00      	nop
 800f598:	371c      	adds	r7, #28
 800f59a:	46bd      	mov	sp, r7
 800f59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a0:	4770      	bx	lr
	...

0800f5a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b09c      	sub	sp, #112	; 0x70
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f5ac:	f107 0310 	add.w	r3, r7, #16
 800f5b0:	2260      	movs	r2, #96	; 0x60
 800f5b2:	2100      	movs	r1, #0
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f000 fbbf 	bl	800fd38 <memset>
  if(pcdHandle->Instance==USB)
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	4a15      	ldr	r2, [pc, #84]	; (800f614 <HAL_PCD_MspInit+0x70>)
 800f5c0:	4293      	cmp	r3, r2
 800f5c2:	d122      	bne.n	800f60a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f5c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f5c8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f5ce:	f107 0310 	add.w	r3, r7, #16
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f7fa faf0 	bl	8009bb8 <HAL_RCCEx_PeriphCLKConfig>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d001      	beq.n	800f5e2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800f5de:	f7f5 fc4b 	bl	8004e78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800f5e2:	4b0d      	ldr	r3, [pc, #52]	; (800f618 <HAL_PCD_MspInit+0x74>)
 800f5e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5e6:	4a0c      	ldr	r2, [pc, #48]	; (800f618 <HAL_PCD_MspInit+0x74>)
 800f5e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f5ec:	6593      	str	r3, [r2, #88]	; 0x58
 800f5ee:	4b0a      	ldr	r3, [pc, #40]	; (800f618 <HAL_PCD_MspInit+0x74>)
 800f5f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f5f6:	60fb      	str	r3, [r7, #12]
 800f5f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	2100      	movs	r1, #0
 800f5fe:	2043      	movs	r0, #67	; 0x43
 800f600:	f7f6 fec1 	bl	8006386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800f604:	2043      	movs	r0, #67	; 0x43
 800f606:	f7f6 feda 	bl	80063be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800f60a:	bf00      	nop
 800f60c:	3770      	adds	r7, #112	; 0x70
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}
 800f612:	bf00      	nop
 800f614:	40006800 	.word	0x40006800
 800f618:	40021000 	.word	0x40021000

0800f61c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b082      	sub	sp, #8
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800f630:	4619      	mov	r1, r3
 800f632:	4610      	mov	r0, r2
 800f634:	f7fe fd56 	bl	800e0e4 <USBD_LL_SetupStage>
}
 800f638:	bf00      	nop
 800f63a:	3708      	adds	r7, #8
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b082      	sub	sp, #8
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	460b      	mov	r3, r1
 800f64a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800f652:	78fa      	ldrb	r2, [r7, #3]
 800f654:	6879      	ldr	r1, [r7, #4]
 800f656:	4613      	mov	r3, r2
 800f658:	009b      	lsls	r3, r3, #2
 800f65a:	4413      	add	r3, r2
 800f65c:	00db      	lsls	r3, r3, #3
 800f65e:	440b      	add	r3, r1
 800f660:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800f664:	681a      	ldr	r2, [r3, #0]
 800f666:	78fb      	ldrb	r3, [r7, #3]
 800f668:	4619      	mov	r1, r3
 800f66a:	f7fe fd90 	bl	800e18e <USBD_LL_DataOutStage>
}
 800f66e:	bf00      	nop
 800f670:	3708      	adds	r7, #8
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}

0800f676 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f676:	b580      	push	{r7, lr}
 800f678:	b082      	sub	sp, #8
 800f67a:	af00      	add	r7, sp, #0
 800f67c:	6078      	str	r0, [r7, #4]
 800f67e:	460b      	mov	r3, r1
 800f680:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800f688:	78fa      	ldrb	r2, [r7, #3]
 800f68a:	6879      	ldr	r1, [r7, #4]
 800f68c:	4613      	mov	r3, r2
 800f68e:	009b      	lsls	r3, r3, #2
 800f690:	4413      	add	r3, r2
 800f692:	00db      	lsls	r3, r3, #3
 800f694:	440b      	add	r3, r1
 800f696:	3340      	adds	r3, #64	; 0x40
 800f698:	681a      	ldr	r2, [r3, #0]
 800f69a:	78fb      	ldrb	r3, [r7, #3]
 800f69c:	4619      	mov	r1, r3
 800f69e:	f7fe fdd9 	bl	800e254 <USBD_LL_DataInStage>
}
 800f6a2:	bf00      	nop
 800f6a4:	3708      	adds	r7, #8
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}

0800f6aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6aa:	b580      	push	{r7, lr}
 800f6ac:	b082      	sub	sp, #8
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f7fe feed 	bl	800e498 <USBD_LL_SOF>
}
 800f6be:	bf00      	nop
 800f6c0:	3708      	adds	r7, #8
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}

0800f6c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6c6:	b580      	push	{r7, lr}
 800f6c8:	b084      	sub	sp, #16
 800f6ca:	af00      	add	r7, sp, #0
 800f6cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	689b      	ldr	r3, [r3, #8]
 800f6d6:	2b02      	cmp	r3, #2
 800f6d8:	d001      	beq.n	800f6de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f6da:	f7f5 fbcd 	bl	8004e78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f6e4:	7bfa      	ldrb	r2, [r7, #15]
 800f6e6:	4611      	mov	r1, r2
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f7fe fe97 	bl	800e41c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7fe fe43 	bl	800e380 <USBD_LL_Reset>
}
 800f6fa:	bf00      	nop
 800f6fc:	3710      	adds	r7, #16
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd80      	pop	{r7, pc}
	...

0800f704 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b082      	sub	sp, #8
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f712:	4618      	mov	r0, r3
 800f714:	f7fe fe92 	bl	800e43c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	699b      	ldr	r3, [r3, #24]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d005      	beq.n	800f72c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f720:	4b04      	ldr	r3, [pc, #16]	; (800f734 <HAL_PCD_SuspendCallback+0x30>)
 800f722:	691b      	ldr	r3, [r3, #16]
 800f724:	4a03      	ldr	r2, [pc, #12]	; (800f734 <HAL_PCD_SuspendCallback+0x30>)
 800f726:	f043 0306 	orr.w	r3, r3, #6
 800f72a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f72c:	bf00      	nop
 800f72e:	3708      	adds	r7, #8
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}
 800f734:	e000ed00 	.word	0xe000ed00

0800f738 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b082      	sub	sp, #8
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	699b      	ldr	r3, [r3, #24]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d007      	beq.n	800f758 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f748:	4b08      	ldr	r3, [pc, #32]	; (800f76c <HAL_PCD_ResumeCallback+0x34>)
 800f74a:	691b      	ldr	r3, [r3, #16]
 800f74c:	4a07      	ldr	r2, [pc, #28]	; (800f76c <HAL_PCD_ResumeCallback+0x34>)
 800f74e:	f023 0306 	bic.w	r3, r3, #6
 800f752:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f754:	f000 fa80 	bl	800fc58 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f75e:	4618      	mov	r0, r3
 800f760:	f7fe fe82 	bl	800e468 <USBD_LL_Resume>
}
 800f764:	bf00      	nop
 800f766:	3708      	adds	r7, #8
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}
 800f76c:	e000ed00 	.word	0xe000ed00

0800f770 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b082      	sub	sp, #8
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800f778:	f7f9 fc02 	bl	8008f80 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800f77c:	4a2b      	ldr	r2, [pc, #172]	; (800f82c <USBD_LL_Init+0xbc>)
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	4a29      	ldr	r2, [pc, #164]	; (800f82c <USBD_LL_Init+0xbc>)
 800f788:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800f78c:	4b27      	ldr	r3, [pc, #156]	; (800f82c <USBD_LL_Init+0xbc>)
 800f78e:	4a28      	ldr	r2, [pc, #160]	; (800f830 <USBD_LL_Init+0xc0>)
 800f790:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800f792:	4b26      	ldr	r3, [pc, #152]	; (800f82c <USBD_LL_Init+0xbc>)
 800f794:	2208      	movs	r2, #8
 800f796:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800f798:	4b24      	ldr	r3, [pc, #144]	; (800f82c <USBD_LL_Init+0xbc>)
 800f79a:	2202      	movs	r2, #2
 800f79c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f79e:	4b23      	ldr	r3, [pc, #140]	; (800f82c <USBD_LL_Init+0xbc>)
 800f7a0:	2202      	movs	r2, #2
 800f7a2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800f7a4:	4b21      	ldr	r3, [pc, #132]	; (800f82c <USBD_LL_Init+0xbc>)
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800f7aa:	4b20      	ldr	r3, [pc, #128]	; (800f82c <USBD_LL_Init+0xbc>)
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800f7b0:	4b1e      	ldr	r3, [pc, #120]	; (800f82c <USBD_LL_Init+0xbc>)
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800f7b6:	4b1d      	ldr	r3, [pc, #116]	; (800f82c <USBD_LL_Init+0xbc>)
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800f7bc:	481b      	ldr	r0, [pc, #108]	; (800f82c <USBD_LL_Init+0xbc>)
 800f7be:	f7f7 fde3 	bl	8007388 <HAL_PCD_Init>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d001      	beq.n	800f7cc <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800f7c8:	f7f5 fb56 	bl	8004e78 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f7d2:	2318      	movs	r3, #24
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	2100      	movs	r1, #0
 800f7d8:	f7f9 faf3 	bl	8008dc2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f7e2:	2358      	movs	r3, #88	; 0x58
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	2180      	movs	r1, #128	; 0x80
 800f7e8:	f7f9 faeb 	bl	8008dc2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f7f2:	23c0      	movs	r3, #192	; 0xc0
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	2181      	movs	r1, #129	; 0x81
 800f7f8:	f7f9 fae3 	bl	8008dc2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f802:	f44f 7388 	mov.w	r3, #272	; 0x110
 800f806:	2200      	movs	r2, #0
 800f808:	2101      	movs	r1, #1
 800f80a:	f7f9 fada 	bl	8008dc2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f814:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f818:	2200      	movs	r2, #0
 800f81a:	2182      	movs	r1, #130	; 0x82
 800f81c:	f7f9 fad1 	bl	8008dc2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800f820:	2300      	movs	r3, #0
}
 800f822:	4618      	mov	r0, r3
 800f824:	3708      	adds	r7, #8
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
 800f82a:	bf00      	nop
 800f82c:	20000d58 	.word	0x20000d58
 800f830:	40006800 	.word	0x40006800

0800f834 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b084      	sub	sp, #16
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f83c:	2300      	movs	r3, #0
 800f83e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f840:	2300      	movs	r3, #0
 800f842:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7f7 feb3 	bl	80075b6 <HAL_PCD_Start>
 800f850:	4603      	mov	r3, r0
 800f852:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f854:	7bbb      	ldrb	r3, [r7, #14]
 800f856:	2b03      	cmp	r3, #3
 800f858:	d816      	bhi.n	800f888 <USBD_LL_Start+0x54>
 800f85a:	a201      	add	r2, pc, #4	; (adr r2, 800f860 <USBD_LL_Start+0x2c>)
 800f85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f860:	0800f871 	.word	0x0800f871
 800f864:	0800f877 	.word	0x0800f877
 800f868:	0800f87d 	.word	0x0800f87d
 800f86c:	0800f883 	.word	0x0800f883
    case HAL_OK :
      usb_status = USBD_OK;
 800f870:	2300      	movs	r3, #0
 800f872:	73fb      	strb	r3, [r7, #15]
    break;
 800f874:	e00b      	b.n	800f88e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f876:	2303      	movs	r3, #3
 800f878:	73fb      	strb	r3, [r7, #15]
    break;
 800f87a:	e008      	b.n	800f88e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f87c:	2301      	movs	r3, #1
 800f87e:	73fb      	strb	r3, [r7, #15]
    break;
 800f880:	e005      	b.n	800f88e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f882:	2303      	movs	r3, #3
 800f884:	73fb      	strb	r3, [r7, #15]
    break;
 800f886:	e002      	b.n	800f88e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800f888:	2303      	movs	r3, #3
 800f88a:	73fb      	strb	r3, [r7, #15]
    break;
 800f88c:	bf00      	nop
  }
  return usb_status;
 800f88e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f890:	4618      	mov	r0, r3
 800f892:	3710      	adds	r7, #16
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}

0800f898 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b084      	sub	sp, #16
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	4608      	mov	r0, r1
 800f8a2:	4611      	mov	r1, r2
 800f8a4:	461a      	mov	r2, r3
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	70fb      	strb	r3, [r7, #3]
 800f8aa:	460b      	mov	r3, r1
 800f8ac:	70bb      	strb	r3, [r7, #2]
 800f8ae:	4613      	mov	r3, r2
 800f8b0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f8c0:	78bb      	ldrb	r3, [r7, #2]
 800f8c2:	883a      	ldrh	r2, [r7, #0]
 800f8c4:	78f9      	ldrb	r1, [r7, #3]
 800f8c6:	f7f7 ffe4 	bl	8007892 <HAL_PCD_EP_Open>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f8ce:	7bbb      	ldrb	r3, [r7, #14]
 800f8d0:	2b03      	cmp	r3, #3
 800f8d2:	d817      	bhi.n	800f904 <USBD_LL_OpenEP+0x6c>
 800f8d4:	a201      	add	r2, pc, #4	; (adr r2, 800f8dc <USBD_LL_OpenEP+0x44>)
 800f8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8da:	bf00      	nop
 800f8dc:	0800f8ed 	.word	0x0800f8ed
 800f8e0:	0800f8f3 	.word	0x0800f8f3
 800f8e4:	0800f8f9 	.word	0x0800f8f9
 800f8e8:	0800f8ff 	.word	0x0800f8ff
    case HAL_OK :
      usb_status = USBD_OK;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	73fb      	strb	r3, [r7, #15]
    break;
 800f8f0:	e00b      	b.n	800f90a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f8f2:	2303      	movs	r3, #3
 800f8f4:	73fb      	strb	r3, [r7, #15]
    break;
 800f8f6:	e008      	b.n	800f90a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	73fb      	strb	r3, [r7, #15]
    break;
 800f8fc:	e005      	b.n	800f90a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f8fe:	2303      	movs	r3, #3
 800f900:	73fb      	strb	r3, [r7, #15]
    break;
 800f902:	e002      	b.n	800f90a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800f904:	2303      	movs	r3, #3
 800f906:	73fb      	strb	r3, [r7, #15]
    break;
 800f908:	bf00      	nop
  }
  return usb_status;
 800f90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3710      	adds	r7, #16
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}

0800f914 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b084      	sub	sp, #16
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
 800f91c:	460b      	mov	r3, r1
 800f91e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f920:	2300      	movs	r3, #0
 800f922:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f924:	2300      	movs	r3, #0
 800f926:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f92e:	78fa      	ldrb	r2, [r7, #3]
 800f930:	4611      	mov	r1, r2
 800f932:	4618      	mov	r0, r3
 800f934:	f7f8 f815 	bl	8007962 <HAL_PCD_EP_Close>
 800f938:	4603      	mov	r3, r0
 800f93a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f93c:	7bbb      	ldrb	r3, [r7, #14]
 800f93e:	2b03      	cmp	r3, #3
 800f940:	d816      	bhi.n	800f970 <USBD_LL_CloseEP+0x5c>
 800f942:	a201      	add	r2, pc, #4	; (adr r2, 800f948 <USBD_LL_CloseEP+0x34>)
 800f944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f948:	0800f959 	.word	0x0800f959
 800f94c:	0800f95f 	.word	0x0800f95f
 800f950:	0800f965 	.word	0x0800f965
 800f954:	0800f96b 	.word	0x0800f96b
    case HAL_OK :
      usb_status = USBD_OK;
 800f958:	2300      	movs	r3, #0
 800f95a:	73fb      	strb	r3, [r7, #15]
    break;
 800f95c:	e00b      	b.n	800f976 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f95e:	2303      	movs	r3, #3
 800f960:	73fb      	strb	r3, [r7, #15]
    break;
 800f962:	e008      	b.n	800f976 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f964:	2301      	movs	r3, #1
 800f966:	73fb      	strb	r3, [r7, #15]
    break;
 800f968:	e005      	b.n	800f976 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f96a:	2303      	movs	r3, #3
 800f96c:	73fb      	strb	r3, [r7, #15]
    break;
 800f96e:	e002      	b.n	800f976 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f970:	2303      	movs	r3, #3
 800f972:	73fb      	strb	r3, [r7, #15]
    break;
 800f974:	bf00      	nop
  }
  return usb_status;
 800f976:	7bfb      	ldrb	r3, [r7, #15]
}
 800f978:	4618      	mov	r0, r3
 800f97a:	3710      	adds	r7, #16
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}

0800f980 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b084      	sub	sp, #16
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
 800f988:	460b      	mov	r3, r1
 800f98a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f98c:	2300      	movs	r3, #0
 800f98e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f990:	2300      	movs	r3, #0
 800f992:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f99a:	78fa      	ldrb	r2, [r7, #3]
 800f99c:	4611      	mov	r1, r2
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7f8 f8c3 	bl	8007b2a <HAL_PCD_EP_SetStall>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f9a8:	7bbb      	ldrb	r3, [r7, #14]
 800f9aa:	2b03      	cmp	r3, #3
 800f9ac:	d816      	bhi.n	800f9dc <USBD_LL_StallEP+0x5c>
 800f9ae:	a201      	add	r2, pc, #4	; (adr r2, 800f9b4 <USBD_LL_StallEP+0x34>)
 800f9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9b4:	0800f9c5 	.word	0x0800f9c5
 800f9b8:	0800f9cb 	.word	0x0800f9cb
 800f9bc:	0800f9d1 	.word	0x0800f9d1
 800f9c0:	0800f9d7 	.word	0x0800f9d7
    case HAL_OK :
      usb_status = USBD_OK;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	73fb      	strb	r3, [r7, #15]
    break;
 800f9c8:	e00b      	b.n	800f9e2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f9ca:	2303      	movs	r3, #3
 800f9cc:	73fb      	strb	r3, [r7, #15]
    break;
 800f9ce:	e008      	b.n	800f9e2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f9d0:	2301      	movs	r3, #1
 800f9d2:	73fb      	strb	r3, [r7, #15]
    break;
 800f9d4:	e005      	b.n	800f9e2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f9d6:	2303      	movs	r3, #3
 800f9d8:	73fb      	strb	r3, [r7, #15]
    break;
 800f9da:	e002      	b.n	800f9e2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f9dc:	2303      	movs	r3, #3
 800f9de:	73fb      	strb	r3, [r7, #15]
    break;
 800f9e0:	bf00      	nop
  }
  return usb_status;
 800f9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	3710      	adds	r7, #16
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}

0800f9ec <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b084      	sub	sp, #16
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
 800f9f4:	460b      	mov	r3, r1
 800f9f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fa06:	78fa      	ldrb	r2, [r7, #3]
 800fa08:	4611      	mov	r1, r2
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7f8 f8ef 	bl	8007bee <HAL_PCD_EP_ClrStall>
 800fa10:	4603      	mov	r3, r0
 800fa12:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fa14:	7bbb      	ldrb	r3, [r7, #14]
 800fa16:	2b03      	cmp	r3, #3
 800fa18:	d816      	bhi.n	800fa48 <USBD_LL_ClearStallEP+0x5c>
 800fa1a:	a201      	add	r2, pc, #4	; (adr r2, 800fa20 <USBD_LL_ClearStallEP+0x34>)
 800fa1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa20:	0800fa31 	.word	0x0800fa31
 800fa24:	0800fa37 	.word	0x0800fa37
 800fa28:	0800fa3d 	.word	0x0800fa3d
 800fa2c:	0800fa43 	.word	0x0800fa43
    case HAL_OK :
      usb_status = USBD_OK;
 800fa30:	2300      	movs	r3, #0
 800fa32:	73fb      	strb	r3, [r7, #15]
    break;
 800fa34:	e00b      	b.n	800fa4e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fa36:	2303      	movs	r3, #3
 800fa38:	73fb      	strb	r3, [r7, #15]
    break;
 800fa3a:	e008      	b.n	800fa4e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	73fb      	strb	r3, [r7, #15]
    break;
 800fa40:	e005      	b.n	800fa4e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fa42:	2303      	movs	r3, #3
 800fa44:	73fb      	strb	r3, [r7, #15]
    break;
 800fa46:	e002      	b.n	800fa4e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800fa48:	2303      	movs	r3, #3
 800fa4a:	73fb      	strb	r3, [r7, #15]
    break;
 800fa4c:	bf00      	nop
  }
  return usb_status;
 800fa4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	3710      	adds	r7, #16
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}

0800fa58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa58:	b480      	push	{r7}
 800fa5a:	b085      	sub	sp, #20
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	460b      	mov	r3, r1
 800fa62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fa6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fa6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	da0c      	bge.n	800fa8e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fa74:	78fb      	ldrb	r3, [r7, #3]
 800fa76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa7a:	68f9      	ldr	r1, [r7, #12]
 800fa7c:	1c5a      	adds	r2, r3, #1
 800fa7e:	4613      	mov	r3, r2
 800fa80:	009b      	lsls	r3, r3, #2
 800fa82:	4413      	add	r3, r2
 800fa84:	00db      	lsls	r3, r3, #3
 800fa86:	440b      	add	r3, r1
 800fa88:	3306      	adds	r3, #6
 800fa8a:	781b      	ldrb	r3, [r3, #0]
 800fa8c:	e00b      	b.n	800faa6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fa8e:	78fb      	ldrb	r3, [r7, #3]
 800fa90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa94:	68f9      	ldr	r1, [r7, #12]
 800fa96:	4613      	mov	r3, r2
 800fa98:	009b      	lsls	r3, r3, #2
 800fa9a:	4413      	add	r3, r2
 800fa9c:	00db      	lsls	r3, r3, #3
 800fa9e:	440b      	add	r3, r1
 800faa0:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800faa4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	3714      	adds	r7, #20
 800faaa:	46bd      	mov	sp, r7
 800faac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab0:	4770      	bx	lr
	...

0800fab4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b084      	sub	sp, #16
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	460b      	mov	r3, r1
 800fabe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fac0:	2300      	movs	r3, #0
 800fac2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fac4:	2300      	movs	r3, #0
 800fac6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800face:	78fa      	ldrb	r2, [r7, #3]
 800fad0:	4611      	mov	r1, r2
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7f7 feb8 	bl	8007848 <HAL_PCD_SetAddress>
 800fad8:	4603      	mov	r3, r0
 800fada:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fadc:	7bbb      	ldrb	r3, [r7, #14]
 800fade:	2b03      	cmp	r3, #3
 800fae0:	d816      	bhi.n	800fb10 <USBD_LL_SetUSBAddress+0x5c>
 800fae2:	a201      	add	r2, pc, #4	; (adr r2, 800fae8 <USBD_LL_SetUSBAddress+0x34>)
 800fae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fae8:	0800faf9 	.word	0x0800faf9
 800faec:	0800faff 	.word	0x0800faff
 800faf0:	0800fb05 	.word	0x0800fb05
 800faf4:	0800fb0b 	.word	0x0800fb0b
    case HAL_OK :
      usb_status = USBD_OK;
 800faf8:	2300      	movs	r3, #0
 800fafa:	73fb      	strb	r3, [r7, #15]
    break;
 800fafc:	e00b      	b.n	800fb16 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fafe:	2303      	movs	r3, #3
 800fb00:	73fb      	strb	r3, [r7, #15]
    break;
 800fb02:	e008      	b.n	800fb16 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fb04:	2301      	movs	r3, #1
 800fb06:	73fb      	strb	r3, [r7, #15]
    break;
 800fb08:	e005      	b.n	800fb16 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fb0a:	2303      	movs	r3, #3
 800fb0c:	73fb      	strb	r3, [r7, #15]
    break;
 800fb0e:	e002      	b.n	800fb16 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800fb10:	2303      	movs	r3, #3
 800fb12:	73fb      	strb	r3, [r7, #15]
    break;
 800fb14:	bf00      	nop
  }
  return usb_status;
 800fb16:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3710      	adds	r7, #16
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}

0800fb20 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b086      	sub	sp, #24
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	607a      	str	r2, [r7, #4]
 800fb2a:	603b      	str	r3, [r7, #0]
 800fb2c:	460b      	mov	r3, r1
 800fb2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb30:	2300      	movs	r3, #0
 800fb32:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb34:	2300      	movs	r3, #0
 800fb36:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fb3e:	7af9      	ldrb	r1, [r7, #11]
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	687a      	ldr	r2, [r7, #4]
 800fb44:	f7f7 ffad 	bl	8007aa2 <HAL_PCD_EP_Transmit>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800fb4c:	7dbb      	ldrb	r3, [r7, #22]
 800fb4e:	2b03      	cmp	r3, #3
 800fb50:	d816      	bhi.n	800fb80 <USBD_LL_Transmit+0x60>
 800fb52:	a201      	add	r2, pc, #4	; (adr r2, 800fb58 <USBD_LL_Transmit+0x38>)
 800fb54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb58:	0800fb69 	.word	0x0800fb69
 800fb5c:	0800fb6f 	.word	0x0800fb6f
 800fb60:	0800fb75 	.word	0x0800fb75
 800fb64:	0800fb7b 	.word	0x0800fb7b
    case HAL_OK :
      usb_status = USBD_OK;
 800fb68:	2300      	movs	r3, #0
 800fb6a:	75fb      	strb	r3, [r7, #23]
    break;
 800fb6c:	e00b      	b.n	800fb86 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fb6e:	2303      	movs	r3, #3
 800fb70:	75fb      	strb	r3, [r7, #23]
    break;
 800fb72:	e008      	b.n	800fb86 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fb74:	2301      	movs	r3, #1
 800fb76:	75fb      	strb	r3, [r7, #23]
    break;
 800fb78:	e005      	b.n	800fb86 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fb7a:	2303      	movs	r3, #3
 800fb7c:	75fb      	strb	r3, [r7, #23]
    break;
 800fb7e:	e002      	b.n	800fb86 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800fb80:	2303      	movs	r3, #3
 800fb82:	75fb      	strb	r3, [r7, #23]
    break;
 800fb84:	bf00      	nop
  }
  return usb_status;
 800fb86:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	3718      	adds	r7, #24
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}

0800fb90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b086      	sub	sp, #24
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	60f8      	str	r0, [r7, #12]
 800fb98:	607a      	str	r2, [r7, #4]
 800fb9a:	603b      	str	r3, [r7, #0]
 800fb9c:	460b      	mov	r3, r1
 800fb9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fba0:	2300      	movs	r3, #0
 800fba2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fba4:	2300      	movs	r3, #0
 800fba6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fbae:	7af9      	ldrb	r1, [r7, #11]
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	687a      	ldr	r2, [r7, #4]
 800fbb4:	f7f7 ff1f 	bl	80079f6 <HAL_PCD_EP_Receive>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800fbbc:	7dbb      	ldrb	r3, [r7, #22]
 800fbbe:	2b03      	cmp	r3, #3
 800fbc0:	d816      	bhi.n	800fbf0 <USBD_LL_PrepareReceive+0x60>
 800fbc2:	a201      	add	r2, pc, #4	; (adr r2, 800fbc8 <USBD_LL_PrepareReceive+0x38>)
 800fbc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbc8:	0800fbd9 	.word	0x0800fbd9
 800fbcc:	0800fbdf 	.word	0x0800fbdf
 800fbd0:	0800fbe5 	.word	0x0800fbe5
 800fbd4:	0800fbeb 	.word	0x0800fbeb
    case HAL_OK :
      usb_status = USBD_OK;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	75fb      	strb	r3, [r7, #23]
    break;
 800fbdc:	e00b      	b.n	800fbf6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fbde:	2303      	movs	r3, #3
 800fbe0:	75fb      	strb	r3, [r7, #23]
    break;
 800fbe2:	e008      	b.n	800fbf6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	75fb      	strb	r3, [r7, #23]
    break;
 800fbe8:	e005      	b.n	800fbf6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fbea:	2303      	movs	r3, #3
 800fbec:	75fb      	strb	r3, [r7, #23]
    break;
 800fbee:	e002      	b.n	800fbf6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800fbf0:	2303      	movs	r3, #3
 800fbf2:	75fb      	strb	r3, [r7, #23]
    break;
 800fbf4:	bf00      	nop
  }
  return usb_status;
 800fbf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3718      	adds	r7, #24
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}

0800fc00 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b082      	sub	sp, #8
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
 800fc08:	460b      	mov	r3, r1
 800fc0a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fc12:	78fa      	ldrb	r2, [r7, #3]
 800fc14:	4611      	mov	r1, r2
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7f7 ff2b 	bl	8007a72 <HAL_PCD_EP_GetRxCount>
 800fc1c:	4603      	mov	r3, r0
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3708      	adds	r7, #8
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
	...

0800fc28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b083      	sub	sp, #12
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fc30:	4b03      	ldr	r3, [pc, #12]	; (800fc40 <USBD_static_malloc+0x18>)
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	370c      	adds	r7, #12
 800fc36:	46bd      	mov	sp, r7
 800fc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3c:	4770      	bx	lr
 800fc3e:	bf00      	nop
 800fc40:	20001054 	.word	0x20001054

0800fc44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fc44:	b480      	push	{r7}
 800fc46:	b083      	sub	sp, #12
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]

}
 800fc4c:	bf00      	nop
 800fc4e:	370c      	adds	r7, #12
 800fc50:	46bd      	mov	sp, r7
 800fc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc56:	4770      	bx	lr

0800fc58 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800fc58:	b480      	push	{r7}
 800fc5a:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800fc5c:	bf00      	nop
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc64:	4770      	bx	lr

0800fc66 <_Znwj>:
 800fc66:	2801      	cmp	r0, #1
 800fc68:	bf38      	it	cc
 800fc6a:	2001      	movcc	r0, #1
 800fc6c:	b510      	push	{r4, lr}
 800fc6e:	4604      	mov	r4, r0
 800fc70:	4620      	mov	r0, r4
 800fc72:	f000 f859 	bl	800fd28 <malloc>
 800fc76:	b930      	cbnz	r0, 800fc86 <_Znwj+0x20>
 800fc78:	f000 f81c 	bl	800fcb4 <_ZSt15get_new_handlerv>
 800fc7c:	b908      	cbnz	r0, 800fc82 <_Znwj+0x1c>
 800fc7e:	f000 f821 	bl	800fcc4 <abort>
 800fc82:	4780      	blx	r0
 800fc84:	e7f4      	b.n	800fc70 <_Znwj+0xa>
 800fc86:	bd10      	pop	{r4, pc}

0800fc88 <__cxa_pure_virtual>:
 800fc88:	b508      	push	{r3, lr}
 800fc8a:	f000 f80d 	bl	800fca8 <_ZSt9terminatev>

0800fc8e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800fc8e:	b508      	push	{r3, lr}
 800fc90:	4780      	blx	r0
 800fc92:	f000 f817 	bl	800fcc4 <abort>
	...

0800fc98 <_ZSt13get_terminatev>:
 800fc98:	4b02      	ldr	r3, [pc, #8]	; (800fca4 <_ZSt13get_terminatev+0xc>)
 800fc9a:	6818      	ldr	r0, [r3, #0]
 800fc9c:	f3bf 8f5b 	dmb	ish
 800fca0:	4770      	bx	lr
 800fca2:	bf00      	nop
 800fca4:	200001a0 	.word	0x200001a0

0800fca8 <_ZSt9terminatev>:
 800fca8:	b508      	push	{r3, lr}
 800fcaa:	f7ff fff5 	bl	800fc98 <_ZSt13get_terminatev>
 800fcae:	f7ff ffee 	bl	800fc8e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800fcb4 <_ZSt15get_new_handlerv>:
 800fcb4:	4b02      	ldr	r3, [pc, #8]	; (800fcc0 <_ZSt15get_new_handlerv+0xc>)
 800fcb6:	6818      	ldr	r0, [r3, #0]
 800fcb8:	f3bf 8f5b 	dmb	ish
 800fcbc:	4770      	bx	lr
 800fcbe:	bf00      	nop
 800fcc0:	20001274 	.word	0x20001274

0800fcc4 <abort>:
 800fcc4:	b508      	push	{r3, lr}
 800fcc6:	2006      	movs	r0, #6
 800fcc8:	f000 f90a 	bl	800fee0 <raise>
 800fccc:	2001      	movs	r0, #1
 800fcce:	f7f5 fa11 	bl	80050f4 <_exit>
	...

0800fcd4 <__errno>:
 800fcd4:	4b01      	ldr	r3, [pc, #4]	; (800fcdc <__errno+0x8>)
 800fcd6:	6818      	ldr	r0, [r3, #0]
 800fcd8:	4770      	bx	lr
 800fcda:	bf00      	nop
 800fcdc:	200001a4 	.word	0x200001a4

0800fce0 <__libc_init_array>:
 800fce0:	b570      	push	{r4, r5, r6, lr}
 800fce2:	4d0d      	ldr	r5, [pc, #52]	; (800fd18 <__libc_init_array+0x38>)
 800fce4:	4c0d      	ldr	r4, [pc, #52]	; (800fd1c <__libc_init_array+0x3c>)
 800fce6:	1b64      	subs	r4, r4, r5
 800fce8:	10a4      	asrs	r4, r4, #2
 800fcea:	2600      	movs	r6, #0
 800fcec:	42a6      	cmp	r6, r4
 800fcee:	d109      	bne.n	800fd04 <__libc_init_array+0x24>
 800fcf0:	4d0b      	ldr	r5, [pc, #44]	; (800fd20 <__libc_init_array+0x40>)
 800fcf2:	4c0c      	ldr	r4, [pc, #48]	; (800fd24 <__libc_init_array+0x44>)
 800fcf4:	f000 f91e 	bl	800ff34 <_init>
 800fcf8:	1b64      	subs	r4, r4, r5
 800fcfa:	10a4      	asrs	r4, r4, #2
 800fcfc:	2600      	movs	r6, #0
 800fcfe:	42a6      	cmp	r6, r4
 800fd00:	d105      	bne.n	800fd0e <__libc_init_array+0x2e>
 800fd02:	bd70      	pop	{r4, r5, r6, pc}
 800fd04:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd08:	4798      	blx	r3
 800fd0a:	3601      	adds	r6, #1
 800fd0c:	e7ee      	b.n	800fcec <__libc_init_array+0xc>
 800fd0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd12:	4798      	blx	r3
 800fd14:	3601      	adds	r6, #1
 800fd16:	e7f2      	b.n	800fcfe <__libc_init_array+0x1e>
 800fd18:	08010040 	.word	0x08010040
 800fd1c:	08010040 	.word	0x08010040
 800fd20:	08010040 	.word	0x08010040
 800fd24:	08010048 	.word	0x08010048

0800fd28 <malloc>:
 800fd28:	4b02      	ldr	r3, [pc, #8]	; (800fd34 <malloc+0xc>)
 800fd2a:	4601      	mov	r1, r0
 800fd2c:	6818      	ldr	r0, [r3, #0]
 800fd2e:	f000 b82b 	b.w	800fd88 <_malloc_r>
 800fd32:	bf00      	nop
 800fd34:	200001a4 	.word	0x200001a4

0800fd38 <memset>:
 800fd38:	4402      	add	r2, r0
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	4293      	cmp	r3, r2
 800fd3e:	d100      	bne.n	800fd42 <memset+0xa>
 800fd40:	4770      	bx	lr
 800fd42:	f803 1b01 	strb.w	r1, [r3], #1
 800fd46:	e7f9      	b.n	800fd3c <memset+0x4>

0800fd48 <sbrk_aligned>:
 800fd48:	b570      	push	{r4, r5, r6, lr}
 800fd4a:	4e0e      	ldr	r6, [pc, #56]	; (800fd84 <sbrk_aligned+0x3c>)
 800fd4c:	460c      	mov	r4, r1
 800fd4e:	6831      	ldr	r1, [r6, #0]
 800fd50:	4605      	mov	r5, r0
 800fd52:	b911      	cbnz	r1, 800fd5a <sbrk_aligned+0x12>
 800fd54:	f000 f88c 	bl	800fe70 <_sbrk_r>
 800fd58:	6030      	str	r0, [r6, #0]
 800fd5a:	4621      	mov	r1, r4
 800fd5c:	4628      	mov	r0, r5
 800fd5e:	f000 f887 	bl	800fe70 <_sbrk_r>
 800fd62:	1c43      	adds	r3, r0, #1
 800fd64:	d00a      	beq.n	800fd7c <sbrk_aligned+0x34>
 800fd66:	1cc4      	adds	r4, r0, #3
 800fd68:	f024 0403 	bic.w	r4, r4, #3
 800fd6c:	42a0      	cmp	r0, r4
 800fd6e:	d007      	beq.n	800fd80 <sbrk_aligned+0x38>
 800fd70:	1a21      	subs	r1, r4, r0
 800fd72:	4628      	mov	r0, r5
 800fd74:	f000 f87c 	bl	800fe70 <_sbrk_r>
 800fd78:	3001      	adds	r0, #1
 800fd7a:	d101      	bne.n	800fd80 <sbrk_aligned+0x38>
 800fd7c:	f04f 34ff 	mov.w	r4, #4294967295
 800fd80:	4620      	mov	r0, r4
 800fd82:	bd70      	pop	{r4, r5, r6, pc}
 800fd84:	2000127c 	.word	0x2000127c

0800fd88 <_malloc_r>:
 800fd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd8c:	1ccd      	adds	r5, r1, #3
 800fd8e:	f025 0503 	bic.w	r5, r5, #3
 800fd92:	3508      	adds	r5, #8
 800fd94:	2d0c      	cmp	r5, #12
 800fd96:	bf38      	it	cc
 800fd98:	250c      	movcc	r5, #12
 800fd9a:	2d00      	cmp	r5, #0
 800fd9c:	4607      	mov	r7, r0
 800fd9e:	db01      	blt.n	800fda4 <_malloc_r+0x1c>
 800fda0:	42a9      	cmp	r1, r5
 800fda2:	d905      	bls.n	800fdb0 <_malloc_r+0x28>
 800fda4:	230c      	movs	r3, #12
 800fda6:	603b      	str	r3, [r7, #0]
 800fda8:	2600      	movs	r6, #0
 800fdaa:	4630      	mov	r0, r6
 800fdac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdb0:	4e2e      	ldr	r6, [pc, #184]	; (800fe6c <_malloc_r+0xe4>)
 800fdb2:	f000 f8b1 	bl	800ff18 <__malloc_lock>
 800fdb6:	6833      	ldr	r3, [r6, #0]
 800fdb8:	461c      	mov	r4, r3
 800fdba:	bb34      	cbnz	r4, 800fe0a <_malloc_r+0x82>
 800fdbc:	4629      	mov	r1, r5
 800fdbe:	4638      	mov	r0, r7
 800fdc0:	f7ff ffc2 	bl	800fd48 <sbrk_aligned>
 800fdc4:	1c43      	adds	r3, r0, #1
 800fdc6:	4604      	mov	r4, r0
 800fdc8:	d14d      	bne.n	800fe66 <_malloc_r+0xde>
 800fdca:	6834      	ldr	r4, [r6, #0]
 800fdcc:	4626      	mov	r6, r4
 800fdce:	2e00      	cmp	r6, #0
 800fdd0:	d140      	bne.n	800fe54 <_malloc_r+0xcc>
 800fdd2:	6823      	ldr	r3, [r4, #0]
 800fdd4:	4631      	mov	r1, r6
 800fdd6:	4638      	mov	r0, r7
 800fdd8:	eb04 0803 	add.w	r8, r4, r3
 800fddc:	f000 f848 	bl	800fe70 <_sbrk_r>
 800fde0:	4580      	cmp	r8, r0
 800fde2:	d13a      	bne.n	800fe5a <_malloc_r+0xd2>
 800fde4:	6821      	ldr	r1, [r4, #0]
 800fde6:	3503      	adds	r5, #3
 800fde8:	1a6d      	subs	r5, r5, r1
 800fdea:	f025 0503 	bic.w	r5, r5, #3
 800fdee:	3508      	adds	r5, #8
 800fdf0:	2d0c      	cmp	r5, #12
 800fdf2:	bf38      	it	cc
 800fdf4:	250c      	movcc	r5, #12
 800fdf6:	4629      	mov	r1, r5
 800fdf8:	4638      	mov	r0, r7
 800fdfa:	f7ff ffa5 	bl	800fd48 <sbrk_aligned>
 800fdfe:	3001      	adds	r0, #1
 800fe00:	d02b      	beq.n	800fe5a <_malloc_r+0xd2>
 800fe02:	6823      	ldr	r3, [r4, #0]
 800fe04:	442b      	add	r3, r5
 800fe06:	6023      	str	r3, [r4, #0]
 800fe08:	e00e      	b.n	800fe28 <_malloc_r+0xa0>
 800fe0a:	6822      	ldr	r2, [r4, #0]
 800fe0c:	1b52      	subs	r2, r2, r5
 800fe0e:	d41e      	bmi.n	800fe4e <_malloc_r+0xc6>
 800fe10:	2a0b      	cmp	r2, #11
 800fe12:	d916      	bls.n	800fe42 <_malloc_r+0xba>
 800fe14:	1961      	adds	r1, r4, r5
 800fe16:	42a3      	cmp	r3, r4
 800fe18:	6025      	str	r5, [r4, #0]
 800fe1a:	bf18      	it	ne
 800fe1c:	6059      	strne	r1, [r3, #4]
 800fe1e:	6863      	ldr	r3, [r4, #4]
 800fe20:	bf08      	it	eq
 800fe22:	6031      	streq	r1, [r6, #0]
 800fe24:	5162      	str	r2, [r4, r5]
 800fe26:	604b      	str	r3, [r1, #4]
 800fe28:	4638      	mov	r0, r7
 800fe2a:	f104 060b 	add.w	r6, r4, #11
 800fe2e:	f000 f879 	bl	800ff24 <__malloc_unlock>
 800fe32:	f026 0607 	bic.w	r6, r6, #7
 800fe36:	1d23      	adds	r3, r4, #4
 800fe38:	1af2      	subs	r2, r6, r3
 800fe3a:	d0b6      	beq.n	800fdaa <_malloc_r+0x22>
 800fe3c:	1b9b      	subs	r3, r3, r6
 800fe3e:	50a3      	str	r3, [r4, r2]
 800fe40:	e7b3      	b.n	800fdaa <_malloc_r+0x22>
 800fe42:	6862      	ldr	r2, [r4, #4]
 800fe44:	42a3      	cmp	r3, r4
 800fe46:	bf0c      	ite	eq
 800fe48:	6032      	streq	r2, [r6, #0]
 800fe4a:	605a      	strne	r2, [r3, #4]
 800fe4c:	e7ec      	b.n	800fe28 <_malloc_r+0xa0>
 800fe4e:	4623      	mov	r3, r4
 800fe50:	6864      	ldr	r4, [r4, #4]
 800fe52:	e7b2      	b.n	800fdba <_malloc_r+0x32>
 800fe54:	4634      	mov	r4, r6
 800fe56:	6876      	ldr	r6, [r6, #4]
 800fe58:	e7b9      	b.n	800fdce <_malloc_r+0x46>
 800fe5a:	230c      	movs	r3, #12
 800fe5c:	603b      	str	r3, [r7, #0]
 800fe5e:	4638      	mov	r0, r7
 800fe60:	f000 f860 	bl	800ff24 <__malloc_unlock>
 800fe64:	e7a1      	b.n	800fdaa <_malloc_r+0x22>
 800fe66:	6025      	str	r5, [r4, #0]
 800fe68:	e7de      	b.n	800fe28 <_malloc_r+0xa0>
 800fe6a:	bf00      	nop
 800fe6c:	20001278 	.word	0x20001278

0800fe70 <_sbrk_r>:
 800fe70:	b538      	push	{r3, r4, r5, lr}
 800fe72:	4d06      	ldr	r5, [pc, #24]	; (800fe8c <_sbrk_r+0x1c>)
 800fe74:	2300      	movs	r3, #0
 800fe76:	4604      	mov	r4, r0
 800fe78:	4608      	mov	r0, r1
 800fe7a:	602b      	str	r3, [r5, #0]
 800fe7c:	f7f5 f944 	bl	8005108 <_sbrk>
 800fe80:	1c43      	adds	r3, r0, #1
 800fe82:	d102      	bne.n	800fe8a <_sbrk_r+0x1a>
 800fe84:	682b      	ldr	r3, [r5, #0]
 800fe86:	b103      	cbz	r3, 800fe8a <_sbrk_r+0x1a>
 800fe88:	6023      	str	r3, [r4, #0]
 800fe8a:	bd38      	pop	{r3, r4, r5, pc}
 800fe8c:	20001280 	.word	0x20001280

0800fe90 <_raise_r>:
 800fe90:	291f      	cmp	r1, #31
 800fe92:	b538      	push	{r3, r4, r5, lr}
 800fe94:	4604      	mov	r4, r0
 800fe96:	460d      	mov	r5, r1
 800fe98:	d904      	bls.n	800fea4 <_raise_r+0x14>
 800fe9a:	2316      	movs	r3, #22
 800fe9c:	6003      	str	r3, [r0, #0]
 800fe9e:	f04f 30ff 	mov.w	r0, #4294967295
 800fea2:	bd38      	pop	{r3, r4, r5, pc}
 800fea4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fea6:	b112      	cbz	r2, 800feae <_raise_r+0x1e>
 800fea8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800feac:	b94b      	cbnz	r3, 800fec2 <_raise_r+0x32>
 800feae:	4620      	mov	r0, r4
 800feb0:	f000 f830 	bl	800ff14 <_getpid_r>
 800feb4:	462a      	mov	r2, r5
 800feb6:	4601      	mov	r1, r0
 800feb8:	4620      	mov	r0, r4
 800feba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800febe:	f000 b817 	b.w	800fef0 <_kill_r>
 800fec2:	2b01      	cmp	r3, #1
 800fec4:	d00a      	beq.n	800fedc <_raise_r+0x4c>
 800fec6:	1c59      	adds	r1, r3, #1
 800fec8:	d103      	bne.n	800fed2 <_raise_r+0x42>
 800feca:	2316      	movs	r3, #22
 800fecc:	6003      	str	r3, [r0, #0]
 800fece:	2001      	movs	r0, #1
 800fed0:	e7e7      	b.n	800fea2 <_raise_r+0x12>
 800fed2:	2400      	movs	r4, #0
 800fed4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fed8:	4628      	mov	r0, r5
 800feda:	4798      	blx	r3
 800fedc:	2000      	movs	r0, #0
 800fede:	e7e0      	b.n	800fea2 <_raise_r+0x12>

0800fee0 <raise>:
 800fee0:	4b02      	ldr	r3, [pc, #8]	; (800feec <raise+0xc>)
 800fee2:	4601      	mov	r1, r0
 800fee4:	6818      	ldr	r0, [r3, #0]
 800fee6:	f7ff bfd3 	b.w	800fe90 <_raise_r>
 800feea:	bf00      	nop
 800feec:	200001a4 	.word	0x200001a4

0800fef0 <_kill_r>:
 800fef0:	b538      	push	{r3, r4, r5, lr}
 800fef2:	4d07      	ldr	r5, [pc, #28]	; (800ff10 <_kill_r+0x20>)
 800fef4:	2300      	movs	r3, #0
 800fef6:	4604      	mov	r4, r0
 800fef8:	4608      	mov	r0, r1
 800fefa:	4611      	mov	r1, r2
 800fefc:	602b      	str	r3, [r5, #0]
 800fefe:	f7f5 f8e9 	bl	80050d4 <_kill>
 800ff02:	1c43      	adds	r3, r0, #1
 800ff04:	d102      	bne.n	800ff0c <_kill_r+0x1c>
 800ff06:	682b      	ldr	r3, [r5, #0]
 800ff08:	b103      	cbz	r3, 800ff0c <_kill_r+0x1c>
 800ff0a:	6023      	str	r3, [r4, #0]
 800ff0c:	bd38      	pop	{r3, r4, r5, pc}
 800ff0e:	bf00      	nop
 800ff10:	20001280 	.word	0x20001280

0800ff14 <_getpid_r>:
 800ff14:	f7f5 b8d6 	b.w	80050c4 <_getpid>

0800ff18 <__malloc_lock>:
 800ff18:	4801      	ldr	r0, [pc, #4]	; (800ff20 <__malloc_lock+0x8>)
 800ff1a:	f000 b809 	b.w	800ff30 <__retarget_lock_acquire_recursive>
 800ff1e:	bf00      	nop
 800ff20:	20001284 	.word	0x20001284

0800ff24 <__malloc_unlock>:
 800ff24:	4801      	ldr	r0, [pc, #4]	; (800ff2c <__malloc_unlock+0x8>)
 800ff26:	f000 b804 	b.w	800ff32 <__retarget_lock_release_recursive>
 800ff2a:	bf00      	nop
 800ff2c:	20001284 	.word	0x20001284

0800ff30 <__retarget_lock_acquire_recursive>:
 800ff30:	4770      	bx	lr

0800ff32 <__retarget_lock_release_recursive>:
 800ff32:	4770      	bx	lr

0800ff34 <_init>:
 800ff34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff36:	bf00      	nop
 800ff38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff3a:	bc08      	pop	{r3}
 800ff3c:	469e      	mov	lr, r3
 800ff3e:	4770      	bx	lr

0800ff40 <_fini>:
 800ff40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff42:	bf00      	nop
 800ff44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff46:	bc08      	pop	{r3}
 800ff48:	469e      	mov	lr, r3
 800ff4a:	4770      	bx	lr
