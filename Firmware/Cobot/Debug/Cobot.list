
Cobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e124  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800e2b0  0800e2b0  0001e2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e354  0800e354  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800e354  0800e354  0001e354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e35c  0800e35c  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e35c  0800e35c  0001e35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e364  0800e364  0001e364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800e368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001068  20000190  0800e4f8  00020190  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200011f8  0800e4f8  000211f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a6ec  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006843  00000000  00000000  0004a8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ff8  00000000  00000000  000510f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cc0  00000000  00000000  000530e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eb21  00000000  00000000  00054da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002be36  00000000  00000000  000838c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f204e  00000000  00000000  000af6ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a174d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008260  00000000  00000000  001a17a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000190 	.word	0x20000190
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800e298 	.word	0x0800e298

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000194 	.word	0x20000194
 80001c8:	0800e298 	.word	0x0800e298

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <_ZN11TaskHandlerC1Ev>:


#include "stdint.h"


class TaskHandler{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2200      	movs	r2, #0
 80004dc:	701a      	strb	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2200      	movs	r2, #0
 80004e2:	705a      	strb	r2, [r3, #1]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2200      	movs	r2, #0
 80004e8:	709a      	strb	r2, [r3, #2]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2200      	movs	r2, #0
 80004ee:	70da      	strb	r2, [r3, #3]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2200      	movs	r2, #0
 80004f4:	711a      	strb	r2, [r3, #4]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2201      	movs	r2, #1
 80004fa:	715a      	strb	r2, [r3, #5]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2201      	movs	r2, #1
 8000500:	719a      	strb	r2, [r3, #6]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2201      	movs	r2, #1
 8000506:	71da      	strb	r2, [r3, #7]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2201      	movs	r2, #1
 800050c:	721a      	strb	r2, [r3, #8]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2201      	movs	r2, #1
 8000512:	725a      	strb	r2, [r3, #9]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <_ZN13DriveSettingsC1Ev>:
#define SRC_SETTINGS_DRIVESETTINGS_H_

#include "stdint.h"
#include "main.h"

class DriveSettings{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	221f      	movs	r2, #31
 800052e:	701a      	strb	r2, [r3, #0]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2200      	movs	r2, #0
 8000534:	805a      	strh	r2, [r3, #2]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	809a      	strh	r2, [r3, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2200      	movs	r2, #0
 8000540:	80da      	strh	r2, [r3, #6]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	811a      	strh	r2, [r3, #8]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800054e:	815a      	strh	r2, [r3, #10]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2214      	movs	r2, #20
 8000554:	819a      	strh	r2, [r3, #12]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2264      	movs	r2, #100	; 0x64
 800055a:	81da      	strh	r2, [r3, #14]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8000562:	821a      	strh	r2, [r3, #16]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800056a:	825a      	strh	r2, [r3, #18]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2232      	movs	r2, #50	; 0x32
 8000570:	829a      	strh	r2, [r3, #20]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2264      	movs	r2, #100	; 0x64
 8000576:	82da      	strh	r2, [r3, #22]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800057e:	831a      	strh	r2, [r3, #24]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4618      	mov	r0, r3
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <_ZN7AppMainC1Ev>:
#include "AppMain.h"
#include "../Tools/Delay.h"

extern TIM_HandleTypeDef htim7;

AppMain::AppMain()
 800058e:	b5b0      	push	{r4, r5, r7, lr}
 8000590:	b084      	sub	sp, #16
 8000592:	af02      	add	r7, sp, #8
 8000594:	6078      	str	r0, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4618      	mov	r0, r3
 800059a:	f001 fa5d 	bl	8001a58 <_ZN10RFM95_LoRaC1Ev>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3320      	adds	r3, #32
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3320      	adds	r3, #32
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff8e 	bl	80004d0 <_ZN11TaskHandlerC1Ev>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80005ba:	2301      	movs	r3, #1
 80005bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005c0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80005c4:	f000 ff32 	bl	800142c <_ZN3LEDC1EP12GPIO_TypeDeftb>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80005ce:	2301      	movs	r3, #1
 80005d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005d4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80005d8:	f000 ff28 	bl	800142c <_ZN3LEDC1EP12GPIO_TypeDeftb>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	333c      	adds	r3, #60	; 0x3c
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
 80005ec:	615a      	str	r2, [r3, #20]
 80005ee:	831a      	strh	r2, [r3, #24]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	333c      	adds	r3, #60	; 0x3c
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ff94 	bl	8000522 <_ZN13DriveSettingsC1Ev>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	3356      	adds	r3, #86	; 0x56
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 f84b 	bl	800269a <_ZN11DriveStatusC1Ev>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	335e      	adds	r3, #94	; 0x5e
 8000608:	4618      	mov	r0, r3
 800060a:	f001 ff32 	bl	8002472 <_ZN12DriveCommandC1Ev>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f103 0256 	add.w	r2, r3, #86	; 0x56
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	335e      	adds	r3, #94	; 0x5e
 8000624:	f000 f8da 	bl	80007dc <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f503 7088 	add.w	r0, r3, #272	; 0x110
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f103 0156 	add.w	r1, r3, #86	; 0x56
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800063a:	687d      	ldr	r5, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3368      	adds	r3, #104	; 0x68
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	325e      	adds	r2, #94	; 0x5e
 8000644:	9201      	str	r2, [sp, #4]
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	462b      	mov	r3, r5
 800064a:	4622      	mov	r2, r4
 800064c:	f000 ff36 	bl	80014bc <_ZN13CommunicationC1EP11DriveStatusP13DriveSettingsP10RFM95_LoRaP14Digitll_IN_OUTP12DriveCommand>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f503 7098 	add.w	r0, r3, #304	; 0x130
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f103 0256 	add.w	r2, r3, #86	; 0x56
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	335e      	adds	r3, #94	; 0x5e
 8000666:	f002 fabd 	bl	8002be4 <_ZN6USBComC1EP13DriveSettingsP11DriveStatusP12DriveCommand>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	3356      	adds	r3, #86	; 0x56
 800067a:	461a      	mov	r2, r3
 800067c:	f000 f864 	bl	8000748 <_ZN5FlashC1EP13DriveSettingsP11DriveStatus>
{

}
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4618      	mov	r0, r3
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800068c <_ZN7AppMain7StartupEv>:

void AppMain::Startup()
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	Storage.ReadFlash();
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800069a:	4618      	mov	r0, r3
 800069c:	f000 f86a 	bl	8000774 <_ZN5Flash9ReadFlashEv>


	HAL_TIM_Base_Start_IT(&htim7);
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <_ZN7AppMain7StartupEv+0x48>)
 80006a2:	f008 fe1f 	bl	80092e4 <HAL_TIM_Base_Start_IT>

	LED_Green.OFF();
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	332c      	adds	r3, #44	; 0x2c
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fed9 	bl	8001462 <_ZN3LED3OFFEv>
	LED_Red.OFF();
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3334      	adds	r3, #52	; 0x34
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fed4 	bl	8001462 <_ZN3LED3OFFEv>

	if (rfm95.InitRFM())
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fd71 	bl	80021a4 <_ZN10RFM95_LoRa7InitRFMEv>
	{

	}

	Delay::DWT_Init();
 80006c2:	f002 f97d 	bl	80029c0 <_ZN5Delay8DWT_InitEv>


	Main();
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f000 f806 	bl	80006d8 <_ZN7AppMain4MainEv>
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200005c0 	.word	0x200005c0

080006d8 <_ZN7AppMain4MainEv>:

void AppMain::Main()
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

	while (1)
	{

		if (taskStatus.isErrorTask())
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3320      	adds	r3, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 f91a 	bl	800291e <_ZN11TaskHandler11isErrorTaskEv>
		{

		}

		if (taskStatus.isLEDUpdateTask())
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	3320      	adds	r3, #32
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 f94b 	bl	800298a <_ZN11TaskHandler15isLEDUpdateTaskEv>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d004      	beq.n	8000704 <_ZN7AppMain4MainEv+0x2c>
		{
			LED_Green.Toggle();
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	332c      	adds	r3, #44	; 0x2c
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fecc 	bl	800149c <_ZN3LED6ToggleEv>
		}

		if (taskStatus.isComTask())
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3320      	adds	r3, #32
 8000708:	4618      	mov	r0, r3
 800070a:	f002 f8ed 	bl	80028e8 <_ZN11TaskHandler9isComTaskEv>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d00b      	beq.n	800072c <_ZN7AppMain4MainEv+0x54>
		{
			com.UpdateCom();
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fef1 	bl	8001502 <_ZN13Communication9UpdateComEv>
			com.ReadData();
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000726:	4618      	mov	r0, r3
 8000728:	f001 f8f6 	bl	8001918 <_ZN13Communication8ReadDataEv>
		}

		if (taskStatus.isIoUpdateTask())
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3320      	adds	r3, #32
 8000730:	4618      	mov	r0, r3
 8000732:	f002 f90f 	bl	8002954 <_ZN11TaskHandler14isIoUpdateTaskEv>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d0d1      	beq.n	80006e0 <_ZN7AppMain4MainEv+0x8>
		{
			DigitalInOut.Read();
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3368      	adds	r3, #104	; 0x68
 8000740:	4618      	mov	r0, r3
 8000742:	f000 f8db 	bl	80008fc <_ZN14Digitll_IN_OUT4ReadEv>
		if (taskStatus.isErrorTask())
 8000746:	e7cb      	b.n	80006e0 <_ZN7AppMain4MainEv+0x8>

08000748 <_ZN5FlashC1EP13DriveSettingsP11DriveStatus>:
 */

#include "Flash.h"
#include "stm32l4xx_hal.h"

Flash::Flash(DriveSettings *driveSettings, DriveStatus *driveStatus)
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
{
	this->driveSettings = driveSettings;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	68ba      	ldr	r2, [r7, #8]
 8000758:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	605a      	str	r2, [r3, #4]
	this->factoryResetFlag = false;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2200      	movs	r2, #0
 8000764:	721a      	strb	r2, [r3, #8]
}
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4618      	mov	r0, r3
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <_ZN5Flash9ReadFlashEv>:
 *
 * @param None
 * @return None
 */
void Flash::ReadFlash()
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < UFLASH_SIZE; i++)
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2b13      	cmp	r3, #19
 8000784:	dc12      	bgt.n	80007ac <_ZN5Flash9ReadFlashEv+0x38>
	{
		tmpFlashArray[i] = *(uint64_t*) (FLASH_STAR_PAGE_ADDR + 64 * i);
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800078c:	f503 637e 	add.w	r3, r3, #4064	; 0xfe0
 8000790:	019b      	lsls	r3, r3, #6
 8000792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	68f9      	ldr	r1, [r7, #12]
 800079a:	3102      	adds	r1, #2
 800079c:	00c9      	lsls	r1, r1, #3
 800079e:	4401      	add	r1, r0
 80007a0:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < UFLASH_SIZE; i++)
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	3301      	adds	r3, #1
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	e7e9      	b.n	8000780 <_ZN5Flash9ReadFlashEv+0xc>
	}
	//write flash to config and status file
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <_ZN5QueueC1Ev>:

#include "stdint.h"

#define BUFFER_SIZE 10

class Queue{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	705a      	strb	r2, [r3, #1]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4618      	mov	r0, r3
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
	...

080007dc <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand>:
 *      Author: marce
 */

#include "DI.h"

Digitll_IN_OUT::Digitll_IN_OUT(DriveSettings *driveSettings, DriveStatus *driveStatus,DriveCommand *driveCommand)
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af02      	add	r7, sp, #8
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	68f8      	ldr	r0, [r7, #12]
 80007ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fa:	493e      	ldr	r1, [pc, #248]	; (80008f4 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x118>)
 80007fc:	f000 fdbf 	bl	800137e <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f103 0010 	add.w	r0, r3, #16
 8000806:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	4b3a      	ldr	r3, [pc, #232]	; (80008f8 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 800080e:	2204      	movs	r2, #4
 8000810:	4939      	ldr	r1, [pc, #228]	; (80008f8 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 8000812:	f000 fdb4 	bl	800137e <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	f103 0020 	add.w	r0, r3, #32
 800081c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	4b34      	ldr	r3, [pc, #208]	; (80008f4 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x118>)
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	4933      	ldr	r1, [pc, #204]	; (80008f4 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x118>)
 8000828:	f000 fda9 	bl	800137e <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000832:	2301      	movs	r3, #1
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 8000838:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800083c:	492e      	ldr	r1, [pc, #184]	; (80008f8 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 800083e:	f000 fd9e 	bl	800137e <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8000848:	2340      	movs	r3, #64	; 0x40
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	4b29      	ldr	r3, [pc, #164]	; (80008f4 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x118>)
 800084e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000852:	4929      	ldr	r1, [pc, #164]	; (80008f8 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 8000854:	f000 fd93 	bl	800137e <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800085e:	2302      	movs	r3, #2
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 8000864:	2210      	movs	r2, #16
 8000866:	4923      	ldr	r1, [pc, #140]	; (80008f4 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x118>)
 8000868:	f000 fd89 	bl	800137e <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8000872:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 800087a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800087e:	491e      	ldr	r1, [pc, #120]	; (80008f8 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 8000880:	f000 fd7d 	bl	800137e <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800088a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x118>)
 8000892:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000896:	4917      	ldr	r1, [pc, #92]	; (80008f4 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x118>)
 8000898:	f000 fd71 	bl	800137e <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2200      	movs	r2, #0
 80008a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2200      	movs	r2, #0
 80008b0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	338a      	adds	r3, #138	; 0x8a
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	338a      	adds	r3, #138	; 0x8a
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff77 	bl	80007b8 <_ZN5QueueC1Ev>
{
	this->driveSettings = driveSettings;
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	68ba      	ldr	r2, [r7, #8]
 80008ce:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	this->driveStatus = driveStatus;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	this->driveCommand = driveCommand;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	683a      	ldr	r2, [r7, #0]
 80008de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	timeoutCounter = 0;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	2200      	movs	r2, #0
 80008e6:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85

}
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	4618      	mov	r0, r3
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	48000800 	.word	0x48000800
 80008f8:	48000400 	.word	0x48000400

080008fc <_ZN14Digitll_IN_OUT4ReadEv>:

void Digitll_IN_OUT::Read()
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

	configeWriteStatus = CONFIG_WRITE;
 8000904:	2102      	movs	r1, #2
 8000906:	485d      	ldr	r0, [pc, #372]	; (8000a7c <_ZN14Digitll_IN_OUT4ReadEv+0x180>)
 8000908:	f004 ff7a 	bl	8005800 <HAL_GPIO_ReadPin>
 800090c:	4603      	mov	r3, r0
 800090e:	2b01      	cmp	r3, #1
 8000910:	bf0c      	ite	eq
 8000912:	2301      	moveq	r3, #1
 8000914:	2300      	movne	r3, #0
 8000916:	b2da      	uxtb	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	if (configeWriteStatus && !previousConfigeWriteStatus)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000924:	2b00      	cmp	r3, #0
 8000926:	f000 8084 	beq.w	8000a32 <_ZN14Digitll_IN_OUT4ReadEv+0x136>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000930:	f083 0301 	eor.w	r3, r3, #1
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2b00      	cmp	r3, #0
 8000938:	d07b      	beq.n	8000a32 <_ZN14Digitll_IN_OUT4ReadEv+0x136>
	{
		//read digial config
		uint8_t data = ((uint8_t) CONFIG_ADDR_7 << 7)
 800093a:	2104      	movs	r1, #4
 800093c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000940:	f004 ff5e 	bl	8005800 <HAL_GPIO_ReadPin>
 8000944:	4603      	mov	r3, r0
 8000946:	2b80      	cmp	r3, #128	; 0x80
 8000948:	bf0c      	ite	eq
 800094a:	2301      	moveq	r3, #1
 800094c:	2300      	movne	r3, #0
 800094e:	b2db      	uxtb	r3, r3
 8000950:	461c      	mov	r4, r3
				+ (((uint8_t) CONFIG_ADDR_6) << 6)
 8000952:	2102      	movs	r1, #2
 8000954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000958:	f004 ff52 	bl	8005800 <HAL_GPIO_ReadPin>
 800095c:	4603      	mov	r3, r0
 800095e:	2b01      	cmp	r3, #1
 8000960:	d101      	bne.n	8000966 <_ZN14Digitll_IN_OUT4ReadEv+0x6a>
 8000962:	2340      	movs	r3, #64	; 0x40
 8000964:	e000      	b.n	8000968 <_ZN14Digitll_IN_OUT4ReadEv+0x6c>
 8000966:	2300      	movs	r3, #0
 8000968:	4423      	add	r3, r4
 800096a:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_5) << 5)
 800096c:	2101      	movs	r1, #1
 800096e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000972:	f004 ff45 	bl	8005800 <HAL_GPIO_ReadPin>
 8000976:	4603      	mov	r3, r0
 8000978:	2b01      	cmp	r3, #1
 800097a:	d101      	bne.n	8000980 <_ZN14Digitll_IN_OUT4ReadEv+0x84>
 800097c:	2320      	movs	r3, #32
 800097e:	e000      	b.n	8000982 <_ZN14Digitll_IN_OUT4ReadEv+0x86>
 8000980:	2300      	movs	r3, #0
 8000982:	4423      	add	r3, r4
 8000984:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_4) << 4)
 8000986:	2108      	movs	r1, #8
 8000988:	483d      	ldr	r0, [pc, #244]	; (8000a80 <_ZN14Digitll_IN_OUT4ReadEv+0x184>)
 800098a:	f004 ff39 	bl	8005800 <HAL_GPIO_ReadPin>
 800098e:	4603      	mov	r3, r0
 8000990:	2b01      	cmp	r3, #1
 8000992:	d101      	bne.n	8000998 <_ZN14Digitll_IN_OUT4ReadEv+0x9c>
 8000994:	2310      	movs	r3, #16
 8000996:	e000      	b.n	800099a <_ZN14Digitll_IN_OUT4ReadEv+0x9e>
 8000998:	2300      	movs	r3, #0
 800099a:	4423      	add	r3, r4
 800099c:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_3) << 3)
 800099e:	2104      	movs	r1, #4
 80009a0:	4837      	ldr	r0, [pc, #220]	; (8000a80 <_ZN14Digitll_IN_OUT4ReadEv+0x184>)
 80009a2:	f004 ff2d 	bl	8005800 <HAL_GPIO_ReadPin>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d101      	bne.n	80009b0 <_ZN14Digitll_IN_OUT4ReadEv+0xb4>
 80009ac:	2308      	movs	r3, #8
 80009ae:	e000      	b.n	80009b2 <_ZN14Digitll_IN_OUT4ReadEv+0xb6>
 80009b0:	2300      	movs	r3, #0
 80009b2:	4423      	add	r3, r4
 80009b4:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_2) << 2)
 80009b6:	2102      	movs	r1, #2
 80009b8:	4831      	ldr	r0, [pc, #196]	; (8000a80 <_ZN14Digitll_IN_OUT4ReadEv+0x184>)
 80009ba:	f004 ff21 	bl	8005800 <HAL_GPIO_ReadPin>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d101      	bne.n	80009c8 <_ZN14Digitll_IN_OUT4ReadEv+0xcc>
 80009c4:	2304      	movs	r3, #4
 80009c6:	e000      	b.n	80009ca <_ZN14Digitll_IN_OUT4ReadEv+0xce>
 80009c8:	2300      	movs	r3, #0
 80009ca:	4423      	add	r3, r4
 80009cc:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_1) << 1);
 80009ce:	2101      	movs	r1, #1
 80009d0:	482b      	ldr	r0, [pc, #172]	; (8000a80 <_ZN14Digitll_IN_OUT4ReadEv+0x184>)
 80009d2:	f004 ff15 	bl	8005800 <HAL_GPIO_ReadPin>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d101      	bne.n	80009e0 <_ZN14Digitll_IN_OUT4ReadEv+0xe4>
 80009dc:	2302      	movs	r3, #2
 80009de:	e000      	b.n	80009e2 <_ZN14Digitll_IN_OUT4ReadEv+0xe6>
 80009e0:	2300      	movs	r3, #0
 80009e2:	4423      	add	r3, r4
 80009e4:	73fb      	strb	r3, [r7, #15]

		//Data/Adress check
		if (isAddressReceived)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d017      	beq.n	8000a20 <_ZN14Digitll_IN_OUT4ReadEv+0x124>
		{
			queue.Enqueue(data);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	338a      	adds	r3, #138	; 0x8a
 80009f4:	7bfa      	ldrb	r2, [r7, #15]
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 f823 	bl	8002a44 <_ZN5Queue7EnqueueEh>
			expectedDataSize--;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8000a04:	3b01      	subs	r3, #1
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			if (expectedDataSize == 0)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d108      	bne.n	8000a2a <_ZN14Digitll_IN_OUT4ReadEv+0x12e>
			{
				CheckData();
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f000 f895 	bl	8000b48 <_ZN14Digitll_IN_OUT9CheckDataEv>
 8000a1e:	e004      	b.n	8000a2a <_ZN14Digitll_IN_OUT4ReadEv+0x12e>
			}
		}
		else
		{
			CheckAddress(data);
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
 8000a22:	4619      	mov	r1, r3
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f000 f82d 	bl	8000a84 <_ZN14Digitll_IN_OUT12CheckAddressEh>
		}
		timeoutCounter = 0;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	}

	//Timeoutcounter handling
	if (timeoutCounter >= READ_TIMEOUT)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8000a38:	2b63      	cmp	r3, #99	; 0x63
 8000a3a:	d90c      	bls.n	8000a56 <_ZN14Digitll_IN_OUT4ReadEv+0x15a>
	{
		timeoutCounter = 0;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		isAddressReceived = false;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		expectedDataSize = 0;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8000a54:	e007      	b.n	8000a66 <_ZN14Digitll_IN_OUT4ReadEv+0x16a>
	}
	else
	{
		timeoutCounter++;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	}

	previousConfigeWriteStatus = configeWriteStatus;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 8000a72:	bf00      	nop
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd90      	pop	{r4, r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	48001c00 	.word	0x48001c00
 8000a80:	48000800 	.word	0x48000800

08000a84 <_ZN14Digitll_IN_OUT12CheckAddressEh>:

bool Digitll_IN_OUT::CheckAddress(uint8_t data)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	70fb      	strb	r3, [r7, #3]
	receivedAddress = data;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	78fa      	ldrb	r2, [r7, #3]
 8000a94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	switch (data)
 8000a98:	78fb      	ldrb	r3, [r7, #3]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	2b19      	cmp	r3, #25
 8000a9e:	d841      	bhi.n	8000b24 <_ZN14Digitll_IN_OUT12CheckAddressEh+0xa0>
 8000aa0:	a201      	add	r2, pc, #4	; (adr r2, 8000aa8 <_ZN14Digitll_IN_OUT12CheckAddressEh+0x24>)
 8000aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa6:	bf00      	nop
 8000aa8:	08000b11 	.word	0x08000b11
 8000aac:	08000b11 	.word	0x08000b11
 8000ab0:	08000b11 	.word	0x08000b11
 8000ab4:	08000b11 	.word	0x08000b11
 8000ab8:	08000b11 	.word	0x08000b11
 8000abc:	08000b11 	.word	0x08000b11
 8000ac0:	08000b11 	.word	0x08000b11
 8000ac4:	08000b25 	.word	0x08000b25
 8000ac8:	08000b25 	.word	0x08000b25
 8000acc:	08000b25 	.word	0x08000b25
 8000ad0:	08000b25 	.word	0x08000b25
 8000ad4:	08000b25 	.word	0x08000b25
 8000ad8:	08000b25 	.word	0x08000b25
 8000adc:	08000b25 	.word	0x08000b25
 8000ae0:	08000b25 	.word	0x08000b25
 8000ae4:	08000b11 	.word	0x08000b11
 8000ae8:	08000b11 	.word	0x08000b11
 8000aec:	08000b11 	.word	0x08000b11
 8000af0:	08000b11 	.word	0x08000b11
 8000af4:	08000b1b 	.word	0x08000b1b
 8000af8:	08000b11 	.word	0x08000b11
 8000afc:	08000b11 	.word	0x08000b11
 8000b00:	08000b1b 	.word	0x08000b1b
 8000b04:	08000b1b 	.word	0x08000b1b
 8000b08:	08000b11 	.word	0x08000b11
 8000b0c:	08000b11 	.word	0x08000b11
		case CLAMPING_SPEED:
		case IN_POS_DIFF:
		case OPENING_DISTANCE:
		case OVER_CURRENT_WARNING:
		case OVER_CURRENT_ERROR:
			expectedDataSize = 1;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2201      	movs	r2, #1
 8000b14:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			break;
 8000b18:	e00e      	b.n	8000b38 <_ZN14Digitll_IN_OUT12CheckAddressEh+0xb4>
		case SELF_SHUTDOWN_DELAY:
		case UNDERVOLTAGE_WARNING:
		case UNDERVOLTAGE_ERROR:
			expectedDataSize = 2;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			break;
 8000b22:	e009      	b.n	8000b38 <_ZN14Digitll_IN_OUT12CheckAddressEh+0xb4>
		default:
			receivedAddress = 0;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2200      	movs	r2, #0
 8000b28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			expectedDataSize = 0;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			return false;
 8000b34:	2300      	movs	r3, #0
 8000b36:	e000      	b.n	8000b3a <_ZN14Digitll_IN_OUT12CheckAddressEh+0xb6>
			break;
	}
	return true;
 8000b38:	2301      	movs	r3, #1
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <_ZN14Digitll_IN_OUT9CheckDataEv>:

void Digitll_IN_OUT::CheckData()
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	switch (receivedAddress)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000b56:	3b01      	subs	r3, #1
 8000b58:	2b19      	cmp	r3, #25
 8000b5a:	f200 8339 	bhi.w	80011d0 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
 8000b5e:	a201      	add	r2, pc, #4	; (adr r2, 8000b64 <_ZN14Digitll_IN_OUT9CheckDataEv+0x1c>)
 8000b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b64:	08000bcd 	.word	0x08000bcd
 8000b68:	08000bfb 	.word	0x08000bfb
 8000b6c:	08000c31 	.word	0x08000c31
 8000b70:	08000c5f 	.word	0x08000c5f
 8000b74:	08000c8d 	.word	0x08000c8d
 8000b78:	08000cbb 	.word	0x08000cbb
 8000b7c:	08000ce9 	.word	0x08000ce9
 8000b80:	080011d1 	.word	0x080011d1
 8000b84:	080011d1 	.word	0x080011d1
 8000b88:	080011d1 	.word	0x080011d1
 8000b8c:	080011d1 	.word	0x080011d1
 8000b90:	080011d1 	.word	0x080011d1
 8000b94:	080011d1 	.word	0x080011d1
 8000b98:	080011d1 	.word	0x080011d1
 8000b9c:	080011d1 	.word	0x080011d1
 8000ba0:	08000d17 	.word	0x08000d17
 8000ba4:	08000d85 	.word	0x08000d85
 8000ba8:	08000df3 	.word	0x08000df3
 8000bac:	08000e61 	.word	0x08000e61
 8000bb0:	08001087 	.word	0x08001087
 8000bb4:	08000ecf 	.word	0x08000ecf
 8000bb8:	08000f3d 	.word	0x08000f3d
 8000bbc:	080010f5 	.word	0x080010f5
 8000bc0:	08001163 	.word	0x08001163
 8000bc4:	08000fab 	.word	0x08000fab
 8000bc8:	08001019 	.word	0x08001019
	{
		case CLOSE:
			driveCommand->setClose(queue.Dequeue() == 0x01);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	338a      	adds	r3, #138	; 0x8a
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 ff92 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	bf0c      	ite	eq
 8000be2:	2301      	moveq	r3, #1
 8000be4:	2300      	movne	r3, #0
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	4619      	mov	r1, r3
 8000bea:	4620      	mov	r0, r4
 8000bec:	f001 fc75 	bl	80024da <_ZN12DriveCommand8setCloseEb>
			statusChangedReg = true;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			break;
 8000bf8:	e2ea      	b.n	80011d0 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case OPEN:
			driveCommand->setOpen(queue.Dequeue() == 0x01);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	338a      	adds	r3, #138	; 0x8a
 8000c04:	4618      	mov	r0, r3
 8000c06:	f001 ff7b 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	bf0c      	ite	eq
 8000c10:	2301      	moveq	r3, #1
 8000c12:	2300      	movne	r3, #0
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	4619      	mov	r1, r3
 8000c18:	4620      	mov	r0, r4
 8000c1a:	f001 fc7e 	bl	800251a <_ZN12DriveCommand7setOpenEb>
			statusChangedReg = true;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2201      	movs	r2, #1
 8000c22:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			statusChangedReg = true;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			break;
 8000c2e:	e2cf      	b.n	80011d0 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case TEACH:
			driveCommand->setTeach(queue.Dequeue() == 0x01);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	338a      	adds	r3, #138	; 0x8a
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 ff60 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	bf0c      	ite	eq
 8000c46:	2301      	moveq	r3, #1
 8000c48:	2300      	movne	r3, #0
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4620      	mov	r0, r4
 8000c50:	f001 fd03 	bl	800265a <_ZN12DriveCommand8setTeachEb>
			statusChangedReg = true;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2201      	movs	r2, #1
 8000c58:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			break;
 8000c5c:	e2b8      	b.n	80011d0 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case RESET:
			driveCommand->setReset(queue.Dequeue() == 0x01);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	338a      	adds	r3, #138	; 0x8a
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 ff49 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	bf0c      	ite	eq
 8000c74:	2301      	moveq	r3, #1
 8000c76:	2300      	movne	r3, #0
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	f001 fcac 	bl	80025da <_ZN12DriveCommand8setResetEb>
			statusChangedReg = true;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2201      	movs	r2, #1
 8000c86:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			break;
 8000c8a:	e2a1      	b.n	80011d0 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case ENABLE:
			driveCommand->setEnable(queue.Dequeue() == 0x01);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	338a      	adds	r3, #138	; 0x8a
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 ff32 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	bf0c      	ite	eq
 8000ca2:	2301      	moveq	r3, #1
 8000ca4:	2300      	movne	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4620      	mov	r0, r4
 8000cac:	f001 fc75 	bl	800259a <_ZN12DriveCommand9setEnableEb>
			statusChangedReg = true;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			break;
 8000cb8:	e28a      	b.n	80011d0 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case DISABLE:
			driveCommand->setDisable(queue.Dequeue() == 0x01);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	338a      	adds	r3, #138	; 0x8a
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f001 ff1b 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	bf0c      	ite	eq
 8000cd0:	2301      	moveq	r3, #1
 8000cd2:	2300      	movne	r3, #0
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f001 fc3e 	bl	800255a <_ZN12DriveCommand10setDisableEb>
			statusChangedReg = true;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			break;
 8000ce6:	e273      	b.n	80011d0 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case STOP:
			driveCommand->setStop(queue.Dequeue() == 0x01);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	338a      	adds	r3, #138	; 0x8a
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 ff04 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	bf0c      	ite	eq
 8000cfe:	2301      	moveq	r3, #1
 8000d00:	2300      	movne	r3, #0
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	4619      	mov	r1, r3
 8000d06:	4620      	mov	r0, r4
 8000d08:	f001 fc87 	bl	800261a <_ZN12DriveCommand7setStopEb>
			statusChangedReg = true;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			break;
 8000d14:	e25c      	b.n	80011d0 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case TEACH_TORQUE:
			dataTemp[0] = queue.Dequeue();
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	338a      	adds	r3, #138	; 0x8a
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 fef0 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8000d20:	4603      	mov	r3, r0
 8000d22:	461a      	mov	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	338a      	adds	r3, #138	; 0x8a
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 fee6 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8000d34:	4603      	mov	r3, r0
 8000d36:	461a      	mov	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000d44:	01db      	lsls	r3, r3, #7
 8000d46:	b21a      	sxth	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000d4e:	b21b      	sxth	r3, r3
 8000d50:	4313      	orrs	r3, r2
 8000d52:	b21b      	sxth	r3, r3
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setTeachTroque(value);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4610      	mov	r0, r2
 8000d6c:	f001 fb15 	bl	800239a <_ZN13DriveSettings14setTeachTroqueEt>
			settingsChangedReg |= TEACH_TORQUE_CHANGE;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 8000d82:	e225      	b.n	80011d0 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case TEACH_SPEED:
			dataTemp[0] = queue.Dequeue();
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	338a      	adds	r3, #138	; 0x8a
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f001 feb9 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	338a      	adds	r3, #138	; 0x8a
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f001 feaf 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8000da2:	4603      	mov	r3, r0
 8000da4:	461a      	mov	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000db2:	01db      	lsls	r3, r3, #7
 8000db4:	b21a      	sxth	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000dbc:	b21b      	sxth	r3, r3
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	b21b      	sxth	r3, r3
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setTeachSpeed(value);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4610      	mov	r0, r2
 8000dda:	f001 fac3 	bl	8002364 <_ZN13DriveSettings13setTeachSpeedEt>
			settingsChangedReg |= TEACH_SPEED_CHANGE;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 8000df0:	e1ee      	b.n	80011d0 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case CLAMPING_TORQUE:
			dataTemp[0] = queue.Dequeue();
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	338a      	adds	r3, #138	; 0x8a
 8000df6:	4618      	mov	r0, r3
 8000df8:	f001 fe82 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	338a      	adds	r3, #138	; 0x8a
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f001 fe78 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000e20:	01db      	lsls	r3, r3, #7
 8000e22:	b21a      	sxth	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000e2a:	b21b      	sxth	r3, r3
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setClampingTorque(value);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000e44:	4619      	mov	r1, r3
 8000e46:	4610      	mov	r0, r2
 8000e48:	f001 fa05 	bl	8002256 <_ZN13DriveSettings17setClampingTorqueEt>
			settingsChangedReg |= CLAMPING_TORQUE_CHANGE;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 8000e5e:	e1b7      	b.n	80011d0 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case CLAMPING_SPEED:
			dataTemp[0] = queue.Dequeue();
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	338a      	adds	r3, #138	; 0x8a
 8000e64:	4618      	mov	r0, r3
 8000e66:	f001 fe4b 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	338a      	adds	r3, #138	; 0x8a
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 fe41 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	461a      	mov	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000e8e:	01db      	lsls	r3, r3, #7
 8000e90:	b21a      	sxth	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000e98:	b21b      	sxth	r3, r3
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b21b      	sxth	r3, r3
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setClampingSpeed(value);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	f001 f9b3 	bl	8002220 <_ZN13DriveSettings16setClampingSpeedEt>
			settingsChangedReg |= CLAMPING_SPEED_CHANGE;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8000ec0:	f043 0308 	orr.w	r3, r3, #8
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 8000ecc:	e180      	b.n	80011d0 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case IN_POS_DIFF:
			dataTemp[0] = queue.Dequeue();
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	338a      	adds	r3, #138	; 0x8a
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 fe14 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461a      	mov	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	338a      	adds	r3, #138	; 0x8a
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f001 fe0a 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000efc:	01db      	lsls	r3, r3, #7
 8000efe:	b21a      	sxth	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000f06:	b21b      	sxth	r3, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b21b      	sxth	r3, r3
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setInPosDiff(value);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000f20:	4619      	mov	r1, r3
 8000f22:	4610      	mov	r0, r2
 8000f24:	f001 f9b2 	bl	800228c <_ZN13DriveSettings12setInPosDiffEt>
			settingsChangedReg |= IN_POS_DIFF_CHANGE;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8000f2e:	f043 0320 	orr.w	r3, r3, #32
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 8000f3a:	e149      	b.n	80011d0 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case OPENING_DISTANCE:
			dataTemp[0] = queue.Dequeue();
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	338a      	adds	r3, #138	; 0x8a
 8000f40:	4618      	mov	r0, r3
 8000f42:	f001 fddd 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8000f46:	4603      	mov	r3, r0
 8000f48:	461a      	mov	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	338a      	adds	r3, #138	; 0x8a
 8000f54:	4618      	mov	r0, r3
 8000f56:	f001 fdd3 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000f6a:	01db      	lsls	r3, r3, #7
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000f74:	b21b      	sxth	r3, r3
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setOpeningDistance(value);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4610      	mov	r0, r2
 8000f92:	f001 f996 	bl	80022c2 <_ZN13DriveSettings18setOpeningDistanceEt>
			settingsChangedReg |= OPENING_DISTANCE_CHANGE;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8000f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 8000fa8:	e112      	b.n	80011d0 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case OVER_CURRENT_WARNING:
			dataTemp[0] = queue.Dequeue();
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	338a      	adds	r3, #138	; 0x8a
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f001 fda6 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	338a      	adds	r3, #138	; 0x8a
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f001 fd9c 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000fd8:	01db      	lsls	r3, r3, #7
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000fe2:	b21b      	sxth	r3, r3
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	b21b      	sxth	r3, r3
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setOverCurrentWarning(value);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4610      	mov	r0, r2
 8001000:	f001 f97a 	bl	80022f8 <_ZN13DriveSettings21setOverCurrentWarningEt>
			settingsChangedReg |= OVER_CURRENT_WARNING_CHANGE;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800100a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800100e:	b29a      	uxth	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 8001016:	e0db      	b.n	80011d0 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case OVER_CURRENT_ERROR:
			dataTemp[0] = queue.Dequeue();
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	338a      	adds	r3, #138	; 0x8a
 800101c:	4618      	mov	r0, r3
 800101e:	f001 fd6f 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	338a      	adds	r3, #138	; 0x8a
 8001030:	4618      	mov	r0, r3
 8001032:	f001 fd65 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8001046:	01db      	lsls	r3, r3, #7
 8001048:	b21a      	sxth	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001050:	b21b      	sxth	r3, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	b21b      	sxth	r3, r3
 8001056:	b29a      	uxth	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setOverCurrentError(value);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800106a:	4619      	mov	r1, r3
 800106c:	4610      	mov	r0, r2
 800106e:	f001 f9e5 	bl	800243c <_ZN13DriveSettings19setOverCurrentErrorEt>
			settingsChangedReg |= OVER_CURRENT_ERROR_CHANGE;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8001078:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800107c:	b29a      	uxth	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 8001084:	e0a4      	b.n	80011d0 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case SELF_SHUTDOWN_DELAY:
			dataTemp[0] = queue.Dequeue();
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	338a      	adds	r3, #138	; 0x8a
 800108a:	4618      	mov	r0, r3
 800108c:	f001 fd38 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	338a      	adds	r3, #138	; 0x8a
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 fd2e 	bl	8002b00 <_ZN5Queue7DequeueEv>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80010b4:	01db      	lsls	r3, r3, #7
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80010be:	b21b      	sxth	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setSelfShutdownDelay(value);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80010d8:	4619      	mov	r1, r3
 80010da:	4610      	mov	r0, r2
 80010dc:	f001 f927 	bl	800232e <_ZN13DriveSettings20setSelfShutdownDelayEt>
			settingsChangedReg |= SELF_SHUTDOWN_DELAY_CHANGE;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80010e6:	f043 0310 	orr.w	r3, r3, #16
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 80010f2:	e06d      	b.n	80011d0 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case UNDERVOLTAGE_WARNING:
			dataTemp[0] = queue.Dequeue();
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	338a      	adds	r3, #138	; 0x8a
 80010f8:	4618      	mov	r0, r3
 80010fa:	f001 fd01 	bl	8002b00 <_ZN5Queue7DequeueEv>
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	338a      	adds	r3, #138	; 0x8a
 800110c:	4618      	mov	r0, r3
 800110e:	f001 fcf7 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8001122:	01db      	lsls	r3, r3, #7
 8001124:	b21a      	sxth	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800112c:	b21b      	sxth	r3, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	b21b      	sxth	r3, r3
 8001132:	b29a      	uxth	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setUnderVoltageWarning(value);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001146:	4619      	mov	r1, r3
 8001148:	4610      	mov	r0, r2
 800114a:	f001 f95c 	bl	8002406 <_ZN13DriveSettings22setUnderVoltageWarningEt>
			settingsChangedReg |= UNDERVOLTAGE_WARNING_CHANGE;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8001154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001158:	b29a      	uxth	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 8001160:	e036      	b.n	80011d0 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case UNDERVOLTAGE_ERROR:
			dataTemp[0] = queue.Dequeue();
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	338a      	adds	r3, #138	; 0x8a
 8001166:	4618      	mov	r0, r3
 8001168:	f001 fcca 	bl	8002b00 <_ZN5Queue7DequeueEv>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	338a      	adds	r3, #138	; 0x8a
 800117a:	4618      	mov	r0, r3
 800117c:	f001 fcc0 	bl	8002b00 <_ZN5Queue7DequeueEv>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8001190:	01db      	lsls	r3, r3, #7
 8001192:	b21a      	sxth	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800119a:	b21b      	sxth	r3, r3
 800119c:	4313      	orrs	r3, r2
 800119e:	b21b      	sxth	r3, r3
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setUnderVoltageError(value);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80011b4:	4619      	mov	r1, r3
 80011b6:	4610      	mov	r0, r2
 80011b8:	f001 f90a 	bl	80023d0 <_ZN13DriveSettings20setUnderVoltageErrorEt>
			settingsChangedReg |= UNDERVOLTAGE_ERROR_CHANGE;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80011c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 80011ce:	bf00      	nop
	}
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd90      	pop	{r4, r7, pc}

080011d8 <_ZN14Digitll_IN_OUT17isSettingsChangedEv>:


uint16_t Digitll_IN_OUT::isSettingsChanged(){
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	settingsChangedReg |= UNDERVOLTAGE_ERROR_CHANGE;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80011e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	settingsChangedReg |= UNDERVOLTAGE_WARNING_CHANGE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80011f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	return settingsChangedReg;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>:

void Digitll_IN_OUT::ResetSettingsChanged(uint16_t bit){
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	460b      	mov	r3, r1
 8001220:	807b      	strh	r3, [r7, #2]
	settingsChangedReg &= ~bit;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8001228:	b21a      	sxth	r2, r3
 800122a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800122e:	43db      	mvns	r3, r3
 8001230:	b21b      	sxth	r3, r3
 8001232:	4013      	ands	r3, r2
 8001234:	b21b      	sxth	r3, r3
 8001236:	b29a      	uxth	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <_ZN14Digitll_IN_OUT15isStatusChangedEv>:

bool Digitll_IN_OUT::isStatusChanged(){
 800124a:	b480      	push	{r7}
 800124c:	b085      	sub	sp, #20
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
	bool statusChangedRegTemp = statusChangedReg;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001258:	73fb      	strb	r3, [r7, #15]
	statusChangedReg = false;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	return statusChangedRegTemp;
 8001262:	7bfb      	ldrb	r3, [r7, #15]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <_ZN14Digitll_IN_OUT11WriteOutputEh>:





void Digitll_IN_OUT::WriteOutput(uint8_t data){
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	70fb      	strb	r3, [r7, #3]

	data & 0x01 ? Out1.Set() : Out1.Reset();
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d004      	beq.n	8001290 <_ZN14Digitll_IN_OUT11WriteOutputEh+0x20>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4618      	mov	r0, r3
 800128a:	f000 f893 	bl	80013b4 <_ZN10DigitalOut3SetEv>
 800128e:	e003      	b.n	8001298 <_ZN14Digitll_IN_OUT11WriteOutputEh+0x28>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f8ac 	bl	80013f0 <_ZN10DigitalOut5ResetEv>
	data & 0x02 ? Out2.Set() : Out2.Reset();
 8001298:	78fb      	ldrb	r3, [r7, #3]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d005      	beq.n	80012ae <_ZN14Digitll_IN_OUT11WriteOutputEh+0x3e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3310      	adds	r3, #16
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f884 	bl	80013b4 <_ZN10DigitalOut3SetEv>
 80012ac:	e004      	b.n	80012b8 <_ZN14Digitll_IN_OUT11WriteOutputEh+0x48>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3310      	adds	r3, #16
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f89c 	bl	80013f0 <_ZN10DigitalOut5ResetEv>
	data & 0x04 ? Out3.Set() : Out3.Reset();
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d005      	beq.n	80012ce <_ZN14Digitll_IN_OUT11WriteOutputEh+0x5e>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3320      	adds	r3, #32
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f874 	bl	80013b4 <_ZN10DigitalOut3SetEv>
 80012cc:	e004      	b.n	80012d8 <_ZN14Digitll_IN_OUT11WriteOutputEh+0x68>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3320      	adds	r3, #32
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f88c 	bl	80013f0 <_ZN10DigitalOut5ResetEv>
	data & 0x08 ? Out4.Set() : Out4.Reset();
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d005      	beq.n	80012ee <_ZN14Digitll_IN_OUT11WriteOutputEh+0x7e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3330      	adds	r3, #48	; 0x30
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f864 	bl	80013b4 <_ZN10DigitalOut3SetEv>
 80012ec:	e004      	b.n	80012f8 <_ZN14Digitll_IN_OUT11WriteOutputEh+0x88>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3330      	adds	r3, #48	; 0x30
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f87c 	bl	80013f0 <_ZN10DigitalOut5ResetEv>
	data & 0x10 ? Out5.Set() : Out5.Reset();
 80012f8:	78fb      	ldrb	r3, [r7, #3]
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d005      	beq.n	800130e <_ZN14Digitll_IN_OUT11WriteOutputEh+0x9e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3340      	adds	r3, #64	; 0x40
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f854 	bl	80013b4 <_ZN10DigitalOut3SetEv>
 800130c:	e004      	b.n	8001318 <_ZN14Digitll_IN_OUT11WriteOutputEh+0xa8>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3340      	adds	r3, #64	; 0x40
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f86c 	bl	80013f0 <_ZN10DigitalOut5ResetEv>
	data & 0x20 ? Out6.Set() : Out6.Reset();
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	f003 0320 	and.w	r3, r3, #32
 800131e:	2b00      	cmp	r3, #0
 8001320:	d005      	beq.n	800132e <_ZN14Digitll_IN_OUT11WriteOutputEh+0xbe>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3350      	adds	r3, #80	; 0x50
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f844 	bl	80013b4 <_ZN10DigitalOut3SetEv>
 800132c:	e004      	b.n	8001338 <_ZN14Digitll_IN_OUT11WriteOutputEh+0xc8>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3350      	adds	r3, #80	; 0x50
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f85c 	bl	80013f0 <_ZN10DigitalOut5ResetEv>
	data & 0x40 ? Out7.Set() : Out7.Reset();
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800133e:	2b00      	cmp	r3, #0
 8001340:	d005      	beq.n	800134e <_ZN14Digitll_IN_OUT11WriteOutputEh+0xde>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3360      	adds	r3, #96	; 0x60
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f834 	bl	80013b4 <_ZN10DigitalOut3SetEv>
 800134c:	e004      	b.n	8001358 <_ZN14Digitll_IN_OUT11WriteOutputEh+0xe8>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3360      	adds	r3, #96	; 0x60
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f84c 	bl	80013f0 <_ZN10DigitalOut5ResetEv>
	data & 0x80 ? Out8.Set() : Out7.Reset();
 8001358:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800135c:	2b00      	cmp	r3, #0
 800135e:	da05      	bge.n	800136c <_ZN14Digitll_IN_OUT11WriteOutputEh+0xfc>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3370      	adds	r3, #112	; 0x70
 8001364:	4618      	mov	r0, r3
 8001366:	f000 f825 	bl	80013b4 <_ZN10DigitalOut3SetEv>
}
 800136a:	e004      	b.n	8001376 <_ZN14Digitll_IN_OUT11WriteOutputEh+0x106>
	data & 0x80 ? Out8.Set() : Out7.Reset();
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3360      	adds	r3, #96	; 0x60
 8001370:	4618      	mov	r0, r3
 8001372:	f000 f83d 	bl	80013f0 <_ZN10DigitalOut5ResetEv>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>:
 */

#include "DO.h"
#include "../Tools/Delay.h"

DigitalOut::DigitalOut(GPIO_TypeDef* GPIOx_N, uint16_t GPIO_Pin_N, GPIO_TypeDef* GPIOx_P, uint16_t GPIO_Pin_P){
 800137e:	b480      	push	{r7}
 8001380:	b085      	sub	sp, #20
 8001382:	af00      	add	r7, sp, #0
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	4613      	mov	r3, r2
 800138c:	80fb      	strh	r3, [r7, #6]
	this->GPIO_Pin_N = GPIO_Pin_N;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	88fa      	ldrh	r2, [r7, #6]
 8001392:	809a      	strh	r2, [r3, #4]
	this->GPIOx_N = GPIOx_N;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	601a      	str	r2, [r3, #0]
	this->GPIO_Pin_N = GPIO_Pin_P;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	8b3a      	ldrh	r2, [r7, #24]
 800139e:	809a      	strh	r2, [r3, #4]
	this->GPIOx_N = GPIOx_P;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	601a      	str	r2, [r3, #0]
}
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4618      	mov	r0, r3
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <_ZN10DigitalOut3SetEv>:


/*
 *
 */
void DigitalOut::Set() {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	//P set, N reset
	HAL_GPIO_WritePin(GPIOx_N, GPIO_Pin_N, GPIO_PIN_RESET);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	889b      	ldrh	r3, [r3, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	4619      	mov	r1, r3
 80013c8:	f004 fa32 	bl	8005830 <HAL_GPIO_WritePin>
	Delay::DWT_Delay_us(25);
 80013cc:	2019      	movs	r0, #25
 80013ce:	f001 fb11 	bl	80029f4 <_ZN5Delay12DWT_Delay_usEm>
	HAL_GPIO_WritePin(GPIOx_P, GPIO_Pin_P, GPIO_PIN_SET);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6898      	ldr	r0, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	899b      	ldrh	r3, [r3, #12]
 80013da:	2201      	movs	r2, #1
 80013dc:	4619      	mov	r1, r3
 80013de:	f004 fa27 	bl	8005830 <HAL_GPIO_WritePin>
	status = true;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	739a      	strb	r2, [r3, #14]
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <_ZN10DigitalOut5ResetEv>:


/*
 *
 */
void DigitalOut::Reset() {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOx_P, GPIO_Pin_P, GPIO_PIN_RESET);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6898      	ldr	r0, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	899b      	ldrh	r3, [r3, #12]
 8001400:	2200      	movs	r2, #0
 8001402:	4619      	mov	r1, r3
 8001404:	f004 fa14 	bl	8005830 <HAL_GPIO_WritePin>
	Delay::DWT_Delay_us(25);
 8001408:	2019      	movs	r0, #25
 800140a:	f001 faf3 	bl	80029f4 <_ZN5Delay12DWT_Delay_usEm>
	HAL_GPIO_WritePin(GPIOx_N, GPIO_Pin_N, GPIO_PIN_SET);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6818      	ldr	r0, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	889b      	ldrh	r3, [r3, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	4619      	mov	r1, r3
 800141a:	f004 fa09 	bl	8005830 <HAL_GPIO_WritePin>
	status = false;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	739a      	strb	r2, [r3, #14]
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <_ZN3LEDC1EP12GPIO_TypeDeftb>:


#include "LED.h"


LED::LED(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool outputInverted) {
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	4611      	mov	r1, r2
 8001438:	461a      	mov	r2, r3
 800143a:	460b      	mov	r3, r1
 800143c:	80fb      	strh	r3, [r7, #6]
 800143e:	4613      	mov	r3, r2
 8001440:	717b      	strb	r3, [r7, #5]

	this->GPIO_Pin = GPIO_Pin;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	88fa      	ldrh	r2, [r7, #6]
 8001446:	809a      	strh	r2, [r3, #4]
	this->GPIOx = GPIOx;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	601a      	str	r2, [r3, #0]
	this->outputInverted = outputInverted;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	797a      	ldrb	r2, [r7, #5]
 8001452:	719a      	strb	r2, [r3, #6]
}
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <_ZN3LED3OFFEv>:
}

/*
 * LED OFF method
 */
void LED::OFF() {
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
	//check if output is inverted
	if(outputInverted){
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	799b      	ldrb	r3, [r3, #6]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d008      	beq.n	8001484 <_ZN3LED3OFFEv+0x22>
		//clear output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6818      	ldr	r0, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	889b      	ldrh	r3, [r3, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	4619      	mov	r1, r3
 800147e:	f004 f9d7 	bl	8005830 <HAL_GPIO_WritePin>
	}else{
		//write output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
	}
}
 8001482:	e007      	b.n	8001494 <_ZN3LED3OFFEv+0x32>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6818      	ldr	r0, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	889b      	ldrh	r3, [r3, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	4619      	mov	r1, r3
 8001490:	f004 f9ce 	bl	8005830 <HAL_GPIO_WritePin>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <_ZN3LED6ToggleEv>:

/*
 * LED Toggle method
 */
void LED::Toggle() {
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	889b      	ldrh	r3, [r3, #4]
 80014ac:	4619      	mov	r1, r3
 80014ae:	4610      	mov	r0, r2
 80014b0:	f004 f9d6 	bl	8005860 <HAL_GPIO_TogglePin>
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <_ZN13CommunicationC1EP11DriveStatusP13DriveSettingsP10RFM95_LoRaP14Digitll_IN_OUTP12DriveCommand>:
 *      Author: marce
 */

#include "Communication.h"

Communication::Communication(DriveStatus *driveStatus,
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	603b      	str	r3, [r7, #0]
		DriveSettings *driveSettings, RFM95_LoRa *rfm95, Digitll_IN_OUT *digitalInOut, DriveCommand *driveCommand)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	3314      	adds	r3, #20
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	811a      	strh	r2, [r3, #8]
{
	this->driveSettings = driveSettings;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	605a      	str	r2, [r3, #4]
	this->driveStatus = driveStatus;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	601a      	str	r2, [r3, #0]
	this->rfm95 = rfm95;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	60da      	str	r2, [r3, #12]
	this->digitalInOut = digitalInOut;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	611a      	str	r2, [r3, #16]
	this->driveCommand = driveCommand;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	69fa      	ldr	r2, [r7, #28]
 80014f2:	609a      	str	r2, [r3, #8]
}
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4618      	mov	r0, r3
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <_ZN13Communication9UpdateComEv>:
 * 1. Priority -> write Status (
 *
 *
 */
bool Communication::UpdateCom()
{
 8001502:	b590      	push	{r4, r7, lr}
 8001504:	b08b      	sub	sp, #44	; 0x2c
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
	uint8_t data2send[6] =
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	2300      	movs	r3, #0
 8001510:	81bb      	strh	r3, [r7, #12]
	{ 0 };

	if (digitalInOut->isStatusChanged())
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fe97 	bl	800124a <_ZN14Digitll_IN_OUT15isStatusChangedEv>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d067      	beq.n	80015f2 <_ZN13Communication9UpdateComEv+0xf0>
	{
		uint8_t data = ((uint8_t) driveCommand->isClose() << 8)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	4618      	mov	r0, r3
 8001528:	f000 ffc6 	bl	80024b8 <_ZN12DriveCommand7isCloseEv>
 800152c:	4603      	mov	r3, r0
 800152e:	021b      	lsls	r3, r3, #8
				| ((uint8_t) driveCommand->isDisable() << 8)
 8001530:	b25c      	sxtb	r4, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fffe 	bl	8002538 <_ZN12DriveCommand9isDisableEv>
 800153c:	4603      	mov	r3, r0
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	b25b      	sxtb	r3, r3
 8001542:	4323      	orrs	r3, r4
 8001544:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveCommand->isEnable() << 8)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	4618      	mov	r0, r3
 800154c:	f001 f814 	bl	8002578 <_ZN12DriveCommand8isEnableEv>
 8001550:	4603      	mov	r3, r0
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b25b      	sxtb	r3, r3
 8001556:	4323      	orrs	r3, r4
 8001558:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveCommand->isOpen() << 8)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	4618      	mov	r0, r3
 8001560:	f000 ffca 	bl	80024f8 <_ZN12DriveCommand6isOpenEv>
 8001564:	4603      	mov	r3, r0
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b25b      	sxtb	r3, r3
 800156a:	4323      	orrs	r3, r4
 800156c:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveCommand->isReset() << 8)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	4618      	mov	r0, r3
 8001574:	f001 f820 	bl	80025b8 <_ZN12DriveCommand7isResetEv>
 8001578:	4603      	mov	r3, r0
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	b25b      	sxtb	r3, r3
 800157e:	4323      	orrs	r3, r4
 8001580:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveCommand->isStop() << 8)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	4618      	mov	r0, r3
 8001588:	f001 f836 	bl	80025f8 <_ZN12DriveCommand6isStopEv>
 800158c:	4603      	mov	r3, r0
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	b25b      	sxtb	r3, r3
 8001592:	4323      	orrs	r3, r4
 8001594:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveCommand->isTeach() << 8)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	4618      	mov	r0, r3
 800159c:	f001 f84c 	bl	8002638 <_ZN12DriveCommand7isTeachEv>
 80015a0:	4603      	mov	r3, r0
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	4323      	orrs	r3, r4
 80015a8:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveCommand->isWriteConfig() << 8);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f001 f862 	bl	8002678 <_ZN12DriveCommand13isWriteConfigEv>
 80015b4:	4603      	mov	r3, r0
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	b25b      	sxtb	r3, r3
 80015ba:	4323      	orrs	r3, r4
 80015bc:	b25b      	sxtb	r3, r3
 80015be:	73fb      	strb	r3, [r7, #15]

		data2send[0] = driveSettings->getDeviceAddress();
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 ff48 	bl	800245a <_ZNK13DriveSettings16getDeviceAddressEv>
 80015ca:	4603      	mov	r3, r0
 80015cc:	723b      	strb	r3, [r7, #8]
		data2send[1] = SEND_COMMAND;
 80015ce:	2302      	movs	r3, #2
 80015d0:	727b      	strb	r3, [r7, #9]
		data2send[2] = data;
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	72bb      	strb	r3, [r7, #10]
		data2send[3] = 5;
 80015d6:	2305      	movs	r3, #5
 80015d8:	72fb      	strb	r3, [r7, #11]
		data2send[4] = CRC8(data2send, data2send[3] - 1);
 80015da:	7afb      	ldrb	r3, [r7, #11]
 80015dc:	3b01      	subs	r3, #1
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	f107 0308 	add.w	r3, r7, #8
 80015e4:	4619      	mov	r1, r3
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f9fc 	bl	80019e4 <_ZN13Communication4CRC8EPhh>
 80015ec:	4603      	mov	r3, r0
 80015ee:	733b      	strb	r3, [r7, #12]
 80015f0:	e182      	b.n	80018f8 <_ZN13Communication9UpdateComEv+0x3f6>
	}
	else if (digitalInOut->isSettingsChanged() != 0)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fdee 	bl	80011d8 <_ZN14Digitll_IN_OUT17isSettingsChangedEv>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	bf14      	ite	ne
 8001602:	2301      	movne	r3, #1
 8001604:	2300      	moveq	r3, #0
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 815f 	beq.w	80018cc <_ZN13Communication9UpdateComEv+0x3ca>
	{
		uint16_t commands = digitalInOut->isSettingsChanged();
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fde0 	bl	80011d8 <_ZN14Digitll_IN_OUT17isSettingsChangedEv>
 8001618:	4603      	mov	r3, r0
 800161a:	84fb      	strh	r3, [r7, #38]	; 0x26
		data2send[0] = driveSettings->getDeviceAddress();
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	4618      	mov	r0, r3
 8001622:	f000 ff1a 	bl	800245a <_ZNK13DriveSettings16getDeviceAddressEv>
 8001626:	4603      	mov	r3, r0
 8001628:	723b      	strb	r3, [r7, #8]
		data2send[1] = SEND_SETTINGS;
 800162a:	2301      	movs	r3, #1
 800162c:	727b      	strb	r3, [r7, #9]

		if (commands & TEACH_TORQUE_CHANGE)
 800162e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b00      	cmp	r3, #0
 8001636:	d017      	beq.n	8001668 <_ZN13Communication9UpdateComEv+0x166>
		{
			data2send[2] = TEACH_TORQUE;
 8001638:	2310      	movs	r3, #16
 800163a:	72bb      	strb	r3, [r7, #10]
			uint16_t value = driveSettings->getTeachTroque();
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	4618      	mov	r0, r3
 8001642:	f000 fe9e 	bl	8002382 <_ZNK13DriveSettings14getTeachTroqueEv>
 8001646:	4603      	mov	r3, r0
 8001648:	823b      	strh	r3, [r7, #16]
			data2send[3] = value >> 8;
 800164a:	8a3b      	ldrh	r3, [r7, #16]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	b29b      	uxth	r3, r3
 8001650:	b2db      	uxtb	r3, r3
 8001652:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8001654:	8a3b      	ldrh	r3, [r7, #16]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(TEACH_TORQUE_CHANGE);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	2101      	movs	r1, #1
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fdd8 	bl	8001216 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8001666:	e123      	b.n	80018b0 <_ZN13Communication9UpdateComEv+0x3ae>
		}
		else if (commands & TEACH_SPEED_CHANGE)
 8001668:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d017      	beq.n	80016a2 <_ZN13Communication9UpdateComEv+0x1a0>
		{
			uint16_t value = driveSettings->getTeachSpeed();
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fe68 	bl	800234c <_ZNK13DriveSettings13getTeachSpeedEv>
 800167c:	4603      	mov	r3, r0
 800167e:	827b      	strh	r3, [r7, #18]
			data2send[2] = TEACH_SPEED;
 8001680:	2311      	movs	r3, #17
 8001682:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 8001684:	8a7b      	ldrh	r3, [r7, #18]
 8001686:	0a1b      	lsrs	r3, r3, #8
 8001688:	b29b      	uxth	r3, r3
 800168a:	b2db      	uxtb	r3, r3
 800168c:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 800168e:	8a7b      	ldrh	r3, [r7, #18]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(TEACH_SPEED_CHANGE);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	2102      	movs	r1, #2
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fdbb 	bl	8001216 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 80016a0:	e106      	b.n	80018b0 <_ZN13Communication9UpdateComEv+0x3ae>
		}
		else if (commands & CLAMPING_TORQUE_CHANGE)
 80016a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d017      	beq.n	80016dc <_ZN13Communication9UpdateComEv+0x1da>
		{
			uint16_t value = driveSettings->getClampingTorque();
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 fdc4 	bl	800223e <_ZNK13DriveSettings17getClampingTorqueEv>
 80016b6:	4603      	mov	r3, r0
 80016b8:	82bb      	strh	r3, [r7, #20]
			data2send[2] = CLAMPING_TORQUE;
 80016ba:	2312      	movs	r3, #18
 80016bc:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 80016be:	8abb      	ldrh	r3, [r7, #20]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 80016c8:	8abb      	ldrh	r3, [r7, #20]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(CLAMPING_TORQUE_CHANGE);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	2104      	movs	r1, #4
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fd9e 	bl	8001216 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 80016da:	e0e9      	b.n	80018b0 <_ZN13Communication9UpdateComEv+0x3ae>
		}
		else if (commands & CLAMPING_SPEED_CHANGE)
 80016dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d017      	beq.n	8001716 <_ZN13Communication9UpdateComEv+0x214>
		{
			uint16_t value = driveSettings->getClampingSpeed();
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 fd8c 	bl	8002208 <_ZNK13DriveSettings16getClampingSpeedEv>
 80016f0:	4603      	mov	r3, r0
 80016f2:	82fb      	strh	r3, [r7, #22]
			data2send[2] = CLAMPING_SPEED;
 80016f4:	2313      	movs	r3, #19
 80016f6:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 80016f8:	8afb      	ldrh	r3, [r7, #22]
 80016fa:	0a1b      	lsrs	r3, r3, #8
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8001702:	8afb      	ldrh	r3, [r7, #22]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(CLAMPING_SPEED_CHANGE);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	2108      	movs	r1, #8
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fd81 	bl	8001216 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8001714:	e0cc      	b.n	80018b0 <_ZN13Communication9UpdateComEv+0x3ae>
		}
		else if (commands & SELF_SHUTDOWN_DELAY_CHANGE)
 8001716:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001718:	f003 0310 	and.w	r3, r3, #16
 800171c:	2b00      	cmp	r3, #0
 800171e:	d017      	beq.n	8001750 <_ZN13Communication9UpdateComEv+0x24e>
		{
			uint16_t value = driveSettings->getSelfShutdownDelay();
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	4618      	mov	r0, r3
 8001726:	f000 fdf6 	bl	8002316 <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 800172a:	4603      	mov	r3, r0
 800172c:	833b      	strh	r3, [r7, #24]
			data2send[2] = SELF_SHUTDOWN_DELAY;
 800172e:	2314      	movs	r3, #20
 8001730:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 8001732:	8b3b      	ldrh	r3, [r7, #24]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	b29b      	uxth	r3, r3
 8001738:	b2db      	uxtb	r3, r3
 800173a:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 800173c:	8b3b      	ldrh	r3, [r7, #24]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(SELF_SHUTDOWN_DELAY_CHANGE);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	2110      	movs	r1, #16
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fd64 	bl	8001216 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 800174e:	e0af      	b.n	80018b0 <_ZN13Communication9UpdateComEv+0x3ae>
		}
		else if (commands & IN_POS_DIFF_CHANGE)
 8001750:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001752:	f003 0320 	and.w	r3, r3, #32
 8001756:	2b00      	cmp	r3, #0
 8001758:	d017      	beq.n	800178a <_ZN13Communication9UpdateComEv+0x288>
		{
			uint16_t value = driveSettings->getInPosDiff();
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4618      	mov	r0, r3
 8001760:	f000 fd88 	bl	8002274 <_ZNK13DriveSettings12getInPosDiffEv>
 8001764:	4603      	mov	r3, r0
 8001766:	837b      	strh	r3, [r7, #26]
			data2send[2] = IN_POS_DIFF;
 8001768:	2315      	movs	r3, #21
 800176a:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 800176c:	8b7b      	ldrh	r3, [r7, #26]
 800176e:	0a1b      	lsrs	r3, r3, #8
 8001770:	b29b      	uxth	r3, r3
 8001772:	b2db      	uxtb	r3, r3
 8001774:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8001776:	8b7b      	ldrh	r3, [r7, #26]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(IN_POS_DIFF_CHANGE);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	2120      	movs	r1, #32
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fd47 	bl	8001216 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8001788:	e092      	b.n	80018b0 <_ZN13Communication9UpdateComEv+0x3ae>
		}
		else if (commands & OPENING_DISTANCE_CHANGE)
 800178a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800178c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001790:	2b00      	cmp	r3, #0
 8001792:	d017      	beq.n	80017c4 <_ZN13Communication9UpdateComEv+0x2c2>
		{
			uint16_t value = driveSettings->getOpeningDistance();
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	4618      	mov	r0, r3
 800179a:	f000 fd86 	bl	80022aa <_ZNK13DriveSettings18getOpeningDistanceEv>
 800179e:	4603      	mov	r3, r0
 80017a0:	83bb      	strh	r3, [r7, #28]
			data2send[2] = OPENING_DISTANCE;
 80017a2:	2316      	movs	r3, #22
 80017a4:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 80017a6:	8bbb      	ldrh	r3, [r7, #28]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 80017b0:	8bbb      	ldrh	r3, [r7, #28]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(OPENING_DISTANCE_CHANGE);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	2140      	movs	r1, #64	; 0x40
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fd2a 	bl	8001216 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 80017c2:	e075      	b.n	80018b0 <_ZN13Communication9UpdateComEv+0x3ae>
		}
		else if (commands & UNDERVOLTAGE_WARNING_CHANGE)
 80017c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d017      	beq.n	80017fe <_ZN13Communication9UpdateComEv+0x2fc>
		{
			uint16_t value = driveSettings->getUnderVoltageWarning();
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 fe0b 	bl	80023ee <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 80017d8:	4603      	mov	r3, r0
 80017da:	83fb      	strh	r3, [r7, #30]
			data2send[2] = UNDERVOLTAGE_WARNING;
 80017dc:	2317      	movs	r3, #23
 80017de:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 80017e0:	8bfb      	ldrh	r3, [r7, #30]
 80017e2:	0a1b      	lsrs	r3, r3, #8
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 80017ea:	8bfb      	ldrh	r3, [r7, #30]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(UNDERVOLTAGE_WARNING_CHANGE);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	2180      	movs	r1, #128	; 0x80
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fd0d 	bl	8001216 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 80017fc:	e058      	b.n	80018b0 <_ZN13Communication9UpdateComEv+0x3ae>
		}
		else if (commands & UNDERVOLTAGE_ERROR_CHANGE)
 80017fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001804:	2b00      	cmp	r3, #0
 8001806:	d018      	beq.n	800183a <_ZN13Communication9UpdateComEv+0x338>
		{
			uint16_t value = driveSettings->getUnderVoltageError();
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	4618      	mov	r0, r3
 800180e:	f000 fdd3 	bl	80023b8 <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 8001812:	4603      	mov	r3, r0
 8001814:	843b      	strh	r3, [r7, #32]
			data2send[2] = UNDERVOLTAGE_ERROR;
 8001816:	2318      	movs	r3, #24
 8001818:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 800181a:	8c3b      	ldrh	r3, [r7, #32]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	b29b      	uxth	r3, r3
 8001820:	b2db      	uxtb	r3, r3
 8001822:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8001824:	8c3b      	ldrh	r3, [r7, #32]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(UNDERVOLTAGE_ERROR_CHANGE);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fcef 	bl	8001216 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8001838:	e03a      	b.n	80018b0 <_ZN13Communication9UpdateComEv+0x3ae>
		}
		else if (commands & OVER_CURRENT_WARNING_CHANGE)
 800183a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800183c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001840:	2b00      	cmp	r3, #0
 8001842:	d018      	beq.n	8001876 <_ZN13Communication9UpdateComEv+0x374>
		{
			uint16_t value = driveSettings->getOverCurrentWarning();
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fd49 	bl	80022e0 <_ZNK13DriveSettings21getOverCurrentWarningEv>
 800184e:	4603      	mov	r3, r0
 8001850:	847b      	strh	r3, [r7, #34]	; 0x22
			data2send[2] = OVER_CURRENT_WARNING;
 8001852:	2319      	movs	r3, #25
 8001854:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 8001856:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	b29b      	uxth	r3, r3
 800185c:	b2db      	uxtb	r3, r3
 800185e:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8001860:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001862:	b2db      	uxtb	r3, r3
 8001864:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(OVER_CURRENT_WARNING_CHANGE);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fcd1 	bl	8001216 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8001874:	e01c      	b.n	80018b0 <_ZN13Communication9UpdateComEv+0x3ae>
		}
		else if (commands & OVER_CURRENT_ERROR_CHANGE)
 8001876:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800187c:	2b00      	cmp	r3, #0
 800187e:	d017      	beq.n	80018b0 <_ZN13Communication9UpdateComEv+0x3ae>
		{
			uint16_t value = driveSettings->getOverCurrentError();
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	4618      	mov	r0, r3
 8001886:	f000 fdcd 	bl	8002424 <_ZNK13DriveSettings19getOverCurrentErrorEv>
 800188a:	4603      	mov	r3, r0
 800188c:	84bb      	strh	r3, [r7, #36]	; 0x24
			data2send[2] = OVER_CURRENT_ERROR;
 800188e:	231a      	movs	r3, #26
 8001890:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 8001892:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	b29b      	uxth	r3, r3
 8001898:	b2db      	uxtb	r3, r3
 800189a:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 800189c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(OVER_CURRENT_ERROR_CHANGE);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fcb3 	bl	8001216 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
		}

		data2send[4] = 6;
 80018b0:	2306      	movs	r3, #6
 80018b2:	733b      	strb	r3, [r7, #12]
		data2send[5] = CRC8(data2send, data2send[4]-1);
 80018b4:	7b3b      	ldrb	r3, [r7, #12]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	f107 0308 	add.w	r3, r7, #8
 80018be:	4619      	mov	r1, r3
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f88f 	bl	80019e4 <_ZN13Communication4CRC8EPhh>
 80018c6:	4603      	mov	r3, r0
 80018c8:	737b      	strb	r3, [r7, #13]
 80018ca:	e015      	b.n	80018f8 <_ZN13Communication9UpdateComEv+0x3f6>
	}
	else
	{
		data2send[0] = driveSettings->getDeviceAddress();
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f000 fdc2 	bl	800245a <_ZNK13DriveSettings16getDeviceAddressEv>
 80018d6:	4603      	mov	r3, r0
 80018d8:	723b      	strb	r3, [r7, #8]
		data2send[1] = SEND_STATUS_REQ;
 80018da:	2303      	movs	r3, #3
 80018dc:	727b      	strb	r3, [r7, #9]
		data2send[2] = 4;
 80018de:	2304      	movs	r3, #4
 80018e0:	72bb      	strb	r3, [r7, #10]
		data2send[3] = CRC8(data2send, data2send[2]-1);
 80018e2:	7abb      	ldrb	r3, [r7, #10]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	f107 0308 	add.w	r3, r7, #8
 80018ec:	4619      	mov	r1, r3
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f878 	bl	80019e4 <_ZN13Communication4CRC8EPhh>
 80018f4:	4603      	mov	r3, r0
 80018f6:	72fb      	strb	r3, [r7, #11]
	}

	rfm95->write(data2send, 6);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68d8      	ldr	r0, [r3, #12]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	3304      	adds	r3, #4
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f107 0108 	add.w	r1, r7, #8
 800190a:	2206      	movs	r2, #6
 800190c:	4798      	blx	r3
	return true;
 800190e:	2301      	movs	r3, #1
}
 8001910:	4618      	mov	r0, r3
 8001912:	372c      	adds	r7, #44	; 0x2c
 8001914:	46bd      	mov	sp, r7
 8001916:	bd90      	pop	{r4, r7, pc}

08001918 <_ZN13Communication8ReadDataEv>:


void Communication::ReadData(){
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

	uint8_t packetSize = rfm95->parsePacket();
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f981 	bl	8001c2e <_ZN10RFM95_LoRa11parsePacketEi>
 800192c:	4603      	mov	r3, r0
 800192e:	73fb      	strb	r3, [r7, #15]
	if(packetSize != 0){
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d053      	beq.n	80019de <_ZN13Communication8ReadDataEv+0xc6>
		uint8_t counter = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	73bb      	strb	r3, [r7, #14]
		while(rfm95->available()){
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	3308      	adds	r3, #8
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4610      	mov	r0, r2
 800194a:	4798      	blx	r3
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	bf14      	ite	ne
 8001952:	2301      	movne	r3, #1
 8001954:	2300      	moveq	r3, #0
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d013      	beq.n	8001984 <_ZN13Communication8ReadDataEv+0x6c>
			rxData[counter] = rfm95->read();
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	330c      	adds	r3, #12
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4610      	mov	r0, r2
 800196c:	4798      	blx	r3
 800196e:	4602      	mov	r2, r0
 8001970:	7bbb      	ldrb	r3, [r7, #14]
 8001972:	b2d1      	uxtb	r1, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	4413      	add	r3, r2
 8001978:	460a      	mov	r2, r1
 800197a:	751a      	strb	r2, [r3, #20]
			if(counter > MAX_PACKET_2_RECEIVE){
 800197c:	7bbb      	ldrb	r3, [r7, #14]
 800197e:	2b0a      	cmp	r3, #10
 8001980:	d828      	bhi.n	80019d4 <_ZN13Communication8ReadDataEv+0xbc>
		while(rfm95->available()){
 8001982:	e7da      	b.n	800193a <_ZN13Communication8ReadDataEv+0x22>
				return;
			}
		}

		//uint8_t addr = rxData[0];
		uint8_t command = rxData[1];
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	7d5b      	ldrb	r3, [r3, #21]
 8001988:	737b      	strb	r3, [r7, #13]
		//data = rxData[2...(counter-1)]
		//uint8_t size = rxData[counter-1];
		uint8_t crc8 = rxData[counter];
 800198a:	7bbb      	ldrb	r3, [r7, #14]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	7d1b      	ldrb	r3, [r3, #20]
 8001992:	733b      	strb	r3, [r7, #12]

		if(CRC8(rxData, counter-1) != crc8){
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f103 0114 	add.w	r1, r3, #20
 800199a:	7bbb      	ldrb	r3, [r7, #14]
 800199c:	3b01      	subs	r3, #1
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	461a      	mov	r2, r3
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f81e 	bl	80019e4 <_ZN13Communication4CRC8EPhh>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
 80019ac:	7b3b      	ldrb	r3, [r7, #12]
 80019ae:	4293      	cmp	r3, r2
 80019b0:	bf14      	ite	ne
 80019b2:	2301      	movne	r3, #1
 80019b4:	2300      	moveq	r3, #0
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10d      	bne.n	80019d8 <_ZN13Communication8ReadDataEv+0xc0>
			//error crc error //ToDO
			return;
		}

		switch (command) {
 80019bc:	7b7b      	ldrb	r3, [r7, #13]
 80019be:	2b11      	cmp	r3, #17
 80019c0:	d10c      	bne.n	80019dc <_ZN13Communication8ReadDataEv+0xc4>
			case RCV_STATUS:
				digitalInOut->WriteOutput(rxData[2]);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691a      	ldr	r2, [r3, #16]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	7d9b      	ldrb	r3, [r3, #22]
 80019ca:	4619      	mov	r1, r3
 80019cc:	4610      	mov	r0, r2
 80019ce:	f7ff fc4f 	bl	8001270 <_ZN14Digitll_IN_OUT11WriteOutputEh>
				break;
 80019d2:	e004      	b.n	80019de <_ZN13Communication8ReadDataEv+0xc6>
				return;
 80019d4:	bf00      	nop
 80019d6:	e002      	b.n	80019de <_ZN13Communication8ReadDataEv+0xc6>
			return;
 80019d8:	bf00      	nop
 80019da:	e000      	b.n	80019de <_ZN13Communication8ReadDataEv+0xc6>
			default:
				//error no supported command //ToDO
				break;
 80019dc:	bf00      	nop
		}
	}
}
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_ZN13Communication4CRC8EPhh>:


uint8_t Communication::CRC8(uint8_t *data, uint8_t length)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b089      	sub	sp, #36	; 0x24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	4613      	mov	r3, r2
 80019f0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0xff;
 80019f2:	23ff      	movs	r3, #255	; 0xff
 80019f4:	77fb      	strb	r3, [r7, #31]
	size_t i, j;
	for (i = 0; i < length; i++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	61bb      	str	r3, [r7, #24]
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d222      	bcs.n	8001a48 <_ZN13Communication4CRC8EPhh+0x64>
	{
		crc ^= data[i];
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	4413      	add	r3, r2
 8001a08:	781a      	ldrb	r2, [r3, #0]
 8001a0a:	7ffb      	ldrb	r3, [r7, #31]
 8001a0c:	4053      	eors	r3, r2
 8001a0e:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	2b07      	cmp	r3, #7
 8001a18:	d812      	bhi.n	8001a40 <_ZN13Communication4CRC8EPhh+0x5c>
		{
			if ((crc & 0x80) != 0)
 8001a1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	da07      	bge.n	8001a32 <_ZN13Communication4CRC8EPhh+0x4e>
				crc = (uint8_t) ((crc << 1) ^ 0x31);
 8001a22:	7ffb      	ldrb	r3, [r7, #31]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	b25b      	sxtb	r3, r3
 8001a28:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001a2c:	b25b      	sxtb	r3, r3
 8001a2e:	77fb      	strb	r3, [r7, #31]
 8001a30:	e002      	b.n	8001a38 <_ZN13Communication4CRC8EPhh+0x54>
			else
				crc <<= 1;
 8001a32:	7ffb      	ldrb	r3, [r7, #31]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	e7e9      	b.n	8001a14 <_ZN13Communication4CRC8EPhh+0x30>
	for (i = 0; i < length; i++)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	3301      	adds	r3, #1
 8001a44:	61bb      	str	r3, [r7, #24]
 8001a46:	e7d8      	b.n	80019fa <_ZN13Communication4CRC8EPhh+0x16>
		}
	}
	return crc;
 8001a48:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <_ZN10RFM95_LoRaC1Ev>:
 */

#include "RFM95.h"
#include "../AppMain/AppMain.h"

RFM95_LoRa::RFM95_LoRa() :
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(0)
 8001a60:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <_ZN10RFM95_LoRaC1Ev+0x34>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	615a      	str	r2, [r3, #20]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
{

}
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	0800e300 	.word	0x0800e300

08001a90 <_ZN10RFM95_LoRa9selectRFMEv>:
 * @brief RFM95 chip select
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::selectRFM(){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_RESET);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2108      	movs	r1, #8
 8001a9c:	4803      	ldr	r0, [pc, #12]	; (8001aac <_ZN10RFM95_LoRa9selectRFMEv+0x1c>)
 8001a9e:	f003 fec7 	bl	8005830 <HAL_GPIO_WritePin>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	48000400 	.word	0x48000400

08001ab0 <_ZN10RFM95_LoRa11deselectRFMEv>:
 * @brief RFM95 chip deselect
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::deselectRFM(){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_SET);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2108      	movs	r1, #8
 8001abc:	4803      	ldr	r0, [pc, #12]	; (8001acc <_ZN10RFM95_LoRa11deselectRFMEv+0x1c>)
 8001abe:	f003 feb7 	bl	8005830 <HAL_GPIO_WritePin>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	48000400 	.word	0x48000400

08001ad0 <_ZN10RFM95_LoRa8resetRFMEv>:

void RFM95_LoRa::resetRFM(){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2110      	movs	r1, #16
 8001adc:	4808      	ldr	r0, [pc, #32]	; (8001b00 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 8001ade:	f003 fea7 	bl	8005830 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f002 f99a 	bl	8003e1c <HAL_Delay>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	2110      	movs	r1, #16
 8001aec:	4804      	ldr	r0, [pc, #16]	; (8001b00 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 8001aee:	f003 fe9f 	bl	8005830 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001af2:	2005      	movs	r0, #5
 8001af4:	f002 f992 	bl	8003e1c <HAL_Delay>
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	48000400 	.word	0x48000400

08001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>:

bool RFM95_LoRa::writeRegister(uint8_t addr, uint8_t data){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	70fb      	strb	r3, [r7, #3]
 8001b10:	4613      	mov	r3, r2
 8001b12:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2] = {(uint8_t)(addr | 0x80), data};
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	733b      	strb	r3, [r7, #12]
 8001b1e:	78bb      	ldrb	r3, [r7, #2]
 8001b20:	737b      	strb	r3, [r7, #13]
	selectRFM();
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffb4 	bl	8001a90 <_ZN10RFM95_LoRa9selectRFMEv>
	if(HAL_SPI_Transmit(&hspi3, (uint8_t*)buff, 2, 100) != HAL_OK){
 8001b28:	f107 010c 	add.w	r1, r7, #12
 8001b2c:	2364      	movs	r3, #100	; 0x64
 8001b2e:	2202      	movs	r2, #2
 8001b30:	480b      	ldr	r0, [pc, #44]	; (8001b60 <_ZN10RFM95_LoRa13writeRegisterEhh+0x5c>)
 8001b32:	f006 fe9a 	bl	800886a <HAL_SPI_Transmit>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	bf14      	ite	ne
 8001b3c:	2301      	movne	r3, #1
 8001b3e:	2300      	moveq	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d004      	beq.n	8001b50 <_ZN10RFM95_LoRa13writeRegisterEhh+0x4c>
		deselectRFM();
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ffb2 	bl	8001ab0 <_ZN10RFM95_LoRa11deselectRFMEv>
		return false;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	e003      	b.n	8001b58 <_ZN10RFM95_LoRa13writeRegisterEhh+0x54>
	}
	deselectRFM();
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ffad 	bl	8001ab0 <_ZN10RFM95_LoRa11deselectRFMEv>
	return true;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000510 	.word	0x20000510

08001b64 <_ZN10RFM95_LoRa12readRegisterEh>:

uint8_t RFM95_LoRa::readRegister(uint8_t addr){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af02      	add	r7, sp, #8
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	70fb      	strb	r3, [r7, #3]
	uint8_t rxData[2] = {0,0};
 8001b70:	2300      	movs	r3, #0
 8001b72:	81bb      	strh	r3, [r7, #12]
	uint8_t txData[1] = {addr};
 8001b74:	78fb      	ldrb	r3, [r7, #3]
 8001b76:	723b      	strb	r3, [r7, #8]

	selectRFM();
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff89 	bl	8001a90 <_ZN10RFM95_LoRa9selectRFMEv>
		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)txData,(uint8_t*)rxData,2,100);
 8001b7e:	f107 020c 	add.w	r2, r7, #12
 8001b82:	f107 0108 	add.w	r1, r7, #8
 8001b86:	2364      	movs	r3, #100	; 0x64
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <_ZN10RFM95_LoRa12readRegisterEh+0x40>)
 8001b8e:	f006 ffda 	bl	8008b46 <HAL_SPI_TransmitReceive>
	deselectRFM();
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ff8c 	bl	8001ab0 <_ZN10RFM95_LoRa11deselectRFMEv>
	return rxData[1];
 8001b98:	7b7b      	ldrb	r3, [r7, #13]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000510 	.word	0x20000510

08001ba8 <_ZN10RFM95_LoRa5beginEl>:


int RFM95_LoRa::begin(long frequency){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
 resetRFM();
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ff8c 	bl	8001ad0 <_ZN10RFM95_LoRa8resetRFMEv>
  // check version
  uint8_t version = readRegister(REG_VERSION);
 8001bb8:	2142      	movs	r1, #66	; 0x42
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff ffd2 	bl	8001b64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	2b12      	cmp	r3, #18
 8001bc8:	d001      	beq.n	8001bce <_ZN10RFM95_LoRa5beginEl+0x26>
    return 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e02b      	b.n	8001c26 <_ZN10RFM95_LoRa5beginEl+0x7e>
  }
  // put in sleep mode
  sleep();
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f952 	bl	8001e78 <_ZN10RFM95_LoRa5sleepEv>
  // set frequency
  setFrequency(frequency);
 8001bd4:	6839      	ldr	r1, [r7, #0]
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f998 	bl	8001f0c <_ZN10RFM95_LoRa12setFrequencyEl>
  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	210e      	movs	r1, #14
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ff8f 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	210f      	movs	r1, #15
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ff8a 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 8001bf0:	210c      	movs	r1, #12
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ffb6 	bl	8001b64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f043 0303 	orr.w	r3, r3, #3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	461a      	mov	r2, r3
 8001c02:	210c      	movs	r1, #12
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff ff7d 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	2126      	movs	r1, #38	; 0x26
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff ff78 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set output power to 17 dBm
  setTxPower(20);
 8001c14:	2201      	movs	r2, #1
 8001c16:	2114      	movs	r1, #20
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f93a 	bl	8001e92 <_ZN10RFM95_LoRa10setTxPowerEii>
  // put in standby mode
  idle();
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f91d 	bl	8001e5e <_ZN10RFM95_LoRa4idleEv>
  return 1;
 8001c24:	2301      	movs	r3, #1
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <_ZN10RFM95_LoRa11parsePacketEi>:



int RFM95_LoRa::parsePacket(int size)

{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]
  int packetLength = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 8001c3c:	2112      	movs	r1, #18
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ff90 	bl	8001b64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001c44:	4603      	mov	r3, r0
 8001c46:	60bb      	str	r3, [r7, #8]
  if (size > 0) {
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	dd0a      	ble.n	8001c64 <_ZN10RFM95_LoRa11parsePacketEi+0x36>
    implicitHeaderMode();
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 fa8f 	bl	8002172 <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	2122      	movs	r1, #34	; 0x22
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ff51 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
 8001c62:	e002      	b.n	8001c6a <_ZN10RFM95_LoRa11parsePacketEi+0x3c>
  } else {
    explicitHeaderMode();
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 fa6c 	bl	8002142 <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	461a      	mov	r2, r3
 8001c70:	2112      	movs	r1, #18
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ff46 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d026      	beq.n	8001cd0 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f003 0320 	and.w	r3, r3, #32
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d121      	bne.n	8001cd0 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
    // received a packet
    _packetIndex = 0;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	615a      	str	r2, [r3, #20]
    // read packet length
    if (_implicitHeaderMode) {
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d006      	beq.n	8001ca8 <_ZN10RFM95_LoRa11parsePacketEi+0x7a>
      packetLength = readRegister(REG_PAYLOAD_LENGTH);
 8001c9a:	2122      	movs	r1, #34	; 0x22
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ff61 	bl	8001b64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	e005      	b.n	8001cb4 <_ZN10RFM95_LoRa11parsePacketEi+0x86>
    } else {
      packetLength = readRegister(REG_RX_NB_BYTES);
 8001ca8:	2113      	movs	r1, #19
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ff5a 	bl	8001b64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60fb      	str	r3, [r7, #12]
    }
    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 8001cb4:	2110      	movs	r1, #16
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ff54 	bl	8001b64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	210d      	movs	r1, #13
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ff1e 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in standby mode
    idle();
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 f8c8 	bl	8001e5e <_ZN10RFM95_LoRa4idleEv>
 8001cce:	e015      	b.n	8001cfc <_ZN10RFM95_LoRa11parsePacketEi+0xce>
  } else if (readRegister(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ff46 	bl	8001b64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b86      	cmp	r3, #134	; 0x86
 8001cdc:	bf14      	ite	ne
 8001cde:	2301      	movne	r3, #1
 8001ce0:	2300      	moveq	r3, #0
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d009      	beq.n	8001cfc <_ZN10RFM95_LoRa11parsePacketEi+0xce>
    // not currently in RX mode
    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	210d      	movs	r1, #13
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ff09 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in single RX mode
    writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001cf2:	2286      	movs	r2, #134	; 0x86
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ff04 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  return packetLength;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <_ZN10RFM95_LoRa5writeEh>:

float RFM95_LoRa::packetSnr(){
  return ((int8_t)readRegister(REG_PKT_SNR_VALUE)) * 0.25;
}

size_t RFM95_LoRa::write(uint8_t byte){
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	3304      	adds	r3, #4
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	1cf9      	adds	r1, r7, #3
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	4798      	blx	r3
 8001d22:	4603      	mov	r3, r0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <_ZN10RFM95_LoRa5writeEPKhj>:



size_t RFM95_LoRa::write(const uint8_t *buffer, size_t size){
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 8001d38:	2122      	movs	r1, #34	; 0x22
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f7ff ff12 	bl	8001b64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001d40:	4603      	mov	r3, r0
 8001d42:	613b      	str	r3, [r7, #16]
  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	2bff      	cmp	r3, #255	; 0xff
 8001d4c:	d903      	bls.n	8001d56 <_ZN10RFM95_LoRa5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001d54:	607b      	str	r3, [r7, #4]
  }
  // write data
  for (size_t i = 0; i < size; i++) {
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d20c      	bcs.n	8001d7c <_ZN10RFM95_LoRa5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	4413      	add	r3, r2
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f7ff fec8 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	3301      	adds	r3, #1
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	e7ee      	b.n	8001d5a <_ZN10RFM95_LoRa5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	4413      	add	r3, r2
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	461a      	mov	r2, r3
 8001d8a:	2122      	movs	r1, #34	; 0x22
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f7ff feb9 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return size;
 8001d92:	687b      	ldr	r3, [r7, #4]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <_ZN10RFM95_LoRa9availableEv>:


int RFM95_LoRa::available()
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8001da4:	2113      	movs	r1, #19
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff fedc 	bl	8001b64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001dac:	4603      	mov	r3, r0
 8001dae:	461a      	mov	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	1ad3      	subs	r3, r2, r3
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <_ZN10RFM95_LoRa4readEv>:



int RFM95_LoRa::read(){
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	3308      	adds	r3, #8
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	4798      	blx	r3
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	bf0c      	ite	eq
 8001dd8:	2301      	moveq	r3, #1
 8001dda:	2300      	movne	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <_ZN10RFM95_LoRa4readEv+0x2a>
    return -1;
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295
 8001de6:	e009      	b.n	8001dfc <_ZN10RFM95_LoRa4readEv+0x3e>
  }
  _packetIndex++;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	615a      	str	r2, [r3, #20]
  return readRegister(REG_FIFO);
 8001df2:	2100      	movs	r1, #0
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff feb5 	bl	8001b64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001dfa:	4603      	mov	r3, r0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_ZN10RFM95_LoRa4peekEv>:



int RFM95_LoRa::peek(){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	3308      	adds	r3, #8
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	4798      	blx	r3
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	bf0c      	ite	eq
 8001e1e:	2301      	moveq	r3, #1
 8001e20:	2300      	movne	r3, #0
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <_ZN10RFM95_LoRa4peekEv+0x2a>
    return -1;
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2c:	e013      	b.n	8001e56 <_ZN10RFM95_LoRa4peekEv+0x52>
  }
  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 8001e2e:	210d      	movs	r1, #13
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff fe97 	bl	8001b64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001e36:	4603      	mov	r3, r0
 8001e38:	60fb      	str	r3, [r7, #12]
  // read
  uint8_t b = readRegister(REG_FIFO);
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff fe91 	bl	8001b64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001e42:	4603      	mov	r3, r0
 8001e44:	72fb      	strb	r3, [r7, #11]
  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	210d      	movs	r1, #13
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff fe58 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return b;
 8001e54:	7afb      	ldrb	r3, [r7, #11]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <_ZN10RFM95_LoRa4idleEv>:
    explicitHeaderMode();
  }
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
}

void RFM95_LoRa::idle(){
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001e66:	2281      	movs	r2, #129	; 0x81
 8001e68:	2101      	movs	r1, #1
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff fe4a 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_ZN10RFM95_LoRa5sleepEv>:

void RFM95_LoRa::sleep(){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8001e80:	2280      	movs	r2, #128	; 0x80
 8001e82:	2101      	movs	r1, #1
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff fe3d 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <_ZN10RFM95_LoRa10setTxPowerEii>:



void RFM95_LoRa::setTxPower(int level, int outputPin){
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b084      	sub	sp, #16
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d116      	bne.n	8001ed2 <_ZN10RFM95_LoRa10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	da02      	bge.n	8001eb0 <_ZN10RFM95_LoRa10setTxPowerEii+0x1e>
      level = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	e004      	b.n	8001eba <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
    } else if (level > 14) {
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2b0e      	cmp	r3, #14
 8001eb4:	dd01      	ble.n	8001eba <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
      level = 14;
 8001eb6:	230e      	movs	r3, #14
 8001eb8:	60bb      	str	r3, [r7, #8]
    }
    writeRegister(REG_PA_CONFIG, 0x70 | level);
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	b25b      	sxtb	r3, r3
 8001ebe:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001ec2:	b25b      	sxtb	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2109      	movs	r1, #9
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f7ff fe1a 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
    } else if (level > 17) {
      level = 17;
    }
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 8001ed0:	e018      	b.n	8001f04 <_ZN10RFM95_LoRa10setTxPowerEii+0x72>
    if (level < 2) {
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	dc02      	bgt.n	8001ede <_ZN10RFM95_LoRa10setTxPowerEii+0x4c>
      level = 2;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	e004      	b.n	8001ee8 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
    } else if (level > 17) {
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b11      	cmp	r3, #17
 8001ee2:	dd01      	ble.n	8001ee8 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
      level = 17;
 8001ee4:	2311      	movs	r3, #17
 8001ee6:	60bb      	str	r3, [r7, #8]
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	3b02      	subs	r3, #2
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	b25b      	sxtb	r3, r3
 8001ef2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ef6:	b25b      	sxtb	r3, r3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	2109      	movs	r1, #9
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f7ff fe00 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001f04:	bf00      	nop
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <_ZN10RFM95_LoRa12setFrequencyEl>:



void RFM95_LoRa::setFrequency(long frequency){
 8001f0c:	b5b0      	push	{r4, r5, r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	6838      	ldr	r0, [r7, #0]
 8001f1a:	6108      	str	r0, [r1, #16]
  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8001f1c:	6839      	ldr	r1, [r7, #0]
 8001f1e:	17c8      	asrs	r0, r1, #31
 8001f20:	460a      	mov	r2, r1
 8001f22:	4603      	mov	r3, r0
 8001f24:	1355      	asrs	r5, r2, #13
 8001f26:	04d4      	lsls	r4, r2, #19
 8001f28:	4a1a      	ldr	r2, [pc, #104]	; (8001f94 <_ZN10RFM95_LoRa12setFrequencyEl+0x88>)
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	4620      	mov	r0, r4
 8001f30:	4629      	mov	r1, r5
 8001f32:	f7fe f94b 	bl	80001cc <__aeabi_uldivmod>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8001f3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	f04f 0300 	mov.w	r3, #0
 8001f4a:	0c02      	lsrs	r2, r0, #16
 8001f4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001f50:	0c0b      	lsrs	r3, r1, #16
 8001f52:	b2d3      	uxtb	r3, r2
 8001f54:	461a      	mov	r2, r3
 8001f56:	2106      	movs	r1, #6
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff fdd3 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8001f5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	0a02      	lsrs	r2, r0, #8
 8001f6c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001f70:	0a0b      	lsrs	r3, r1, #8
 8001f72:	b2d3      	uxtb	r3, r2
 8001f74:	461a      	mov	r2, r3
 8001f76:	2107      	movs	r1, #7
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff fdc3 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8001f7e:	7a3b      	ldrb	r3, [r7, #8]
 8001f80:	461a      	mov	r2, r3
 8001f82:	2108      	movs	r1, #8
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fdbd 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bdb0      	pop	{r4, r5, r7, pc}
 8001f92:	bf00      	nop
 8001f94:	01e84800 	.word	0x01e84800

08001f98 <_ZN10RFM95_LoRa18setSpreadingFactorEi>:



void RFM95_LoRa::setSpreadingFactor(int sf){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b05      	cmp	r3, #5
 8001fa6:	dc02      	bgt.n	8001fae <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x16>
    sf = 6;
 8001fa8:	2306      	movs	r3, #6
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	e004      	b.n	8001fb8 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b0c      	cmp	r3, #12
 8001fb2:	dd01      	ble.n	8001fb8 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
    sf = 12;
 8001fb4:	230c      	movs	r3, #12
 8001fb6:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d10a      	bne.n	8001fd4 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 8001fbe:	22c5      	movs	r2, #197	; 0xc5
 8001fc0:	2131      	movs	r1, #49	; 0x31
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff fd9e 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 8001fc8:	220c      	movs	r2, #12
 8001fca:	2137      	movs	r1, #55	; 0x37
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff fd99 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
 8001fd2:	e009      	b.n	8001fe8 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 8001fd4:	22c3      	movs	r2, #195	; 0xc3
 8001fd6:	2131      	movs	r1, #49	; 0x31
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff fd93 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 8001fde:	220a      	movs	r2, #10
 8001fe0:	2137      	movs	r1, #55	; 0x37
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fd8e 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 8001fe8:	211e      	movs	r1, #30
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff fdba 	bl	8001b64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	b25b      	sxtb	r3, r3
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	b25a      	sxtb	r2, r3
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	b25b      	sxtb	r3, r3
 8002000:	4313      	orrs	r3, r2
 8002002:	b25b      	sxtb	r3, r3
 8002004:	b2db      	uxtb	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	211e      	movs	r1, #30
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff fd7a 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <_ZN10RFM95_LoRa18setSignalBandwidthEl>:


void RFM95_LoRa::setSignalBandwidth(long sbw){
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  int bw;
  if (sbw <= 7.8E3) {
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	f641 6278 	movw	r2, #7800	; 0x1e78
 8002028:	4293      	cmp	r3, r2
 800202a:	dc02      	bgt.n	8002032 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x1a>
    bw = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	e03f      	b.n	80020b2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 10.4E3) {
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8002038:	4293      	cmp	r3, r2
 800203a:	dc02      	bgt.n	8002042 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x2a>
    bw = 1;
 800203c:	2301      	movs	r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	e037      	b.n	80020b2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 15.6E3) {
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 8002048:	4293      	cmp	r3, r2
 800204a:	dc02      	bgt.n	8002052 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x3a>
    bw = 2;
 800204c:	2302      	movs	r3, #2
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	e02f      	b.n	80020b2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 20.8E3) {
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	f245 1240 	movw	r2, #20800	; 0x5140
 8002058:	4293      	cmp	r3, r2
 800205a:	dc02      	bgt.n	8002062 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x4a>
    bw = 3;
 800205c:	2303      	movs	r3, #3
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	e027      	b.n	80020b2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 31.25E3) {
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	f647 2212 	movw	r2, #31250	; 0x7a12
 8002068:	4293      	cmp	r3, r2
 800206a:	dc02      	bgt.n	8002072 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x5a>
    bw = 4;
 800206c:	2304      	movs	r3, #4
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	e01f      	b.n	80020b2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 41.7E3) {
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 8002078:	4293      	cmp	r3, r2
 800207a:	dc02      	bgt.n	8002082 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x6a>
    bw = 5;
 800207c:	2305      	movs	r3, #5
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	e017      	b.n	80020b2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 62.5E3) {
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002088:	4293      	cmp	r3, r2
 800208a:	dc02      	bgt.n	8002092 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x7a>
    bw = 6;
 800208c:	2306      	movs	r3, #6
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	e00f      	b.n	80020b2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 125E3) {
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	4a13      	ldr	r2, [pc, #76]	; (80020e4 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xcc>)
 8002096:	4293      	cmp	r3, r2
 8002098:	dc02      	bgt.n	80020a0 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x88>
    bw = 7;
 800209a:	2307      	movs	r3, #7
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	e008      	b.n	80020b2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 250E3) {
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	4a11      	ldr	r2, [pc, #68]	; (80020e8 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xd0>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	dc02      	bgt.n	80020ae <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x96>
    bw = 8;
 80020a8:	2308      	movs	r3, #8
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	e001      	b.n	80020b2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 80020ae:	2309      	movs	r3, #9
 80020b0:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 80020b2:	211d      	movs	r1, #29
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff fd55 	bl	8001b64 <_ZN10RFM95_LoRa12readRegisterEh>
 80020ba:	4603      	mov	r3, r0
 80020bc:	b25b      	sxtb	r3, r3
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	b25a      	sxtb	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	b25b      	sxtb	r3, r3
 80020ca:	4313      	orrs	r3, r2
 80020cc:	b25b      	sxtb	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	211d      	movs	r1, #29
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff fd15 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	0001e848 	.word	0x0001e848
 80020e8:	0003d090 	.word	0x0003d090

080020ec <_ZN10RFM95_LoRa14setCodingRate4Ei>:



void RFM95_LoRa::setCodingRate4(int denominator){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  if (denominator < 5) {
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	dc02      	bgt.n	8002102 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x16>
    denominator = 5;
 80020fc:	2305      	movs	r3, #5
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	e004      	b.n	800210c <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
  } else if (denominator > 8) {
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	2b08      	cmp	r3, #8
 8002106:	dd01      	ble.n	800210c <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
	  denominator = 8;
 8002108:	2308      	movs	r3, #8
 800210a:	603b      	str	r3, [r7, #0]
  }
  int cr = denominator - 4;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	3b04      	subs	r3, #4
 8002110:	60fb      	str	r3, [r7, #12]
  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 8002112:	211d      	movs	r1, #29
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff fd25 	bl	8001b64 <_ZN10RFM95_LoRa12readRegisterEh>
 800211a:	4603      	mov	r3, r0
 800211c:	b25b      	sxtb	r3, r3
 800211e:	f023 030e 	bic.w	r3, r3, #14
 8002122:	b25a      	sxtb	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	b25b      	sxtb	r3, r3
 800212a:	4313      	orrs	r3, r2
 800212c:	b25b      	sxtb	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	211d      	movs	r1, #29
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff fce5 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <_ZN10RFM95_LoRa18explicitHeaderModeEv>:
uint8_t RFM95_LoRa::random(){
  return readRegister(REG_RSSI_WIDEBAND);
}


void RFM95_LoRa::explicitHeaderMode(){
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8002150:	211d      	movs	r1, #29
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff fd06 	bl	8001b64 <_ZN10RFM95_LoRa12readRegisterEh>
 8002158:	4603      	mov	r3, r0
 800215a:	f023 0301 	bic.w	r3, r3, #1
 800215e:	b2db      	uxtb	r3, r3
 8002160:	461a      	mov	r2, r3
 8002162:	211d      	movs	r1, #29
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff fccd 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <_ZN10RFM95_LoRa18implicitHeaderModeEv>:


void RFM95_LoRa::implicitHeaderMode(){
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8002180:	211d      	movs	r1, #29
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff fcee 	bl	8001b64 <_ZN10RFM95_LoRa12readRegisterEh>
 8002188:	4603      	mov	r3, r0
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	b2db      	uxtb	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	211d      	movs	r1, #29
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff fcb5 	bl	8001b04 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <_ZN10RFM95_LoRa7InitRFMEv>:
    writeRegister(REG_FIFO_ADDR_PTR, 0);
  }
}


bool RFM95_LoRa::InitRFM(){
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]


	setFrequency(868000000);
 80021ac:	4914      	ldr	r1, [pc, #80]	; (8002200 <_ZN10RFM95_LoRa7InitRFMEv+0x5c>)
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff feac 	bl	8001f0c <_ZN10RFM95_LoRa12setFrequencyEl>
	setTxPower(17, PA_OUTPUT_PA_BOOST_PIN);
 80021b4:	2201      	movs	r2, #1
 80021b6:	2111      	movs	r1, #17
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff fe6a 	bl	8001e92 <_ZN10RFM95_LoRa10setTxPowerEii>
	setSignalBandwidth(31.25E3);
 80021be:	f647 2112 	movw	r1, #31250	; 0x7a12
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ff28 	bl	8002018 <_ZN10RFM95_LoRa18setSignalBandwidthEl>
	setSpreadingFactor(12);
 80021c8:	210c      	movs	r1, #12
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff fee4 	bl	8001f98 <_ZN10RFM95_LoRa18setSpreadingFactorEi>
	setCodingRate4(5);
 80021d0:	2105      	movs	r1, #5
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff ff8a 	bl	80020ec <_ZN10RFM95_LoRa14setCodingRate4Ei>
	if (!begin(866E6)) {
 80021d8:	490a      	ldr	r1, [pc, #40]	; (8002204 <_ZN10RFM95_LoRa7InitRFMEv+0x60>)
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff fce4 	bl	8001ba8 <_ZN10RFM95_LoRa5beginEl>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	bf0c      	ite	eq
 80021e6:	2301      	moveq	r3, #1
 80021e8:	2300      	movne	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <_ZN10RFM95_LoRa7InitRFMEv+0x50>
		return false;
 80021f0:	2300      	movs	r3, #0
 80021f2:	e000      	b.n	80021f6 <_ZN10RFM95_LoRa7InitRFMEv+0x52>
	}
	return true;
 80021f4:	2301      	movs	r3, #1
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	33bca100 	.word	0x33bca100
 8002204:	339e1c80 	.word	0x339e1c80

08002208 <_ZNK13DriveSettings16getClampingSpeedEv>:

/****************************************************************************************
 / * 	Clamping speed get/set
 ****************************************************************************************/
uint16_t DriveSettings::getClampingSpeed() const
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	return clampingSpeed;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	891b      	ldrh	r3, [r3, #8]
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <_ZN13DriveSettings16setClampingSpeedEt>:

void DriveSettings::setClampingSpeed(uint16_t clampingSpeed)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	807b      	strh	r3, [r7, #2]
	this->clampingSpeed = clampingSpeed;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	887a      	ldrh	r2, [r7, #2]
 8002230:	811a      	strh	r2, [r3, #8]
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <_ZNK13DriveSettings17getClampingTorqueEv>:

/****************************************************************************************
 / * 	Clamping torque get/set
 ****************************************************************************************/
uint16_t DriveSettings::getClampingTorque() const
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
	return clampingTorque;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	889b      	ldrh	r3, [r3, #4]
}
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <_ZN13DriveSettings17setClampingTorqueEt>:

void DriveSettings::setClampingTorque(uint16_t clampingTorque)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	460b      	mov	r3, r1
 8002260:	807b      	strh	r3, [r7, #2]
	this->clampingTorque = clampingTorque;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	887a      	ldrh	r2, [r7, #2]
 8002266:	809a      	strh	r2, [r3, #4]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <_ZNK13DriveSettings12getInPosDiffEv>:

/****************************************************************************************
 / * 	clamping position difference get/set
 ****************************************************************************************/
uint16_t DriveSettings::getInPosDiff() const
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
	return inPosDiff;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	899b      	ldrh	r3, [r3, #12]
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <_ZN13DriveSettings12setInPosDiffEt>:

void DriveSettings::setInPosDiff(uint16_t inPosDiff)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	807b      	strh	r3, [r7, #2]
	this->inPosDiff = inPosDiff;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	887a      	ldrh	r2, [r7, #2]
 800229c:	819a      	strh	r2, [r3, #12]
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <_ZNK13DriveSettings18getOpeningDistanceEv>:

/****************************************************************************************
 / * 	opening distance get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOpeningDistance() const
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
	return openingDistance;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	89db      	ldrh	r3, [r3, #14]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <_ZN13DriveSettings18setOpeningDistanceEt>:

void DriveSettings::setOpeningDistance(uint16_t openingDistance)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	460b      	mov	r3, r1
 80022cc:	807b      	strh	r3, [r7, #2]
	this->openingDistance = openingDistance;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	887a      	ldrh	r2, [r7, #2]
 80022d2:	81da      	strh	r2, [r3, #14]
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <_ZNK13DriveSettings21getOverCurrentWarningEv>:

/****************************************************************************************
 / * 	overcurrent warning get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOverCurrentWarning() const
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
	return overCurrentWarning;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	8a9b      	ldrh	r3, [r3, #20]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <_ZN13DriveSettings21setOverCurrentWarningEt>:

void DriveSettings::setOverCurrentWarning(uint16_t overCurrentWarning)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	807b      	strh	r3, [r7, #2]
	this->overCurrentWarning = overCurrentWarning;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	887a      	ldrh	r2, [r7, #2]
 8002308:	829a      	strh	r2, [r3, #20]
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <_ZNK13DriveSettings20getSelfShutdownDelayEv>:

/****************************************************************************************
 / * 	self shutdown delay get/set
 ****************************************************************************************/
uint16_t DriveSettings::getSelfShutdownDelay() const
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
	return selfShutdownDelay;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	895b      	ldrh	r3, [r3, #10]
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <_ZN13DriveSettings20setSelfShutdownDelayEt>:

void DriveSettings::setSelfShutdownDelay(uint16_t selfShutdownDelay)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	460b      	mov	r3, r1
 8002338:	807b      	strh	r3, [r7, #2]
	this->selfShutdownDelay = selfShutdownDelay;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	887a      	ldrh	r2, [r7, #2]
 800233e:	815a      	strh	r2, [r3, #10]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <_ZNK13DriveSettings13getTeachSpeedEv>:

/****************************************************************************************
 / * 	teach speed get/set
 ****************************************************************************************/
uint16_t DriveSettings::getTeachSpeed() const
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	return teachSpeed;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	88db      	ldrh	r3, [r3, #6]
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <_ZN13DriveSettings13setTeachSpeedEt>:

void DriveSettings::setTeachSpeed(uint16_t teachSpeed)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	807b      	strh	r3, [r7, #2]
	this->teachSpeed = teachSpeed;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	887a      	ldrh	r2, [r7, #2]
 8002374:	80da      	strh	r2, [r3, #6]
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <_ZNK13DriveSettings14getTeachTroqueEv>:

/****************************************************************************************
 / * 	teach torque get/set
 ****************************************************************************************/
uint16_t DriveSettings::getTeachTroque() const
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
	return teachTroque;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	885b      	ldrh	r3, [r3, #2]
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <_ZN13DriveSettings14setTeachTroqueEt>:

void DriveSettings::setTeachTroque(uint16_t teachTroque)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	807b      	strh	r3, [r7, #2]
	this->teachTroque = teachTroque;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	887a      	ldrh	r2, [r7, #2]
 80023aa:	805a      	strh	r2, [r3, #2]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <_ZNK13DriveSettings20getUnderVoltageErrorEv>:

/****************************************************************************************
 / * 	undervoltage error get/set
 ****************************************************************************************/
uint16_t DriveSettings::getUnderVoltageError() const
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	return underVoltageError;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	8a5b      	ldrh	r3, [r3, #18]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <_ZN13DriveSettings20setUnderVoltageErrorEt>:

void DriveSettings::setUnderVoltageError(uint16_t underVoltageError)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	807b      	strh	r3, [r7, #2]
	this->underVoltageError = underVoltageError;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	887a      	ldrh	r2, [r7, #2]
 80023e0:	825a      	strh	r2, [r3, #18]
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <_ZNK13DriveSettings22getUnderVoltageWarningEv>:

/****************************************************************************************
 / * 	undervoltage warning get/set
 ****************************************************************************************/
uint16_t DriveSettings::getUnderVoltageWarning() const
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
	return underVoltageWarning;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	8a1b      	ldrh	r3, [r3, #16]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <_ZN13DriveSettings22setUnderVoltageWarningEt>:

void DriveSettings::setUnderVoltageWarning(uint16_t underVoltageWarning)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	460b      	mov	r3, r1
 8002410:	807b      	strh	r3, [r7, #2]
	this->underVoltageWarning = underVoltageWarning;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	887a      	ldrh	r2, [r7, #2]
 8002416:	821a      	strh	r2, [r3, #16]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <_ZNK13DriveSettings19getOverCurrentErrorEv>:

/****************************************************************************************
 / * 	overcurrent error get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOverCurrentError() const
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	return overCurrentError;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	8adb      	ldrh	r3, [r3, #22]
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <_ZN13DriveSettings19setOverCurrentErrorEt>:

void DriveSettings::setOverCurrentError(uint16_t overCurrentError)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	807b      	strh	r3, [r7, #2]
	this->overCurrentError = overCurrentError;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	887a      	ldrh	r2, [r7, #2]
 800244c:	82da      	strh	r2, [r3, #22]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <_ZNK13DriveSettings16getDeviceAddressEv>:

/****************************************************************************************
 / * 	device address get/set
 ****************************************************************************************/
uint8_t DriveSettings::getDeviceAddress() const
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
	return deviceAddress;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	781b      	ldrb	r3, [r3, #0]
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <_ZN12DriveCommandC1Ev>:
 */

#include "DriveCommand.h"


DriveCommand::DriveCommand()
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	705a      	strb	r2, [r3, #1]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	709a      	strb	r2, [r3, #2]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	70da      	strb	r2, [r3, #3]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	711a      	strb	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	715a      	strb	r2, [r3, #5]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	719a      	strb	r2, [r3, #6]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	71da      	strb	r2, [r3, #7]
{
}
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <_ZN12DriveCommand7isCloseEv>:

/****************************************************************************************
 / * 	close get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isClose()
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	bool closeTemp = close;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	73fb      	strb	r3, [r7, #15]
	close = false;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
	return closeTemp;
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <_ZN12DriveCommand8setCloseEb>:

void DriveCommand::setClose(bool close)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	460b      	mov	r3, r1
 80024e4:	70fb      	strb	r3, [r7, #3]
	this->close = close;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	78fa      	ldrb	r2, [r7, #3]
 80024ea:	701a      	strb	r2, [r3, #0]
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <_ZN12DriveCommand6isOpenEv>:

/****************************************************************************************
 / * 	open get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isOpen()
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	bool openTemp = open;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	785b      	ldrb	r3, [r3, #1]
 8002504:	73fb      	strb	r3, [r7, #15]
	open = false;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	705a      	strb	r2, [r3, #1]
	return openTemp;
 800250c:	7bfb      	ldrb	r3, [r7, #15]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <_ZN12DriveCommand7setOpenEb>:

void DriveCommand::setOpen(bool open)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	460b      	mov	r3, r1
 8002524:	70fb      	strb	r3, [r7, #3]
	this->open = open;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	705a      	strb	r2, [r3, #1]
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <_ZN12DriveCommand9isDisableEv>:

/****************************************************************************************
 / * 	disable get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isDisable()
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	bool disableTemp = disable;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	799b      	ldrb	r3, [r3, #6]
 8002544:	73fb      	strb	r3, [r7, #15]
	disable = false;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	719a      	strb	r2, [r3, #6]
	return disableTemp;
 800254c:	7bfb      	ldrb	r3, [r7, #15]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <_ZN12DriveCommand10setDisableEb>:

void DriveCommand::setDisable(bool disable)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	460b      	mov	r3, r1
 8002564:	70fb      	strb	r3, [r7, #3]
	this->disable = disable;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	719a      	strb	r2, [r3, #6]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <_ZN12DriveCommand8isEnableEv>:

/****************************************************************************************
 / * 	enable get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isEnable()
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
	bool enableTemp = enable;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	791b      	ldrb	r3, [r3, #4]
 8002584:	73fb      	strb	r3, [r7, #15]
	enable = false;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	711a      	strb	r2, [r3, #4]
	return enableTemp;
 800258c:	7bfb      	ldrb	r3, [r7, #15]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <_ZN12DriveCommand9setEnableEb>:

void DriveCommand::setEnable(bool enable)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	460b      	mov	r3, r1
 80025a4:	70fb      	strb	r3, [r7, #3]
	this->enable = enable;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	711a      	strb	r2, [r3, #4]
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <_ZN12DriveCommand7isResetEv>:

/****************************************************************************************
 / * 	reset get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isReset()
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	bool resetTemp = reset;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	78db      	ldrb	r3, [r3, #3]
 80025c4:	73fb      	strb	r3, [r7, #15]
	reset = false;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	70da      	strb	r2, [r3, #3]
	return resetTemp;
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <_ZN12DriveCommand8setResetEb>:

void DriveCommand::setReset(bool reset)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	460b      	mov	r3, r1
 80025e4:	70fb      	strb	r3, [r7, #3]
	this->reset = reset;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	78fa      	ldrb	r2, [r7, #3]
 80025ea:	70da      	strb	r2, [r3, #3]
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <_ZN12DriveCommand6isStopEv>:

/****************************************************************************************
* 	stop get/set (read reset)
****************************************************************************************/
bool DriveCommand::isStop()
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	bool stopTemp = stop;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	795b      	ldrb	r3, [r3, #5]
 8002604:	73fb      	strb	r3, [r7, #15]
	stop = false;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	715a      	strb	r2, [r3, #5]
	return stopTemp;
 800260c:	7bfb      	ldrb	r3, [r7, #15]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <_ZN12DriveCommand7setStopEb>:

void DriveCommand::setStop(bool stop)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	460b      	mov	r3, r1
 8002624:	70fb      	strb	r3, [r7, #3]
	this->stop = stop;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	715a      	strb	r2, [r3, #5]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <_ZN12DriveCommand7isTeachEv>:

/****************************************************************************************
* 	teach get/set (read reset)
****************************************************************************************/
bool DriveCommand::isTeach()
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
	bool teachTemp = teach;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	789b      	ldrb	r3, [r3, #2]
 8002644:	73fb      	strb	r3, [r7, #15]
	teach = false;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	709a      	strb	r2, [r3, #2]
	return teachTemp;
 800264c:	7bfb      	ldrb	r3, [r7, #15]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <_ZN12DriveCommand8setTeachEb>:

void DriveCommand::setTeach(bool teach)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	460b      	mov	r3, r1
 8002664:	70fb      	strb	r3, [r7, #3]
	this->teach = teach;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	78fa      	ldrb	r2, [r7, #3]
 800266a:	709a      	strb	r2, [r3, #2]
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <_ZN12DriveCommand13isWriteConfigEv>:

/****************************************************************************************
* 	write config get/set (read reset)
****************************************************************************************/
bool DriveCommand::isWriteConfig()
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	bool writeConfigTemp = writeConfig;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	79db      	ldrb	r3, [r3, #7]
 8002684:	73fb      	strb	r3, [r7, #15]
	writeConfig = false;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	71da      	strb	r2, [r3, #7]
	return writeConfigTemp;
 800268c:	7bfb      	ldrb	r3, [r7, #15]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <_ZN11DriveStatusC1Ev>:
 *      Author: marce
 */

#include "DriveStatus.h"

DriveStatus::DriveStatus()
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
{
}
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <_ZN11DriveStatus7isCloseEv>:

/****************************************************************************************
 / * 	close get/set
 ****************************************************************************************/
bool DriveStatus::isClose()
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
	return close;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	785b      	ldrb	r3, [r3, #1]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <_ZN11DriveStatus8setCloseEb>:

void DriveStatus::setClose(bool close)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	70fb      	strb	r3, [r7, #3]
	this->close = close;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	705a      	strb	r2, [r3, #1]
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <_ZN11DriveStatus6isOpenEv>:

/****************************************************************************************
 / * 	open get/set
 ****************************************************************************************/
bool DriveStatus::isOpen()
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
	return open;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	789b      	ldrb	r3, [r3, #2]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <_ZN11DriveStatus7setOpenEb>:

void DriveStatus::setOpen(bool open)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	460b      	mov	r3, r1
 8002708:	70fb      	strb	r3, [r7, #3]
	this->open = open;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	78fa      	ldrb	r2, [r7, #3]
 800270e:	709a      	strb	r2, [r3, #2]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <_ZN11DriveStatus9isDisableEv>:

/****************************************************************************************
 / * 	disable get/set
 ****************************************************************************************/
bool DriveStatus::isDisable()
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
	return disable;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	79db      	ldrb	r3, [r3, #7]
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <_ZN11DriveStatus10setDisableEb>:

void DriveStatus::setDisable(bool disable)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	70fb      	strb	r3, [r7, #3]
	this->disable = disable;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	71da      	strb	r2, [r3, #7]
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <_ZN11DriveStatus8isEnableEv>:

/****************************************************************************************
 / * 	enable get/set
 ****************************************************************************************/
bool DriveStatus::isEnable()
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
	return enable;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	795b      	ldrb	r3, [r3, #5]
}
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <_ZN11DriveStatus9setEnableEb>:

void DriveStatus::setEnable(bool enable)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	460b      	mov	r3, r1
 8002774:	70fb      	strb	r3, [r7, #3]
	this->enable = enable;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	78fa      	ldrb	r2, [r7, #3]
 800277a:	715a      	strb	r2, [r3, #5]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <_ZN11DriveStatus7isResetEv>:

/****************************************************************************************
 / * 	reset get/set
 ****************************************************************************************/
bool DriveStatus::isReset()
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
	return reset;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	791b      	ldrb	r3, [r3, #4]
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <_ZN11DriveStatus8setResetEb>:

void DriveStatus::setReset(bool reset)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	70fb      	strb	r3, [r7, #3]
	this->reset = reset;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	78fa      	ldrb	r2, [r7, #3]
 80027b0:	711a      	strb	r2, [r3, #4]
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <_ZN11DriveStatus6isStopEv>:

/****************************************************************************************
 / * 	stop get/set
 /****************************************************************************************/
bool DriveStatus::isStop()
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
	return stop;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	799b      	ldrb	r3, [r3, #6]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <_ZN11DriveStatus7setStopEb>:

void DriveStatus::setStop(bool stop)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	460b      	mov	r3, r1
 80027e0:	70fb      	strb	r3, [r7, #3]
	this->stop = stop;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	78fa      	ldrb	r2, [r7, #3]
 80027e6:	719a      	strb	r2, [r3, #6]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <_ZN11DriveStatus7isTeachEv>:

/****************************************************************************************
 / * 	teach get/set
 /****************************************************************************************/
bool DriveStatus::isTeach()
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
	return teach;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	78db      	ldrb	r3, [r3, #3]
}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <_ZN11DriveStatus8setTeachEb>:

void DriveStatus::setTeach(bool teach)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	70fb      	strb	r3, [r7, #3]
	this->teach = teach;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	70da      	strb	r2, [r3, #3]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <_ZN11TaskHandler11UpdateTasksEv>:

#include "TaskHandler.h"
#include "gpio.h"

//update tasks, should be called every 1ms
void TaskHandler::UpdateTasks() {
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

	//1ms

	//2ms
	if(counter % 2 == 0){
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	895b      	ldrh	r3, [r3, #10]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d102      	bne.n	8002846 <_ZN11TaskHandler11UpdateTasksEv+0x1a>
		adcUpdateTask = true;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	70da      	strb	r2, [r3, #3]
	}


	//15ms
	if(counter % 15 == 0){
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	895a      	ldrh	r2, [r3, #10]
 800284a:	4b24      	ldr	r3, [pc, #144]	; (80028dc <_ZN11TaskHandler11UpdateTasksEv+0xb0>)
 800284c:	fba3 1302 	umull	r1, r3, r3, r2
 8002850:	08d9      	lsrs	r1, r3, #3
 8002852:	460b      	mov	r3, r1
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	1a5b      	subs	r3, r3, r1
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	b29b      	uxth	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d102      	bne.n	8002866 <_ZN11TaskHandler11UpdateTasksEv+0x3a>
		ioUpdateTask = true;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	709a      	strb	r2, [r3, #2]
	}



	//100ms
	if(counter % 100 == 0){
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	895b      	ldrh	r3, [r3, #10]
 800286a:	4a1d      	ldr	r2, [pc, #116]	; (80028e0 <_ZN11TaskHandler11UpdateTasksEv+0xb4>)
 800286c:	fba2 1203 	umull	r1, r2, r2, r3
 8002870:	0952      	lsrs	r2, r2, #5
 8002872:	2164      	movs	r1, #100	; 0x64
 8002874:	fb01 f202 	mul.w	r2, r1, r2
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d102      	bne.n	8002886 <_ZN11TaskHandler11UpdateTasksEv+0x5a>
		errorTask = true;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	701a      	strb	r2, [r3, #0]
	}


	//500ms
	if(counter % 500 == 0){
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	895b      	ldrh	r3, [r3, #10]
 800288a:	4a16      	ldr	r2, [pc, #88]	; (80028e4 <_ZN11TaskHandler11UpdateTasksEv+0xb8>)
 800288c:	fba2 1203 	umull	r1, r2, r2, r3
 8002890:	0952      	lsrs	r2, r2, #5
 8002892:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002896:	fb01 f202 	mul.w	r2, r1, r2
 800289a:	1a9b      	subs	r3, r3, r2
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d105      	bne.n	80028ae <_ZN11TaskHandler11UpdateTasksEv+0x82>
		ledUpdateTask = true;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	711a      	strb	r2, [r3, #4]
		comTask = true;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	705a      	strb	r2, [r3, #1]
	}



	//increment counter
	if(counter > 2999){
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	895b      	ldrh	r3, [r3, #10]
 80028b2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d903      	bls.n	80028c2 <_ZN11TaskHandler11UpdateTasksEv+0x96>
		counter = 1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	815a      	strh	r2, [r3, #10]
	}else{
		counter++;
	}

}
 80028c0:	e005      	b.n	80028ce <_ZN11TaskHandler11UpdateTasksEv+0xa2>
		counter++;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	895b      	ldrh	r3, [r3, #10]
 80028c6:	3301      	adds	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	815a      	strh	r2, [r3, #10]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	88888889 	.word	0x88888889
 80028e0:	51eb851f 	.word	0x51eb851f
 80028e4:	10624dd3 	.word	0x10624dd3

080028e8 <_ZN11TaskHandler9isComTaskEv>:



bool TaskHandler::isComTask()  {
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	bool comTaskTemp = (comTask & comTaskEnable);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	785b      	ldrb	r3, [r3, #1]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	461a      	mov	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	799b      	ldrb	r3, [r3, #6]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	4013      	ands	r3, r2
 8002900:	2b00      	cmp	r3, #0
 8002902:	bf14      	ite	ne
 8002904:	2301      	movne	r3, #1
 8002906:	2300      	moveq	r3, #0
 8002908:	73fb      	strb	r3, [r7, #15]
	comTask = false;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	705a      	strb	r2, [r3, #1]
	return comTaskTemp;
 8002910:	7bfb      	ldrb	r3, [r7, #15]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <_ZN11TaskHandler11isErrorTaskEv>:


bool TaskHandler::isErrorTask()  {
 800291e:	b480      	push	{r7}
 8002920:	b085      	sub	sp, #20
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
	bool errorTaskTemp = (errorTask & errorTaskEnable);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	461a      	mov	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	795b      	ldrb	r3, [r3, #5]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	4013      	ands	r3, r2
 8002936:	2b00      	cmp	r3, #0
 8002938:	bf14      	ite	ne
 800293a:	2301      	movne	r3, #1
 800293c:	2300      	moveq	r3, #0
 800293e:	73fb      	strb	r3, [r7, #15]
	errorTask = false;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
	return errorTaskTemp;
 8002946:	7bfb      	ldrb	r3, [r7, #15]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <_ZN11TaskHandler14isIoUpdateTaskEv>:

bool TaskHandler::isIoUpdateTask()  {
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
	bool ioUpdateTaskTemp = (ioUpdateTask & ioUpdateTaskEnable);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	789b      	ldrb	r3, [r3, #2]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	461a      	mov	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	79db      	ldrb	r3, [r3, #7]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	4013      	ands	r3, r2
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf14      	ite	ne
 8002970:	2301      	movne	r3, #1
 8002972:	2300      	moveq	r3, #0
 8002974:	73fb      	strb	r3, [r7, #15]
	ioUpdateTask = false;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	709a      	strb	r2, [r3, #2]
	return ioUpdateTaskTemp;
 800297c:	7bfb      	ldrb	r3, [r7, #15]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <_ZN11TaskHandler15isLEDUpdateTaskEv>:
	adcUpdateTask = false;
	return adcUpdateTaskTemp;
}


bool TaskHandler::isLEDUpdateTask(){
 800298a:	b480      	push	{r7}
 800298c:	b085      	sub	sp, #20
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
	bool ledUpdateTaskTemp = (ledUpdateTask & ledUpdateTaskEnable);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	791b      	ldrb	r3, [r3, #4]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	7a5b      	ldrb	r3, [r3, #9]
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	bf14      	ite	ne
 80029a6:	2301      	movne	r3, #1
 80029a8:	2300      	moveq	r3, #0
 80029aa:	73fb      	strb	r3, [r7, #15]
	ledUpdateTask = false;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	711a      	strb	r2, [r3, #4]
	return ledUpdateTaskTemp;
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <_ZN5Delay8DWT_InitEv>:


/*
 * Mikrosenkunden delay Initialisieren
 */
void Delay::DWT_Init(void) {
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80029c4:	4b09      	ldr	r3, [pc, #36]	; (80029ec <_ZN5Delay8DWT_InitEv+0x2c>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4a08      	ldr	r2, [pc, #32]	; (80029ec <_ZN5Delay8DWT_InitEv+0x2c>)
 80029ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ce:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 80029d0:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <_ZN5Delay8DWT_InitEv+0x30>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80029d6:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <_ZN5Delay8DWT_InitEv+0x30>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a05      	ldr	r2, [pc, #20]	; (80029f0 <_ZN5Delay8DWT_InitEv+0x30>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	6013      	str	r3, [r2, #0]
}
 80029e2:	bf00      	nop
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	e000edf0 	.word	0xe000edf0
 80029f0:	e0001000 	.word	0xe0001000

080029f4 <_ZN5Delay12DWT_Delay_usEm>:

/*
 * Mikrosenkunden delay für Push-Pull ansteuerung
 */
void Delay::DWT_Delay_us(volatile uint32_t microseconds) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 80029fc:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <_ZN5Delay12DWT_Delay_usEm+0x48>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	60fb      	str	r3, [r7, #12]
	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002a02:	f005 fae7 	bl	8007fd4 <HAL_RCC_GetHCLKFreq>
 8002a06:	4603      	mov	r3, r0
 8002a08:	4a0d      	ldr	r2, [pc, #52]	; (8002a40 <_ZN5Delay12DWT_Delay_usEm+0x4c>)
 8002a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0e:	0c9b      	lsrs	r3, r3, #18
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	fb02 f303 	mul.w	r3, r2, r3
 8002a16:	607b      	str	r3, [r7, #4]
	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002a18:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <_ZN5Delay12DWT_Delay_usEm+0x48>)
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1ad2      	subs	r2, r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	bf34      	ite	cc
 8002a26:	2301      	movcc	r3, #1
 8002a28:	2300      	movcs	r3, #0
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d000      	beq.n	8002a32 <_ZN5Delay12DWT_Delay_usEm+0x3e>
 8002a30:	e7f2      	b.n	8002a18 <_ZN5Delay12DWT_Delay_usEm+0x24>
}
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	e0001000 	.word	0xe0001000
 8002a40:	431bde83 	.word	0x431bde83

08002a44 <_ZN5Queue7EnqueueEh>:
 *
 * @param data to push in queue
 * @return none
 */
void Queue::Enqueue(uint8_t data)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	70fb      	strb	r3, [r7, #3]
	//push data to buffer
	buffer[enqueuePointer] = data;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	461a      	mov	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	78fa      	ldrb	r2, [r7, #3]
 8002a5c:	709a      	strb	r2, [r3, #2]

	if (dequeuePointer == 0 && enqueuePointer == BUFFER_SIZE - 1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	785b      	ldrb	r3, [r3, #1]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10d      	bne.n	8002a82 <_ZN5Queue7EnqueueEh+0x3e>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b09      	cmp	r3, #9
 8002a6c:	d109      	bne.n	8002a82 <_ZN5Queue7EnqueueEh+0x3e>
	{
		dequeuePointer++;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	785b      	ldrb	r3, [r3, #1]
 8002a72:	3301      	adds	r3, #1
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	705a      	strb	r2, [r3, #1]
		enqueuePointer = 0;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	e038      	b.n	8002af4 <_ZN5Queue7EnqueueEh+0xb0>
	}
	else if (dequeuePointer == BUFFER_SIZE - 1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	785b      	ldrb	r3, [r3, #1]
 8002a86:	2b09      	cmp	r3, #9
 8002a88:	d111      	bne.n	8002aae <_ZN5Queue7EnqueueEh+0x6a>
			&& enqueuePointer == dequeuePointer - 1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	785b      	ldrb	r3, [r3, #1]
 8002a94:	3b01      	subs	r3, #1
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d109      	bne.n	8002aae <_ZN5Queue7EnqueueEh+0x6a>
	{
		dequeuePointer = 0;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	705a      	strb	r2, [r3, #1]
		enqueuePointer++;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	701a      	strb	r2, [r3, #0]
 8002aac:	e022      	b.n	8002af4 <_ZN5Queue7EnqueueEh+0xb0>
	}
	else if (enqueuePointer + 1 == dequeuePointer)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	7852      	ldrb	r2, [r2, #1]
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d10c      	bne.n	8002ad6 <_ZN5Queue7EnqueueEh+0x92>
	{
		dequeuePointer++;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	785b      	ldrb	r3, [r3, #1]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	705a      	strb	r2, [r3, #1]
		enqueuePointer++;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	3301      	adds	r3, #1
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		enqueuePointer++;
	}
}
 8002ad4:	e00e      	b.n	8002af4 <_ZN5Queue7EnqueueEh+0xb0>
	else if (enqueuePointer == BUFFER_SIZE - 1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b09      	cmp	r3, #9
 8002adc:	d103      	bne.n	8002ae6 <_ZN5Queue7EnqueueEh+0xa2>
		enqueuePointer = 0;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
}
 8002ae4:	e006      	b.n	8002af4 <_ZN5Queue7EnqueueEh+0xb0>
		enqueuePointer++;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	3301      	adds	r3, #1
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	701a      	strb	r2, [r3, #0]
}
 8002af2:	e7ff      	b.n	8002af4 <_ZN5Queue7EnqueueEh+0xb0>
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <_ZN5Queue7DequeueEv>:
 *
 * @param none
 * @return data at actual dequeue position
 */
uint8_t Queue::Dequeue()
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
	//return 0 if queue is empty
	if (IsEmpty())
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f81e 	bl	8002b4a <_ZN5Queue7IsEmptyEv>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <_ZN5Queue7DequeueEv+0x18>
	{
		return 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e014      	b.n	8002b42 <_ZN5Queue7DequeueEv+0x42>
	}
	//get acutal dequeue pointer
	uint8_t dequeuePointerTemp = dequeuePointer;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	785b      	ldrb	r3, [r3, #1]
 8002b1c:	73fb      	strb	r3, [r7, #15]

	//incfement dequeuePointer, set to 0 if queue overflow occures
	if (dequeuePointer == BUFFER_SIZE - 1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	785b      	ldrb	r3, [r3, #1]
 8002b22:	2b09      	cmp	r3, #9
 8002b24:	d103      	bne.n	8002b2e <_ZN5Queue7DequeueEv+0x2e>
	{
		dequeuePointer = 0;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	705a      	strb	r2, [r3, #1]
 8002b2c:	e005      	b.n	8002b3a <_ZN5Queue7DequeueEv+0x3a>
	}
	else
	{
		dequeuePointer++;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	785b      	ldrb	r3, [r3, #1]
 8002b32:	3301      	adds	r3, #1
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	705a      	strb	r2, [r3, #1]
	}
	//return queue data
	return buffer[dequeuePointerTemp];
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	789b      	ldrb	r3, [r3, #2]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <_ZN5Queue7IsEmptyEv>:
 *
 * @param none
 * @return true if queue is empty otherwise false
 */
bool Queue::IsEmpty()
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
	return (enqueuePointer == dequeuePointer);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	781a      	ldrb	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	785b      	ldrb	r3, [r3, #1]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	bf0c      	ite	eq
 8002b5e:	2301      	moveq	r3, #1
 8002b60:	2300      	movne	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <_ZN13TypeConverter12uint16ToByteEPhth>:
	int16_t byte2 = byteArray[1]<<8;
	return(byte1 + byte2);
}


void TypeConverter::uint16ToByte(uint8_t* byteArray, uint16_t data, uint8_t offset){
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	707b      	strb	r3, [r7, #1]
	byteArray[offset] = data;
 8002b80:	787b      	ldrb	r3, [r7, #1]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	887a      	ldrh	r2, [r7, #2]
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	701a      	strb	r2, [r3, #0]
	byteArray[offset+1] = data>>8;
 8002b8c:	887b      	ldrh	r3, [r7, #2]
 8002b8e:	0a1b      	lsrs	r3, r3, #8
 8002b90:	b299      	uxth	r1, r3
 8002b92:	787b      	ldrb	r3, [r7, #1]
 8002b94:	3301      	adds	r3, #1
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	4413      	add	r3, r2
 8002b9a:	b2ca      	uxtb	r2, r1
 8002b9c:	701a      	strb	r2, [r3, #0]
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <_ZN13TypeConverter12byteToUint16EPhh>:




uint16_t TypeConverter::byteToUint16(uint8_t* byteArray, uint8_t offset){
 8002baa:	b480      	push	{r7}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	70fb      	strb	r3, [r7, #3]
	uint16_t byte1 = byteArray[offset];
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	4413      	add	r3, r2
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	81fb      	strh	r3, [r7, #14]
	uint16_t byte2 = byteArray[offset+1]<<8;
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	81bb      	strh	r3, [r7, #12]
	return(byte1 + byte2);
 8002bd0:	89fa      	ldrh	r2, [r7, #14]
 8002bd2:	89bb      	ldrh	r3, [r7, #12]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	b29b      	uxth	r3, r3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <_ZN6USBComC1EP13DriveSettingsP11DriveStatusP12DriveCommand>:
#include "USB.h"
#include "usb_device.h"
#include "usbd_cdc_if.h"
#include "../Tools/TypeConverter.h"

USBCom::USBCom(DriveSettings *driveSettings, DriveStatus *driveStatus,
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
		DriveCommand *driveCommand)
{
	this->driveSettings = driveSettings;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	605a      	str	r2, [r3, #4]
	this->driveStatus = driveStatus;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	609a      	str	r2, [r3, #8]
	this->driveCommand = driveCommand;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	60da      	str	r2, [r3, #12]
}
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <_ZN6USBCom12USB_TransmitEPhh>:

bool USBCom::USB_Transmit(uint8_t *data, uint8_t length)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b086      	sub	sp, #24
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	71fb      	strb	r3, [r7, #7]
	uint16_t counter = 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	82fb      	strh	r3, [r7, #22]
	while (CDC_Transmit_FS((uint8_t*) data, length) != USBD_OK)
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	4619      	mov	r1, r3
 8002c2a:	68b8      	ldr	r0, [r7, #8]
 8002c2c:	f00a fe16 	bl	800d85c <CDC_Transmit_FS>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bf14      	ite	ne
 8002c36:	2301      	movne	r3, #1
 8002c38:	2300      	moveq	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <_ZN6USBCom12USB_TransmitEPhh+0x40>
	{
		counter++;
 8002c40:	8afb      	ldrh	r3, [r7, #22]
 8002c42:	3301      	adds	r3, #1
 8002c44:	82fb      	strh	r3, [r7, #22]
		if (counter >= 1000)
 8002c46:	8afb      	ldrh	r3, [r7, #22]
 8002c48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c4c:	d3ea      	bcc.n	8002c24 <_ZN6USBCom12USB_TransmitEPhh+0x12>
		{
			//ToDo USB Error
			return false;	//Trasmit faild
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e000      	b.n	8002c54 <_ZN6USBCom12USB_TransmitEPhh+0x42>
		}
	}
	return true;	//Transmit successful
 8002c52:	2301      	movs	r3, #1
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <_ZN6USBCom11USB_ReceiveEPhm>:

void USBCom::USB_Receive(uint8_t *data, uint32_t length)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]

	uint8_t data2send[5];
	uint16_t convertedData = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	83fb      	strh	r3, [r7, #30]
	uint8_t readWrite = data[0];
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	777b      	strb	r3, [r7, #29]
	uint8_t command = data[1];
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	785b      	ldrb	r3, [r3, #1]
 8002c76:	773b      	strb	r3, [r7, #28]

	if (length == 0)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 827c 	beq.w	8003178 <_ZN6USBCom11USB_ReceiveEPhm+0x51c>
	{
		return;
	}

	if (readWrite)
 8002c80:	7f7b      	ldrb	r3, [r7, #29]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 8128 	beq.w	8002ed8 <_ZN6USBCom11USB_ReceiveEPhm+0x27c>
	{
		//usb read
		data2send[0] = 0x1D;	//random preamble
 8002c88:	231d      	movs	r3, #29
 8002c8a:	753b      	strb	r3, [r7, #20]
		switch (command)
 8002c8c:	7f3b      	ldrb	r3, [r7, #28]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	2b1f      	cmp	r3, #31
 8002c92:	f200 811c 	bhi.w	8002ece <_ZN6USBCom11USB_ReceiveEPhm+0x272>
 8002c96:	a201      	add	r2, pc, #4	; (adr r2, 8002c9c <_ZN6USBCom11USB_ReceiveEPhm+0x40>)
 8002c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9c:	08002d1d 	.word	0x08002d1d
 8002ca0:	08002d2d 	.word	0x08002d2d
 8002ca4:	08002d3d 	.word	0x08002d3d
 8002ca8:	08002d4d 	.word	0x08002d4d
 8002cac:	08002d5d 	.word	0x08002d5d
 8002cb0:	08002d6d 	.word	0x08002d6d
 8002cb4:	08002d7d 	.word	0x08002d7d
 8002cb8:	08002ecf 	.word	0x08002ecf
 8002cbc:	08002ecf 	.word	0x08002ecf
 8002cc0:	08002ecf 	.word	0x08002ecf
 8002cc4:	08002ecf 	.word	0x08002ecf
 8002cc8:	08002ecf 	.word	0x08002ecf
 8002ccc:	08002ecf 	.word	0x08002ecf
 8002cd0:	08002ecf 	.word	0x08002ecf
 8002cd4:	08002ecf 	.word	0x08002ecf
 8002cd8:	08002d8d 	.word	0x08002d8d
 8002cdc:	08002da9 	.word	0x08002da9
 8002ce0:	08002dc5 	.word	0x08002dc5
 8002ce4:	08002de1 	.word	0x08002de1
 8002ce8:	08002dfd 	.word	0x08002dfd
 8002cec:	08002e19 	.word	0x08002e19
 8002cf0:	08002e33 	.word	0x08002e33
 8002cf4:	08002e4f 	.word	0x08002e4f
 8002cf8:	08002e6b 	.word	0x08002e6b
 8002cfc:	08002e87 	.word	0x08002e87
 8002d00:	08002ea3 	.word	0x08002ea3
 8002d04:	08002ecf 	.word	0x08002ecf
 8002d08:	08002ecf 	.word	0x08002ecf
 8002d0c:	08002ecf 	.word	0x08002ecf
 8002d10:	08002ecf 	.word	0x08002ecf
 8002d14:	08002ecf 	.word	0x08002ecf
 8002d18:	08002ebf 	.word	0x08002ebf
		{
			case CLOSE:
				data2send[1] = driveStatus->isClose();
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fcc5 	bl	80026b0 <_ZN11DriveStatus7isCloseEv>
 8002d26:	4603      	mov	r3, r0
 8002d28:	757b      	strb	r3, [r7, #21]
				break;
 8002d2a:	e21b      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case OPEN:
				data2send[1] = driveStatus->isOpen();
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fcd8 	bl	80026e6 <_ZN11DriveStatus6isOpenEv>
 8002d36:	4603      	mov	r3, r0
 8002d38:	757b      	strb	r3, [r7, #21]
				break;
 8002d3a:	e213      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case TEACH:
				data2send[1] = driveStatus->isTeach();
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff fd57 	bl	80027f4 <_ZN11DriveStatus7isTeachEv>
 8002d46:	4603      	mov	r3, r0
 8002d48:	757b      	strb	r3, [r7, #21]
				break;
 8002d4a:	e20b      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case RESET:
				data2send[1] = driveStatus->isReset();
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fd19 	bl	8002788 <_ZN11DriveStatus7isResetEv>
 8002d56:	4603      	mov	r3, r0
 8002d58:	757b      	strb	r3, [r7, #21]
				break;
 8002d5a:	e203      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case ENABLE:
				data2send[1] = driveStatus->isEnable();
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fcf6 	bl	8002752 <_ZN11DriveStatus8isEnableEv>
 8002d66:	4603      	mov	r3, r0
 8002d68:	757b      	strb	r3, [r7, #21]
				break;
 8002d6a:	e1fb      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case DISABLE:
				data2send[1] = driveStatus->isDisable();
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff fcd3 	bl	800271c <_ZN11DriveStatus9isDisableEv>
 8002d76:	4603      	mov	r3, r0
 8002d78:	757b      	strb	r3, [r7, #21]
				break;
 8002d7a:	e1f3      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case STOP:
				data2send[1] = driveStatus->isStop();
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fd1c 	bl	80027be <_ZN11DriveStatus6isStopEv>
 8002d86:	4603      	mov	r3, r0
 8002d88:	757b      	strb	r3, [r7, #21]
				break;
 8002d8a:	e1eb      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case TEACH_TORQUE:
				TypeConverter::uint16ToByte(data2send,
						driveSettings->getTeachTroque(), 1);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	685b      	ldr	r3, [r3, #4]
				TypeConverter::uint16ToByte(data2send,
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff faf6 	bl	8002382 <_ZNK13DriveSettings14getTeachTroqueEv>
 8002d96:	4603      	mov	r3, r0
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f107 0314 	add.w	r3, r7, #20
 8002d9e:	2201      	movs	r2, #1
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fee5 	bl	8002b70 <_ZN13TypeConverter12uint16ToByteEPhth>
				break;
 8002da6:	e1dd      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case TEACH_SPEED:
				TypeConverter::uint16ToByte(data2send,
						driveSettings->getTeachSpeed(), 1);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	685b      	ldr	r3, [r3, #4]
				TypeConverter::uint16ToByte(data2send,
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff facd 	bl	800234c <_ZNK13DriveSettings13getTeachSpeedEv>
 8002db2:	4603      	mov	r3, r0
 8002db4:	4619      	mov	r1, r3
 8002db6:	f107 0314 	add.w	r3, r7, #20
 8002dba:	2201      	movs	r2, #1
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fed7 	bl	8002b70 <_ZN13TypeConverter12uint16ToByteEPhth>
				break;
 8002dc2:	e1cf      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case CLAMPING_TORQUE:
				TypeConverter::uint16ToByte(data2send,
						driveSettings->getClampingTorque(), 1);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	685b      	ldr	r3, [r3, #4]
				TypeConverter::uint16ToByte(data2send,
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fa38 	bl	800223e <_ZNK13DriveSettings17getClampingTorqueEv>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f107 0314 	add.w	r3, r7, #20
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fec9 	bl	8002b70 <_ZN13TypeConverter12uint16ToByteEPhth>
				break;
 8002dde:	e1c1      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case CLAMPING_SPEED:
				TypeConverter::uint16ToByte(data2send,
						driveSettings->getClampingSpeed(), 1);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685b      	ldr	r3, [r3, #4]
				TypeConverter::uint16ToByte(data2send,
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff fa0f 	bl	8002208 <_ZNK13DriveSettings16getClampingSpeedEv>
 8002dea:	4603      	mov	r3, r0
 8002dec:	4619      	mov	r1, r3
 8002dee:	f107 0314 	add.w	r3, r7, #20
 8002df2:	2201      	movs	r2, #1
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff febb 	bl	8002b70 <_ZN13TypeConverter12uint16ToByteEPhth>
				break;
 8002dfa:	e1b3      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case SELF_SHUTDOWN_DELAY:
				TypeConverter::uint16ToByte(data2send,
						driveSettings->getSelfShutdownDelay(), 1);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	685b      	ldr	r3, [r3, #4]
				TypeConverter::uint16ToByte(data2send,
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fa88 	bl	8002316 <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8002e06:	4603      	mov	r3, r0
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f107 0314 	add.w	r3, r7, #20
 8002e0e:	2201      	movs	r2, #1
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fead 	bl	8002b70 <_ZN13TypeConverter12uint16ToByteEPhth>
				break;
 8002e16:	e1a5      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case IN_POS_DIFF:
				TypeConverter::uint16ToByte(data2send,
						driveSettings->getInPosDiff(), 1);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	685b      	ldr	r3, [r3, #4]
				TypeConverter::uint16ToByte(data2send,
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fa29 	bl	8002274 <_ZNK13DriveSettings12getInPosDiffEv>
 8002e22:	4603      	mov	r3, r0
 8002e24:	4619      	mov	r1, r3
 8002e26:	f107 0314 	add.w	r3, r7, #20
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fe9f 	bl	8002b70 <_ZN13TypeConverter12uint16ToByteEPhth>
			case OPENING_DISTANCE:
				TypeConverter::uint16ToByte(data2send,
						driveSettings->getOpeningDistance(), 1);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	685b      	ldr	r3, [r3, #4]
				TypeConverter::uint16ToByte(data2send,
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff fa37 	bl	80022aa <_ZNK13DriveSettings18getOpeningDistanceEv>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	4619      	mov	r1, r3
 8002e40:	f107 0314 	add.w	r3, r7, #20
 8002e44:	2201      	movs	r2, #1
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff fe92 	bl	8002b70 <_ZN13TypeConverter12uint16ToByteEPhth>
				break;
 8002e4c:	e18a      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case UNDERVOLTAGE_WARNING:
				TypeConverter::uint16ToByte(data2send,
						driveSettings->getUnderVoltageWarning(), 1);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	685b      	ldr	r3, [r3, #4]
				TypeConverter::uint16ToByte(data2send,
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff facb 	bl	80023ee <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	2201      	movs	r2, #1
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fe84 	bl	8002b70 <_ZN13TypeConverter12uint16ToByteEPhth>
				break;
 8002e68:	e17c      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case UNDERVOLTAGE_ERROR:
				TypeConverter::uint16ToByte(data2send,
						driveSettings->getUnderVoltageError(), 1);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	685b      	ldr	r3, [r3, #4]
				TypeConverter::uint16ToByte(data2send,
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff faa2 	bl	80023b8 <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 8002e74:	4603      	mov	r3, r0
 8002e76:	4619      	mov	r1, r3
 8002e78:	f107 0314 	add.w	r3, r7, #20
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fe76 	bl	8002b70 <_ZN13TypeConverter12uint16ToByteEPhth>
				break;
 8002e84:	e16e      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case OVER_CURRENT_WARNING:
				TypeConverter::uint16ToByte(data2send,
						driveSettings->getOverCurrentWarning(), 1);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	685b      	ldr	r3, [r3, #4]
				TypeConverter::uint16ToByte(data2send,
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fa28 	bl	80022e0 <_ZNK13DriveSettings21getOverCurrentWarningEv>
 8002e90:	4603      	mov	r3, r0
 8002e92:	4619      	mov	r1, r3
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	2201      	movs	r2, #1
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fe68 	bl	8002b70 <_ZN13TypeConverter12uint16ToByteEPhth>
				break;
 8002ea0:	e160      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case OVER_CURRENT_ERROR:
				TypeConverter::uint16ToByte(data2send,
						driveSettings->getOverCurrentError(), 1);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	685b      	ldr	r3, [r3, #4]
				TypeConverter::uint16ToByte(data2send,
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff fabc 	bl	8002424 <_ZNK13DriveSettings19getOverCurrentErrorEv>
 8002eac:	4603      	mov	r3, r0
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f107 0314 	add.w	r3, r7, #20
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff fe5a 	bl	8002b70 <_ZN13TypeConverter12uint16ToByteEPhth>
				break;
 8002ebc:	e152      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case DEVICE_ADDRESS:
				data2send[1] = driveSettings->getDeviceAddress();
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fac9 	bl	800245a <_ZNK13DriveSettings16getDeviceAddressEv>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	757b      	strb	r3, [r7, #21]
				break;
 8002ecc:	e14a      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			default:
				data2send[1] = 0x1F;
 8002ece:	231f      	movs	r3, #31
 8002ed0:	757b      	strb	r3, [r7, #21]
				data2send[2] = 0xAA;
 8002ed2:	23aa      	movs	r3, #170	; 0xaa
 8002ed4:	75bb      	strb	r3, [r7, #22]
				break;
 8002ed6:	e145      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
		}
	}
	else
	{
		data2send[0] = command;
 8002ed8:	7f3b      	ldrb	r3, [r7, #28]
 8002eda:	753b      	strb	r3, [r7, #20]
		//usb write
		switch (command)
 8002edc:	7f3b      	ldrb	r3, [r7, #28]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	2b19      	cmp	r3, #25
 8002ee2:	f200 813a 	bhi.w	800315a <_ZN6USBCom11USB_ReceiveEPhm+0x4fe>
 8002ee6:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <_ZN6USBCom11USB_ReceiveEPhm+0x290>)
 8002ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eec:	08002f55 	.word	0x08002f55
 8002ef0:	08002f73 	.word	0x08002f73
 8002ef4:	08002f91 	.word	0x08002f91
 8002ef8:	08002faf 	.word	0x08002faf
 8002efc:	08002fcd 	.word	0x08002fcd
 8002f00:	08002feb 	.word	0x08002feb
 8002f04:	08003009 	.word	0x08003009
 8002f08:	0800315b 	.word	0x0800315b
 8002f0c:	0800315b 	.word	0x0800315b
 8002f10:	0800315b 	.word	0x0800315b
 8002f14:	0800315b 	.word	0x0800315b
 8002f18:	0800315b 	.word	0x0800315b
 8002f1c:	0800315b 	.word	0x0800315b
 8002f20:	0800315b 	.word	0x0800315b
 8002f24:	0800315b 	.word	0x0800315b
 8002f28:	08003027 	.word	0x08003027
 8002f2c:	08003043 	.word	0x08003043
 8002f30:	0800305f 	.word	0x0800305f
 8002f34:	0800307b 	.word	0x0800307b
 8002f38:	08003097 	.word	0x08003097
 8002f3c:	080030b3 	.word	0x080030b3
 8002f40:	080030cf 	.word	0x080030cf
 8002f44:	080030eb 	.word	0x080030eb
 8002f48:	08003107 	.word	0x08003107
 8002f4c:	08003123 	.word	0x08003123
 8002f50:	0800313f 	.word	0x0800313f
		{
			case CLOSE:
				driveStatus->setClose(data[2]);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bf14      	ite	ne
 8002f62:	2301      	movne	r3, #1
 8002f64:	2300      	moveq	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	f7ff fbac 	bl	80026c8 <_ZN11DriveStatus8setCloseEb>
				break;
 8002f70:	e0f8      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case OPEN:
				driveStatus->setOpen(data[2]);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	3302      	adds	r3, #2
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	bf14      	ite	ne
 8002f80:	2301      	movne	r3, #1
 8002f82:	2300      	moveq	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	4619      	mov	r1, r3
 8002f88:	4610      	mov	r0, r2
 8002f8a:	f7ff fbb8 	bl	80026fe <_ZN11DriveStatus7setOpenEb>
				break;
 8002f8e:	e0e9      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case TEACH:
				driveStatus->setTeach(data[2]);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	3302      	adds	r3, #2
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	bf14      	ite	ne
 8002f9e:	2301      	movne	r3, #1
 8002fa0:	2300      	moveq	r3, #0
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	f7ff fc30 	bl	800280c <_ZN11DriveStatus8setTeachEb>
				break;
 8002fac:	e0da      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case RESET:
				driveStatus->setReset(data[2]);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	bf14      	ite	ne
 8002fbc:	2301      	movne	r3, #1
 8002fbe:	2300      	moveq	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	f7ff fbeb 	bl	80027a0 <_ZN11DriveStatus8setResetEb>
				break;
 8002fca:	e0cb      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case ENABLE:
				driveStatus->setEnable(data[2]);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	bf14      	ite	ne
 8002fda:	2301      	movne	r3, #1
 8002fdc:	2300      	moveq	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	f7ff fbc1 	bl	800276a <_ZN11DriveStatus9setEnableEb>
				break;
 8002fe8:	e0bc      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case DISABLE:
				driveStatus->setDisable(data[2]);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf14      	ite	ne
 8002ff8:	2301      	movne	r3, #1
 8002ffa:	2300      	moveq	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	4619      	mov	r1, r3
 8003000:	4610      	mov	r0, r2
 8003002:	f7ff fb97 	bl	8002734 <_ZN11DriveStatus10setDisableEb>
				break;
 8003006:	e0ad      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case STOP:
				driveStatus->setStop(data[2]);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	3302      	adds	r3, #2
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	bf14      	ite	ne
 8003016:	2301      	movne	r3, #1
 8003018:	2300      	moveq	r3, #0
 800301a:	b2db      	uxtb	r3, r3
 800301c:	4619      	mov	r1, r3
 800301e:	4610      	mov	r0, r2
 8003020:	f7ff fbd9 	bl	80027d6 <_ZN11DriveStatus7setStopEb>
				break;
 8003024:	e09e      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case TEACH_TORQUE:
				convertedData = TypeConverter::byteToUint16(data, 2);
 8003026:	2102      	movs	r1, #2
 8003028:	68b8      	ldr	r0, [r7, #8]
 800302a:	f7ff fdbe 	bl	8002baa <_ZN13TypeConverter12byteToUint16EPhh>
 800302e:	4603      	mov	r3, r0
 8003030:	83fb      	strh	r3, [r7, #30]
				driveSettings->setTeachTroque(convertedData);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	8bfa      	ldrh	r2, [r7, #30]
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff f9ad 	bl	800239a <_ZN13DriveSettings14setTeachTroqueEt>
				break;
 8003040:	e090      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case TEACH_SPEED:
				convertedData = TypeConverter::byteToUint16(data, 2);
 8003042:	2102      	movs	r1, #2
 8003044:	68b8      	ldr	r0, [r7, #8]
 8003046:	f7ff fdb0 	bl	8002baa <_ZN13TypeConverter12byteToUint16EPhh>
 800304a:	4603      	mov	r3, r0
 800304c:	83fb      	strh	r3, [r7, #30]
				driveSettings->setTeachSpeed(convertedData);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	8bfa      	ldrh	r2, [r7, #30]
 8003054:	4611      	mov	r1, r2
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff f984 	bl	8002364 <_ZN13DriveSettings13setTeachSpeedEt>
				break;
 800305c:	e082      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case CLAMPING_TORQUE:
				convertedData = TypeConverter::byteToUint16(data, 2);
 800305e:	2102      	movs	r1, #2
 8003060:	68b8      	ldr	r0, [r7, #8]
 8003062:	f7ff fda2 	bl	8002baa <_ZN13TypeConverter12byteToUint16EPhh>
 8003066:	4603      	mov	r3, r0
 8003068:	83fb      	strh	r3, [r7, #30]
				driveSettings->setClampingTorque(convertedData);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	8bfa      	ldrh	r2, [r7, #30]
 8003070:	4611      	mov	r1, r2
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff f8ef 	bl	8002256 <_ZN13DriveSettings17setClampingTorqueEt>
				break;
 8003078:	e074      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case CLAMPING_SPEED:
				convertedData = TypeConverter::byteToUint16(data, 2);
 800307a:	2102      	movs	r1, #2
 800307c:	68b8      	ldr	r0, [r7, #8]
 800307e:	f7ff fd94 	bl	8002baa <_ZN13TypeConverter12byteToUint16EPhh>
 8003082:	4603      	mov	r3, r0
 8003084:	83fb      	strh	r3, [r7, #30]
				driveSettings->setClampingSpeed(convertedData);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	8bfa      	ldrh	r2, [r7, #30]
 800308c:	4611      	mov	r1, r2
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff f8c6 	bl	8002220 <_ZN13DriveSettings16setClampingSpeedEt>
				break;
 8003094:	e066      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case SELF_SHUTDOWN_DELAY:
				convertedData = TypeConverter::byteToUint16(data, 2);
 8003096:	2102      	movs	r1, #2
 8003098:	68b8      	ldr	r0, [r7, #8]
 800309a:	f7ff fd86 	bl	8002baa <_ZN13TypeConverter12byteToUint16EPhh>
 800309e:	4603      	mov	r3, r0
 80030a0:	83fb      	strh	r3, [r7, #30]
				driveSettings->setSelfShutdownDelay(convertedData);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	8bfa      	ldrh	r2, [r7, #30]
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff f93f 	bl	800232e <_ZN13DriveSettings20setSelfShutdownDelayEt>
				break;
 80030b0:	e058      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case IN_POS_DIFF:
				convertedData = TypeConverter::byteToUint16(data, 2);
 80030b2:	2102      	movs	r1, #2
 80030b4:	68b8      	ldr	r0, [r7, #8]
 80030b6:	f7ff fd78 	bl	8002baa <_ZN13TypeConverter12byteToUint16EPhh>
 80030ba:	4603      	mov	r3, r0
 80030bc:	83fb      	strh	r3, [r7, #30]
				driveSettings->setInPosDiff(convertedData);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	8bfa      	ldrh	r2, [r7, #30]
 80030c4:	4611      	mov	r1, r2
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff f8e0 	bl	800228c <_ZN13DriveSettings12setInPosDiffEt>
				break;
 80030cc:	e04a      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case OPENING_DISTANCE:
				convertedData = TypeConverter::byteToUint16(data, 2);
 80030ce:	2102      	movs	r1, #2
 80030d0:	68b8      	ldr	r0, [r7, #8]
 80030d2:	f7ff fd6a 	bl	8002baa <_ZN13TypeConverter12byteToUint16EPhh>
 80030d6:	4603      	mov	r3, r0
 80030d8:	83fb      	strh	r3, [r7, #30]
				driveSettings->setOpeningDistance(convertedData);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	8bfa      	ldrh	r2, [r7, #30]
 80030e0:	4611      	mov	r1, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff f8ed 	bl	80022c2 <_ZN13DriveSettings18setOpeningDistanceEt>
				break;
 80030e8:	e03c      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case UNDERVOLTAGE_WARNING:
				convertedData = TypeConverter::byteToUint16(data, 2);
 80030ea:	2102      	movs	r1, #2
 80030ec:	68b8      	ldr	r0, [r7, #8]
 80030ee:	f7ff fd5c 	bl	8002baa <_ZN13TypeConverter12byteToUint16EPhh>
 80030f2:	4603      	mov	r3, r0
 80030f4:	83fb      	strh	r3, [r7, #30]
				driveSettings->setUnderVoltageWarning(convertedData);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	8bfa      	ldrh	r2, [r7, #30]
 80030fc:	4611      	mov	r1, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff f981 	bl	8002406 <_ZN13DriveSettings22setUnderVoltageWarningEt>
				break;
 8003104:	e02e      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case UNDERVOLTAGE_ERROR:
				convertedData = TypeConverter::byteToUint16(data, 2);
 8003106:	2102      	movs	r1, #2
 8003108:	68b8      	ldr	r0, [r7, #8]
 800310a:	f7ff fd4e 	bl	8002baa <_ZN13TypeConverter12byteToUint16EPhh>
 800310e:	4603      	mov	r3, r0
 8003110:	83fb      	strh	r3, [r7, #30]
				driveSettings->setUnderVoltageError(convertedData);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	8bfa      	ldrh	r2, [r7, #30]
 8003118:	4611      	mov	r1, r2
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff f958 	bl	80023d0 <_ZN13DriveSettings20setUnderVoltageErrorEt>
				break;
 8003120:	e020      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case OVER_CURRENT_WARNING:
				convertedData = TypeConverter::byteToUint16(data, 2);
 8003122:	2102      	movs	r1, #2
 8003124:	68b8      	ldr	r0, [r7, #8]
 8003126:	f7ff fd40 	bl	8002baa <_ZN13TypeConverter12byteToUint16EPhh>
 800312a:	4603      	mov	r3, r0
 800312c:	83fb      	strh	r3, [r7, #30]
				driveSettings->setOverCurrentWarning(convertedData);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	8bfa      	ldrh	r2, [r7, #30]
 8003134:	4611      	mov	r1, r2
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff f8de 	bl	80022f8 <_ZN13DriveSettings21setOverCurrentWarningEt>
				break;
 800313c:	e012      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			case OVER_CURRENT_ERROR:
				convertedData = TypeConverter::byteToUint16(data, 2);
 800313e:	2102      	movs	r1, #2
 8003140:	68b8      	ldr	r0, [r7, #8]
 8003142:	f7ff fd32 	bl	8002baa <_ZN13TypeConverter12byteToUint16EPhh>
 8003146:	4603      	mov	r3, r0
 8003148:	83fb      	strh	r3, [r7, #30]
				driveSettings->setOverCurrentError(convertedData);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	8bfa      	ldrh	r2, [r7, #30]
 8003150:	4611      	mov	r1, r2
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff f972 	bl	800243c <_ZN13DriveSettings19setOverCurrentErrorEt>
				break;
 8003158:	e004      	b.n	8003164 <_ZN6USBCom11USB_ReceiveEPhm+0x508>
			default:
				data2send[0] = 0x1F;
 800315a:	231f      	movs	r3, #31
 800315c:	753b      	strb	r3, [r7, #20]
				data2send[1] = 0xAA;
 800315e:	23aa      	movs	r3, #170	; 0xaa
 8003160:	757b      	strb	r3, [r7, #21]
				break;
 8003162:	bf00      	nop
		}
	}

	data2send[4] = 0x0A;
 8003164:	230a      	movs	r3, #10
 8003166:	763b      	strb	r3, [r7, #24]
	USB_Transmit(data2send, 5);
 8003168:	f107 0314 	add.w	r3, r7, #20
 800316c:	2205      	movs	r2, #5
 800316e:	4619      	mov	r1, r3
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f7ff fd4e 	bl	8002c12 <_ZN6USBCom12USB_TransmitEPhh>
 8003176:	e000      	b.n	800317a <_ZN6USBCom11USB_ReceiveEPhm+0x51e>
		return;
 8003178:	bf00      	nop
}
 800317a:	3720      	adds	r7, #32
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003186:	463b      	mov	r3, r7
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	611a      	str	r2, [r3, #16]
 8003194:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003196:	4b29      	ldr	r3, [pc, #164]	; (800323c <MX_ADC1_Init+0xbc>)
 8003198:	4a29      	ldr	r2, [pc, #164]	; (8003240 <MX_ADC1_Init+0xc0>)
 800319a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800319c:	4b27      	ldr	r3, [pc, #156]	; (800323c <MX_ADC1_Init+0xbc>)
 800319e:	2200      	movs	r2, #0
 80031a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031a2:	4b26      	ldr	r3, [pc, #152]	; (800323c <MX_ADC1_Init+0xbc>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031a8:	4b24      	ldr	r3, [pc, #144]	; (800323c <MX_ADC1_Init+0xbc>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80031ae:	4b23      	ldr	r3, [pc, #140]	; (800323c <MX_ADC1_Init+0xbc>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031b4:	4b21      	ldr	r3, [pc, #132]	; (800323c <MX_ADC1_Init+0xbc>)
 80031b6:	2204      	movs	r2, #4
 80031b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80031ba:	4b20      	ldr	r3, [pc, #128]	; (800323c <MX_ADC1_Init+0xbc>)
 80031bc:	2200      	movs	r2, #0
 80031be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80031c0:	4b1e      	ldr	r3, [pc, #120]	; (800323c <MX_ADC1_Init+0xbc>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80031c6:	4b1d      	ldr	r3, [pc, #116]	; (800323c <MX_ADC1_Init+0xbc>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031cc:	4b1b      	ldr	r3, [pc, #108]	; (800323c <MX_ADC1_Init+0xbc>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031d4:	4b19      	ldr	r3, [pc, #100]	; (800323c <MX_ADC1_Init+0xbc>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031da:	4b18      	ldr	r3, [pc, #96]	; (800323c <MX_ADC1_Init+0xbc>)
 80031dc:	2200      	movs	r2, #0
 80031de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80031e0:	4b16      	ldr	r3, [pc, #88]	; (800323c <MX_ADC1_Init+0xbc>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80031e8:	4b14      	ldr	r3, [pc, #80]	; (800323c <MX_ADC1_Init+0xbc>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80031ee:	4b13      	ldr	r3, [pc, #76]	; (800323c <MX_ADC1_Init+0xbc>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80031f6:	4811      	ldr	r0, [pc, #68]	; (800323c <MX_ADC1_Init+0xbc>)
 80031f8:	f000 ffc0 	bl	800417c <HAL_ADC_Init>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8003202:	f000 fb8f 	bl	8003924 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003206:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <MX_ADC1_Init+0xc4>)
 8003208:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800320a:	2306      	movs	r3, #6
 800320c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800320e:	2300      	movs	r3, #0
 8003210:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003212:	237f      	movs	r3, #127	; 0x7f
 8003214:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003216:	2304      	movs	r3, #4
 8003218:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800321e:	463b      	mov	r3, r7
 8003220:	4619      	mov	r1, r3
 8003222:	4806      	ldr	r0, [pc, #24]	; (800323c <MX_ADC1_Init+0xbc>)
 8003224:	f001 f8f2 	bl	800440c <HAL_ADC_ConfigChannel>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800322e:	f000 fb79 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003232:	bf00      	nop
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	200001ac 	.word	0x200001ac
 8003240:	50040000 	.word	0x50040000
 8003244:	2e300800 	.word	0x2e300800

08003248 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b0a2      	sub	sp, #136	; 0x88
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003250:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	60da      	str	r2, [r3, #12]
 800325e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003260:	f107 0314 	add.w	r3, r7, #20
 8003264:	2260      	movs	r2, #96	; 0x60
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f00b f80d 	bl	800e288 <memset>
  if(adcHandle->Instance==ADC1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a3b      	ldr	r2, [pc, #236]	; (8003360 <HAL_ADC_MspInit+0x118>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d16e      	bne.n	8003356 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003278:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800327c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800327e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003282:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003284:	2301      	movs	r3, #1
 8003286:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003288:	2301      	movs	r3, #1
 800328a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800328c:	2310      	movs	r3, #16
 800328e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003290:	2307      	movs	r3, #7
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003294:	2302      	movs	r3, #2
 8003296:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003298:	2302      	movs	r3, #2
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800329c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032a0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032a2:	f107 0314 	add.w	r3, r7, #20
 80032a6:	4618      	mov	r0, r3
 80032a8:	f004 ff00 	bl	80080ac <HAL_RCCEx_PeriphCLKConfig>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80032b2:	f000 fb37 	bl	8003924 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80032b6:	4b2b      	ldr	r3, [pc, #172]	; (8003364 <HAL_ADC_MspInit+0x11c>)
 80032b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ba:	4a2a      	ldr	r2, [pc, #168]	; (8003364 <HAL_ADC_MspInit+0x11c>)
 80032bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032c2:	4b28      	ldr	r3, [pc, #160]	; (8003364 <HAL_ADC_MspInit+0x11c>)
 80032c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ce:	4b25      	ldr	r3, [pc, #148]	; (8003364 <HAL_ADC_MspInit+0x11c>)
 80032d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d2:	4a24      	ldr	r2, [pc, #144]	; (8003364 <HAL_ADC_MspInit+0x11c>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032da:	4b22      	ldr	r3, [pc, #136]	; (8003364 <HAL_ADC_MspInit+0x11c>)
 80032dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032e6:	23c0      	movs	r3, #192	; 0xc0
 80032e8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80032ea:	230b      	movs	r3, #11
 80032ec:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80032f6:	4619      	mov	r1, r3
 80032f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032fc:	f002 f906 	bl	800550c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003300:	4b19      	ldr	r3, [pc, #100]	; (8003368 <HAL_ADC_MspInit+0x120>)
 8003302:	4a1a      	ldr	r2, [pc, #104]	; (800336c <HAL_ADC_MspInit+0x124>)
 8003304:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003306:	4b18      	ldr	r3, [pc, #96]	; (8003368 <HAL_ADC_MspInit+0x120>)
 8003308:	2200      	movs	r2, #0
 800330a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800330c:	4b16      	ldr	r3, [pc, #88]	; (8003368 <HAL_ADC_MspInit+0x120>)
 800330e:	2200      	movs	r2, #0
 8003310:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003312:	4b15      	ldr	r3, [pc, #84]	; (8003368 <HAL_ADC_MspInit+0x120>)
 8003314:	2200      	movs	r2, #0
 8003316:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003318:	4b13      	ldr	r3, [pc, #76]	; (8003368 <HAL_ADC_MspInit+0x120>)
 800331a:	2280      	movs	r2, #128	; 0x80
 800331c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800331e:	4b12      	ldr	r3, [pc, #72]	; (8003368 <HAL_ADC_MspInit+0x120>)
 8003320:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003324:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <HAL_ADC_MspInit+0x120>)
 8003328:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800332c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800332e:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <HAL_ADC_MspInit+0x120>)
 8003330:	2200      	movs	r2, #0
 8003332:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <HAL_ADC_MspInit+0x120>)
 8003336:	2200      	movs	r2, #0
 8003338:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800333a:	480b      	ldr	r0, [pc, #44]	; (8003368 <HAL_ADC_MspInit+0x120>)
 800333c:	f001 ff7e 	bl	800523c <HAL_DMA_Init>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8003346:	f000 faed 	bl	8003924 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a06      	ldr	r2, [pc, #24]	; (8003368 <HAL_ADC_MspInit+0x120>)
 800334e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003350:	4a05      	ldr	r2, [pc, #20]	; (8003368 <HAL_ADC_MspInit+0x120>)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003356:	bf00      	nop
 8003358:	3788      	adds	r7, #136	; 0x88
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	50040000 	.word	0x50040000
 8003364:	40021000 	.word	0x40021000
 8003368:	20000210 	.word	0x20000210
 800336c:	40020008 	.word	0x40020008

08003370 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003374:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <MX_CRC_Init+0x3c>)
 8003376:	4a0e      	ldr	r2, [pc, #56]	; (80033b0 <MX_CRC_Init+0x40>)
 8003378:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800337a:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <MX_CRC_Init+0x3c>)
 800337c:	2200      	movs	r2, #0
 800337e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003380:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <MX_CRC_Init+0x3c>)
 8003382:	2200      	movs	r2, #0
 8003384:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003386:	4b09      	ldr	r3, [pc, #36]	; (80033ac <MX_CRC_Init+0x3c>)
 8003388:	2200      	movs	r2, #0
 800338a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800338c:	4b07      	ldr	r3, [pc, #28]	; (80033ac <MX_CRC_Init+0x3c>)
 800338e:	2200      	movs	r2, #0
 8003390:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003392:	4b06      	ldr	r3, [pc, #24]	; (80033ac <MX_CRC_Init+0x3c>)
 8003394:	2201      	movs	r2, #1
 8003396:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003398:	4804      	ldr	r0, [pc, #16]	; (80033ac <MX_CRC_Init+0x3c>)
 800339a:	f001 fd29 	bl	8004df0 <HAL_CRC_Init>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80033a4:	f000 fabe 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80033a8:	bf00      	nop
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	20000258 	.word	0x20000258
 80033b0:	40023000 	.word	0x40023000

080033b4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a0a      	ldr	r2, [pc, #40]	; (80033ec <HAL_CRC_MspInit+0x38>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d10b      	bne.n	80033de <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80033c6:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <HAL_CRC_MspInit+0x3c>)
 80033c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ca:	4a09      	ldr	r2, [pc, #36]	; (80033f0 <HAL_CRC_MspInit+0x3c>)
 80033cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033d0:	6493      	str	r3, [r2, #72]	; 0x48
 80033d2:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <HAL_CRC_MspInit+0x3c>)
 80033d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80033de:	bf00      	nop
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40023000 	.word	0x40023000
 80033f0:	40021000 	.word	0x40021000

080033f4 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	; 0x28
 80033f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80033fa:	1d3b      	adds	r3, r7, #4
 80033fc:	2224      	movs	r2, #36	; 0x24
 80033fe:	2100      	movs	r1, #0
 8003400:	4618      	mov	r0, r3
 8003402:	f00a ff41 	bl	800e288 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8003406:	4b17      	ldr	r3, [pc, #92]	; (8003464 <MX_DAC1_Init+0x70>)
 8003408:	4a17      	ldr	r2, [pc, #92]	; (8003468 <MX_DAC1_Init+0x74>)
 800340a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800340c:	4815      	ldr	r0, [pc, #84]	; (8003464 <MX_DAC1_Init+0x70>)
 800340e:	f001 fdd9 	bl	8004fc4 <HAL_DAC_Init>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8003418:	f000 fa84 	bl	8003924 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800341c:	2300      	movs	r3, #0
 800341e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003420:	2300      	movs	r3, #0
 8003422:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003428:	2300      	movs	r3, #0
 800342a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003430:	1d3b      	adds	r3, r7, #4
 8003432:	2200      	movs	r2, #0
 8003434:	4619      	mov	r1, r3
 8003436:	480b      	ldr	r0, [pc, #44]	; (8003464 <MX_DAC1_Init+0x70>)
 8003438:	f001 fde6 	bl	8005008 <HAL_DAC_ConfigChannel>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8003442:	f000 fa6f 	bl	8003924 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003446:	1d3b      	adds	r3, r7, #4
 8003448:	2210      	movs	r2, #16
 800344a:	4619      	mov	r1, r3
 800344c:	4805      	ldr	r0, [pc, #20]	; (8003464 <MX_DAC1_Init+0x70>)
 800344e:	f001 fddb 	bl	8005008 <HAL_DAC_ConfigChannel>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8003458:	f000 fa64 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800345c:	bf00      	nop
 800345e:	3728      	adds	r7, #40	; 0x28
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	2000027c 	.word	0x2000027c
 8003468:	40007400 	.word	0x40007400

0800346c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08a      	sub	sp, #40	; 0x28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	f107 0314 	add.w	r3, r7, #20
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a40      	ldr	r2, [pc, #256]	; (800358c <HAL_DAC_MspInit+0x120>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d17a      	bne.n	8003584 <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800348e:	4b40      	ldr	r3, [pc, #256]	; (8003590 <HAL_DAC_MspInit+0x124>)
 8003490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003492:	4a3f      	ldr	r2, [pc, #252]	; (8003590 <HAL_DAC_MspInit+0x124>)
 8003494:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003498:	6593      	str	r3, [r2, #88]	; 0x58
 800349a:	4b3d      	ldr	r3, [pc, #244]	; (8003590 <HAL_DAC_MspInit+0x124>)
 800349c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a6:	4b3a      	ldr	r3, [pc, #232]	; (8003590 <HAL_DAC_MspInit+0x124>)
 80034a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034aa:	4a39      	ldr	r2, [pc, #228]	; (8003590 <HAL_DAC_MspInit+0x124>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034b2:	4b37      	ldr	r3, [pc, #220]	; (8003590 <HAL_DAC_MspInit+0x124>)
 80034b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80034be:	2330      	movs	r3, #48	; 0x30
 80034c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034c2:	2303      	movs	r3, #3
 80034c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ca:	f107 0314 	add.w	r3, r7, #20
 80034ce:	4619      	mov	r1, r3
 80034d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034d4:	f002 f81a 	bl	800550c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80034d8:	4b2e      	ldr	r3, [pc, #184]	; (8003594 <HAL_DAC_MspInit+0x128>)
 80034da:	4a2f      	ldr	r2, [pc, #188]	; (8003598 <HAL_DAC_MspInit+0x12c>)
 80034dc:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80034de:	4b2d      	ldr	r3, [pc, #180]	; (8003594 <HAL_DAC_MspInit+0x128>)
 80034e0:	2206      	movs	r2, #6
 80034e2:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034e4:	4b2b      	ldr	r3, [pc, #172]	; (8003594 <HAL_DAC_MspInit+0x128>)
 80034e6:	2210      	movs	r2, #16
 80034e8:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034ea:	4b2a      	ldr	r3, [pc, #168]	; (8003594 <HAL_DAC_MspInit+0x128>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80034f0:	4b28      	ldr	r3, [pc, #160]	; (8003594 <HAL_DAC_MspInit+0x128>)
 80034f2:	2280      	movs	r2, #128	; 0x80
 80034f4:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034f6:	4b27      	ldr	r3, [pc, #156]	; (8003594 <HAL_DAC_MspInit+0x128>)
 80034f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034fc:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034fe:	4b25      	ldr	r3, [pc, #148]	; (8003594 <HAL_DAC_MspInit+0x128>)
 8003500:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003504:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 8003506:	4b23      	ldr	r3, [pc, #140]	; (8003594 <HAL_DAC_MspInit+0x128>)
 8003508:	2200      	movs	r2, #0
 800350a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800350c:	4b21      	ldr	r3, [pc, #132]	; (8003594 <HAL_DAC_MspInit+0x128>)
 800350e:	2200      	movs	r2, #0
 8003510:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8003512:	4820      	ldr	r0, [pc, #128]	; (8003594 <HAL_DAC_MspInit+0x128>)
 8003514:	f001 fe92 	bl	800523c <HAL_DMA_Init>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800351e:	f000 fa01 	bl	8003924 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a1b      	ldr	r2, [pc, #108]	; (8003594 <HAL_DAC_MspInit+0x128>)
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	4a1a      	ldr	r2, [pc, #104]	; (8003594 <HAL_DAC_MspInit+0x128>)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 800352e:	4b1b      	ldr	r3, [pc, #108]	; (800359c <HAL_DAC_MspInit+0x130>)
 8003530:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <HAL_DAC_MspInit+0x134>)
 8003532:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8003534:	4b19      	ldr	r3, [pc, #100]	; (800359c <HAL_DAC_MspInit+0x130>)
 8003536:	2205      	movs	r2, #5
 8003538:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800353a:	4b18      	ldr	r3, [pc, #96]	; (800359c <HAL_DAC_MspInit+0x130>)
 800353c:	2210      	movs	r2, #16
 800353e:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003540:	4b16      	ldr	r3, [pc, #88]	; (800359c <HAL_DAC_MspInit+0x130>)
 8003542:	2200      	movs	r2, #0
 8003544:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003546:	4b15      	ldr	r3, [pc, #84]	; (800359c <HAL_DAC_MspInit+0x130>)
 8003548:	2280      	movs	r2, #128	; 0x80
 800354a:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800354c:	4b13      	ldr	r3, [pc, #76]	; (800359c <HAL_DAC_MspInit+0x130>)
 800354e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003552:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003554:	4b11      	ldr	r3, [pc, #68]	; (800359c <HAL_DAC_MspInit+0x130>)
 8003556:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800355a:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_NORMAL;
 800355c:	4b0f      	ldr	r3, [pc, #60]	; (800359c <HAL_DAC_MspInit+0x130>)
 800355e:	2200      	movs	r2, #0
 8003560:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003562:	4b0e      	ldr	r3, [pc, #56]	; (800359c <HAL_DAC_MspInit+0x130>)
 8003564:	2200      	movs	r2, #0
 8003566:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8003568:	480c      	ldr	r0, [pc, #48]	; (800359c <HAL_DAC_MspInit+0x130>)
 800356a:	f001 fe67 	bl	800523c <HAL_DMA_Init>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8003574:	f000 f9d6 	bl	8003924 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a08      	ldr	r2, [pc, #32]	; (800359c <HAL_DAC_MspInit+0x130>)
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	4a07      	ldr	r2, [pc, #28]	; (800359c <HAL_DAC_MspInit+0x130>)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8003584:	bf00      	nop
 8003586:	3728      	adds	r7, #40	; 0x28
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40007400 	.word	0x40007400
 8003590:	40021000 	.word	0x40021000
 8003594:	20000290 	.word	0x20000290
 8003598:	40020030 	.word	0x40020030
 800359c:	200002d8 	.word	0x200002d8
 80035a0:	40020044 	.word	0x40020044

080035a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035aa:	4b14      	ldr	r3, [pc, #80]	; (80035fc <MX_DMA_Init+0x58>)
 80035ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ae:	4a13      	ldr	r2, [pc, #76]	; (80035fc <MX_DMA_Init+0x58>)
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	6493      	str	r3, [r2, #72]	; 0x48
 80035b6:	4b11      	ldr	r3, [pc, #68]	; (80035fc <MX_DMA_Init+0x58>)
 80035b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	607b      	str	r3, [r7, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80035c2:	2200      	movs	r2, #0
 80035c4:	2100      	movs	r1, #0
 80035c6:	200b      	movs	r0, #11
 80035c8:	f001 fbdb 	bl	8004d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80035cc:	200b      	movs	r0, #11
 80035ce:	f001 fbf4 	bl	8004dba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80035d2:	2200      	movs	r2, #0
 80035d4:	2100      	movs	r1, #0
 80035d6:	200d      	movs	r0, #13
 80035d8:	f001 fbd3 	bl	8004d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80035dc:	200d      	movs	r0, #13
 80035de:	f001 fbec 	bl	8004dba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80035e2:	2200      	movs	r2, #0
 80035e4:	2100      	movs	r1, #0
 80035e6:	200e      	movs	r0, #14
 80035e8:	f001 fbcb 	bl	8004d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80035ec:	200e      	movs	r0, #14
 80035ee:	f001 fbe4 	bl	8004dba <HAL_NVIC_EnableIRQ>

}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40021000 	.word	0x40021000

08003600 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08a      	sub	sp, #40	; 0x28
 8003604:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003606:	f107 0314 	add.w	r3, r7, #20
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	605a      	str	r2, [r3, #4]
 8003610:	609a      	str	r2, [r3, #8]
 8003612:	60da      	str	r2, [r3, #12]
 8003614:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003616:	4b67      	ldr	r3, [pc, #412]	; (80037b4 <MX_GPIO_Init+0x1b4>)
 8003618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361a:	4a66      	ldr	r2, [pc, #408]	; (80037b4 <MX_GPIO_Init+0x1b4>)
 800361c:	f043 0304 	orr.w	r3, r3, #4
 8003620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003622:	4b64      	ldr	r3, [pc, #400]	; (80037b4 <MX_GPIO_Init+0x1b4>)
 8003624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800362e:	4b61      	ldr	r3, [pc, #388]	; (80037b4 <MX_GPIO_Init+0x1b4>)
 8003630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003632:	4a60      	ldr	r2, [pc, #384]	; (80037b4 <MX_GPIO_Init+0x1b4>)
 8003634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800363a:	4b5e      	ldr	r3, [pc, #376]	; (80037b4 <MX_GPIO_Init+0x1b4>)
 800363c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003646:	4b5b      	ldr	r3, [pc, #364]	; (80037b4 <MX_GPIO_Init+0x1b4>)
 8003648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800364a:	4a5a      	ldr	r2, [pc, #360]	; (80037b4 <MX_GPIO_Init+0x1b4>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003652:	4b58      	ldr	r3, [pc, #352]	; (80037b4 <MX_GPIO_Init+0x1b4>)
 8003654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	60bb      	str	r3, [r7, #8]
 800365c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800365e:	4b55      	ldr	r3, [pc, #340]	; (80037b4 <MX_GPIO_Init+0x1b4>)
 8003660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003662:	4a54      	ldr	r2, [pc, #336]	; (80037b4 <MX_GPIO_Init+0x1b4>)
 8003664:	f043 0302 	orr.w	r3, r3, #2
 8003668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800366a:	4b52      	ldr	r3, [pc, #328]	; (80037b4 <MX_GPIO_Init+0x1b4>)
 800366c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	607b      	str	r3, [r7, #4]
 8003674:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DI_OUT_8_P_Pin|DI_OUT_8_N_Pin|DI_OUT_6_N_Pin|DI_OUT_5_P_Pin
 8003676:	2200      	movs	r2, #0
 8003678:	f24c 31d0 	movw	r1, #50128	; 0xc3d0
 800367c:	484e      	ldr	r0, [pc, #312]	; (80037b8 <MX_GPIO_Init+0x1b8>)
 800367e:	f002 f8d7 	bl	8005830 <HAL_GPIO_WritePin>
                          |DI_OUT_3_N_Pin|DI_OUT_3_P_Pin|DI_OUT_1_N_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DI_OUT_4_P_Pin|DI_OUT_6_P_Pin|DI_OUT_2_N_Pin|DI_OUT_4_N_Pin
 8003682:	2200      	movs	r2, #0
 8003684:	f64e 41ff 	movw	r1, #60671	; 0xecff
 8003688:	484c      	ldr	r0, [pc, #304]	; (80037bc <MX_GPIO_Init+0x1bc>)
 800368a:	f002 f8d1 	bl	8005830 <HAL_GPIO_WritePin>
                          |DI_OUT_2_P_Pin|DI_OUT_7_N_Pin|DI_OUT_7_P_Pin|DI_OUT_5_N_Pin
                          |RFM_NSS_Pin|RFM_RST_Pin|RFM_DI_3_Pin|RFM_DI_0_Pin
                          |RFM_DI_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DI_OUT_1_P_Pin|LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 800368e:	2200      	movs	r2, #0
 8003690:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003698:	f002 f8ca 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800369c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036a2:	2303      	movs	r3, #3
 80036a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036aa:	f107 0314 	add.w	r3, r7, #20
 80036ae:	4619      	mov	r1, r3
 80036b0:	4841      	ldr	r0, [pc, #260]	; (80037b8 <MX_GPIO_Init+0x1b8>)
 80036b2:	f001 ff2b 	bl	800550c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DI_OUT_8_P_Pin|DI_OUT_8_N_Pin|DI_OUT_6_N_Pin|DI_OUT_5_P_Pin
 80036b6:	f24c 33d0 	movw	r3, #50128	; 0xc3d0
 80036ba:	617b      	str	r3, [r7, #20]
                          |DI_OUT_3_N_Pin|DI_OUT_3_P_Pin|DI_OUT_1_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036bc:	2301      	movs	r3, #1
 80036be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c0:	2300      	movs	r3, #0
 80036c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c4:	2300      	movs	r3, #0
 80036c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036c8:	f107 0314 	add.w	r3, r7, #20
 80036cc:	4619      	mov	r1, r3
 80036ce:	483a      	ldr	r0, [pc, #232]	; (80037b8 <MX_GPIO_Init+0x1b8>)
 80036d0:	f001 ff1c 	bl	800550c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80036d4:	2309      	movs	r3, #9
 80036d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036d8:	2303      	movs	r3, #3
 80036da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80036e0:	f107 0314 	add.w	r3, r7, #20
 80036e4:	4619      	mov	r1, r3
 80036e6:	4836      	ldr	r0, [pc, #216]	; (80037c0 <MX_GPIO_Init+0x1c0>)
 80036e8:	f001 ff10 	bl	800550c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DI_1_Pin;
 80036ec:	2302      	movs	r3, #2
 80036ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DI_1_GPIO_Port, &GPIO_InitStruct);
 80036f8:	f107 0314 	add.w	r3, r7, #20
 80036fc:	4619      	mov	r1, r3
 80036fe:	4830      	ldr	r0, [pc, #192]	; (80037c0 <MX_GPIO_Init+0x1c0>)
 8003700:	f001 ff04 	bl	800550c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DI_2_Pin|DI_3_Pin|DI_4_Pin|DI_5_Pin;
 8003704:	230f      	movs	r3, #15
 8003706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003708:	2300      	movs	r3, #0
 800370a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370c:	2300      	movs	r3, #0
 800370e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003710:	f107 0314 	add.w	r3, r7, #20
 8003714:	4619      	mov	r1, r3
 8003716:	4828      	ldr	r0, [pc, #160]	; (80037b8 <MX_GPIO_Init+0x1b8>)
 8003718:	f001 fef8 	bl	800550c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DI_6_Pin|DI_7_Pin|DI_8_Pin;
 800371c:	2307      	movs	r3, #7
 800371e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003720:	2300      	movs	r3, #0
 8003722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003724:	2300      	movs	r3, #0
 8003726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003728:	f107 0314 	add.w	r3, r7, #20
 800372c:	4619      	mov	r1, r3
 800372e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003732:	f001 feeb 	bl	800550c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_15;
 8003736:	f248 0308 	movw	r3, #32776	; 0x8008
 800373a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800373c:	2303      	movs	r3, #3
 800373e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003740:	2300      	movs	r3, #0
 8003742:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	4619      	mov	r1, r3
 800374a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800374e:	f001 fedd 	bl	800550c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DI_OUT_4_P_Pin|DI_OUT_6_P_Pin|DI_OUT_2_N_Pin|DI_OUT_4_N_Pin
 8003752:	f64e 43ff 	movw	r3, #60671	; 0xecff
 8003756:	617b      	str	r3, [r7, #20]
                          |DI_OUT_2_P_Pin|DI_OUT_7_N_Pin|DI_OUT_7_P_Pin|DI_OUT_5_N_Pin
                          |RFM_NSS_Pin|RFM_RST_Pin|RFM_DI_3_Pin|RFM_DI_0_Pin
                          |RFM_DI_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003758:	2301      	movs	r3, #1
 800375a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375c:	2300      	movs	r3, #0
 800375e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003760:	2300      	movs	r3, #0
 8003762:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003764:	f107 0314 	add.w	r3, r7, #20
 8003768:	4619      	mov	r1, r3
 800376a:	4814      	ldr	r0, [pc, #80]	; (80037bc <MX_GPIO_Init+0x1bc>)
 800376c:	f001 fece 	bl	800550c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 8003770:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8003774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003776:	2303      	movs	r3, #3
 8003778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800377e:	f107 0314 	add.w	r3, r7, #20
 8003782:	4619      	mov	r1, r3
 8003784:	480d      	ldr	r0, [pc, #52]	; (80037bc <MX_GPIO_Init+0x1bc>)
 8003786:	f001 fec1 	bl	800550c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DI_OUT_1_P_Pin|LED_R_Pin|LED_G_Pin;
 800378a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800378e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003790:	2301      	movs	r3, #1
 8003792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003798:	2300      	movs	r3, #0
 800379a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800379c:	f107 0314 	add.w	r3, r7, #20
 80037a0:	4619      	mov	r1, r3
 80037a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037a6:	f001 feb1 	bl	800550c <HAL_GPIO_Init>

}
 80037aa:	bf00      	nop
 80037ac:	3728      	adds	r7, #40	; 0x28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40021000 	.word	0x40021000
 80037b8:	48000800 	.word	0x48000800
 80037bc:	48000400 	.word	0x48000400
 80037c0:	48001c00 	.word	0x48001c00

080037c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037c8:	f000 fab3 	bl	8003d32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037cc:	f000 f818 	bl	8003800 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037d0:	f7ff ff16 	bl	8003600 <MX_GPIO_Init>
  MX_DMA_Init();
 80037d4:	f7ff fee6 	bl	80035a4 <MX_DMA_Init>
  MX_ADC1_Init();
 80037d8:	f7ff fcd2 	bl	8003180 <MX_ADC1_Init>
  MX_DAC1_Init();
 80037dc:	f7ff fe0a 	bl	80033f4 <MX_DAC1_Init>
  MX_SPI3_Init();
 80037e0:	f000 f8c4 	bl	800396c <MX_SPI3_Init>
  MX_CRC_Init();
 80037e4:	f7ff fdc4 	bl	8003370 <MX_CRC_Init>
  MX_TIM6_Init();
 80037e8:	f000 f9d4 	bl	8003b94 <MX_TIM6_Init>
  MX_TIM7_Init();
 80037ec:	f000 fa08 	bl	8003c00 <MX_TIM7_Init>
  MX_USB_DEVICE_Init();
 80037f0:	f009 ff70 	bl	800d6d4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  appMain.Startup();
 80037f4:	4801      	ldr	r0, [pc, #4]	; (80037fc <main+0x38>)
 80037f6:	f7fc ff49 	bl	800068c <_ZN7AppMain7StartupEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80037fa:	e7fe      	b.n	80037fa <main+0x36>
 80037fc:	20000320 	.word	0x20000320

08003800 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b096      	sub	sp, #88	; 0x58
 8003804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003806:	f107 0314 	add.w	r3, r7, #20
 800380a:	2244      	movs	r2, #68	; 0x44
 800380c:	2100      	movs	r1, #0
 800380e:	4618      	mov	r0, r3
 8003810:	f00a fd3a 	bl	800e288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003814:	463b      	mov	r3, r7
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	605a      	str	r2, [r3, #4]
 800381c:	609a      	str	r2, [r3, #8]
 800381e:	60da      	str	r2, [r3, #12]
 8003820:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003822:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003826:	f003 fdcf 	bl	80073c8 <HAL_PWREx_ControlVoltageScaling>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	bf14      	ite	ne
 8003830:	2301      	movne	r3, #1
 8003832:	2300      	moveq	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800383a:	f000 f873 	bl	8003924 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 800383e:	2330      	movs	r3, #48	; 0x30
 8003840:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003842:	2301      	movs	r3, #1
 8003844:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003846:	2301      	movs	r3, #1
 8003848:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800384a:	2300      	movs	r3, #0
 800384c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800384e:	2360      	movs	r3, #96	; 0x60
 8003850:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003852:	2302      	movs	r3, #2
 8003854:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003856:	2301      	movs	r3, #1
 8003858:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800385a:	2301      	movs	r3, #1
 800385c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 800385e:	2324      	movs	r3, #36	; 0x24
 8003860:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003862:	2307      	movs	r3, #7
 8003864:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003866:	2302      	movs	r3, #2
 8003868:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800386a:	2302      	movs	r3, #2
 800386c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800386e:	f107 0314 	add.w	r3, r7, #20
 8003872:	4618      	mov	r0, r3
 8003874:	f003 fe0e 	bl	8007494 <HAL_RCC_OscConfig>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	bf14      	ite	ne
 800387e:	2301      	movne	r3, #1
 8003880:	2300      	moveq	r3, #0
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8003888:	f000 f84c 	bl	8003924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800388c:	230f      	movs	r3, #15
 800388e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003890:	2303      	movs	r3, #3
 8003892:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003894:	2300      	movs	r3, #0
 8003896:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800389c:	2300      	movs	r3, #0
 800389e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80038a0:	463b      	mov	r3, r7
 80038a2:	2104      	movs	r1, #4
 80038a4:	4618      	mov	r0, r3
 80038a6:	f004 fa09 	bl	8007cbc <HAL_RCC_ClockConfig>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	bf14      	ite	ne
 80038b0:	2301      	movne	r3, #1
 80038b2:	2300      	moveq	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 80038ba:	f000 f833 	bl	8003924 <Error_Handler>
  }
}
 80038be:	bf00      	nop
 80038c0:	3758      	adds	r7, #88	; 0x58
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
	...

080038c8 <HAL_TIM_PeriodElapsedCallback>:


/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]


	if(htim->Instance == TIM7){
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a04      	ldr	r2, [pc, #16]	; (80038e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d102      	bne.n	80038e0 <HAL_TIM_PeriodElapsedCallback+0x18>
		appMain.taskStatus.UpdateTasks();
 80038da:	4804      	ldr	r0, [pc, #16]	; (80038ec <HAL_TIM_PeriodElapsedCallback+0x24>)
 80038dc:	f7fe ffa6 	bl	800282c <_ZN11TaskHandler11UpdateTasksEv>
	}



}
 80038e0:	bf00      	nop
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40001400 	.word	0x40001400
 80038ec:	20000340 	.word	0x20000340

080038f0 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]

}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <USB_CDC_RX_Interrupt>:
}




void USB_CDC_RX_Interrupt(uint8_t *data, uint32_t length){
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
	appMain.USBCDC.USB_Receive(data, length);
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	4803      	ldr	r0, [pc, #12]	; (8003920 <USB_CDC_RX_Interrupt+0x1c>)
 8003914:	f7ff f9a2 	bl	8002c5c <_ZN6USBCom11USB_ReceiveEPhm>
}
 8003918:	bf00      	nop
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	20000450 	.word	0x20000450

08003924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003928:	b672      	cpsid	i
}
 800392a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800392c:	e7fe      	b.n	800392c <Error_Handler+0x8>
	...

08003930 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d107      	bne.n	8003950 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003946:	4293      	cmp	r3, r2
 8003948:	d102      	bne.n	8003950 <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 800394a:	4803      	ldr	r0, [pc, #12]	; (8003958 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800394c:	f7fc fe1f 	bl	800058e <_ZN7AppMainC1Ev>
}
 8003950:	bf00      	nop
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	20000320 	.word	0x20000320

0800395c <_GLOBAL__sub_I_appMain>:
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
 8003960:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003964:	2001      	movs	r0, #1
 8003966:	f7ff ffe3 	bl	8003930 <_Z41__static_initialization_and_destruction_0ii>
 800396a:	bd80      	pop	{r7, pc}

0800396c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003970:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <MX_SPI3_Init+0x74>)
 8003972:	4a1c      	ldr	r2, [pc, #112]	; (80039e4 <MX_SPI3_Init+0x78>)
 8003974:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003976:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <MX_SPI3_Init+0x74>)
 8003978:	f44f 7282 	mov.w	r2, #260	; 0x104
 800397c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800397e:	4b18      	ldr	r3, [pc, #96]	; (80039e0 <MX_SPI3_Init+0x74>)
 8003980:	2200      	movs	r2, #0
 8003982:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003984:	4b16      	ldr	r3, [pc, #88]	; (80039e0 <MX_SPI3_Init+0x74>)
 8003986:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800398a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800398c:	4b14      	ldr	r3, [pc, #80]	; (80039e0 <MX_SPI3_Init+0x74>)
 800398e:	2200      	movs	r2, #0
 8003990:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003992:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <MX_SPI3_Init+0x74>)
 8003994:	2200      	movs	r2, #0
 8003996:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003998:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <MX_SPI3_Init+0x74>)
 800399a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800399e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80039a0:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <MX_SPI3_Init+0x74>)
 80039a2:	2218      	movs	r2, #24
 80039a4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039a6:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <MX_SPI3_Init+0x74>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <MX_SPI3_Init+0x74>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039b2:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <MX_SPI3_Init+0x74>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80039b8:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <MX_SPI3_Init+0x74>)
 80039ba:	2207      	movs	r2, #7
 80039bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80039be:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <MX_SPI3_Init+0x74>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80039c4:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <MX_SPI3_Init+0x74>)
 80039c6:	2208      	movs	r2, #8
 80039c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80039ca:	4805      	ldr	r0, [pc, #20]	; (80039e0 <MX_SPI3_Init+0x74>)
 80039cc:	f004 feaa 	bl	8008724 <HAL_SPI_Init>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80039d6:	f7ff ffa5 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	20000510 	.word	0x20000510
 80039e4:	40003c00 	.word	0x40003c00

080039e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08a      	sub	sp, #40	; 0x28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f0:	f107 0314 	add.w	r3, r7, #20
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	605a      	str	r2, [r3, #4]
 80039fa:	609a      	str	r2, [r3, #8]
 80039fc:	60da      	str	r2, [r3, #12]
 80039fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a17      	ldr	r2, [pc, #92]	; (8003a64 <HAL_SPI_MspInit+0x7c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d128      	bne.n	8003a5c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003a0a:	4b17      	ldr	r3, [pc, #92]	; (8003a68 <HAL_SPI_MspInit+0x80>)
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0e:	4a16      	ldr	r2, [pc, #88]	; (8003a68 <HAL_SPI_MspInit+0x80>)
 8003a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a14:	6593      	str	r3, [r2, #88]	; 0x58
 8003a16:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <HAL_SPI_MspInit+0x80>)
 8003a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a22:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <HAL_SPI_MspInit+0x80>)
 8003a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a26:	4a10      	ldr	r2, [pc, #64]	; (8003a68 <HAL_SPI_MspInit+0x80>)
 8003a28:	f043 0304 	orr.w	r3, r3, #4
 8003a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a2e:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <HAL_SPI_MspInit+0x80>)
 8003a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003a3a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a40:	2302      	movs	r3, #2
 8003a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003a4c:	2306      	movs	r3, #6
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a50:	f107 0314 	add.w	r3, r7, #20
 8003a54:	4619      	mov	r1, r3
 8003a56:	4805      	ldr	r0, [pc, #20]	; (8003a6c <HAL_SPI_MspInit+0x84>)
 8003a58:	f001 fd58 	bl	800550c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	3728      	adds	r7, #40	; 0x28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40003c00 	.word	0x40003c00
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	48000800 	.word	0x48000800

08003a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a76:	4b0f      	ldr	r3, [pc, #60]	; (8003ab4 <HAL_MspInit+0x44>)
 8003a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a7a:	4a0e      	ldr	r2, [pc, #56]	; (8003ab4 <HAL_MspInit+0x44>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	6613      	str	r3, [r2, #96]	; 0x60
 8003a82:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <HAL_MspInit+0x44>)
 8003a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	607b      	str	r3, [r7, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a8e:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <HAL_MspInit+0x44>)
 8003a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a92:	4a08      	ldr	r2, [pc, #32]	; (8003ab4 <HAL_MspInit+0x44>)
 8003a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a98:	6593      	str	r3, [r2, #88]	; 0x58
 8003a9a:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_MspInit+0x44>)
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40021000 	.word	0x40021000

08003ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003abc:	e7fe      	b.n	8003abc <NMI_Handler+0x4>

08003abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ac2:	e7fe      	b.n	8003ac2 <HardFault_Handler+0x4>

08003ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ac8:	e7fe      	b.n	8003ac8 <MemManage_Handler+0x4>

08003aca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003aca:	b480      	push	{r7}
 8003acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ace:	e7fe      	b.n	8003ace <BusFault_Handler+0x4>

08003ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ad4:	e7fe      	b.n	8003ad4 <UsageFault_Handler+0x4>

08003ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ada:	bf00      	nop
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ae8:	bf00      	nop
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003af2:	b480      	push	{r7}
 8003af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003af6:	bf00      	nop
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b04:	f000 f96a 	bl	8003ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b08:	bf00      	nop
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b10:	4802      	ldr	r0, [pc, #8]	; (8003b1c <DMA1_Channel1_IRQHandler+0x10>)
 8003b12:	f001 fc4b 	bl	80053ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000210 	.word	0x20000210

08003b20 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8003b24:	4802      	ldr	r0, [pc, #8]	; (8003b30 <DMA1_Channel3_IRQHandler+0x10>)
 8003b26:	f001 fc41 	bl	80053ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20000290 	.word	0x20000290

08003b34 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8003b38:	4802      	ldr	r0, [pc, #8]	; (8003b44 <DMA1_Channel4_IRQHandler+0x10>)
 8003b3a:	f001 fc37 	bl	80053ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003b3e:	bf00      	nop
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	200002d8 	.word	0x200002d8

08003b48 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003b4c:	4802      	ldr	r0, [pc, #8]	; (8003b58 <TIM7_IRQHandler+0x10>)
 8003b4e:	f005 fc1d 	bl	800938c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	200005c0 	.word	0x200005c0

08003b5c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003b60:	4802      	ldr	r0, [pc, #8]	; (8003b6c <USB_IRQHandler+0x10>)
 8003b62:	f001 ffd0 	bl	8005b06 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8003b66:	bf00      	nop
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000cdc 	.word	0x20000cdc

08003b70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003b74:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <SystemInit+0x20>)
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7a:	4a05      	ldr	r2, [pc, #20]	; (8003b90 <SystemInit+0x20>)
 8003b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003b84:	bf00      	nop
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	e000ed00 	.word	0xe000ed00

08003b94 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b9a:	1d3b      	adds	r3, r7, #4
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003ba4:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <MX_TIM6_Init+0x64>)
 8003ba6:	4a15      	ldr	r2, [pc, #84]	; (8003bfc <MX_TIM6_Init+0x68>)
 8003ba8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 8003baa:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <MX_TIM6_Init+0x64>)
 8003bac:	220a      	movs	r2, #10
 8003bae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bb0:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <MX_TIM6_Init+0x64>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16000;
 8003bb6:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <MX_TIM6_Init+0x64>)
 8003bb8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003bbc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bbe:	4b0e      	ldr	r3, [pc, #56]	; (8003bf8 <MX_TIM6_Init+0x64>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003bc4:	480c      	ldr	r0, [pc, #48]	; (8003bf8 <MX_TIM6_Init+0x64>)
 8003bc6:	f005 fb35 	bl	8009234 <HAL_TIM_Base_Init>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003bd0:	f7ff fea8 	bl	8003924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003bdc:	1d3b      	adds	r3, r7, #4
 8003bde:	4619      	mov	r1, r3
 8003be0:	4805      	ldr	r0, [pc, #20]	; (8003bf8 <MX_TIM6_Init+0x64>)
 8003be2:	f005 fd75 	bl	80096d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003bec:	f7ff fe9a 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20000574 	.word	0x20000574
 8003bfc:	40001000 	.word	0x40001000

08003c00 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c06:	1d3b      	adds	r3, r7, #4
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	605a      	str	r2, [r3, #4]
 8003c0e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003c10:	4b14      	ldr	r3, [pc, #80]	; (8003c64 <MX_TIM7_Init+0x64>)
 8003c12:	4a15      	ldr	r2, [pc, #84]	; (8003c68 <MX_TIM7_Init+0x68>)
 8003c14:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10;
 8003c16:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <MX_TIM7_Init+0x64>)
 8003c18:	220a      	movs	r2, #10
 8003c1a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c1c:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <MX_TIM7_Init+0x64>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7199;
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <MX_TIM7_Init+0x64>)
 8003c24:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003c28:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c2a:	4b0e      	ldr	r3, [pc, #56]	; (8003c64 <MX_TIM7_Init+0x64>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003c30:	480c      	ldr	r0, [pc, #48]	; (8003c64 <MX_TIM7_Init+0x64>)
 8003c32:	f005 faff 	bl	8009234 <HAL_TIM_Base_Init>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003c3c:	f7ff fe72 	bl	8003924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003c40:	2320      	movs	r3, #32
 8003c42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003c48:	1d3b      	adds	r3, r7, #4
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4805      	ldr	r0, [pc, #20]	; (8003c64 <MX_TIM7_Init+0x64>)
 8003c4e:	f005 fd3f 	bl	80096d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003c58:	f7ff fe64 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003c5c:	bf00      	nop
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	200005c0 	.word	0x200005c0
 8003c68:	40001400 	.word	0x40001400

08003c6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a16      	ldr	r2, [pc, #88]	; (8003cd4 <HAL_TIM_Base_MspInit+0x68>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d10c      	bne.n	8003c98 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003c7e:	4b16      	ldr	r3, [pc, #88]	; (8003cd8 <HAL_TIM_Base_MspInit+0x6c>)
 8003c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c82:	4a15      	ldr	r2, [pc, #84]	; (8003cd8 <HAL_TIM_Base_MspInit+0x6c>)
 8003c84:	f043 0310 	orr.w	r3, r3, #16
 8003c88:	6593      	str	r3, [r2, #88]	; 0x58
 8003c8a:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <HAL_TIM_Base_MspInit+0x6c>)
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8e:	f003 0310 	and.w	r3, r3, #16
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003c96:	e018      	b.n	8003cca <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a0f      	ldr	r2, [pc, #60]	; (8003cdc <HAL_TIM_Base_MspInit+0x70>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d113      	bne.n	8003cca <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003ca2:	4b0d      	ldr	r3, [pc, #52]	; (8003cd8 <HAL_TIM_Base_MspInit+0x6c>)
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca6:	4a0c      	ldr	r2, [pc, #48]	; (8003cd8 <HAL_TIM_Base_MspInit+0x6c>)
 8003ca8:	f043 0320 	orr.w	r3, r3, #32
 8003cac:	6593      	str	r3, [r2, #88]	; 0x58
 8003cae:	4b0a      	ldr	r3, [pc, #40]	; (8003cd8 <HAL_TIM_Base_MspInit+0x6c>)
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	2037      	movs	r0, #55	; 0x37
 8003cc0:	f001 f85f 	bl	8004d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003cc4:	2037      	movs	r0, #55	; 0x37
 8003cc6:	f001 f878 	bl	8004dba <HAL_NVIC_EnableIRQ>
}
 8003cca:	bf00      	nop
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40001000 	.word	0x40001000
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	40001400 	.word	0x40001400

08003ce0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003ce0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ce4:	f7ff ff44 	bl	8003b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ce8:	480c      	ldr	r0, [pc, #48]	; (8003d1c <LoopForever+0x6>)
  ldr r1, =_edata
 8003cea:	490d      	ldr	r1, [pc, #52]	; (8003d20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003cec:	4a0d      	ldr	r2, [pc, #52]	; (8003d24 <LoopForever+0xe>)
  movs r3, #0
 8003cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cf0:	e002      	b.n	8003cf8 <LoopCopyDataInit>

08003cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cf6:	3304      	adds	r3, #4

08003cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cfc:	d3f9      	bcc.n	8003cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cfe:	4a0a      	ldr	r2, [pc, #40]	; (8003d28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d00:	4c0a      	ldr	r4, [pc, #40]	; (8003d2c <LoopForever+0x16>)
  movs r3, #0
 8003d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d04:	e001      	b.n	8003d0a <LoopFillZerobss>

08003d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d08:	3204      	adds	r2, #4

08003d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d0c:	d3fb      	bcc.n	8003d06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d0e:	f00a fa97 	bl	800e240 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d12:	f7ff fd57 	bl	80037c4 <main>

08003d16 <LoopForever>:

LoopForever:
    b LoopForever
 8003d16:	e7fe      	b.n	8003d16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003d18:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d20:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8003d24:	0800e368 	.word	0x0800e368
  ldr r2, =_sbss
 8003d28:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8003d2c:	200011f8 	.word	0x200011f8

08003d30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d30:	e7fe      	b.n	8003d30 <ADC1_IRQHandler>

08003d32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d3c:	2003      	movs	r0, #3
 8003d3e:	f001 f815 	bl	8004d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d42:	200f      	movs	r0, #15
 8003d44:	f000 f80e 	bl	8003d64 <HAL_InitTick>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	71fb      	strb	r3, [r7, #7]
 8003d52:	e001      	b.n	8003d58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d54:	f7ff fe8c 	bl	8003a70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d58:	79fb      	ldrb	r3, [r7, #7]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003d70:	4b17      	ldr	r3, [pc, #92]	; (8003dd0 <HAL_InitTick+0x6c>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d023      	beq.n	8003dc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003d78:	4b16      	ldr	r3, [pc, #88]	; (8003dd4 <HAL_InitTick+0x70>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <HAL_InitTick+0x6c>)
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	4619      	mov	r1, r3
 8003d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f001 f821 	bl	8004dd6 <HAL_SYSTICK_Config>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10f      	bne.n	8003dba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b0f      	cmp	r3, #15
 8003d9e:	d809      	bhi.n	8003db4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003da0:	2200      	movs	r2, #0
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	f04f 30ff 	mov.w	r0, #4294967295
 8003da8:	f000 ffeb 	bl	8004d82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003dac:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <HAL_InitTick+0x74>)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	e007      	b.n	8003dc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
 8003db8:	e004      	b.n	8003dc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	73fb      	strb	r3, [r7, #15]
 8003dbe:	e001      	b.n	8003dc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000008 	.word	0x20000008
 8003dd4:	20000000 	.word	0x20000000
 8003dd8:	20000004 	.word	0x20000004

08003ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003de0:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <HAL_IncTick+0x20>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	461a      	mov	r2, r3
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_IncTick+0x24>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4413      	add	r3, r2
 8003dec:	4a04      	ldr	r2, [pc, #16]	; (8003e00 <HAL_IncTick+0x24>)
 8003dee:	6013      	str	r3, [r2, #0]
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	20000008 	.word	0x20000008
 8003e00:	2000060c 	.word	0x2000060c

08003e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  return uwTick;
 8003e08:	4b03      	ldr	r3, [pc, #12]	; (8003e18 <HAL_GetTick+0x14>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	2000060c 	.word	0x2000060c

08003e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e24:	f7ff ffee 	bl	8003e04 <HAL_GetTick>
 8003e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e34:	d005      	beq.n	8003e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003e36:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <HAL_Delay+0x44>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4413      	add	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e42:	bf00      	nop
 8003e44:	f7ff ffde 	bl	8003e04 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d8f7      	bhi.n	8003e44 <HAL_Delay+0x28>
  {
  }
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000008 	.word	0x20000008

08003e64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	609a      	str	r2, [r3, #8]
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	609a      	str	r2, [r3, #8]
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	3360      	adds	r3, #96	; 0x60
 8003ede:	461a      	mov	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <LL_ADC_SetOffset+0x44>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003f04:	bf00      	nop
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	03fff000 	.word	0x03fff000

08003f14 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3360      	adds	r3, #96	; 0x60
 8003f22:	461a      	mov	r2, r3
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	3360      	adds	r3, #96	; 0x60
 8003f50:	461a      	mov	r2, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	431a      	orrs	r2, r3
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003f6a:	bf00      	nop
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b087      	sub	sp, #28
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	3330      	adds	r3, #48	; 0x30
 8003f86:	461a      	mov	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	0a1b      	lsrs	r3, r3, #8
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	f003 030c 	and.w	r3, r3, #12
 8003f92:	4413      	add	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	211f      	movs	r1, #31
 8003fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	401a      	ands	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	0e9b      	lsrs	r3, r3, #26
 8003fae:	f003 011f 	and.w	r1, r3, #31
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f003 031f 	and.w	r3, r3, #31
 8003fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003fc2:	bf00      	nop
 8003fc4:	371c      	adds	r7, #28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b087      	sub	sp, #28
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	3314      	adds	r3, #20
 8003fde:	461a      	mov	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	0e5b      	lsrs	r3, r3, #25
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	4413      	add	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	0d1b      	lsrs	r3, r3, #20
 8003ff6:	f003 031f 	and.w	r3, r3, #31
 8003ffa:	2107      	movs	r1, #7
 8003ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	401a      	ands	r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	0d1b      	lsrs	r3, r3, #20
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	fa01 f303 	lsl.w	r3, r1, r3
 8004012:	431a      	orrs	r2, r3
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004018:	bf00      	nop
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800403c:	43db      	mvns	r3, r3
 800403e:	401a      	ands	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f003 0318 	and.w	r3, r3, #24
 8004046:	4908      	ldr	r1, [pc, #32]	; (8004068 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004048:	40d9      	lsrs	r1, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	400b      	ands	r3, r1
 800404e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004052:	431a      	orrs	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800405a:	bf00      	nop
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	0007ffff 	.word	0x0007ffff

0800406c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800407c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6093      	str	r3, [r2, #8]
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040a4:	d101      	bne.n	80040aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80040c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040f4:	d101      	bne.n	80040fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <LL_ADC_IsEnabled+0x18>
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <LL_ADC_IsEnabled+0x1a>
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	2b04      	cmp	r3, #4
 8004140:	d101      	bne.n	8004146 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b08      	cmp	r3, #8
 8004166:	d101      	bne.n	800416c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004168:	2301      	movs	r3, #1
 800416a:	e000      	b.n	800416e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
	...

0800417c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004188:	2300      	movs	r3, #0
 800418a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e12c      	b.n	80043f0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d109      	bne.n	80041b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff f84f 	bl	8003248 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff ff67 	bl	8004090 <LL_ADC_IsDeepPowerDownEnabled>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d004      	beq.n	80041d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff ff4d 	bl	800406c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff ff82 	bl	80040e0 <LL_ADC_IsInternalRegulatorEnabled>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d115      	bne.n	800420e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff ff66 	bl	80040b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041ec:	4b82      	ldr	r3, [pc, #520]	; (80043f8 <HAL_ADC_Init+0x27c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	099b      	lsrs	r3, r3, #6
 80041f2:	4a82      	ldr	r2, [pc, #520]	; (80043fc <HAL_ADC_Init+0x280>)
 80041f4:	fba2 2303 	umull	r2, r3, r2, r3
 80041f8:	099b      	lsrs	r3, r3, #6
 80041fa:	3301      	adds	r3, #1
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004200:	e002      	b.n	8004208 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	3b01      	subs	r3, #1
 8004206:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f9      	bne.n	8004202 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff ff64 	bl	80040e0 <LL_ADC_IsInternalRegulatorEnabled>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10d      	bne.n	800423a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004222:	f043 0210 	orr.w	r2, r3, #16
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422e:	f043 0201 	orr.w	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff ff75 	bl	800412e <LL_ADC_REG_IsConversionOngoing>
 8004244:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	f003 0310 	and.w	r3, r3, #16
 800424e:	2b00      	cmp	r3, #0
 8004250:	f040 80c5 	bne.w	80043de <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	2b00      	cmp	r3, #0
 8004258:	f040 80c1 	bne.w	80043de <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004260:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004264:	f043 0202 	orr.w	r2, r3, #2
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff ff49 	bl	8004108 <LL_ADC_IsEnabled>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10b      	bne.n	8004294 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800427c:	4860      	ldr	r0, [pc, #384]	; (8004400 <HAL_ADC_Init+0x284>)
 800427e:	f7ff ff43 	bl	8004108 <LL_ADC_IsEnabled>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d105      	bne.n	8004294 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	4619      	mov	r1, r3
 800428e:	485d      	ldr	r0, [pc, #372]	; (8004404 <HAL_ADC_Init+0x288>)
 8004290:	f7ff fde8 	bl	8003e64 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	7e5b      	ldrb	r3, [r3, #25]
 8004298:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800429e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80042a4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80042aa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042b2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042b4:	4313      	orrs	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d106      	bne.n	80042d0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	3b01      	subs	r3, #1
 80042c8:	045b      	lsls	r3, r3, #17
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d009      	beq.n	80042ec <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042dc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	4b45      	ldr	r3, [pc, #276]	; (8004408 <HAL_ADC_Init+0x28c>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	69b9      	ldr	r1, [r7, #24]
 80042fc:	430b      	orrs	r3, r1
 80042fe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff ff12 	bl	800412e <LL_ADC_REG_IsConversionOngoing>
 800430a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff ff1f 	bl	8004154 <LL_ADC_INJ_IsConversionOngoing>
 8004316:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d13d      	bne.n	800439a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d13a      	bne.n	800439a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004328:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004330:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004332:	4313      	orrs	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004340:	f023 0302 	bic.w	r3, r3, #2
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6812      	ldr	r2, [r2, #0]
 8004348:	69b9      	ldr	r1, [r7, #24]
 800434a:	430b      	orrs	r3, r1
 800434c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004354:	2b01      	cmp	r3, #1
 8004356:	d118      	bne.n	800438a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004362:	f023 0304 	bic.w	r3, r3, #4
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800436e:	4311      	orrs	r1, r2
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004374:	4311      	orrs	r1, r2
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800437a:	430a      	orrs	r2, r1
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	611a      	str	r2, [r3, #16]
 8004388:	e007      	b.n	800439a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0201 	bic.w	r2, r2, #1
 8004398:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d10c      	bne.n	80043bc <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a8:	f023 010f 	bic.w	r1, r3, #15
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	1e5a      	subs	r2, r3, #1
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	631a      	str	r2, [r3, #48]	; 0x30
 80043ba:	e007      	b.n	80043cc <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 020f 	bic.w	r2, r2, #15
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d0:	f023 0303 	bic.w	r3, r3, #3
 80043d4:	f043 0201 	orr.w	r2, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	655a      	str	r2, [r3, #84]	; 0x54
 80043dc:	e007      	b.n	80043ee <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e2:	f043 0210 	orr.w	r2, r3, #16
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80043ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3720      	adds	r7, #32
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	20000000 	.word	0x20000000
 80043fc:	053e2d63 	.word	0x053e2d63
 8004400:	50040000 	.word	0x50040000
 8004404:	50040300 	.word	0x50040300
 8004408:	fff0c007 	.word	0xfff0c007

0800440c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b0b6      	sub	sp, #216	; 0xd8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800441c:	2300      	movs	r3, #0
 800441e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <HAL_ADC_ConfigChannel+0x22>
 800442a:	2302      	movs	r3, #2
 800442c:	e3b9      	b.n	8004ba2 <HAL_ADC_ConfigChannel+0x796>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff fe77 	bl	800412e <LL_ADC_REG_IsConversionOngoing>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	f040 839e 	bne.w	8004b84 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b05      	cmp	r3, #5
 800444e:	d824      	bhi.n	800449a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	3b02      	subs	r3, #2
 8004456:	2b03      	cmp	r3, #3
 8004458:	d81b      	bhi.n	8004492 <HAL_ADC_ConfigChannel+0x86>
 800445a:	a201      	add	r2, pc, #4	; (adr r2, 8004460 <HAL_ADC_ConfigChannel+0x54>)
 800445c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004460:	08004471 	.word	0x08004471
 8004464:	08004479 	.word	0x08004479
 8004468:	08004481 	.word	0x08004481
 800446c:	08004489 	.word	0x08004489
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	220c      	movs	r2, #12
 8004474:	605a      	str	r2, [r3, #4]
          break;
 8004476:	e011      	b.n	800449c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2212      	movs	r2, #18
 800447c:	605a      	str	r2, [r3, #4]
          break;
 800447e:	e00d      	b.n	800449c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2218      	movs	r2, #24
 8004484:	605a      	str	r2, [r3, #4]
          break;
 8004486:	e009      	b.n	800449c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800448e:	605a      	str	r2, [r3, #4]
          break;
 8004490:	e004      	b.n	800449c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2206      	movs	r2, #6
 8004496:	605a      	str	r2, [r3, #4]
          break;
 8004498:	e000      	b.n	800449c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800449a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6818      	ldr	r0, [r3, #0]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	6859      	ldr	r1, [r3, #4]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	f7ff fd64 	bl	8003f76 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff fe3b 	bl	800412e <LL_ADC_REG_IsConversionOngoing>
 80044b8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff fe47 	bl	8004154 <LL_ADC_INJ_IsConversionOngoing>
 80044c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f040 81a6 	bne.w	8004820 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f040 81a1 	bne.w	8004820 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	6819      	ldr	r1, [r3, #0]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	461a      	mov	r2, r3
 80044ec:	f7ff fd6f 	bl	8003fce <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	695a      	ldr	r2, [r3, #20]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	08db      	lsrs	r3, r3, #3
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	2b04      	cmp	r3, #4
 8004510:	d00a      	beq.n	8004528 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	6919      	ldr	r1, [r3, #16]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004522:	f7ff fcd3 	bl	8003ecc <LL_ADC_SetOffset>
 8004526:	e17b      	b.n	8004820 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2100      	movs	r1, #0
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff fcf0 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 8004534:	4603      	mov	r3, r0
 8004536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10a      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x148>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2100      	movs	r1, #0
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff fce5 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 800454a:	4603      	mov	r3, r0
 800454c:	0e9b      	lsrs	r3, r3, #26
 800454e:	f003 021f 	and.w	r2, r3, #31
 8004552:	e01e      	b.n	8004592 <HAL_ADC_ConfigChannel+0x186>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2100      	movs	r1, #0
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fcda 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 8004560:	4603      	mov	r3, r0
 8004562:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004566:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800456a:	fa93 f3a3 	rbit	r3, r3
 800456e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004572:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004576:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800457a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8004582:	2320      	movs	r3, #32
 8004584:	e004      	b.n	8004590 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004586:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800458a:	fab3 f383 	clz	r3, r3
 800458e:	b2db      	uxtb	r3, r3
 8004590:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800459a:	2b00      	cmp	r3, #0
 800459c:	d105      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x19e>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	0e9b      	lsrs	r3, r3, #26
 80045a4:	f003 031f 	and.w	r3, r3, #31
 80045a8:	e018      	b.n	80045dc <HAL_ADC_ConfigChannel+0x1d0>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80045b6:	fa93 f3a3 	rbit	r3, r3
 80045ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80045be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80045c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80045ce:	2320      	movs	r3, #32
 80045d0:	e004      	b.n	80045dc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80045d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80045d6:	fab3 f383 	clz	r3, r3
 80045da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80045dc:	429a      	cmp	r2, r3
 80045de:	d106      	bne.n	80045ee <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2200      	movs	r2, #0
 80045e6:	2100      	movs	r1, #0
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff fca9 	bl	8003f40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2101      	movs	r1, #1
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff fc8d 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10a      	bne.n	800461a <HAL_ADC_ConfigChannel+0x20e>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2101      	movs	r1, #1
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff fc82 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 8004610:	4603      	mov	r3, r0
 8004612:	0e9b      	lsrs	r3, r3, #26
 8004614:	f003 021f 	and.w	r2, r3, #31
 8004618:	e01e      	b.n	8004658 <HAL_ADC_ConfigChannel+0x24c>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2101      	movs	r1, #1
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff fc77 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 8004626:	4603      	mov	r3, r0
 8004628:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004630:	fa93 f3a3 	rbit	r3, r3
 8004634:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004638:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800463c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004640:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004648:	2320      	movs	r3, #32
 800464a:	e004      	b.n	8004656 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800464c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004650:	fab3 f383 	clz	r3, r3
 8004654:	b2db      	uxtb	r3, r3
 8004656:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004660:	2b00      	cmp	r3, #0
 8004662:	d105      	bne.n	8004670 <HAL_ADC_ConfigChannel+0x264>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	0e9b      	lsrs	r3, r3, #26
 800466a:	f003 031f 	and.w	r3, r3, #31
 800466e:	e018      	b.n	80046a2 <HAL_ADC_ConfigChannel+0x296>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004678:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800467c:	fa93 f3a3 	rbit	r3, r3
 8004680:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004684:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004688:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800468c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004694:	2320      	movs	r3, #32
 8004696:	e004      	b.n	80046a2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004698:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800469c:	fab3 f383 	clz	r3, r3
 80046a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d106      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2200      	movs	r2, #0
 80046ac:	2101      	movs	r1, #1
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff fc46 	bl	8003f40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2102      	movs	r1, #2
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff fc2a 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10a      	bne.n	80046e0 <HAL_ADC_ConfigChannel+0x2d4>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2102      	movs	r1, #2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff fc1f 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 80046d6:	4603      	mov	r3, r0
 80046d8:	0e9b      	lsrs	r3, r3, #26
 80046da:	f003 021f 	and.w	r2, r3, #31
 80046de:	e01e      	b.n	800471e <HAL_ADC_ConfigChannel+0x312>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2102      	movs	r1, #2
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff fc14 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 80046ec:	4603      	mov	r3, r0
 80046ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046f6:	fa93 f3a3 	rbit	r3, r3
 80046fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80046fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004702:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004706:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800470e:	2320      	movs	r3, #32
 8004710:	e004      	b.n	800471c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004712:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004716:	fab3 f383 	clz	r3, r3
 800471a:	b2db      	uxtb	r3, r3
 800471c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004726:	2b00      	cmp	r3, #0
 8004728:	d105      	bne.n	8004736 <HAL_ADC_ConfigChannel+0x32a>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	0e9b      	lsrs	r3, r3, #26
 8004730:	f003 031f 	and.w	r3, r3, #31
 8004734:	e016      	b.n	8004764 <HAL_ADC_ConfigChannel+0x358>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004742:	fa93 f3a3 	rbit	r3, r3
 8004746:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004748:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800474a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800474e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004756:	2320      	movs	r3, #32
 8004758:	e004      	b.n	8004764 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800475a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800475e:	fab3 f383 	clz	r3, r3
 8004762:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004764:	429a      	cmp	r2, r3
 8004766:	d106      	bne.n	8004776 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2200      	movs	r2, #0
 800476e:	2102      	movs	r1, #2
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff fbe5 	bl	8003f40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2103      	movs	r1, #3
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff fbc9 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 8004782:	4603      	mov	r3, r0
 8004784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10a      	bne.n	80047a2 <HAL_ADC_ConfigChannel+0x396>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2103      	movs	r1, #3
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff fbbe 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 8004798:	4603      	mov	r3, r0
 800479a:	0e9b      	lsrs	r3, r3, #26
 800479c:	f003 021f 	and.w	r2, r3, #31
 80047a0:	e017      	b.n	80047d2 <HAL_ADC_ConfigChannel+0x3c6>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2103      	movs	r1, #3
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fbb3 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 80047ae:	4603      	mov	r3, r0
 80047b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047b4:	fa93 f3a3 	rbit	r3, r3
 80047b8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80047ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047bc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80047be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80047c4:	2320      	movs	r3, #32
 80047c6:	e003      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80047c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047ca:	fab3 f383 	clz	r3, r3
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d105      	bne.n	80047ea <HAL_ADC_ConfigChannel+0x3de>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	0e9b      	lsrs	r3, r3, #26
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	e011      	b.n	800480e <HAL_ADC_ConfigChannel+0x402>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047f2:	fa93 f3a3 	rbit	r3, r3
 80047f6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80047f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80047fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004802:	2320      	movs	r3, #32
 8004804:	e003      	b.n	800480e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004808:	fab3 f383 	clz	r3, r3
 800480c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800480e:	429a      	cmp	r2, r3
 8004810:	d106      	bne.n	8004820 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2200      	movs	r2, #0
 8004818:	2103      	movs	r1, #3
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff fb90 	bl	8003f40 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fc6f 	bl	8004108 <LL_ADC_IsEnabled>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	f040 813f 	bne.w	8004ab0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6819      	ldr	r1, [r3, #0]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	461a      	mov	r2, r3
 8004840:	f7ff fbf0 	bl	8004024 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	4a8e      	ldr	r2, [pc, #568]	; (8004a84 <HAL_ADC_ConfigChannel+0x678>)
 800484a:	4293      	cmp	r3, r2
 800484c:	f040 8130 	bne.w	8004ab0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10b      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x46c>
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	0e9b      	lsrs	r3, r3, #26
 8004866:	3301      	adds	r3, #1
 8004868:	f003 031f 	and.w	r3, r3, #31
 800486c:	2b09      	cmp	r3, #9
 800486e:	bf94      	ite	ls
 8004870:	2301      	movls	r3, #1
 8004872:	2300      	movhi	r3, #0
 8004874:	b2db      	uxtb	r3, r3
 8004876:	e019      	b.n	80048ac <HAL_ADC_ConfigChannel+0x4a0>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004880:	fa93 f3a3 	rbit	r3, r3
 8004884:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004886:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004888:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800488a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004890:	2320      	movs	r3, #32
 8004892:	e003      	b.n	800489c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004894:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004896:	fab3 f383 	clz	r3, r3
 800489a:	b2db      	uxtb	r3, r3
 800489c:	3301      	adds	r3, #1
 800489e:	f003 031f 	and.w	r3, r3, #31
 80048a2:	2b09      	cmp	r3, #9
 80048a4:	bf94      	ite	ls
 80048a6:	2301      	movls	r3, #1
 80048a8:	2300      	movhi	r3, #0
 80048aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d079      	beq.n	80049a4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d107      	bne.n	80048cc <HAL_ADC_ConfigChannel+0x4c0>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	0e9b      	lsrs	r3, r3, #26
 80048c2:	3301      	adds	r3, #1
 80048c4:	069b      	lsls	r3, r3, #26
 80048c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048ca:	e015      	b.n	80048f8 <HAL_ADC_ConfigChannel+0x4ec>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048d4:	fa93 f3a3 	rbit	r3, r3
 80048d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80048da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80048de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80048e4:	2320      	movs	r3, #32
 80048e6:	e003      	b.n	80048f0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80048e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ea:	fab3 f383 	clz	r3, r3
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	3301      	adds	r3, #1
 80048f2:	069b      	lsls	r3, r3, #26
 80048f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004900:	2b00      	cmp	r3, #0
 8004902:	d109      	bne.n	8004918 <HAL_ADC_ConfigChannel+0x50c>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	0e9b      	lsrs	r3, r3, #26
 800490a:	3301      	adds	r3, #1
 800490c:	f003 031f 	and.w	r3, r3, #31
 8004910:	2101      	movs	r1, #1
 8004912:	fa01 f303 	lsl.w	r3, r1, r3
 8004916:	e017      	b.n	8004948 <HAL_ADC_ConfigChannel+0x53c>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004920:	fa93 f3a3 	rbit	r3, r3
 8004924:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004928:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800492a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004930:	2320      	movs	r3, #32
 8004932:	e003      	b.n	800493c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004936:	fab3 f383 	clz	r3, r3
 800493a:	b2db      	uxtb	r3, r3
 800493c:	3301      	adds	r3, #1
 800493e:	f003 031f 	and.w	r3, r3, #31
 8004942:	2101      	movs	r1, #1
 8004944:	fa01 f303 	lsl.w	r3, r1, r3
 8004948:	ea42 0103 	orr.w	r1, r2, r3
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10a      	bne.n	800496e <HAL_ADC_ConfigChannel+0x562>
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	0e9b      	lsrs	r3, r3, #26
 800495e:	3301      	adds	r3, #1
 8004960:	f003 021f 	and.w	r2, r3, #31
 8004964:	4613      	mov	r3, r2
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	4413      	add	r3, r2
 800496a:	051b      	lsls	r3, r3, #20
 800496c:	e018      	b.n	80049a0 <HAL_ADC_ConfigChannel+0x594>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004976:	fa93 f3a3 	rbit	r3, r3
 800497a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800497c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004986:	2320      	movs	r3, #32
 8004988:	e003      	b.n	8004992 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800498a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800498c:	fab3 f383 	clz	r3, r3
 8004990:	b2db      	uxtb	r3, r3
 8004992:	3301      	adds	r3, #1
 8004994:	f003 021f 	and.w	r2, r3, #31
 8004998:	4613      	mov	r3, r2
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	4413      	add	r3, r2
 800499e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049a0:	430b      	orrs	r3, r1
 80049a2:	e080      	b.n	8004aa6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d107      	bne.n	80049c0 <HAL_ADC_ConfigChannel+0x5b4>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	0e9b      	lsrs	r3, r3, #26
 80049b6:	3301      	adds	r3, #1
 80049b8:	069b      	lsls	r3, r3, #26
 80049ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049be:	e015      	b.n	80049ec <HAL_ADC_ConfigChannel+0x5e0>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c8:	fa93 f3a3 	rbit	r3, r3
 80049cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80049ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80049d8:	2320      	movs	r3, #32
 80049da:	e003      	b.n	80049e4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80049dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049de:	fab3 f383 	clz	r3, r3
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	3301      	adds	r3, #1
 80049e6:	069b      	lsls	r3, r3, #26
 80049e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d109      	bne.n	8004a0c <HAL_ADC_ConfigChannel+0x600>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	0e9b      	lsrs	r3, r3, #26
 80049fe:	3301      	adds	r3, #1
 8004a00:	f003 031f 	and.w	r3, r3, #31
 8004a04:	2101      	movs	r1, #1
 8004a06:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0a:	e017      	b.n	8004a3c <HAL_ADC_ConfigChannel+0x630>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	fa93 f3a3 	rbit	r3, r3
 8004a18:	61fb      	str	r3, [r7, #28]
  return result;
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004a24:	2320      	movs	r3, #32
 8004a26:	e003      	b.n	8004a30 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	fab3 f383 	clz	r3, r3
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	3301      	adds	r3, #1
 8004a32:	f003 031f 	and.w	r3, r3, #31
 8004a36:	2101      	movs	r1, #1
 8004a38:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3c:	ea42 0103 	orr.w	r1, r2, r3
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10d      	bne.n	8004a68 <HAL_ADC_ConfigChannel+0x65c>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	0e9b      	lsrs	r3, r3, #26
 8004a52:	3301      	adds	r3, #1
 8004a54:	f003 021f 	and.w	r2, r3, #31
 8004a58:	4613      	mov	r3, r2
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	4413      	add	r3, r2
 8004a5e:	3b1e      	subs	r3, #30
 8004a60:	051b      	lsls	r3, r3, #20
 8004a62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a66:	e01d      	b.n	8004aa4 <HAL_ADC_ConfigChannel+0x698>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	fa93 f3a3 	rbit	r3, r3
 8004a74:	613b      	str	r3, [r7, #16]
  return result;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d103      	bne.n	8004a88 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004a80:	2320      	movs	r3, #32
 8004a82:	e005      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x684>
 8004a84:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	fab3 f383 	clz	r3, r3
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	3301      	adds	r3, #1
 8004a92:	f003 021f 	and.w	r2, r3, #31
 8004a96:	4613      	mov	r3, r2
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	4413      	add	r3, r2
 8004a9c:	3b1e      	subs	r3, #30
 8004a9e:	051b      	lsls	r3, r3, #20
 8004aa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004aa4:	430b      	orrs	r3, r1
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	6892      	ldr	r2, [r2, #8]
 8004aaa:	4619      	mov	r1, r3
 8004aac:	f7ff fa8f 	bl	8003fce <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	4b3d      	ldr	r3, [pc, #244]	; (8004bac <HAL_ADC_ConfigChannel+0x7a0>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d06c      	beq.n	8004b96 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004abc:	483c      	ldr	r0, [pc, #240]	; (8004bb0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004abe:	f7ff f9f7 	bl	8003eb0 <LL_ADC_GetCommonPathInternalCh>
 8004ac2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a3a      	ldr	r2, [pc, #232]	; (8004bb4 <HAL_ADC_ConfigChannel+0x7a8>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d127      	bne.n	8004b20 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ad0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ad4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d121      	bne.n	8004b20 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a35      	ldr	r2, [pc, #212]	; (8004bb8 <HAL_ADC_ConfigChannel+0x7ac>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d157      	bne.n	8004b96 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ae6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004aea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004aee:	4619      	mov	r1, r3
 8004af0:	482f      	ldr	r0, [pc, #188]	; (8004bb0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004af2:	f7ff f9ca 	bl	8003e8a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004af6:	4b31      	ldr	r3, [pc, #196]	; (8004bbc <HAL_ADC_ConfigChannel+0x7b0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	099b      	lsrs	r3, r3, #6
 8004afc:	4a30      	ldr	r2, [pc, #192]	; (8004bc0 <HAL_ADC_ConfigChannel+0x7b4>)
 8004afe:	fba2 2303 	umull	r2, r3, r2, r3
 8004b02:	099b      	lsrs	r3, r3, #6
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	4613      	mov	r3, r2
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	4413      	add	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004b10:	e002      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3b01      	subs	r3, #1
 8004b16:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1f9      	bne.n	8004b12 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b1e:	e03a      	b.n	8004b96 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a27      	ldr	r2, [pc, #156]	; (8004bc4 <HAL_ADC_ConfigChannel+0x7b8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d113      	bne.n	8004b52 <HAL_ADC_ConfigChannel+0x746>
 8004b2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10d      	bne.n	8004b52 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a1f      	ldr	r2, [pc, #124]	; (8004bb8 <HAL_ADC_ConfigChannel+0x7ac>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d12a      	bne.n	8004b96 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4819      	ldr	r0, [pc, #100]	; (8004bb0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004b4c:	f7ff f99d 	bl	8003e8a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b50:	e021      	b.n	8004b96 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a1c      	ldr	r2, [pc, #112]	; (8004bc8 <HAL_ADC_ConfigChannel+0x7bc>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d11c      	bne.n	8004b96 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d116      	bne.n	8004b96 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a12      	ldr	r2, [pc, #72]	; (8004bb8 <HAL_ADC_ConfigChannel+0x7ac>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d111      	bne.n	8004b96 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	480c      	ldr	r0, [pc, #48]	; (8004bb0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004b7e:	f7ff f984 	bl	8003e8a <LL_ADC_SetCommonPathInternalCh>
 8004b82:	e008      	b.n	8004b96 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b88:	f043 0220 	orr.w	r2, r3, #32
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004b9e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	37d8      	adds	r7, #216	; 0xd8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	80080000 	.word	0x80080000
 8004bb0:	50040300 	.word	0x50040300
 8004bb4:	c7520000 	.word	0xc7520000
 8004bb8:	50040000 	.word	0x50040000
 8004bbc:	20000000 	.word	0x20000000
 8004bc0:	053e2d63 	.word	0x053e2d63
 8004bc4:	cb840000 	.word	0xcb840000
 8004bc8:	80000001 	.word	0x80000001

08004bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bdc:	4b0c      	ldr	r3, [pc, #48]	; (8004c10 <__NVIC_SetPriorityGrouping+0x44>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004be8:	4013      	ands	r3, r2
 8004bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bfe:	4a04      	ldr	r2, [pc, #16]	; (8004c10 <__NVIC_SetPriorityGrouping+0x44>)
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	60d3      	str	r3, [r2, #12]
}
 8004c04:	bf00      	nop
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	e000ed00 	.word	0xe000ed00

08004c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c18:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <__NVIC_GetPriorityGrouping+0x18>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	0a1b      	lsrs	r3, r3, #8
 8004c1e:	f003 0307 	and.w	r3, r3, #7
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	e000ed00 	.word	0xe000ed00

08004c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	db0b      	blt.n	8004c5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c42:	79fb      	ldrb	r3, [r7, #7]
 8004c44:	f003 021f 	and.w	r2, r3, #31
 8004c48:	4907      	ldr	r1, [pc, #28]	; (8004c68 <__NVIC_EnableIRQ+0x38>)
 8004c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4e:	095b      	lsrs	r3, r3, #5
 8004c50:	2001      	movs	r0, #1
 8004c52:	fa00 f202 	lsl.w	r2, r0, r2
 8004c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	e000e100 	.word	0xe000e100

08004c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4603      	mov	r3, r0
 8004c74:	6039      	str	r1, [r7, #0]
 8004c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	db0a      	blt.n	8004c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	490c      	ldr	r1, [pc, #48]	; (8004cb8 <__NVIC_SetPriority+0x4c>)
 8004c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8a:	0112      	lsls	r2, r2, #4
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	440b      	add	r3, r1
 8004c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c94:	e00a      	b.n	8004cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	4908      	ldr	r1, [pc, #32]	; (8004cbc <__NVIC_SetPriority+0x50>)
 8004c9c:	79fb      	ldrb	r3, [r7, #7]
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	3b04      	subs	r3, #4
 8004ca4:	0112      	lsls	r2, r2, #4
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	440b      	add	r3, r1
 8004caa:	761a      	strb	r2, [r3, #24]
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	e000e100 	.word	0xe000e100
 8004cbc:	e000ed00 	.word	0xe000ed00

08004cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b089      	sub	sp, #36	; 0x24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	f1c3 0307 	rsb	r3, r3, #7
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	bf28      	it	cs
 8004cde:	2304      	movcs	r3, #4
 8004ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	2b06      	cmp	r3, #6
 8004ce8:	d902      	bls.n	8004cf0 <NVIC_EncodePriority+0x30>
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	3b03      	subs	r3, #3
 8004cee:	e000      	b.n	8004cf2 <NVIC_EncodePriority+0x32>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	43da      	mvns	r2, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	401a      	ands	r2, r3
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d08:	f04f 31ff 	mov.w	r1, #4294967295
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d12:	43d9      	mvns	r1, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d18:	4313      	orrs	r3, r2
         );
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3724      	adds	r7, #36	; 0x24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
	...

08004d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d38:	d301      	bcc.n	8004d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e00f      	b.n	8004d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d3e:	4a0a      	ldr	r2, [pc, #40]	; (8004d68 <SysTick_Config+0x40>)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d46:	210f      	movs	r1, #15
 8004d48:	f04f 30ff 	mov.w	r0, #4294967295
 8004d4c:	f7ff ff8e 	bl	8004c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d50:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <SysTick_Config+0x40>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d56:	4b04      	ldr	r3, [pc, #16]	; (8004d68 <SysTick_Config+0x40>)
 8004d58:	2207      	movs	r2, #7
 8004d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	e000e010 	.word	0xe000e010

08004d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff ff29 	bl	8004bcc <__NVIC_SetPriorityGrouping>
}
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b086      	sub	sp, #24
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	4603      	mov	r3, r0
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	607a      	str	r2, [r7, #4]
 8004d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004d90:	2300      	movs	r3, #0
 8004d92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d94:	f7ff ff3e 	bl	8004c14 <__NVIC_GetPriorityGrouping>
 8004d98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	68b9      	ldr	r1, [r7, #8]
 8004d9e:	6978      	ldr	r0, [r7, #20]
 8004da0:	f7ff ff8e 	bl	8004cc0 <NVIC_EncodePriority>
 8004da4:	4602      	mov	r2, r0
 8004da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004daa:	4611      	mov	r1, r2
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff ff5d 	bl	8004c6c <__NVIC_SetPriority>
}
 8004db2:	bf00      	nop
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b082      	sub	sp, #8
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7ff ff31 	bl	8004c30 <__NVIC_EnableIRQ>
}
 8004dce:	bf00      	nop
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b082      	sub	sp, #8
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7ff ffa2 	bl	8004d28 <SysTick_Config>
 8004de4:	4603      	mov	r3, r0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e054      	b.n	8004eac <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	7f5b      	ldrb	r3, [r3, #29]
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d105      	bne.n	8004e18 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fe face 	bl	80033b4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	791b      	ldrb	r3, [r3, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10c      	bne.n	8004e40 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a22      	ldr	r2, [pc, #136]	; (8004eb4 <HAL_CRC_Init+0xc4>)
 8004e2c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 0218 	bic.w	r2, r2, #24
 8004e3c:	609a      	str	r2, [r3, #8]
 8004e3e:	e00c      	b.n	8004e5a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6899      	ldr	r1, [r3, #8]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f834 	bl	8004eb8 <HAL_CRCEx_Polynomial_Set>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e028      	b.n	8004eac <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	795b      	ldrb	r3, [r3, #5]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d105      	bne.n	8004e6e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f04f 32ff 	mov.w	r2, #4294967295
 8004e6a:	611a      	str	r2, [r3, #16]
 8004e6c:	e004      	b.n	8004e78 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	6912      	ldr	r2, [r2, #16]
 8004e76:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695a      	ldr	r2, [r3, #20]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699a      	ldr	r2, [r3, #24]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	04c11db7 	.word	0x04c11db7

08004eb8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004ec8:	231f      	movs	r3, #31
 8004eca:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004ecc:	bf00      	nop
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1e5a      	subs	r2, r3, #1
 8004ed2:	613a      	str	r2, [r7, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d009      	beq.n	8004eec <HAL_CRCEx_Polynomial_Set+0x34>
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f003 031f 	and.w	r3, r3, #31
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0f0      	beq.n	8004ece <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b18      	cmp	r3, #24
 8004ef0:	d846      	bhi.n	8004f80 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004ef2:	a201      	add	r2, pc, #4	; (adr r2, 8004ef8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef8:	08004f87 	.word	0x08004f87
 8004efc:	08004f81 	.word	0x08004f81
 8004f00:	08004f81 	.word	0x08004f81
 8004f04:	08004f81 	.word	0x08004f81
 8004f08:	08004f81 	.word	0x08004f81
 8004f0c:	08004f81 	.word	0x08004f81
 8004f10:	08004f81 	.word	0x08004f81
 8004f14:	08004f81 	.word	0x08004f81
 8004f18:	08004f75 	.word	0x08004f75
 8004f1c:	08004f81 	.word	0x08004f81
 8004f20:	08004f81 	.word	0x08004f81
 8004f24:	08004f81 	.word	0x08004f81
 8004f28:	08004f81 	.word	0x08004f81
 8004f2c:	08004f81 	.word	0x08004f81
 8004f30:	08004f81 	.word	0x08004f81
 8004f34:	08004f81 	.word	0x08004f81
 8004f38:	08004f69 	.word	0x08004f69
 8004f3c:	08004f81 	.word	0x08004f81
 8004f40:	08004f81 	.word	0x08004f81
 8004f44:	08004f81 	.word	0x08004f81
 8004f48:	08004f81 	.word	0x08004f81
 8004f4c:	08004f81 	.word	0x08004f81
 8004f50:	08004f81 	.word	0x08004f81
 8004f54:	08004f81 	.word	0x08004f81
 8004f58:	08004f5d 	.word	0x08004f5d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	2b06      	cmp	r3, #6
 8004f60:	d913      	bls.n	8004f8a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004f66:	e010      	b.n	8004f8a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	2b07      	cmp	r3, #7
 8004f6c:	d90f      	bls.n	8004f8e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004f72:	e00c      	b.n	8004f8e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	2b0f      	cmp	r3, #15
 8004f78:	d90b      	bls.n	8004f92 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004f7e:	e008      	b.n	8004f92 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	75fb      	strb	r3, [r7, #23]
      break;
 8004f84:	e006      	b.n	8004f94 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004f86:	bf00      	nop
 8004f88:	e004      	b.n	8004f94 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004f8a:	bf00      	nop
 8004f8c:	e002      	b.n	8004f94 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004f8e:	bf00      	nop
 8004f90:	e000      	b.n	8004f94 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004f92:	bf00      	nop
  }
  if (status == HAL_OK)
 8004f94:	7dfb      	ldrb	r3, [r7, #23]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10d      	bne.n	8004fb6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f023 0118 	bic.w	r1, r3, #24
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	371c      	adds	r7, #28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e014      	b.n	8005000 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	791b      	ldrb	r3, [r3, #4]
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d105      	bne.n	8004fec <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7fe fa40 	bl	800346c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	795b      	ldrb	r3, [r3, #5]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_DAC_ConfigChannel+0x1c>
 8005020:	2302      	movs	r3, #2
 8005022:	e107      	b.n	8005234 <HAL_DAC_ConfigChannel+0x22c>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2201      	movs	r2, #1
 8005028:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2202      	movs	r2, #2
 800502e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b04      	cmp	r3, #4
 8005036:	d174      	bne.n	8005122 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005038:	f7fe fee4 	bl	8003e04 <HAL_GetTick>
 800503c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d134      	bne.n	80050ae <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005044:	e011      	b.n	800506a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005046:	f7fe fedd 	bl	8003e04 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	d90a      	bls.n	800506a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f043 0208 	orr.w	r2, r3, #8
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2203      	movs	r2, #3
 8005064:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e0e4      	b.n	8005234 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005070:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e6      	bne.n	8005046 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8005078:	2001      	movs	r0, #1
 800507a:	f7fe fecf 	bl	8003e1c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	6992      	ldr	r2, [r2, #24]
 8005086:	641a      	str	r2, [r3, #64]	; 0x40
 8005088:	e01e      	b.n	80050c8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800508a:	f7fe febb 	bl	8003e04 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b01      	cmp	r3, #1
 8005096:	d90a      	bls.n	80050ae <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	f043 0208 	orr.w	r2, r3, #8
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2203      	movs	r2, #3
 80050a8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e0c2      	b.n	8005234 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	dbe8      	blt.n	800508a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80050b8:	2001      	movs	r0, #1
 80050ba:	f7fe feaf 	bl	8003e1c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	6992      	ldr	r2, [r2, #24]
 80050c6:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80050d8:	fa01 f303 	lsl.w	r3, r1, r3
 80050dc:	43db      	mvns	r3, r3
 80050de:	ea02 0103 	and.w	r1, r2, r3
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	69da      	ldr	r2, [r3, #28]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f003 0310 	and.w	r3, r3, #16
 80050ec:	409a      	lsls	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f003 0310 	and.w	r3, r3, #16
 8005102:	21ff      	movs	r1, #255	; 0xff
 8005104:	fa01 f303 	lsl.w	r3, r1, r3
 8005108:	43db      	mvns	r3, r3
 800510a:	ea02 0103 	and.w	r1, r2, r3
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	6a1a      	ldr	r2, [r3, #32]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f003 0310 	and.w	r3, r3, #16
 8005118:	409a      	lsls	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d11d      	bne.n	8005166 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	221f      	movs	r2, #31
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	43db      	mvns	r3, r3
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	4013      	ands	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f003 0310 	and.w	r3, r3, #16
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	fa02 f303 	lsl.w	r3, r2, r3
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	4313      	orrs	r3, r2
 800515c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f003 0310 	and.w	r3, r3, #16
 8005174:	2207      	movs	r2, #7
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	43db      	mvns	r3, r3
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	4013      	ands	r3, r2
 8005180:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	431a      	orrs	r2, r3
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	4313      	orrs	r3, r2
 8005192:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f003 0310 	and.w	r3, r3, #16
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	fa02 f303 	lsl.w	r3, r2, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6819      	ldr	r1, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f003 0310 	and.w	r3, r3, #16
 80051ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051be:	fa02 f303 	lsl.w	r3, r2, r3
 80051c2:	43da      	mvns	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	400a      	ands	r2, r1
 80051ca:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f003 0310 	and.w	r3, r3, #16
 80051da:	f640 72fc 	movw	r2, #4092	; 0xffc
 80051de:	fa02 f303 	lsl.w	r3, r2, r3
 80051e2:	43db      	mvns	r3, r3
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	4013      	ands	r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f003 0310 	and.w	r3, r3, #16
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	4313      	orrs	r3, r2
 8005200:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6819      	ldr	r1, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f003 0310 	and.w	r3, r3, #16
 8005216:	22c0      	movs	r2, #192	; 0xc0
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	43da      	mvns	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	400a      	ands	r2, r1
 8005224:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3720      	adds	r7, #32
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e098      	b.n	8005380 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	4b4d      	ldr	r3, [pc, #308]	; (800538c <HAL_DMA_Init+0x150>)
 8005256:	429a      	cmp	r2, r3
 8005258:	d80f      	bhi.n	800527a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	461a      	mov	r2, r3
 8005260:	4b4b      	ldr	r3, [pc, #300]	; (8005390 <HAL_DMA_Init+0x154>)
 8005262:	4413      	add	r3, r2
 8005264:	4a4b      	ldr	r2, [pc, #300]	; (8005394 <HAL_DMA_Init+0x158>)
 8005266:	fba2 2303 	umull	r2, r3, r2, r3
 800526a:	091b      	lsrs	r3, r3, #4
 800526c:	009a      	lsls	r2, r3, #2
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a48      	ldr	r2, [pc, #288]	; (8005398 <HAL_DMA_Init+0x15c>)
 8005276:	641a      	str	r2, [r3, #64]	; 0x40
 8005278:	e00e      	b.n	8005298 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	4b46      	ldr	r3, [pc, #280]	; (800539c <HAL_DMA_Init+0x160>)
 8005282:	4413      	add	r3, r2
 8005284:	4a43      	ldr	r2, [pc, #268]	; (8005394 <HAL_DMA_Init+0x158>)
 8005286:	fba2 2303 	umull	r2, r3, r2, r3
 800528a:	091b      	lsrs	r3, r3, #4
 800528c:	009a      	lsls	r2, r3, #2
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a42      	ldr	r2, [pc, #264]	; (80053a0 <HAL_DMA_Init+0x164>)
 8005296:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80052ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80052bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052f2:	d039      	beq.n	8005368 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f8:	4a27      	ldr	r2, [pc, #156]	; (8005398 <HAL_DMA_Init+0x15c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d11a      	bne.n	8005334 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80052fe:	4b29      	ldr	r3, [pc, #164]	; (80053a4 <HAL_DMA_Init+0x168>)
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005306:	f003 031c 	and.w	r3, r3, #28
 800530a:	210f      	movs	r1, #15
 800530c:	fa01 f303 	lsl.w	r3, r1, r3
 8005310:	43db      	mvns	r3, r3
 8005312:	4924      	ldr	r1, [pc, #144]	; (80053a4 <HAL_DMA_Init+0x168>)
 8005314:	4013      	ands	r3, r2
 8005316:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005318:	4b22      	ldr	r3, [pc, #136]	; (80053a4 <HAL_DMA_Init+0x168>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6859      	ldr	r1, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005324:	f003 031c 	and.w	r3, r3, #28
 8005328:	fa01 f303 	lsl.w	r3, r1, r3
 800532c:	491d      	ldr	r1, [pc, #116]	; (80053a4 <HAL_DMA_Init+0x168>)
 800532e:	4313      	orrs	r3, r2
 8005330:	600b      	str	r3, [r1, #0]
 8005332:	e019      	b.n	8005368 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005334:	4b1c      	ldr	r3, [pc, #112]	; (80053a8 <HAL_DMA_Init+0x16c>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533c:	f003 031c 	and.w	r3, r3, #28
 8005340:	210f      	movs	r1, #15
 8005342:	fa01 f303 	lsl.w	r3, r1, r3
 8005346:	43db      	mvns	r3, r3
 8005348:	4917      	ldr	r1, [pc, #92]	; (80053a8 <HAL_DMA_Init+0x16c>)
 800534a:	4013      	ands	r3, r2
 800534c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800534e:	4b16      	ldr	r3, [pc, #88]	; (80053a8 <HAL_DMA_Init+0x16c>)
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6859      	ldr	r1, [r3, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535a:	f003 031c 	and.w	r3, r3, #28
 800535e:	fa01 f303 	lsl.w	r3, r1, r3
 8005362:	4911      	ldr	r1, [pc, #68]	; (80053a8 <HAL_DMA_Init+0x16c>)
 8005364:	4313      	orrs	r3, r2
 8005366:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	40020407 	.word	0x40020407
 8005390:	bffdfff8 	.word	0xbffdfff8
 8005394:	cccccccd 	.word	0xcccccccd
 8005398:	40020000 	.word	0x40020000
 800539c:	bffdfbf8 	.word	0xbffdfbf8
 80053a0:	40020400 	.word	0x40020400
 80053a4:	400200a8 	.word	0x400200a8
 80053a8:	400204a8 	.word	0x400204a8

080053ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c8:	f003 031c 	and.w	r3, r3, #28
 80053cc:	2204      	movs	r2, #4
 80053ce:	409a      	lsls	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4013      	ands	r3, r2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d026      	beq.n	8005426 <HAL_DMA_IRQHandler+0x7a>
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d021      	beq.n	8005426 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0320 	and.w	r3, r3, #32
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d107      	bne.n	8005400 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0204 	bic.w	r2, r2, #4
 80053fe:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005404:	f003 021c 	and.w	r2, r3, #28
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540c:	2104      	movs	r1, #4
 800540e:	fa01 f202 	lsl.w	r2, r1, r2
 8005412:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005418:	2b00      	cmp	r3, #0
 800541a:	d071      	beq.n	8005500 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005424:	e06c      	b.n	8005500 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542a:	f003 031c 	and.w	r3, r3, #28
 800542e:	2202      	movs	r2, #2
 8005430:	409a      	lsls	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4013      	ands	r3, r2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d02e      	beq.n	8005498 <HAL_DMA_IRQHandler+0xec>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d029      	beq.n	8005498 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0320 	and.w	r3, r3, #32
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10b      	bne.n	800546a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 020a 	bic.w	r2, r2, #10
 8005460:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546e:	f003 021c 	and.w	r2, r3, #28
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	2102      	movs	r1, #2
 8005478:	fa01 f202 	lsl.w	r2, r1, r2
 800547c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548a:	2b00      	cmp	r3, #0
 800548c:	d038      	beq.n	8005500 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005496:	e033      	b.n	8005500 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549c:	f003 031c 	and.w	r3, r3, #28
 80054a0:	2208      	movs	r2, #8
 80054a2:	409a      	lsls	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4013      	ands	r3, r2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d02a      	beq.n	8005502 <HAL_DMA_IRQHandler+0x156>
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d025      	beq.n	8005502 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 020e 	bic.w	r2, r2, #14
 80054c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ca:	f003 021c 	and.w	r2, r3, #28
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	2101      	movs	r1, #1
 80054d4:	fa01 f202 	lsl.w	r2, r1, r2
 80054d8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d004      	beq.n	8005502 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005500:	bf00      	nop
 8005502:	bf00      	nop
}
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800551a:	e154      	b.n	80057c6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	2101      	movs	r1, #1
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	fa01 f303 	lsl.w	r3, r1, r3
 8005528:	4013      	ands	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 8146 	beq.w	80057c0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f003 0303 	and.w	r3, r3, #3
 800553c:	2b01      	cmp	r3, #1
 800553e:	d005      	beq.n	800554c <HAL_GPIO_Init+0x40>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f003 0303 	and.w	r3, r3, #3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d130      	bne.n	80055ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	2203      	movs	r2, #3
 8005558:	fa02 f303 	lsl.w	r3, r2, r3
 800555c:	43db      	mvns	r3, r3
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	4013      	ands	r3, r2
 8005562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	fa02 f303 	lsl.w	r3, r2, r3
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005582:	2201      	movs	r2, #1
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	fa02 f303 	lsl.w	r3, r2, r3
 800558a:	43db      	mvns	r3, r3
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4013      	ands	r3, r2
 8005590:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	091b      	lsrs	r3, r3, #4
 8005598:	f003 0201 	and.w	r2, r3, #1
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	fa02 f303 	lsl.w	r3, r2, r3
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d017      	beq.n	80055ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	2203      	movs	r2, #3
 80055c6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ca:	43db      	mvns	r3, r3
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4013      	ands	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	689a      	ldr	r2, [r3, #8]
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	fa02 f303 	lsl.w	r3, r2, r3
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d123      	bne.n	800563e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	08da      	lsrs	r2, r3, #3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	3208      	adds	r2, #8
 80055fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005602:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	220f      	movs	r2, #15
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	43db      	mvns	r3, r3
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4013      	ands	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	691a      	ldr	r2, [r3, #16]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f003 0307 	and.w	r3, r3, #7
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	4313      	orrs	r3, r2
 800562e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	08da      	lsrs	r2, r3, #3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	3208      	adds	r2, #8
 8005638:	6939      	ldr	r1, [r7, #16]
 800563a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	2203      	movs	r2, #3
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	43db      	mvns	r3, r3
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	4013      	ands	r3, r2
 8005654:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f003 0203 	and.w	r2, r3, #3
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	fa02 f303 	lsl.w	r3, r2, r3
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4313      	orrs	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 80a0 	beq.w	80057c0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005680:	4b58      	ldr	r3, [pc, #352]	; (80057e4 <HAL_GPIO_Init+0x2d8>)
 8005682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005684:	4a57      	ldr	r2, [pc, #348]	; (80057e4 <HAL_GPIO_Init+0x2d8>)
 8005686:	f043 0301 	orr.w	r3, r3, #1
 800568a:	6613      	str	r3, [r2, #96]	; 0x60
 800568c:	4b55      	ldr	r3, [pc, #340]	; (80057e4 <HAL_GPIO_Init+0x2d8>)
 800568e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	60bb      	str	r3, [r7, #8]
 8005696:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005698:	4a53      	ldr	r2, [pc, #332]	; (80057e8 <HAL_GPIO_Init+0x2dc>)
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	089b      	lsrs	r3, r3, #2
 800569e:	3302      	adds	r3, #2
 80056a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f003 0303 	and.w	r3, r3, #3
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	220f      	movs	r2, #15
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	43db      	mvns	r3, r3
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	4013      	ands	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80056c2:	d019      	beq.n	80056f8 <HAL_GPIO_Init+0x1ec>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a49      	ldr	r2, [pc, #292]	; (80057ec <HAL_GPIO_Init+0x2e0>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d013      	beq.n	80056f4 <HAL_GPIO_Init+0x1e8>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a48      	ldr	r2, [pc, #288]	; (80057f0 <HAL_GPIO_Init+0x2e4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00d      	beq.n	80056f0 <HAL_GPIO_Init+0x1e4>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a47      	ldr	r2, [pc, #284]	; (80057f4 <HAL_GPIO_Init+0x2e8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d007      	beq.n	80056ec <HAL_GPIO_Init+0x1e0>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a46      	ldr	r2, [pc, #280]	; (80057f8 <HAL_GPIO_Init+0x2ec>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d101      	bne.n	80056e8 <HAL_GPIO_Init+0x1dc>
 80056e4:	2304      	movs	r3, #4
 80056e6:	e008      	b.n	80056fa <HAL_GPIO_Init+0x1ee>
 80056e8:	2307      	movs	r3, #7
 80056ea:	e006      	b.n	80056fa <HAL_GPIO_Init+0x1ee>
 80056ec:	2303      	movs	r3, #3
 80056ee:	e004      	b.n	80056fa <HAL_GPIO_Init+0x1ee>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e002      	b.n	80056fa <HAL_GPIO_Init+0x1ee>
 80056f4:	2301      	movs	r3, #1
 80056f6:	e000      	b.n	80056fa <HAL_GPIO_Init+0x1ee>
 80056f8:	2300      	movs	r3, #0
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	f002 0203 	and.w	r2, r2, #3
 8005700:	0092      	lsls	r2, r2, #2
 8005702:	4093      	lsls	r3, r2
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800570a:	4937      	ldr	r1, [pc, #220]	; (80057e8 <HAL_GPIO_Init+0x2dc>)
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	089b      	lsrs	r3, r3, #2
 8005710:	3302      	adds	r3, #2
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005718:	4b38      	ldr	r3, [pc, #224]	; (80057fc <HAL_GPIO_Init+0x2f0>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	43db      	mvns	r3, r3
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	4013      	ands	r3, r2
 8005726:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4313      	orrs	r3, r2
 800573a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800573c:	4a2f      	ldr	r2, [pc, #188]	; (80057fc <HAL_GPIO_Init+0x2f0>)
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005742:	4b2e      	ldr	r3, [pc, #184]	; (80057fc <HAL_GPIO_Init+0x2f0>)
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	43db      	mvns	r3, r3
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4013      	ands	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005766:	4a25      	ldr	r2, [pc, #148]	; (80057fc <HAL_GPIO_Init+0x2f0>)
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800576c:	4b23      	ldr	r3, [pc, #140]	; (80057fc <HAL_GPIO_Init+0x2f0>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	43db      	mvns	r3, r3
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	4013      	ands	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4313      	orrs	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005790:	4a1a      	ldr	r2, [pc, #104]	; (80057fc <HAL_GPIO_Init+0x2f0>)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005796:	4b19      	ldr	r3, [pc, #100]	; (80057fc <HAL_GPIO_Init+0x2f0>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	43db      	mvns	r3, r3
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4013      	ands	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80057ba:	4a10      	ldr	r2, [pc, #64]	; (80057fc <HAL_GPIO_Init+0x2f0>)
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	3301      	adds	r3, #1
 80057c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	fa22 f303 	lsr.w	r3, r2, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f47f aea3 	bne.w	800551c <HAL_GPIO_Init+0x10>
  }
}
 80057d6:	bf00      	nop
 80057d8:	bf00      	nop
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	40021000 	.word	0x40021000
 80057e8:	40010000 	.word	0x40010000
 80057ec:	48000400 	.word	0x48000400
 80057f0:	48000800 	.word	0x48000800
 80057f4:	48000c00 	.word	0x48000c00
 80057f8:	48001000 	.word	0x48001000
 80057fc:	40010400 	.word	0x40010400

08005800 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	887b      	ldrh	r3, [r7, #2]
 8005812:	4013      	ands	r3, r2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005818:	2301      	movs	r3, #1
 800581a:	73fb      	strb	r3, [r7, #15]
 800581c:	e001      	b.n	8005822 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800581e:	2300      	movs	r3, #0
 8005820:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005822:	7bfb      	ldrb	r3, [r7, #15]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	807b      	strh	r3, [r7, #2]
 800583c:	4613      	mov	r3, r2
 800583e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005840:	787b      	ldrb	r3, [r7, #1]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005846:	887a      	ldrh	r2, [r7, #2]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800584c:	e002      	b.n	8005854 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800584e:	887a      	ldrh	r2, [r7, #2]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	460b      	mov	r3, r1
 800586a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005872:	887a      	ldrh	r2, [r7, #2]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4013      	ands	r3, r2
 8005878:	041a      	lsls	r2, r3, #16
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	43d9      	mvns	r1, r3
 800587e:	887b      	ldrh	r3, [r7, #2]
 8005880:	400b      	ands	r3, r1
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	619a      	str	r2, [r3, #24]
}
 8005888:	bf00      	nop
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005896:	b08b      	sub	sp, #44	; 0x2c
 8005898:	af06      	add	r7, sp, #24
 800589a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e109      	b.n	8005aba <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d106      	bne.n	80058c0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f008 f928 	bl	800db10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2203      	movs	r2, #3
 80058c4:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f003 ffab 	bl	8009828 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	603b      	str	r3, [r7, #0]
 80058d8:	687e      	ldr	r6, [r7, #4]
 80058da:	466d      	mov	r5, sp
 80058dc:	f106 0410 	add.w	r4, r6, #16
 80058e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80058e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80058ec:	1d33      	adds	r3, r6, #4
 80058ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058f0:	6838      	ldr	r0, [r7, #0]
 80058f2:	f003 ff71 	bl	80097d8 <USB_CoreInit>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d005      	beq.n	8005908 <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e0d8      	b.n	8005aba <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2100      	movs	r1, #0
 800590e:	4618      	mov	r0, r3
 8005910:	f003 ffa5 	bl	800985e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005914:	2300      	movs	r3, #0
 8005916:	73fb      	strb	r3, [r7, #15]
 8005918:	e04d      	b.n	80059b6 <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800591a:	7bfb      	ldrb	r3, [r7, #15]
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	4613      	mov	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	440b      	add	r3, r1
 800592a:	3305      	adds	r3, #5
 800592c:	2201      	movs	r2, #1
 800592e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005930:	7bfb      	ldrb	r3, [r7, #15]
 8005932:	6879      	ldr	r1, [r7, #4]
 8005934:	1c5a      	adds	r2, r3, #1
 8005936:	4613      	mov	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	440b      	add	r3, r1
 8005940:	3304      	adds	r3, #4
 8005942:	7bfa      	ldrb	r2, [r7, #15]
 8005944:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005946:	7bfa      	ldrb	r2, [r7, #15]
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	b298      	uxth	r0, r3
 800594c:	6879      	ldr	r1, [r7, #4]
 800594e:	4613      	mov	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	440b      	add	r3, r1
 8005958:	333a      	adds	r3, #58	; 0x3a
 800595a:	4602      	mov	r2, r0
 800595c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800595e:	7bfb      	ldrb	r3, [r7, #15]
 8005960:	6879      	ldr	r1, [r7, #4]
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	440b      	add	r3, r1
 800596e:	3307      	adds	r3, #7
 8005970:	2200      	movs	r2, #0
 8005972:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005974:	7bfa      	ldrb	r2, [r7, #15]
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	4613      	mov	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	440b      	add	r3, r1
 8005982:	333c      	adds	r3, #60	; 0x3c
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005988:	7bfa      	ldrb	r2, [r7, #15]
 800598a:	6879      	ldr	r1, [r7, #4]
 800598c:	4613      	mov	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	440b      	add	r3, r1
 8005996:	3340      	adds	r3, #64	; 0x40
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800599c:	7bfa      	ldrb	r2, [r7, #15]
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	4613      	mov	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	440b      	add	r3, r1
 80059aa:	3344      	adds	r3, #68	; 0x44
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
 80059b2:	3301      	adds	r3, #1
 80059b4:	73fb      	strb	r3, [r7, #15]
 80059b6:	7bfa      	ldrb	r2, [r7, #15]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d3ac      	bcc.n	800591a <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059c0:	2300      	movs	r3, #0
 80059c2:	73fb      	strb	r3, [r7, #15]
 80059c4:	e044      	b.n	8005a50 <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80059c6:	7bfa      	ldrb	r2, [r7, #15]
 80059c8:	6879      	ldr	r1, [r7, #4]
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	440b      	add	r3, r1
 80059d4:	f203 136d 	addw	r3, r3, #365	; 0x16d
 80059d8:	2200      	movs	r2, #0
 80059da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80059dc:	7bfa      	ldrb	r2, [r7, #15]
 80059de:	6879      	ldr	r1, [r7, #4]
 80059e0:	4613      	mov	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	440b      	add	r3, r1
 80059ea:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80059ee:	7bfa      	ldrb	r2, [r7, #15]
 80059f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80059f2:	7bfa      	ldrb	r2, [r7, #15]
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	440b      	add	r3, r1
 8005a00:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8005a04:	2200      	movs	r2, #0
 8005a06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a08:	7bfa      	ldrb	r2, [r7, #15]
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	440b      	add	r3, r1
 8005a16:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a1e:	7bfa      	ldrb	r2, [r7, #15]
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	440b      	add	r3, r1
 8005a2c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005a30:	2200      	movs	r2, #0
 8005a32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a34:	7bfa      	ldrb	r2, [r7, #15]
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	440b      	add	r3, r1
 8005a42:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	73fb      	strb	r3, [r7, #15]
 8005a50:	7bfa      	ldrb	r2, [r7, #15]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d3b5      	bcc.n	80059c6 <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	603b      	str	r3, [r7, #0]
 8005a60:	687e      	ldr	r6, [r7, #4]
 8005a62:	466d      	mov	r5, sp
 8005a64:	f106 0410 	add.w	r4, r6, #16
 8005a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a70:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a74:	1d33      	adds	r3, r6, #4
 8005a76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a78:	6838      	ldr	r0, [r7, #0]
 8005a7a:	f003 fefd 	bl	8009878 <USB_DevInit>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d005      	beq.n	8005a90 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e014      	b.n	8005aba <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d102      	bne.n	8005aae <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f001 fc55 	bl	8007358 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f006 f909 	bl	800bcca <USB_DevDisconnect>

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ac2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b082      	sub	sp, #8
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d101      	bne.n	8005ad8 <HAL_PCD_Start+0x16>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e012      	b.n	8005afe <HAL_PCD_Start+0x3c>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f003 fe88 	bl	80097fa <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f006 f8d4 	bl	800bc9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b084      	sub	sp, #16
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f006 f8ee 	bl	800bcf4 <USB_ReadInterrupts>
 8005b18:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fb3e 	bl	80061a6 <PCD_EP_ISR_Handler>

    return;
 8005b2a:	e110      	b.n	8005d4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d013      	beq.n	8005b5e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b48:	b292      	uxth	r2, r2
 8005b4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f008 f86f 	bl	800dc32 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005b54:	2100      	movs	r1, #0
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f8fc 	bl	8005d54 <HAL_PCD_SetAddress>

    return;
 8005b5c:	e0f7      	b.n	8005d4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00c      	beq.n	8005b82 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b7a:	b292      	uxth	r2, r2
 8005b7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005b80:	e0e5      	b.n	8005d4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00c      	beq.n	8005ba6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b9e:	b292      	uxth	r2, r2
 8005ba0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005ba4:	e0d3      	b.n	8005d4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d034      	beq.n	8005c1a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0204 	bic.w	r2, r2, #4
 8005bc2:	b292      	uxth	r2, r2
 8005bc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0208 	bic.w	r2, r2, #8
 8005bda:	b292      	uxth	r2, r2
 8005bdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d107      	bne.n	8005bfa <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f008 facd 	bl	800e194 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f008 f852 	bl	800dca4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c12:	b292      	uxth	r2, r2
 8005c14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005c18:	e099      	b.n	8005d4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d027      	beq.n	8005c74 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0208 	orr.w	r2, r2, #8
 8005c36:	b292      	uxth	r2, r2
 8005c38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c4e:	b292      	uxth	r2, r2
 8005c50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0204 	orr.w	r2, r2, #4
 8005c66:	b292      	uxth	r2, r2
 8005c68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f007 ffff 	bl	800dc70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005c72:	e06c      	b.n	8005d4e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d040      	beq.n	8005d00 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c90:	b292      	uxth	r2, r2
 8005c92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d12b      	bne.n	8005cf8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f042 0204 	orr.w	r2, r2, #4
 8005cb2:	b292      	uxth	r2, r2
 8005cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0208 	orr.w	r2, r2, #8
 8005cca:	b292      	uxth	r2, r2
 8005ccc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	089b      	lsrs	r3, r3, #2
 8005ce4:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005cee:	2101      	movs	r1, #1
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f008 fa4f 	bl	800e194 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005cf6:	e02a      	b.n	8005d4e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f007 ffb9 	bl	800dc70 <HAL_PCD_SuspendCallback>
    return;
 8005cfe:	e026      	b.n	8005d4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00f      	beq.n	8005d2a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005d1c:	b292      	uxth	r2, r2
 8005d1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f007 ff77 	bl	800dc16 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005d28:	e011      	b.n	8005d4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00c      	beq.n	8005d4e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d46:	b292      	uxth	r2, r2
 8005d48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005d4c:	bf00      	nop
  }
}
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d101      	bne.n	8005d6e <HAL_PCD_SetAddress+0x1a>
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	e013      	b.n	8005d96 <HAL_PCD_SetAddress+0x42>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	78fa      	ldrb	r2, [r7, #3]
 8005d7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	78fa      	ldrb	r2, [r7, #3]
 8005d84:	4611      	mov	r1, r2
 8005d86:	4618      	mov	r0, r3
 8005d88:	f005 ff74 	bl	800bc74 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b084      	sub	sp, #16
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	4608      	mov	r0, r1
 8005da8:	4611      	mov	r1, r2
 8005daa:	461a      	mov	r2, r3
 8005dac:	4603      	mov	r3, r0
 8005dae:	70fb      	strb	r3, [r7, #3]
 8005db0:	460b      	mov	r3, r1
 8005db2:	803b      	strh	r3, [r7, #0]
 8005db4:	4613      	mov	r3, r2
 8005db6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005db8:	2300      	movs	r3, #0
 8005dba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005dbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	da0f      	bge.n	8005de4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dc4:	78fb      	ldrb	r3, [r7, #3]
 8005dc6:	f003 0307 	and.w	r3, r3, #7
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	4613      	mov	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	3304      	adds	r3, #4
 8005dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2201      	movs	r2, #1
 8005de0:	705a      	strb	r2, [r3, #1]
 8005de2:	e00f      	b.n	8005e04 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005de4:	78fb      	ldrb	r3, [r7, #3]
 8005de6:	f003 0207 	and.w	r2, r3, #7
 8005dea:	4613      	mov	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	4413      	add	r3, r2
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	b2da      	uxtb	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005e10:	883a      	ldrh	r2, [r7, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	78ba      	ldrb	r2, [r7, #2]
 8005e1a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	785b      	ldrb	r3, [r3, #1]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d004      	beq.n	8005e2e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005e2e:	78bb      	ldrb	r3, [r7, #2]
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d102      	bne.n	8005e3a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_PCD_EP_Open+0xaa>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e00e      	b.n	8005e66 <HAL_PCD_EP_Open+0xc8>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68f9      	ldr	r1, [r7, #12]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f003 fd30 	bl	80098bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8005e64:	7afb      	ldrb	r3, [r7, #11]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	460b      	mov	r3, r1
 8005e78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	da0f      	bge.n	8005ea2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e82:	78fb      	ldrb	r3, [r7, #3]
 8005e84:	f003 0307 	and.w	r3, r3, #7
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	00db      	lsls	r3, r3, #3
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	4413      	add	r3, r2
 8005e96:	3304      	adds	r3, #4
 8005e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	705a      	strb	r2, [r3, #1]
 8005ea0:	e00f      	b.n	8005ec2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ea2:	78fb      	ldrb	r3, [r7, #3]
 8005ea4:	f003 0207 	and.w	r2, r3, #7
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	3304      	adds	r3, #4
 8005eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005ec2:	78fb      	ldrb	r3, [r7, #3]
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d101      	bne.n	8005edc <HAL_PCD_EP_Close+0x6e>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e00e      	b.n	8005efa <HAL_PCD_EP_Close+0x8c>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68f9      	ldr	r1, [r7, #12]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f004 f8a0 	bl	800a030 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b086      	sub	sp, #24
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	60f8      	str	r0, [r7, #12]
 8005f0a:	607a      	str	r2, [r7, #4]
 8005f0c:	603b      	str	r3, [r7, #0]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f12:	7afb      	ldrb	r3, [r7, #11]
 8005f14:	f003 0207 	and.w	r2, r3, #7
 8005f18:	4613      	mov	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4413      	add	r3, r2
 8005f28:	3304      	adds	r3, #4
 8005f2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2200      	movs	r2, #0
 8005f42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f44:	7afb      	ldrb	r3, [r7, #11]
 8005f46:	f003 0307 	and.w	r3, r3, #7
 8005f4a:	b2da      	uxtb	r2, r3
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f50:	7afb      	ldrb	r3, [r7, #11]
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d106      	bne.n	8005f68 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6979      	ldr	r1, [r7, #20]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f004 fa52 	bl	800a40a <USB_EPStartXfer>
 8005f66:	e005      	b.n	8005f74 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6979      	ldr	r1, [r7, #20]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f004 fa4b 	bl	800a40a <USB_EPStartXfer>
  }

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	460b      	mov	r3, r1
 8005f88:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005f8a:	78fb      	ldrb	r3, [r7, #3]
 8005f8c:	f003 0207 	and.w	r2, r3, #7
 8005f90:	6879      	ldr	r1, [r7, #4]
 8005f92:	4613      	mov	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	440b      	add	r3, r1
 8005f9c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005fa0:	681b      	ldr	r3, [r3, #0]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b086      	sub	sp, #24
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	60f8      	str	r0, [r7, #12]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
 8005fba:	460b      	mov	r3, r1
 8005fbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fbe:	7afb      	ldrb	r3, [r7, #11]
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	00db      	lsls	r3, r3, #3
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ffc:	7afb      	ldrb	r3, [r7, #11]
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	b2da      	uxtb	r2, r3
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006008:	7afb      	ldrb	r3, [r7, #11]
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	2b00      	cmp	r3, #0
 8006010:	d106      	bne.n	8006020 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6979      	ldr	r1, [r7, #20]
 8006018:	4618      	mov	r0, r3
 800601a:	f004 f9f6 	bl	800a40a <USB_EPStartXfer>
 800601e:	e005      	b.n	800602c <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6979      	ldr	r1, [r7, #20]
 8006026:	4618      	mov	r0, r3
 8006028:	f004 f9ef 	bl	800a40a <USB_EPStartXfer>
  }

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b084      	sub	sp, #16
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	460b      	mov	r3, r1
 8006040:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006042:	78fb      	ldrb	r3, [r7, #3]
 8006044:	f003 0207 	and.w	r2, r3, #7
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	429a      	cmp	r2, r3
 800604e:	d901      	bls.n	8006054 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e04e      	b.n	80060f2 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006058:	2b00      	cmp	r3, #0
 800605a:	da0f      	bge.n	800607c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800605c:	78fb      	ldrb	r3, [r7, #3]
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	4613      	mov	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	4413      	add	r3, r2
 8006070:	3304      	adds	r3, #4
 8006072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2201      	movs	r2, #1
 8006078:	705a      	strb	r2, [r3, #1]
 800607a:	e00d      	b.n	8006098 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800607c:	78fa      	ldrb	r2, [r7, #3]
 800607e:	4613      	mov	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	4413      	add	r3, r2
 800608e:	3304      	adds	r3, #4
 8006090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2201      	movs	r2, #1
 800609c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800609e:	78fb      	ldrb	r3, [r7, #3]
 80060a0:	f003 0307 	and.w	r3, r3, #7
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d101      	bne.n	80060b8 <HAL_PCD_EP_SetStall+0x82>
 80060b4:	2302      	movs	r3, #2
 80060b6:	e01c      	b.n	80060f2 <HAL_PCD_EP_SetStall+0xbc>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68f9      	ldr	r1, [r7, #12]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f005 fcd5 	bl	800ba76 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	f003 0307 	and.w	r3, r3, #7
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d108      	bne.n	80060e8 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80060e0:	4619      	mov	r1, r3
 80060e2:	4610      	mov	r0, r2
 80060e4:	f005 fe16 	bl	800bd14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	460b      	mov	r3, r1
 8006104:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006106:	78fb      	ldrb	r3, [r7, #3]
 8006108:	f003 020f 	and.w	r2, r3, #15
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	429a      	cmp	r2, r3
 8006112:	d901      	bls.n	8006118 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e042      	b.n	800619e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006118:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800611c:	2b00      	cmp	r3, #0
 800611e:	da0f      	bge.n	8006140 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006120:	78fb      	ldrb	r3, [r7, #3]
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	4613      	mov	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	4413      	add	r3, r2
 8006134:	3304      	adds	r3, #4
 8006136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2201      	movs	r2, #1
 800613c:	705a      	strb	r2, [r3, #1]
 800613e:	e00f      	b.n	8006160 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	f003 0207 	and.w	r2, r3, #7
 8006146:	4613      	mov	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	4413      	add	r3, r2
 8006156:	3304      	adds	r3, #4
 8006158:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006166:	78fb      	ldrb	r3, [r7, #3]
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	b2da      	uxtb	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_PCD_EP_ClrStall+0x86>
 800617c:	2302      	movs	r3, #2
 800617e:	e00e      	b.n	800619e <HAL_PCD_EP_ClrStall+0xa4>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68f9      	ldr	r1, [r7, #12]
 800618e:	4618      	mov	r0, r3
 8006190:	f005 fcc2 	bl	800bb18 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b096      	sub	sp, #88	; 0x58
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80061ae:	e3a9      	b.n	8006904 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80061bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	f003 030f 	and.w	r3, r3, #15
 80061c6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80061ca:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f040 8169 	bne.w	80064a6 <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80061d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80061d8:	f003 0310 	and.w	r3, r3, #16
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d150      	bne.n	8006282 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80061ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f0:	81fb      	strh	r3, [r7, #14]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	89fb      	ldrh	r3, [r7, #14]
 80061f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006200:	b29b      	uxth	r3, r3
 8006202:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	332c      	adds	r3, #44	; 0x2c
 8006208:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006212:	b29b      	uxth	r3, r3
 8006214:	461a      	mov	r2, r3
 8006216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	4413      	add	r3, r2
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6812      	ldr	r2, [r2, #0]
 8006222:	4413      	add	r3, r2
 8006224:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800622e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006230:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006234:	695a      	ldr	r2, [r3, #20]
 8006236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	441a      	add	r2, r3
 800623c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800623e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006240:	2100      	movs	r1, #0
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f007 fccd 	bl	800dbe2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 8357 	beq.w	8006904 <PCD_EP_ISR_Handler+0x75e>
 8006256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	2b00      	cmp	r3, #0
 800625c:	f040 8352 	bne.w	8006904 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006266:	b2db      	uxtb	r3, r3
 8006268:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800626c:	b2da      	uxtb	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	b292      	uxth	r2, r2
 8006274:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006280:	e340      	b.n	8006904 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8006288:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006294:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800629c:	2b00      	cmp	r3, #0
 800629e:	d032      	beq.n	8006306 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	461a      	mov	r2, r3
 80062ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	00db      	lsls	r3, r3, #3
 80062b2:	4413      	add	r3, r2
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	4413      	add	r3, r2
 80062ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80062c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062c6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6818      	ldr	r0, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 80062d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80062d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80062da:	b29b      	uxth	r3, r3
 80062dc:	f005 fd68 	bl	800bdb0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80062ec:	4013      	ands	r3, r2
 80062ee:	823b      	strh	r3, [r7, #16]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	8a3a      	ldrh	r2, [r7, #16]
 80062f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80062fa:	b292      	uxth	r2, r2
 80062fc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f007 fc42 	bl	800db88 <HAL_PCD_SetupStageCallback>
 8006304:	e2fe      	b.n	8006904 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006306:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800630a:	2b00      	cmp	r3, #0
 800630c:	f280 82fa 	bge.w	8006904 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	b29a      	uxth	r2, r3
 8006318:	f640 738f 	movw	r3, #3983	; 0xf8f
 800631c:	4013      	ands	r3, r2
 800631e:	83fb      	strh	r3, [r7, #30]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	8bfa      	ldrh	r2, [r7, #30]
 8006326:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800632a:	b292      	uxth	r2, r2
 800632c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006336:	b29b      	uxth	r3, r3
 8006338:	461a      	mov	r2, r3
 800633a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	00db      	lsls	r3, r3, #3
 8006340:	4413      	add	r3, r2
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6812      	ldr	r2, [r2, #0]
 8006346:	4413      	add	r3, r2
 8006348:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006354:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d019      	beq.n	8006392 <PCD_EP_ISR_Handler+0x1ec>
 800635e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d015      	beq.n	8006392 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6818      	ldr	r0, [r3, #0]
 800636a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800636c:	6959      	ldr	r1, [r3, #20]
 800636e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006370:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006374:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006376:	b29b      	uxth	r3, r3
 8006378:	f005 fd1a 	bl	800bdb0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800637c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800637e:	695a      	ldr	r2, [r3, #20]
 8006380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006382:	69db      	ldr	r3, [r3, #28]
 8006384:	441a      	add	r2, r3
 8006386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006388:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800638a:	2100      	movs	r1, #0
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f007 fc0d 	bl	800dbac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800639c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80063a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f040 82ad 	bne.w	8006904 <PCD_EP_ISR_Handler+0x75e>
 80063aa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80063ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80063b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063b6:	f000 82a5 	beq.w	8006904 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	61bb      	str	r3, [r7, #24]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	461a      	mov	r2, r3
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	4413      	add	r3, r2
 80063d0:	61bb      	str	r3, [r7, #24]
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063d8:	617b      	str	r3, [r7, #20]
 80063da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	2b3e      	cmp	r3, #62	; 0x3e
 80063e0:	d918      	bls.n	8006414 <PCD_EP_ISR_Handler+0x26e>
 80063e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	095b      	lsrs	r3, r3, #5
 80063e8:	647b      	str	r3, [r7, #68]	; 0x44
 80063ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	f003 031f 	and.w	r3, r3, #31
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d102      	bne.n	80063fc <PCD_EP_ISR_Handler+0x256>
 80063f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063f8:	3b01      	subs	r3, #1
 80063fa:	647b      	str	r3, [r7, #68]	; 0x44
 80063fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063fe:	b29b      	uxth	r3, r3
 8006400:	029b      	lsls	r3, r3, #10
 8006402:	b29b      	uxth	r3, r3
 8006404:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006408:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800640c:	b29a      	uxth	r2, r3
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	801a      	strh	r2, [r3, #0]
 8006412:	e029      	b.n	8006468 <PCD_EP_ISR_Handler+0x2c2>
 8006414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d112      	bne.n	8006442 <PCD_EP_ISR_Handler+0x29c>
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	b29b      	uxth	r3, r3
 8006422:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006426:	b29a      	uxth	r2, r3
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	801a      	strh	r2, [r3, #0]
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	b29b      	uxth	r3, r3
 8006432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800643a:	b29a      	uxth	r2, r3
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	801a      	strh	r2, [r3, #0]
 8006440:	e012      	b.n	8006468 <PCD_EP_ISR_Handler+0x2c2>
 8006442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	085b      	lsrs	r3, r3, #1
 8006448:	647b      	str	r3, [r7, #68]	; 0x44
 800644a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <PCD_EP_ISR_Handler+0x2b6>
 8006456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006458:	3301      	adds	r3, #1
 800645a:	647b      	str	r3, [r7, #68]	; 0x44
 800645c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800645e:	b29b      	uxth	r3, r3
 8006460:	029b      	lsls	r3, r3, #10
 8006462:	b29a      	uxth	r2, r3
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	b29b      	uxth	r3, r3
 8006470:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006478:	827b      	strh	r3, [r7, #18]
 800647a:	8a7b      	ldrh	r3, [r7, #18]
 800647c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006480:	827b      	strh	r3, [r7, #18]
 8006482:	8a7b      	ldrh	r3, [r7, #18]
 8006484:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006488:	827b      	strh	r3, [r7, #18]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	8a7b      	ldrh	r3, [r7, #18]
 8006490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800649c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	8013      	strh	r3, [r2, #0]
 80064a4:	e22e      	b.n	8006904 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	461a      	mov	r2, r3
 80064ac:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80064ba:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f280 80f7 	bge.w	80066b2 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	461a      	mov	r2, r3
 80064ca:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80064da:	4013      	ands	r3, r2
 80064dc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	461a      	mov	r2, r3
 80064e6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80064f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064f6:	b292      	uxth	r2, r2
 80064f8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80064fa:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80064fe:	4613      	mov	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	4413      	add	r3, r2
 800650e:	3304      	adds	r3, #4
 8006510:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006514:	7b1b      	ldrb	r3, [r3, #12]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d123      	bne.n	8006562 <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006522:	b29b      	uxth	r3, r3
 8006524:	461a      	mov	r2, r3
 8006526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	00db      	lsls	r3, r3, #3
 800652c:	4413      	add	r3, r2
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	6812      	ldr	r2, [r2, #0]
 8006532:	4413      	add	r3, r2
 8006534:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800653e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8006542:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 808e 	beq.w	8006668 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6818      	ldr	r0, [r3, #0]
 8006550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006552:	6959      	ldr	r1, [r3, #20]
 8006554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006556:	88da      	ldrh	r2, [r3, #6]
 8006558:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800655c:	f005 fc28 	bl	800bdb0 <USB_ReadPMA>
 8006560:	e082      	b.n	8006668 <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006564:	78db      	ldrb	r3, [r3, #3]
 8006566:	2b02      	cmp	r3, #2
 8006568:	d10a      	bne.n	8006580 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800656a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800656e:	461a      	mov	r2, r3
 8006570:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f9d4 	bl	8006920 <HAL_PCD_EP_DB_Receive>
 8006578:	4603      	mov	r3, r0
 800657a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800657e:	e073      	b.n	8006668 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
 8006586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	b29b      	uxth	r3, r3
 8006592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	441a      	add	r2, r3
 80065ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80065b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	461a      	mov	r2, r3
 80065ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d022      	beq.n	8006624 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	461a      	mov	r2, r3
 80065ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	00db      	lsls	r3, r3, #3
 80065f0:	4413      	add	r3, r2
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	6812      	ldr	r2, [r2, #0]
 80065f6:	4413      	add	r3, r2
 80065f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006602:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006606:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800660a:	2b00      	cmp	r3, #0
 800660c:	d02c      	beq.n	8006668 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6818      	ldr	r0, [r3, #0]
 8006612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006614:	6959      	ldr	r1, [r3, #20]
 8006616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006618:	891a      	ldrh	r2, [r3, #8]
 800661a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800661e:	f005 fbc7 	bl	800bdb0 <USB_ReadPMA>
 8006622:	e021      	b.n	8006668 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800662c:	b29b      	uxth	r3, r3
 800662e:	461a      	mov	r2, r3
 8006630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	4413      	add	r3, r2
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	6812      	ldr	r2, [r2, #0]
 800663c:	4413      	add	r3, r2
 800663e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006648:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800664c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006650:	2b00      	cmp	r3, #0
 8006652:	d009      	beq.n	8006668 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6818      	ldr	r0, [r3, #0]
 8006658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800665a:	6959      	ldr	r1, [r3, #20]
 800665c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800665e:	895a      	ldrh	r2, [r3, #10]
 8006660:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006664:	f005 fba4 	bl	800bdb0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800666a:	69da      	ldr	r2, [r3, #28]
 800666c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006670:	441a      	add	r2, r3
 8006672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006674:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006678:	695a      	ldr	r2, [r3, #20]
 800667a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800667e:	441a      	add	r2, r3
 8006680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006682:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d005      	beq.n	8006698 <PCD_EP_ISR_Handler+0x4f2>
 800668c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	429a      	cmp	r2, r3
 8006696:	d206      	bcs.n	80066a6 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	4619      	mov	r1, r3
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f007 fa84 	bl	800dbac <HAL_PCD_DataOutStageCallback>
 80066a4:	e005      	b.n	80066b2 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80066ac:	4618      	mov	r0, r3
 80066ae:	f003 feac 	bl	800a40a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80066b2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80066b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 8122 	beq.w	8006904 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 80066c0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	4613      	mov	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	00db      	lsls	r3, r3, #3
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	4413      	add	r3, r2
 80066d2:	3304      	adds	r3, #4
 80066d4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	461a      	mov	r2, r3
 80066dc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80066ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	461a      	mov	r2, r3
 80066fa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	441a      	add	r2, r3
 8006702:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800670a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670e:	b29b      	uxth	r3, r3
 8006710:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006714:	78db      	ldrb	r3, [r3, #3]
 8006716:	2b01      	cmp	r3, #1
 8006718:	f040 80a2 	bne.w	8006860 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 800671c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800671e:	2200      	movs	r2, #0
 8006720:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006724:	7b1b      	ldrb	r3, [r3, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 8093 	beq.w	8006852 <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800672c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006734:	2b00      	cmp	r3, #0
 8006736:	d046      	beq.n	80067c6 <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800673a:	785b      	ldrb	r3, [r3, #1]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d126      	bne.n	800678e <PCD_EP_ISR_Handler+0x5e8>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	627b      	str	r3, [r7, #36]	; 0x24
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800674e:	b29b      	uxth	r3, r3
 8006750:	461a      	mov	r2, r3
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	4413      	add	r3, r2
 8006756:	627b      	str	r3, [r7, #36]	; 0x24
 8006758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	00da      	lsls	r2, r3, #3
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	4413      	add	r3, r2
 8006762:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006766:	623b      	str	r3, [r7, #32]
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	b29b      	uxth	r3, r3
 800676e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006772:	b29a      	uxth	r2, r3
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	801a      	strh	r2, [r3, #0]
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	b29b      	uxth	r3, r3
 800677e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006786:	b29a      	uxth	r2, r3
 8006788:	6a3b      	ldr	r3, [r7, #32]
 800678a:	801a      	strh	r2, [r3, #0]
 800678c:	e061      	b.n	8006852 <PCD_EP_ISR_Handler+0x6ac>
 800678e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006790:	785b      	ldrb	r3, [r3, #1]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d15d      	bne.n	8006852 <PCD_EP_ISR_Handler+0x6ac>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	461a      	mov	r2, r3
 80067a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067aa:	4413      	add	r3, r2
 80067ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	00da      	lsls	r2, r3, #3
 80067b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b6:	4413      	add	r3, r2
 80067b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80067be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c0:	2200      	movs	r2, #0
 80067c2:	801a      	strh	r2, [r3, #0]
 80067c4:	e045      	b.n	8006852 <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ce:	785b      	ldrb	r3, [r3, #1]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d126      	bne.n	8006822 <PCD_EP_ISR_Handler+0x67c>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	637b      	str	r3, [r7, #52]	; 0x34
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	461a      	mov	r2, r3
 80067e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e8:	4413      	add	r3, r2
 80067ea:	637b      	str	r3, [r7, #52]	; 0x34
 80067ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	00da      	lsls	r2, r3, #3
 80067f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f4:	4413      	add	r3, r2
 80067f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067fa:	633b      	str	r3, [r7, #48]	; 0x30
 80067fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	b29b      	uxth	r3, r3
 8006802:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006806:	b29a      	uxth	r2, r3
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	801a      	strh	r2, [r3, #0]
 800680c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	b29b      	uxth	r3, r3
 8006812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800681a:	b29a      	uxth	r2, r3
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	801a      	strh	r2, [r3, #0]
 8006820:	e017      	b.n	8006852 <PCD_EP_ISR_Handler+0x6ac>
 8006822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006824:	785b      	ldrb	r3, [r3, #1]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d113      	bne.n	8006852 <PCD_EP_ISR_Handler+0x6ac>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006832:	b29b      	uxth	r3, r3
 8006834:	461a      	mov	r2, r3
 8006836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006838:	4413      	add	r3, r2
 800683a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800683c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	00da      	lsls	r2, r3, #3
 8006842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006844:	4413      	add	r3, r2
 8006846:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800684a:	63bb      	str	r3, [r7, #56]	; 0x38
 800684c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684e:	2200      	movs	r2, #0
 8006850:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	4619      	mov	r1, r3
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f007 f9c2 	bl	800dbe2 <HAL_PCD_DataInStageCallback>
 800685e:	e051      	b.n	8006904 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006860:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006868:	2b00      	cmp	r3, #0
 800686a:	d144      	bne.n	80068f6 <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006874:	b29b      	uxth	r3, r3
 8006876:	461a      	mov	r2, r3
 8006878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	00db      	lsls	r3, r3, #3
 800687e:	4413      	add	r3, r2
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	6812      	ldr	r2, [r2, #0]
 8006884:	4413      	add	r3, r2
 8006886:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006890:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006896:	699a      	ldr	r2, [r3, #24]
 8006898:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800689c:	429a      	cmp	r2, r3
 800689e:	d907      	bls.n	80068b0 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 80068a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a2:	699a      	ldr	r2, [r3, #24]
 80068a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80068a8:	1ad2      	subs	r2, r2, r3
 80068aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ac:	619a      	str	r2, [r3, #24]
 80068ae:	e002      	b.n	80068b6 <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 80068b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068b2:	2200      	movs	r2, #0
 80068b4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80068b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d106      	bne.n	80068cc <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80068be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f007 f98c 	bl	800dbe2 <HAL_PCD_DataInStageCallback>
 80068ca:	e01b      	b.n	8006904 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80068cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ce:	695a      	ldr	r2, [r3, #20]
 80068d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80068d4:	441a      	add	r2, r3
 80068d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80068da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068dc:	69da      	ldr	r2, [r3, #28]
 80068de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80068e2:	441a      	add	r2, r3
 80068e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80068ee:	4618      	mov	r0, r3
 80068f0:	f003 fd8b 	bl	800a40a <USB_EPStartXfer>
 80068f4:	e006      	b.n	8006904 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80068f6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80068fa:	461a      	mov	r2, r3
 80068fc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f917 	bl	8006b32 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800690c:	b29b      	uxth	r3, r3
 800690e:	b21b      	sxth	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	f6ff ac4d 	blt.w	80061b0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3758      	adds	r7, #88	; 0x58
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	4613      	mov	r3, r2
 800692c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800692e:	88fb      	ldrh	r3, [r7, #6]
 8006930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d07c      	beq.n	8006a32 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006940:	b29b      	uxth	r3, r3
 8006942:	461a      	mov	r2, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	00db      	lsls	r3, r3, #3
 800694a:	4413      	add	r3, r2
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	6812      	ldr	r2, [r2, #0]
 8006950:	4413      	add	r3, r2
 8006952:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800695c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	8b7b      	ldrh	r3, [r7, #26]
 8006964:	429a      	cmp	r2, r3
 8006966:	d306      	bcc.n	8006976 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	699a      	ldr	r2, [r3, #24]
 800696c:	8b7b      	ldrh	r3, [r7, #26]
 800696e:	1ad2      	subs	r2, r2, r3
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	619a      	str	r2, [r3, #24]
 8006974:	e002      	b.n	800697c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2200      	movs	r2, #0
 800697a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d123      	bne.n	80069cc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	461a      	mov	r2, r3
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	b29b      	uxth	r3, r3
 8006996:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800699a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699e:	833b      	strh	r3, [r7, #24]
 80069a0:	8b3b      	ldrh	r3, [r7, #24]
 80069a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069a6:	833b      	strh	r3, [r7, #24]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	461a      	mov	r2, r3
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	441a      	add	r2, r3
 80069b6:	8b3b      	ldrh	r3, [r7, #24]
 80069b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80069cc:	88fb      	ldrh	r3, [r7, #6]
 80069ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d01f      	beq.n	8006a16 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f0:	82fb      	strh	r3, [r7, #22]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	461a      	mov	r2, r3
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	441a      	add	r2, r3
 8006a00:	8afb      	ldrh	r3, [r7, #22]
 8006a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006a16:	8b7b      	ldrh	r3, [r7, #26]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 8085 	beq.w	8006b28 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6818      	ldr	r0, [r3, #0]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	6959      	ldr	r1, [r3, #20]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	891a      	ldrh	r2, [r3, #8]
 8006a2a:	8b7b      	ldrh	r3, [r7, #26]
 8006a2c:	f005 f9c0 	bl	800bdb0 <USB_ReadPMA>
 8006a30:	e07a      	b.n	8006b28 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	00db      	lsls	r3, r3, #3
 8006a44:	4413      	add	r3, r2
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	6812      	ldr	r2, [r2, #0]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a56:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	699a      	ldr	r2, [r3, #24]
 8006a5c:	8b7b      	ldrh	r3, [r7, #26]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d306      	bcc.n	8006a70 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	699a      	ldr	r2, [r3, #24]
 8006a66:	8b7b      	ldrh	r3, [r7, #26]
 8006a68:	1ad2      	subs	r2, r2, r3
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	619a      	str	r2, [r3, #24]
 8006a6e:	e002      	b.n	8006a76 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2200      	movs	r2, #0
 8006a74:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d123      	bne.n	8006ac6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	461a      	mov	r2, r3
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a98:	83fb      	strh	r3, [r7, #30]
 8006a9a:	8bfb      	ldrh	r3, [r7, #30]
 8006a9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006aa0:	83fb      	strh	r3, [r7, #30]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	441a      	add	r2, r3
 8006ab0:	8bfb      	ldrh	r3, [r7, #30]
 8006ab2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ab6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006ac6:	88fb      	ldrh	r3, [r7, #6]
 8006ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d11f      	bne.n	8006b10 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aea:	83bb      	strh	r3, [r7, #28]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	461a      	mov	r2, r3
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	441a      	add	r2, r3
 8006afa:	8bbb      	ldrh	r3, [r7, #28]
 8006afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006b10:	8b7b      	ldrh	r3, [r7, #26]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d008      	beq.n	8006b28 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6818      	ldr	r0, [r3, #0]
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	6959      	ldr	r1, [r3, #20]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	895a      	ldrh	r2, [r3, #10]
 8006b22:	8b7b      	ldrh	r3, [r7, #26]
 8006b24:	f005 f944 	bl	800bdb0 <USB_ReadPMA>
    }
  }

  return count;
 8006b28:	8b7b      	ldrh	r3, [r7, #26]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3720      	adds	r7, #32
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b0a2      	sub	sp, #136	; 0x88
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	60b9      	str	r1, [r7, #8]
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006b40:	88fb      	ldrh	r3, [r7, #6]
 8006b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 81c5 	beq.w	8006ed6 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	461a      	mov	r2, r3
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	00db      	lsls	r3, r3, #3
 8006b5e:	4413      	add	r3, r2
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	6812      	ldr	r2, [r2, #0]
 8006b64:	4413      	add	r3, r2
 8006b66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b70:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	699a      	ldr	r2, [r3, #24]
 8006b78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d907      	bls.n	8006b90 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	699a      	ldr	r2, [r3, #24]
 8006b84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006b88:	1ad2      	subs	r2, r2, r3
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	619a      	str	r2, [r3, #24]
 8006b8e:	e002      	b.n	8006b96 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2200      	movs	r2, #0
 8006b94:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f040 80b9 	bne.w	8006d12 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	785b      	ldrb	r3, [r3, #1]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d126      	bne.n	8006bf6 <HAL_PCD_EP_DB_Transmit+0xc4>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	461a      	mov	r2, r3
 8006bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbc:	4413      	add	r3, r2
 8006bbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	00da      	lsls	r2, r3, #3
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc8:	4413      	add	r3, r2
 8006bca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bce:	627b      	str	r3, [r7, #36]	; 0x24
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	801a      	strh	r2, [r3, #0]
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	801a      	strh	r2, [r3, #0]
 8006bf4:	e01a      	b.n	8006c2c <HAL_PCD_EP_DB_Transmit+0xfa>
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	785b      	ldrb	r3, [r3, #1]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d116      	bne.n	8006c2c <HAL_PCD_EP_DB_Transmit+0xfa>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	633b      	str	r3, [r7, #48]	; 0x30
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	461a      	mov	r2, r3
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	4413      	add	r3, r2
 8006c14:	633b      	str	r3, [r7, #48]	; 0x30
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	00da      	lsls	r2, r3, #3
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	4413      	add	r3, r2
 8006c20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c28:	2200      	movs	r2, #0
 8006c2a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	623b      	str	r3, [r7, #32]
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	785b      	ldrb	r3, [r3, #1]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d126      	bne.n	8006c88 <HAL_PCD_EP_DB_Transmit+0x156>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	61bb      	str	r3, [r7, #24]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	4413      	add	r3, r2
 8006c50:	61bb      	str	r3, [r7, #24]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	00da      	lsls	r2, r3, #3
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c60:	617b      	str	r3, [r7, #20]
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	801a      	strh	r2, [r3, #0]
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	801a      	strh	r2, [r3, #0]
 8006c86:	e017      	b.n	8006cb8 <HAL_PCD_EP_DB_Transmit+0x186>
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	785b      	ldrb	r3, [r3, #1]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d113      	bne.n	8006cb8 <HAL_PCD_EP_DB_Transmit+0x186>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	623b      	str	r3, [r7, #32]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	00da      	lsls	r2, r3, #3
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	4413      	add	r3, r2
 8006cac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006cb0:	61fb      	str	r3, [r7, #28]
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f006 ff8f 	bl	800dbe2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006cc4:	88fb      	ldrh	r3, [r7, #6]
 8006cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 82d2 	beq.w	8007274 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cea:	827b      	strh	r3, [r7, #18]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	441a      	add	r2, r3
 8006cfa:	8a7b      	ldrh	r3, [r7, #18]
 8006cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	8013      	strh	r3, [r2, #0]
 8006d10:	e2b0      	b.n	8007274 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006d12:	88fb      	ldrh	r3, [r7, #6]
 8006d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d021      	beq.n	8006d60 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	461a      	mov	r2, r3
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d36:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	441a      	add	r2, r3
 8006d48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	f040 8284 	bne.w	8007274 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	695a      	ldr	r2, [r3, #20]
 8006d70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006d74:	441a      	add	r2, r3
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	69da      	ldr	r2, [r3, #28]
 8006d7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006d82:	441a      	add	r2, r3
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	6a1a      	ldr	r2, [r3, #32]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d309      	bcc.n	8006da8 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	6a1a      	ldr	r2, [r3, #32]
 8006d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006da0:	1ad2      	subs	r2, r2, r3
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	621a      	str	r2, [r3, #32]
 8006da6:	e015      	b.n	8006dd4 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d107      	bne.n	8006dc0 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8006db0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006db4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006dbe:	e009      	b.n	8006dd4 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	785b      	ldrb	r3, [r3, #1]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d155      	bne.n	8006e88 <HAL_PCD_EP_DB_Transmit+0x356>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	461a      	mov	r2, r3
 8006dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df0:	4413      	add	r3, r2
 8006df2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	00da      	lsls	r2, r3, #3
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e02:	637b      	str	r3, [r7, #52]	; 0x34
 8006e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e06:	2b3e      	cmp	r3, #62	; 0x3e
 8006e08:	d916      	bls.n	8006e38 <HAL_PCD_EP_DB_Transmit+0x306>
 8006e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e0c:	095b      	lsrs	r3, r3, #5
 8006e0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e12:	f003 031f 	and.w	r3, r3, #31
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d102      	bne.n	8006e20 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8006e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	029b      	lsls	r3, r3, #10
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e34:	801a      	strh	r2, [r3, #0]
 8006e36:	e043      	b.n	8006ec0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8006e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d112      	bne.n	8006e64 <HAL_PCD_EP_DB_Transmit+0x332>
 8006e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e4c:	801a      	strh	r2, [r3, #0]
 8006e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e50:	881b      	ldrh	r3, [r3, #0]
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e60:	801a      	strh	r2, [r3, #0]
 8006e62:	e02d      	b.n	8006ec0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8006e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e66:	085b      	lsrs	r3, r3, #1
 8006e68:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <HAL_PCD_EP_DB_Transmit+0x348>
 8006e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e76:	3301      	adds	r3, #1
 8006e78:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	029b      	lsls	r3, r3, #10
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e84:	801a      	strh	r2, [r3, #0]
 8006e86:	e01b      	b.n	8006ec0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	785b      	ldrb	r3, [r3, #1]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d117      	bne.n	8006ec0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	643b      	str	r3, [r7, #64]	; 0x40
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ea4:	4413      	add	r3, r2
 8006ea6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	00da      	lsls	r2, r3, #3
 8006eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ebe:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6818      	ldr	r0, [r3, #0]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	6959      	ldr	r1, [r3, #20]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	891a      	ldrh	r2, [r3, #8]
 8006ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	f004 ff2c 	bl	800bd2c <USB_WritePMA>
 8006ed4:	e1ce      	b.n	8007274 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	00db      	lsls	r3, r3, #3
 8006ee8:	4413      	add	r3, r2
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	6812      	ldr	r2, [r2, #0]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006efa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	699a      	ldr	r2, [r3, #24]
 8006f02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d307      	bcc.n	8006f1a <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	699a      	ldr	r2, [r3, #24]
 8006f0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f12:	1ad2      	subs	r2, r2, r3
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	619a      	str	r2, [r3, #24]
 8006f18:	e002      	b.n	8006f20 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f040 80c4 	bne.w	80070b2 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	785b      	ldrb	r3, [r3, #1]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d126      	bne.n	8006f80 <HAL_PCD_EP_DB_Transmit+0x44e>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	461a      	mov	r2, r3
 8006f44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f46:	4413      	add	r3, r2
 8006f48:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	00da      	lsls	r2, r3, #3
 8006f50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f52:	4413      	add	r3, r2
 8006f54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f58:	667b      	str	r3, [r7, #100]	; 0x64
 8006f5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f5c:	881b      	ldrh	r3, [r3, #0]
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f68:	801a      	strh	r2, [r3, #0]
 8006f6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f7c:	801a      	strh	r2, [r3, #0]
 8006f7e:	e01a      	b.n	8006fb6 <HAL_PCD_EP_DB_Transmit+0x484>
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	785b      	ldrb	r3, [r3, #1]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d116      	bne.n	8006fb6 <HAL_PCD_EP_DB_Transmit+0x484>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	673b      	str	r3, [r7, #112]	; 0x70
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	461a      	mov	r2, r3
 8006f9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f9c:	4413      	add	r3, r2
 8006f9e:	673b      	str	r3, [r7, #112]	; 0x70
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	00da      	lsls	r2, r3, #3
 8006fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fa8:	4413      	add	r3, r2
 8006faa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	785b      	ldrb	r3, [r3, #1]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d12f      	bne.n	8007024 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fdc:	4413      	add	r3, r2
 8006fde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	00da      	lsls	r2, r3, #3
 8006fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fec:	4413      	add	r3, r2
 8006fee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ff2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ff6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ffa:	881b      	ldrh	r3, [r3, #0]
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007002:	b29a      	uxth	r2, r3
 8007004:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007008:	801a      	strh	r2, [r3, #0]
 800700a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	b29b      	uxth	r3, r3
 8007012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800701a:	b29a      	uxth	r2, r3
 800701c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007020:	801a      	strh	r2, [r3, #0]
 8007022:	e017      	b.n	8007054 <HAL_PCD_EP_DB_Transmit+0x522>
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	785b      	ldrb	r3, [r3, #1]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d113      	bne.n	8007054 <HAL_PCD_EP_DB_Transmit+0x522>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007034:	b29b      	uxth	r3, r3
 8007036:	461a      	mov	r2, r3
 8007038:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800703a:	4413      	add	r3, r2
 800703c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	00da      	lsls	r2, r3, #3
 8007044:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007046:	4413      	add	r3, r2
 8007048:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800704c:	67bb      	str	r3, [r7, #120]	; 0x78
 800704e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007050:	2200      	movs	r2, #0
 8007052:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	4619      	mov	r1, r3
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f006 fdc1 	bl	800dbe2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007060:	88fb      	ldrh	r3, [r7, #6]
 8007062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007066:	2b00      	cmp	r3, #0
 8007068:	f040 8104 	bne.w	8007274 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	461a      	mov	r2, r3
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	b29b      	uxth	r3, r3
 800707e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007086:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	461a      	mov	r2, r3
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	441a      	add	r2, r3
 8007098:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800709c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	8013      	strh	r3, [r2, #0]
 80070b0:	e0e0      	b.n	8007274 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80070b2:	88fb      	ldrh	r3, [r7, #6]
 80070b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d121      	bne.n	8007100 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	461a      	mov	r2, r3
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	461a      	mov	r2, r3
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	441a      	add	r2, r3
 80070e8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80070ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007106:	2b01      	cmp	r3, #1
 8007108:	f040 80b4 	bne.w	8007274 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	695a      	ldr	r2, [r3, #20]
 8007110:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007114:	441a      	add	r2, r3
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	69da      	ldr	r2, [r3, #28]
 800711e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007122:	441a      	add	r2, r3
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	6a1a      	ldr	r2, [r3, #32]
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	429a      	cmp	r2, r3
 8007132:	d309      	bcc.n	8007148 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	6a1a      	ldr	r2, [r3, #32]
 800713e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007140:	1ad2      	subs	r2, r2, r3
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	621a      	str	r2, [r3, #32]
 8007146:	e015      	b.n	8007174 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d107      	bne.n	8007160 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8007150:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007154:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800715e:	e009      	b.n	8007174 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	6a1b      	ldr	r3, [r3, #32]
 8007164:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2200      	movs	r2, #0
 800716a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	663b      	str	r3, [r7, #96]	; 0x60
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	785b      	ldrb	r3, [r3, #1]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d155      	bne.n	800722e <HAL_PCD_EP_DB_Transmit+0x6fc>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	65bb      	str	r3, [r7, #88]	; 0x58
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007190:	b29b      	uxth	r3, r3
 8007192:	461a      	mov	r2, r3
 8007194:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007196:	4413      	add	r3, r2
 8007198:	65bb      	str	r3, [r7, #88]	; 0x58
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	00da      	lsls	r2, r3, #3
 80071a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071a2:	4413      	add	r3, r2
 80071a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071a8:	657b      	str	r3, [r7, #84]	; 0x54
 80071aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071ac:	2b3e      	cmp	r3, #62	; 0x3e
 80071ae:	d916      	bls.n	80071de <HAL_PCD_EP_DB_Transmit+0x6ac>
 80071b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071b2:	095b      	lsrs	r3, r3, #5
 80071b4:	677b      	str	r3, [r7, #116]	; 0x74
 80071b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071b8:	f003 031f 	and.w	r3, r3, #31
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d102      	bne.n	80071c6 <HAL_PCD_EP_DB_Transmit+0x694>
 80071c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071c2:	3b01      	subs	r3, #1
 80071c4:	677b      	str	r3, [r7, #116]	; 0x74
 80071c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	029b      	lsls	r3, r3, #10
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071da:	801a      	strh	r2, [r3, #0]
 80071dc:	e040      	b.n	8007260 <HAL_PCD_EP_DB_Transmit+0x72e>
 80071de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d112      	bne.n	800720a <HAL_PCD_EP_DB_Transmit+0x6d8>
 80071e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071f2:	801a      	strh	r2, [r3, #0]
 80071f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007202:	b29a      	uxth	r2, r3
 8007204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007206:	801a      	strh	r2, [r3, #0]
 8007208:	e02a      	b.n	8007260 <HAL_PCD_EP_DB_Transmit+0x72e>
 800720a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800720c:	085b      	lsrs	r3, r3, #1
 800720e:	677b      	str	r3, [r7, #116]	; 0x74
 8007210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <HAL_PCD_EP_DB_Transmit+0x6ee>
 800721a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800721c:	3301      	adds	r3, #1
 800721e:	677b      	str	r3, [r7, #116]	; 0x74
 8007220:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007222:	b29b      	uxth	r3, r3
 8007224:	029b      	lsls	r3, r3, #10
 8007226:	b29a      	uxth	r2, r3
 8007228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800722a:	801a      	strh	r2, [r3, #0]
 800722c:	e018      	b.n	8007260 <HAL_PCD_EP_DB_Transmit+0x72e>
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	785b      	ldrb	r3, [r3, #1]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d114      	bne.n	8007260 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800723e:	b29b      	uxth	r3, r3
 8007240:	461a      	mov	r2, r3
 8007242:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007244:	4413      	add	r3, r2
 8007246:	663b      	str	r3, [r7, #96]	; 0x60
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	00da      	lsls	r2, r3, #3
 800724e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007250:	4413      	add	r3, r2
 8007252:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007256:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800725a:	b29a      	uxth	r2, r3
 800725c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800725e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6818      	ldr	r0, [r3, #0]
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	6959      	ldr	r1, [r3, #20]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	895a      	ldrh	r2, [r3, #10]
 800726c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800726e:	b29b      	uxth	r3, r3
 8007270:	f004 fd5c 	bl	800bd2c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	461a      	mov	r2, r3
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	b29b      	uxth	r3, r3
 8007286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800728a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800728e:	823b      	strh	r3, [r7, #16]
 8007290:	8a3b      	ldrh	r3, [r7, #16]
 8007292:	f083 0310 	eor.w	r3, r3, #16
 8007296:	823b      	strh	r3, [r7, #16]
 8007298:	8a3b      	ldrh	r3, [r7, #16]
 800729a:	f083 0320 	eor.w	r3, r3, #32
 800729e:	823b      	strh	r3, [r7, #16]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	461a      	mov	r2, r3
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	441a      	add	r2, r3
 80072ae:	8a3b      	ldrh	r3, [r7, #16]
 80072b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3788      	adds	r7, #136	; 0x88
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b087      	sub	sp, #28
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	607b      	str	r3, [r7, #4]
 80072d8:	460b      	mov	r3, r1
 80072da:	817b      	strh	r3, [r7, #10]
 80072dc:	4613      	mov	r3, r2
 80072de:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80072e0:	897b      	ldrh	r3, [r7, #10]
 80072e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00c      	beq.n	8007306 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072ec:	897b      	ldrh	r3, [r7, #10]
 80072ee:	f003 0307 	and.w	r3, r3, #7
 80072f2:	1c5a      	adds	r2, r3, #1
 80072f4:	4613      	mov	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	00db      	lsls	r3, r3, #3
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	4413      	add	r3, r2
 8007300:	3304      	adds	r3, #4
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	e00a      	b.n	800731c <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007306:	897a      	ldrh	r2, [r7, #10]
 8007308:	4613      	mov	r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4413      	add	r3, r2
 800730e:	00db      	lsls	r3, r3, #3
 8007310:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	4413      	add	r3, r2
 8007318:	3304      	adds	r3, #4
 800731a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800731c:	893b      	ldrh	r3, [r7, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d107      	bne.n	8007332 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	2200      	movs	r2, #0
 8007326:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	b29a      	uxth	r2, r3
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	80da      	strh	r2, [r3, #6]
 8007330:	e00b      	b.n	800734a <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	2201      	movs	r2, #1
 8007336:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	b29a      	uxth	r2, r3
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	0c1b      	lsrs	r3, r3, #16
 8007344:	b29a      	uxth	r2, r3
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	371c      	adds	r7, #28
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800737c:	b29b      	uxth	r3, r3
 800737e:	f043 0301 	orr.w	r3, r3, #1
 8007382:	b29a      	uxth	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007390:	b29b      	uxth	r3, r3
 8007392:	f043 0302 	orr.w	r3, r3, #2
 8007396:	b29a      	uxth	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80073b0:	4b04      	ldr	r3, [pc, #16]	; (80073c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	40007000 	.word	0x40007000

080073c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073d6:	d130      	bne.n	800743a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80073d8:	4b23      	ldr	r3, [pc, #140]	; (8007468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80073e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073e4:	d038      	beq.n	8007458 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80073e6:	4b20      	ldr	r3, [pc, #128]	; (8007468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80073ee:	4a1e      	ldr	r2, [pc, #120]	; (8007468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80073f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80073f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80073f6:	4b1d      	ldr	r3, [pc, #116]	; (800746c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2232      	movs	r2, #50	; 0x32
 80073fc:	fb02 f303 	mul.w	r3, r2, r3
 8007400:	4a1b      	ldr	r2, [pc, #108]	; (8007470 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007402:	fba2 2303 	umull	r2, r3, r2, r3
 8007406:	0c9b      	lsrs	r3, r3, #18
 8007408:	3301      	adds	r3, #1
 800740a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800740c:	e002      	b.n	8007414 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	3b01      	subs	r3, #1
 8007412:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007414:	4b14      	ldr	r3, [pc, #80]	; (8007468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007416:	695b      	ldr	r3, [r3, #20]
 8007418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800741c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007420:	d102      	bne.n	8007428 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1f2      	bne.n	800740e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007428:	4b0f      	ldr	r3, [pc, #60]	; (8007468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007434:	d110      	bne.n	8007458 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e00f      	b.n	800745a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800743a:	4b0b      	ldr	r3, [pc, #44]	; (8007468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007446:	d007      	beq.n	8007458 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007448:	4b07      	ldr	r3, [pc, #28]	; (8007468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007450:	4a05      	ldr	r2, [pc, #20]	; (8007468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007452:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007456:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	40007000 	.word	0x40007000
 800746c:	20000000 	.word	0x20000000
 8007470:	431bde83 	.word	0x431bde83

08007474 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007474:	b480      	push	{r7}
 8007476:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007478:	4b05      	ldr	r3, [pc, #20]	; (8007490 <HAL_PWREx_EnableVddUSB+0x1c>)
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	4a04      	ldr	r2, [pc, #16]	; (8007490 <HAL_PWREx_EnableVddUSB+0x1c>)
 800747e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007482:	6053      	str	r3, [r2, #4]
}
 8007484:	bf00      	nop
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	40007000 	.word	0x40007000

08007494 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b088      	sub	sp, #32
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d102      	bne.n	80074a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	f000 bc02 	b.w	8007cac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074a8:	4b96      	ldr	r3, [pc, #600]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	f003 030c 	and.w	r3, r3, #12
 80074b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074b2:	4b94      	ldr	r3, [pc, #592]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0310 	and.w	r3, r3, #16
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 80e4 	beq.w	8007692 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d007      	beq.n	80074e0 <HAL_RCC_OscConfig+0x4c>
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	2b0c      	cmp	r3, #12
 80074d4:	f040 808b 	bne.w	80075ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	f040 8087 	bne.w	80075ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80074e0:	4b88      	ldr	r3, [pc, #544]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d005      	beq.n	80074f8 <HAL_RCC_OscConfig+0x64>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e3d9      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a1a      	ldr	r2, [r3, #32]
 80074fc:	4b81      	ldr	r3, [pc, #516]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0308 	and.w	r3, r3, #8
 8007504:	2b00      	cmp	r3, #0
 8007506:	d004      	beq.n	8007512 <HAL_RCC_OscConfig+0x7e>
 8007508:	4b7e      	ldr	r3, [pc, #504]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007510:	e005      	b.n	800751e <HAL_RCC_OscConfig+0x8a>
 8007512:	4b7c      	ldr	r3, [pc, #496]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007518:	091b      	lsrs	r3, r3, #4
 800751a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800751e:	4293      	cmp	r3, r2
 8007520:	d223      	bcs.n	800756a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	4618      	mov	r0, r3
 8007528:	f000 fd60 	bl	8007fec <RCC_SetFlashLatencyFromMSIRange>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e3ba      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007536:	4b73      	ldr	r3, [pc, #460]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a72      	ldr	r2, [pc, #456]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 800753c:	f043 0308 	orr.w	r3, r3, #8
 8007540:	6013      	str	r3, [r2, #0]
 8007542:	4b70      	ldr	r3, [pc, #448]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	496d      	ldr	r1, [pc, #436]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007550:	4313      	orrs	r3, r2
 8007552:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007554:	4b6b      	ldr	r3, [pc, #428]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	021b      	lsls	r3, r3, #8
 8007562:	4968      	ldr	r1, [pc, #416]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007564:	4313      	orrs	r3, r2
 8007566:	604b      	str	r3, [r1, #4]
 8007568:	e025      	b.n	80075b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800756a:	4b66      	ldr	r3, [pc, #408]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a65      	ldr	r2, [pc, #404]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007570:	f043 0308 	orr.w	r3, r3, #8
 8007574:	6013      	str	r3, [r2, #0]
 8007576:	4b63      	ldr	r3, [pc, #396]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	4960      	ldr	r1, [pc, #384]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007584:	4313      	orrs	r3, r2
 8007586:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007588:	4b5e      	ldr	r3, [pc, #376]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	69db      	ldr	r3, [r3, #28]
 8007594:	021b      	lsls	r3, r3, #8
 8007596:	495b      	ldr	r1, [pc, #364]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007598:	4313      	orrs	r3, r2
 800759a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d109      	bne.n	80075b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 fd20 	bl	8007fec <RCC_SetFlashLatencyFromMSIRange>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d001      	beq.n	80075b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e37a      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80075b6:	f000 fc81 	bl	8007ebc <HAL_RCC_GetSysClockFreq>
 80075ba:	4602      	mov	r2, r0
 80075bc:	4b51      	ldr	r3, [pc, #324]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	091b      	lsrs	r3, r3, #4
 80075c2:	f003 030f 	and.w	r3, r3, #15
 80075c6:	4950      	ldr	r1, [pc, #320]	; (8007708 <HAL_RCC_OscConfig+0x274>)
 80075c8:	5ccb      	ldrb	r3, [r1, r3]
 80075ca:	f003 031f 	and.w	r3, r3, #31
 80075ce:	fa22 f303 	lsr.w	r3, r2, r3
 80075d2:	4a4e      	ldr	r2, [pc, #312]	; (800770c <HAL_RCC_OscConfig+0x278>)
 80075d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80075d6:	4b4e      	ldr	r3, [pc, #312]	; (8007710 <HAL_RCC_OscConfig+0x27c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fc fbc2 	bl	8003d64 <HAL_InitTick>
 80075e0:	4603      	mov	r3, r0
 80075e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d052      	beq.n	8007690 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
 80075ec:	e35e      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d032      	beq.n	800765c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80075f6:	4b43      	ldr	r3, [pc, #268]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a42      	ldr	r2, [pc, #264]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80075fc:	f043 0301 	orr.w	r3, r3, #1
 8007600:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007602:	f7fc fbff 	bl	8003e04 <HAL_GetTick>
 8007606:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007608:	e008      	b.n	800761c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800760a:	f7fc fbfb 	bl	8003e04 <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	2b02      	cmp	r3, #2
 8007616:	d901      	bls.n	800761c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e347      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800761c:	4b39      	ldr	r3, [pc, #228]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0302 	and.w	r3, r3, #2
 8007624:	2b00      	cmp	r3, #0
 8007626:	d0f0      	beq.n	800760a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007628:	4b36      	ldr	r3, [pc, #216]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a35      	ldr	r2, [pc, #212]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 800762e:	f043 0308 	orr.w	r3, r3, #8
 8007632:	6013      	str	r3, [r2, #0]
 8007634:	4b33      	ldr	r3, [pc, #204]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	4930      	ldr	r1, [pc, #192]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007642:	4313      	orrs	r3, r2
 8007644:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007646:	4b2f      	ldr	r3, [pc, #188]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	021b      	lsls	r3, r3, #8
 8007654:	492b      	ldr	r1, [pc, #172]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007656:	4313      	orrs	r3, r2
 8007658:	604b      	str	r3, [r1, #4]
 800765a:	e01a      	b.n	8007692 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800765c:	4b29      	ldr	r3, [pc, #164]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a28      	ldr	r2, [pc, #160]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007662:	f023 0301 	bic.w	r3, r3, #1
 8007666:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007668:	f7fc fbcc 	bl	8003e04 <HAL_GetTick>
 800766c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800766e:	e008      	b.n	8007682 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007670:	f7fc fbc8 	bl	8003e04 <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	2b02      	cmp	r3, #2
 800767c:	d901      	bls.n	8007682 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e314      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007682:	4b20      	ldr	r3, [pc, #128]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1f0      	bne.n	8007670 <HAL_RCC_OscConfig+0x1dc>
 800768e:	e000      	b.n	8007692 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007690:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d073      	beq.n	8007786 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	2b08      	cmp	r3, #8
 80076a2:	d005      	beq.n	80076b0 <HAL_RCC_OscConfig+0x21c>
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	2b0c      	cmp	r3, #12
 80076a8:	d10e      	bne.n	80076c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d10b      	bne.n	80076c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076b0:	4b14      	ldr	r3, [pc, #80]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d063      	beq.n	8007784 <HAL_RCC_OscConfig+0x2f0>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d15f      	bne.n	8007784 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e2f1      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d0:	d106      	bne.n	80076e0 <HAL_RCC_OscConfig+0x24c>
 80076d2:	4b0c      	ldr	r3, [pc, #48]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a0b      	ldr	r2, [pc, #44]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80076d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076dc:	6013      	str	r3, [r2, #0]
 80076de:	e025      	b.n	800772c <HAL_RCC_OscConfig+0x298>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076e8:	d114      	bne.n	8007714 <HAL_RCC_OscConfig+0x280>
 80076ea:	4b06      	ldr	r3, [pc, #24]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a05      	ldr	r2, [pc, #20]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80076f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	4b03      	ldr	r3, [pc, #12]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a02      	ldr	r2, [pc, #8]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80076fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007700:	6013      	str	r3, [r2, #0]
 8007702:	e013      	b.n	800772c <HAL_RCC_OscConfig+0x298>
 8007704:	40021000 	.word	0x40021000
 8007708:	0800e314 	.word	0x0800e314
 800770c:	20000000 	.word	0x20000000
 8007710:	20000004 	.word	0x20000004
 8007714:	4ba0      	ldr	r3, [pc, #640]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a9f      	ldr	r2, [pc, #636]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 800771a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	4b9d      	ldr	r3, [pc, #628]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a9c      	ldr	r2, [pc, #624]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800772a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d013      	beq.n	800775c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007734:	f7fc fb66 	bl	8003e04 <HAL_GetTick>
 8007738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800773a:	e008      	b.n	800774e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800773c:	f7fc fb62 	bl	8003e04 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b64      	cmp	r3, #100	; 0x64
 8007748:	d901      	bls.n	800774e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e2ae      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800774e:	4b92      	ldr	r3, [pc, #584]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0f0      	beq.n	800773c <HAL_RCC_OscConfig+0x2a8>
 800775a:	e014      	b.n	8007786 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800775c:	f7fc fb52 	bl	8003e04 <HAL_GetTick>
 8007760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007762:	e008      	b.n	8007776 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007764:	f7fc fb4e 	bl	8003e04 <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	2b64      	cmp	r3, #100	; 0x64
 8007770:	d901      	bls.n	8007776 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e29a      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007776:	4b88      	ldr	r3, [pc, #544]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1f0      	bne.n	8007764 <HAL_RCC_OscConfig+0x2d0>
 8007782:	e000      	b.n	8007786 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0302 	and.w	r3, r3, #2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d060      	beq.n	8007854 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	2b04      	cmp	r3, #4
 8007796:	d005      	beq.n	80077a4 <HAL_RCC_OscConfig+0x310>
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	2b0c      	cmp	r3, #12
 800779c:	d119      	bne.n	80077d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d116      	bne.n	80077d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077a4:	4b7c      	ldr	r3, [pc, #496]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d005      	beq.n	80077bc <HAL_RCC_OscConfig+0x328>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e277      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077bc:	4b76      	ldr	r3, [pc, #472]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	061b      	lsls	r3, r3, #24
 80077ca:	4973      	ldr	r1, [pc, #460]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077d0:	e040      	b.n	8007854 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d023      	beq.n	8007822 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077da:	4b6f      	ldr	r3, [pc, #444]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a6e      	ldr	r2, [pc, #440]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 80077e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077e6:	f7fc fb0d 	bl	8003e04 <HAL_GetTick>
 80077ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077ec:	e008      	b.n	8007800 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077ee:	f7fc fb09 	bl	8003e04 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d901      	bls.n	8007800 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e255      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007800:	4b65      	ldr	r3, [pc, #404]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007808:	2b00      	cmp	r3, #0
 800780a:	d0f0      	beq.n	80077ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800780c:	4b62      	ldr	r3, [pc, #392]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	061b      	lsls	r3, r3, #24
 800781a:	495f      	ldr	r1, [pc, #380]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 800781c:	4313      	orrs	r3, r2
 800781e:	604b      	str	r3, [r1, #4]
 8007820:	e018      	b.n	8007854 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007822:	4b5d      	ldr	r3, [pc, #372]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a5c      	ldr	r2, [pc, #368]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800782c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800782e:	f7fc fae9 	bl	8003e04 <HAL_GetTick>
 8007832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007834:	e008      	b.n	8007848 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007836:	f7fc fae5 	bl	8003e04 <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	2b02      	cmp	r3, #2
 8007842:	d901      	bls.n	8007848 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e231      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007848:	4b53      	ldr	r3, [pc, #332]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1f0      	bne.n	8007836 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0308 	and.w	r3, r3, #8
 800785c:	2b00      	cmp	r3, #0
 800785e:	d03c      	beq.n	80078da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d01c      	beq.n	80078a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007868:	4b4b      	ldr	r3, [pc, #300]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 800786a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800786e:	4a4a      	ldr	r2, [pc, #296]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007870:	f043 0301 	orr.w	r3, r3, #1
 8007874:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007878:	f7fc fac4 	bl	8003e04 <HAL_GetTick>
 800787c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800787e:	e008      	b.n	8007892 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007880:	f7fc fac0 	bl	8003e04 <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	2b02      	cmp	r3, #2
 800788c:	d901      	bls.n	8007892 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e20c      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007892:	4b41      	ldr	r3, [pc, #260]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007898:	f003 0302 	and.w	r3, r3, #2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d0ef      	beq.n	8007880 <HAL_RCC_OscConfig+0x3ec>
 80078a0:	e01b      	b.n	80078da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078a2:	4b3d      	ldr	r3, [pc, #244]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 80078a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078a8:	4a3b      	ldr	r2, [pc, #236]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 80078aa:	f023 0301 	bic.w	r3, r3, #1
 80078ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078b2:	f7fc faa7 	bl	8003e04 <HAL_GetTick>
 80078b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80078b8:	e008      	b.n	80078cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078ba:	f7fc faa3 	bl	8003e04 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d901      	bls.n	80078cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e1ef      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80078cc:	4b32      	ldr	r3, [pc, #200]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 80078ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078d2:	f003 0302 	and.w	r3, r3, #2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1ef      	bne.n	80078ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0304 	and.w	r3, r3, #4
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 80a6 	beq.w	8007a34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078e8:	2300      	movs	r3, #0
 80078ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80078ec:	4b2a      	ldr	r3, [pc, #168]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 80078ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10d      	bne.n	8007914 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078f8:	4b27      	ldr	r3, [pc, #156]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 80078fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078fc:	4a26      	ldr	r2, [pc, #152]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 80078fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007902:	6593      	str	r3, [r2, #88]	; 0x58
 8007904:	4b24      	ldr	r3, [pc, #144]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800790c:	60bb      	str	r3, [r7, #8]
 800790e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007910:	2301      	movs	r3, #1
 8007912:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007914:	4b21      	ldr	r3, [pc, #132]	; (800799c <HAL_RCC_OscConfig+0x508>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800791c:	2b00      	cmp	r3, #0
 800791e:	d118      	bne.n	8007952 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007920:	4b1e      	ldr	r3, [pc, #120]	; (800799c <HAL_RCC_OscConfig+0x508>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a1d      	ldr	r2, [pc, #116]	; (800799c <HAL_RCC_OscConfig+0x508>)
 8007926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800792a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800792c:	f7fc fa6a 	bl	8003e04 <HAL_GetTick>
 8007930:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007932:	e008      	b.n	8007946 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007934:	f7fc fa66 	bl	8003e04 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	2b02      	cmp	r3, #2
 8007940:	d901      	bls.n	8007946 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e1b2      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007946:	4b15      	ldr	r3, [pc, #84]	; (800799c <HAL_RCC_OscConfig+0x508>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800794e:	2b00      	cmp	r3, #0
 8007950:	d0f0      	beq.n	8007934 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d108      	bne.n	800796c <HAL_RCC_OscConfig+0x4d8>
 800795a:	4b0f      	ldr	r3, [pc, #60]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 800795c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007960:	4a0d      	ldr	r2, [pc, #52]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007962:	f043 0301 	orr.w	r3, r3, #1
 8007966:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800796a:	e029      	b.n	80079c0 <HAL_RCC_OscConfig+0x52c>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	2b05      	cmp	r3, #5
 8007972:	d115      	bne.n	80079a0 <HAL_RCC_OscConfig+0x50c>
 8007974:	4b08      	ldr	r3, [pc, #32]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800797a:	4a07      	ldr	r2, [pc, #28]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 800797c:	f043 0304 	orr.w	r3, r3, #4
 8007980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007984:	4b04      	ldr	r3, [pc, #16]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800798a:	4a03      	ldr	r2, [pc, #12]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 800798c:	f043 0301 	orr.w	r3, r3, #1
 8007990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007994:	e014      	b.n	80079c0 <HAL_RCC_OscConfig+0x52c>
 8007996:	bf00      	nop
 8007998:	40021000 	.word	0x40021000
 800799c:	40007000 	.word	0x40007000
 80079a0:	4b9a      	ldr	r3, [pc, #616]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 80079a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a6:	4a99      	ldr	r2, [pc, #612]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 80079a8:	f023 0301 	bic.w	r3, r3, #1
 80079ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80079b0:	4b96      	ldr	r3, [pc, #600]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 80079b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079b6:	4a95      	ldr	r2, [pc, #596]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 80079b8:	f023 0304 	bic.w	r3, r3, #4
 80079bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d016      	beq.n	80079f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079c8:	f7fc fa1c 	bl	8003e04 <HAL_GetTick>
 80079cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079ce:	e00a      	b.n	80079e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079d0:	f7fc fa18 	bl	8003e04 <HAL_GetTick>
 80079d4:	4602      	mov	r2, r0
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	f241 3288 	movw	r2, #5000	; 0x1388
 80079de:	4293      	cmp	r3, r2
 80079e0:	d901      	bls.n	80079e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e162      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079e6:	4b89      	ldr	r3, [pc, #548]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 80079e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d0ed      	beq.n	80079d0 <HAL_RCC_OscConfig+0x53c>
 80079f4:	e015      	b.n	8007a22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079f6:	f7fc fa05 	bl	8003e04 <HAL_GetTick>
 80079fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80079fc:	e00a      	b.n	8007a14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079fe:	f7fc fa01 	bl	8003e04 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d901      	bls.n	8007a14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e14b      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a14:	4b7d      	ldr	r3, [pc, #500]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 8007a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1ed      	bne.n	80079fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a22:	7ffb      	ldrb	r3, [r7, #31]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d105      	bne.n	8007a34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a28:	4b78      	ldr	r3, [pc, #480]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 8007a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a2c:	4a77      	ldr	r2, [pc, #476]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 8007a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0320 	and.w	r3, r3, #32
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d03c      	beq.n	8007aba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d01c      	beq.n	8007a82 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007a48:	4b70      	ldr	r3, [pc, #448]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 8007a4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a4e:	4a6f      	ldr	r2, [pc, #444]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 8007a50:	f043 0301 	orr.w	r3, r3, #1
 8007a54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a58:	f7fc f9d4 	bl	8003e04 <HAL_GetTick>
 8007a5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007a5e:	e008      	b.n	8007a72 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a60:	f7fc f9d0 	bl	8003e04 <HAL_GetTick>
 8007a64:	4602      	mov	r2, r0
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d901      	bls.n	8007a72 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e11c      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007a72:	4b66      	ldr	r3, [pc, #408]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 8007a74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a78:	f003 0302 	and.w	r3, r3, #2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d0ef      	beq.n	8007a60 <HAL_RCC_OscConfig+0x5cc>
 8007a80:	e01b      	b.n	8007aba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007a82:	4b62      	ldr	r3, [pc, #392]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 8007a84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a88:	4a60      	ldr	r2, [pc, #384]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 8007a8a:	f023 0301 	bic.w	r3, r3, #1
 8007a8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a92:	f7fc f9b7 	bl	8003e04 <HAL_GetTick>
 8007a96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007a98:	e008      	b.n	8007aac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a9a:	f7fc f9b3 	bl	8003e04 <HAL_GetTick>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d901      	bls.n	8007aac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e0ff      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007aac:	4b57      	ldr	r3, [pc, #348]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 8007aae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1ef      	bne.n	8007a9a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 80f3 	beq.w	8007caa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	f040 80c9 	bne.w	8007c60 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007ace:	4b4f      	ldr	r3, [pc, #316]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f003 0203 	and.w	r2, r3, #3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d12c      	bne.n	8007b3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aec:	3b01      	subs	r3, #1
 8007aee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d123      	bne.n	8007b3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d11b      	bne.n	8007b3c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d113      	bne.n	8007b3c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1e:	085b      	lsrs	r3, r3, #1
 8007b20:	3b01      	subs	r3, #1
 8007b22:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d109      	bne.n	8007b3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b32:	085b      	lsrs	r3, r3, #1
 8007b34:	3b01      	subs	r3, #1
 8007b36:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d06b      	beq.n	8007c14 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	2b0c      	cmp	r3, #12
 8007b40:	d062      	beq.n	8007c08 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007b42:	4b32      	ldr	r3, [pc, #200]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e0ac      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007b52:	4b2e      	ldr	r3, [pc, #184]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a2d      	ldr	r2, [pc, #180]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 8007b58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b5c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007b5e:	f7fc f951 	bl	8003e04 <HAL_GetTick>
 8007b62:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b64:	e008      	b.n	8007b78 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b66:	f7fc f94d 	bl	8003e04 <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d901      	bls.n	8007b78 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e099      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b78:	4b24      	ldr	r3, [pc, #144]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1f0      	bne.n	8007b66 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b84:	4b21      	ldr	r3, [pc, #132]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 8007b86:	68da      	ldr	r2, [r3, #12]
 8007b88:	4b21      	ldr	r3, [pc, #132]	; (8007c10 <HAL_RCC_OscConfig+0x77c>)
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007b94:	3a01      	subs	r2, #1
 8007b96:	0112      	lsls	r2, r2, #4
 8007b98:	4311      	orrs	r1, r2
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007b9e:	0212      	lsls	r2, r2, #8
 8007ba0:	4311      	orrs	r1, r2
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007ba6:	0852      	lsrs	r2, r2, #1
 8007ba8:	3a01      	subs	r2, #1
 8007baa:	0552      	lsls	r2, r2, #21
 8007bac:	4311      	orrs	r1, r2
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007bb2:	0852      	lsrs	r2, r2, #1
 8007bb4:	3a01      	subs	r2, #1
 8007bb6:	0652      	lsls	r2, r2, #25
 8007bb8:	4311      	orrs	r1, r2
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007bbe:	06d2      	lsls	r2, r2, #27
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	4912      	ldr	r1, [pc, #72]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007bc8:	4b10      	ldr	r3, [pc, #64]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a0f      	ldr	r2, [pc, #60]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 8007bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007bd4:	4b0d      	ldr	r3, [pc, #52]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	4a0c      	ldr	r2, [pc, #48]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 8007bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007be0:	f7fc f910 	bl	8003e04 <HAL_GetTick>
 8007be4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007be6:	e008      	b.n	8007bfa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007be8:	f7fc f90c 	bl	8003e04 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d901      	bls.n	8007bfa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e058      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bfa:	4b04      	ldr	r3, [pc, #16]	; (8007c0c <HAL_RCC_OscConfig+0x778>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d0f0      	beq.n	8007be8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007c06:	e050      	b.n	8007caa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e04f      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
 8007c0c:	40021000 	.word	0x40021000
 8007c10:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c14:	4b27      	ldr	r3, [pc, #156]	; (8007cb4 <HAL_RCC_OscConfig+0x820>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d144      	bne.n	8007caa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007c20:	4b24      	ldr	r3, [pc, #144]	; (8007cb4 <HAL_RCC_OscConfig+0x820>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a23      	ldr	r2, [pc, #140]	; (8007cb4 <HAL_RCC_OscConfig+0x820>)
 8007c26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007c2c:	4b21      	ldr	r3, [pc, #132]	; (8007cb4 <HAL_RCC_OscConfig+0x820>)
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	4a20      	ldr	r2, [pc, #128]	; (8007cb4 <HAL_RCC_OscConfig+0x820>)
 8007c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007c38:	f7fc f8e4 	bl	8003e04 <HAL_GetTick>
 8007c3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c3e:	e008      	b.n	8007c52 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c40:	f7fc f8e0 	bl	8003e04 <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d901      	bls.n	8007c52 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e02c      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c52:	4b18      	ldr	r3, [pc, #96]	; (8007cb4 <HAL_RCC_OscConfig+0x820>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d0f0      	beq.n	8007c40 <HAL_RCC_OscConfig+0x7ac>
 8007c5e:	e024      	b.n	8007caa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	2b0c      	cmp	r3, #12
 8007c64:	d01f      	beq.n	8007ca6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c66:	4b13      	ldr	r3, [pc, #76]	; (8007cb4 <HAL_RCC_OscConfig+0x820>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a12      	ldr	r2, [pc, #72]	; (8007cb4 <HAL_RCC_OscConfig+0x820>)
 8007c6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c72:	f7fc f8c7 	bl	8003e04 <HAL_GetTick>
 8007c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c78:	e008      	b.n	8007c8c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c7a:	f7fc f8c3 	bl	8003e04 <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d901      	bls.n	8007c8c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e00f      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c8c:	4b09      	ldr	r3, [pc, #36]	; (8007cb4 <HAL_RCC_OscConfig+0x820>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1f0      	bne.n	8007c7a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007c98:	4b06      	ldr	r3, [pc, #24]	; (8007cb4 <HAL_RCC_OscConfig+0x820>)
 8007c9a:	68da      	ldr	r2, [r3, #12]
 8007c9c:	4905      	ldr	r1, [pc, #20]	; (8007cb4 <HAL_RCC_OscConfig+0x820>)
 8007c9e:	4b06      	ldr	r3, [pc, #24]	; (8007cb8 <HAL_RCC_OscConfig+0x824>)
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	60cb      	str	r3, [r1, #12]
 8007ca4:	e001      	b.n	8007caa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e000      	b.n	8007cac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3720      	adds	r7, #32
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	40021000 	.word	0x40021000
 8007cb8:	feeefffc 	.word	0xfeeefffc

08007cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d101      	bne.n	8007cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e0e7      	b.n	8007ea0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cd0:	4b75      	ldr	r3, [pc, #468]	; (8007ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0307 	and.w	r3, r3, #7
 8007cd8:	683a      	ldr	r2, [r7, #0]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d910      	bls.n	8007d00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cde:	4b72      	ldr	r3, [pc, #456]	; (8007ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f023 0207 	bic.w	r2, r3, #7
 8007ce6:	4970      	ldr	r1, [pc, #448]	; (8007ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cee:	4b6e      	ldr	r3, [pc, #440]	; (8007ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0307 	and.w	r3, r3, #7
 8007cf6:	683a      	ldr	r2, [r7, #0]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d001      	beq.n	8007d00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e0cf      	b.n	8007ea0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0302 	and.w	r3, r3, #2
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d010      	beq.n	8007d2e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	689a      	ldr	r2, [r3, #8]
 8007d10:	4b66      	ldr	r3, [pc, #408]	; (8007eac <HAL_RCC_ClockConfig+0x1f0>)
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d908      	bls.n	8007d2e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d1c:	4b63      	ldr	r3, [pc, #396]	; (8007eac <HAL_RCC_ClockConfig+0x1f0>)
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	4960      	ldr	r1, [pc, #384]	; (8007eac <HAL_RCC_ClockConfig+0x1f0>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d04c      	beq.n	8007dd4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	2b03      	cmp	r3, #3
 8007d40:	d107      	bne.n	8007d52 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d42:	4b5a      	ldr	r3, [pc, #360]	; (8007eac <HAL_RCC_ClockConfig+0x1f0>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d121      	bne.n	8007d92 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e0a6      	b.n	8007ea0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d107      	bne.n	8007d6a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d5a:	4b54      	ldr	r3, [pc, #336]	; (8007eac <HAL_RCC_ClockConfig+0x1f0>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d115      	bne.n	8007d92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e09a      	b.n	8007ea0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d107      	bne.n	8007d82 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007d72:	4b4e      	ldr	r3, [pc, #312]	; (8007eac <HAL_RCC_ClockConfig+0x1f0>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d109      	bne.n	8007d92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e08e      	b.n	8007ea0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d82:	4b4a      	ldr	r3, [pc, #296]	; (8007eac <HAL_RCC_ClockConfig+0x1f0>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e086      	b.n	8007ea0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007d92:	4b46      	ldr	r3, [pc, #280]	; (8007eac <HAL_RCC_ClockConfig+0x1f0>)
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f023 0203 	bic.w	r2, r3, #3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	4943      	ldr	r1, [pc, #268]	; (8007eac <HAL_RCC_ClockConfig+0x1f0>)
 8007da0:	4313      	orrs	r3, r2
 8007da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007da4:	f7fc f82e 	bl	8003e04 <HAL_GetTick>
 8007da8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007daa:	e00a      	b.n	8007dc2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dac:	f7fc f82a 	bl	8003e04 <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d901      	bls.n	8007dc2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e06e      	b.n	8007ea0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dc2:	4b3a      	ldr	r3, [pc, #232]	; (8007eac <HAL_RCC_ClockConfig+0x1f0>)
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	f003 020c 	and.w	r2, r3, #12
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d1eb      	bne.n	8007dac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0302 	and.w	r3, r3, #2
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d010      	beq.n	8007e02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	4b31      	ldr	r3, [pc, #196]	; (8007eac <HAL_RCC_ClockConfig+0x1f0>)
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d208      	bcs.n	8007e02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007df0:	4b2e      	ldr	r3, [pc, #184]	; (8007eac <HAL_RCC_ClockConfig+0x1f0>)
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	492b      	ldr	r1, [pc, #172]	; (8007eac <HAL_RCC_ClockConfig+0x1f0>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e02:	4b29      	ldr	r3, [pc, #164]	; (8007ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0307 	and.w	r3, r3, #7
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d210      	bcs.n	8007e32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e10:	4b25      	ldr	r3, [pc, #148]	; (8007ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f023 0207 	bic.w	r2, r3, #7
 8007e18:	4923      	ldr	r1, [pc, #140]	; (8007ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e20:	4b21      	ldr	r3, [pc, #132]	; (8007ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0307 	and.w	r3, r3, #7
 8007e28:	683a      	ldr	r2, [r7, #0]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d001      	beq.n	8007e32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e036      	b.n	8007ea0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0304 	and.w	r3, r3, #4
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d008      	beq.n	8007e50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e3e:	4b1b      	ldr	r3, [pc, #108]	; (8007eac <HAL_RCC_ClockConfig+0x1f0>)
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	4918      	ldr	r1, [pc, #96]	; (8007eac <HAL_RCC_ClockConfig+0x1f0>)
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0308 	and.w	r3, r3, #8
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d009      	beq.n	8007e70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e5c:	4b13      	ldr	r3, [pc, #76]	; (8007eac <HAL_RCC_ClockConfig+0x1f0>)
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	00db      	lsls	r3, r3, #3
 8007e6a:	4910      	ldr	r1, [pc, #64]	; (8007eac <HAL_RCC_ClockConfig+0x1f0>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007e70:	f000 f824 	bl	8007ebc <HAL_RCC_GetSysClockFreq>
 8007e74:	4602      	mov	r2, r0
 8007e76:	4b0d      	ldr	r3, [pc, #52]	; (8007eac <HAL_RCC_ClockConfig+0x1f0>)
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	091b      	lsrs	r3, r3, #4
 8007e7c:	f003 030f 	and.w	r3, r3, #15
 8007e80:	490b      	ldr	r1, [pc, #44]	; (8007eb0 <HAL_RCC_ClockConfig+0x1f4>)
 8007e82:	5ccb      	ldrb	r3, [r1, r3]
 8007e84:	f003 031f 	and.w	r3, r3, #31
 8007e88:	fa22 f303 	lsr.w	r3, r2, r3
 8007e8c:	4a09      	ldr	r2, [pc, #36]	; (8007eb4 <HAL_RCC_ClockConfig+0x1f8>)
 8007e8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007e90:	4b09      	ldr	r3, [pc, #36]	; (8007eb8 <HAL_RCC_ClockConfig+0x1fc>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7fb ff65 	bl	8003d64 <HAL_InitTick>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8007e9e:	7afb      	ldrb	r3, [r7, #11]
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	40022000 	.word	0x40022000
 8007eac:	40021000 	.word	0x40021000
 8007eb0:	0800e314 	.word	0x0800e314
 8007eb4:	20000000 	.word	0x20000000
 8007eb8:	20000004 	.word	0x20000004

08007ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b089      	sub	sp, #36	; 0x24
 8007ec0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	61fb      	str	r3, [r7, #28]
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007eca:	4b3e      	ldr	r3, [pc, #248]	; (8007fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f003 030c 	and.w	r3, r3, #12
 8007ed2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ed4:	4b3b      	ldr	r3, [pc, #236]	; (8007fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	f003 0303 	and.w	r3, r3, #3
 8007edc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d005      	beq.n	8007ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	2b0c      	cmp	r3, #12
 8007ee8:	d121      	bne.n	8007f2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d11e      	bne.n	8007f2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007ef0:	4b34      	ldr	r3, [pc, #208]	; (8007fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0308 	and.w	r3, r3, #8
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d107      	bne.n	8007f0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007efc:	4b31      	ldr	r3, [pc, #196]	; (8007fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f02:	0a1b      	lsrs	r3, r3, #8
 8007f04:	f003 030f 	and.w	r3, r3, #15
 8007f08:	61fb      	str	r3, [r7, #28]
 8007f0a:	e005      	b.n	8007f18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007f0c:	4b2d      	ldr	r3, [pc, #180]	; (8007fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	091b      	lsrs	r3, r3, #4
 8007f12:	f003 030f 	and.w	r3, r3, #15
 8007f16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007f18:	4a2b      	ldr	r2, [pc, #172]	; (8007fc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10d      	bne.n	8007f44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007f2c:	e00a      	b.n	8007f44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	2b04      	cmp	r3, #4
 8007f32:	d102      	bne.n	8007f3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007f34:	4b25      	ldr	r3, [pc, #148]	; (8007fcc <HAL_RCC_GetSysClockFreq+0x110>)
 8007f36:	61bb      	str	r3, [r7, #24]
 8007f38:	e004      	b.n	8007f44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	2b08      	cmp	r3, #8
 8007f3e:	d101      	bne.n	8007f44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007f40:	4b23      	ldr	r3, [pc, #140]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8007f42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	2b0c      	cmp	r3, #12
 8007f48:	d134      	bne.n	8007fb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007f4a:	4b1e      	ldr	r3, [pc, #120]	; (8007fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	f003 0303 	and.w	r3, r3, #3
 8007f52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d003      	beq.n	8007f62 <HAL_RCC_GetSysClockFreq+0xa6>
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2b03      	cmp	r3, #3
 8007f5e:	d003      	beq.n	8007f68 <HAL_RCC_GetSysClockFreq+0xac>
 8007f60:	e005      	b.n	8007f6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007f62:	4b1a      	ldr	r3, [pc, #104]	; (8007fcc <HAL_RCC_GetSysClockFreq+0x110>)
 8007f64:	617b      	str	r3, [r7, #20]
      break;
 8007f66:	e005      	b.n	8007f74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007f68:	4b19      	ldr	r3, [pc, #100]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8007f6a:	617b      	str	r3, [r7, #20]
      break;
 8007f6c:	e002      	b.n	8007f74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	617b      	str	r3, [r7, #20]
      break;
 8007f72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f74:	4b13      	ldr	r3, [pc, #76]	; (8007fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	091b      	lsrs	r3, r3, #4
 8007f7a:	f003 0307 	and.w	r3, r3, #7
 8007f7e:	3301      	adds	r3, #1
 8007f80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007f82:	4b10      	ldr	r3, [pc, #64]	; (8007fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	0a1b      	lsrs	r3, r3, #8
 8007f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	fb03 f202 	mul.w	r2, r3, r2
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007f9a:	4b0a      	ldr	r3, [pc, #40]	; (8007fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	0e5b      	lsrs	r3, r3, #25
 8007fa0:	f003 0303 	and.w	r3, r3, #3
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	005b      	lsls	r3, r3, #1
 8007fa8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007faa:	697a      	ldr	r2, [r7, #20]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007fb4:	69bb      	ldr	r3, [r7, #24]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3724      	adds	r7, #36	; 0x24
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	40021000 	.word	0x40021000
 8007fc8:	0800e324 	.word	0x0800e324
 8007fcc:	00f42400 	.word	0x00f42400
 8007fd0:	007a1200 	.word	0x007a1200

08007fd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fd8:	4b03      	ldr	r3, [pc, #12]	; (8007fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007fda:	681b      	ldr	r3, [r3, #0]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	20000000 	.word	0x20000000

08007fec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b086      	sub	sp, #24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007ff8:	4b2a      	ldr	r3, [pc, #168]	; (80080a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d003      	beq.n	800800c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008004:	f7ff f9d2 	bl	80073ac <HAL_PWREx_GetVoltageRange>
 8008008:	6178      	str	r0, [r7, #20]
 800800a:	e014      	b.n	8008036 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800800c:	4b25      	ldr	r3, [pc, #148]	; (80080a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800800e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008010:	4a24      	ldr	r2, [pc, #144]	; (80080a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008016:	6593      	str	r3, [r2, #88]	; 0x58
 8008018:	4b22      	ldr	r3, [pc, #136]	; (80080a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800801a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800801c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008020:	60fb      	str	r3, [r7, #12]
 8008022:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008024:	f7ff f9c2 	bl	80073ac <HAL_PWREx_GetVoltageRange>
 8008028:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800802a:	4b1e      	ldr	r3, [pc, #120]	; (80080a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800802c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800802e:	4a1d      	ldr	r2, [pc, #116]	; (80080a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008034:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800803c:	d10b      	bne.n	8008056 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2b80      	cmp	r3, #128	; 0x80
 8008042:	d919      	bls.n	8008078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2ba0      	cmp	r3, #160	; 0xa0
 8008048:	d902      	bls.n	8008050 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800804a:	2302      	movs	r3, #2
 800804c:	613b      	str	r3, [r7, #16]
 800804e:	e013      	b.n	8008078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008050:	2301      	movs	r3, #1
 8008052:	613b      	str	r3, [r7, #16]
 8008054:	e010      	b.n	8008078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b80      	cmp	r3, #128	; 0x80
 800805a:	d902      	bls.n	8008062 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800805c:	2303      	movs	r3, #3
 800805e:	613b      	str	r3, [r7, #16]
 8008060:	e00a      	b.n	8008078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b80      	cmp	r3, #128	; 0x80
 8008066:	d102      	bne.n	800806e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008068:	2302      	movs	r3, #2
 800806a:	613b      	str	r3, [r7, #16]
 800806c:	e004      	b.n	8008078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b70      	cmp	r3, #112	; 0x70
 8008072:	d101      	bne.n	8008078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008074:	2301      	movs	r3, #1
 8008076:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008078:	4b0b      	ldr	r3, [pc, #44]	; (80080a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f023 0207 	bic.w	r2, r3, #7
 8008080:	4909      	ldr	r1, [pc, #36]	; (80080a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	4313      	orrs	r3, r2
 8008086:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008088:	4b07      	ldr	r3, [pc, #28]	; (80080a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 0307 	and.w	r3, r3, #7
 8008090:	693a      	ldr	r2, [r7, #16]
 8008092:	429a      	cmp	r2, r3
 8008094:	d001      	beq.n	800809a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e000      	b.n	800809c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	40021000 	.word	0x40021000
 80080a8:	40022000 	.word	0x40022000

080080ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b086      	sub	sp, #24
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80080b4:	2300      	movs	r3, #0
 80080b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80080b8:	2300      	movs	r3, #0
 80080ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d031      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80080d0:	d01a      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80080d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80080d6:	d814      	bhi.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d009      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80080dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080e0:	d10f      	bne.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80080e2:	4b5d      	ldr	r3, [pc, #372]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	4a5c      	ldr	r2, [pc, #368]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80080e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080ec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80080ee:	e00c      	b.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3304      	adds	r3, #4
 80080f4:	2100      	movs	r1, #0
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 fa22 	bl	8008540 <RCCEx_PLLSAI1_Config>
 80080fc:	4603      	mov	r3, r0
 80080fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008100:	e003      	b.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	74fb      	strb	r3, [r7, #19]
      break;
 8008106:	e000      	b.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8008108:	bf00      	nop
    }

    if(ret == HAL_OK)
 800810a:	7cfb      	ldrb	r3, [r7, #19]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10b      	bne.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008110:	4b51      	ldr	r3, [pc, #324]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008116:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800811e:	494e      	ldr	r1, [pc, #312]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008120:	4313      	orrs	r3, r2
 8008122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008126:	e001      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008128:	7cfb      	ldrb	r3, [r7, #19]
 800812a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008134:	2b00      	cmp	r3, #0
 8008136:	f000 809e 	beq.w	8008276 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800813a:	2300      	movs	r3, #0
 800813c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800813e:	4b46      	ldr	r3, [pc, #280]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d101      	bne.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800814a:	2301      	movs	r3, #1
 800814c:	e000      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800814e:	2300      	movs	r3, #0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00d      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008154:	4b40      	ldr	r3, [pc, #256]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008158:	4a3f      	ldr	r2, [pc, #252]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800815a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800815e:	6593      	str	r3, [r2, #88]	; 0x58
 8008160:	4b3d      	ldr	r3, [pc, #244]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008168:	60bb      	str	r3, [r7, #8]
 800816a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800816c:	2301      	movs	r3, #1
 800816e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008170:	4b3a      	ldr	r3, [pc, #232]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a39      	ldr	r2, [pc, #228]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800817a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800817c:	f7fb fe42 	bl	8003e04 <HAL_GetTick>
 8008180:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008182:	e009      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008184:	f7fb fe3e 	bl	8003e04 <HAL_GetTick>
 8008188:	4602      	mov	r2, r0
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	2b02      	cmp	r3, #2
 8008190:	d902      	bls.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	74fb      	strb	r3, [r7, #19]
        break;
 8008196:	e005      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008198:	4b30      	ldr	r3, [pc, #192]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d0ef      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80081a4:	7cfb      	ldrb	r3, [r7, #19]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d15a      	bne.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80081aa:	4b2b      	ldr	r3, [pc, #172]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80081ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d01e      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081c0:	697a      	ldr	r2, [r7, #20]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d019      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80081c6:	4b24      	ldr	r3, [pc, #144]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80081c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80081d2:	4b21      	ldr	r3, [pc, #132]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80081d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081d8:	4a1f      	ldr	r2, [pc, #124]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80081da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80081e2:	4b1d      	ldr	r3, [pc, #116]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80081e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081e8:	4a1b      	ldr	r2, [pc, #108]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80081ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80081f2:	4a19      	ldr	r2, [pc, #100]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	f003 0301 	and.w	r3, r3, #1
 8008200:	2b00      	cmp	r3, #0
 8008202:	d016      	beq.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008204:	f7fb fdfe 	bl	8003e04 <HAL_GetTick>
 8008208:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800820a:	e00b      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800820c:	f7fb fdfa 	bl	8003e04 <HAL_GetTick>
 8008210:	4602      	mov	r2, r0
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	f241 3288 	movw	r2, #5000	; 0x1388
 800821a:	4293      	cmp	r3, r2
 800821c:	d902      	bls.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	74fb      	strb	r3, [r7, #19]
            break;
 8008222:	e006      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008224:	4b0c      	ldr	r3, [pc, #48]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800822a:	f003 0302 	and.w	r3, r3, #2
 800822e:	2b00      	cmp	r3, #0
 8008230:	d0ec      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8008232:	7cfb      	ldrb	r3, [r7, #19]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d10b      	bne.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008238:	4b07      	ldr	r3, [pc, #28]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800823a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800823e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008246:	4904      	ldr	r1, [pc, #16]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008248:	4313      	orrs	r3, r2
 800824a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800824e:	e009      	b.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008250:	7cfb      	ldrb	r3, [r7, #19]
 8008252:	74bb      	strb	r3, [r7, #18]
 8008254:	e006      	b.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008256:	bf00      	nop
 8008258:	40021000 	.word	0x40021000
 800825c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008260:	7cfb      	ldrb	r3, [r7, #19]
 8008262:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008264:	7c7b      	ldrb	r3, [r7, #17]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d105      	bne.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800826a:	4b8d      	ldr	r3, [pc, #564]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800826c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800826e:	4a8c      	ldr	r2, [pc, #560]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008274:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 0301 	and.w	r3, r3, #1
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00a      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008282:	4b87      	ldr	r3, [pc, #540]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008288:	f023 0203 	bic.w	r2, r3, #3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a1b      	ldr	r3, [r3, #32]
 8008290:	4983      	ldr	r1, [pc, #524]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008292:	4313      	orrs	r3, r2
 8008294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0302 	and.w	r3, r3, #2
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00a      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80082a4:	4b7e      	ldr	r3, [pc, #504]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80082a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082aa:	f023 020c 	bic.w	r2, r3, #12
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b2:	497b      	ldr	r1, [pc, #492]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80082b4:	4313      	orrs	r3, r2
 80082b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 0304 	and.w	r3, r3, #4
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00a      	beq.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80082c6:	4b76      	ldr	r3, [pc, #472]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80082c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d4:	4972      	ldr	r1, [pc, #456]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80082d6:	4313      	orrs	r3, r2
 80082d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0320 	and.w	r3, r3, #32
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00a      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80082e8:	4b6d      	ldr	r3, [pc, #436]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80082ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f6:	496a      	ldr	r1, [pc, #424]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80082f8:	4313      	orrs	r3, r2
 80082fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00a      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800830a:	4b65      	ldr	r3, [pc, #404]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800830c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008310:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008318:	4961      	ldr	r1, [pc, #388]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800831a:	4313      	orrs	r3, r2
 800831c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00a      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800832c:	4b5c      	ldr	r3, [pc, #368]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800832e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008332:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833a:	4959      	ldr	r1, [pc, #356]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800833c:	4313      	orrs	r3, r2
 800833e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00a      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800834e:	4b54      	ldr	r3, [pc, #336]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008354:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835c:	4950      	ldr	r1, [pc, #320]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800835e:	4313      	orrs	r3, r2
 8008360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00a      	beq.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008370:	4b4b      	ldr	r3, [pc, #300]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008376:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800837e:	4948      	ldr	r1, [pc, #288]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008380:	4313      	orrs	r3, r2
 8008382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00a      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008392:	4b43      	ldr	r3, [pc, #268]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008398:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a0:	493f      	ldr	r1, [pc, #252]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d028      	beq.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80083b4:	4b3a      	ldr	r3, [pc, #232]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80083b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083c2:	4937      	ldr	r1, [pc, #220]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80083c4:	4313      	orrs	r3, r2
 80083c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083d2:	d106      	bne.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083d4:	4b32      	ldr	r3, [pc, #200]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	4a31      	ldr	r2, [pc, #196]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80083da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083de:	60d3      	str	r3, [r2, #12]
 80083e0:	e011      	b.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083ea:	d10c      	bne.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	3304      	adds	r3, #4
 80083f0:	2101      	movs	r1, #1
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 f8a4 	bl	8008540 <RCCEx_PLLSAI1_Config>
 80083f8:	4603      	mov	r3, r0
 80083fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80083fc:	7cfb      	ldrb	r3, [r7, #19]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d001      	beq.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8008402:	7cfb      	ldrb	r3, [r7, #19]
 8008404:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d028      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008412:	4b23      	ldr	r3, [pc, #140]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008418:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008420:	491f      	ldr	r1, [pc, #124]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008422:	4313      	orrs	r3, r2
 8008424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800842c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008430:	d106      	bne.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008432:	4b1b      	ldr	r3, [pc, #108]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	4a1a      	ldr	r2, [pc, #104]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008438:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800843c:	60d3      	str	r3, [r2, #12]
 800843e:	e011      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008444:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008448:	d10c      	bne.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	3304      	adds	r3, #4
 800844e:	2101      	movs	r1, #1
 8008450:	4618      	mov	r0, r3
 8008452:	f000 f875 	bl	8008540 <RCCEx_PLLSAI1_Config>
 8008456:	4603      	mov	r3, r0
 8008458:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800845a:	7cfb      	ldrb	r3, [r7, #19]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8008460:	7cfb      	ldrb	r3, [r7, #19]
 8008462:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800846c:	2b00      	cmp	r3, #0
 800846e:	d02b      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008470:	4b0b      	ldr	r3, [pc, #44]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008476:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800847e:	4908      	ldr	r1, [pc, #32]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008480:	4313      	orrs	r3, r2
 8008482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800848a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800848e:	d109      	bne.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008490:	4b03      	ldr	r3, [pc, #12]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	4a02      	ldr	r2, [pc, #8]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800849a:	60d3      	str	r3, [r2, #12]
 800849c:	e014      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800849e:	bf00      	nop
 80084a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80084ac:	d10c      	bne.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	3304      	adds	r3, #4
 80084b2:	2101      	movs	r1, #1
 80084b4:	4618      	mov	r0, r3
 80084b6:	f000 f843 	bl	8008540 <RCCEx_PLLSAI1_Config>
 80084ba:	4603      	mov	r3, r0
 80084bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80084be:	7cfb      	ldrb	r3, [r7, #19]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d001      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80084c4:	7cfb      	ldrb	r3, [r7, #19]
 80084c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d01c      	beq.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80084d4:	4b19      	ldr	r3, [pc, #100]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80084d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e2:	4916      	ldr	r1, [pc, #88]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80084e4:	4313      	orrs	r3, r2
 80084e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084f2:	d10c      	bne.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	3304      	adds	r3, #4
 80084f8:	2102      	movs	r1, #2
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 f820 	bl	8008540 <RCCEx_PLLSAI1_Config>
 8008500:	4603      	mov	r3, r0
 8008502:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008504:	7cfb      	ldrb	r3, [r7, #19]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800850a:	7cfb      	ldrb	r3, [r7, #19]
 800850c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800851a:	4b08      	ldr	r3, [pc, #32]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800851c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008520:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008528:	4904      	ldr	r1, [pc, #16]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800852a:	4313      	orrs	r3, r2
 800852c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008530:	7cbb      	ldrb	r3, [r7, #18]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3718      	adds	r7, #24
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	40021000 	.word	0x40021000

08008540 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800854e:	4b74      	ldr	r3, [pc, #464]	; (8008720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	f003 0303 	and.w	r3, r3, #3
 8008556:	2b00      	cmp	r3, #0
 8008558:	d018      	beq.n	800858c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800855a:	4b71      	ldr	r3, [pc, #452]	; (8008720 <RCCEx_PLLSAI1_Config+0x1e0>)
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	f003 0203 	and.w	r2, r3, #3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	429a      	cmp	r2, r3
 8008568:	d10d      	bne.n	8008586 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
       ||
 800856e:	2b00      	cmp	r3, #0
 8008570:	d009      	beq.n	8008586 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008572:	4b6b      	ldr	r3, [pc, #428]	; (8008720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	091b      	lsrs	r3, r3, #4
 8008578:	f003 0307 	and.w	r3, r3, #7
 800857c:	1c5a      	adds	r2, r3, #1
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	685b      	ldr	r3, [r3, #4]
       ||
 8008582:	429a      	cmp	r2, r3
 8008584:	d047      	beq.n	8008616 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	73fb      	strb	r3, [r7, #15]
 800858a:	e044      	b.n	8008616 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2b03      	cmp	r3, #3
 8008592:	d018      	beq.n	80085c6 <RCCEx_PLLSAI1_Config+0x86>
 8008594:	2b03      	cmp	r3, #3
 8008596:	d825      	bhi.n	80085e4 <RCCEx_PLLSAI1_Config+0xa4>
 8008598:	2b01      	cmp	r3, #1
 800859a:	d002      	beq.n	80085a2 <RCCEx_PLLSAI1_Config+0x62>
 800859c:	2b02      	cmp	r3, #2
 800859e:	d009      	beq.n	80085b4 <RCCEx_PLLSAI1_Config+0x74>
 80085a0:	e020      	b.n	80085e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80085a2:	4b5f      	ldr	r3, [pc, #380]	; (8008720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0302 	and.w	r3, r3, #2
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d11d      	bne.n	80085ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085b2:	e01a      	b.n	80085ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80085b4:	4b5a      	ldr	r3, [pc, #360]	; (8008720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d116      	bne.n	80085ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085c4:	e013      	b.n	80085ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80085c6:	4b56      	ldr	r3, [pc, #344]	; (8008720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10f      	bne.n	80085f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80085d2:	4b53      	ldr	r3, [pc, #332]	; (8008720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d109      	bne.n	80085f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80085e2:	e006      	b.n	80085f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	73fb      	strb	r3, [r7, #15]
      break;
 80085e8:	e004      	b.n	80085f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80085ea:	bf00      	nop
 80085ec:	e002      	b.n	80085f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80085ee:	bf00      	nop
 80085f0:	e000      	b.n	80085f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80085f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d10d      	bne.n	8008616 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80085fa:	4b49      	ldr	r3, [pc, #292]	; (8008720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6819      	ldr	r1, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	3b01      	subs	r3, #1
 800860c:	011b      	lsls	r3, r3, #4
 800860e:	430b      	orrs	r3, r1
 8008610:	4943      	ldr	r1, [pc, #268]	; (8008720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008612:	4313      	orrs	r3, r2
 8008614:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008616:	7bfb      	ldrb	r3, [r7, #15]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d17c      	bne.n	8008716 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800861c:	4b40      	ldr	r3, [pc, #256]	; (8008720 <RCCEx_PLLSAI1_Config+0x1e0>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a3f      	ldr	r2, [pc, #252]	; (8008720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008622:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008626:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008628:	f7fb fbec 	bl	8003e04 <HAL_GetTick>
 800862c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800862e:	e009      	b.n	8008644 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008630:	f7fb fbe8 	bl	8003e04 <HAL_GetTick>
 8008634:	4602      	mov	r2, r0
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	2b02      	cmp	r3, #2
 800863c:	d902      	bls.n	8008644 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	73fb      	strb	r3, [r7, #15]
        break;
 8008642:	e005      	b.n	8008650 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008644:	4b36      	ldr	r3, [pc, #216]	; (8008720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1ef      	bne.n	8008630 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008650:	7bfb      	ldrb	r3, [r7, #15]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d15f      	bne.n	8008716 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d110      	bne.n	800867e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800865c:	4b30      	ldr	r3, [pc, #192]	; (8008720 <RCCEx_PLLSAI1_Config+0x1e0>)
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008664:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	6892      	ldr	r2, [r2, #8]
 800866c:	0211      	lsls	r1, r2, #8
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	68d2      	ldr	r2, [r2, #12]
 8008672:	06d2      	lsls	r2, r2, #27
 8008674:	430a      	orrs	r2, r1
 8008676:	492a      	ldr	r1, [pc, #168]	; (8008720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008678:	4313      	orrs	r3, r2
 800867a:	610b      	str	r3, [r1, #16]
 800867c:	e027      	b.n	80086ce <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d112      	bne.n	80086aa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008684:	4b26      	ldr	r3, [pc, #152]	; (8008720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800868c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	6892      	ldr	r2, [r2, #8]
 8008694:	0211      	lsls	r1, r2, #8
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	6912      	ldr	r2, [r2, #16]
 800869a:	0852      	lsrs	r2, r2, #1
 800869c:	3a01      	subs	r2, #1
 800869e:	0552      	lsls	r2, r2, #21
 80086a0:	430a      	orrs	r2, r1
 80086a2:	491f      	ldr	r1, [pc, #124]	; (8008720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80086a4:	4313      	orrs	r3, r2
 80086a6:	610b      	str	r3, [r1, #16]
 80086a8:	e011      	b.n	80086ce <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80086aa:	4b1d      	ldr	r3, [pc, #116]	; (8008720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80086b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	6892      	ldr	r2, [r2, #8]
 80086ba:	0211      	lsls	r1, r2, #8
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	6952      	ldr	r2, [r2, #20]
 80086c0:	0852      	lsrs	r2, r2, #1
 80086c2:	3a01      	subs	r2, #1
 80086c4:	0652      	lsls	r2, r2, #25
 80086c6:	430a      	orrs	r2, r1
 80086c8:	4915      	ldr	r1, [pc, #84]	; (8008720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80086ce:	4b14      	ldr	r3, [pc, #80]	; (8008720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a13      	ldr	r2, [pc, #76]	; (8008720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80086d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80086d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086da:	f7fb fb93 	bl	8003e04 <HAL_GetTick>
 80086de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80086e0:	e009      	b.n	80086f6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80086e2:	f7fb fb8f 	bl	8003e04 <HAL_GetTick>
 80086e6:	4602      	mov	r2, r0
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d902      	bls.n	80086f6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80086f0:	2303      	movs	r3, #3
 80086f2:	73fb      	strb	r3, [r7, #15]
          break;
 80086f4:	e005      	b.n	8008702 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80086f6:	4b0a      	ldr	r3, [pc, #40]	; (8008720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d0ef      	beq.n	80086e2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008702:	7bfb      	ldrb	r3, [r7, #15]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d106      	bne.n	8008716 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008708:	4b05      	ldr	r3, [pc, #20]	; (8008720 <RCCEx_PLLSAI1_Config+0x1e0>)
 800870a:	691a      	ldr	r2, [r3, #16]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	4903      	ldr	r1, [pc, #12]	; (8008720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008712:	4313      	orrs	r3, r2
 8008714:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008716:	7bfb      	ldrb	r3, [r7, #15]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	40021000 	.word	0x40021000

08008724 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e095      	b.n	8008862 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873a:	2b00      	cmp	r3, #0
 800873c:	d108      	bne.n	8008750 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008746:	d009      	beq.n	800875c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	61da      	str	r2, [r3, #28]
 800874e:	e005      	b.n	800875c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008768:	b2db      	uxtb	r3, r3
 800876a:	2b00      	cmp	r3, #0
 800876c:	d106      	bne.n	800877c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f7fb f936 	bl	80039e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2202      	movs	r2, #2
 8008780:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008792:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800879c:	d902      	bls.n	80087a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800879e:	2300      	movs	r3, #0
 80087a0:	60fb      	str	r3, [r7, #12]
 80087a2:	e002      	b.n	80087aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80087a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80087b2:	d007      	beq.n	80087c4 <HAL_SPI_Init+0xa0>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80087bc:	d002      	beq.n	80087c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80087d4:	431a      	orrs	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	f003 0302 	and.w	r3, r3, #2
 80087de:	431a      	orrs	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	695b      	ldr	r3, [r3, #20]
 80087e4:	f003 0301 	and.w	r3, r3, #1
 80087e8:	431a      	orrs	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087f2:	431a      	orrs	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	69db      	ldr	r3, [r3, #28]
 80087f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087fc:	431a      	orrs	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008806:	ea42 0103 	orr.w	r1, r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	430a      	orrs	r2, r1
 8008818:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	0c1b      	lsrs	r3, r3, #16
 8008820:	f003 0204 	and.w	r2, r3, #4
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008828:	f003 0310 	and.w	r3, r3, #16
 800882c:	431a      	orrs	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008832:	f003 0308 	and.w	r3, r3, #8
 8008836:	431a      	orrs	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008840:	ea42 0103 	orr.w	r1, r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	430a      	orrs	r2, r1
 8008850:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b088      	sub	sp, #32
 800886e:	af00      	add	r7, sp, #0
 8008870:	60f8      	str	r0, [r7, #12]
 8008872:	60b9      	str	r1, [r7, #8]
 8008874:	603b      	str	r3, [r7, #0]
 8008876:	4613      	mov	r3, r2
 8008878:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008884:	2b01      	cmp	r3, #1
 8008886:	d101      	bne.n	800888c <HAL_SPI_Transmit+0x22>
 8008888:	2302      	movs	r3, #2
 800888a:	e158      	b.n	8008b3e <HAL_SPI_Transmit+0x2d4>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008894:	f7fb fab6 	bl	8003e04 <HAL_GetTick>
 8008898:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800889a:	88fb      	ldrh	r3, [r7, #6]
 800889c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d002      	beq.n	80088b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80088aa:	2302      	movs	r3, #2
 80088ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80088ae:	e13d      	b.n	8008b2c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d002      	beq.n	80088bc <HAL_SPI_Transmit+0x52>
 80088b6:	88fb      	ldrh	r3, [r7, #6]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d102      	bne.n	80088c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80088c0:	e134      	b.n	8008b2c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2203      	movs	r2, #3
 80088c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	88fa      	ldrh	r2, [r7, #6]
 80088da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	88fa      	ldrh	r2, [r7, #6]
 80088e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800890c:	d10f      	bne.n	800892e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800891c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800892c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008938:	2b40      	cmp	r3, #64	; 0x40
 800893a:	d007      	beq.n	800894c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800894a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008954:	d94b      	bls.n	80089ee <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d002      	beq.n	8008964 <HAL_SPI_Transmit+0xfa>
 800895e:	8afb      	ldrh	r3, [r7, #22]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d13e      	bne.n	80089e2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008968:	881a      	ldrh	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008974:	1c9a      	adds	r2, r3, #2
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800897e:	b29b      	uxth	r3, r3
 8008980:	3b01      	subs	r3, #1
 8008982:	b29a      	uxth	r2, r3
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008988:	e02b      	b.n	80089e2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	f003 0302 	and.w	r3, r3, #2
 8008994:	2b02      	cmp	r3, #2
 8008996:	d112      	bne.n	80089be <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899c:	881a      	ldrh	r2, [r3, #0]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a8:	1c9a      	adds	r2, r3, #2
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	3b01      	subs	r3, #1
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80089bc:	e011      	b.n	80089e2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089be:	f7fb fa21 	bl	8003e04 <HAL_GetTick>
 80089c2:	4602      	mov	r2, r0
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d803      	bhi.n	80089d6 <HAL_SPI_Transmit+0x16c>
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d4:	d102      	bne.n	80089dc <HAL_SPI_Transmit+0x172>
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d102      	bne.n	80089e2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80089dc:	2303      	movs	r3, #3
 80089de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80089e0:	e0a4      	b.n	8008b2c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1ce      	bne.n	800898a <HAL_SPI_Transmit+0x120>
 80089ec:	e07c      	b.n	8008ae8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d002      	beq.n	80089fc <HAL_SPI_Transmit+0x192>
 80089f6:	8afb      	ldrh	r3, [r7, #22]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d170      	bne.n	8008ade <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d912      	bls.n	8008a2c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0a:	881a      	ldrh	r2, [r3, #0]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a16:	1c9a      	adds	r2, r3, #2
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	3b02      	subs	r3, #2
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a2a:	e058      	b.n	8008ade <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	330c      	adds	r3, #12
 8008a36:	7812      	ldrb	r2, [r2, #0]
 8008a38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3e:	1c5a      	adds	r2, r3, #1
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008a52:	e044      	b.n	8008ade <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f003 0302 	and.w	r3, r3, #2
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d12b      	bne.n	8008aba <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d912      	bls.n	8008a92 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a70:	881a      	ldrh	r2, [r3, #0]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a7c:	1c9a      	adds	r2, r3, #2
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	3b02      	subs	r3, #2
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a90:	e025      	b.n	8008ade <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	330c      	adds	r3, #12
 8008a9c:	7812      	ldrb	r2, [r2, #0]
 8008a9e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa4:	1c5a      	adds	r2, r3, #1
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	3b01      	subs	r3, #1
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ab8:	e011      	b.n	8008ade <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008aba:	f7fb f9a3 	bl	8003e04 <HAL_GetTick>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d803      	bhi.n	8008ad2 <HAL_SPI_Transmit+0x268>
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad0:	d102      	bne.n	8008ad8 <HAL_SPI_Transmit+0x26e>
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d102      	bne.n	8008ade <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008adc:	e026      	b.n	8008b2c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1b5      	bne.n	8008a54 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ae8:	69ba      	ldr	r2, [r7, #24]
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f000 fb5b 	bl	80091a8 <SPI_EndRxTxTransaction>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d002      	beq.n	8008afe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2220      	movs	r2, #32
 8008afc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10a      	bne.n	8008b1c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b06:	2300      	movs	r3, #0
 8008b08:	613b      	str	r3, [r7, #16]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	613b      	str	r3, [r7, #16]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	613b      	str	r3, [r7, #16]
 8008b1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d002      	beq.n	8008b2a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	77fb      	strb	r3, [r7, #31]
 8008b28:	e000      	b.n	8008b2c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008b2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008b3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3720      	adds	r7, #32
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b08a      	sub	sp, #40	; 0x28
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	60f8      	str	r0, [r7, #12]
 8008b4e:	60b9      	str	r1, [r7, #8]
 8008b50:	607a      	str	r2, [r7, #4]
 8008b52:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008b54:	2301      	movs	r3, #1
 8008b56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d101      	bne.n	8008b6c <HAL_SPI_TransmitReceive+0x26>
 8008b68:	2302      	movs	r3, #2
 8008b6a:	e1fb      	b.n	8008f64 <HAL_SPI_TransmitReceive+0x41e>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b74:	f7fb f946 	bl	8003e04 <HAL_GetTick>
 8008b78:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008b80:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008b88:	887b      	ldrh	r3, [r7, #2]
 8008b8a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008b8c:	887b      	ldrh	r3, [r7, #2]
 8008b8e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008b90:	7efb      	ldrb	r3, [r7, #27]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d00e      	beq.n	8008bb4 <HAL_SPI_TransmitReceive+0x6e>
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b9c:	d106      	bne.n	8008bac <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d102      	bne.n	8008bac <HAL_SPI_TransmitReceive+0x66>
 8008ba6:	7efb      	ldrb	r3, [r7, #27]
 8008ba8:	2b04      	cmp	r3, #4
 8008baa:	d003      	beq.n	8008bb4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008bac:	2302      	movs	r3, #2
 8008bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008bb2:	e1cd      	b.n	8008f50 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d005      	beq.n	8008bc6 <HAL_SPI_TransmitReceive+0x80>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d002      	beq.n	8008bc6 <HAL_SPI_TransmitReceive+0x80>
 8008bc0:	887b      	ldrh	r3, [r7, #2]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d103      	bne.n	8008bce <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008bcc:	e1c0      	b.n	8008f50 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b04      	cmp	r3, #4
 8008bd8:	d003      	beq.n	8008be2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2205      	movs	r2, #5
 8008bde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	887a      	ldrh	r2, [r7, #2]
 8008bf2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	887a      	ldrh	r2, [r7, #2]
 8008bfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	887a      	ldrh	r2, [r7, #2]
 8008c08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	887a      	ldrh	r2, [r7, #2]
 8008c0e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2200      	movs	r2, #0
 8008c14:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c24:	d802      	bhi.n	8008c2c <HAL_SPI_TransmitReceive+0xe6>
 8008c26:	8a3b      	ldrh	r3, [r7, #16]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d908      	bls.n	8008c3e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	685a      	ldr	r2, [r3, #4]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c3a:	605a      	str	r2, [r3, #4]
 8008c3c:	e007      	b.n	8008c4e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	685a      	ldr	r2, [r3, #4]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c4c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c58:	2b40      	cmp	r3, #64	; 0x40
 8008c5a:	d007      	beq.n	8008c6c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c74:	d97c      	bls.n	8008d70 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d002      	beq.n	8008c84 <HAL_SPI_TransmitReceive+0x13e>
 8008c7e:	8a7b      	ldrh	r3, [r7, #18]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d169      	bne.n	8008d58 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c88:	881a      	ldrh	r2, [r3, #0]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c94:	1c9a      	adds	r2, r3, #2
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ca8:	e056      	b.n	8008d58 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	f003 0302 	and.w	r3, r3, #2
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d11b      	bne.n	8008cf0 <HAL_SPI_TransmitReceive+0x1aa>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d016      	beq.n	8008cf0 <HAL_SPI_TransmitReceive+0x1aa>
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d113      	bne.n	8008cf0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ccc:	881a      	ldrh	r2, [r3, #0]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd8:	1c9a      	adds	r2, r3, #2
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008cec:	2300      	movs	r3, #0
 8008cee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	f003 0301 	and.w	r3, r3, #1
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d11c      	bne.n	8008d38 <HAL_SPI_TransmitReceive+0x1f2>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d016      	beq.n	8008d38 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68da      	ldr	r2, [r3, #12]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d14:	b292      	uxth	r2, r2
 8008d16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1c:	1c9a      	adds	r2, r3, #2
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d34:	2301      	movs	r3, #1
 8008d36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008d38:	f7fb f864 	bl	8003e04 <HAL_GetTick>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d807      	bhi.n	8008d58 <HAL_SPI_TransmitReceive+0x212>
 8008d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d4e:	d003      	beq.n	8008d58 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008d56:	e0fb      	b.n	8008f50 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1a3      	bne.n	8008caa <HAL_SPI_TransmitReceive+0x164>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d19d      	bne.n	8008caa <HAL_SPI_TransmitReceive+0x164>
 8008d6e:	e0df      	b.n	8008f30 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d003      	beq.n	8008d80 <HAL_SPI_TransmitReceive+0x23a>
 8008d78:	8a7b      	ldrh	r3, [r7, #18]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	f040 80cb 	bne.w	8008f16 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d912      	bls.n	8008db0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8e:	881a      	ldrh	r2, [r3, #0]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9a:	1c9a      	adds	r2, r3, #2
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	3b02      	subs	r3, #2
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008dae:	e0b2      	b.n	8008f16 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	330c      	adds	r3, #12
 8008dba:	7812      	ldrb	r2, [r2, #0]
 8008dbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008dd6:	e09e      	b.n	8008f16 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	f003 0302 	and.w	r3, r3, #2
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d134      	bne.n	8008e50 <HAL_SPI_TransmitReceive+0x30a>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d02f      	beq.n	8008e50 <HAL_SPI_TransmitReceive+0x30a>
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d12c      	bne.n	8008e50 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d912      	bls.n	8008e26 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e04:	881a      	ldrh	r2, [r3, #0]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e10:	1c9a      	adds	r2, r3, #2
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	3b02      	subs	r3, #2
 8008e1e:	b29a      	uxth	r2, r3
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e24:	e012      	b.n	8008e4c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	330c      	adds	r3, #12
 8008e30:	7812      	ldrb	r2, [r2, #0]
 8008e32:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e38:	1c5a      	adds	r2, r3, #1
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	3b01      	subs	r3, #1
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d148      	bne.n	8008ef0 <HAL_SPI_TransmitReceive+0x3aa>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d042      	beq.n	8008ef0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d923      	bls.n	8008ebe <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68da      	ldr	r2, [r3, #12]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e80:	b292      	uxth	r2, r2
 8008e82:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e88:	1c9a      	adds	r2, r3, #2
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	3b02      	subs	r3, #2
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d81f      	bhi.n	8008eec <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	685a      	ldr	r2, [r3, #4]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008eba:	605a      	str	r2, [r3, #4]
 8008ebc:	e016      	b.n	8008eec <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f103 020c 	add.w	r2, r3, #12
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eca:	7812      	ldrb	r2, [r2, #0]
 8008ecc:	b2d2      	uxtb	r2, r2
 8008ece:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed4:	1c5a      	adds	r2, r3, #1
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	b29a      	uxth	r2, r3
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008eec:	2301      	movs	r3, #1
 8008eee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ef0:	f7fa ff88 	bl	8003e04 <HAL_GetTick>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d803      	bhi.n	8008f08 <HAL_SPI_TransmitReceive+0x3c2>
 8008f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f06:	d102      	bne.n	8008f0e <HAL_SPI_TransmitReceive+0x3c8>
 8008f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d103      	bne.n	8008f16 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008f14:	e01c      	b.n	8008f50 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f47f af5b 	bne.w	8008dd8 <HAL_SPI_TransmitReceive+0x292>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f47f af54 	bne.w	8008dd8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f30:	69fa      	ldr	r2, [r7, #28]
 8008f32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f000 f937 	bl	80091a8 <SPI_EndRxTxTransaction>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d006      	beq.n	8008f4e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2220      	movs	r2, #32
 8008f4a:	661a      	str	r2, [r3, #96]	; 0x60
 8008f4c:	e000      	b.n	8008f50 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008f4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008f60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3728      	adds	r7, #40	; 0x28
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	603b      	str	r3, [r7, #0]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008f7c:	f7fa ff42 	bl	8003e04 <HAL_GetTick>
 8008f80:	4602      	mov	r2, r0
 8008f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f84:	1a9b      	subs	r3, r3, r2
 8008f86:	683a      	ldr	r2, [r7, #0]
 8008f88:	4413      	add	r3, r2
 8008f8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008f8c:	f7fa ff3a 	bl	8003e04 <HAL_GetTick>
 8008f90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008f92:	4b39      	ldr	r3, [pc, #228]	; (8009078 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	015b      	lsls	r3, r3, #5
 8008f98:	0d1b      	lsrs	r3, r3, #20
 8008f9a:	69fa      	ldr	r2, [r7, #28]
 8008f9c:	fb02 f303 	mul.w	r3, r2, r3
 8008fa0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008fa2:	e054      	b.n	800904e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008faa:	d050      	beq.n	800904e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008fac:	f7fa ff2a 	bl	8003e04 <HAL_GetTick>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	69fa      	ldr	r2, [r7, #28]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d902      	bls.n	8008fc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d13d      	bne.n	800903e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	685a      	ldr	r2, [r3, #4]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008fd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fda:	d111      	bne.n	8009000 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fe4:	d004      	beq.n	8008ff0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fee:	d107      	bne.n	8009000 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ffe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009008:	d10f      	bne.n	800902a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009018:	601a      	str	r2, [r3, #0]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009028:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e017      	b.n	800906e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009044:	2300      	movs	r3, #0
 8009046:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	3b01      	subs	r3, #1
 800904c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	689a      	ldr	r2, [r3, #8]
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	4013      	ands	r3, r2
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	429a      	cmp	r2, r3
 800905c:	bf0c      	ite	eq
 800905e:	2301      	moveq	r3, #1
 8009060:	2300      	movne	r3, #0
 8009062:	b2db      	uxtb	r3, r3
 8009064:	461a      	mov	r2, r3
 8009066:	79fb      	ldrb	r3, [r7, #7]
 8009068:	429a      	cmp	r2, r3
 800906a:	d19b      	bne.n	8008fa4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3720      	adds	r7, #32
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	20000000 	.word	0x20000000

0800907c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b08a      	sub	sp, #40	; 0x28
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
 8009088:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800908a:	2300      	movs	r3, #0
 800908c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800908e:	f7fa feb9 	bl	8003e04 <HAL_GetTick>
 8009092:	4602      	mov	r2, r0
 8009094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009096:	1a9b      	subs	r3, r3, r2
 8009098:	683a      	ldr	r2, [r7, #0]
 800909a:	4413      	add	r3, r2
 800909c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800909e:	f7fa feb1 	bl	8003e04 <HAL_GetTick>
 80090a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	330c      	adds	r3, #12
 80090aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80090ac:	4b3d      	ldr	r3, [pc, #244]	; (80091a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	4613      	mov	r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4413      	add	r3, r2
 80090b6:	00da      	lsls	r2, r3, #3
 80090b8:	1ad3      	subs	r3, r2, r3
 80090ba:	0d1b      	lsrs	r3, r3, #20
 80090bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090be:	fb02 f303 	mul.w	r3, r2, r3
 80090c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80090c4:	e060      	b.n	8009188 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80090cc:	d107      	bne.n	80090de <SPI_WaitFifoStateUntilTimeout+0x62>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d104      	bne.n	80090de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80090dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e4:	d050      	beq.n	8009188 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80090e6:	f7fa fe8d 	bl	8003e04 <HAL_GetTick>
 80090ea:	4602      	mov	r2, r0
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d902      	bls.n	80090fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80090f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d13d      	bne.n	8009178 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	685a      	ldr	r2, [r3, #4]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800910a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009114:	d111      	bne.n	800913a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800911e:	d004      	beq.n	800912a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009128:	d107      	bne.n	800913a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009138:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800913e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009142:	d10f      	bne.n	8009164 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009152:	601a      	str	r2, [r3, #0]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009162:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	e010      	b.n	800919a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d101      	bne.n	8009182 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800917e:	2300      	movs	r3, #0
 8009180:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	3b01      	subs	r3, #1
 8009186:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	689a      	ldr	r2, [r3, #8]
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	4013      	ands	r3, r2
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	429a      	cmp	r2, r3
 8009196:	d196      	bne.n	80090c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3728      	adds	r7, #40	; 0x28
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	20000000 	.word	0x20000000

080091a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b086      	sub	sp, #24
 80091ac:	af02      	add	r7, sp, #8
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	9300      	str	r3, [sp, #0]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f7ff ff5b 	bl	800907c <SPI_WaitFifoStateUntilTimeout>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d007      	beq.n	80091dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091d0:	f043 0220 	orr.w	r2, r3, #32
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80091d8:	2303      	movs	r3, #3
 80091da:	e027      	b.n	800922c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2200      	movs	r2, #0
 80091e4:	2180      	movs	r1, #128	; 0x80
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f7ff fec0 	bl	8008f6c <SPI_WaitFlagStateUntilTimeout>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d007      	beq.n	8009202 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091f6:	f043 0220 	orr.w	r2, r3, #32
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80091fe:	2303      	movs	r3, #3
 8009200:	e014      	b.n	800922c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	2200      	movs	r2, #0
 800920a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	f7ff ff34 	bl	800907c <SPI_WaitFifoStateUntilTimeout>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d007      	beq.n	800922a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800921e:	f043 0220 	orr.w	r2, r3, #32
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009226:	2303      	movs	r3, #3
 8009228:	e000      	b.n	800922c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d101      	bne.n	8009246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e049      	b.n	80092da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b00      	cmp	r3, #0
 8009250:	d106      	bne.n	8009260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7fa fd06 	bl	8003c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2202      	movs	r2, #2
 8009264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	3304      	adds	r3, #4
 8009270:	4619      	mov	r1, r3
 8009272:	4610      	mov	r0, r2
 8009274:	f000 f9c8 	bl	8009608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
	...

080092e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b085      	sub	sp, #20
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d001      	beq.n	80092fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e03b      	b.n	8009374 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2202      	movs	r2, #2
 8009300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68da      	ldr	r2, [r3, #12]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f042 0201 	orr.w	r2, r2, #1
 8009312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a19      	ldr	r2, [pc, #100]	; (8009380 <HAL_TIM_Base_Start_IT+0x9c>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d009      	beq.n	8009332 <HAL_TIM_Base_Start_IT+0x4e>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009326:	d004      	beq.n	8009332 <HAL_TIM_Base_Start_IT+0x4e>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a15      	ldr	r2, [pc, #84]	; (8009384 <HAL_TIM_Base_Start_IT+0xa0>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d115      	bne.n	800935e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	689a      	ldr	r2, [r3, #8]
 8009338:	4b13      	ldr	r3, [pc, #76]	; (8009388 <HAL_TIM_Base_Start_IT+0xa4>)
 800933a:	4013      	ands	r3, r2
 800933c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2b06      	cmp	r3, #6
 8009342:	d015      	beq.n	8009370 <HAL_TIM_Base_Start_IT+0x8c>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800934a:	d011      	beq.n	8009370 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f042 0201 	orr.w	r2, r2, #1
 800935a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800935c:	e008      	b.n	8009370 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f042 0201 	orr.w	r2, r2, #1
 800936c:	601a      	str	r2, [r3, #0]
 800936e:	e000      	b.n	8009372 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009370:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3714      	adds	r7, #20
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	40012c00 	.word	0x40012c00
 8009384:	40014000 	.word	0x40014000
 8009388:	00010007 	.word	0x00010007

0800938c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	f003 0302 	and.w	r3, r3, #2
 800939e:	2b02      	cmp	r3, #2
 80093a0:	d122      	bne.n	80093e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	f003 0302 	and.w	r3, r3, #2
 80093ac:	2b02      	cmp	r3, #2
 80093ae:	d11b      	bne.n	80093e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f06f 0202 	mvn.w	r2, #2
 80093b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2201      	movs	r2, #1
 80093be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	f003 0303 	and.w	r3, r3, #3
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d003      	beq.n	80093d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f905 	bl	80095de <HAL_TIM_IC_CaptureCallback>
 80093d4:	e005      	b.n	80093e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 f8f7 	bl	80095ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f7fa fa87 	bl	80038f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	f003 0304 	and.w	r3, r3, #4
 80093f2:	2b04      	cmp	r3, #4
 80093f4:	d122      	bne.n	800943c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	f003 0304 	and.w	r3, r3, #4
 8009400:	2b04      	cmp	r3, #4
 8009402:	d11b      	bne.n	800943c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f06f 0204 	mvn.w	r2, #4
 800940c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2202      	movs	r2, #2
 8009412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800941e:	2b00      	cmp	r3, #0
 8009420:	d003      	beq.n	800942a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f8db 	bl	80095de <HAL_TIM_IC_CaptureCallback>
 8009428:	e005      	b.n	8009436 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f8cd 	bl	80095ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f7fa fa5d 	bl	80038f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	f003 0308 	and.w	r3, r3, #8
 8009446:	2b08      	cmp	r3, #8
 8009448:	d122      	bne.n	8009490 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	f003 0308 	and.w	r3, r3, #8
 8009454:	2b08      	cmp	r3, #8
 8009456:	d11b      	bne.n	8009490 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f06f 0208 	mvn.w	r2, #8
 8009460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2204      	movs	r2, #4
 8009466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	f003 0303 	and.w	r3, r3, #3
 8009472:	2b00      	cmp	r3, #0
 8009474:	d003      	beq.n	800947e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f8b1 	bl	80095de <HAL_TIM_IC_CaptureCallback>
 800947c:	e005      	b.n	800948a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 f8a3 	bl	80095ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f7fa fa33 	bl	80038f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	f003 0310 	and.w	r3, r3, #16
 800949a:	2b10      	cmp	r3, #16
 800949c:	d122      	bne.n	80094e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	f003 0310 	and.w	r3, r3, #16
 80094a8:	2b10      	cmp	r3, #16
 80094aa:	d11b      	bne.n	80094e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f06f 0210 	mvn.w	r2, #16
 80094b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2208      	movs	r2, #8
 80094ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	69db      	ldr	r3, [r3, #28]
 80094c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d003      	beq.n	80094d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 f887 	bl	80095de <HAL_TIM_IC_CaptureCallback>
 80094d0:	e005      	b.n	80094de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f879 	bl	80095ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7fa fa09 	bl	80038f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d10e      	bne.n	8009510 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	f003 0301 	and.w	r3, r3, #1
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d107      	bne.n	8009510 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f06f 0201 	mvn.w	r2, #1
 8009508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f7fa f9dc 	bl	80038c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800951a:	2b80      	cmp	r3, #128	; 0x80
 800951c:	d10e      	bne.n	800953c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009528:	2b80      	cmp	r3, #128	; 0x80
 800952a:	d107      	bne.n	800953c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f93a 	bl	80097b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800954a:	d10e      	bne.n	800956a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009556:	2b80      	cmp	r3, #128	; 0x80
 8009558:	d107      	bne.n	800956a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f92d 	bl	80097c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009574:	2b40      	cmp	r3, #64	; 0x40
 8009576:	d10e      	bne.n	8009596 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009582:	2b40      	cmp	r3, #64	; 0x40
 8009584:	d107      	bne.n	8009596 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800958e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f82e 	bl	80095f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	f003 0320 	and.w	r3, r3, #32
 80095a0:	2b20      	cmp	r3, #32
 80095a2:	d10e      	bne.n	80095c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	f003 0320 	and.w	r3, r3, #32
 80095ae:	2b20      	cmp	r3, #32
 80095b0:	d107      	bne.n	80095c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f06f 0220 	mvn.w	r2, #32
 80095ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f8ed 	bl	800979c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095c2:	bf00      	nop
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095ca:	b480      	push	{r7}
 80095cc:	b083      	sub	sp, #12
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80095d2:	bf00      	nop
 80095d4:	370c      	adds	r7, #12
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr

080095de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80095de:	b480      	push	{r7}
 80095e0:	b083      	sub	sp, #12
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80095e6:	bf00      	nop
 80095e8:	370c      	adds	r7, #12
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095f2:	b480      	push	{r7}
 80095f4:	b083      	sub	sp, #12
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095fa:	bf00      	nop
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
	...

08009608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a2a      	ldr	r2, [pc, #168]	; (80096c4 <TIM_Base_SetConfig+0xbc>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d003      	beq.n	8009628 <TIM_Base_SetConfig+0x20>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009626:	d108      	bne.n	800963a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800962e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	4313      	orrs	r3, r2
 8009638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a21      	ldr	r2, [pc, #132]	; (80096c4 <TIM_Base_SetConfig+0xbc>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d00b      	beq.n	800965a <TIM_Base_SetConfig+0x52>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009648:	d007      	beq.n	800965a <TIM_Base_SetConfig+0x52>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a1e      	ldr	r2, [pc, #120]	; (80096c8 <TIM_Base_SetConfig+0xc0>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d003      	beq.n	800965a <TIM_Base_SetConfig+0x52>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a1d      	ldr	r2, [pc, #116]	; (80096cc <TIM_Base_SetConfig+0xc4>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d108      	bne.n	800966c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	4313      	orrs	r3, r2
 800966a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	4313      	orrs	r3, r2
 8009678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	689a      	ldr	r2, [r3, #8]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a0c      	ldr	r2, [pc, #48]	; (80096c4 <TIM_Base_SetConfig+0xbc>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d007      	beq.n	80096a8 <TIM_Base_SetConfig+0xa0>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a0b      	ldr	r2, [pc, #44]	; (80096c8 <TIM_Base_SetConfig+0xc0>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d003      	beq.n	80096a8 <TIM_Base_SetConfig+0xa0>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a0a      	ldr	r2, [pc, #40]	; (80096cc <TIM_Base_SetConfig+0xc4>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d103      	bne.n	80096b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	691a      	ldr	r2, [r3, #16]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	615a      	str	r2, [r3, #20]
}
 80096b6:	bf00      	nop
 80096b8:	3714      	adds	r7, #20
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop
 80096c4:	40012c00 	.word	0x40012c00
 80096c8:	40014000 	.word	0x40014000
 80096cc:	40014400 	.word	0x40014400

080096d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d101      	bne.n	80096e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80096e4:	2302      	movs	r3, #2
 80096e6:	e04f      	b.n	8009788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2202      	movs	r2, #2
 80096f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a21      	ldr	r2, [pc, #132]	; (8009794 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d108      	bne.n	8009724 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009718:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	4313      	orrs	r3, r2
 8009722:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800972a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	4313      	orrs	r3, r2
 8009734:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	68fa      	ldr	r2, [r7, #12]
 800973c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a14      	ldr	r2, [pc, #80]	; (8009794 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d009      	beq.n	800975c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009750:	d004      	beq.n	800975c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a10      	ldr	r2, [pc, #64]	; (8009798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d10c      	bne.n	8009776 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009762:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	68ba      	ldr	r2, [r7, #8]
 800976a:	4313      	orrs	r3, r2
 800976c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68ba      	ldr	r2, [r7, #8]
 8009774:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2201      	movs	r2, #1
 800977a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	3714      	adds	r7, #20
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr
 8009794:	40012c00 	.word	0x40012c00
 8009798:	40014000 	.word	0x40014000

0800979c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097a4:	bf00      	nop
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097b8:	bf00      	nop
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80097cc:	bf00      	nop
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80097d8:	b084      	sub	sp, #16
 80097da:	b480      	push	{r7}
 80097dc:	b083      	sub	sp, #12
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
 80097e2:	f107 0014 	add.w	r0, r7, #20
 80097e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	b004      	add	sp, #16
 80097f8:	4770      	bx	lr

080097fa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80097fa:	b480      	push	{r7}
 80097fc:	b085      	sub	sp, #20
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800980a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800980e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	b29a      	uxth	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3714      	adds	r7, #20
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009830:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009834:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800983c:	b29a      	uxth	r2, r3
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	b29b      	uxth	r3, r3
 8009842:	43db      	mvns	r3, r3
 8009844:	b29b      	uxth	r3, r3
 8009846:	4013      	ands	r3, r2
 8009848:	b29a      	uxth	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3714      	adds	r7, #20
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr

0800985e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800985e:	b480      	push	{r7}
 8009860:	b083      	sub	sp, #12
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
 8009866:	460b      	mov	r3, r1
 8009868:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800986a:	2300      	movs	r3, #0
}
 800986c:	4618      	mov	r0, r3
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009878:	b084      	sub	sp, #16
 800987a:	b480      	push	{r7}
 800987c:	b083      	sub	sp, #12
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	f107 0014 	add.w	r0, r7, #20
 8009886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2201      	movs	r2, #1
 800988e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	b004      	add	sp, #16
 80098b8:	4770      	bx	lr
	...

080098bc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098bc:	b480      	push	{r7}
 80098be:	b09d      	sub	sp, #116	; 0x74
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80098c6:	2300      	movs	r3, #0
 80098c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	881b      	ldrh	r3, [r3, #0]
 80098d8:	b29b      	uxth	r3, r3
 80098da:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80098de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098e2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	78db      	ldrb	r3, [r3, #3]
 80098ea:	2b03      	cmp	r3, #3
 80098ec:	d81f      	bhi.n	800992e <USB_ActivateEndpoint+0x72>
 80098ee:	a201      	add	r2, pc, #4	; (adr r2, 80098f4 <USB_ActivateEndpoint+0x38>)
 80098f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f4:	08009905 	.word	0x08009905
 80098f8:	08009921 	.word	0x08009921
 80098fc:	08009937 	.word	0x08009937
 8009900:	08009913 	.word	0x08009913
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009904:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009908:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800990c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009910:	e012      	b.n	8009938 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009912:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009916:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800991a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800991e:	e00b      	b.n	8009938 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009920:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009924:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009928:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800992c:	e004      	b.n	8009938 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009934:	e000      	b.n	8009938 <USB_ActivateEndpoint+0x7c>
      break;
 8009936:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	441a      	add	r2, r3
 8009942:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800994a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800994e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009956:	b29b      	uxth	r3, r3
 8009958:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	881b      	ldrh	r3, [r3, #0]
 8009966:	b29b      	uxth	r3, r3
 8009968:	b21b      	sxth	r3, r3
 800996a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800996e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009972:	b21a      	sxth	r2, r3
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	b21b      	sxth	r3, r3
 800997a:	4313      	orrs	r3, r2
 800997c:	b21b      	sxth	r3, r3
 800997e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	441a      	add	r2, r3
 800998c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800999c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	7b1b      	ldrb	r3, [r3, #12]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f040 816e 	bne.w	8009c8a <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	785b      	ldrb	r3, [r3, #1]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f000 8084 	beq.w	8009ac0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	61bb      	str	r3, [r7, #24]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	461a      	mov	r2, r3
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	4413      	add	r3, r2
 80099ca:	61bb      	str	r3, [r7, #24]
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	00da      	lsls	r2, r3, #3
 80099d2:	69bb      	ldr	r3, [r7, #24]
 80099d4:	4413      	add	r3, r2
 80099d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099da:	617b      	str	r3, [r7, #20]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	88db      	ldrh	r3, [r3, #6]
 80099e0:	085b      	lsrs	r3, r3, #1
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	005b      	lsls	r3, r3, #1
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	4413      	add	r3, r2
 80099f6:	881b      	ldrh	r3, [r3, #0]
 80099f8:	827b      	strh	r3, [r7, #18]
 80099fa:	8a7b      	ldrh	r3, [r7, #18]
 80099fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d01b      	beq.n	8009a3c <USB_ActivateEndpoint+0x180>
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	4413      	add	r3, r2
 8009a0e:	881b      	ldrh	r3, [r3, #0]
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a1a:	823b      	strh	r3, [r7, #16]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	441a      	add	r2, r3
 8009a26:	8a3b      	ldrh	r3, [r7, #16]
 8009a28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	78db      	ldrb	r3, [r3, #3]
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d020      	beq.n	8009a86 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4413      	add	r3, r2
 8009a4e:	881b      	ldrh	r3, [r3, #0]
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a5a:	81bb      	strh	r3, [r7, #12]
 8009a5c:	89bb      	ldrh	r3, [r7, #12]
 8009a5e:	f083 0320 	eor.w	r3, r3, #32
 8009a62:	81bb      	strh	r3, [r7, #12]
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	441a      	add	r2, r3
 8009a6e:	89bb      	ldrh	r3, [r7, #12]
 8009a70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	8013      	strh	r3, [r2, #0]
 8009a84:	e2cb      	b.n	800a01e <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	4413      	add	r3, r2
 8009a90:	881b      	ldrh	r3, [r3, #0]
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a9c:	81fb      	strh	r3, [r7, #14]
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	441a      	add	r2, r3
 8009aa8:	89fb      	ldrh	r3, [r7, #14]
 8009aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	8013      	strh	r3, [r2, #0]
 8009abe:	e2ae      	b.n	800a01e <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	633b      	str	r3, [r7, #48]	; 0x30
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	461a      	mov	r2, r3
 8009ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad0:	4413      	add	r3, r2
 8009ad2:	633b      	str	r3, [r7, #48]	; 0x30
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	00da      	lsls	r2, r3, #3
 8009ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009adc:	4413      	add	r3, r2
 8009ade:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	88db      	ldrh	r3, [r3, #6]
 8009ae8:	085b      	lsrs	r3, r3, #1
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	005b      	lsls	r3, r3, #1
 8009aee:	b29a      	uxth	r2, r3
 8009af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	461a      	mov	r2, r3
 8009b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b04:	4413      	add	r3, r2
 8009b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	00da      	lsls	r2, r3, #3
 8009b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b10:	4413      	add	r3, r2
 8009b12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009b16:	627b      	str	r3, [r7, #36]	; 0x24
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	2b3e      	cmp	r3, #62	; 0x3e
 8009b1e:	d918      	bls.n	8009b52 <USB_ActivateEndpoint+0x296>
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	691b      	ldr	r3, [r3, #16]
 8009b24:	095b      	lsrs	r3, r3, #5
 8009b26:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	f003 031f 	and.w	r3, r3, #31
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d102      	bne.n	8009b3a <USB_ActivateEndpoint+0x27e>
 8009b34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b36:	3b01      	subs	r3, #1
 8009b38:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	029b      	lsls	r3, r3, #10
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4e:	801a      	strh	r2, [r3, #0]
 8009b50:	e029      	b.n	8009ba6 <USB_ActivateEndpoint+0x2ea>
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d112      	bne.n	8009b80 <USB_ActivateEndpoint+0x2c4>
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5c:	881b      	ldrh	r3, [r3, #0]
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b68:	801a      	strh	r2, [r3, #0]
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6c:	881b      	ldrh	r3, [r3, #0]
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7c:	801a      	strh	r2, [r3, #0]
 8009b7e:	e012      	b.n	8009ba6 <USB_ActivateEndpoint+0x2ea>
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	691b      	ldr	r3, [r3, #16]
 8009b84:	085b      	lsrs	r3, r3, #1
 8009b86:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	691b      	ldr	r3, [r3, #16]
 8009b8c:	f003 0301 	and.w	r3, r3, #1
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d002      	beq.n	8009b9a <USB_ActivateEndpoint+0x2de>
 8009b94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b96:	3301      	adds	r3, #1
 8009b98:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	029b      	lsls	r3, r3, #10
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	4413      	add	r3, r2
 8009bb0:	881b      	ldrh	r3, [r3, #0]
 8009bb2:	847b      	strh	r3, [r7, #34]	; 0x22
 8009bb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d01b      	beq.n	8009bf6 <USB_ActivateEndpoint+0x33a>
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4413      	add	r3, r2
 8009bc8:	881b      	ldrh	r3, [r3, #0]
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bd4:	843b      	strh	r3, [r7, #32]
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	441a      	add	r2, r3
 8009be0:	8c3b      	ldrh	r3, [r7, #32]
 8009be2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009be6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d124      	bne.n	8009c48 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	4413      	add	r3, r2
 8009c08:	881b      	ldrh	r3, [r3, #0]
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c14:	83bb      	strh	r3, [r7, #28]
 8009c16:	8bbb      	ldrh	r3, [r7, #28]
 8009c18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009c1c:	83bb      	strh	r3, [r7, #28]
 8009c1e:	8bbb      	ldrh	r3, [r7, #28]
 8009c20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c24:	83bb      	strh	r3, [r7, #28]
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	441a      	add	r2, r3
 8009c30:	8bbb      	ldrh	r3, [r7, #28]
 8009c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	8013      	strh	r3, [r2, #0]
 8009c46:	e1ea      	b.n	800a01e <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4413      	add	r3, r2
 8009c52:	881b      	ldrh	r3, [r3, #0]
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c5e:	83fb      	strh	r3, [r7, #30]
 8009c60:	8bfb      	ldrh	r3, [r7, #30]
 8009c62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c66:	83fb      	strh	r3, [r7, #30]
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	441a      	add	r2, r3
 8009c72:	8bfb      	ldrh	r3, [r7, #30]
 8009c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	8013      	strh	r3, [r2, #0]
 8009c88:	e1c9      	b.n	800a01e <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	78db      	ldrb	r3, [r3, #3]
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	d11e      	bne.n	8009cd0 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	4413      	add	r3, r2
 8009c9c:	881b      	ldrh	r3, [r3, #0]
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ca8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	441a      	add	r2, r3
 8009cb6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009cba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cc2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	8013      	strh	r3, [r2, #0]
 8009cce:	e01d      	b.n	8009d0c <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	4413      	add	r3, r2
 8009cda:	881b      	ldrh	r3, [r3, #0]
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ce6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	441a      	add	r2, r3
 8009cf4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	461a      	mov	r2, r3
 8009d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d1c:	4413      	add	r3, r2
 8009d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	00da      	lsls	r2, r3, #3
 8009d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d28:	4413      	add	r3, r2
 8009d2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	891b      	ldrh	r3, [r3, #8]
 8009d34:	085b      	lsrs	r3, r3, #1
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d3e:	801a      	strh	r2, [r3, #0]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	657b      	str	r3, [r7, #84]	; 0x54
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d50:	4413      	add	r3, r2
 8009d52:	657b      	str	r3, [r7, #84]	; 0x54
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	00da      	lsls	r2, r3, #3
 8009d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009d62:	653b      	str	r3, [r7, #80]	; 0x50
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	895b      	ldrh	r3, [r3, #10]
 8009d68:	085b      	lsrs	r3, r3, #1
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	005b      	lsls	r3, r3, #1
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d72:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	785b      	ldrb	r3, [r3, #1]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f040 8093 	bne.w	8009ea4 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	4413      	add	r3, r2
 8009d88:	881b      	ldrh	r3, [r3, #0]
 8009d8a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009d8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d01b      	beq.n	8009dd2 <USB_ActivateEndpoint+0x516>
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	4413      	add	r3, r2
 8009da4:	881b      	ldrh	r3, [r3, #0]
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009db0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	441a      	add	r2, r3
 8009dbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4413      	add	r3, r2
 8009ddc:	881b      	ldrh	r3, [r3, #0]
 8009dde:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009de0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d01b      	beq.n	8009e22 <USB_ActivateEndpoint+0x566>
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	4413      	add	r3, r2
 8009df4:	881b      	ldrh	r3, [r3, #0]
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e00:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	441a      	add	r2, r3
 8009e0c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	4413      	add	r3, r2
 8009e2c:	881b      	ldrh	r3, [r3, #0]
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e38:	873b      	strh	r3, [r7, #56]	; 0x38
 8009e3a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009e40:	873b      	strh	r3, [r7, #56]	; 0x38
 8009e42:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009e48:	873b      	strh	r3, [r7, #56]	; 0x38
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	441a      	add	r2, r3
 8009e54:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	881b      	ldrh	r3, [r3, #0]
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e80:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	441a      	add	r2, r3
 8009e8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	8013      	strh	r3, [r2, #0]
 8009ea2:	e0bc      	b.n	800a01e <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	4413      	add	r3, r2
 8009eae:	881b      	ldrh	r3, [r3, #0]
 8009eb0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009eb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d01d      	beq.n	8009efc <USB_ActivateEndpoint+0x640>
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	881b      	ldrh	r3, [r3, #0]
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ed6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	441a      	add	r2, r3
 8009ee4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ef0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	4413      	add	r3, r2
 8009f06:	881b      	ldrh	r3, [r3, #0]
 8009f08:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009f0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d01d      	beq.n	8009f54 <USB_ActivateEndpoint+0x698>
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4413      	add	r3, r2
 8009f22:	881b      	ldrh	r3, [r3, #0]
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f2e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	441a      	add	r2, r3
 8009f3c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	78db      	ldrb	r3, [r3, #3]
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d024      	beq.n	8009fa6 <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4413      	add	r3, r2
 8009f66:	881b      	ldrh	r3, [r3, #0]
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f72:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009f76:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009f7a:	f083 0320 	eor.w	r3, r3, #32
 8009f7e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	441a      	add	r2, r3
 8009f8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	8013      	strh	r3, [r2, #0]
 8009fa4:	e01d      	b.n	8009fe2 <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4413      	add	r3, r2
 8009fb0:	881b      	ldrh	r3, [r3, #0]
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fbc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	441a      	add	r2, r3
 8009fca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	4413      	add	r3, r2
 8009fec:	881b      	ldrh	r3, [r3, #0]
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ff8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	441a      	add	r2, r3
 800a006:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a00a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a00e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a01e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800a022:	4618      	mov	r0, r3
 800a024:	3774      	adds	r7, #116	; 0x74
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop

0800a030 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a030:	b480      	push	{r7}
 800a032:	b08d      	sub	sp, #52	; 0x34
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	7b1b      	ldrb	r3, [r3, #12]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	f040 808e 	bne.w	800a160 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	785b      	ldrb	r3, [r3, #1]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d044      	beq.n	800a0d6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4413      	add	r3, r2
 800a056:	881b      	ldrh	r3, [r3, #0]
 800a058:	81bb      	strh	r3, [r7, #12]
 800a05a:	89bb      	ldrh	r3, [r7, #12]
 800a05c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a060:	2b00      	cmp	r3, #0
 800a062:	d01b      	beq.n	800a09c <USB_DeactivateEndpoint+0x6c>
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	4413      	add	r3, r2
 800a06e:	881b      	ldrh	r3, [r3, #0]
 800a070:	b29b      	uxth	r3, r3
 800a072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a07a:	817b      	strh	r3, [r7, #10]
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	441a      	add	r2, r3
 800a086:	897b      	ldrh	r3, [r7, #10]
 800a088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a08c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a094:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a098:	b29b      	uxth	r3, r3
 800a09a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	4413      	add	r3, r2
 800a0a6:	881b      	ldrh	r3, [r3, #0]
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0b2:	813b      	strh	r3, [r7, #8]
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	441a      	add	r2, r3
 800a0be:	893b      	ldrh	r3, [r7, #8]
 800a0c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	8013      	strh	r3, [r2, #0]
 800a0d4:	e192      	b.n	800a3fc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4413      	add	r3, r2
 800a0e0:	881b      	ldrh	r3, [r3, #0]
 800a0e2:	827b      	strh	r3, [r7, #18]
 800a0e4:	8a7b      	ldrh	r3, [r7, #18]
 800a0e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d01b      	beq.n	800a126 <USB_DeactivateEndpoint+0xf6>
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	4413      	add	r3, r2
 800a0f8:	881b      	ldrh	r3, [r3, #0]
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a104:	823b      	strh	r3, [r7, #16]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	441a      	add	r2, r3
 800a110:	8a3b      	ldrh	r3, [r7, #16]
 800a112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a11a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a11e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a122:	b29b      	uxth	r3, r3
 800a124:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	4413      	add	r3, r2
 800a130:	881b      	ldrh	r3, [r3, #0]
 800a132:	b29b      	uxth	r3, r3
 800a134:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a13c:	81fb      	strh	r3, [r7, #14]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	441a      	add	r2, r3
 800a148:	89fb      	ldrh	r3, [r7, #14]
 800a14a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a14e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	8013      	strh	r3, [r2, #0]
 800a15e:	e14d      	b.n	800a3fc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	785b      	ldrb	r3, [r3, #1]
 800a164:	2b00      	cmp	r3, #0
 800a166:	f040 80a5 	bne.w	800a2b4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4413      	add	r3, r2
 800a174:	881b      	ldrh	r3, [r3, #0]
 800a176:	843b      	strh	r3, [r7, #32]
 800a178:	8c3b      	ldrh	r3, [r7, #32]
 800a17a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d01b      	beq.n	800a1ba <USB_DeactivateEndpoint+0x18a>
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	4413      	add	r3, r2
 800a18c:	881b      	ldrh	r3, [r3, #0]
 800a18e:	b29b      	uxth	r3, r3
 800a190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a198:	83fb      	strh	r3, [r7, #30]
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	441a      	add	r2, r3
 800a1a4:	8bfb      	ldrh	r3, [r7, #30]
 800a1a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a1b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	4413      	add	r3, r2
 800a1c4:	881b      	ldrh	r3, [r3, #0]
 800a1c6:	83bb      	strh	r3, [r7, #28]
 800a1c8:	8bbb      	ldrh	r3, [r7, #28]
 800a1ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d01b      	beq.n	800a20a <USB_DeactivateEndpoint+0x1da>
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	4413      	add	r3, r2
 800a1dc:	881b      	ldrh	r3, [r3, #0]
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1e8:	837b      	strh	r3, [r7, #26]
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	441a      	add	r2, r3
 800a1f4:	8b7b      	ldrh	r3, [r7, #26]
 800a1f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a202:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a206:	b29b      	uxth	r3, r3
 800a208:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	4413      	add	r3, r2
 800a214:	881b      	ldrh	r3, [r3, #0]
 800a216:	b29b      	uxth	r3, r3
 800a218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a21c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a220:	833b      	strh	r3, [r7, #24]
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	441a      	add	r2, r3
 800a22c:	8b3b      	ldrh	r3, [r7, #24]
 800a22e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a23a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a23e:	b29b      	uxth	r3, r3
 800a240:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	4413      	add	r3, r2
 800a24c:	881b      	ldrh	r3, [r3, #0]
 800a24e:	b29b      	uxth	r3, r3
 800a250:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a258:	82fb      	strh	r3, [r7, #22]
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	441a      	add	r2, r3
 800a264:	8afb      	ldrh	r3, [r7, #22]
 800a266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a26a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a26e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a276:	b29b      	uxth	r3, r3
 800a278:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	4413      	add	r3, r2
 800a284:	881b      	ldrh	r3, [r3, #0]
 800a286:	b29b      	uxth	r3, r3
 800a288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a28c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a290:	82bb      	strh	r3, [r7, #20]
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	441a      	add	r2, r3
 800a29c:	8abb      	ldrh	r3, [r7, #20]
 800a29e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	8013      	strh	r3, [r2, #0]
 800a2b2:	e0a3      	b.n	800a3fc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4413      	add	r3, r2
 800a2be:	881b      	ldrh	r3, [r3, #0]
 800a2c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a2c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a2c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d01b      	beq.n	800a304 <USB_DeactivateEndpoint+0x2d4>
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	4413      	add	r3, r2
 800a2d6:	881b      	ldrh	r3, [r3, #0]
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	441a      	add	r2, r3
 800a2ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a2f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a2fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a300:	b29b      	uxth	r3, r3
 800a302:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4413      	add	r3, r2
 800a30e:	881b      	ldrh	r3, [r3, #0]
 800a310:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a312:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d01b      	beq.n	800a354 <USB_DeactivateEndpoint+0x324>
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	4413      	add	r3, r2
 800a326:	881b      	ldrh	r3, [r3, #0]
 800a328:	b29b      	uxth	r3, r3
 800a32a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a32e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a332:	853b      	strh	r3, [r7, #40]	; 0x28
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	441a      	add	r2, r3
 800a33e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a34c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a350:	b29b      	uxth	r3, r3
 800a352:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	4413      	add	r3, r2
 800a35e:	881b      	ldrh	r3, [r3, #0]
 800a360:	b29b      	uxth	r3, r3
 800a362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a36a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	441a      	add	r2, r3
 800a376:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a37c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a380:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a388:	b29b      	uxth	r3, r3
 800a38a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	4413      	add	r3, r2
 800a396:	881b      	ldrh	r3, [r3, #0]
 800a398:	b29b      	uxth	r3, r3
 800a39a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a39e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3a2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	441a      	add	r2, r3
 800a3ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a3b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4413      	add	r3, r2
 800a3ce:	881b      	ldrh	r3, [r3, #0]
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3da:	847b      	strh	r3, [r7, #34]	; 0x22
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	441a      	add	r2, r3
 800a3e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a3e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3734      	adds	r7, #52	; 0x34
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr

0800a40a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b0c2      	sub	sp, #264	; 0x108
 800a40e:	af00      	add	r7, sp, #0
 800a410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a414:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a418:	6018      	str	r0, [r3, #0]
 800a41a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a41e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a422:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	785b      	ldrb	r3, [r3, #1]
 800a430:	2b01      	cmp	r3, #1
 800a432:	f040 867b 	bne.w	800b12c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a43a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	699a      	ldr	r2, [r3, #24]
 800a442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d908      	bls.n	800a464 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a462:	e007      	b.n	800a474 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	699b      	ldr	r3, [r3, #24]
 800a470:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	7b1b      	ldrb	r3, [r3, #12]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d13a      	bne.n	800a4fa <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	6959      	ldr	r1, [r3, #20]
 800a490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	88da      	ldrh	r2, [r3, #6]
 800a49c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a4a6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a4aa:	6800      	ldr	r0, [r0, #0]
 800a4ac:	f001 fc3e 	bl	800bd2c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a4b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	613b      	str	r3, [r7, #16]
 800a4bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	613b      	str	r3, [r7, #16]
 800a4d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	00da      	lsls	r2, r3, #3
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a4ea:	60fb      	str	r3, [r7, #12]
 800a4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4f0:	b29a      	uxth	r2, r3
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	801a      	strh	r2, [r3, #0]
 800a4f6:	f000 bde3 	b.w	800b0c0 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a4fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	78db      	ldrb	r3, [r3, #3]
 800a506:	2b02      	cmp	r3, #2
 800a508:	f040 843a 	bne.w	800ad80 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a50c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	6a1a      	ldr	r2, [r3, #32]
 800a518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a51c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	691b      	ldr	r3, [r3, #16]
 800a524:	429a      	cmp	r2, r3
 800a526:	f240 83b7 	bls.w	800ac98 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a52a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a52e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	4413      	add	r3, r2
 800a544:	881b      	ldrh	r3, [r3, #0]
 800a546:	b29b      	uxth	r3, r3
 800a548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a54c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a550:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a558:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	441a      	add	r2, r3
 800a56e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a57a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a57e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a582:	b29b      	uxth	r3, r3
 800a584:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a58a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	6a1a      	ldr	r2, [r3, #32]
 800a592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a596:	1ad2      	subs	r2, r2, r3
 800a598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a59c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a5a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	4413      	add	r3, r2
 800a5be:	881b      	ldrh	r3, [r3, #0]
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f000 81b3 	beq.w	800a932 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a5cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	633b      	str	r3, [r7, #48]	; 0x30
 800a5d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	785b      	ldrb	r3, [r3, #1]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d16d      	bne.n	800a6c4 <USB_EPStartXfer+0x2ba>
 800a5e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a602:	b29b      	uxth	r3, r3
 800a604:	461a      	mov	r2, r3
 800a606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a608:	4413      	add	r3, r2
 800a60a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a60c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	00da      	lsls	r2, r3, #3
 800a61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61c:	4413      	add	r3, r2
 800a61e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a622:	627b      	str	r3, [r7, #36]	; 0x24
 800a624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a628:	2b3e      	cmp	r3, #62	; 0x3e
 800a62a:	d91c      	bls.n	800a666 <USB_EPStartXfer+0x25c>
 800a62c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a630:	095b      	lsrs	r3, r3, #5
 800a632:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a63a:	f003 031f 	and.w	r3, r3, #31
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d104      	bne.n	800a64c <USB_EPStartXfer+0x242>
 800a642:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a646:	3b01      	subs	r3, #1
 800a648:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a64c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a650:	b29b      	uxth	r3, r3
 800a652:	029b      	lsls	r3, r3, #10
 800a654:	b29b      	uxth	r3, r3
 800a656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a65a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a65e:	b29a      	uxth	r2, r3
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	801a      	strh	r2, [r3, #0]
 800a664:	e053      	b.n	800a70e <USB_EPStartXfer+0x304>
 800a666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d112      	bne.n	800a694 <USB_EPStartXfer+0x28a>
 800a66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a670:	881b      	ldrh	r3, [r3, #0]
 800a672:	b29b      	uxth	r3, r3
 800a674:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a678:	b29a      	uxth	r2, r3
 800a67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67c:	801a      	strh	r2, [r3, #0]
 800a67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a680:	881b      	ldrh	r3, [r3, #0]
 800a682:	b29b      	uxth	r3, r3
 800a684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a68c:	b29a      	uxth	r2, r3
 800a68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a690:	801a      	strh	r2, [r3, #0]
 800a692:	e03c      	b.n	800a70e <USB_EPStartXfer+0x304>
 800a694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a698:	085b      	lsrs	r3, r3, #1
 800a69a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a69e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6a2:	f003 0301 	and.w	r3, r3, #1
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d004      	beq.n	800a6b4 <USB_EPStartXfer+0x2aa>
 800a6aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a6b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	029b      	lsls	r3, r3, #10
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c0:	801a      	strh	r2, [r3, #0]
 800a6c2:	e024      	b.n	800a70e <USB_EPStartXfer+0x304>
 800a6c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	785b      	ldrb	r3, [r3, #1]
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d11c      	bne.n	800a70e <USB_EPStartXfer+0x304>
 800a6d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e8:	4413      	add	r3, r2
 800a6ea:	633b      	str	r3, [r7, #48]	; 0x30
 800a6ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	00da      	lsls	r2, r3, #3
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fc:	4413      	add	r3, r2
 800a6fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a702:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a708:	b29a      	uxth	r2, r3
 800a70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a70e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	895b      	ldrh	r3, [r3, #10]
 800a71a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a71e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6959      	ldr	r1, [r3, #20]
 800a72a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a72e:	b29b      	uxth	r3, r3
 800a730:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a734:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a738:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a73c:	6800      	ldr	r0, [r0, #0]
 800a73e:	f001 faf5 	bl	800bd2c <USB_WritePMA>
            ep->xfer_buff += len;
 800a742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	695a      	ldr	r2, [r3, #20]
 800a74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a752:	441a      	add	r2, r3
 800a754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	6a1a      	ldr	r2, [r3, #32]
 800a76c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d90f      	bls.n	800a79c <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800a77c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	6a1a      	ldr	r2, [r3, #32]
 800a788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a78c:	1ad2      	subs	r2, r2, r3
 800a78e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	621a      	str	r2, [r3, #32]
 800a79a:	e00e      	b.n	800a7ba <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800a79c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	6a1b      	ldr	r3, [r3, #32]
 800a7a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a7ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a7ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	785b      	ldrb	r3, [r3, #1]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d16d      	bne.n	800a8a6 <USB_EPStartXfer+0x49c>
 800a7ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	61bb      	str	r3, [r7, #24]
 800a7d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	61bb      	str	r3, [r7, #24]
 800a7ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	00da      	lsls	r2, r3, #3
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	4413      	add	r3, r2
 800a800:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a804:	617b      	str	r3, [r7, #20]
 800a806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a80a:	2b3e      	cmp	r3, #62	; 0x3e
 800a80c:	d91c      	bls.n	800a848 <USB_EPStartXfer+0x43e>
 800a80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a812:	095b      	lsrs	r3, r3, #5
 800a814:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a81c:	f003 031f 	and.w	r3, r3, #31
 800a820:	2b00      	cmp	r3, #0
 800a822:	d104      	bne.n	800a82e <USB_EPStartXfer+0x424>
 800a824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a828:	3b01      	subs	r3, #1
 800a82a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a82e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a832:	b29b      	uxth	r3, r3
 800a834:	029b      	lsls	r3, r3, #10
 800a836:	b29b      	uxth	r3, r3
 800a838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a83c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a840:	b29a      	uxth	r2, r3
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	801a      	strh	r2, [r3, #0]
 800a846:	e059      	b.n	800a8fc <USB_EPStartXfer+0x4f2>
 800a848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d112      	bne.n	800a876 <USB_EPStartXfer+0x46c>
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	881b      	ldrh	r3, [r3, #0]
 800a854:	b29b      	uxth	r3, r3
 800a856:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	801a      	strh	r2, [r3, #0]
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	881b      	ldrh	r3, [r3, #0]
 800a864:	b29b      	uxth	r3, r3
 800a866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a86a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a86e:	b29a      	uxth	r2, r3
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	801a      	strh	r2, [r3, #0]
 800a874:	e042      	b.n	800a8fc <USB_EPStartXfer+0x4f2>
 800a876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a87a:	085b      	lsrs	r3, r3, #1
 800a87c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a884:	f003 0301 	and.w	r3, r3, #1
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d004      	beq.n	800a896 <USB_EPStartXfer+0x48c>
 800a88c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a890:	3301      	adds	r3, #1
 800a892:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	029b      	lsls	r3, r3, #10
 800a89e:	b29a      	uxth	r2, r3
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	801a      	strh	r2, [r3, #0]
 800a8a4:	e02a      	b.n	800a8fc <USB_EPStartXfer+0x4f2>
 800a8a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	785b      	ldrb	r3, [r3, #1]
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d122      	bne.n	800a8fc <USB_EPStartXfer+0x4f2>
 800a8b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	623b      	str	r3, [r7, #32]
 800a8c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	6a3b      	ldr	r3, [r7, #32]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	623b      	str	r3, [r7, #32]
 800a8da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	00da      	lsls	r2, r3, #3
 800a8e8:	6a3b      	ldr	r3, [r7, #32]
 800a8ea:	4413      	add	r3, r2
 800a8ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a8f0:	61fb      	str	r3, [r7, #28]
 800a8f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8f6:	b29a      	uxth	r2, r3
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a8fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	891b      	ldrh	r3, [r3, #8]
 800a908:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a90c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	6959      	ldr	r1, [r3, #20]
 800a918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a922:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a926:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a92a:	6800      	ldr	r0, [r0, #0]
 800a92c:	f001 f9fe 	bl	800bd2c <USB_WritePMA>
 800a930:	e3c6      	b.n	800b0c0 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	785b      	ldrb	r3, [r3, #1]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d16d      	bne.n	800aa1e <USB_EPStartXfer+0x614>
 800a942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a94e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	461a      	mov	r2, r3
 800a960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a962:	4413      	add	r3, r2
 800a964:	64bb      	str	r3, [r7, #72]	; 0x48
 800a966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a96a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	00da      	lsls	r2, r3, #3
 800a974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a976:	4413      	add	r3, r2
 800a978:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a97c:	647b      	str	r3, [r7, #68]	; 0x44
 800a97e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a982:	2b3e      	cmp	r3, #62	; 0x3e
 800a984:	d91c      	bls.n	800a9c0 <USB_EPStartXfer+0x5b6>
 800a986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a98a:	095b      	lsrs	r3, r3, #5
 800a98c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a994:	f003 031f 	and.w	r3, r3, #31
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d104      	bne.n	800a9a6 <USB_EPStartXfer+0x59c>
 800a99c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a9a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	029b      	lsls	r3, r3, #10
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9b8:	b29a      	uxth	r2, r3
 800a9ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9bc:	801a      	strh	r2, [r3, #0]
 800a9be:	e059      	b.n	800aa74 <USB_EPStartXfer+0x66a>
 800a9c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d112      	bne.n	800a9ee <USB_EPStartXfer+0x5e4>
 800a9c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9ca:	881b      	ldrh	r3, [r3, #0]
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9d6:	801a      	strh	r2, [r3, #0]
 800a9d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9da:	881b      	ldrh	r3, [r3, #0]
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9ea:	801a      	strh	r2, [r3, #0]
 800a9ec:	e042      	b.n	800aa74 <USB_EPStartXfer+0x66a>
 800a9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f2:	085b      	lsrs	r3, r3, #1
 800a9f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9fc:	f003 0301 	and.w	r3, r3, #1
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d004      	beq.n	800aa0e <USB_EPStartXfer+0x604>
 800aa04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa08:	3301      	adds	r3, #1
 800aa0a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	029b      	lsls	r3, r3, #10
 800aa16:	b29a      	uxth	r2, r3
 800aa18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa1a:	801a      	strh	r2, [r3, #0]
 800aa1c:	e02a      	b.n	800aa74 <USB_EPStartXfer+0x66a>
 800aa1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	785b      	ldrb	r3, [r3, #1]
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d122      	bne.n	800aa74 <USB_EPStartXfer+0x66a>
 800aa2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	653b      	str	r3, [r7, #80]	; 0x50
 800aa3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa4e:	4413      	add	r3, r2
 800aa50:	653b      	str	r3, [r7, #80]	; 0x50
 800aa52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	00da      	lsls	r2, r3, #3
 800aa60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa62:	4413      	add	r3, r2
 800aa64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa68:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa6e:	b29a      	uxth	r2, r3
 800aa70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa72:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800aa74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	891b      	ldrh	r3, [r3, #8]
 800aa80:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	6959      	ldr	r1, [r3, #20]
 800aa90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aa9a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aa9e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aaa2:	6800      	ldr	r0, [r0, #0]
 800aaa4:	f001 f942 	bl	800bd2c <USB_WritePMA>
            ep->xfer_buff += len;
 800aaa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	695a      	ldr	r2, [r3, #20]
 800aab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aab8:	441a      	add	r2, r3
 800aaba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aabe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800aac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	6a1a      	ldr	r2, [r3, #32]
 800aad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	691b      	ldr	r3, [r3, #16]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d90f      	bls.n	800ab02 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800aae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	6a1a      	ldr	r2, [r3, #32]
 800aaee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf2:	1ad2      	subs	r2, r2, r3
 800aaf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	621a      	str	r2, [r3, #32]
 800ab00:	e00e      	b.n	800ab20 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800ab02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	6a1b      	ldr	r3, [r3, #32]
 800ab0e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800ab12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	643b      	str	r3, [r7, #64]	; 0x40
 800ab2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	785b      	ldrb	r3, [r3, #1]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d16d      	bne.n	800ac18 <USB_EPStartXfer+0x80e>
 800ab3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	461a      	mov	r2, r3
 800ab5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5c:	4413      	add	r3, r2
 800ab5e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	00da      	lsls	r2, r3, #3
 800ab6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab70:	4413      	add	r3, r2
 800ab72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab76:	637b      	str	r3, [r7, #52]	; 0x34
 800ab78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab7c:	2b3e      	cmp	r3, #62	; 0x3e
 800ab7e:	d91c      	bls.n	800abba <USB_EPStartXfer+0x7b0>
 800ab80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab84:	095b      	lsrs	r3, r3, #5
 800ab86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ab8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab8e:	f003 031f 	and.w	r3, r3, #31
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d104      	bne.n	800aba0 <USB_EPStartXfer+0x796>
 800ab96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	029b      	lsls	r3, r3, #10
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abb2:	b29a      	uxth	r2, r3
 800abb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb6:	801a      	strh	r2, [r3, #0]
 800abb8:	e053      	b.n	800ac62 <USB_EPStartXfer+0x858>
 800abba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d112      	bne.n	800abe8 <USB_EPStartXfer+0x7de>
 800abc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc4:	881b      	ldrh	r3, [r3, #0]
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800abcc:	b29a      	uxth	r2, r3
 800abce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd0:	801a      	strh	r2, [r3, #0]
 800abd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd4:	881b      	ldrh	r3, [r3, #0]
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abe0:	b29a      	uxth	r2, r3
 800abe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe4:	801a      	strh	r2, [r3, #0]
 800abe6:	e03c      	b.n	800ac62 <USB_EPStartXfer+0x858>
 800abe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abec:	085b      	lsrs	r3, r3, #1
 800abee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800abf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf6:	f003 0301 	and.w	r3, r3, #1
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d004      	beq.n	800ac08 <USB_EPStartXfer+0x7fe>
 800abfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac02:	3301      	adds	r3, #1
 800ac04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ac08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	029b      	lsls	r3, r3, #10
 800ac10:	b29a      	uxth	r2, r3
 800ac12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac14:	801a      	strh	r2, [r3, #0]
 800ac16:	e024      	b.n	800ac62 <USB_EPStartXfer+0x858>
 800ac18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	785b      	ldrb	r3, [r3, #1]
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d11c      	bne.n	800ac62 <USB_EPStartXfer+0x858>
 800ac28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	461a      	mov	r2, r3
 800ac3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac3c:	4413      	add	r3, r2
 800ac3e:	643b      	str	r3, [r7, #64]	; 0x40
 800ac40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	00da      	lsls	r2, r3, #3
 800ac4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac50:	4413      	add	r3, r2
 800ac52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ac62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	895b      	ldrh	r3, [r3, #10]
 800ac6e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6959      	ldr	r1, [r3, #20]
 800ac7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ac88:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ac8c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ac90:	6800      	ldr	r0, [r0, #0]
 800ac92:	f001 f84b 	bl	800bd2c <USB_WritePMA>
 800ac96:	e213      	b.n	800b0c0 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ac98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	6a1b      	ldr	r3, [r3, #32]
 800aca4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800aca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	4413      	add	r3, r2
 800acc2:	881b      	ldrh	r3, [r3, #0]
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800acca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acce:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800acd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ace0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	441a      	add	r2, r3
 800acec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800acf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ad04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	461a      	mov	r2, r3
 800ad22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad24:	4413      	add	r3, r2
 800ad26:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	00da      	lsls	r2, r3, #3
 800ad36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad38:	4413      	add	r3, r2
 800ad3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ad3e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad44:	b29a      	uxth	r2, r3
 800ad46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad48:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ad4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	891b      	ldrh	r3, [r3, #8]
 800ad56:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	6959      	ldr	r1, [r3, #20]
 800ad66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ad70:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ad74:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ad78:	6800      	ldr	r0, [r0, #0]
 800ad7a:	f000 ffd7 	bl	800bd2c <USB_WritePMA>
 800ad7e:	e19f      	b.n	800b0c0 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ad80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	6a1a      	ldr	r2, [r3, #32]
 800ad8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad90:	1ad2      	subs	r2, r2, r3
 800ad92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ad9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ada2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	4413      	add	r3, r2
 800adb8:	881b      	ldrh	r3, [r3, #0]
 800adba:	b29b      	uxth	r3, r3
 800adbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f000 80bc 	beq.w	800af3e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800adc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	673b      	str	r3, [r7, #112]	; 0x70
 800add2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800add6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	785b      	ldrb	r3, [r3, #1]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d16d      	bne.n	800aebe <USB_EPStartXfer+0xab4>
 800ade2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ade6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	66bb      	str	r3, [r7, #104]	; 0x68
 800adee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	461a      	mov	r2, r3
 800ae00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae02:	4413      	add	r3, r2
 800ae04:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	00da      	lsls	r2, r3, #3
 800ae14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae16:	4413      	add	r3, r2
 800ae18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae1c:	667b      	str	r3, [r7, #100]	; 0x64
 800ae1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae22:	2b3e      	cmp	r3, #62	; 0x3e
 800ae24:	d91c      	bls.n	800ae60 <USB_EPStartXfer+0xa56>
 800ae26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae2a:	095b      	lsrs	r3, r3, #5
 800ae2c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ae30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae34:	f003 031f 	and.w	r3, r3, #31
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d104      	bne.n	800ae46 <USB_EPStartXfer+0xa3c>
 800ae3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ae40:	3b01      	subs	r3, #1
 800ae42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ae46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	029b      	lsls	r3, r3, #10
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae58:	b29a      	uxth	r2, r3
 800ae5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae5c:	801a      	strh	r2, [r3, #0]
 800ae5e:	e053      	b.n	800af08 <USB_EPStartXfer+0xafe>
 800ae60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d112      	bne.n	800ae8e <USB_EPStartXfer+0xa84>
 800ae68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae6a:	881b      	ldrh	r3, [r3, #0]
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ae72:	b29a      	uxth	r2, r3
 800ae74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae76:	801a      	strh	r2, [r3, #0]
 800ae78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae7a:	881b      	ldrh	r3, [r3, #0]
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae86:	b29a      	uxth	r2, r3
 800ae88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae8a:	801a      	strh	r2, [r3, #0]
 800ae8c:	e03c      	b.n	800af08 <USB_EPStartXfer+0xafe>
 800ae8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae92:	085b      	lsrs	r3, r3, #1
 800ae94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ae98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae9c:	f003 0301 	and.w	r3, r3, #1
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d004      	beq.n	800aeae <USB_EPStartXfer+0xaa4>
 800aea4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800aea8:	3301      	adds	r3, #1
 800aeaa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aeae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	029b      	lsls	r3, r3, #10
 800aeb6:	b29a      	uxth	r2, r3
 800aeb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aeba:	801a      	strh	r2, [r3, #0]
 800aebc:	e024      	b.n	800af08 <USB_EPStartXfer+0xafe>
 800aebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	785b      	ldrb	r3, [r3, #1]
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d11c      	bne.n	800af08 <USB_EPStartXfer+0xafe>
 800aece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aed2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aedc:	b29b      	uxth	r3, r3
 800aede:	461a      	mov	r2, r3
 800aee0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aee2:	4413      	add	r3, r2
 800aee4:	673b      	str	r3, [r7, #112]	; 0x70
 800aee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	00da      	lsls	r2, r3, #3
 800aef4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aef6:	4413      	add	r3, r2
 800aef8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aefc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aefe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af02:	b29a      	uxth	r2, r3
 800af04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800af08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	895b      	ldrh	r3, [r3, #10]
 800af14:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	6959      	ldr	r1, [r3, #20]
 800af24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af28:	b29b      	uxth	r3, r3
 800af2a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800af2e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800af32:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800af36:	6800      	ldr	r0, [r0, #0]
 800af38:	f000 fef8 	bl	800bd2c <USB_WritePMA>
 800af3c:	e0c0      	b.n	800b0c0 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800af3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	785b      	ldrb	r3, [r3, #1]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d16d      	bne.n	800b02a <USB_EPStartXfer+0xc20>
 800af4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	67fb      	str	r3, [r7, #124]	; 0x7c
 800af5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af68:	b29b      	uxth	r3, r3
 800af6a:	461a      	mov	r2, r3
 800af6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800af6e:	4413      	add	r3, r2
 800af70:	67fb      	str	r3, [r7, #124]	; 0x7c
 800af72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	00da      	lsls	r2, r3, #3
 800af80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800af82:	4413      	add	r3, r2
 800af84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800af88:	67bb      	str	r3, [r7, #120]	; 0x78
 800af8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af8e:	2b3e      	cmp	r3, #62	; 0x3e
 800af90:	d91c      	bls.n	800afcc <USB_EPStartXfer+0xbc2>
 800af92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af96:	095b      	lsrs	r3, r3, #5
 800af98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800af9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afa0:	f003 031f 	and.w	r3, r3, #31
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d104      	bne.n	800afb2 <USB_EPStartXfer+0xba8>
 800afa8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800afac:	3b01      	subs	r3, #1
 800afae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800afb2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	029b      	lsls	r3, r3, #10
 800afba:	b29b      	uxth	r3, r3
 800afbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afc4:	b29a      	uxth	r2, r3
 800afc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afc8:	801a      	strh	r2, [r3, #0]
 800afca:	e05f      	b.n	800b08c <USB_EPStartXfer+0xc82>
 800afcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d112      	bne.n	800affa <USB_EPStartXfer+0xbf0>
 800afd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afd6:	881b      	ldrh	r3, [r3, #0]
 800afd8:	b29b      	uxth	r3, r3
 800afda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800afde:	b29a      	uxth	r2, r3
 800afe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afe2:	801a      	strh	r2, [r3, #0]
 800afe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afe6:	881b      	ldrh	r3, [r3, #0]
 800afe8:	b29b      	uxth	r3, r3
 800afea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aff2:	b29a      	uxth	r2, r3
 800aff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aff6:	801a      	strh	r2, [r3, #0]
 800aff8:	e048      	b.n	800b08c <USB_EPStartXfer+0xc82>
 800affa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800affe:	085b      	lsrs	r3, r3, #1
 800b000:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b008:	f003 0301 	and.w	r3, r3, #1
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d004      	beq.n	800b01a <USB_EPStartXfer+0xc10>
 800b010:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b014:	3301      	adds	r3, #1
 800b016:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b01a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b01e:	b29b      	uxth	r3, r3
 800b020:	029b      	lsls	r3, r3, #10
 800b022:	b29a      	uxth	r2, r3
 800b024:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b026:	801a      	strh	r2, [r3, #0]
 800b028:	e030      	b.n	800b08c <USB_EPStartXfer+0xc82>
 800b02a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b02e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	785b      	ldrb	r3, [r3, #1]
 800b036:	2b01      	cmp	r3, #1
 800b038:	d128      	bne.n	800b08c <USB_EPStartXfer+0xc82>
 800b03a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b03e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b04c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b056:	b29b      	uxth	r3, r3
 800b058:	461a      	mov	r2, r3
 800b05a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b05e:	4413      	add	r3, r2
 800b060:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	00da      	lsls	r2, r3, #3
 800b072:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b076:	4413      	add	r3, r2
 800b078:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b07c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b084:	b29a      	uxth	r2, r3
 800b086:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b08a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b08c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	891b      	ldrh	r3, [r3, #8]
 800b098:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b09c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	6959      	ldr	r1, [r3, #20]
 800b0a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b0b2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b0b6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b0ba:	6800      	ldr	r0, [r0, #0]
 800b0bc:	f000 fe36 	bl	800bd2c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b0c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	009b      	lsls	r3, r3, #2
 800b0d8:	4413      	add	r3, r2
 800b0da:	881b      	ldrh	r3, [r3, #0]
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0e6:	817b      	strh	r3, [r7, #10]
 800b0e8:	897b      	ldrh	r3, [r7, #10]
 800b0ea:	f083 0310 	eor.w	r3, r3, #16
 800b0ee:	817b      	strh	r3, [r7, #10]
 800b0f0:	897b      	ldrh	r3, [r7, #10]
 800b0f2:	f083 0320 	eor.w	r3, r3, #32
 800b0f6:	817b      	strh	r3, [r7, #10]
 800b0f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	441a      	add	r2, r3
 800b112:	897b      	ldrh	r3, [r7, #10]
 800b114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b11c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b124:	b29b      	uxth	r3, r3
 800b126:	8013      	strh	r3, [r2, #0]
 800b128:	f000 bc9f 	b.w	800ba6a <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b12c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	7b1b      	ldrb	r3, [r3, #12]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f040 80ae 	bne.w	800b29a <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b13e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	699a      	ldr	r2, [r3, #24]
 800b14a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b14e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	691b      	ldr	r3, [r3, #16]
 800b156:	429a      	cmp	r2, r3
 800b158:	d917      	bls.n	800b18a <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800b15a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b15e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	691b      	ldr	r3, [r3, #16]
 800b166:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800b16a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b16e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	699a      	ldr	r2, [r3, #24]
 800b176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b17a:	1ad2      	subs	r2, r2, r3
 800b17c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	619a      	str	r2, [r3, #24]
 800b188:	e00e      	b.n	800b1a8 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800b18a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b18e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	699b      	ldr	r3, [r3, #24]
 800b196:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800b19a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b19e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b1a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b1b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1cc:	4413      	add	r3, r2
 800b1ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b1d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	00da      	lsls	r2, r3, #3
 800b1e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1e4:	4413      	add	r3, r2
 800b1e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b1ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b1ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1f2:	2b3e      	cmp	r3, #62	; 0x3e
 800b1f4:	d91d      	bls.n	800b232 <USB_EPStartXfer+0xe28>
 800b1f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1fa:	095b      	lsrs	r3, r3, #5
 800b1fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b204:	f003 031f 	and.w	r3, r3, #31
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d104      	bne.n	800b216 <USB_EPStartXfer+0xe0c>
 800b20c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b210:	3b01      	subs	r3, #1
 800b212:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b216:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	029b      	lsls	r3, r3, #10
 800b21e:	b29b      	uxth	r3, r3
 800b220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b228:	b29a      	uxth	r2, r3
 800b22a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b22e:	801a      	strh	r2, [r3, #0]
 800b230:	e3e1      	b.n	800b9f6 <USB_EPStartXfer+0x15ec>
 800b232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b236:	2b00      	cmp	r3, #0
 800b238:	d116      	bne.n	800b268 <USB_EPStartXfer+0xe5e>
 800b23a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b23e:	881b      	ldrh	r3, [r3, #0]
 800b240:	b29b      	uxth	r3, r3
 800b242:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b246:	b29a      	uxth	r2, r3
 800b248:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b24c:	801a      	strh	r2, [r3, #0]
 800b24e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b252:	881b      	ldrh	r3, [r3, #0]
 800b254:	b29b      	uxth	r3, r3
 800b256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b25a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b25e:	b29a      	uxth	r2, r3
 800b260:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b264:	801a      	strh	r2, [r3, #0]
 800b266:	e3c6      	b.n	800b9f6 <USB_EPStartXfer+0x15ec>
 800b268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b26c:	085b      	lsrs	r3, r3, #1
 800b26e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b276:	f003 0301 	and.w	r3, r3, #1
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d004      	beq.n	800b288 <USB_EPStartXfer+0xe7e>
 800b27e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b282:	3301      	adds	r3, #1
 800b284:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b288:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	029b      	lsls	r3, r3, #10
 800b290:	b29a      	uxth	r2, r3
 800b292:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b296:	801a      	strh	r2, [r3, #0]
 800b298:	e3ad      	b.n	800b9f6 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b29a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b29e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	78db      	ldrb	r3, [r3, #3]
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	f040 8200 	bne.w	800b6ac <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b2ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	785b      	ldrb	r3, [r3, #1]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	f040 8091 	bne.w	800b3e0 <USB_EPStartXfer+0xfd6>
 800b2be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b2cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	461a      	mov	r2, r3
 800b2de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b2e2:	4413      	add	r3, r2
 800b2e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b2e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	00da      	lsls	r2, r3, #3
 800b2f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b2fa:	4413      	add	r3, r2
 800b2fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b300:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	691b      	ldr	r3, [r3, #16]
 800b310:	2b3e      	cmp	r3, #62	; 0x3e
 800b312:	d925      	bls.n	800b360 <USB_EPStartXfer+0xf56>
 800b314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	691b      	ldr	r3, [r3, #16]
 800b320:	095b      	lsrs	r3, r3, #5
 800b322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b32a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	691b      	ldr	r3, [r3, #16]
 800b332:	f003 031f 	and.w	r3, r3, #31
 800b336:	2b00      	cmp	r3, #0
 800b338:	d104      	bne.n	800b344 <USB_EPStartXfer+0xf3a>
 800b33a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b33e:	3b01      	subs	r3, #1
 800b340:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b348:	b29b      	uxth	r3, r3
 800b34a:	029b      	lsls	r3, r3, #10
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b356:	b29a      	uxth	r2, r3
 800b358:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b35c:	801a      	strh	r2, [r3, #0]
 800b35e:	e074      	b.n	800b44a <USB_EPStartXfer+0x1040>
 800b360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d116      	bne.n	800b39e <USB_EPStartXfer+0xf94>
 800b370:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b374:	881b      	ldrh	r3, [r3, #0]
 800b376:	b29b      	uxth	r3, r3
 800b378:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b37c:	b29a      	uxth	r2, r3
 800b37e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b382:	801a      	strh	r2, [r3, #0]
 800b384:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b388:	881b      	ldrh	r3, [r3, #0]
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b394:	b29a      	uxth	r2, r3
 800b396:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b39a:	801a      	strh	r2, [r3, #0]
 800b39c:	e055      	b.n	800b44a <USB_EPStartXfer+0x1040>
 800b39e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	085b      	lsrs	r3, r3, #1
 800b3ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b3b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	691b      	ldr	r3, [r3, #16]
 800b3bc:	f003 0301 	and.w	r3, r3, #1
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d004      	beq.n	800b3ce <USB_EPStartXfer+0xfc4>
 800b3c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b3ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	029b      	lsls	r3, r3, #10
 800b3d6:	b29a      	uxth	r2, r3
 800b3d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3dc:	801a      	strh	r2, [r3, #0]
 800b3de:	e034      	b.n	800b44a <USB_EPStartXfer+0x1040>
 800b3e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	785b      	ldrb	r3, [r3, #1]
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d12c      	bne.n	800b44a <USB_EPStartXfer+0x1040>
 800b3f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b3fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b402:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	461a      	mov	r2, r3
 800b410:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b414:	4413      	add	r3, r2
 800b416:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b41a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b41e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	00da      	lsls	r2, r3, #3
 800b428:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b42c:	4413      	add	r3, r2
 800b42e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b432:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b43a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	691b      	ldr	r3, [r3, #16]
 800b442:	b29a      	uxth	r2, r3
 800b444:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b448:	801a      	strh	r2, [r3, #0]
 800b44a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b44e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b45c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	785b      	ldrb	r3, [r3, #1]
 800b464:	2b00      	cmp	r3, #0
 800b466:	f040 8091 	bne.w	800b58c <USB_EPStartXfer+0x1182>
 800b46a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b46e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b47c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b486:	b29b      	uxth	r3, r3
 800b488:	461a      	mov	r2, r3
 800b48a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b48e:	4413      	add	r3, r2
 800b490:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	00da      	lsls	r2, r3, #3
 800b4a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b4a6:	4413      	add	r3, r2
 800b4a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b4ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b4b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	2b3e      	cmp	r3, #62	; 0x3e
 800b4be:	d925      	bls.n	800b50c <USB_EPStartXfer+0x1102>
 800b4c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	691b      	ldr	r3, [r3, #16]
 800b4cc:	095b      	lsrs	r3, r3, #5
 800b4ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b4d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	691b      	ldr	r3, [r3, #16]
 800b4de:	f003 031f 	and.w	r3, r3, #31
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d104      	bne.n	800b4f0 <USB_EPStartXfer+0x10e6>
 800b4e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4ea:	3b01      	subs	r3, #1
 800b4ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b4f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	029b      	lsls	r3, r3, #10
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b502:	b29a      	uxth	r2, r3
 800b504:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b508:	801a      	strh	r2, [r3, #0]
 800b50a:	e06d      	b.n	800b5e8 <USB_EPStartXfer+0x11de>
 800b50c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	691b      	ldr	r3, [r3, #16]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d116      	bne.n	800b54a <USB_EPStartXfer+0x1140>
 800b51c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b520:	881b      	ldrh	r3, [r3, #0]
 800b522:	b29b      	uxth	r3, r3
 800b524:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b528:	b29a      	uxth	r2, r3
 800b52a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b52e:	801a      	strh	r2, [r3, #0]
 800b530:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b534:	881b      	ldrh	r3, [r3, #0]
 800b536:	b29b      	uxth	r3, r3
 800b538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b53c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b540:	b29a      	uxth	r2, r3
 800b542:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b546:	801a      	strh	r2, [r3, #0]
 800b548:	e04e      	b.n	800b5e8 <USB_EPStartXfer+0x11de>
 800b54a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b54e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	085b      	lsrs	r3, r3, #1
 800b558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b55c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	691b      	ldr	r3, [r3, #16]
 800b568:	f003 0301 	and.w	r3, r3, #1
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d004      	beq.n	800b57a <USB_EPStartXfer+0x1170>
 800b570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b574:	3301      	adds	r3, #1
 800b576:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b57a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b57e:	b29b      	uxth	r3, r3
 800b580:	029b      	lsls	r3, r3, #10
 800b582:	b29a      	uxth	r2, r3
 800b584:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b588:	801a      	strh	r2, [r3, #0]
 800b58a:	e02d      	b.n	800b5e8 <USB_EPStartXfer+0x11de>
 800b58c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	785b      	ldrb	r3, [r3, #1]
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d125      	bne.n	800b5e8 <USB_EPStartXfer+0x11de>
 800b59c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b5b2:	4413      	add	r3, r2
 800b5b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b5b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	00da      	lsls	r2, r3, #3
 800b5c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b5ca:	4413      	add	r3, r2
 800b5cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b5d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b5d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	691b      	ldr	r3, [r3, #16]
 800b5e0:	b29a      	uxth	r2, r3
 800b5e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b5e6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b5e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	69db      	ldr	r3, [r3, #28]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f000 81fe 	beq.w	800b9f6 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b5fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	4413      	add	r3, r2
 800b614:	881b      	ldrh	r3, [r3, #0]
 800b616:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b61a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b61e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b622:	2b00      	cmp	r3, #0
 800b624:	d005      	beq.n	800b632 <USB_EPStartXfer+0x1228>
 800b626:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b62a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d10d      	bne.n	800b64e <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b632:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	f040 81db 	bne.w	800b9f6 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b640:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b648:	2b00      	cmp	r3, #0
 800b64a:	f040 81d4 	bne.w	800b9f6 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b64e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b652:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b65c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	4413      	add	r3, r2
 800b668:	881b      	ldrh	r3, [r3, #0]
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b674:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b67c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	009b      	lsls	r3, r3, #2
 800b690:	441a      	add	r2, r3
 800b692:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b69a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b69e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	8013      	strh	r3, [r2, #0]
 800b6aa:	e1a4      	b.n	800b9f6 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b6ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	78db      	ldrb	r3, [r3, #3]
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	f040 819a 	bne.w	800b9f2 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b6be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	699a      	ldr	r2, [r3, #24]
 800b6ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d917      	bls.n	800b70a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800b6da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	691b      	ldr	r3, [r3, #16]
 800b6e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b6ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	699a      	ldr	r2, [r3, #24]
 800b6f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6fa:	1ad2      	subs	r2, r2, r3
 800b6fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	619a      	str	r2, [r3, #24]
 800b708:	e00e      	b.n	800b728 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800b70a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b70e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	699b      	ldr	r3, [r3, #24]
 800b716:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b71a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b71e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	2200      	movs	r2, #0
 800b726:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b72c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	785b      	ldrb	r3, [r3, #1]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d178      	bne.n	800b82a <USB_EPStartXfer+0x1420>
 800b738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b73c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b74a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b754:	b29b      	uxth	r3, r3
 800b756:	461a      	mov	r2, r3
 800b758:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b75c:	4413      	add	r3, r2
 800b75e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	00da      	lsls	r2, r3, #3
 800b770:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b774:	4413      	add	r3, r2
 800b776:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b77a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b77e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b782:	2b3e      	cmp	r3, #62	; 0x3e
 800b784:	d91d      	bls.n	800b7c2 <USB_EPStartXfer+0x13b8>
 800b786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b78a:	095b      	lsrs	r3, r3, #5
 800b78c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b794:	f003 031f 	and.w	r3, r3, #31
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d104      	bne.n	800b7a6 <USB_EPStartXfer+0x139c>
 800b79c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b7a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	029b      	lsls	r3, r3, #10
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b7be:	801a      	strh	r2, [r3, #0]
 800b7c0:	e064      	b.n	800b88c <USB_EPStartXfer+0x1482>
 800b7c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d116      	bne.n	800b7f8 <USB_EPStartXfer+0x13ee>
 800b7ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b7ce:	881b      	ldrh	r3, [r3, #0]
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b7d6:	b29a      	uxth	r2, r3
 800b7d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b7dc:	801a      	strh	r2, [r3, #0]
 800b7de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b7e2:	881b      	ldrh	r3, [r3, #0]
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b7f4:	801a      	strh	r2, [r3, #0]
 800b7f6:	e049      	b.n	800b88c <USB_EPStartXfer+0x1482>
 800b7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7fc:	085b      	lsrs	r3, r3, #1
 800b7fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b806:	f003 0301 	and.w	r3, r3, #1
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d004      	beq.n	800b818 <USB_EPStartXfer+0x140e>
 800b80e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b812:	3301      	adds	r3, #1
 800b814:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	029b      	lsls	r3, r3, #10
 800b820:	b29a      	uxth	r2, r3
 800b822:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b826:	801a      	strh	r2, [r3, #0]
 800b828:	e030      	b.n	800b88c <USB_EPStartXfer+0x1482>
 800b82a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b82e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	785b      	ldrb	r3, [r3, #1]
 800b836:	2b01      	cmp	r3, #1
 800b838:	d128      	bne.n	800b88c <USB_EPStartXfer+0x1482>
 800b83a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b83e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b84c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b856:	b29b      	uxth	r3, r3
 800b858:	461a      	mov	r2, r3
 800b85a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b85e:	4413      	add	r3, r2
 800b860:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	00da      	lsls	r2, r3, #3
 800b872:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b876:	4413      	add	r3, r2
 800b878:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b87c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b884:	b29a      	uxth	r2, r3
 800b886:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b88a:	801a      	strh	r2, [r3, #0]
 800b88c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b890:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b89a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b89e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	785b      	ldrb	r3, [r3, #1]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d178      	bne.n	800b99c <USB_EPStartXfer+0x1592>
 800b8aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b8b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b8ce:	4413      	add	r3, r2
 800b8d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b8d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	00da      	lsls	r2, r3, #3
 800b8e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b8e6:	4413      	add	r3, r2
 800b8e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b8ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b8f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8f4:	2b3e      	cmp	r3, #62	; 0x3e
 800b8f6:	d91d      	bls.n	800b934 <USB_EPStartXfer+0x152a>
 800b8f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8fc:	095b      	lsrs	r3, r3, #5
 800b8fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b906:	f003 031f 	and.w	r3, r3, #31
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d104      	bne.n	800b918 <USB_EPStartXfer+0x150e>
 800b90e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b912:	3b01      	subs	r3, #1
 800b914:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b918:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	029b      	lsls	r3, r3, #10
 800b920:	b29b      	uxth	r3, r3
 800b922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b92a:	b29a      	uxth	r2, r3
 800b92c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b930:	801a      	strh	r2, [r3, #0]
 800b932:	e060      	b.n	800b9f6 <USB_EPStartXfer+0x15ec>
 800b934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d116      	bne.n	800b96a <USB_EPStartXfer+0x1560>
 800b93c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b940:	881b      	ldrh	r3, [r3, #0]
 800b942:	b29b      	uxth	r3, r3
 800b944:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b948:	b29a      	uxth	r2, r3
 800b94a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b94e:	801a      	strh	r2, [r3, #0]
 800b950:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b954:	881b      	ldrh	r3, [r3, #0]
 800b956:	b29b      	uxth	r3, r3
 800b958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b95c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b960:	b29a      	uxth	r2, r3
 800b962:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b966:	801a      	strh	r2, [r3, #0]
 800b968:	e045      	b.n	800b9f6 <USB_EPStartXfer+0x15ec>
 800b96a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b96e:	085b      	lsrs	r3, r3, #1
 800b970:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b978:	f003 0301 	and.w	r3, r3, #1
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d004      	beq.n	800b98a <USB_EPStartXfer+0x1580>
 800b980:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b984:	3301      	adds	r3, #1
 800b986:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b98a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b98e:	b29b      	uxth	r3, r3
 800b990:	029b      	lsls	r3, r3, #10
 800b992:	b29a      	uxth	r2, r3
 800b994:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b998:	801a      	strh	r2, [r3, #0]
 800b99a:	e02c      	b.n	800b9f6 <USB_EPStartXfer+0x15ec>
 800b99c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	785b      	ldrb	r3, [r3, #1]
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d124      	bne.n	800b9f6 <USB_EPStartXfer+0x15ec>
 800b9ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	461a      	mov	r2, r3
 800b9be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b9c2:	4413      	add	r3, r2
 800b9c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	00da      	lsls	r2, r3, #3
 800b9d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b9da:	4413      	add	r3, r2
 800b9dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b9e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e8:	b29a      	uxth	r2, r3
 800b9ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b9ee:	801a      	strh	r2, [r3, #0]
 800b9f0:	e001      	b.n	800b9f6 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e03a      	b.n	800ba6c <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b9f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	4413      	add	r3, r2
 800ba10:	881b      	ldrh	r3, [r3, #0]
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba1c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ba20:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ba24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ba28:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ba2c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ba30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ba34:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ba38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	441a      	add	r2, r3
 800ba52:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ba56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ba6a:	2300      	movs	r3, #0
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ba76:	b480      	push	{r7}
 800ba78:	b085      	sub	sp, #20
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
 800ba7e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	785b      	ldrb	r3, [r3, #1]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d020      	beq.n	800baca <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	009b      	lsls	r3, r3, #2
 800ba90:	4413      	add	r3, r2
 800ba92:	881b      	ldrh	r3, [r3, #0]
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba9e:	81bb      	strh	r3, [r7, #12]
 800baa0:	89bb      	ldrh	r3, [r7, #12]
 800baa2:	f083 0310 	eor.w	r3, r3, #16
 800baa6:	81bb      	strh	r3, [r7, #12]
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	441a      	add	r2, r3
 800bab2:	89bb      	ldrh	r3, [r7, #12]
 800bab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800babc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	8013      	strh	r3, [r2, #0]
 800bac8:	e01f      	b.n	800bb0a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	4413      	add	r3, r2
 800bad4:	881b      	ldrh	r3, [r3, #0]
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800badc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bae0:	81fb      	strh	r3, [r7, #14]
 800bae2:	89fb      	ldrh	r3, [r7, #14]
 800bae4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bae8:	81fb      	strh	r3, [r7, #14]
 800baea:	687a      	ldr	r2, [r7, #4]
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	441a      	add	r2, r3
 800baf4:	89fb      	ldrh	r3, [r7, #14]
 800baf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bafa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bafe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bb0a:	2300      	movs	r3, #0
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3714      	adds	r7, #20
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b087      	sub	sp, #28
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	7b1b      	ldrb	r3, [r3, #12]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f040 809d 	bne.w	800bc66 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	785b      	ldrb	r3, [r3, #1]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d04c      	beq.n	800bbce <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	4413      	add	r3, r2
 800bb3e:	881b      	ldrh	r3, [r3, #0]
 800bb40:	823b      	strh	r3, [r7, #16]
 800bb42:	8a3b      	ldrh	r3, [r7, #16]
 800bb44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d01b      	beq.n	800bb84 <USB_EPClearStall+0x6c>
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	4413      	add	r3, r2
 800bb56:	881b      	ldrh	r3, [r3, #0]
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb62:	81fb      	strh	r3, [r7, #14]
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	009b      	lsls	r3, r3, #2
 800bb6c:	441a      	add	r2, r3
 800bb6e:	89fb      	ldrh	r3, [r7, #14]
 800bb70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	78db      	ldrb	r3, [r3, #3]
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d06c      	beq.n	800bc66 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	4413      	add	r3, r2
 800bb96:	881b      	ldrh	r3, [r3, #0]
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bba2:	81bb      	strh	r3, [r7, #12]
 800bba4:	89bb      	ldrh	r3, [r7, #12]
 800bba6:	f083 0320 	eor.w	r3, r3, #32
 800bbaa:	81bb      	strh	r3, [r7, #12]
 800bbac:	687a      	ldr	r2, [r7, #4]
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	009b      	lsls	r3, r3, #2
 800bbb4:	441a      	add	r2, r3
 800bbb6:	89bb      	ldrh	r3, [r7, #12]
 800bbb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbc8:	b29b      	uxth	r3, r3
 800bbca:	8013      	strh	r3, [r2, #0]
 800bbcc:	e04b      	b.n	800bc66 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bbce:	687a      	ldr	r2, [r7, #4]
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	4413      	add	r3, r2
 800bbd8:	881b      	ldrh	r3, [r3, #0]
 800bbda:	82fb      	strh	r3, [r7, #22]
 800bbdc:	8afb      	ldrh	r3, [r7, #22]
 800bbde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d01b      	beq.n	800bc1e <USB_EPClearStall+0x106>
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	4413      	add	r3, r2
 800bbf0:	881b      	ldrh	r3, [r3, #0]
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbfc:	82bb      	strh	r3, [r7, #20]
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	441a      	add	r2, r3
 800bc08:	8abb      	ldrh	r3, [r7, #20]
 800bc0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bc16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	009b      	lsls	r3, r3, #2
 800bc26:	4413      	add	r3, r2
 800bc28:	881b      	ldrh	r3, [r3, #0]
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc34:	827b      	strh	r3, [r7, #18]
 800bc36:	8a7b      	ldrh	r3, [r7, #18]
 800bc38:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bc3c:	827b      	strh	r3, [r7, #18]
 800bc3e:	8a7b      	ldrh	r3, [r7, #18]
 800bc40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bc44:	827b      	strh	r3, [r7, #18]
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	009b      	lsls	r3, r3, #2
 800bc4e:	441a      	add	r2, r3
 800bc50:	8a7b      	ldrh	r3, [r7, #18]
 800bc52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800bc66:	2300      	movs	r3, #0
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	371c      	adds	r7, #28
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800bc80:	78fb      	ldrb	r3, [r7, #3]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d103      	bne.n	800bc8e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2280      	movs	r2, #128	; 0x80
 800bc8a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800bc8e:	2300      	movs	r3, #0
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	370c      	adds	r7, #12
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr

0800bc9c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b083      	sub	sp, #12
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcb4:	b29a      	uxth	r2, r3
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800bcbc:	2300      	movs	r3, #0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	370c      	adds	r7, #12
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800bcca:	b480      	push	{r7}
 800bccc:	b083      	sub	sp, #12
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800bcde:	b29a      	uxth	r2, r3
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800bce6:	2300      	movs	r3, #0
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	370c      	adds	r7, #12
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bd02:	b29b      	uxth	r3, r3
 800bd04:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bd06:	68fb      	ldr	r3, [r7, #12]
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3714      	adds	r7, #20
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800bd1e:	2300      	movs	r3, #0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	370c      	adds	r7, #12
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr

0800bd2c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b08b      	sub	sp, #44	; 0x2c
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	4611      	mov	r1, r2
 800bd38:	461a      	mov	r2, r3
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	80fb      	strh	r3, [r7, #6]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bd42:	88bb      	ldrh	r3, [r7, #4]
 800bd44:	3301      	adds	r3, #1
 800bd46:	085b      	lsrs	r3, r3, #1
 800bd48:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bd52:	88fa      	ldrh	r2, [r7, #6]
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	4413      	add	r3, r2
 800bd58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd5c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bd5e:	69bb      	ldr	r3, [r7, #24]
 800bd60:	627b      	str	r3, [r7, #36]	; 0x24
 800bd62:	e01b      	b.n	800bd9c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800bd64:	69fb      	ldr	r3, [r7, #28]
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	021b      	lsls	r3, r3, #8
 800bd72:	b21a      	sxth	r2, r3
 800bd74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd78:	4313      	orrs	r3, r2
 800bd7a:	b21b      	sxth	r3, r3
 800bd7c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800bd7e:	6a3b      	ldr	r3, [r7, #32]
 800bd80:	8a7a      	ldrh	r2, [r7, #18]
 800bd82:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bd84:	6a3b      	ldr	r3, [r7, #32]
 800bd86:	3302      	adds	r3, #2
 800bd88:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800bd8a:	69fb      	ldr	r3, [r7, #28]
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800bd90:	69fb      	ldr	r3, [r7, #28]
 800bd92:	3301      	adds	r3, #1
 800bd94:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd98:	3b01      	subs	r3, #1
 800bd9a:	627b      	str	r3, [r7, #36]	; 0x24
 800bd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d1e0      	bne.n	800bd64 <USB_WritePMA+0x38>
  }
}
 800bda2:	bf00      	nop
 800bda4:	bf00      	nop
 800bda6:	372c      	adds	r7, #44	; 0x2c
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr

0800bdb0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b08b      	sub	sp, #44	; 0x2c
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	60f8      	str	r0, [r7, #12]
 800bdb8:	60b9      	str	r1, [r7, #8]
 800bdba:	4611      	mov	r1, r2
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	80fb      	strh	r3, [r7, #6]
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bdc6:	88bb      	ldrh	r3, [r7, #4]
 800bdc8:	085b      	lsrs	r3, r3, #1
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bdd6:	88fa      	ldrh	r2, [r7, #6]
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	4413      	add	r3, r2
 800bddc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bde0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bde2:	69bb      	ldr	r3, [r7, #24]
 800bde4:	627b      	str	r3, [r7, #36]	; 0x24
 800bde6:	e018      	b.n	800be1a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800bde8:	6a3b      	ldr	r3, [r7, #32]
 800bdea:	881b      	ldrh	r3, [r3, #0]
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bdf0:	6a3b      	ldr	r3, [r7, #32]
 800bdf2:	3302      	adds	r3, #2
 800bdf4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	b2da      	uxtb	r2, r3
 800bdfa:	69fb      	ldr	r3, [r7, #28]
 800bdfc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	3301      	adds	r3, #1
 800be02:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	0a1b      	lsrs	r3, r3, #8
 800be08:	b2da      	uxtb	r2, r3
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800be0e:	69fb      	ldr	r3, [r7, #28]
 800be10:	3301      	adds	r3, #1
 800be12:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800be14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be16:	3b01      	subs	r3, #1
 800be18:	627b      	str	r3, [r7, #36]	; 0x24
 800be1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d1e3      	bne.n	800bde8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800be20:	88bb      	ldrh	r3, [r7, #4]
 800be22:	f003 0301 	and.w	r3, r3, #1
 800be26:	b29b      	uxth	r3, r3
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d007      	beq.n	800be3c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800be2c:	6a3b      	ldr	r3, [r7, #32]
 800be2e:	881b      	ldrh	r3, [r3, #0]
 800be30:	b29b      	uxth	r3, r3
 800be32:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	b2da      	uxtb	r2, r3
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	701a      	strb	r2, [r3, #0]
  }
}
 800be3c:	bf00      	nop
 800be3e:	372c      	adds	r7, #44	; 0x2c
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	460b      	mov	r3, r1
 800be52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800be54:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800be58:	f002 f9d2 	bl	800e200 <USBD_static_malloc>
 800be5c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d105      	bne.n	800be70 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2200      	movs	r2, #0
 800be68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800be6c:	2302      	movs	r3, #2
 800be6e:	e066      	b.n	800bf3e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	68fa      	ldr	r2, [r7, #12]
 800be74:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	7c1b      	ldrb	r3, [r3, #16]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d119      	bne.n	800beb4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800be80:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be84:	2202      	movs	r2, #2
 800be86:	2181      	movs	r1, #129	; 0x81
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f001 ffbb 	bl	800de04 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2201      	movs	r2, #1
 800be92:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800be94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be98:	2202      	movs	r2, #2
 800be9a:	2101      	movs	r1, #1
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f001 ffb1 	bl	800de04 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2201      	movs	r2, #1
 800bea6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2210      	movs	r2, #16
 800beae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800beb2:	e016      	b.n	800bee2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800beb4:	2340      	movs	r3, #64	; 0x40
 800beb6:	2202      	movs	r2, #2
 800beb8:	2181      	movs	r1, #129	; 0x81
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f001 ffa2 	bl	800de04 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2201      	movs	r2, #1
 800bec4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bec6:	2340      	movs	r3, #64	; 0x40
 800bec8:	2202      	movs	r2, #2
 800beca:	2101      	movs	r1, #1
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f001 ff99 	bl	800de04 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2201      	movs	r2, #1
 800bed6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2210      	movs	r2, #16
 800bede:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bee2:	2308      	movs	r3, #8
 800bee4:	2203      	movs	r2, #3
 800bee6:	2182      	movs	r1, #130	; 0x82
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f001 ff8b 	bl	800de04 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2201      	movs	r2, #1
 800bef2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2200      	movs	r2, #0
 800bf04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	7c1b      	ldrb	r3, [r3, #16]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d109      	bne.n	800bf2c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf22:	2101      	movs	r1, #1
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f002 f8e9 	bl	800e0fc <USBD_LL_PrepareReceive>
 800bf2a:	e007      	b.n	800bf3c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf32:	2340      	movs	r3, #64	; 0x40
 800bf34:	2101      	movs	r1, #1
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f002 f8e0 	bl	800e0fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}

0800bf46 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf46:	b580      	push	{r7, lr}
 800bf48:	b082      	sub	sp, #8
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
 800bf4e:	460b      	mov	r3, r1
 800bf50:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bf52:	2181      	movs	r1, #129	; 0x81
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f001 ff93 	bl	800de80 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bf60:	2101      	movs	r1, #1
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f001 ff8c 	bl	800de80 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bf70:	2182      	movs	r1, #130	; 0x82
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f001 ff84 	bl	800de80 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2200      	movs	r2, #0
 800bf84:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d00e      	beq.n	800bfb0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f002 f93a 	bl	800e21c <USBD_static_free>
    pdev->pClassData = NULL;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bfb0:	2300      	movs	r3, #0
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3708      	adds	r7, #8
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
	...

0800bfbc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b086      	sub	sp, #24
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfcc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d101      	bne.n	800bfe4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800bfe0:	2303      	movs	r3, #3
 800bfe2:	e0af      	b.n	800c144 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d03f      	beq.n	800c070 <USBD_CDC_Setup+0xb4>
 800bff0:	2b20      	cmp	r3, #32
 800bff2:	f040 809f 	bne.w	800c134 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	88db      	ldrh	r3, [r3, #6]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d02e      	beq.n	800c05c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	b25b      	sxtb	r3, r3
 800c004:	2b00      	cmp	r3, #0
 800c006:	da16      	bge.n	800c036 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	683a      	ldr	r2, [r7, #0]
 800c012:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c014:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c016:	683a      	ldr	r2, [r7, #0]
 800c018:	88d2      	ldrh	r2, [r2, #6]
 800c01a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	88db      	ldrh	r3, [r3, #6]
 800c020:	2b07      	cmp	r3, #7
 800c022:	bf28      	it	cs
 800c024:	2307      	movcs	r3, #7
 800c026:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	89fa      	ldrh	r2, [r7, #14]
 800c02c:	4619      	mov	r1, r3
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f001 facf 	bl	800d5d2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c034:	e085      	b.n	800c142 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	785a      	ldrb	r2, [r3, #1]
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	88db      	ldrh	r3, [r3, #6]
 800c044:	b2da      	uxtb	r2, r3
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c04c:	6939      	ldr	r1, [r7, #16]
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	88db      	ldrh	r3, [r3, #6]
 800c052:	461a      	mov	r2, r3
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f001 fae8 	bl	800d62a <USBD_CtlPrepareRx>
      break;
 800c05a:	e072      	b.n	800c142 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	683a      	ldr	r2, [r7, #0]
 800c066:	7850      	ldrb	r0, [r2, #1]
 800c068:	2200      	movs	r2, #0
 800c06a:	6839      	ldr	r1, [r7, #0]
 800c06c:	4798      	blx	r3
      break;
 800c06e:	e068      	b.n	800c142 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	785b      	ldrb	r3, [r3, #1]
 800c074:	2b0b      	cmp	r3, #11
 800c076:	d852      	bhi.n	800c11e <USBD_CDC_Setup+0x162>
 800c078:	a201      	add	r2, pc, #4	; (adr r2, 800c080 <USBD_CDC_Setup+0xc4>)
 800c07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c07e:	bf00      	nop
 800c080:	0800c0b1 	.word	0x0800c0b1
 800c084:	0800c12d 	.word	0x0800c12d
 800c088:	0800c11f 	.word	0x0800c11f
 800c08c:	0800c11f 	.word	0x0800c11f
 800c090:	0800c11f 	.word	0x0800c11f
 800c094:	0800c11f 	.word	0x0800c11f
 800c098:	0800c11f 	.word	0x0800c11f
 800c09c:	0800c11f 	.word	0x0800c11f
 800c0a0:	0800c11f 	.word	0x0800c11f
 800c0a4:	0800c11f 	.word	0x0800c11f
 800c0a8:	0800c0db 	.word	0x0800c0db
 800c0ac:	0800c105 	.word	0x0800c105
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0b6:	b2db      	uxtb	r3, r3
 800c0b8:	2b03      	cmp	r3, #3
 800c0ba:	d107      	bne.n	800c0cc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c0bc:	f107 030a 	add.w	r3, r7, #10
 800c0c0:	2202      	movs	r2, #2
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f001 fa84 	bl	800d5d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c0ca:	e032      	b.n	800c132 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c0cc:	6839      	ldr	r1, [r7, #0]
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f001 fa0e 	bl	800d4f0 <USBD_CtlError>
            ret = USBD_FAIL;
 800c0d4:	2303      	movs	r3, #3
 800c0d6:	75fb      	strb	r3, [r7, #23]
          break;
 800c0d8:	e02b      	b.n	800c132 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0e0:	b2db      	uxtb	r3, r3
 800c0e2:	2b03      	cmp	r3, #3
 800c0e4:	d107      	bne.n	800c0f6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c0e6:	f107 030d 	add.w	r3, r7, #13
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f001 fa6f 	bl	800d5d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c0f4:	e01d      	b.n	800c132 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c0f6:	6839      	ldr	r1, [r7, #0]
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f001 f9f9 	bl	800d4f0 <USBD_CtlError>
            ret = USBD_FAIL;
 800c0fe:	2303      	movs	r3, #3
 800c100:	75fb      	strb	r3, [r7, #23]
          break;
 800c102:	e016      	b.n	800c132 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c10a:	b2db      	uxtb	r3, r3
 800c10c:	2b03      	cmp	r3, #3
 800c10e:	d00f      	beq.n	800c130 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800c110:	6839      	ldr	r1, [r7, #0]
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f001 f9ec 	bl	800d4f0 <USBD_CtlError>
            ret = USBD_FAIL;
 800c118:	2303      	movs	r3, #3
 800c11a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c11c:	e008      	b.n	800c130 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c11e:	6839      	ldr	r1, [r7, #0]
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f001 f9e5 	bl	800d4f0 <USBD_CtlError>
          ret = USBD_FAIL;
 800c126:	2303      	movs	r3, #3
 800c128:	75fb      	strb	r3, [r7, #23]
          break;
 800c12a:	e002      	b.n	800c132 <USBD_CDC_Setup+0x176>
          break;
 800c12c:	bf00      	nop
 800c12e:	e008      	b.n	800c142 <USBD_CDC_Setup+0x186>
          break;
 800c130:	bf00      	nop
      }
      break;
 800c132:	e006      	b.n	800c142 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c134:	6839      	ldr	r1, [r7, #0]
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f001 f9da 	bl	800d4f0 <USBD_CtlError>
      ret = USBD_FAIL;
 800c13c:	2303      	movs	r3, #3
 800c13e:	75fb      	strb	r3, [r7, #23]
      break;
 800c140:	bf00      	nop
  }

  return (uint8_t)ret;
 800c142:	7dfb      	ldrb	r3, [r7, #23]
}
 800c144:	4618      	mov	r0, r3
 800c146:	3718      	adds	r7, #24
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	460b      	mov	r3, r1
 800c156:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c15e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c166:	2b00      	cmp	r3, #0
 800c168:	d101      	bne.n	800c16e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c16a:	2303      	movs	r3, #3
 800c16c:	e04f      	b.n	800c20e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c174:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c176:	78fa      	ldrb	r2, [r7, #3]
 800c178:	6879      	ldr	r1, [r7, #4]
 800c17a:	4613      	mov	r3, r2
 800c17c:	009b      	lsls	r3, r3, #2
 800c17e:	4413      	add	r3, r2
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	440b      	add	r3, r1
 800c184:	3318      	adds	r3, #24
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d029      	beq.n	800c1e0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c18c:	78fa      	ldrb	r2, [r7, #3]
 800c18e:	6879      	ldr	r1, [r7, #4]
 800c190:	4613      	mov	r3, r2
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	4413      	add	r3, r2
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	440b      	add	r3, r1
 800c19a:	3318      	adds	r3, #24
 800c19c:	681a      	ldr	r2, [r3, #0]
 800c19e:	78f9      	ldrb	r1, [r7, #3]
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	440b      	add	r3, r1
 800c1a8:	00db      	lsls	r3, r3, #3
 800c1aa:	4403      	add	r3, r0
 800c1ac:	333c      	adds	r3, #60	; 0x3c
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	fbb2 f1f3 	udiv	r1, r2, r3
 800c1b4:	fb01 f303 	mul.w	r3, r1, r3
 800c1b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d110      	bne.n	800c1e0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c1be:	78fa      	ldrb	r2, [r7, #3]
 800c1c0:	6879      	ldr	r1, [r7, #4]
 800c1c2:	4613      	mov	r3, r2
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	4413      	add	r3, r2
 800c1c8:	009b      	lsls	r3, r3, #2
 800c1ca:	440b      	add	r3, r1
 800c1cc:	3318      	adds	r3, #24
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c1d2:	78f9      	ldrb	r1, [r7, #3]
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f001 ff57 	bl	800e08c <USBD_LL_Transmit>
 800c1de:	e015      	b.n	800c20c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c1ee:	691b      	ldr	r3, [r3, #16]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d00b      	beq.n	800c20c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c1fa:	691b      	ldr	r3, [r3, #16]
 800c1fc:	68ba      	ldr	r2, [r7, #8]
 800c1fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c202:	68ba      	ldr	r2, [r7, #8]
 800c204:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c208:	78fa      	ldrb	r2, [r7, #3]
 800c20a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c20c:	2300      	movs	r3, #0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}

0800c216 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b084      	sub	sp, #16
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
 800c21e:	460b      	mov	r3, r1
 800c220:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c228:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c230:	2b00      	cmp	r3, #0
 800c232:	d101      	bne.n	800c238 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c234:	2303      	movs	r3, #3
 800c236:	e015      	b.n	800c264 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c238:	78fb      	ldrb	r3, [r7, #3]
 800c23a:	4619      	mov	r1, r3
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f001 ff95 	bl	800e16c <USBD_LL_GetRxDataSize>
 800c242:	4602      	mov	r2, r0
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c25e:	4611      	mov	r1, r2
 800c260:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c262:	2300      	movs	r3, #0
}
 800c264:	4618      	mov	r0, r3
 800c266:	3710      	adds	r7, #16
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c27a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d101      	bne.n	800c286 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c282:	2303      	movs	r3, #3
 800c284:	e01b      	b.n	800c2be <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d015      	beq.n	800c2bc <USBD_CDC_EP0_RxReady+0x50>
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c296:	2bff      	cmp	r3, #255	; 0xff
 800c298:	d010      	beq.n	800c2bc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2a0:	689b      	ldr	r3, [r3, #8]
 800c2a2:	68fa      	ldr	r2, [r7, #12]
 800c2a4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c2a8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c2aa:	68fa      	ldr	r2, [r7, #12]
 800c2ac:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c2b0:	b292      	uxth	r2, r2
 800c2b2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	22ff      	movs	r2, #255	; 0xff
 800c2b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c2bc:	2300      	movs	r3, #0
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3710      	adds	r7, #16
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
	...

0800c2c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b083      	sub	sp, #12
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2243      	movs	r2, #67	; 0x43
 800c2d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c2d6:	4b03      	ldr	r3, [pc, #12]	; (800c2e4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	370c      	adds	r7, #12
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr
 800c2e4:	20000094 	.word	0x20000094

0800c2e8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2243      	movs	r2, #67	; 0x43
 800c2f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c2f6:	4b03      	ldr	r3, [pc, #12]	; (800c304 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	370c      	adds	r7, #12
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr
 800c304:	20000050 	.word	0x20000050

0800c308 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c308:	b480      	push	{r7}
 800c30a:	b083      	sub	sp, #12
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2243      	movs	r2, #67	; 0x43
 800c314:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c316:	4b03      	ldr	r3, [pc, #12]	; (800c324 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c318:	4618      	mov	r0, r3
 800c31a:	370c      	adds	r7, #12
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr
 800c324:	200000d8 	.word	0x200000d8

0800c328 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	220a      	movs	r2, #10
 800c334:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c336:	4b03      	ldr	r3, [pc, #12]	; (800c344 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c338:	4618      	mov	r0, r3
 800c33a:	370c      	adds	r7, #12
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr
 800c344:	2000000c 	.word	0x2000000c

0800c348 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d101      	bne.n	800c35c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c358:	2303      	movs	r3, #3
 800c35a:	e004      	b.n	800c366 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	683a      	ldr	r2, [r7, #0]
 800c360:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c364:	2300      	movs	r3, #0
}
 800c366:	4618      	mov	r0, r3
 800c368:	370c      	adds	r7, #12
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr

0800c372 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c372:	b480      	push	{r7}
 800c374:	b087      	sub	sp, #28
 800c376:	af00      	add	r7, sp, #0
 800c378:	60f8      	str	r0, [r7, #12]
 800c37a:	60b9      	str	r1, [r7, #8]
 800c37c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c384:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d101      	bne.n	800c390 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c38c:	2303      	movs	r3, #3
 800c38e:	e008      	b.n	800c3a2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	68ba      	ldr	r2, [r7, #8]
 800c394:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c3a0:	2300      	movs	r3, #0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	371c      	adds	r7, #28
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr

0800c3ae <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c3ae:	b480      	push	{r7}
 800c3b0:	b085      	sub	sp, #20
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
 800c3b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d101      	bne.n	800c3ca <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c3c6:	2303      	movs	r3, #3
 800c3c8:	e004      	b.n	800c3d4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	683a      	ldr	r2, [r7, #0]
 800c3ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c3d2:	2300      	movs	r3, #0
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3714      	adds	r7, #20
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3ee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d101      	bne.n	800c402 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c3fe:	2303      	movs	r3, #3
 800c400:	e01a      	b.n	800c438 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d114      	bne.n	800c436 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	2201      	movs	r2, #1
 800c410:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c42a:	2181      	movs	r1, #129	; 0x81
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f001 fe2d 	bl	800e08c <USBD_LL_Transmit>

    ret = USBD_OK;
 800c432:	2300      	movs	r3, #0
 800c434:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c436:	7bfb      	ldrb	r3, [r7, #15]
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3710      	adds	r7, #16
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c44e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c456:	2b00      	cmp	r3, #0
 800c458:	d101      	bne.n	800c45e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c45a:	2303      	movs	r3, #3
 800c45c:	e016      	b.n	800c48c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	7c1b      	ldrb	r3, [r3, #16]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d109      	bne.n	800c47a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c46c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c470:	2101      	movs	r1, #1
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f001 fe42 	bl	800e0fc <USBD_LL_PrepareReceive>
 800c478:	e007      	b.n	800c48a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c480:	2340      	movs	r3, #64	; 0x40
 800c482:	2101      	movs	r1, #1
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f001 fe39 	bl	800e0fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c48a:	2300      	movs	r3, #0
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3710      	adds	r7, #16
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b086      	sub	sp, #24
 800c498:	af00      	add	r7, sp, #0
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	60b9      	str	r1, [r7, #8]
 800c49e:	4613      	mov	r3, r2
 800c4a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d101      	bne.n	800c4ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c4a8:	2303      	movs	r3, #3
 800c4aa:	e01f      	b.n	800c4ec <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d003      	beq.n	800c4d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	68ba      	ldr	r2, [r7, #8]
 800c4ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	79fa      	ldrb	r2, [r7, #7]
 800c4de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f001 fbfb 	bl	800dcdc <USBD_LL_Init>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c4ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3718      	adds	r7, #24
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}

0800c4f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c4fe:	2300      	movs	r3, #0
 800c500:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d101      	bne.n	800c50c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c508:	2303      	movs	r3, #3
 800c50a:	e016      	b.n	800c53a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	683a      	ldr	r2, [r7, #0]
 800c510:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d00b      	beq.n	800c538 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c528:	f107 020e 	add.w	r2, r7, #14
 800c52c:	4610      	mov	r0, r2
 800c52e:	4798      	blx	r3
 800c530:	4602      	mov	r2, r0
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c538:	2300      	movs	r3, #0
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3710      	adds	r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c542:	b580      	push	{r7, lr}
 800c544:	b082      	sub	sp, #8
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f001 fc28 	bl	800dda0 <USBD_LL_Start>
 800c550:	4603      	mov	r3, r0
}
 800c552:	4618      	mov	r0, r3
 800c554:	3708      	adds	r7, #8
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}

0800c55a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c55a:	b480      	push	{r7}
 800c55c:	b083      	sub	sp, #12
 800c55e:	af00      	add	r7, sp, #0
 800c560:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c562:	2300      	movs	r3, #0
}
 800c564:	4618      	mov	r0, r3
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	460b      	mov	r3, r1
 800c57a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c57c:	2303      	movs	r3, #3
 800c57e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c586:	2b00      	cmp	r3, #0
 800c588:	d009      	beq.n	800c59e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	78fa      	ldrb	r2, [r7, #3]
 800c594:	4611      	mov	r1, r2
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	4798      	blx	r3
 800c59a:	4603      	mov	r3, r0
 800c59c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3710      	adds	r7, #16
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d007      	beq.n	800c5ce <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	78fa      	ldrb	r2, [r7, #3]
 800c5c8:	4611      	mov	r1, r2
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	4798      	blx	r3
  }

  return USBD_OK;
 800c5ce:	2300      	movs	r3, #0
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b084      	sub	sp, #16
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c5e8:	6839      	ldr	r1, [r7, #0]
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f000 ff46 	bl	800d47c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c5fe:	461a      	mov	r2, r3
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c60c:	f003 031f 	and.w	r3, r3, #31
 800c610:	2b02      	cmp	r3, #2
 800c612:	d01a      	beq.n	800c64a <USBD_LL_SetupStage+0x72>
 800c614:	2b02      	cmp	r3, #2
 800c616:	d822      	bhi.n	800c65e <USBD_LL_SetupStage+0x86>
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d002      	beq.n	800c622 <USBD_LL_SetupStage+0x4a>
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d00a      	beq.n	800c636 <USBD_LL_SetupStage+0x5e>
 800c620:	e01d      	b.n	800c65e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c628:	4619      	mov	r1, r3
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f000 f9ee 	bl	800ca0c <USBD_StdDevReq>
 800c630:	4603      	mov	r3, r0
 800c632:	73fb      	strb	r3, [r7, #15]
      break;
 800c634:	e020      	b.n	800c678 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c63c:	4619      	mov	r1, r3
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 fa52 	bl	800cae8 <USBD_StdItfReq>
 800c644:	4603      	mov	r3, r0
 800c646:	73fb      	strb	r3, [r7, #15]
      break;
 800c648:	e016      	b.n	800c678 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c650:	4619      	mov	r1, r3
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 fa91 	bl	800cb7a <USBD_StdEPReq>
 800c658:	4603      	mov	r3, r0
 800c65a:	73fb      	strb	r3, [r7, #15]
      break;
 800c65c:	e00c      	b.n	800c678 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c664:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	4619      	mov	r1, r3
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f001 fc3d 	bl	800deec <USBD_LL_StallEP>
 800c672:	4603      	mov	r3, r0
 800c674:	73fb      	strb	r3, [r7, #15]
      break;
 800c676:	bf00      	nop
  }

  return ret;
 800c678:	7bfb      	ldrb	r3, [r7, #15]
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3710      	adds	r7, #16
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c682:	b580      	push	{r7, lr}
 800c684:	b086      	sub	sp, #24
 800c686:	af00      	add	r7, sp, #0
 800c688:	60f8      	str	r0, [r7, #12]
 800c68a:	460b      	mov	r3, r1
 800c68c:	607a      	str	r2, [r7, #4]
 800c68e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c690:	7afb      	ldrb	r3, [r7, #11]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d138      	bne.n	800c708 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c69c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c6a4:	2b03      	cmp	r3, #3
 800c6a6:	d14a      	bne.n	800c73e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	689a      	ldr	r2, [r3, #8]
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	68db      	ldr	r3, [r3, #12]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d913      	bls.n	800c6dc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	689a      	ldr	r2, [r3, #8]
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	68db      	ldr	r3, [r3, #12]
 800c6bc:	1ad2      	subs	r2, r2, r3
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	68da      	ldr	r2, [r3, #12]
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	689b      	ldr	r3, [r3, #8]
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	bf28      	it	cs
 800c6ce:	4613      	movcs	r3, r2
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	6879      	ldr	r1, [r7, #4]
 800c6d4:	68f8      	ldr	r0, [r7, #12]
 800c6d6:	f000 ffc5 	bl	800d664 <USBD_CtlContinueRx>
 800c6da:	e030      	b.n	800c73e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	2b03      	cmp	r3, #3
 800c6e6:	d10b      	bne.n	800c700 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6ee:	691b      	ldr	r3, [r3, #16]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d005      	beq.n	800c700 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6fa:	691b      	ldr	r3, [r3, #16]
 800c6fc:	68f8      	ldr	r0, [r7, #12]
 800c6fe:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c700:	68f8      	ldr	r0, [r7, #12]
 800c702:	f000 ffc0 	bl	800d686 <USBD_CtlSendStatus>
 800c706:	e01a      	b.n	800c73e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	2b03      	cmp	r3, #3
 800c712:	d114      	bne.n	800c73e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c71a:	699b      	ldr	r3, [r3, #24]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d00e      	beq.n	800c73e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c726:	699b      	ldr	r3, [r3, #24]
 800c728:	7afa      	ldrb	r2, [r7, #11]
 800c72a:	4611      	mov	r1, r2
 800c72c:	68f8      	ldr	r0, [r7, #12]
 800c72e:	4798      	blx	r3
 800c730:	4603      	mov	r3, r0
 800c732:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c734:	7dfb      	ldrb	r3, [r7, #23]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d001      	beq.n	800c73e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c73a:	7dfb      	ldrb	r3, [r7, #23]
 800c73c:	e000      	b.n	800c740 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c73e:	2300      	movs	r3, #0
}
 800c740:	4618      	mov	r0, r3
 800c742:	3718      	adds	r7, #24
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}

0800c748 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b086      	sub	sp, #24
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	60f8      	str	r0, [r7, #12]
 800c750:	460b      	mov	r3, r1
 800c752:	607a      	str	r2, [r7, #4]
 800c754:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c756:	7afb      	ldrb	r3, [r7, #11]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d16b      	bne.n	800c834 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	3314      	adds	r3, #20
 800c760:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c768:	2b02      	cmp	r3, #2
 800c76a:	d156      	bne.n	800c81a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	689a      	ldr	r2, [r3, #8]
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	429a      	cmp	r2, r3
 800c776:	d914      	bls.n	800c7a2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	689a      	ldr	r2, [r3, #8]
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	68db      	ldr	r3, [r3, #12]
 800c780:	1ad2      	subs	r2, r2, r3
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	689b      	ldr	r3, [r3, #8]
 800c78a:	461a      	mov	r2, r3
 800c78c:	6879      	ldr	r1, [r7, #4]
 800c78e:	68f8      	ldr	r0, [r7, #12]
 800c790:	f000 ff3a 	bl	800d608 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c794:	2300      	movs	r3, #0
 800c796:	2200      	movs	r2, #0
 800c798:	2100      	movs	r1, #0
 800c79a:	68f8      	ldr	r0, [r7, #12]
 800c79c:	f001 fcae 	bl	800e0fc <USBD_LL_PrepareReceive>
 800c7a0:	e03b      	b.n	800c81a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	68da      	ldr	r2, [r3, #12]
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	689b      	ldr	r3, [r3, #8]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d11c      	bne.n	800c7e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	685a      	ldr	r2, [r3, #4]
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d316      	bcc.n	800c7e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	685a      	ldr	r2, [r3, #4]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d20f      	bcs.n	800c7e8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	2100      	movs	r1, #0
 800c7cc:	68f8      	ldr	r0, [r7, #12]
 800c7ce:	f000 ff1b 	bl	800d608 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c7da:	2300      	movs	r3, #0
 800c7dc:	2200      	movs	r2, #0
 800c7de:	2100      	movs	r1, #0
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f001 fc8b 	bl	800e0fc <USBD_LL_PrepareReceive>
 800c7e6:	e018      	b.n	800c81a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7ee:	b2db      	uxtb	r3, r3
 800c7f0:	2b03      	cmp	r3, #3
 800c7f2:	d10b      	bne.n	800c80c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7fa:	68db      	ldr	r3, [r3, #12]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d005      	beq.n	800c80c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	68f8      	ldr	r0, [r7, #12]
 800c80a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c80c:	2180      	movs	r1, #128	; 0x80
 800c80e:	68f8      	ldr	r0, [r7, #12]
 800c810:	f001 fb6c 	bl	800deec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c814:	68f8      	ldr	r0, [r7, #12]
 800c816:	f000 ff49 	bl	800d6ac <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c820:	2b01      	cmp	r3, #1
 800c822:	d122      	bne.n	800c86a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c824:	68f8      	ldr	r0, [r7, #12]
 800c826:	f7ff fe98 	bl	800c55a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2200      	movs	r2, #0
 800c82e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c832:	e01a      	b.n	800c86a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	2b03      	cmp	r3, #3
 800c83e:	d114      	bne.n	800c86a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c846:	695b      	ldr	r3, [r3, #20]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d00e      	beq.n	800c86a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c852:	695b      	ldr	r3, [r3, #20]
 800c854:	7afa      	ldrb	r2, [r7, #11]
 800c856:	4611      	mov	r1, r2
 800c858:	68f8      	ldr	r0, [r7, #12]
 800c85a:	4798      	blx	r3
 800c85c:	4603      	mov	r3, r0
 800c85e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c860:	7dfb      	ldrb	r3, [r7, #23]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d001      	beq.n	800c86a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c866:	7dfb      	ldrb	r3, [r7, #23]
 800c868:	e000      	b.n	800c86c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c86a:	2300      	movs	r3, #0
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3718      	adds	r7, #24
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2201      	movs	r2, #1
 800c880:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2200      	movs	r2, #0
 800c888:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d101      	bne.n	800c8a8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c8a4:	2303      	movs	r3, #3
 800c8a6:	e02f      	b.n	800c908 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d00f      	beq.n	800c8d2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d009      	beq.n	800c8d2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	6852      	ldr	r2, [r2, #4]
 800c8ca:	b2d2      	uxtb	r2, r2
 800c8cc:	4611      	mov	r1, r2
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c8d2:	2340      	movs	r3, #64	; 0x40
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	2100      	movs	r1, #0
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f001 fa93 	bl	800de04 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2240      	movs	r2, #64	; 0x40
 800c8ea:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c8ee:	2340      	movs	r3, #64	; 0x40
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	2180      	movs	r1, #128	; 0x80
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f001 fa85 	bl	800de04 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2240      	movs	r2, #64	; 0x40
 800c904:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c906:	2300      	movs	r3, #0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c910:	b480      	push	{r7}
 800c912:	b083      	sub	sp, #12
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	460b      	mov	r3, r1
 800c91a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	78fa      	ldrb	r2, [r7, #3]
 800c920:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c922:	2300      	movs	r3, #0
}
 800c924:	4618      	mov	r0, r3
 800c926:	370c      	adds	r7, #12
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr

0800c930 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c930:	b480      	push	{r7}
 800c932:	b083      	sub	sp, #12
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c93e:	b2da      	uxtb	r2, r3
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2204      	movs	r2, #4
 800c94a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c94e:	2300      	movs	r3, #0
}
 800c950:	4618      	mov	r0, r3
 800c952:	370c      	adds	r7, #12
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr

0800c95c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	2b04      	cmp	r3, #4
 800c96e:	d106      	bne.n	800c97e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c976:	b2da      	uxtb	r2, r3
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c97e:	2300      	movs	r3, #0
}
 800c980:	4618      	mov	r0, r3
 800c982:	370c      	adds	r7, #12
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d101      	bne.n	800c9a2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c99e:	2303      	movs	r3, #3
 800c9a0:	e012      	b.n	800c9c8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	2b03      	cmp	r3, #3
 800c9ac:	d10b      	bne.n	800c9c6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9b4:	69db      	ldr	r3, [r3, #28]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d005      	beq.n	800c9c6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9c0:	69db      	ldr	r3, [r3, #28]
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c9c6:	2300      	movs	r3, #0
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3708      	adds	r7, #8
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b087      	sub	sp, #28
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c9ee:	8a3b      	ldrh	r3, [r7, #16]
 800c9f0:	021b      	lsls	r3, r3, #8
 800c9f2:	b21a      	sxth	r2, r3
 800c9f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	b21b      	sxth	r3, r3
 800c9fc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c9fe:	89fb      	ldrh	r3, [r7, #14]
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	371c      	adds	r7, #28
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr

0800ca0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca16:	2300      	movs	r3, #0
 800ca18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca22:	2b40      	cmp	r3, #64	; 0x40
 800ca24:	d005      	beq.n	800ca32 <USBD_StdDevReq+0x26>
 800ca26:	2b40      	cmp	r3, #64	; 0x40
 800ca28:	d853      	bhi.n	800cad2 <USBD_StdDevReq+0xc6>
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d00b      	beq.n	800ca46 <USBD_StdDevReq+0x3a>
 800ca2e:	2b20      	cmp	r3, #32
 800ca30:	d14f      	bne.n	800cad2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	6839      	ldr	r1, [r7, #0]
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	4798      	blx	r3
 800ca40:	4603      	mov	r3, r0
 800ca42:	73fb      	strb	r3, [r7, #15]
      break;
 800ca44:	e04a      	b.n	800cadc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	785b      	ldrb	r3, [r3, #1]
 800ca4a:	2b09      	cmp	r3, #9
 800ca4c:	d83b      	bhi.n	800cac6 <USBD_StdDevReq+0xba>
 800ca4e:	a201      	add	r2, pc, #4	; (adr r2, 800ca54 <USBD_StdDevReq+0x48>)
 800ca50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca54:	0800caa9 	.word	0x0800caa9
 800ca58:	0800cabd 	.word	0x0800cabd
 800ca5c:	0800cac7 	.word	0x0800cac7
 800ca60:	0800cab3 	.word	0x0800cab3
 800ca64:	0800cac7 	.word	0x0800cac7
 800ca68:	0800ca87 	.word	0x0800ca87
 800ca6c:	0800ca7d 	.word	0x0800ca7d
 800ca70:	0800cac7 	.word	0x0800cac7
 800ca74:	0800ca9f 	.word	0x0800ca9f
 800ca78:	0800ca91 	.word	0x0800ca91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ca7c:	6839      	ldr	r1, [r7, #0]
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 f9de 	bl	800ce40 <USBD_GetDescriptor>
          break;
 800ca84:	e024      	b.n	800cad0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ca86:	6839      	ldr	r1, [r7, #0]
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 fb6d 	bl	800d168 <USBD_SetAddress>
          break;
 800ca8e:	e01f      	b.n	800cad0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ca90:	6839      	ldr	r1, [r7, #0]
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 fbac 	bl	800d1f0 <USBD_SetConfig>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	73fb      	strb	r3, [r7, #15]
          break;
 800ca9c:	e018      	b.n	800cad0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ca9e:	6839      	ldr	r1, [r7, #0]
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f000 fc4b 	bl	800d33c <USBD_GetConfig>
          break;
 800caa6:	e013      	b.n	800cad0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800caa8:	6839      	ldr	r1, [r7, #0]
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 fc7c 	bl	800d3a8 <USBD_GetStatus>
          break;
 800cab0:	e00e      	b.n	800cad0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cab2:	6839      	ldr	r1, [r7, #0]
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 fcab 	bl	800d410 <USBD_SetFeature>
          break;
 800caba:	e009      	b.n	800cad0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cabc:	6839      	ldr	r1, [r7, #0]
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 fcba 	bl	800d438 <USBD_ClrFeature>
          break;
 800cac4:	e004      	b.n	800cad0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800cac6:	6839      	ldr	r1, [r7, #0]
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f000 fd11 	bl	800d4f0 <USBD_CtlError>
          break;
 800cace:	bf00      	nop
      }
      break;
 800cad0:	e004      	b.n	800cadc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800cad2:	6839      	ldr	r1, [r7, #0]
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 fd0b 	bl	800d4f0 <USBD_CtlError>
      break;
 800cada:	bf00      	nop
  }

  return ret;
 800cadc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop

0800cae8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800caf2:	2300      	movs	r3, #0
 800caf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cafe:	2b40      	cmp	r3, #64	; 0x40
 800cb00:	d005      	beq.n	800cb0e <USBD_StdItfReq+0x26>
 800cb02:	2b40      	cmp	r3, #64	; 0x40
 800cb04:	d82f      	bhi.n	800cb66 <USBD_StdItfReq+0x7e>
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d001      	beq.n	800cb0e <USBD_StdItfReq+0x26>
 800cb0a:	2b20      	cmp	r3, #32
 800cb0c:	d12b      	bne.n	800cb66 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb14:	b2db      	uxtb	r3, r3
 800cb16:	3b01      	subs	r3, #1
 800cb18:	2b02      	cmp	r3, #2
 800cb1a:	d81d      	bhi.n	800cb58 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	889b      	ldrh	r3, [r3, #4]
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	d813      	bhi.n	800cb4e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb2c:	689b      	ldr	r3, [r3, #8]
 800cb2e:	6839      	ldr	r1, [r7, #0]
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	4798      	blx	r3
 800cb34:	4603      	mov	r3, r0
 800cb36:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	88db      	ldrh	r3, [r3, #6]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d110      	bne.n	800cb62 <USBD_StdItfReq+0x7a>
 800cb40:	7bfb      	ldrb	r3, [r7, #15]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d10d      	bne.n	800cb62 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f000 fd9d 	bl	800d686 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cb4c:	e009      	b.n	800cb62 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800cb4e:	6839      	ldr	r1, [r7, #0]
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f000 fccd 	bl	800d4f0 <USBD_CtlError>
          break;
 800cb56:	e004      	b.n	800cb62 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800cb58:	6839      	ldr	r1, [r7, #0]
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f000 fcc8 	bl	800d4f0 <USBD_CtlError>
          break;
 800cb60:	e000      	b.n	800cb64 <USBD_StdItfReq+0x7c>
          break;
 800cb62:	bf00      	nop
      }
      break;
 800cb64:	e004      	b.n	800cb70 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800cb66:	6839      	ldr	r1, [r7, #0]
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f000 fcc1 	bl	800d4f0 <USBD_CtlError>
      break;
 800cb6e:	bf00      	nop
  }

  return ret;
 800cb70:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3710      	adds	r7, #16
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}

0800cb7a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb7a:	b580      	push	{r7, lr}
 800cb7c:	b084      	sub	sp, #16
 800cb7e:	af00      	add	r7, sp, #0
 800cb80:	6078      	str	r0, [r7, #4]
 800cb82:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb84:	2300      	movs	r3, #0
 800cb86:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	889b      	ldrh	r3, [r3, #4]
 800cb8c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb96:	2b40      	cmp	r3, #64	; 0x40
 800cb98:	d007      	beq.n	800cbaa <USBD_StdEPReq+0x30>
 800cb9a:	2b40      	cmp	r3, #64	; 0x40
 800cb9c:	f200 8145 	bhi.w	800ce2a <USBD_StdEPReq+0x2b0>
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d00c      	beq.n	800cbbe <USBD_StdEPReq+0x44>
 800cba4:	2b20      	cmp	r3, #32
 800cba6:	f040 8140 	bne.w	800ce2a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbb0:	689b      	ldr	r3, [r3, #8]
 800cbb2:	6839      	ldr	r1, [r7, #0]
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	4798      	blx	r3
 800cbb8:	4603      	mov	r3, r0
 800cbba:	73fb      	strb	r3, [r7, #15]
      break;
 800cbbc:	e13a      	b.n	800ce34 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	785b      	ldrb	r3, [r3, #1]
 800cbc2:	2b03      	cmp	r3, #3
 800cbc4:	d007      	beq.n	800cbd6 <USBD_StdEPReq+0x5c>
 800cbc6:	2b03      	cmp	r3, #3
 800cbc8:	f300 8129 	bgt.w	800ce1e <USBD_StdEPReq+0x2a4>
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d07f      	beq.n	800ccd0 <USBD_StdEPReq+0x156>
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	d03c      	beq.n	800cc4e <USBD_StdEPReq+0xd4>
 800cbd4:	e123      	b.n	800ce1e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	2b02      	cmp	r3, #2
 800cbe0:	d002      	beq.n	800cbe8 <USBD_StdEPReq+0x6e>
 800cbe2:	2b03      	cmp	r3, #3
 800cbe4:	d016      	beq.n	800cc14 <USBD_StdEPReq+0x9a>
 800cbe6:	e02c      	b.n	800cc42 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbe8:	7bbb      	ldrb	r3, [r7, #14]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d00d      	beq.n	800cc0a <USBD_StdEPReq+0x90>
 800cbee:	7bbb      	ldrb	r3, [r7, #14]
 800cbf0:	2b80      	cmp	r3, #128	; 0x80
 800cbf2:	d00a      	beq.n	800cc0a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbf4:	7bbb      	ldrb	r3, [r7, #14]
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f001 f977 	bl	800deec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbfe:	2180      	movs	r1, #128	; 0x80
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f001 f973 	bl	800deec <USBD_LL_StallEP>
 800cc06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc08:	e020      	b.n	800cc4c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800cc0a:	6839      	ldr	r1, [r7, #0]
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f000 fc6f 	bl	800d4f0 <USBD_CtlError>
              break;
 800cc12:	e01b      	b.n	800cc4c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	885b      	ldrh	r3, [r3, #2]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d10e      	bne.n	800cc3a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cc1c:	7bbb      	ldrb	r3, [r7, #14]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d00b      	beq.n	800cc3a <USBD_StdEPReq+0xc0>
 800cc22:	7bbb      	ldrb	r3, [r7, #14]
 800cc24:	2b80      	cmp	r3, #128	; 0x80
 800cc26:	d008      	beq.n	800cc3a <USBD_StdEPReq+0xc0>
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	88db      	ldrh	r3, [r3, #6]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d104      	bne.n	800cc3a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc30:	7bbb      	ldrb	r3, [r7, #14]
 800cc32:	4619      	mov	r1, r3
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f001 f959 	bl	800deec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 fd23 	bl	800d686 <USBD_CtlSendStatus>

              break;
 800cc40:	e004      	b.n	800cc4c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cc42:	6839      	ldr	r1, [r7, #0]
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 fc53 	bl	800d4f0 <USBD_CtlError>
              break;
 800cc4a:	bf00      	nop
          }
          break;
 800cc4c:	e0ec      	b.n	800ce28 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	2b02      	cmp	r3, #2
 800cc58:	d002      	beq.n	800cc60 <USBD_StdEPReq+0xe6>
 800cc5a:	2b03      	cmp	r3, #3
 800cc5c:	d016      	beq.n	800cc8c <USBD_StdEPReq+0x112>
 800cc5e:	e030      	b.n	800ccc2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc60:	7bbb      	ldrb	r3, [r7, #14]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d00d      	beq.n	800cc82 <USBD_StdEPReq+0x108>
 800cc66:	7bbb      	ldrb	r3, [r7, #14]
 800cc68:	2b80      	cmp	r3, #128	; 0x80
 800cc6a:	d00a      	beq.n	800cc82 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc6c:	7bbb      	ldrb	r3, [r7, #14]
 800cc6e:	4619      	mov	r1, r3
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f001 f93b 	bl	800deec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc76:	2180      	movs	r1, #128	; 0x80
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f001 f937 	bl	800deec <USBD_LL_StallEP>
 800cc7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc80:	e025      	b.n	800ccce <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800cc82:	6839      	ldr	r1, [r7, #0]
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f000 fc33 	bl	800d4f0 <USBD_CtlError>
              break;
 800cc8a:	e020      	b.n	800ccce <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	885b      	ldrh	r3, [r3, #2]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d11b      	bne.n	800cccc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cc94:	7bbb      	ldrb	r3, [r7, #14]
 800cc96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d004      	beq.n	800cca8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cc9e:	7bbb      	ldrb	r3, [r7, #14]
 800cca0:	4619      	mov	r1, r3
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f001 f958 	bl	800df58 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 fcec 	bl	800d686 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccb4:	689b      	ldr	r3, [r3, #8]
 800ccb6:	6839      	ldr	r1, [r7, #0]
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	4798      	blx	r3
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ccc0:	e004      	b.n	800cccc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ccc2:	6839      	ldr	r1, [r7, #0]
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 fc13 	bl	800d4f0 <USBD_CtlError>
              break;
 800ccca:	e000      	b.n	800ccce <USBD_StdEPReq+0x154>
              break;
 800cccc:	bf00      	nop
          }
          break;
 800ccce:	e0ab      	b.n	800ce28 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccd6:	b2db      	uxtb	r3, r3
 800ccd8:	2b02      	cmp	r3, #2
 800ccda:	d002      	beq.n	800cce2 <USBD_StdEPReq+0x168>
 800ccdc:	2b03      	cmp	r3, #3
 800ccde:	d032      	beq.n	800cd46 <USBD_StdEPReq+0x1cc>
 800cce0:	e097      	b.n	800ce12 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cce2:	7bbb      	ldrb	r3, [r7, #14]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d007      	beq.n	800ccf8 <USBD_StdEPReq+0x17e>
 800cce8:	7bbb      	ldrb	r3, [r7, #14]
 800ccea:	2b80      	cmp	r3, #128	; 0x80
 800ccec:	d004      	beq.n	800ccf8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ccee:	6839      	ldr	r1, [r7, #0]
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f000 fbfd 	bl	800d4f0 <USBD_CtlError>
                break;
 800ccf6:	e091      	b.n	800ce1c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	da0b      	bge.n	800cd18 <USBD_StdEPReq+0x19e>
 800cd00:	7bbb      	ldrb	r3, [r7, #14]
 800cd02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd06:	4613      	mov	r3, r2
 800cd08:	009b      	lsls	r3, r3, #2
 800cd0a:	4413      	add	r3, r2
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	3310      	adds	r3, #16
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	4413      	add	r3, r2
 800cd14:	3304      	adds	r3, #4
 800cd16:	e00b      	b.n	800cd30 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cd18:	7bbb      	ldrb	r3, [r7, #14]
 800cd1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd1e:	4613      	mov	r3, r2
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	4413      	add	r3, r2
 800cd24:	009b      	lsls	r3, r3, #2
 800cd26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	3304      	adds	r3, #4
 800cd30:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	2200      	movs	r2, #0
 800cd36:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	2202      	movs	r2, #2
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f000 fc47 	bl	800d5d2 <USBD_CtlSendData>
              break;
 800cd44:	e06a      	b.n	800ce1c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cd46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	da11      	bge.n	800cd72 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cd4e:	7bbb      	ldrb	r3, [r7, #14]
 800cd50:	f003 020f 	and.w	r2, r3, #15
 800cd54:	6879      	ldr	r1, [r7, #4]
 800cd56:	4613      	mov	r3, r2
 800cd58:	009b      	lsls	r3, r3, #2
 800cd5a:	4413      	add	r3, r2
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	440b      	add	r3, r1
 800cd60:	3324      	adds	r3, #36	; 0x24
 800cd62:	881b      	ldrh	r3, [r3, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d117      	bne.n	800cd98 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cd68:	6839      	ldr	r1, [r7, #0]
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 fbc0 	bl	800d4f0 <USBD_CtlError>
                  break;
 800cd70:	e054      	b.n	800ce1c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cd72:	7bbb      	ldrb	r3, [r7, #14]
 800cd74:	f003 020f 	and.w	r2, r3, #15
 800cd78:	6879      	ldr	r1, [r7, #4]
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	4413      	add	r3, r2
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	440b      	add	r3, r1
 800cd84:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cd88:	881b      	ldrh	r3, [r3, #0]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d104      	bne.n	800cd98 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cd8e:	6839      	ldr	r1, [r7, #0]
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f000 fbad 	bl	800d4f0 <USBD_CtlError>
                  break;
 800cd96:	e041      	b.n	800ce1c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	da0b      	bge.n	800cdb8 <USBD_StdEPReq+0x23e>
 800cda0:	7bbb      	ldrb	r3, [r7, #14]
 800cda2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cda6:	4613      	mov	r3, r2
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	4413      	add	r3, r2
 800cdac:	009b      	lsls	r3, r3, #2
 800cdae:	3310      	adds	r3, #16
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	3304      	adds	r3, #4
 800cdb6:	e00b      	b.n	800cdd0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cdb8:	7bbb      	ldrb	r3, [r7, #14]
 800cdba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cdbe:	4613      	mov	r3, r2
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	4413      	add	r3, r2
 800cdc4:	009b      	lsls	r3, r3, #2
 800cdc6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	4413      	add	r3, r2
 800cdce:	3304      	adds	r3, #4
 800cdd0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cdd2:	7bbb      	ldrb	r3, [r7, #14]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d002      	beq.n	800cdde <USBD_StdEPReq+0x264>
 800cdd8:	7bbb      	ldrb	r3, [r7, #14]
 800cdda:	2b80      	cmp	r3, #128	; 0x80
 800cddc:	d103      	bne.n	800cde6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	2200      	movs	r2, #0
 800cde2:	601a      	str	r2, [r3, #0]
 800cde4:	e00e      	b.n	800ce04 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cde6:	7bbb      	ldrb	r3, [r7, #14]
 800cde8:	4619      	mov	r1, r3
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f001 f8ea 	bl	800dfc4 <USBD_LL_IsStallEP>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d003      	beq.n	800cdfe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	2201      	movs	r2, #1
 800cdfa:	601a      	str	r2, [r3, #0]
 800cdfc:	e002      	b.n	800ce04 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	2200      	movs	r2, #0
 800ce02:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	2202      	movs	r2, #2
 800ce08:	4619      	mov	r1, r3
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 fbe1 	bl	800d5d2 <USBD_CtlSendData>
              break;
 800ce10:	e004      	b.n	800ce1c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ce12:	6839      	ldr	r1, [r7, #0]
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f000 fb6b 	bl	800d4f0 <USBD_CtlError>
              break;
 800ce1a:	bf00      	nop
          }
          break;
 800ce1c:	e004      	b.n	800ce28 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ce1e:	6839      	ldr	r1, [r7, #0]
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f000 fb65 	bl	800d4f0 <USBD_CtlError>
          break;
 800ce26:	bf00      	nop
      }
      break;
 800ce28:	e004      	b.n	800ce34 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ce2a:	6839      	ldr	r1, [r7, #0]
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f000 fb5f 	bl	800d4f0 <USBD_CtlError>
      break;
 800ce32:	bf00      	nop
  }

  return ret;
 800ce34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
	...

0800ce40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b084      	sub	sp, #16
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ce52:	2300      	movs	r3, #0
 800ce54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	885b      	ldrh	r3, [r3, #2]
 800ce5a:	0a1b      	lsrs	r3, r3, #8
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	2b0e      	cmp	r3, #14
 800ce62:	f200 8152 	bhi.w	800d10a <USBD_GetDescriptor+0x2ca>
 800ce66:	a201      	add	r2, pc, #4	; (adr r2, 800ce6c <USBD_GetDescriptor+0x2c>)
 800ce68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce6c:	0800cedd 	.word	0x0800cedd
 800ce70:	0800cef5 	.word	0x0800cef5
 800ce74:	0800cf35 	.word	0x0800cf35
 800ce78:	0800d10b 	.word	0x0800d10b
 800ce7c:	0800d10b 	.word	0x0800d10b
 800ce80:	0800d0ab 	.word	0x0800d0ab
 800ce84:	0800d0d7 	.word	0x0800d0d7
 800ce88:	0800d10b 	.word	0x0800d10b
 800ce8c:	0800d10b 	.word	0x0800d10b
 800ce90:	0800d10b 	.word	0x0800d10b
 800ce94:	0800d10b 	.word	0x0800d10b
 800ce98:	0800d10b 	.word	0x0800d10b
 800ce9c:	0800d10b 	.word	0x0800d10b
 800cea0:	0800d10b 	.word	0x0800d10b
 800cea4:	0800cea9 	.word	0x0800cea9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceae:	69db      	ldr	r3, [r3, #28]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d00b      	beq.n	800cecc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceba:	69db      	ldr	r3, [r3, #28]
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	7c12      	ldrb	r2, [r2, #16]
 800cec0:	f107 0108 	add.w	r1, r7, #8
 800cec4:	4610      	mov	r0, r2
 800cec6:	4798      	blx	r3
 800cec8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ceca:	e126      	b.n	800d11a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cecc:	6839      	ldr	r1, [r7, #0]
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 fb0e 	bl	800d4f0 <USBD_CtlError>
        err++;
 800ced4:	7afb      	ldrb	r3, [r7, #11]
 800ced6:	3301      	adds	r3, #1
 800ced8:	72fb      	strb	r3, [r7, #11]
      break;
 800ceda:	e11e      	b.n	800d11a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	687a      	ldr	r2, [r7, #4]
 800cee6:	7c12      	ldrb	r2, [r2, #16]
 800cee8:	f107 0108 	add.w	r1, r7, #8
 800ceec:	4610      	mov	r0, r2
 800ceee:	4798      	blx	r3
 800cef0:	60f8      	str	r0, [r7, #12]
      break;
 800cef2:	e112      	b.n	800d11a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	7c1b      	ldrb	r3, [r3, #16]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d10d      	bne.n	800cf18 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf04:	f107 0208 	add.w	r2, r7, #8
 800cf08:	4610      	mov	r0, r2
 800cf0a:	4798      	blx	r3
 800cf0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	3301      	adds	r3, #1
 800cf12:	2202      	movs	r2, #2
 800cf14:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cf16:	e100      	b.n	800d11a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf20:	f107 0208 	add.w	r2, r7, #8
 800cf24:	4610      	mov	r0, r2
 800cf26:	4798      	blx	r3
 800cf28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	2202      	movs	r2, #2
 800cf30:	701a      	strb	r2, [r3, #0]
      break;
 800cf32:	e0f2      	b.n	800d11a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	885b      	ldrh	r3, [r3, #2]
 800cf38:	b2db      	uxtb	r3, r3
 800cf3a:	2b05      	cmp	r3, #5
 800cf3c:	f200 80ac 	bhi.w	800d098 <USBD_GetDescriptor+0x258>
 800cf40:	a201      	add	r2, pc, #4	; (adr r2, 800cf48 <USBD_GetDescriptor+0x108>)
 800cf42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf46:	bf00      	nop
 800cf48:	0800cf61 	.word	0x0800cf61
 800cf4c:	0800cf95 	.word	0x0800cf95
 800cf50:	0800cfc9 	.word	0x0800cfc9
 800cf54:	0800cffd 	.word	0x0800cffd
 800cf58:	0800d031 	.word	0x0800d031
 800cf5c:	0800d065 	.word	0x0800d065
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d00b      	beq.n	800cf84 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	7c12      	ldrb	r2, [r2, #16]
 800cf78:	f107 0108 	add.w	r1, r7, #8
 800cf7c:	4610      	mov	r0, r2
 800cf7e:	4798      	blx	r3
 800cf80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf82:	e091      	b.n	800d0a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf84:	6839      	ldr	r1, [r7, #0]
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 fab2 	bl	800d4f0 <USBD_CtlError>
            err++;
 800cf8c:	7afb      	ldrb	r3, [r7, #11]
 800cf8e:	3301      	adds	r3, #1
 800cf90:	72fb      	strb	r3, [r7, #11]
          break;
 800cf92:	e089      	b.n	800d0a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf9a:	689b      	ldr	r3, [r3, #8]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d00b      	beq.n	800cfb8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfa6:	689b      	ldr	r3, [r3, #8]
 800cfa8:	687a      	ldr	r2, [r7, #4]
 800cfaa:	7c12      	ldrb	r2, [r2, #16]
 800cfac:	f107 0108 	add.w	r1, r7, #8
 800cfb0:	4610      	mov	r0, r2
 800cfb2:	4798      	blx	r3
 800cfb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfb6:	e077      	b.n	800d0a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cfb8:	6839      	ldr	r1, [r7, #0]
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f000 fa98 	bl	800d4f0 <USBD_CtlError>
            err++;
 800cfc0:	7afb      	ldrb	r3, [r7, #11]
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	72fb      	strb	r3, [r7, #11]
          break;
 800cfc6:	e06f      	b.n	800d0a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfce:	68db      	ldr	r3, [r3, #12]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d00b      	beq.n	800cfec <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	7c12      	ldrb	r2, [r2, #16]
 800cfe0:	f107 0108 	add.w	r1, r7, #8
 800cfe4:	4610      	mov	r0, r2
 800cfe6:	4798      	blx	r3
 800cfe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfea:	e05d      	b.n	800d0a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cfec:	6839      	ldr	r1, [r7, #0]
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f000 fa7e 	bl	800d4f0 <USBD_CtlError>
            err++;
 800cff4:	7afb      	ldrb	r3, [r7, #11]
 800cff6:	3301      	adds	r3, #1
 800cff8:	72fb      	strb	r3, [r7, #11]
          break;
 800cffa:	e055      	b.n	800d0a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d002:	691b      	ldr	r3, [r3, #16]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d00b      	beq.n	800d020 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d00e:	691b      	ldr	r3, [r3, #16]
 800d010:	687a      	ldr	r2, [r7, #4]
 800d012:	7c12      	ldrb	r2, [r2, #16]
 800d014:	f107 0108 	add.w	r1, r7, #8
 800d018:	4610      	mov	r0, r2
 800d01a:	4798      	blx	r3
 800d01c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d01e:	e043      	b.n	800d0a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d020:	6839      	ldr	r1, [r7, #0]
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 fa64 	bl	800d4f0 <USBD_CtlError>
            err++;
 800d028:	7afb      	ldrb	r3, [r7, #11]
 800d02a:	3301      	adds	r3, #1
 800d02c:	72fb      	strb	r3, [r7, #11]
          break;
 800d02e:	e03b      	b.n	800d0a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d036:	695b      	ldr	r3, [r3, #20]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d00b      	beq.n	800d054 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d042:	695b      	ldr	r3, [r3, #20]
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	7c12      	ldrb	r2, [r2, #16]
 800d048:	f107 0108 	add.w	r1, r7, #8
 800d04c:	4610      	mov	r0, r2
 800d04e:	4798      	blx	r3
 800d050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d052:	e029      	b.n	800d0a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d054:	6839      	ldr	r1, [r7, #0]
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 fa4a 	bl	800d4f0 <USBD_CtlError>
            err++;
 800d05c:	7afb      	ldrb	r3, [r7, #11]
 800d05e:	3301      	adds	r3, #1
 800d060:	72fb      	strb	r3, [r7, #11]
          break;
 800d062:	e021      	b.n	800d0a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d06a:	699b      	ldr	r3, [r3, #24]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d00b      	beq.n	800d088 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d076:	699b      	ldr	r3, [r3, #24]
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	7c12      	ldrb	r2, [r2, #16]
 800d07c:	f107 0108 	add.w	r1, r7, #8
 800d080:	4610      	mov	r0, r2
 800d082:	4798      	blx	r3
 800d084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d086:	e00f      	b.n	800d0a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d088:	6839      	ldr	r1, [r7, #0]
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f000 fa30 	bl	800d4f0 <USBD_CtlError>
            err++;
 800d090:	7afb      	ldrb	r3, [r7, #11]
 800d092:	3301      	adds	r3, #1
 800d094:	72fb      	strb	r3, [r7, #11]
          break;
 800d096:	e007      	b.n	800d0a8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d098:	6839      	ldr	r1, [r7, #0]
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 fa28 	bl	800d4f0 <USBD_CtlError>
          err++;
 800d0a0:	7afb      	ldrb	r3, [r7, #11]
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d0a6:	bf00      	nop
      }
      break;
 800d0a8:	e037      	b.n	800d11a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	7c1b      	ldrb	r3, [r3, #16]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d109      	bne.n	800d0c6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0ba:	f107 0208 	add.w	r2, r7, #8
 800d0be:	4610      	mov	r0, r2
 800d0c0:	4798      	blx	r3
 800d0c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d0c4:	e029      	b.n	800d11a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d0c6:	6839      	ldr	r1, [r7, #0]
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 fa11 	bl	800d4f0 <USBD_CtlError>
        err++;
 800d0ce:	7afb      	ldrb	r3, [r7, #11]
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	72fb      	strb	r3, [r7, #11]
      break;
 800d0d4:	e021      	b.n	800d11a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	7c1b      	ldrb	r3, [r3, #16]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d10d      	bne.n	800d0fa <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0e6:	f107 0208 	add.w	r2, r7, #8
 800d0ea:	4610      	mov	r0, r2
 800d0ec:	4798      	blx	r3
 800d0ee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	2207      	movs	r2, #7
 800d0f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d0f8:	e00f      	b.n	800d11a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d0fa:	6839      	ldr	r1, [r7, #0]
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f000 f9f7 	bl	800d4f0 <USBD_CtlError>
        err++;
 800d102:	7afb      	ldrb	r3, [r7, #11]
 800d104:	3301      	adds	r3, #1
 800d106:	72fb      	strb	r3, [r7, #11]
      break;
 800d108:	e007      	b.n	800d11a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d10a:	6839      	ldr	r1, [r7, #0]
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f000 f9ef 	bl	800d4f0 <USBD_CtlError>
      err++;
 800d112:	7afb      	ldrb	r3, [r7, #11]
 800d114:	3301      	adds	r3, #1
 800d116:	72fb      	strb	r3, [r7, #11]
      break;
 800d118:	bf00      	nop
  }

  if (err != 0U)
 800d11a:	7afb      	ldrb	r3, [r7, #11]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d11e      	bne.n	800d15e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	88db      	ldrh	r3, [r3, #6]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d016      	beq.n	800d156 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d128:	893b      	ldrh	r3, [r7, #8]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00e      	beq.n	800d14c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	88da      	ldrh	r2, [r3, #6]
 800d132:	893b      	ldrh	r3, [r7, #8]
 800d134:	4293      	cmp	r3, r2
 800d136:	bf28      	it	cs
 800d138:	4613      	movcs	r3, r2
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d13e:	893b      	ldrh	r3, [r7, #8]
 800d140:	461a      	mov	r2, r3
 800d142:	68f9      	ldr	r1, [r7, #12]
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 fa44 	bl	800d5d2 <USBD_CtlSendData>
 800d14a:	e009      	b.n	800d160 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d14c:	6839      	ldr	r1, [r7, #0]
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 f9ce 	bl	800d4f0 <USBD_CtlError>
 800d154:	e004      	b.n	800d160 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f000 fa95 	bl	800d686 <USBD_CtlSendStatus>
 800d15c:	e000      	b.n	800d160 <USBD_GetDescriptor+0x320>
    return;
 800d15e:	bf00      	nop
  }
}
 800d160:	3710      	adds	r7, #16
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
 800d166:	bf00      	nop

0800d168 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b084      	sub	sp, #16
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	889b      	ldrh	r3, [r3, #4]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d131      	bne.n	800d1de <USBD_SetAddress+0x76>
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	88db      	ldrh	r3, [r3, #6]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d12d      	bne.n	800d1de <USBD_SetAddress+0x76>
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	885b      	ldrh	r3, [r3, #2]
 800d186:	2b7f      	cmp	r3, #127	; 0x7f
 800d188:	d829      	bhi.n	800d1de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	885b      	ldrh	r3, [r3, #2]
 800d18e:	b2db      	uxtb	r3, r3
 800d190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d194:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d19c:	b2db      	uxtb	r3, r3
 800d19e:	2b03      	cmp	r3, #3
 800d1a0:	d104      	bne.n	800d1ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d1a2:	6839      	ldr	r1, [r7, #0]
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f000 f9a3 	bl	800d4f0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1aa:	e01d      	b.n	800d1e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	7bfa      	ldrb	r2, [r7, #15]
 800d1b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d1b4:	7bfb      	ldrb	r3, [r7, #15]
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 ff31 	bl	800e020 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f000 fa61 	bl	800d686 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d1c4:	7bfb      	ldrb	r3, [r7, #15]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d004      	beq.n	800d1d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2202      	movs	r2, #2
 800d1ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1d2:	e009      	b.n	800d1e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1dc:	e004      	b.n	800d1e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d1de:	6839      	ldr	r1, [r7, #0]
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 f985 	bl	800d4f0 <USBD_CtlError>
  }
}
 800d1e6:	bf00      	nop
 800d1e8:	bf00      	nop
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	885b      	ldrh	r3, [r3, #2]
 800d202:	b2da      	uxtb	r2, r3
 800d204:	4b4c      	ldr	r3, [pc, #304]	; (800d338 <USBD_SetConfig+0x148>)
 800d206:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d208:	4b4b      	ldr	r3, [pc, #300]	; (800d338 <USBD_SetConfig+0x148>)
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d905      	bls.n	800d21c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d210:	6839      	ldr	r1, [r7, #0]
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f000 f96c 	bl	800d4f0 <USBD_CtlError>
    return USBD_FAIL;
 800d218:	2303      	movs	r3, #3
 800d21a:	e088      	b.n	800d32e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d222:	b2db      	uxtb	r3, r3
 800d224:	2b02      	cmp	r3, #2
 800d226:	d002      	beq.n	800d22e <USBD_SetConfig+0x3e>
 800d228:	2b03      	cmp	r3, #3
 800d22a:	d025      	beq.n	800d278 <USBD_SetConfig+0x88>
 800d22c:	e071      	b.n	800d312 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d22e:	4b42      	ldr	r3, [pc, #264]	; (800d338 <USBD_SetConfig+0x148>)
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d01c      	beq.n	800d270 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d236:	4b40      	ldr	r3, [pc, #256]	; (800d338 <USBD_SetConfig+0x148>)
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	461a      	mov	r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d240:	4b3d      	ldr	r3, [pc, #244]	; (800d338 <USBD_SetConfig+0x148>)
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	4619      	mov	r1, r3
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f7ff f992 	bl	800c570 <USBD_SetClassConfig>
 800d24c:	4603      	mov	r3, r0
 800d24e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d250:	7bfb      	ldrb	r3, [r7, #15]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d004      	beq.n	800d260 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d256:	6839      	ldr	r1, [r7, #0]
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 f949 	bl	800d4f0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d25e:	e065      	b.n	800d32c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f000 fa10 	bl	800d686 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2203      	movs	r2, #3
 800d26a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d26e:	e05d      	b.n	800d32c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f000 fa08 	bl	800d686 <USBD_CtlSendStatus>
      break;
 800d276:	e059      	b.n	800d32c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d278:	4b2f      	ldr	r3, [pc, #188]	; (800d338 <USBD_SetConfig+0x148>)
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d112      	bne.n	800d2a6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2202      	movs	r2, #2
 800d284:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d288:	4b2b      	ldr	r3, [pc, #172]	; (800d338 <USBD_SetConfig+0x148>)
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	461a      	mov	r2, r3
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d292:	4b29      	ldr	r3, [pc, #164]	; (800d338 <USBD_SetConfig+0x148>)
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	4619      	mov	r1, r3
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f7ff f985 	bl	800c5a8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f000 f9f1 	bl	800d686 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d2a4:	e042      	b.n	800d32c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d2a6:	4b24      	ldr	r3, [pc, #144]	; (800d338 <USBD_SetConfig+0x148>)
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d02a      	beq.n	800d30a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f7ff f973 	bl	800c5a8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d2c2:	4b1d      	ldr	r3, [pc, #116]	; (800d338 <USBD_SetConfig+0x148>)
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d2cc:	4b1a      	ldr	r3, [pc, #104]	; (800d338 <USBD_SetConfig+0x148>)
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f7ff f94c 	bl	800c570 <USBD_SetClassConfig>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d2dc:	7bfb      	ldrb	r3, [r7, #15]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d00f      	beq.n	800d302 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d2e2:	6839      	ldr	r1, [r7, #0]
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 f903 	bl	800d4f0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	b2db      	uxtb	r3, r3
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f7ff f958 	bl	800c5a8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2202      	movs	r2, #2
 800d2fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d300:	e014      	b.n	800d32c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f000 f9bf 	bl	800d686 <USBD_CtlSendStatus>
      break;
 800d308:	e010      	b.n	800d32c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f000 f9bb 	bl	800d686 <USBD_CtlSendStatus>
      break;
 800d310:	e00c      	b.n	800d32c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d312:	6839      	ldr	r1, [r7, #0]
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 f8eb 	bl	800d4f0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d31a:	4b07      	ldr	r3, [pc, #28]	; (800d338 <USBD_SetConfig+0x148>)
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	4619      	mov	r1, r3
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f7ff f941 	bl	800c5a8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d326:	2303      	movs	r3, #3
 800d328:	73fb      	strb	r3, [r7, #15]
      break;
 800d32a:	bf00      	nop
  }

  return ret;
 800d32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3710      	adds	r7, #16
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}
 800d336:	bf00      	nop
 800d338:	20000610 	.word	0x20000610

0800d33c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	88db      	ldrh	r3, [r3, #6]
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	d004      	beq.n	800d358 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d34e:	6839      	ldr	r1, [r7, #0]
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f000 f8cd 	bl	800d4f0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d356:	e023      	b.n	800d3a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d35e:	b2db      	uxtb	r3, r3
 800d360:	2b02      	cmp	r3, #2
 800d362:	dc02      	bgt.n	800d36a <USBD_GetConfig+0x2e>
 800d364:	2b00      	cmp	r3, #0
 800d366:	dc03      	bgt.n	800d370 <USBD_GetConfig+0x34>
 800d368:	e015      	b.n	800d396 <USBD_GetConfig+0x5a>
 800d36a:	2b03      	cmp	r3, #3
 800d36c:	d00b      	beq.n	800d386 <USBD_GetConfig+0x4a>
 800d36e:	e012      	b.n	800d396 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2200      	movs	r2, #0
 800d374:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	3308      	adds	r3, #8
 800d37a:	2201      	movs	r2, #1
 800d37c:	4619      	mov	r1, r3
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 f927 	bl	800d5d2 <USBD_CtlSendData>
        break;
 800d384:	e00c      	b.n	800d3a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	3304      	adds	r3, #4
 800d38a:	2201      	movs	r2, #1
 800d38c:	4619      	mov	r1, r3
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f000 f91f 	bl	800d5d2 <USBD_CtlSendData>
        break;
 800d394:	e004      	b.n	800d3a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d396:	6839      	ldr	r1, [r7, #0]
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f000 f8a9 	bl	800d4f0 <USBD_CtlError>
        break;
 800d39e:	bf00      	nop
}
 800d3a0:	bf00      	nop
 800d3a2:	3708      	adds	r7, #8
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3b8:	b2db      	uxtb	r3, r3
 800d3ba:	3b01      	subs	r3, #1
 800d3bc:	2b02      	cmp	r3, #2
 800d3be:	d81e      	bhi.n	800d3fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	88db      	ldrh	r3, [r3, #6]
 800d3c4:	2b02      	cmp	r3, #2
 800d3c6:	d004      	beq.n	800d3d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d3c8:	6839      	ldr	r1, [r7, #0]
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f000 f890 	bl	800d4f0 <USBD_CtlError>
        break;
 800d3d0:	e01a      	b.n	800d408 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d005      	beq.n	800d3ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	68db      	ldr	r3, [r3, #12]
 800d3e6:	f043 0202 	orr.w	r2, r3, #2
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	330c      	adds	r3, #12
 800d3f2:	2202      	movs	r2, #2
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 f8eb 	bl	800d5d2 <USBD_CtlSendData>
      break;
 800d3fc:	e004      	b.n	800d408 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d3fe:	6839      	ldr	r1, [r7, #0]
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 f875 	bl	800d4f0 <USBD_CtlError>
      break;
 800d406:	bf00      	nop
  }
}
 800d408:	bf00      	nop
 800d40a:	3708      	adds	r7, #8
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b082      	sub	sp, #8
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	885b      	ldrh	r3, [r3, #2]
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d106      	bne.n	800d430 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2201      	movs	r2, #1
 800d426:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 f92b 	bl	800d686 <USBD_CtlSendStatus>
  }
}
 800d430:	bf00      	nop
 800d432:	3708      	adds	r7, #8
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d448:	b2db      	uxtb	r3, r3
 800d44a:	3b01      	subs	r3, #1
 800d44c:	2b02      	cmp	r3, #2
 800d44e:	d80b      	bhi.n	800d468 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	885b      	ldrh	r3, [r3, #2]
 800d454:	2b01      	cmp	r3, #1
 800d456:	d10c      	bne.n	800d472 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2200      	movs	r2, #0
 800d45c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f000 f910 	bl	800d686 <USBD_CtlSendStatus>
      }
      break;
 800d466:	e004      	b.n	800d472 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d468:	6839      	ldr	r1, [r7, #0]
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 f840 	bl	800d4f0 <USBD_CtlError>
      break;
 800d470:	e000      	b.n	800d474 <USBD_ClrFeature+0x3c>
      break;
 800d472:	bf00      	nop
  }
}
 800d474:	bf00      	nop
 800d476:	3708      	adds	r7, #8
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b084      	sub	sp, #16
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	781a      	ldrb	r2, [r3, #0]
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	3301      	adds	r3, #1
 800d496:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	781a      	ldrb	r2, [r3, #0]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d4a6:	68f8      	ldr	r0, [r7, #12]
 800d4a8:	f7ff fa92 	bl	800c9d0 <SWAPBYTE>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	3301      	adds	r3, #1
 800d4be:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d4c0:	68f8      	ldr	r0, [r7, #12]
 800d4c2:	f7ff fa85 	bl	800c9d0 <SWAPBYTE>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d4da:	68f8      	ldr	r0, [r7, #12]
 800d4dc:	f7ff fa78 	bl	800c9d0 <SWAPBYTE>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	80da      	strh	r2, [r3, #6]
}
 800d4e8:	bf00      	nop
 800d4ea:	3710      	adds	r7, #16
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4fa:	2180      	movs	r1, #128	; 0x80
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f000 fcf5 	bl	800deec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d502:	2100      	movs	r1, #0
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f000 fcf1 	bl	800deec <USBD_LL_StallEP>
}
 800d50a:	bf00      	nop
 800d50c:	3708      	adds	r7, #8
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d512:	b580      	push	{r7, lr}
 800d514:	b086      	sub	sp, #24
 800d516:	af00      	add	r7, sp, #0
 800d518:	60f8      	str	r0, [r7, #12]
 800d51a:	60b9      	str	r1, [r7, #8]
 800d51c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d51e:	2300      	movs	r3, #0
 800d520:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d036      	beq.n	800d596 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d52c:	6938      	ldr	r0, [r7, #16]
 800d52e:	f000 f836 	bl	800d59e <USBD_GetLen>
 800d532:	4603      	mov	r3, r0
 800d534:	3301      	adds	r3, #1
 800d536:	b29b      	uxth	r3, r3
 800d538:	005b      	lsls	r3, r3, #1
 800d53a:	b29a      	uxth	r2, r3
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d540:	7dfb      	ldrb	r3, [r7, #23]
 800d542:	68ba      	ldr	r2, [r7, #8]
 800d544:	4413      	add	r3, r2
 800d546:	687a      	ldr	r2, [r7, #4]
 800d548:	7812      	ldrb	r2, [r2, #0]
 800d54a:	701a      	strb	r2, [r3, #0]
  idx++;
 800d54c:	7dfb      	ldrb	r3, [r7, #23]
 800d54e:	3301      	adds	r3, #1
 800d550:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d552:	7dfb      	ldrb	r3, [r7, #23]
 800d554:	68ba      	ldr	r2, [r7, #8]
 800d556:	4413      	add	r3, r2
 800d558:	2203      	movs	r2, #3
 800d55a:	701a      	strb	r2, [r3, #0]
  idx++;
 800d55c:	7dfb      	ldrb	r3, [r7, #23]
 800d55e:	3301      	adds	r3, #1
 800d560:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d562:	e013      	b.n	800d58c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d564:	7dfb      	ldrb	r3, [r7, #23]
 800d566:	68ba      	ldr	r2, [r7, #8]
 800d568:	4413      	add	r3, r2
 800d56a:	693a      	ldr	r2, [r7, #16]
 800d56c:	7812      	ldrb	r2, [r2, #0]
 800d56e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	3301      	adds	r3, #1
 800d574:	613b      	str	r3, [r7, #16]
    idx++;
 800d576:	7dfb      	ldrb	r3, [r7, #23]
 800d578:	3301      	adds	r3, #1
 800d57a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d57c:	7dfb      	ldrb	r3, [r7, #23]
 800d57e:	68ba      	ldr	r2, [r7, #8]
 800d580:	4413      	add	r3, r2
 800d582:	2200      	movs	r2, #0
 800d584:	701a      	strb	r2, [r3, #0]
    idx++;
 800d586:	7dfb      	ldrb	r3, [r7, #23]
 800d588:	3301      	adds	r3, #1
 800d58a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d1e7      	bne.n	800d564 <USBD_GetString+0x52>
 800d594:	e000      	b.n	800d598 <USBD_GetString+0x86>
    return;
 800d596:	bf00      	nop
  }
}
 800d598:	3718      	adds	r7, #24
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}

0800d59e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d59e:	b480      	push	{r7}
 800d5a0:	b085      	sub	sp, #20
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d5ae:	e005      	b.n	800d5bc <USBD_GetLen+0x1e>
  {
    len++;
 800d5b0:	7bfb      	ldrb	r3, [r7, #15]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d1f5      	bne.n	800d5b0 <USBD_GetLen+0x12>
  }

  return len;
 800d5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3714      	adds	r7, #20
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr

0800d5d2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	b084      	sub	sp, #16
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	60f8      	str	r0, [r7, #12]
 800d5da:	60b9      	str	r1, [r7, #8]
 800d5dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2202      	movs	r2, #2
 800d5e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	687a      	ldr	r2, [r7, #4]
 800d5ea:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	68ba      	ldr	r2, [r7, #8]
 800d5f6:	2100      	movs	r1, #0
 800d5f8:	68f8      	ldr	r0, [r7, #12]
 800d5fa:	f000 fd47 	bl	800e08c <USBD_LL_Transmit>

  return USBD_OK;
 800d5fe:	2300      	movs	r3, #0
}
 800d600:	4618      	mov	r0, r3
 800d602:	3710      	adds	r7, #16
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	60f8      	str	r0, [r7, #12]
 800d610:	60b9      	str	r1, [r7, #8]
 800d612:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	68ba      	ldr	r2, [r7, #8]
 800d618:	2100      	movs	r1, #0
 800d61a:	68f8      	ldr	r0, [r7, #12]
 800d61c:	f000 fd36 	bl	800e08c <USBD_LL_Transmit>

  return USBD_OK;
 800d620:	2300      	movs	r3, #0
}
 800d622:	4618      	mov	r0, r3
 800d624:	3710      	adds	r7, #16
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}

0800d62a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d62a:	b580      	push	{r7, lr}
 800d62c:	b084      	sub	sp, #16
 800d62e:	af00      	add	r7, sp, #0
 800d630:	60f8      	str	r0, [r7, #12]
 800d632:	60b9      	str	r1, [r7, #8]
 800d634:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2203      	movs	r2, #3
 800d63a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	68ba      	ldr	r2, [r7, #8]
 800d652:	2100      	movs	r1, #0
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	f000 fd51 	bl	800e0fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d65a:	2300      	movs	r3, #0
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3710      	adds	r7, #16
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	68ba      	ldr	r2, [r7, #8]
 800d674:	2100      	movs	r1, #0
 800d676:	68f8      	ldr	r0, [r7, #12]
 800d678:	f000 fd40 	bl	800e0fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d67c:	2300      	movs	r3, #0
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3710      	adds	r7, #16
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}

0800d686 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d686:	b580      	push	{r7, lr}
 800d688:	b082      	sub	sp, #8
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2204      	movs	r2, #4
 800d692:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d696:	2300      	movs	r3, #0
 800d698:	2200      	movs	r2, #0
 800d69a:	2100      	movs	r1, #0
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f000 fcf5 	bl	800e08c <USBD_LL_Transmit>

  return USBD_OK;
 800d6a2:	2300      	movs	r3, #0
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3708      	adds	r7, #8
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2205      	movs	r2, #5
 800d6b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d6bc:	2300      	movs	r3, #0
 800d6be:	2200      	movs	r2, #0
 800d6c0:	2100      	movs	r1, #0
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f000 fd1a 	bl	800e0fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d6c8:	2300      	movs	r3, #0
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3708      	adds	r7, #8
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
	...

0800d6d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d6d8:	2200      	movs	r2, #0
 800d6da:	4912      	ldr	r1, [pc, #72]	; (800d724 <MX_USB_DEVICE_Init+0x50>)
 800d6dc:	4812      	ldr	r0, [pc, #72]	; (800d728 <MX_USB_DEVICE_Init+0x54>)
 800d6de:	f7fe fed9 	bl	800c494 <USBD_Init>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d001      	beq.n	800d6ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d6e8:	f7f6 f91c 	bl	8003924 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d6ec:	490f      	ldr	r1, [pc, #60]	; (800d72c <MX_USB_DEVICE_Init+0x58>)
 800d6ee:	480e      	ldr	r0, [pc, #56]	; (800d728 <MX_USB_DEVICE_Init+0x54>)
 800d6f0:	f7fe ff00 	bl	800c4f4 <USBD_RegisterClass>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d001      	beq.n	800d6fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d6fa:	f7f6 f913 	bl	8003924 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d6fe:	490c      	ldr	r1, [pc, #48]	; (800d730 <MX_USB_DEVICE_Init+0x5c>)
 800d700:	4809      	ldr	r0, [pc, #36]	; (800d728 <MX_USB_DEVICE_Init+0x54>)
 800d702:	f7fe fe21 	bl	800c348 <USBD_CDC_RegisterInterface>
 800d706:	4603      	mov	r3, r0
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d001      	beq.n	800d710 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d70c:	f7f6 f90a 	bl	8003924 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d710:	4805      	ldr	r0, [pc, #20]	; (800d728 <MX_USB_DEVICE_Init+0x54>)
 800d712:	f7fe ff16 	bl	800c542 <USBD_Start>
 800d716:	4603      	mov	r3, r0
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d001      	beq.n	800d720 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d71c:	f7f6 f902 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d720:	bf00      	nop
 800d722:	bd80      	pop	{r7, pc}
 800d724:	20000130 	.word	0x20000130
 800d728:	20000614 	.word	0x20000614
 800d72c:	20000018 	.word	0x20000018
 800d730:	2000011c 	.word	0x2000011c

0800d734 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d738:	2200      	movs	r2, #0
 800d73a:	4905      	ldr	r1, [pc, #20]	; (800d750 <CDC_Init_FS+0x1c>)
 800d73c:	4805      	ldr	r0, [pc, #20]	; (800d754 <CDC_Init_FS+0x20>)
 800d73e:	f7fe fe18 	bl	800c372 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d742:	4905      	ldr	r1, [pc, #20]	; (800d758 <CDC_Init_FS+0x24>)
 800d744:	4803      	ldr	r0, [pc, #12]	; (800d754 <CDC_Init_FS+0x20>)
 800d746:	f7fe fe32 	bl	800c3ae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d74a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	bd80      	pop	{r7, pc}
 800d750:	200009e0 	.word	0x200009e0
 800d754:	20000614 	.word	0x20000614
 800d758:	200008e4 	.word	0x200008e4

0800d75c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d75c:	b480      	push	{r7}
 800d75e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d760:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d762:	4618      	mov	r0, r3
 800d764:	46bd      	mov	sp, r7
 800d766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76a:	4770      	bx	lr

0800d76c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d76c:	b480      	push	{r7}
 800d76e:	b083      	sub	sp, #12
 800d770:	af00      	add	r7, sp, #0
 800d772:	4603      	mov	r3, r0
 800d774:	6039      	str	r1, [r7, #0]
 800d776:	71fb      	strb	r3, [r7, #7]
 800d778:	4613      	mov	r3, r2
 800d77a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d77c:	79fb      	ldrb	r3, [r7, #7]
 800d77e:	2b23      	cmp	r3, #35	; 0x23
 800d780:	d84a      	bhi.n	800d818 <CDC_Control_FS+0xac>
 800d782:	a201      	add	r2, pc, #4	; (adr r2, 800d788 <CDC_Control_FS+0x1c>)
 800d784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d788:	0800d819 	.word	0x0800d819
 800d78c:	0800d819 	.word	0x0800d819
 800d790:	0800d819 	.word	0x0800d819
 800d794:	0800d819 	.word	0x0800d819
 800d798:	0800d819 	.word	0x0800d819
 800d79c:	0800d819 	.word	0x0800d819
 800d7a0:	0800d819 	.word	0x0800d819
 800d7a4:	0800d819 	.word	0x0800d819
 800d7a8:	0800d819 	.word	0x0800d819
 800d7ac:	0800d819 	.word	0x0800d819
 800d7b0:	0800d819 	.word	0x0800d819
 800d7b4:	0800d819 	.word	0x0800d819
 800d7b8:	0800d819 	.word	0x0800d819
 800d7bc:	0800d819 	.word	0x0800d819
 800d7c0:	0800d819 	.word	0x0800d819
 800d7c4:	0800d819 	.word	0x0800d819
 800d7c8:	0800d819 	.word	0x0800d819
 800d7cc:	0800d819 	.word	0x0800d819
 800d7d0:	0800d819 	.word	0x0800d819
 800d7d4:	0800d819 	.word	0x0800d819
 800d7d8:	0800d819 	.word	0x0800d819
 800d7dc:	0800d819 	.word	0x0800d819
 800d7e0:	0800d819 	.word	0x0800d819
 800d7e4:	0800d819 	.word	0x0800d819
 800d7e8:	0800d819 	.word	0x0800d819
 800d7ec:	0800d819 	.word	0x0800d819
 800d7f0:	0800d819 	.word	0x0800d819
 800d7f4:	0800d819 	.word	0x0800d819
 800d7f8:	0800d819 	.word	0x0800d819
 800d7fc:	0800d819 	.word	0x0800d819
 800d800:	0800d819 	.word	0x0800d819
 800d804:	0800d819 	.word	0x0800d819
 800d808:	0800d819 	.word	0x0800d819
 800d80c:	0800d819 	.word	0x0800d819
 800d810:	0800d819 	.word	0x0800d819
 800d814:	0800d819 	.word	0x0800d819
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d818:	bf00      	nop
  }

  return (USBD_OK);
 800d81a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	370c      	adds	r7, #12
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr

0800d828 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b082      	sub	sp, #8
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d832:	6879      	ldr	r1, [r7, #4]
 800d834:	4808      	ldr	r0, [pc, #32]	; (800d858 <CDC_Receive_FS+0x30>)
 800d836:	f7fe fdba 	bl	800c3ae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d83a:	4807      	ldr	r0, [pc, #28]	; (800d858 <CDC_Receive_FS+0x30>)
 800d83c:	f7fe fe00 	bl	800c440 <USBD_CDC_ReceivePacket>
  USB_CDC_RX_Interrupt(Buf, *Len);
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	4619      	mov	r1, r3
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f7f6 f85c 	bl	8003904 <USB_CDC_RX_Interrupt>
  return (USBD_OK);
 800d84c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3708      	adds	r7, #8
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	20000614 	.word	0x20000614

0800d85c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b084      	sub	sp, #16
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	460b      	mov	r3, r1
 800d866:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d868:	2300      	movs	r3, #0
 800d86a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d86c:	4b0d      	ldr	r3, [pc, #52]	; (800d8a4 <CDC_Transmit_FS+0x48>)
 800d86e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d872:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d001      	beq.n	800d882 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d87e:	2301      	movs	r3, #1
 800d880:	e00b      	b.n	800d89a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d882:	887b      	ldrh	r3, [r7, #2]
 800d884:	461a      	mov	r2, r3
 800d886:	6879      	ldr	r1, [r7, #4]
 800d888:	4806      	ldr	r0, [pc, #24]	; (800d8a4 <CDC_Transmit_FS+0x48>)
 800d88a:	f7fe fd72 	bl	800c372 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d88e:	4805      	ldr	r0, [pc, #20]	; (800d8a4 <CDC_Transmit_FS+0x48>)
 800d890:	f7fe fda6 	bl	800c3e0 <USBD_CDC_TransmitPacket>
 800d894:	4603      	mov	r3, r0
 800d896:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d898:	7bfb      	ldrb	r3, [r7, #15]
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop
 800d8a4:	20000614 	.word	0x20000614

0800d8a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b087      	sub	sp, #28
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	60f8      	str	r0, [r7, #12]
 800d8b0:	60b9      	str	r1, [r7, #8]
 800d8b2:	4613      	mov	r3, r2
 800d8b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d8ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	371c      	adds	r7, #28
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c8:	4770      	bx	lr
	...

0800d8cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b083      	sub	sp, #12
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	6039      	str	r1, [r7, #0]
 800d8d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	2212      	movs	r2, #18
 800d8dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d8de:	4b03      	ldr	r3, [pc, #12]	; (800d8ec <USBD_FS_DeviceDescriptor+0x20>)
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	370c      	adds	r7, #12
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr
 800d8ec:	20000150 	.word	0x20000150

0800d8f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b083      	sub	sp, #12
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	6039      	str	r1, [r7, #0]
 800d8fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	2204      	movs	r2, #4
 800d900:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d902:	4b03      	ldr	r3, [pc, #12]	; (800d910 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d904:	4618      	mov	r0, r3
 800d906:	370c      	adds	r7, #12
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr
 800d910:	20000170 	.word	0x20000170

0800d914 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b082      	sub	sp, #8
 800d918:	af00      	add	r7, sp, #0
 800d91a:	4603      	mov	r3, r0
 800d91c:	6039      	str	r1, [r7, #0]
 800d91e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d920:	79fb      	ldrb	r3, [r7, #7]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d105      	bne.n	800d932 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d926:	683a      	ldr	r2, [r7, #0]
 800d928:	4907      	ldr	r1, [pc, #28]	; (800d948 <USBD_FS_ProductStrDescriptor+0x34>)
 800d92a:	4808      	ldr	r0, [pc, #32]	; (800d94c <USBD_FS_ProductStrDescriptor+0x38>)
 800d92c:	f7ff fdf1 	bl	800d512 <USBD_GetString>
 800d930:	e004      	b.n	800d93c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d932:	683a      	ldr	r2, [r7, #0]
 800d934:	4904      	ldr	r1, [pc, #16]	; (800d948 <USBD_FS_ProductStrDescriptor+0x34>)
 800d936:	4805      	ldr	r0, [pc, #20]	; (800d94c <USBD_FS_ProductStrDescriptor+0x38>)
 800d938:	f7ff fdeb 	bl	800d512 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d93c:	4b02      	ldr	r3, [pc, #8]	; (800d948 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3708      	adds	r7, #8
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	20000adc 	.word	0x20000adc
 800d94c:	0800e2b0 	.word	0x0800e2b0

0800d950 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
 800d956:	4603      	mov	r3, r0
 800d958:	6039      	str	r1, [r7, #0]
 800d95a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d95c:	683a      	ldr	r2, [r7, #0]
 800d95e:	4904      	ldr	r1, [pc, #16]	; (800d970 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d960:	4804      	ldr	r0, [pc, #16]	; (800d974 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d962:	f7ff fdd6 	bl	800d512 <USBD_GetString>
  return USBD_StrDesc;
 800d966:	4b02      	ldr	r3, [pc, #8]	; (800d970 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3708      	adds	r7, #8
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	20000adc 	.word	0x20000adc
 800d974:	0800e2c8 	.word	0x0800e2c8

0800d978 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	4603      	mov	r3, r0
 800d980:	6039      	str	r1, [r7, #0]
 800d982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	221a      	movs	r2, #26
 800d988:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d98a:	f000 f855 	bl	800da38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d98e:	4b02      	ldr	r3, [pc, #8]	; (800d998 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d990:	4618      	mov	r0, r3
 800d992:	3708      	adds	r7, #8
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}
 800d998:	20000174 	.word	0x20000174

0800d99c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	6039      	str	r1, [r7, #0]
 800d9a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d9a8:	79fb      	ldrb	r3, [r7, #7]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d105      	bne.n	800d9ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d9ae:	683a      	ldr	r2, [r7, #0]
 800d9b0:	4907      	ldr	r1, [pc, #28]	; (800d9d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d9b2:	4808      	ldr	r0, [pc, #32]	; (800d9d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d9b4:	f7ff fdad 	bl	800d512 <USBD_GetString>
 800d9b8:	e004      	b.n	800d9c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d9ba:	683a      	ldr	r2, [r7, #0]
 800d9bc:	4904      	ldr	r1, [pc, #16]	; (800d9d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d9be:	4805      	ldr	r0, [pc, #20]	; (800d9d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d9c0:	f7ff fda7 	bl	800d512 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d9c4:	4b02      	ldr	r3, [pc, #8]	; (800d9d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3708      	adds	r7, #8
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}
 800d9ce:	bf00      	nop
 800d9d0:	20000adc 	.word	0x20000adc
 800d9d4:	0800e2dc 	.word	0x0800e2dc

0800d9d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	4603      	mov	r3, r0
 800d9e0:	6039      	str	r1, [r7, #0]
 800d9e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d9e4:	79fb      	ldrb	r3, [r7, #7]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d105      	bne.n	800d9f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d9ea:	683a      	ldr	r2, [r7, #0]
 800d9ec:	4907      	ldr	r1, [pc, #28]	; (800da0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d9ee:	4808      	ldr	r0, [pc, #32]	; (800da10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d9f0:	f7ff fd8f 	bl	800d512 <USBD_GetString>
 800d9f4:	e004      	b.n	800da00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d9f6:	683a      	ldr	r2, [r7, #0]
 800d9f8:	4904      	ldr	r1, [pc, #16]	; (800da0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d9fa:	4805      	ldr	r0, [pc, #20]	; (800da10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d9fc:	f7ff fd89 	bl	800d512 <USBD_GetString>
  }
  return USBD_StrDesc;
 800da00:	4b02      	ldr	r3, [pc, #8]	; (800da0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800da02:	4618      	mov	r0, r3
 800da04:	3708      	adds	r7, #8
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}
 800da0a:	bf00      	nop
 800da0c:	20000adc 	.word	0x20000adc
 800da10:	0800e2e8 	.word	0x0800e2e8

0800da14 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da14:	b480      	push	{r7}
 800da16:	b083      	sub	sp, #12
 800da18:	af00      	add	r7, sp, #0
 800da1a:	4603      	mov	r3, r0
 800da1c:	6039      	str	r1, [r7, #0]
 800da1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	220c      	movs	r2, #12
 800da24:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800da26:	4b03      	ldr	r3, [pc, #12]	; (800da34 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800da28:	4618      	mov	r0, r3
 800da2a:	370c      	adds	r7, #12
 800da2c:	46bd      	mov	sp, r7
 800da2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da32:	4770      	bx	lr
 800da34:	20000164 	.word	0x20000164

0800da38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b084      	sub	sp, #16
 800da3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800da3e:	4b0f      	ldr	r3, [pc, #60]	; (800da7c <Get_SerialNum+0x44>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800da44:	4b0e      	ldr	r3, [pc, #56]	; (800da80 <Get_SerialNum+0x48>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800da4a:	4b0e      	ldr	r3, [pc, #56]	; (800da84 <Get_SerialNum+0x4c>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800da50:	68fa      	ldr	r2, [r7, #12]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	4413      	add	r3, r2
 800da56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d009      	beq.n	800da72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800da5e:	2208      	movs	r2, #8
 800da60:	4909      	ldr	r1, [pc, #36]	; (800da88 <Get_SerialNum+0x50>)
 800da62:	68f8      	ldr	r0, [r7, #12]
 800da64:	f000 f814 	bl	800da90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800da68:	2204      	movs	r2, #4
 800da6a:	4908      	ldr	r1, [pc, #32]	; (800da8c <Get_SerialNum+0x54>)
 800da6c:	68b8      	ldr	r0, [r7, #8]
 800da6e:	f000 f80f 	bl	800da90 <IntToUnicode>
  }
}
 800da72:	bf00      	nop
 800da74:	3710      	adds	r7, #16
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	1fff7590 	.word	0x1fff7590
 800da80:	1fff7594 	.word	0x1fff7594
 800da84:	1fff7598 	.word	0x1fff7598
 800da88:	20000176 	.word	0x20000176
 800da8c:	20000186 	.word	0x20000186

0800da90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800da90:	b480      	push	{r7}
 800da92:	b087      	sub	sp, #28
 800da94:	af00      	add	r7, sp, #0
 800da96:	60f8      	str	r0, [r7, #12]
 800da98:	60b9      	str	r1, [r7, #8]
 800da9a:	4613      	mov	r3, r2
 800da9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800da9e:	2300      	movs	r3, #0
 800daa0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800daa2:	2300      	movs	r3, #0
 800daa4:	75fb      	strb	r3, [r7, #23]
 800daa6:	e027      	b.n	800daf8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	0f1b      	lsrs	r3, r3, #28
 800daac:	2b09      	cmp	r3, #9
 800daae:	d80b      	bhi.n	800dac8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	0f1b      	lsrs	r3, r3, #28
 800dab4:	b2da      	uxtb	r2, r3
 800dab6:	7dfb      	ldrb	r3, [r7, #23]
 800dab8:	005b      	lsls	r3, r3, #1
 800daba:	4619      	mov	r1, r3
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	440b      	add	r3, r1
 800dac0:	3230      	adds	r2, #48	; 0x30
 800dac2:	b2d2      	uxtb	r2, r2
 800dac4:	701a      	strb	r2, [r3, #0]
 800dac6:	e00a      	b.n	800dade <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	0f1b      	lsrs	r3, r3, #28
 800dacc:	b2da      	uxtb	r2, r3
 800dace:	7dfb      	ldrb	r3, [r7, #23]
 800dad0:	005b      	lsls	r3, r3, #1
 800dad2:	4619      	mov	r1, r3
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	440b      	add	r3, r1
 800dad8:	3237      	adds	r2, #55	; 0x37
 800dada:	b2d2      	uxtb	r2, r2
 800dadc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	011b      	lsls	r3, r3, #4
 800dae2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dae4:	7dfb      	ldrb	r3, [r7, #23]
 800dae6:	005b      	lsls	r3, r3, #1
 800dae8:	3301      	adds	r3, #1
 800daea:	68ba      	ldr	r2, [r7, #8]
 800daec:	4413      	add	r3, r2
 800daee:	2200      	movs	r2, #0
 800daf0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800daf2:	7dfb      	ldrb	r3, [r7, #23]
 800daf4:	3301      	adds	r3, #1
 800daf6:	75fb      	strb	r3, [r7, #23]
 800daf8:	7dfa      	ldrb	r2, [r7, #23]
 800dafa:	79fb      	ldrb	r3, [r7, #7]
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d3d3      	bcc.n	800daa8 <IntToUnicode+0x18>
  }
}
 800db00:	bf00      	nop
 800db02:	bf00      	nop
 800db04:	371c      	adds	r7, #28
 800db06:	46bd      	mov	sp, r7
 800db08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0c:	4770      	bx	lr
	...

0800db10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b09c      	sub	sp, #112	; 0x70
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800db18:	f107 0310 	add.w	r3, r7, #16
 800db1c:	2260      	movs	r2, #96	; 0x60
 800db1e:	2100      	movs	r1, #0
 800db20:	4618      	mov	r0, r3
 800db22:	f000 fbb1 	bl	800e288 <memset>
  if(pcdHandle->Instance==USB)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	4a15      	ldr	r2, [pc, #84]	; (800db80 <HAL_PCD_MspInit+0x70>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d122      	bne.n	800db76 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800db30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800db34:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800db36:	2300      	movs	r3, #0
 800db38:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800db3a:	f107 0310 	add.w	r3, r7, #16
 800db3e:	4618      	mov	r0, r3
 800db40:	f7fa fab4 	bl	80080ac <HAL_RCCEx_PeriphCLKConfig>
 800db44:	4603      	mov	r3, r0
 800db46:	2b00      	cmp	r3, #0
 800db48:	d001      	beq.n	800db4e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800db4a:	f7f5 feeb 	bl	8003924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800db4e:	4b0d      	ldr	r3, [pc, #52]	; (800db84 <HAL_PCD_MspInit+0x74>)
 800db50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db52:	4a0c      	ldr	r2, [pc, #48]	; (800db84 <HAL_PCD_MspInit+0x74>)
 800db54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800db58:	6593      	str	r3, [r2, #88]	; 0x58
 800db5a:	4b0a      	ldr	r3, [pc, #40]	; (800db84 <HAL_PCD_MspInit+0x74>)
 800db5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800db62:	60fb      	str	r3, [r7, #12]
 800db64:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800db66:	2200      	movs	r2, #0
 800db68:	2100      	movs	r1, #0
 800db6a:	2043      	movs	r0, #67	; 0x43
 800db6c:	f7f7 f909 	bl	8004d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800db70:	2043      	movs	r0, #67	; 0x43
 800db72:	f7f7 f922 	bl	8004dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800db76:	bf00      	nop
 800db78:	3770      	adds	r7, #112	; 0x70
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	bf00      	nop
 800db80:	40006800 	.word	0x40006800
 800db84:	40021000 	.word	0x40021000

0800db88 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800db9c:	4619      	mov	r1, r3
 800db9e:	4610      	mov	r0, r2
 800dba0:	f7fe fd1a 	bl	800c5d8 <USBD_LL_SetupStage>
}
 800dba4:	bf00      	nop
 800dba6:	3708      	adds	r7, #8
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800dbbe:	78fa      	ldrb	r2, [r7, #3]
 800dbc0:	6879      	ldr	r1, [r7, #4]
 800dbc2:	4613      	mov	r3, r2
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	4413      	add	r3, r2
 800dbc8:	00db      	lsls	r3, r3, #3
 800dbca:	440b      	add	r3, r1
 800dbcc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800dbd0:	681a      	ldr	r2, [r3, #0]
 800dbd2:	78fb      	ldrb	r3, [r7, #3]
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	f7fe fd54 	bl	800c682 <USBD_LL_DataOutStage>
}
 800dbda:	bf00      	nop
 800dbdc:	3708      	adds	r7, #8
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}

0800dbe2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbe2:	b580      	push	{r7, lr}
 800dbe4:	b082      	sub	sp, #8
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
 800dbea:	460b      	mov	r3, r1
 800dbec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800dbf4:	78fa      	ldrb	r2, [r7, #3]
 800dbf6:	6879      	ldr	r1, [r7, #4]
 800dbf8:	4613      	mov	r3, r2
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	4413      	add	r3, r2
 800dbfe:	00db      	lsls	r3, r3, #3
 800dc00:	440b      	add	r3, r1
 800dc02:	3340      	adds	r3, #64	; 0x40
 800dc04:	681a      	ldr	r2, [r3, #0]
 800dc06:	78fb      	ldrb	r3, [r7, #3]
 800dc08:	4619      	mov	r1, r3
 800dc0a:	f7fe fd9d 	bl	800c748 <USBD_LL_DataInStage>
}
 800dc0e:	bf00      	nop
 800dc10:	3708      	adds	r7, #8
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}

0800dc16 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc16:	b580      	push	{r7, lr}
 800dc18:	b082      	sub	sp, #8
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800dc24:	4618      	mov	r0, r3
 800dc26:	f7fe feb1 	bl	800c98c <USBD_LL_SOF>
}
 800dc2a:	bf00      	nop
 800dc2c:	3708      	adds	r7, #8
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}

0800dc32 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc32:	b580      	push	{r7, lr}
 800dc34:	b084      	sub	sp, #16
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	689b      	ldr	r3, [r3, #8]
 800dc42:	2b02      	cmp	r3, #2
 800dc44:	d001      	beq.n	800dc4a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dc46:	f7f5 fe6d 	bl	8003924 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800dc50:	7bfa      	ldrb	r2, [r7, #15]
 800dc52:	4611      	mov	r1, r2
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7fe fe5b 	bl	800c910 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800dc60:	4618      	mov	r0, r3
 800dc62:	f7fe fe07 	bl	800c874 <USBD_LL_Reset>
}
 800dc66:	bf00      	nop
 800dc68:	3710      	adds	r7, #16
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
	...

0800dc70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7fe fe56 	bl	800c930 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	699b      	ldr	r3, [r3, #24]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d005      	beq.n	800dc98 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dc8c:	4b04      	ldr	r3, [pc, #16]	; (800dca0 <HAL_PCD_SuspendCallback+0x30>)
 800dc8e:	691b      	ldr	r3, [r3, #16]
 800dc90:	4a03      	ldr	r2, [pc, #12]	; (800dca0 <HAL_PCD_SuspendCallback+0x30>)
 800dc92:	f043 0306 	orr.w	r3, r3, #6
 800dc96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dc98:	bf00      	nop
 800dc9a:	3708      	adds	r7, #8
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	e000ed00 	.word	0xe000ed00

0800dca4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b082      	sub	sp, #8
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	699b      	ldr	r3, [r3, #24]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d007      	beq.n	800dcc4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dcb4:	4b08      	ldr	r3, [pc, #32]	; (800dcd8 <HAL_PCD_ResumeCallback+0x34>)
 800dcb6:	691b      	ldr	r3, [r3, #16]
 800dcb8:	4a07      	ldr	r2, [pc, #28]	; (800dcd8 <HAL_PCD_ResumeCallback+0x34>)
 800dcba:	f023 0306 	bic.w	r3, r3, #6
 800dcbe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800dcc0:	f000 fab6 	bl	800e230 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7fe fe46 	bl	800c95c <USBD_LL_Resume>
}
 800dcd0:	bf00      	nop
 800dcd2:	3708      	adds	r7, #8
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}
 800dcd8:	e000ed00 	.word	0xe000ed00

0800dcdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800dce4:	f7f9 fbc6 	bl	8007474 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800dce8:	4a2b      	ldr	r2, [pc, #172]	; (800dd98 <USBD_LL_Init+0xbc>)
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	4a29      	ldr	r2, [pc, #164]	; (800dd98 <USBD_LL_Init+0xbc>)
 800dcf4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800dcf8:	4b27      	ldr	r3, [pc, #156]	; (800dd98 <USBD_LL_Init+0xbc>)
 800dcfa:	4a28      	ldr	r2, [pc, #160]	; (800dd9c <USBD_LL_Init+0xc0>)
 800dcfc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800dcfe:	4b26      	ldr	r3, [pc, #152]	; (800dd98 <USBD_LL_Init+0xbc>)
 800dd00:	2208      	movs	r2, #8
 800dd02:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800dd04:	4b24      	ldr	r3, [pc, #144]	; (800dd98 <USBD_LL_Init+0xbc>)
 800dd06:	2202      	movs	r2, #2
 800dd08:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dd0a:	4b23      	ldr	r3, [pc, #140]	; (800dd98 <USBD_LL_Init+0xbc>)
 800dd0c:	2202      	movs	r2, #2
 800dd0e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800dd10:	4b21      	ldr	r3, [pc, #132]	; (800dd98 <USBD_LL_Init+0xbc>)
 800dd12:	2200      	movs	r2, #0
 800dd14:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800dd16:	4b20      	ldr	r3, [pc, #128]	; (800dd98 <USBD_LL_Init+0xbc>)
 800dd18:	2200      	movs	r2, #0
 800dd1a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800dd1c:	4b1e      	ldr	r3, [pc, #120]	; (800dd98 <USBD_LL_Init+0xbc>)
 800dd1e:	2200      	movs	r2, #0
 800dd20:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800dd22:	4b1d      	ldr	r3, [pc, #116]	; (800dd98 <USBD_LL_Init+0xbc>)
 800dd24:	2200      	movs	r2, #0
 800dd26:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800dd28:	481b      	ldr	r0, [pc, #108]	; (800dd98 <USBD_LL_Init+0xbc>)
 800dd2a:	f7f7 fdb3 	bl	8005894 <HAL_PCD_Init>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d001      	beq.n	800dd38 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800dd34:	f7f5 fdf6 	bl	8003924 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dd3e:	2318      	movs	r3, #24
 800dd40:	2200      	movs	r2, #0
 800dd42:	2100      	movs	r1, #0
 800dd44:	f7f9 fac3 	bl	80072ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dd4e:	2358      	movs	r3, #88	; 0x58
 800dd50:	2200      	movs	r2, #0
 800dd52:	2180      	movs	r1, #128	; 0x80
 800dd54:	f7f9 fabb 	bl	80072ce <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dd5e:	23c0      	movs	r3, #192	; 0xc0
 800dd60:	2200      	movs	r2, #0
 800dd62:	2181      	movs	r1, #129	; 0x81
 800dd64:	f7f9 fab3 	bl	80072ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dd6e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800dd72:	2200      	movs	r2, #0
 800dd74:	2101      	movs	r1, #1
 800dd76:	f7f9 faaa 	bl	80072ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dd80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd84:	2200      	movs	r2, #0
 800dd86:	2182      	movs	r1, #130	; 0x82
 800dd88:	f7f9 faa1 	bl	80072ce <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800dd8c:	2300      	movs	r3, #0
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3708      	adds	r7, #8
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	20000cdc 	.word	0x20000cdc
 800dd9c:	40006800 	.word	0x40006800

0800dda0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b084      	sub	sp, #16
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddac:	2300      	movs	r3, #0
 800ddae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f7f7 fe83 	bl	8005ac2 <HAL_PCD_Start>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ddc0:	7bbb      	ldrb	r3, [r7, #14]
 800ddc2:	2b03      	cmp	r3, #3
 800ddc4:	d816      	bhi.n	800ddf4 <USBD_LL_Start+0x54>
 800ddc6:	a201      	add	r2, pc, #4	; (adr r2, 800ddcc <USBD_LL_Start+0x2c>)
 800ddc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddcc:	0800dddd 	.word	0x0800dddd
 800ddd0:	0800dde3 	.word	0x0800dde3
 800ddd4:	0800dde9 	.word	0x0800dde9
 800ddd8:	0800ddef 	.word	0x0800ddef
    case HAL_OK :
      usb_status = USBD_OK;
 800dddc:	2300      	movs	r3, #0
 800ddde:	73fb      	strb	r3, [r7, #15]
    break;
 800dde0:	e00b      	b.n	800ddfa <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dde2:	2303      	movs	r3, #3
 800dde4:	73fb      	strb	r3, [r7, #15]
    break;
 800dde6:	e008      	b.n	800ddfa <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dde8:	2301      	movs	r3, #1
 800ddea:	73fb      	strb	r3, [r7, #15]
    break;
 800ddec:	e005      	b.n	800ddfa <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ddee:	2303      	movs	r3, #3
 800ddf0:	73fb      	strb	r3, [r7, #15]
    break;
 800ddf2:	e002      	b.n	800ddfa <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800ddf4:	2303      	movs	r3, #3
 800ddf6:	73fb      	strb	r3, [r7, #15]
    break;
 800ddf8:	bf00      	nop
  }
  return usb_status;
 800ddfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3710      	adds	r7, #16
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	4608      	mov	r0, r1
 800de0e:	4611      	mov	r1, r2
 800de10:	461a      	mov	r2, r3
 800de12:	4603      	mov	r3, r0
 800de14:	70fb      	strb	r3, [r7, #3]
 800de16:	460b      	mov	r3, r1
 800de18:	70bb      	strb	r3, [r7, #2]
 800de1a:	4613      	mov	r3, r2
 800de1c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de1e:	2300      	movs	r3, #0
 800de20:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de22:	2300      	movs	r3, #0
 800de24:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800de2c:	78bb      	ldrb	r3, [r7, #2]
 800de2e:	883a      	ldrh	r2, [r7, #0]
 800de30:	78f9      	ldrb	r1, [r7, #3]
 800de32:	f7f7 ffb4 	bl	8005d9e <HAL_PCD_EP_Open>
 800de36:	4603      	mov	r3, r0
 800de38:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800de3a:	7bbb      	ldrb	r3, [r7, #14]
 800de3c:	2b03      	cmp	r3, #3
 800de3e:	d817      	bhi.n	800de70 <USBD_LL_OpenEP+0x6c>
 800de40:	a201      	add	r2, pc, #4	; (adr r2, 800de48 <USBD_LL_OpenEP+0x44>)
 800de42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de46:	bf00      	nop
 800de48:	0800de59 	.word	0x0800de59
 800de4c:	0800de5f 	.word	0x0800de5f
 800de50:	0800de65 	.word	0x0800de65
 800de54:	0800de6b 	.word	0x0800de6b
    case HAL_OK :
      usb_status = USBD_OK;
 800de58:	2300      	movs	r3, #0
 800de5a:	73fb      	strb	r3, [r7, #15]
    break;
 800de5c:	e00b      	b.n	800de76 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800de5e:	2303      	movs	r3, #3
 800de60:	73fb      	strb	r3, [r7, #15]
    break;
 800de62:	e008      	b.n	800de76 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800de64:	2301      	movs	r3, #1
 800de66:	73fb      	strb	r3, [r7, #15]
    break;
 800de68:	e005      	b.n	800de76 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800de6a:	2303      	movs	r3, #3
 800de6c:	73fb      	strb	r3, [r7, #15]
    break;
 800de6e:	e002      	b.n	800de76 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800de70:	2303      	movs	r3, #3
 800de72:	73fb      	strb	r3, [r7, #15]
    break;
 800de74:	bf00      	nop
  }
  return usb_status;
 800de76:	7bfb      	ldrb	r3, [r7, #15]
}
 800de78:	4618      	mov	r0, r3
 800de7a:	3710      	adds	r7, #16
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	460b      	mov	r3, r1
 800de8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de8c:	2300      	movs	r3, #0
 800de8e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de90:	2300      	movs	r3, #0
 800de92:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800de9a:	78fa      	ldrb	r2, [r7, #3]
 800de9c:	4611      	mov	r1, r2
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7f7 ffe5 	bl	8005e6e <HAL_PCD_EP_Close>
 800dea4:	4603      	mov	r3, r0
 800dea6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dea8:	7bbb      	ldrb	r3, [r7, #14]
 800deaa:	2b03      	cmp	r3, #3
 800deac:	d816      	bhi.n	800dedc <USBD_LL_CloseEP+0x5c>
 800deae:	a201      	add	r2, pc, #4	; (adr r2, 800deb4 <USBD_LL_CloseEP+0x34>)
 800deb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deb4:	0800dec5 	.word	0x0800dec5
 800deb8:	0800decb 	.word	0x0800decb
 800debc:	0800ded1 	.word	0x0800ded1
 800dec0:	0800ded7 	.word	0x0800ded7
    case HAL_OK :
      usb_status = USBD_OK;
 800dec4:	2300      	movs	r3, #0
 800dec6:	73fb      	strb	r3, [r7, #15]
    break;
 800dec8:	e00b      	b.n	800dee2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800deca:	2303      	movs	r3, #3
 800decc:	73fb      	strb	r3, [r7, #15]
    break;
 800dece:	e008      	b.n	800dee2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ded0:	2301      	movs	r3, #1
 800ded2:	73fb      	strb	r3, [r7, #15]
    break;
 800ded4:	e005      	b.n	800dee2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ded6:	2303      	movs	r3, #3
 800ded8:	73fb      	strb	r3, [r7, #15]
    break;
 800deda:	e002      	b.n	800dee2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800dedc:	2303      	movs	r3, #3
 800dede:	73fb      	strb	r3, [r7, #15]
    break;
 800dee0:	bf00      	nop
  }
  return usb_status;
 800dee2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3710      	adds	r7, #16
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	460b      	mov	r3, r1
 800def6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800def8:	2300      	movs	r3, #0
 800defa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800defc:	2300      	movs	r3, #0
 800defe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800df06:	78fa      	ldrb	r2, [r7, #3]
 800df08:	4611      	mov	r1, r2
 800df0a:	4618      	mov	r0, r3
 800df0c:	f7f8 f893 	bl	8006036 <HAL_PCD_EP_SetStall>
 800df10:	4603      	mov	r3, r0
 800df12:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800df14:	7bbb      	ldrb	r3, [r7, #14]
 800df16:	2b03      	cmp	r3, #3
 800df18:	d816      	bhi.n	800df48 <USBD_LL_StallEP+0x5c>
 800df1a:	a201      	add	r2, pc, #4	; (adr r2, 800df20 <USBD_LL_StallEP+0x34>)
 800df1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df20:	0800df31 	.word	0x0800df31
 800df24:	0800df37 	.word	0x0800df37
 800df28:	0800df3d 	.word	0x0800df3d
 800df2c:	0800df43 	.word	0x0800df43
    case HAL_OK :
      usb_status = USBD_OK;
 800df30:	2300      	movs	r3, #0
 800df32:	73fb      	strb	r3, [r7, #15]
    break;
 800df34:	e00b      	b.n	800df4e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df36:	2303      	movs	r3, #3
 800df38:	73fb      	strb	r3, [r7, #15]
    break;
 800df3a:	e008      	b.n	800df4e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df3c:	2301      	movs	r3, #1
 800df3e:	73fb      	strb	r3, [r7, #15]
    break;
 800df40:	e005      	b.n	800df4e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df42:	2303      	movs	r3, #3
 800df44:	73fb      	strb	r3, [r7, #15]
    break;
 800df46:	e002      	b.n	800df4e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800df48:	2303      	movs	r3, #3
 800df4a:	73fb      	strb	r3, [r7, #15]
    break;
 800df4c:	bf00      	nop
  }
  return usb_status;
 800df4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800df50:	4618      	mov	r0, r3
 800df52:	3710      	adds	r7, #16
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}

0800df58 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b084      	sub	sp, #16
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	460b      	mov	r3, r1
 800df62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df64:	2300      	movs	r3, #0
 800df66:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df68:	2300      	movs	r3, #0
 800df6a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800df72:	78fa      	ldrb	r2, [r7, #3]
 800df74:	4611      	mov	r1, r2
 800df76:	4618      	mov	r0, r3
 800df78:	f7f8 f8bf 	bl	80060fa <HAL_PCD_EP_ClrStall>
 800df7c:	4603      	mov	r3, r0
 800df7e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800df80:	7bbb      	ldrb	r3, [r7, #14]
 800df82:	2b03      	cmp	r3, #3
 800df84:	d816      	bhi.n	800dfb4 <USBD_LL_ClearStallEP+0x5c>
 800df86:	a201      	add	r2, pc, #4	; (adr r2, 800df8c <USBD_LL_ClearStallEP+0x34>)
 800df88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df8c:	0800df9d 	.word	0x0800df9d
 800df90:	0800dfa3 	.word	0x0800dfa3
 800df94:	0800dfa9 	.word	0x0800dfa9
 800df98:	0800dfaf 	.word	0x0800dfaf
    case HAL_OK :
      usb_status = USBD_OK;
 800df9c:	2300      	movs	r3, #0
 800df9e:	73fb      	strb	r3, [r7, #15]
    break;
 800dfa0:	e00b      	b.n	800dfba <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dfa2:	2303      	movs	r3, #3
 800dfa4:	73fb      	strb	r3, [r7, #15]
    break;
 800dfa6:	e008      	b.n	800dfba <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	73fb      	strb	r3, [r7, #15]
    break;
 800dfac:	e005      	b.n	800dfba <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dfae:	2303      	movs	r3, #3
 800dfb0:	73fb      	strb	r3, [r7, #15]
    break;
 800dfb2:	e002      	b.n	800dfba <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800dfb4:	2303      	movs	r3, #3
 800dfb6:	73fb      	strb	r3, [r7, #15]
    break;
 800dfb8:	bf00      	nop
  }
  return usb_status;
 800dfba:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3710      	adds	r7, #16
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}

0800dfc4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b085      	sub	sp, #20
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	460b      	mov	r3, r1
 800dfce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dfd6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dfd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	da0c      	bge.n	800dffa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dfe0:	78fb      	ldrb	r3, [r7, #3]
 800dfe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfe6:	68f9      	ldr	r1, [r7, #12]
 800dfe8:	1c5a      	adds	r2, r3, #1
 800dfea:	4613      	mov	r3, r2
 800dfec:	009b      	lsls	r3, r3, #2
 800dfee:	4413      	add	r3, r2
 800dff0:	00db      	lsls	r3, r3, #3
 800dff2:	440b      	add	r3, r1
 800dff4:	3306      	adds	r3, #6
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	e00b      	b.n	800e012 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dffa:	78fb      	ldrb	r3, [r7, #3]
 800dffc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e000:	68f9      	ldr	r1, [r7, #12]
 800e002:	4613      	mov	r3, r2
 800e004:	009b      	lsls	r3, r3, #2
 800e006:	4413      	add	r3, r2
 800e008:	00db      	lsls	r3, r3, #3
 800e00a:	440b      	add	r3, r1
 800e00c:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800e010:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e012:	4618      	mov	r0, r3
 800e014:	3714      	adds	r7, #20
 800e016:	46bd      	mov	sp, r7
 800e018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01c:	4770      	bx	lr
	...

0800e020 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	460b      	mov	r3, r1
 800e02a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e02c:	2300      	movs	r3, #0
 800e02e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e030:	2300      	movs	r3, #0
 800e032:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e03a:	78fa      	ldrb	r2, [r7, #3]
 800e03c:	4611      	mov	r1, r2
 800e03e:	4618      	mov	r0, r3
 800e040:	f7f7 fe88 	bl	8005d54 <HAL_PCD_SetAddress>
 800e044:	4603      	mov	r3, r0
 800e046:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e048:	7bbb      	ldrb	r3, [r7, #14]
 800e04a:	2b03      	cmp	r3, #3
 800e04c:	d816      	bhi.n	800e07c <USBD_LL_SetUSBAddress+0x5c>
 800e04e:	a201      	add	r2, pc, #4	; (adr r2, 800e054 <USBD_LL_SetUSBAddress+0x34>)
 800e050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e054:	0800e065 	.word	0x0800e065
 800e058:	0800e06b 	.word	0x0800e06b
 800e05c:	0800e071 	.word	0x0800e071
 800e060:	0800e077 	.word	0x0800e077
    case HAL_OK :
      usb_status = USBD_OK;
 800e064:	2300      	movs	r3, #0
 800e066:	73fb      	strb	r3, [r7, #15]
    break;
 800e068:	e00b      	b.n	800e082 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e06a:	2303      	movs	r3, #3
 800e06c:	73fb      	strb	r3, [r7, #15]
    break;
 800e06e:	e008      	b.n	800e082 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e070:	2301      	movs	r3, #1
 800e072:	73fb      	strb	r3, [r7, #15]
    break;
 800e074:	e005      	b.n	800e082 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e076:	2303      	movs	r3, #3
 800e078:	73fb      	strb	r3, [r7, #15]
    break;
 800e07a:	e002      	b.n	800e082 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800e07c:	2303      	movs	r3, #3
 800e07e:	73fb      	strb	r3, [r7, #15]
    break;
 800e080:	bf00      	nop
  }
  return usb_status;
 800e082:	7bfb      	ldrb	r3, [r7, #15]
}
 800e084:	4618      	mov	r0, r3
 800e086:	3710      	adds	r7, #16
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}

0800e08c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b086      	sub	sp, #24
 800e090:	af00      	add	r7, sp, #0
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	607a      	str	r2, [r7, #4]
 800e096:	603b      	str	r3, [r7, #0]
 800e098:	460b      	mov	r3, r1
 800e09a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e09c:	2300      	movs	r3, #0
 800e09e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e0aa:	7af9      	ldrb	r1, [r7, #11]
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	687a      	ldr	r2, [r7, #4]
 800e0b0:	f7f7 ff7d 	bl	8005fae <HAL_PCD_EP_Transmit>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800e0b8:	7dbb      	ldrb	r3, [r7, #22]
 800e0ba:	2b03      	cmp	r3, #3
 800e0bc:	d816      	bhi.n	800e0ec <USBD_LL_Transmit+0x60>
 800e0be:	a201      	add	r2, pc, #4	; (adr r2, 800e0c4 <USBD_LL_Transmit+0x38>)
 800e0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0c4:	0800e0d5 	.word	0x0800e0d5
 800e0c8:	0800e0db 	.word	0x0800e0db
 800e0cc:	0800e0e1 	.word	0x0800e0e1
 800e0d0:	0800e0e7 	.word	0x0800e0e7
    case HAL_OK :
      usb_status = USBD_OK;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	75fb      	strb	r3, [r7, #23]
    break;
 800e0d8:	e00b      	b.n	800e0f2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e0da:	2303      	movs	r3, #3
 800e0dc:	75fb      	strb	r3, [r7, #23]
    break;
 800e0de:	e008      	b.n	800e0f2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	75fb      	strb	r3, [r7, #23]
    break;
 800e0e4:	e005      	b.n	800e0f2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e0e6:	2303      	movs	r3, #3
 800e0e8:	75fb      	strb	r3, [r7, #23]
    break;
 800e0ea:	e002      	b.n	800e0f2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800e0ec:	2303      	movs	r3, #3
 800e0ee:	75fb      	strb	r3, [r7, #23]
    break;
 800e0f0:	bf00      	nop
  }
  return usb_status;
 800e0f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3718      	adds	r7, #24
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b086      	sub	sp, #24
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	607a      	str	r2, [r7, #4]
 800e106:	603b      	str	r3, [r7, #0]
 800e108:	460b      	mov	r3, r1
 800e10a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e10c:	2300      	movs	r3, #0
 800e10e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e110:	2300      	movs	r3, #0
 800e112:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e11a:	7af9      	ldrb	r1, [r7, #11]
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	687a      	ldr	r2, [r7, #4]
 800e120:	f7f7 feef 	bl	8005f02 <HAL_PCD_EP_Receive>
 800e124:	4603      	mov	r3, r0
 800e126:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800e128:	7dbb      	ldrb	r3, [r7, #22]
 800e12a:	2b03      	cmp	r3, #3
 800e12c:	d816      	bhi.n	800e15c <USBD_LL_PrepareReceive+0x60>
 800e12e:	a201      	add	r2, pc, #4	; (adr r2, 800e134 <USBD_LL_PrepareReceive+0x38>)
 800e130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e134:	0800e145 	.word	0x0800e145
 800e138:	0800e14b 	.word	0x0800e14b
 800e13c:	0800e151 	.word	0x0800e151
 800e140:	0800e157 	.word	0x0800e157
    case HAL_OK :
      usb_status = USBD_OK;
 800e144:	2300      	movs	r3, #0
 800e146:	75fb      	strb	r3, [r7, #23]
    break;
 800e148:	e00b      	b.n	800e162 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e14a:	2303      	movs	r3, #3
 800e14c:	75fb      	strb	r3, [r7, #23]
    break;
 800e14e:	e008      	b.n	800e162 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e150:	2301      	movs	r3, #1
 800e152:	75fb      	strb	r3, [r7, #23]
    break;
 800e154:	e005      	b.n	800e162 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e156:	2303      	movs	r3, #3
 800e158:	75fb      	strb	r3, [r7, #23]
    break;
 800e15a:	e002      	b.n	800e162 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800e15c:	2303      	movs	r3, #3
 800e15e:	75fb      	strb	r3, [r7, #23]
    break;
 800e160:	bf00      	nop
  }
  return usb_status;
 800e162:	7dfb      	ldrb	r3, [r7, #23]
}
 800e164:	4618      	mov	r0, r3
 800e166:	3718      	adds	r7, #24
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}

0800e16c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b082      	sub	sp, #8
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
 800e174:	460b      	mov	r3, r1
 800e176:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e17e:	78fa      	ldrb	r2, [r7, #3]
 800e180:	4611      	mov	r1, r2
 800e182:	4618      	mov	r0, r3
 800e184:	f7f7 fefb 	bl	8005f7e <HAL_PCD_EP_GetRxCount>
 800e188:	4603      	mov	r3, r0
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3708      	adds	r7, #8
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
	...

0800e194 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	460b      	mov	r3, r1
 800e19e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e1a0:	78fb      	ldrb	r3, [r7, #3]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d002      	beq.n	800e1ac <HAL_PCDEx_LPM_Callback+0x18>
 800e1a6:	2b01      	cmp	r3, #1
 800e1a8:	d013      	beq.n	800e1d2 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e1aa:	e023      	b.n	800e1f4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	699b      	ldr	r3, [r3, #24]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d007      	beq.n	800e1c4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e1b4:	f000 f83c 	bl	800e230 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e1b8:	4b10      	ldr	r3, [pc, #64]	; (800e1fc <HAL_PCDEx_LPM_Callback+0x68>)
 800e1ba:	691b      	ldr	r3, [r3, #16]
 800e1bc:	4a0f      	ldr	r2, [pc, #60]	; (800e1fc <HAL_PCDEx_LPM_Callback+0x68>)
 800e1be:	f023 0306 	bic.w	r3, r3, #6
 800e1c2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f7fe fbc6 	bl	800c95c <USBD_LL_Resume>
    break;
 800e1d0:	e010      	b.n	800e1f4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7fe fba9 	bl	800c930 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	699b      	ldr	r3, [r3, #24]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d005      	beq.n	800e1f2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e1e6:	4b05      	ldr	r3, [pc, #20]	; (800e1fc <HAL_PCDEx_LPM_Callback+0x68>)
 800e1e8:	691b      	ldr	r3, [r3, #16]
 800e1ea:	4a04      	ldr	r2, [pc, #16]	; (800e1fc <HAL_PCDEx_LPM_Callback+0x68>)
 800e1ec:	f043 0306 	orr.w	r3, r3, #6
 800e1f0:	6113      	str	r3, [r2, #16]
    break;
 800e1f2:	bf00      	nop
}
 800e1f4:	bf00      	nop
 800e1f6:	3708      	adds	r7, #8
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}
 800e1fc:	e000ed00 	.word	0xe000ed00

0800e200 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e200:	b480      	push	{r7}
 800e202:	b083      	sub	sp, #12
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e208:	4b03      	ldr	r3, [pc, #12]	; (800e218 <USBD_static_malloc+0x18>)
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	370c      	adds	r7, #12
 800e20e:	46bd      	mov	sp, r7
 800e210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e214:	4770      	bx	lr
 800e216:	bf00      	nop
 800e218:	20000fd8 	.word	0x20000fd8

0800e21c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e21c:	b480      	push	{r7}
 800e21e:	b083      	sub	sp, #12
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]

}
 800e224:	bf00      	nop
 800e226:	370c      	adds	r7, #12
 800e228:	46bd      	mov	sp, r7
 800e22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22e:	4770      	bx	lr

0800e230 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e230:	b480      	push	{r7}
 800e232:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800e234:	bf00      	nop
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr
	...

0800e240 <__libc_init_array>:
 800e240:	b570      	push	{r4, r5, r6, lr}
 800e242:	4d0d      	ldr	r5, [pc, #52]	; (800e278 <__libc_init_array+0x38>)
 800e244:	4c0d      	ldr	r4, [pc, #52]	; (800e27c <__libc_init_array+0x3c>)
 800e246:	1b64      	subs	r4, r4, r5
 800e248:	10a4      	asrs	r4, r4, #2
 800e24a:	2600      	movs	r6, #0
 800e24c:	42a6      	cmp	r6, r4
 800e24e:	d109      	bne.n	800e264 <__libc_init_array+0x24>
 800e250:	4d0b      	ldr	r5, [pc, #44]	; (800e280 <__libc_init_array+0x40>)
 800e252:	4c0c      	ldr	r4, [pc, #48]	; (800e284 <__libc_init_array+0x44>)
 800e254:	f000 f820 	bl	800e298 <_init>
 800e258:	1b64      	subs	r4, r4, r5
 800e25a:	10a4      	asrs	r4, r4, #2
 800e25c:	2600      	movs	r6, #0
 800e25e:	42a6      	cmp	r6, r4
 800e260:	d105      	bne.n	800e26e <__libc_init_array+0x2e>
 800e262:	bd70      	pop	{r4, r5, r6, pc}
 800e264:	f855 3b04 	ldr.w	r3, [r5], #4
 800e268:	4798      	blx	r3
 800e26a:	3601      	adds	r6, #1
 800e26c:	e7ee      	b.n	800e24c <__libc_init_array+0xc>
 800e26e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e272:	4798      	blx	r3
 800e274:	3601      	adds	r6, #1
 800e276:	e7f2      	b.n	800e25e <__libc_init_array+0x1e>
 800e278:	0800e35c 	.word	0x0800e35c
 800e27c:	0800e35c 	.word	0x0800e35c
 800e280:	0800e35c 	.word	0x0800e35c
 800e284:	0800e364 	.word	0x0800e364

0800e288 <memset>:
 800e288:	4402      	add	r2, r0
 800e28a:	4603      	mov	r3, r0
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d100      	bne.n	800e292 <memset+0xa>
 800e290:	4770      	bx	lr
 800e292:	f803 1b01 	strb.w	r1, [r3], #1
 800e296:	e7f9      	b.n	800e28c <memset+0x4>

0800e298 <_init>:
 800e298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e29a:	bf00      	nop
 800e29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e29e:	bc08      	pop	{r3}
 800e2a0:	469e      	mov	lr, r3
 800e2a2:	4770      	bx	lr

0800e2a4 <_fini>:
 800e2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2a6:	bf00      	nop
 800e2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2aa:	bc08      	pop	{r3}
 800e2ac:	469e      	mov	lr, r3
 800e2ae:	4770      	bx	lr
