
Cobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf80  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800c10c  0800c10c  0001c10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1b0  0800c1b0  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1b0  0800c1b0  0001c1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1b8  0800c1b8  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c1b8  0800c1b8  0001c1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1c0  0800c1c0  0001c1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800c1c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000150c  20000190  0800c354  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000169c  0800c354  0002169c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002247b  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057e9  00000000  00000000  0004263b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c18  00000000  00000000  00047e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001970  00000000  00000000  00049a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ceb9  00000000  00000000  0004b3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025618  00000000  00000000  00078269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f007c  00000000  00000000  0009d881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018d8fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072a8  00000000  00000000  0018d950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000190 	.word	0x20000190
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800c0f4 	.word	0x0800c0f4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000194 	.word	0x20000194
 80001c8:	0800c0f4 	.word	0x0800c0f4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <_ZN11TaskHandlerC1Ev>:


#include "stdint.h"


class TaskHandler{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2200      	movs	r2, #0
 80004dc:	701a      	strb	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2200      	movs	r2, #0
 80004e2:	705a      	strb	r2, [r3, #1]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2200      	movs	r2, #0
 80004e8:	709a      	strb	r2, [r3, #2]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2200      	movs	r2, #0
 80004ee:	70da      	strb	r2, [r3, #3]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2200      	movs	r2, #0
 80004f4:	711a      	strb	r2, [r3, #4]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2201      	movs	r2, #1
 80004fa:	715a      	strb	r2, [r3, #5]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2201      	movs	r2, #1
 8000500:	719a      	strb	r2, [r3, #6]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2201      	movs	r2, #1
 8000506:	71da      	strb	r2, [r3, #7]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2201      	movs	r2, #1
 800050c:	721a      	strb	r2, [r3, #8]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2201      	movs	r2, #1
 8000512:	725a      	strb	r2, [r3, #9]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <_ZN7AppMainC1Ev>:
#include "AppMain.h"
#include "../Tools/Delay.h"

extern TIM_HandleTypeDef htim7;

AppMain::AppMain()
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af02      	add	r7, sp, #8
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4618      	mov	r0, r3
 8000530:	f000 f96a 	bl	8000808 <_ZN10RFM95_LoRaC1Ev>
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3320      	adds	r3, #32
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	3320      	adds	r3, #32
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff ffc3 	bl	80004d0 <_ZN11TaskHandlerC1Ev>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8000550:	2301      	movs	r3, #1
 8000552:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000556:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800055a:	f000 f90c 	bl	8000776 <_ZN3LEDC1EP12GPIO_TypeDeftb>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8000564:	2301      	movs	r3, #1
 8000566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800056a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800056e:	f000 f902 	bl	8000776 <_ZN3LEDC1EP12GPIO_TypeDeftb>
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8000578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000586:	492b      	ldr	r1, [pc, #172]	; (8000634 <_ZN7AppMainC1Ev+0x110>)
 8000588:	f000 f8bc 	bl	8000704 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 8000592:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	4b27      	ldr	r3, [pc, #156]	; (8000638 <_ZN7AppMainC1Ev+0x114>)
 800059a:	2204      	movs	r2, #4
 800059c:	4926      	ldr	r1, [pc, #152]	; (8000638 <_ZN7AppMainC1Ev+0x114>)
 800059e:	f000 f8b1 	bl	8000704 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 80005a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	4b21      	ldr	r3, [pc, #132]	; (8000634 <_ZN7AppMainC1Ev+0x110>)
 80005b0:	2280      	movs	r2, #128	; 0x80
 80005b2:	4920      	ldr	r1, [pc, #128]	; (8000634 <_ZN7AppMainC1Ev+0x110>)
 80005b4:	f000 f8a6 	bl	8000704 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80005be:	2301      	movs	r3, #1
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <_ZN7AppMainC1Ev+0x114>)
 80005c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005c8:	491b      	ldr	r1, [pc, #108]	; (8000638 <_ZN7AppMainC1Ev+0x114>)
 80005ca:	f000 f89b 	bl	8000704 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80005d4:	2340      	movs	r3, #64	; 0x40
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	4b16      	ldr	r3, [pc, #88]	; (8000634 <_ZN7AppMainC1Ev+0x110>)
 80005da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005de:	4916      	ldr	r1, [pc, #88]	; (8000638 <_ZN7AppMainC1Ev+0x114>)
 80005e0:	f000 f890 	bl	8000704 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 80005ea:	2302      	movs	r3, #2
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <_ZN7AppMainC1Ev+0x114>)
 80005f0:	2210      	movs	r2, #16
 80005f2:	4910      	ldr	r1, [pc, #64]	; (8000634 <_ZN7AppMainC1Ev+0x110>)
 80005f4:	f000 f886 	bl	8000704 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f103 009c 	add.w	r0, r3, #156	; 0x9c
 80005fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <_ZN7AppMainC1Ev+0x114>)
 8000606:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800060a:	490b      	ldr	r1, [pc, #44]	; (8000638 <_ZN7AppMainC1Ev+0x114>)
 800060c:	f000 f87a 	bl	8000704 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f103 00ac 	add.w	r0, r3, #172	; 0xac
 8000616:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <_ZN7AppMainC1Ev+0x110>)
 800061e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000622:	4904      	ldr	r1, [pc, #16]	; (8000634 <_ZN7AppMainC1Ev+0x110>)
 8000624:	f000 f86e 	bl	8000704 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
{

}
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4618      	mov	r0, r3
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	48000800 	.word	0x48000800
 8000638:	48000400 	.word	0x48000400

0800063c <_ZN7AppMain7StartupEv>:


void AppMain::Startup()
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Start_IT(&htim7);
 8000644:	4820      	ldr	r0, [pc, #128]	; (80006c8 <_ZN7AppMain7StartupEv+0x8c>)
 8000646:	f006 fdd7 	bl	80071f8 <HAL_TIM_Base_Start_IT>

	LED_Green.OFF();
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	332c      	adds	r3, #44	; 0x2c
 800064e:	4618      	mov	r0, r3
 8000650:	f000 f8ac 	bl	80007ac <_ZN3LED3OFFEv>
	LED_Red.OFF();
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3334      	adds	r3, #52	; 0x34
 8000658:	4618      	mov	r0, r3
 800065a:	f000 f8a7 	bl	80007ac <_ZN3LED3OFFEv>

	if(rfm95.InitRFM()){
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fbdb 	bl	8000e1c <_ZN10RFM95_LoRa7InitRFMEv>

	}

	Delay::DWT_Init();
 8000666:	f000 fcc7 	bl	8000ff8 <_ZN5Delay8DWT_InitEv>

	closed.Reset();
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	333c      	adds	r3, #60	; 0x3c
 800066e:	4618      	mov	r0, r3
 8000670:	f000 f863 	bl	800073a <_ZN10DigitalOut5ResetEv>
	open.Reset();
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	334c      	adds	r3, #76	; 0x4c
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f85e 	bl	800073a <_ZN10DigitalOut5ResetEv>
	viseReady.Reset();
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	335c      	adds	r3, #92	; 0x5c
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f859 	bl	800073a <_ZN10DigitalOut5ResetEv>
	error.Reset();
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	336c      	adds	r3, #108	; 0x6c
 800068c:	4618      	mov	r0, r3
 800068e:	f000 f854 	bl	800073a <_ZN10DigitalOut5ResetEv>
	batteryLow.Reset();
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	337c      	adds	r3, #124	; 0x7c
 8000696:	4618      	mov	r0, r3
 8000698:	f000 f84f 	bl	800073a <_ZN10DigitalOut5ResetEv>
	signal.Reset();
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	338c      	adds	r3, #140	; 0x8c
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f84a 	bl	800073a <_ZN10DigitalOut5ResetEv>
	res1.Reset();
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	339c      	adds	r3, #156	; 0x9c
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f845 	bl	800073a <_ZN10DigitalOut5ResetEv>
	res2.Reset();
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	33ac      	adds	r3, #172	; 0xac
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 f840 	bl	800073a <_ZN10DigitalOut5ResetEv>


	Main();
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f000 f806 	bl	80006cc <_ZN7AppMain4MainEv>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000048c 	.word	0x2000048c

080006cc <_ZN7AppMain4MainEv>:



void AppMain::Main()
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]

	while(1)
	{


		if(taskStatus.isErrorTask()){
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3320      	adds	r3, #32
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 fc56 	bl	8000f8a <_ZN11TaskHandler11isErrorTaskEv>

		}


		if(taskStatus.isLEDUpdateTask()){
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3320      	adds	r3, #32
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fc6c 	bl	8000fc0 <_ZN11TaskHandler15isLEDUpdateTaskEv>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d004      	beq.n	80006f8 <_ZN7AppMain4MainEv+0x2c>
			LED_Green.Toggle();
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	332c      	adds	r3, #44	; 0x2c
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 f877 	bl	80007e6 <_ZN3LED6ToggleEv>
		}


		if(taskStatus.isComTask()){
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3320      	adds	r3, #32
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 fc29 	bl	8000f54 <_ZN11TaskHandler9isComTaskEv>
		if(taskStatus.isErrorTask()){
 8000702:	e7e7      	b.n	80006d4 <_ZN7AppMain4MainEv+0x8>

08000704 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>:
 */

#include "DO.h"
#include "../Tools/Delay.h"

DigitalOut::DigitalOut(GPIO_TypeDef* GPIOx_N, uint16_t GPIO_Pin_N, GPIO_TypeDef* GPIOx_P, uint16_t GPIO_Pin_P){
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	4613      	mov	r3, r2
 8000712:	80fb      	strh	r3, [r7, #6]
	this->GPIO_Pin_N = GPIO_Pin_N;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	88fa      	ldrh	r2, [r7, #6]
 8000718:	809a      	strh	r2, [r3, #4]
	this->GPIOx_N = GPIOx_N;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	68ba      	ldr	r2, [r7, #8]
 800071e:	601a      	str	r2, [r3, #0]
	this->GPIO_Pin_N = GPIO_Pin_P;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	8b3a      	ldrh	r2, [r7, #24]
 8000724:	809a      	strh	r2, [r3, #4]
	this->GPIOx_N = GPIOx_P;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	601a      	str	r2, [r3, #0]
}
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	4618      	mov	r0, r3
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <_ZN10DigitalOut5ResetEv>:


/*
 *
 */
void DigitalOut::Reset() {
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOx_P, GPIO_Pin_P, GPIO_PIN_RESET);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6898      	ldr	r0, [r3, #8]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	899b      	ldrh	r3, [r3, #12]
 800074a:	2200      	movs	r2, #0
 800074c:	4619      	mov	r1, r3
 800074e:	f002 fff9 	bl	8003744 <HAL_GPIO_WritePin>
	Delay::DWT_Delay_us(25);
 8000752:	2019      	movs	r0, #25
 8000754:	f000 fc6a 	bl	800102c <_ZN5Delay12DWT_Delay_usEm>
	HAL_GPIO_WritePin(GPIOx_N, GPIO_Pin_N, GPIO_PIN_SET);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6818      	ldr	r0, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	889b      	ldrh	r3, [r3, #4]
 8000760:	2201      	movs	r2, #1
 8000762:	4619      	mov	r1, r3
 8000764:	f002 ffee 	bl	8003744 <HAL_GPIO_WritePin>

	status = false;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2200      	movs	r2, #0
 800076c:	739a      	strb	r2, [r3, #14]
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <_ZN3LEDC1EP12GPIO_TypeDeftb>:


#include "LED.h"


LED::LED(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool outputInverted) {
 8000776:	b480      	push	{r7}
 8000778:	b085      	sub	sp, #20
 800077a:	af00      	add	r7, sp, #0
 800077c:	60f8      	str	r0, [r7, #12]
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	4611      	mov	r1, r2
 8000782:	461a      	mov	r2, r3
 8000784:	460b      	mov	r3, r1
 8000786:	80fb      	strh	r3, [r7, #6]
 8000788:	4613      	mov	r3, r2
 800078a:	717b      	strb	r3, [r7, #5]

	this->GPIO_Pin = GPIO_Pin;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	88fa      	ldrh	r2, [r7, #6]
 8000790:	809a      	strh	r2, [r3, #4]
	this->GPIOx = GPIOx;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	68ba      	ldr	r2, [r7, #8]
 8000796:	601a      	str	r2, [r3, #0]
	this->outputInverted = outputInverted;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	797a      	ldrb	r2, [r7, #5]
 800079c:	719a      	strb	r2, [r3, #6]
}
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	4618      	mov	r0, r3
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <_ZN3LED3OFFEv>:
}

/*
 * LED OFF method
 */
void LED::OFF() {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	//check if output is inverted
	if(outputInverted){
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	799b      	ldrb	r3, [r3, #6]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d008      	beq.n	80007ce <_ZN3LED3OFFEv+0x22>
		//clear output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6818      	ldr	r0, [r3, #0]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	889b      	ldrh	r3, [r3, #4]
 80007c4:	2201      	movs	r2, #1
 80007c6:	4619      	mov	r1, r3
 80007c8:	f002 ffbc 	bl	8003744 <HAL_GPIO_WritePin>
	}else{
		//write output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
	}
}
 80007cc:	e007      	b.n	80007de <_ZN3LED3OFFEv+0x32>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6818      	ldr	r0, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	889b      	ldrh	r3, [r3, #4]
 80007d6:	2200      	movs	r2, #0
 80007d8:	4619      	mov	r1, r3
 80007da:	f002 ffb3 	bl	8003744 <HAL_GPIO_WritePin>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <_ZN3LED6ToggleEv>:

/*
 * LED Toggle method
 */
void LED::Toggle() {
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	889b      	ldrh	r3, [r3, #4]
 80007f6:	4619      	mov	r1, r3
 80007f8:	4610      	mov	r0, r2
 80007fa:	f002 ffbb 	bl	8003774 <HAL_GPIO_TogglePin>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <_ZN10RFM95_LoRaC1Ev>:
 */

#include "RFM95.h"
#include "../AppMain/AppMain.h"

RFM95_LoRa::RFM95_LoRa() :
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(0)
 8000810:	4a0a      	ldr	r2, [pc, #40]	; (800083c <_ZN10RFM95_LoRaC1Ev+0x34>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
{

}
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4618      	mov	r0, r3
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	0800c15c 	.word	0x0800c15c

08000840 <_ZN10RFM95_LoRa9selectRFMEv>:
 * @brief RFM95 chip select
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::selectRFM(){
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2108      	movs	r1, #8
 800084c:	4803      	ldr	r0, [pc, #12]	; (800085c <_ZN10RFM95_LoRa9selectRFMEv+0x1c>)
 800084e:	f002 ff79 	bl	8003744 <HAL_GPIO_WritePin>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	48000400 	.word	0x48000400

08000860 <_ZN10RFM95_LoRa11deselectRFMEv>:
 * @brief RFM95 chip deselect
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::deselectRFM(){
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	2108      	movs	r1, #8
 800086c:	4803      	ldr	r0, [pc, #12]	; (800087c <_ZN10RFM95_LoRa11deselectRFMEv+0x1c>)
 800086e:	f002 ff69 	bl	8003744 <HAL_GPIO_WritePin>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	48000400 	.word	0x48000400

08000880 <_ZN10RFM95_LoRa8resetRFMEv>:

void RFM95_LoRa::resetRFM(){
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	2110      	movs	r1, #16
 800088c:	4808      	ldr	r0, [pc, #32]	; (80008b0 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 800088e:	f002 ff59 	bl	8003744 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000892:	2001      	movs	r0, #1
 8000894:	f001 fa64 	bl	8001d60 <HAL_Delay>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	2110      	movs	r1, #16
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 800089e:	f002 ff51 	bl	8003744 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80008a2:	2005      	movs	r0, #5
 80008a4:	f001 fa5c 	bl	8001d60 <HAL_Delay>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	48000400 	.word	0x48000400

080008b4 <_ZN10RFM95_LoRa13writeRegisterEhh>:

bool RFM95_LoRa::writeRegister(uint8_t addr, uint8_t data){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	460b      	mov	r3, r1
 80008be:	70fb      	strb	r3, [r7, #3]
 80008c0:	4613      	mov	r3, r2
 80008c2:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2] = {(uint8_t)(addr | 0x80), data};
 80008c4:	78fb      	ldrb	r3, [r7, #3]
 80008c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	733b      	strb	r3, [r7, #12]
 80008ce:	78bb      	ldrb	r3, [r7, #2]
 80008d0:	737b      	strb	r3, [r7, #13]
	selectRFM();
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff ffb4 	bl	8000840 <_ZN10RFM95_LoRa9selectRFMEv>
	if(HAL_SPI_Transmit(&hspi3, (uint8_t*)buff, 2, 100) != HAL_OK){
 80008d8:	f107 010c 	add.w	r1, r7, #12
 80008dc:	2364      	movs	r3, #100	; 0x64
 80008de:	2202      	movs	r2, #2
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <_ZN10RFM95_LoRa13writeRegisterEhh+0x5c>)
 80008e2:	f005 ff4c 	bl	800677e <HAL_SPI_Transmit>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	bf14      	ite	ne
 80008ec:	2301      	movne	r3, #1
 80008ee:	2300      	moveq	r3, #0
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d004      	beq.n	8000900 <_ZN10RFM95_LoRa13writeRegisterEhh+0x4c>
		deselectRFM();
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff ffb2 	bl	8000860 <_ZN10RFM95_LoRa11deselectRFMEv>
		return false;
 80008fc:	2300      	movs	r3, #0
 80008fe:	e003      	b.n	8000908 <_ZN10RFM95_LoRa13writeRegisterEhh+0x54>
	}
	deselectRFM();
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ffad 	bl	8000860 <_ZN10RFM95_LoRa11deselectRFMEv>
	return true;
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200003dc 	.word	0x200003dc

08000914 <_ZN10RFM95_LoRa12readRegisterEh>:

uint8_t RFM95_LoRa::readRegister(uint8_t addr){
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af02      	add	r7, sp, #8
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	460b      	mov	r3, r1
 800091e:	70fb      	strb	r3, [r7, #3]
	uint8_t rxData[2] = {0,0};
 8000920:	2300      	movs	r3, #0
 8000922:	81bb      	strh	r3, [r7, #12]
	uint8_t txData[1] = {addr};
 8000924:	78fb      	ldrb	r3, [r7, #3]
 8000926:	723b      	strb	r3, [r7, #8]

	selectRFM();
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff ff89 	bl	8000840 <_ZN10RFM95_LoRa9selectRFMEv>
		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)txData,(uint8_t*)rxData,2,100);
 800092e:	f107 020c 	add.w	r2, r7, #12
 8000932:	f107 0108 	add.w	r1, r7, #8
 8000936:	2364      	movs	r3, #100	; 0x64
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	2302      	movs	r3, #2
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <_ZN10RFM95_LoRa12readRegisterEh+0x40>)
 800093e:	f006 f88c 	bl	8006a5a <HAL_SPI_TransmitReceive>
	deselectRFM();
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ff8c 	bl	8000860 <_ZN10RFM95_LoRa11deselectRFMEv>
	return rxData[1];
 8000948:	7b7b      	ldrb	r3, [r7, #13]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200003dc 	.word	0x200003dc

08000958 <_ZN10RFM95_LoRa5beginEl>:


int RFM95_LoRa::begin(long frequency){
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
 resetRFM();
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff ff8c 	bl	8000880 <_ZN10RFM95_LoRa8resetRFMEv>
  // check version
  uint8_t version = readRegister(REG_VERSION);
 8000968:	2142      	movs	r1, #66	; 0x42
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff ffd2 	bl	8000914 <_ZN10RFM95_LoRa12readRegisterEh>
 8000970:	4603      	mov	r3, r0
 8000972:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	2b12      	cmp	r3, #18
 8000978:	d001      	beq.n	800097e <_ZN10RFM95_LoRa5beginEl+0x26>
    return 0;
 800097a:	2300      	movs	r3, #0
 800097c:	e02b      	b.n	80009d6 <_ZN10RFM95_LoRa5beginEl+0x7e>
  }
  // put in sleep mode
  sleep();
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f000 f8e6 	bl	8000b50 <_ZN10RFM95_LoRa5sleepEv>
  // set frequency
  setFrequency(frequency);
 8000984:	6839      	ldr	r1, [r7, #0]
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f000 f92c 	bl	8000be4 <_ZN10RFM95_LoRa12setFrequencyEl>
  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	210e      	movs	r1, #14
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ff8f 	bl	80008b4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	210f      	movs	r1, #15
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff ff8a 	bl	80008b4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 80009a0:	210c      	movs	r1, #12
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff ffb6 	bl	8000914 <_ZN10RFM95_LoRa12readRegisterEh>
 80009a8:	4603      	mov	r3, r0
 80009aa:	f043 0303 	orr.w	r3, r3, #3
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	461a      	mov	r2, r3
 80009b2:	210c      	movs	r1, #12
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff7d 	bl	80008b4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 80009ba:	2204      	movs	r2, #4
 80009bc:	2126      	movs	r1, #38	; 0x26
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff ff78 	bl	80008b4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set output power to 17 dBm
  setTxPower(20);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2114      	movs	r1, #20
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f000 f8ce 	bl	8000b6a <_ZN10RFM95_LoRa10setTxPowerEii>
  // put in standby mode
  idle();
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f000 f8b1 	bl	8000b36 <_ZN10RFM95_LoRa4idleEv>
  return 1;
 80009d4:	2301      	movs	r3, #1
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <_ZN10RFM95_LoRa5writeEh>:

float RFM95_LoRa::packetSnr(){
  return ((int8_t)readRegister(REG_PKT_SNR_VALUE)) * 0.25;
}

size_t RFM95_LoRa::write(uint8_t byte){
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
 80009e6:	460b      	mov	r3, r1
 80009e8:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	3304      	adds	r3, #4
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	1cf9      	adds	r1, r7, #3
 80009f4:	2201      	movs	r2, #1
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	4798      	blx	r3
 80009fa:	4603      	mov	r3, r0
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <_ZN10RFM95_LoRa5writeEPKhj>:



size_t RFM95_LoRa::write(const uint8_t *buffer, size_t size){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 8000a10:	2122      	movs	r1, #34	; 0x22
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f7ff ff7e 	bl	8000914 <_ZN10RFM95_LoRa12readRegisterEh>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	613b      	str	r3, [r7, #16]
  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	2bff      	cmp	r3, #255	; 0xff
 8000a24:	d903      	bls.n	8000a2e <_ZN10RFM95_LoRa5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000a2c:	607b      	str	r3, [r7, #4]
  }
  // write data
  for (size_t i = 0; i < size; i++) {
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	697a      	ldr	r2, [r7, #20]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d20c      	bcs.n	8000a54 <_ZN10RFM95_LoRa5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	4413      	add	r3, r2
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	2100      	movs	r1, #0
 8000a46:	68f8      	ldr	r0, [r7, #12]
 8000a48:	f7ff ff34 	bl	80008b4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	e7ee      	b.n	8000a32 <_ZN10RFM95_LoRa5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4413      	add	r3, r2
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	461a      	mov	r2, r3
 8000a62:	2122      	movs	r1, #34	; 0x22
 8000a64:	68f8      	ldr	r0, [r7, #12]
 8000a66:	f7ff ff25 	bl	80008b4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return size;
 8000a6a:	687b      	ldr	r3, [r7, #4]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <_ZN10RFM95_LoRa9availableEv>:


int RFM95_LoRa::available()
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8000a7c:	2113      	movs	r1, #19
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff ff48 	bl	8000914 <_ZN10RFM95_LoRa12readRegisterEh>
 8000a84:	4603      	mov	r3, r0
 8000a86:	461a      	mov	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	695b      	ldr	r3, [r3, #20]
 8000a8c:	1ad3      	subs	r3, r2, r3
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <_ZN10RFM95_LoRa4readEv>:



int RFM95_LoRa::read(){
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	3308      	adds	r3, #8
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	4798      	blx	r3
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	bf0c      	ite	eq
 8000ab0:	2301      	moveq	r3, #1
 8000ab2:	2300      	movne	r3, #0
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d002      	beq.n	8000ac0 <_ZN10RFM95_LoRa4readEv+0x2a>
    return -1;
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
 8000abe:	e009      	b.n	8000ad4 <_ZN10RFM95_LoRa4readEv+0x3e>
  }
  _packetIndex++;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	1c5a      	adds	r2, r3, #1
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	615a      	str	r2, [r3, #20]
  return readRegister(REG_FIFO);
 8000aca:	2100      	movs	r1, #0
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ff21 	bl	8000914 <_ZN10RFM95_LoRa12readRegisterEh>
 8000ad2:	4603      	mov	r3, r0
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <_ZN10RFM95_LoRa4peekEv>:



int RFM95_LoRa::peek(){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	3308      	adds	r3, #8
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	4798      	blx	r3
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	bf0c      	ite	eq
 8000af6:	2301      	moveq	r3, #1
 8000af8:	2300      	movne	r3, #0
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d002      	beq.n	8000b06 <_ZN10RFM95_LoRa4peekEv+0x2a>
    return -1;
 8000b00:	f04f 33ff 	mov.w	r3, #4294967295
 8000b04:	e013      	b.n	8000b2e <_ZN10RFM95_LoRa4peekEv+0x52>
  }
  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 8000b06:	210d      	movs	r1, #13
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff ff03 	bl	8000914 <_ZN10RFM95_LoRa12readRegisterEh>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	60fb      	str	r3, [r7, #12]
  // read
  uint8_t b = readRegister(REG_FIFO);
 8000b12:	2100      	movs	r1, #0
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff fefd 	bl	8000914 <_ZN10RFM95_LoRa12readRegisterEh>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	72fb      	strb	r3, [r7, #11]
  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	461a      	mov	r2, r3
 8000b24:	210d      	movs	r1, #13
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff fec4 	bl	80008b4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return b;
 8000b2c:	7afb      	ldrb	r3, [r7, #11]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_ZN10RFM95_LoRa4idleEv>:
    explicitHeaderMode();
  }
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
}

void RFM95_LoRa::idle(){
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000b3e:	2281      	movs	r2, #129	; 0x81
 8000b40:	2101      	movs	r1, #1
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff feb6 	bl	80008b4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <_ZN10RFM95_LoRa5sleepEv>:

void RFM95_LoRa::sleep(){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000b58:	2280      	movs	r2, #128	; 0x80
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff fea9 	bl	80008b4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <_ZN10RFM95_LoRa10setTxPowerEii>:



void RFM95_LoRa::setTxPower(int level, int outputPin){
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b084      	sub	sp, #16
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	60f8      	str	r0, [r7, #12]
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d116      	bne.n	8000baa <_ZN10RFM95_LoRa10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	da02      	bge.n	8000b88 <_ZN10RFM95_LoRa10setTxPowerEii+0x1e>
      level = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	e004      	b.n	8000b92 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
    } else if (level > 14) {
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	2b0e      	cmp	r3, #14
 8000b8c:	dd01      	ble.n	8000b92 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
      level = 14;
 8000b8e:	230e      	movs	r3, #14
 8000b90:	60bb      	str	r3, [r7, #8]
    }
    writeRegister(REG_PA_CONFIG, 0x70 | level);
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000b9a:	b25b      	sxtb	r3, r3
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	2109      	movs	r1, #9
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f7ff fe86 	bl	80008b4 <_ZN10RFM95_LoRa13writeRegisterEhh>
    } else if (level > 17) {
      level = 17;
    }
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 8000ba8:	e018      	b.n	8000bdc <_ZN10RFM95_LoRa10setTxPowerEii+0x72>
    if (level < 2) {
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	dc02      	bgt.n	8000bb6 <_ZN10RFM95_LoRa10setTxPowerEii+0x4c>
      level = 2;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	e004      	b.n	8000bc0 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
    } else if (level > 17) {
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	2b11      	cmp	r3, #17
 8000bba:	dd01      	ble.n	8000bc0 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
      level = 17;
 8000bbc:	2311      	movs	r3, #17
 8000bbe:	60bb      	str	r3, [r7, #8]
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	3b02      	subs	r3, #2
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	b25b      	sxtb	r3, r3
 8000bca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bce:	b25b      	sxtb	r3, r3
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	2109      	movs	r1, #9
 8000bd6:	68f8      	ldr	r0, [r7, #12]
 8000bd8:	f7ff fe6c 	bl	80008b4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <_ZN10RFM95_LoRa12setFrequencyEl>:



void RFM95_LoRa::setFrequency(long frequency){
 8000be4:	b5b0      	push	{r4, r5, r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	6838      	ldr	r0, [r7, #0]
 8000bf2:	6108      	str	r0, [r1, #16]
  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000bf4:	6839      	ldr	r1, [r7, #0]
 8000bf6:	17c8      	asrs	r0, r1, #31
 8000bf8:	460a      	mov	r2, r1
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	1355      	asrs	r5, r2, #13
 8000bfe:	04d4      	lsls	r4, r2, #19
 8000c00:	4a1a      	ldr	r2, [pc, #104]	; (8000c6c <_ZN10RFM95_LoRa12setFrequencyEl+0x88>)
 8000c02:	f04f 0300 	mov.w	r3, #0
 8000c06:	4620      	mov	r0, r4
 8000c08:	4629      	mov	r1, r5
 8000c0a:	f7ff fadf 	bl	80001cc <__aeabi_uldivmod>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	460b      	mov	r3, r1
 8000c12:	e9c7 2302 	strd	r2, r3, [r7, #8]
  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000c16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c1a:	f04f 0200 	mov.w	r2, #0
 8000c1e:	f04f 0300 	mov.w	r3, #0
 8000c22:	0c02      	lsrs	r2, r0, #16
 8000c24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c28:	0c0b      	lsrs	r3, r1, #16
 8000c2a:	b2d3      	uxtb	r3, r2
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	2106      	movs	r1, #6
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff fe3f 	bl	80008b4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000c36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c3a:	f04f 0200 	mov.w	r2, #0
 8000c3e:	f04f 0300 	mov.w	r3, #0
 8000c42:	0a02      	lsrs	r2, r0, #8
 8000c44:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000c48:	0a0b      	lsrs	r3, r1, #8
 8000c4a:	b2d3      	uxtb	r3, r2
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	2107      	movs	r1, #7
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff fe2f 	bl	80008b4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000c56:	7a3b      	ldrb	r3, [r7, #8]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	2108      	movs	r1, #8
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff fe29 	bl	80008b4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bdb0      	pop	{r4, r5, r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	01e84800 	.word	0x01e84800

08000c70 <_ZN10RFM95_LoRa18setSpreadingFactorEi>:



void RFM95_LoRa::setSpreadingFactor(int sf){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	2b05      	cmp	r3, #5
 8000c7e:	dc02      	bgt.n	8000c86 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x16>
    sf = 6;
 8000c80:	2306      	movs	r3, #6
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	e004      	b.n	8000c90 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	2b0c      	cmp	r3, #12
 8000c8a:	dd01      	ble.n	8000c90 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
    sf = 12;
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d10a      	bne.n	8000cac <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 8000c96:	22c5      	movs	r2, #197	; 0xc5
 8000c98:	2131      	movs	r1, #49	; 0x31
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff fe0a 	bl	80008b4 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 8000ca0:	220c      	movs	r2, #12
 8000ca2:	2137      	movs	r1, #55	; 0x37
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff fe05 	bl	80008b4 <_ZN10RFM95_LoRa13writeRegisterEhh>
 8000caa:	e009      	b.n	8000cc0 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 8000cac:	22c3      	movs	r2, #195	; 0xc3
 8000cae:	2131      	movs	r1, #49	; 0x31
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff fdff 	bl	80008b4 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 8000cb6:	220a      	movs	r2, #10
 8000cb8:	2137      	movs	r1, #55	; 0x37
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff fdfa 	bl	80008b4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 8000cc0:	211e      	movs	r1, #30
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fe26 	bl	8000914 <_ZN10RFM95_LoRa12readRegisterEh>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	b25b      	sxtb	r3, r3
 8000ccc:	f003 030f 	and.w	r3, r3, #15
 8000cd0:	b25a      	sxtb	r2, r3
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	011b      	lsls	r3, r3, #4
 8000cd6:	b25b      	sxtb	r3, r3
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	b25b      	sxtb	r3, r3
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	461a      	mov	r2, r3
 8000ce0:	211e      	movs	r1, #30
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff fde6 	bl	80008b4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <_ZN10RFM95_LoRa18setSignalBandwidthEl>:


void RFM95_LoRa::setSignalBandwidth(long sbw){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  int bw;
  if (sbw <= 7.8E3) {
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	f641 6278 	movw	r2, #7800	; 0x1e78
 8000d00:	4293      	cmp	r3, r2
 8000d02:	dc02      	bgt.n	8000d0a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x1a>
    bw = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	e03f      	b.n	8000d8a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 10.4E3) {
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8000d10:	4293      	cmp	r3, r2
 8000d12:	dc02      	bgt.n	8000d1a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x2a>
    bw = 1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	e037      	b.n	8000d8a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 15.6E3) {
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 8000d20:	4293      	cmp	r3, r2
 8000d22:	dc02      	bgt.n	8000d2a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x3a>
    bw = 2;
 8000d24:	2302      	movs	r3, #2
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	e02f      	b.n	8000d8a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 20.8E3) {
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	f245 1240 	movw	r2, #20800	; 0x5140
 8000d30:	4293      	cmp	r3, r2
 8000d32:	dc02      	bgt.n	8000d3a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x4a>
    bw = 3;
 8000d34:	2303      	movs	r3, #3
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	e027      	b.n	8000d8a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 31.25E3) {
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	f647 2212 	movw	r2, #31250	; 0x7a12
 8000d40:	4293      	cmp	r3, r2
 8000d42:	dc02      	bgt.n	8000d4a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x5a>
    bw = 4;
 8000d44:	2304      	movs	r3, #4
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	e01f      	b.n	8000d8a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 41.7E3) {
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 8000d50:	4293      	cmp	r3, r2
 8000d52:	dc02      	bgt.n	8000d5a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x6a>
    bw = 5;
 8000d54:	2305      	movs	r3, #5
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	e017      	b.n	8000d8a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 62.5E3) {
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	f24f 4224 	movw	r2, #62500	; 0xf424
 8000d60:	4293      	cmp	r3, r2
 8000d62:	dc02      	bgt.n	8000d6a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x7a>
    bw = 6;
 8000d64:	2306      	movs	r3, #6
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	e00f      	b.n	8000d8a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 125E3) {
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	4a13      	ldr	r2, [pc, #76]	; (8000dbc <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xcc>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	dc02      	bgt.n	8000d78 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x88>
    bw = 7;
 8000d72:	2307      	movs	r3, #7
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	e008      	b.n	8000d8a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 250E3) {
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	4a11      	ldr	r2, [pc, #68]	; (8000dc0 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xd0>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	dc02      	bgt.n	8000d86 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x96>
    bw = 8;
 8000d80:	2308      	movs	r3, #8
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	e001      	b.n	8000d8a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 8000d86:	2309      	movs	r3, #9
 8000d88:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 8000d8a:	211d      	movs	r1, #29
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff fdc1 	bl	8000914 <_ZN10RFM95_LoRa12readRegisterEh>
 8000d92:	4603      	mov	r3, r0
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	f003 030f 	and.w	r3, r3, #15
 8000d9a:	b25a      	sxtb	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	4313      	orrs	r3, r2
 8000da4:	b25b      	sxtb	r3, r3
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	461a      	mov	r2, r3
 8000daa:	211d      	movs	r1, #29
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fd81 	bl	80008b4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	0001e848 	.word	0x0001e848
 8000dc0:	0003d090 	.word	0x0003d090

08000dc4 <_ZN10RFM95_LoRa14setCodingRate4Ei>:



void RFM95_LoRa::setCodingRate4(int denominator){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  if (denominator < 5) {
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	dc02      	bgt.n	8000dda <_ZN10RFM95_LoRa14setCodingRate4Ei+0x16>
    denominator = 5;
 8000dd4:	2305      	movs	r3, #5
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	e004      	b.n	8000de4 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
  } else if (denominator > 8) {
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	2b08      	cmp	r3, #8
 8000dde:	dd01      	ble.n	8000de4 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
	  denominator = 8;
 8000de0:	2308      	movs	r3, #8
 8000de2:	603b      	str	r3, [r7, #0]
  }
  int cr = denominator - 4;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	3b04      	subs	r3, #4
 8000de8:	60fb      	str	r3, [r7, #12]
  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 8000dea:	211d      	movs	r1, #29
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff fd91 	bl	8000914 <_ZN10RFM95_LoRa12readRegisterEh>
 8000df2:	4603      	mov	r3, r0
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	f023 030e 	bic.w	r3, r3, #14
 8000dfa:	b25a      	sxtb	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	4313      	orrs	r3, r2
 8000e04:	b25b      	sxtb	r3, r3
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	461a      	mov	r2, r3
 8000e0a:	211d      	movs	r1, #29
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff fd51 	bl	80008b4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <_ZN10RFM95_LoRa7InitRFMEv>:
    writeRegister(REG_FIFO_ADDR_PTR, 0);
  }
}


bool RFM95_LoRa::InitRFM(){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]


	setFrequency(868000000);
 8000e24:	4914      	ldr	r1, [pc, #80]	; (8000e78 <_ZN10RFM95_LoRa7InitRFMEv+0x5c>)
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff fedc 	bl	8000be4 <_ZN10RFM95_LoRa12setFrequencyEl>
	setTxPower(17, PA_OUTPUT_PA_BOOST_PIN);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2111      	movs	r1, #17
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff fe9a 	bl	8000b6a <_ZN10RFM95_LoRa10setTxPowerEii>
	setSignalBandwidth(31.25E3);
 8000e36:	f647 2112 	movw	r1, #31250	; 0x7a12
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ff58 	bl	8000cf0 <_ZN10RFM95_LoRa18setSignalBandwidthEl>
	setSpreadingFactor(12);
 8000e40:	210c      	movs	r1, #12
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ff14 	bl	8000c70 <_ZN10RFM95_LoRa18setSpreadingFactorEi>
	setCodingRate4(5);
 8000e48:	2105      	movs	r1, #5
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ffba 	bl	8000dc4 <_ZN10RFM95_LoRa14setCodingRate4Ei>
	if (!begin(866E6)) {
 8000e50:	490a      	ldr	r1, [pc, #40]	; (8000e7c <_ZN10RFM95_LoRa7InitRFMEv+0x60>)
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff fd80 	bl	8000958 <_ZN10RFM95_LoRa5beginEl>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	bf0c      	ite	eq
 8000e5e:	2301      	moveq	r3, #1
 8000e60:	2300      	movne	r3, #0
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <_ZN10RFM95_LoRa7InitRFMEv+0x50>
		return false;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	e000      	b.n	8000e6e <_ZN10RFM95_LoRa7InitRFMEv+0x52>
	}
	return true;
 8000e6c:	2301      	movs	r3, #1
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	33bca100 	.word	0x33bca100
 8000e7c:	339e1c80 	.word	0x339e1c80

08000e80 <_ZN11TaskHandler11UpdateTasksEv>:

#include "TaskHandler.h"
#include "gpio.h"

//update tasks, should be called every 1ms
void TaskHandler::UpdateTasks() {
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

	//1ms

	//2ms
	if(counter % 2 == 0){
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	895b      	ldrh	r3, [r3, #10]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d102      	bne.n	8000e9a <_ZN11TaskHandler11UpdateTasksEv+0x1a>
		adcUpdateTask = true;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2201      	movs	r2, #1
 8000e98:	70da      	strb	r2, [r3, #3]
	}


	//15ms
	if(counter % 15 == 0){
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	895a      	ldrh	r2, [r3, #10]
 8000e9e:	4b2a      	ldr	r3, [pc, #168]	; (8000f48 <_ZN11TaskHandler11UpdateTasksEv+0xc8>)
 8000ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ea4:	08d9      	lsrs	r1, r3, #3
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	011b      	lsls	r3, r3, #4
 8000eaa:	1a5b      	subs	r3, r3, r1
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <_ZN11TaskHandler11UpdateTasksEv+0x3a>
		ioUpdateTask = true;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	709a      	strb	r2, [r3, #2]
	}


	//50ms
	if(counter % 50 == 0){
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	895b      	ldrh	r3, [r3, #10]
 8000ebe:	4a23      	ldr	r2, [pc, #140]	; (8000f4c <_ZN11TaskHandler11UpdateTasksEv+0xcc>)
 8000ec0:	fba2 1203 	umull	r1, r2, r2, r3
 8000ec4:	0912      	lsrs	r2, r2, #4
 8000ec6:	2132      	movs	r1, #50	; 0x32
 8000ec8:	fb01 f202 	mul.w	r2, r1, r2
 8000ecc:	1a9b      	subs	r3, r3, r2
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <_ZN11TaskHandler11UpdateTasksEv+0x5a>
		comTask = true;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	705a      	strb	r2, [r3, #1]
	}



	//100ms
	if(counter % 100 == 0){
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	895b      	ldrh	r3, [r3, #10]
 8000ede:	4a1b      	ldr	r2, [pc, #108]	; (8000f4c <_ZN11TaskHandler11UpdateTasksEv+0xcc>)
 8000ee0:	fba2 1203 	umull	r1, r2, r2, r3
 8000ee4:	0952      	lsrs	r2, r2, #5
 8000ee6:	2164      	movs	r1, #100	; 0x64
 8000ee8:	fb01 f202 	mul.w	r2, r1, r2
 8000eec:	1a9b      	subs	r3, r3, r2
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d102      	bne.n	8000efa <_ZN11TaskHandler11UpdateTasksEv+0x7a>
		errorTask = true;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
	}


	//1000ms
	if(counter % 1000 == 0){
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	895b      	ldrh	r3, [r3, #10]
 8000efe:	4a14      	ldr	r2, [pc, #80]	; (8000f50 <_ZN11TaskHandler11UpdateTasksEv+0xd0>)
 8000f00:	fba2 1203 	umull	r1, r2, r2, r3
 8000f04:	0992      	lsrs	r2, r2, #6
 8000f06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f0a:	fb01 f202 	mul.w	r2, r1, r2
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d102      	bne.n	8000f1c <_ZN11TaskHandler11UpdateTasksEv+0x9c>
		ledUpdateTask = true;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	711a      	strb	r2, [r3, #4]




	//increment counter
	if(counter > 2999){
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	895b      	ldrh	r3, [r3, #10]
 8000f20:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d903      	bls.n	8000f30 <_ZN11TaskHandler11UpdateTasksEv+0xb0>
		counter = 1;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	815a      	strh	r2, [r3, #10]
	}else{
		counter++;
	}

}
 8000f2e:	e005      	b.n	8000f3c <_ZN11TaskHandler11UpdateTasksEv+0xbc>
		counter++;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	895b      	ldrh	r3, [r3, #10]
 8000f34:	3301      	adds	r3, #1
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	815a      	strh	r2, [r3, #10]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	88888889 	.word	0x88888889
 8000f4c:	51eb851f 	.word	0x51eb851f
 8000f50:	10624dd3 	.word	0x10624dd3

08000f54 <_ZN11TaskHandler9isComTaskEv>:



bool TaskHandler::isComTask()  {
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	bool comTaskTemp = (comTask & comTaskEnable);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	785b      	ldrb	r3, [r3, #1]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	461a      	mov	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	799b      	ldrb	r3, [r3, #6]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	bf14      	ite	ne
 8000f70:	2301      	movne	r3, #1
 8000f72:	2300      	moveq	r3, #0
 8000f74:	73fb      	strb	r3, [r7, #15]
	comTask = false;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	705a      	strb	r2, [r3, #1]
	return comTaskTemp;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <_ZN11TaskHandler11isErrorTaskEv>:


bool TaskHandler::isErrorTask()  {
 8000f8a:	b480      	push	{r7}
 8000f8c:	b085      	sub	sp, #20
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
	bool errorTaskTemp = (errorTask & errorTaskEnable);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	461a      	mov	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	795b      	ldrb	r3, [r3, #5]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	bf14      	ite	ne
 8000fa6:	2301      	movne	r3, #1
 8000fa8:	2300      	moveq	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]
	errorTask = false;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
	return errorTaskTemp;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <_ZN11TaskHandler15isLEDUpdateTaskEv>:
	adcUpdateTask = false;
	return adcUpdateTaskTemp;
}


bool TaskHandler::isLEDUpdateTask(){
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	bool ledUpdateTaskTemp = (ledUpdateTask & ledUpdateTaskEnable);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	791b      	ldrb	r3, [r3, #4]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	461a      	mov	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	7a5b      	ldrb	r3, [r3, #9]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	bf14      	ite	ne
 8000fdc:	2301      	movne	r3, #1
 8000fde:	2300      	moveq	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
	ledUpdateTask = false;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	711a      	strb	r2, [r3, #4]
	return ledUpdateTaskTemp;
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <_ZN5Delay8DWT_InitEv>:


/*
 * Mikrosenkunden delay Initialisieren
 */
void Delay::DWT_Init(void) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <_ZN5Delay8DWT_InitEv+0x2c>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	4a08      	ldr	r2, [pc, #32]	; (8001024 <_ZN5Delay8DWT_InitEv+0x2c>)
 8001002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001006:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <_ZN5Delay8DWT_InitEv+0x30>)
 800100a:	2200      	movs	r2, #0
 800100c:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <_ZN5Delay8DWT_InitEv+0x30>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <_ZN5Delay8DWT_InitEv+0x30>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6013      	str	r3, [r2, #0]
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000edf0 	.word	0xe000edf0
 8001028:	e0001000 	.word	0xe0001000

0800102c <_ZN5Delay12DWT_Delay_usEm>:

/*
 * Mikrosenkunden delay für Push-Pull ansteuerung
 */
void Delay::DWT_Delay_us(volatile uint32_t microseconds) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <_ZN5Delay12DWT_Delay_usEm+0x48>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	60fb      	str	r3, [r7, #12]
	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800103a:	f004 ff55 	bl	8005ee8 <HAL_RCC_GetHCLKFreq>
 800103e:	4603      	mov	r3, r0
 8001040:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <_ZN5Delay12DWT_Delay_usEm+0x4c>)
 8001042:	fba2 2303 	umull	r2, r3, r2, r3
 8001046:	0c9b      	lsrs	r3, r3, #18
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	fb02 f303 	mul.w	r3, r2, r3
 800104e:	607b      	str	r3, [r7, #4]
	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <_ZN5Delay12DWT_Delay_usEm+0x48>)
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	1ad2      	subs	r2, r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	429a      	cmp	r2, r3
 800105c:	bf34      	ite	cc
 800105e:	2301      	movcc	r3, #1
 8001060:	2300      	movcs	r3, #0
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d000      	beq.n	800106a <_ZN5Delay12DWT_Delay_usEm+0x3e>
 8001068:	e7f2      	b.n	8001050 <_ZN5Delay12DWT_Delay_usEm+0x24>
}
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	e0001000 	.word	0xe0001000
 8001078:	431bde83 	.word	0x431bde83

0800107c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001082:	463b      	mov	r3, r7
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
 8001090:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001092:	4b29      	ldr	r3, [pc, #164]	; (8001138 <MX_ADC1_Init+0xbc>)
 8001094:	4a29      	ldr	r2, [pc, #164]	; (800113c <MX_ADC1_Init+0xc0>)
 8001096:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001098:	4b27      	ldr	r3, [pc, #156]	; (8001138 <MX_ADC1_Init+0xbc>)
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <MX_ADC1_Init+0xbc>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <MX_ADC1_Init+0xbc>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010aa:	4b23      	ldr	r3, [pc, #140]	; (8001138 <MX_ADC1_Init+0xbc>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <MX_ADC1_Init+0xbc>)
 80010b2:	2204      	movs	r2, #4
 80010b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010b6:	4b20      	ldr	r3, [pc, #128]	; (8001138 <MX_ADC1_Init+0xbc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010bc:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <MX_ADC1_Init+0xbc>)
 80010be:	2200      	movs	r2, #0
 80010c0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010c2:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <MX_ADC1_Init+0xbc>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MX_ADC1_Init+0xbc>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <MX_ADC1_Init+0xbc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <MX_ADC1_Init+0xbc>)
 80010d8:	2200      	movs	r2, #0
 80010da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <MX_ADC1_Init+0xbc>)
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_ADC1_Init+0xbc>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <MX_ADC1_Init+0xbc>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f2:	4811      	ldr	r0, [pc, #68]	; (8001138 <MX_ADC1_Init+0xbc>)
 80010f4:	f000 ffe4 	bl	80020c0 <HAL_ADC_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80010fe:	f000 fbb3 	bl	8001868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <MX_ADC1_Init+0xc4>)
 8001104:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001106:	2306      	movs	r3, #6
 8001108:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800110e:	237f      	movs	r3, #127	; 0x7f
 8001110:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001112:	2304      	movs	r3, #4
 8001114:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111a:	463b      	mov	r3, r7
 800111c:	4619      	mov	r1, r3
 800111e:	4806      	ldr	r0, [pc, #24]	; (8001138 <MX_ADC1_Init+0xbc>)
 8001120:	f001 f916 	bl	8002350 <HAL_ADC_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800112a:	f000 fb9d 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200001ac 	.word	0x200001ac
 800113c:	50040000 	.word	0x50040000
 8001140:	2e300800 	.word	0x2e300800

08001144 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b0a2      	sub	sp, #136	; 0x88
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2260      	movs	r2, #96	; 0x60
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f00a ffbd 	bl	800c0e4 <memset>
  if(adcHandle->Instance==ADC1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a3b      	ldr	r2, [pc, #236]	; (800125c <HAL_ADC_MspInit+0x118>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d16e      	bne.n	8001252 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001174:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001178:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800117a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800117e:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001180:	2301      	movs	r3, #1
 8001182:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001184:	2301      	movs	r3, #1
 8001186:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001188:	2310      	movs	r3, #16
 800118a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800118c:	2307      	movs	r3, #7
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001190:	2302      	movs	r3, #2
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001194:	2302      	movs	r3, #2
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001198:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800119c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4618      	mov	r0, r3
 80011a4:	f004 ff0c 	bl	8005fc0 <HAL_RCCEx_PeriphCLKConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80011ae:	f000 fb5b 	bl	8001868 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011b2:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <HAL_ADC_MspInit+0x11c>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	4a2a      	ldr	r2, [pc, #168]	; (8001260 <HAL_ADC_MspInit+0x11c>)
 80011b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011be:	4b28      	ldr	r3, [pc, #160]	; (8001260 <HAL_ADC_MspInit+0x11c>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b25      	ldr	r3, [pc, #148]	; (8001260 <HAL_ADC_MspInit+0x11c>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	4a24      	ldr	r2, [pc, #144]	; (8001260 <HAL_ADC_MspInit+0x11c>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d6:	4b22      	ldr	r3, [pc, #136]	; (8001260 <HAL_ADC_MspInit+0x11c>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011e2:	23c0      	movs	r3, #192	; 0xc0
 80011e4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011e6:	230b      	movs	r3, #11
 80011e8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f8:	f002 f92a 	bl	8003450 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_ADC_MspInit+0x120>)
 80011fe:	4a1a      	ldr	r2, [pc, #104]	; (8001268 <HAL_ADC_MspInit+0x124>)
 8001200:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <HAL_ADC_MspInit+0x120>)
 8001204:	2200      	movs	r2, #0
 8001206:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <HAL_ADC_MspInit+0x120>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_ADC_MspInit+0x120>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <HAL_ADC_MspInit+0x120>)
 8001216:	2280      	movs	r2, #128	; 0x80
 8001218:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_ADC_MspInit+0x120>)
 800121c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001220:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_ADC_MspInit+0x120>)
 8001224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001228:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_ADC_MspInit+0x120>)
 800122c:	2200      	movs	r2, #0
 800122e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <HAL_ADC_MspInit+0x120>)
 8001232:	2200      	movs	r2, #0
 8001234:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001236:	480b      	ldr	r0, [pc, #44]	; (8001264 <HAL_ADC_MspInit+0x120>)
 8001238:	f001 ffa2 	bl	8003180 <HAL_DMA_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001242:	f000 fb11 	bl	8001868 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_ADC_MspInit+0x120>)
 800124a:	64da      	str	r2, [r3, #76]	; 0x4c
 800124c:	4a05      	ldr	r2, [pc, #20]	; (8001264 <HAL_ADC_MspInit+0x120>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001252:	bf00      	nop
 8001254:	3788      	adds	r7, #136	; 0x88
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	50040000 	.word	0x50040000
 8001260:	40021000 	.word	0x40021000
 8001264:	20000210 	.word	0x20000210
 8001268:	40020008 	.word	0x40020008

0800126c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001270:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <MX_CRC_Init+0x3c>)
 8001272:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <MX_CRC_Init+0x40>)
 8001274:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_CRC_Init+0x3c>)
 8001278:	2200      	movs	r2, #0
 800127a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <MX_CRC_Init+0x3c>)
 800127e:	2200      	movs	r2, #0
 8001280:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_CRC_Init+0x3c>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <MX_CRC_Init+0x3c>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_CRC_Init+0x3c>)
 8001290:	2201      	movs	r2, #1
 8001292:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <MX_CRC_Init+0x3c>)
 8001296:	f001 fd4d 	bl	8002d34 <HAL_CRC_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80012a0:	f000 fae2 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000258 	.word	0x20000258
 80012ac:	40023000 	.word	0x40023000

080012b0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <HAL_CRC_MspInit+0x38>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d10b      	bne.n	80012da <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_CRC_MspInit+0x3c>)
 80012c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c6:	4a09      	ldr	r2, [pc, #36]	; (80012ec <HAL_CRC_MspInit+0x3c>)
 80012c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012cc:	6493      	str	r3, [r2, #72]	; 0x48
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <HAL_CRC_MspInit+0x3c>)
 80012d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80012da:	bf00      	nop
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40023000 	.word	0x40023000
 80012ec:	40021000 	.word	0x40021000

080012f0 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2224      	movs	r2, #36	; 0x24
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f00a fef1 	bl	800c0e4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <MX_DAC1_Init+0x70>)
 8001304:	4a17      	ldr	r2, [pc, #92]	; (8001364 <MX_DAC1_Init+0x74>)
 8001306:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001308:	4815      	ldr	r0, [pc, #84]	; (8001360 <MX_DAC1_Init+0x70>)
 800130a:	f001 fdfd 	bl	8002f08 <HAL_DAC_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001314:	f000 faa8 	bl	8001868 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2200      	movs	r2, #0
 8001330:	4619      	mov	r1, r3
 8001332:	480b      	ldr	r0, [pc, #44]	; (8001360 <MX_DAC1_Init+0x70>)
 8001334:	f001 fe0a 	bl	8002f4c <HAL_DAC_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800133e:	f000 fa93 	bl	8001868 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2210      	movs	r2, #16
 8001346:	4619      	mov	r1, r3
 8001348:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_DAC1_Init+0x70>)
 800134a:	f001 fdff 	bl	8002f4c <HAL_DAC_ConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8001354:	f000 fa88 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	3728      	adds	r7, #40	; 0x28
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	2000027c 	.word	0x2000027c
 8001364:	40007400 	.word	0x40007400

08001368 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a40      	ldr	r2, [pc, #256]	; (8001488 <HAL_DAC_MspInit+0x120>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d17a      	bne.n	8001480 <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800138a:	4b40      	ldr	r3, [pc, #256]	; (800148c <HAL_DAC_MspInit+0x124>)
 800138c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138e:	4a3f      	ldr	r2, [pc, #252]	; (800148c <HAL_DAC_MspInit+0x124>)
 8001390:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001394:	6593      	str	r3, [r2, #88]	; 0x58
 8001396:	4b3d      	ldr	r3, [pc, #244]	; (800148c <HAL_DAC_MspInit+0x124>)
 8001398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	4b3a      	ldr	r3, [pc, #232]	; (800148c <HAL_DAC_MspInit+0x124>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	4a39      	ldr	r2, [pc, #228]	; (800148c <HAL_DAC_MspInit+0x124>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ae:	4b37      	ldr	r3, [pc, #220]	; (800148c <HAL_DAC_MspInit+0x124>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013ba:	2330      	movs	r3, #48	; 0x30
 80013bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013be:	2303      	movs	r3, #3
 80013c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d0:	f002 f83e 	bl	8003450 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80013d4:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <HAL_DAC_MspInit+0x128>)
 80013d6:	4a2f      	ldr	r2, [pc, #188]	; (8001494 <HAL_DAC_MspInit+0x12c>)
 80013d8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80013da:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <HAL_DAC_MspInit+0x128>)
 80013dc:	2206      	movs	r2, #6
 80013de:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013e0:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <HAL_DAC_MspInit+0x128>)
 80013e2:	2210      	movs	r2, #16
 80013e4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e6:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <HAL_DAC_MspInit+0x128>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80013ec:	4b28      	ldr	r3, [pc, #160]	; (8001490 <HAL_DAC_MspInit+0x128>)
 80013ee:	2280      	movs	r2, #128	; 0x80
 80013f0:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013f2:	4b27      	ldr	r3, [pc, #156]	; (8001490 <HAL_DAC_MspInit+0x128>)
 80013f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f8:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013fa:	4b25      	ldr	r3, [pc, #148]	; (8001490 <HAL_DAC_MspInit+0x128>)
 80013fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001400:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 8001402:	4b23      	ldr	r3, [pc, #140]	; (8001490 <HAL_DAC_MspInit+0x128>)
 8001404:	2200      	movs	r2, #0
 8001406:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001408:	4b21      	ldr	r3, [pc, #132]	; (8001490 <HAL_DAC_MspInit+0x128>)
 800140a:	2200      	movs	r2, #0
 800140c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 800140e:	4820      	ldr	r0, [pc, #128]	; (8001490 <HAL_DAC_MspInit+0x128>)
 8001410:	f001 feb6 	bl	8003180 <HAL_DMA_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800141a:	f000 fa25 	bl	8001868 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <HAL_DAC_MspInit+0x128>)
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	4a1a      	ldr	r2, [pc, #104]	; (8001490 <HAL_DAC_MspInit+0x128>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 800142a:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <HAL_DAC_MspInit+0x130>)
 800142c:	4a1b      	ldr	r2, [pc, #108]	; (800149c <HAL_DAC_MspInit+0x134>)
 800142e:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8001430:	4b19      	ldr	r3, [pc, #100]	; (8001498 <HAL_DAC_MspInit+0x130>)
 8001432:	2205      	movs	r2, #5
 8001434:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <HAL_DAC_MspInit+0x130>)
 8001438:	2210      	movs	r2, #16
 800143a:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <HAL_DAC_MspInit+0x130>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_DAC_MspInit+0x130>)
 8001444:	2280      	movs	r2, #128	; 0x80
 8001446:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <HAL_DAC_MspInit+0x130>)
 800144a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800144e:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_DAC_MspInit+0x130>)
 8001452:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001456:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_NORMAL;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <HAL_DAC_MspInit+0x130>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_DAC_MspInit+0x130>)
 8001460:	2200      	movs	r2, #0
 8001462:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8001464:	480c      	ldr	r0, [pc, #48]	; (8001498 <HAL_DAC_MspInit+0x130>)
 8001466:	f001 fe8b 	bl	8003180 <HAL_DMA_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8001470:	f000 f9fa 	bl	8001868 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a08      	ldr	r2, [pc, #32]	; (8001498 <HAL_DAC_MspInit+0x130>)
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	4a07      	ldr	r2, [pc, #28]	; (8001498 <HAL_DAC_MspInit+0x130>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001480:	bf00      	nop
 8001482:	3728      	adds	r7, #40	; 0x28
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40007400 	.word	0x40007400
 800148c:	40021000 	.word	0x40021000
 8001490:	20000290 	.word	0x20000290
 8001494:	40020030 	.word	0x40020030
 8001498:	200002d8 	.word	0x200002d8
 800149c:	40020044 	.word	0x40020044

080014a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014a6:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <MX_DMA_Init+0x58>)
 80014a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014aa:	4a13      	ldr	r2, [pc, #76]	; (80014f8 <MX_DMA_Init+0x58>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6493      	str	r3, [r2, #72]	; 0x48
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_DMA_Init+0x58>)
 80014b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	200b      	movs	r0, #11
 80014c4:	f001 fbff 	bl	8002cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014c8:	200b      	movs	r0, #11
 80014ca:	f001 fc18 	bl	8002cfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	200d      	movs	r0, #13
 80014d4:	f001 fbf7 	bl	8002cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80014d8:	200d      	movs	r0, #13
 80014da:	f001 fc10 	bl	8002cfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	200e      	movs	r0, #14
 80014e4:	f001 fbef 	bl	8002cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80014e8:	200e      	movs	r0, #14
 80014ea:	f001 fc08 	bl	8002cfe <HAL_NVIC_EnableIRQ>

}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40021000 	.word	0x40021000

080014fc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001512:	4b67      	ldr	r3, [pc, #412]	; (80016b0 <MX_GPIO_Init+0x1b4>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	4a66      	ldr	r2, [pc, #408]	; (80016b0 <MX_GPIO_Init+0x1b4>)
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151e:	4b64      	ldr	r3, [pc, #400]	; (80016b0 <MX_GPIO_Init+0x1b4>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800152a:	4b61      	ldr	r3, [pc, #388]	; (80016b0 <MX_GPIO_Init+0x1b4>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	4a60      	ldr	r2, [pc, #384]	; (80016b0 <MX_GPIO_Init+0x1b4>)
 8001530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001536:	4b5e      	ldr	r3, [pc, #376]	; (80016b0 <MX_GPIO_Init+0x1b4>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	4b5b      	ldr	r3, [pc, #364]	; (80016b0 <MX_GPIO_Init+0x1b4>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	4a5a      	ldr	r2, [pc, #360]	; (80016b0 <MX_GPIO_Init+0x1b4>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154e:	4b58      	ldr	r3, [pc, #352]	; (80016b0 <MX_GPIO_Init+0x1b4>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	4b55      	ldr	r3, [pc, #340]	; (80016b0 <MX_GPIO_Init+0x1b4>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	4a54      	ldr	r2, [pc, #336]	; (80016b0 <MX_GPIO_Init+0x1b4>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001566:	4b52      	ldr	r3, [pc, #328]	; (80016b0 <MX_GPIO_Init+0x1b4>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DI_OUT_8_P_Pin|DI_OUT_8_N_Pin|DI_OUT_6_N_Pin|DI_OUT_5_P_Pin
 8001572:	2200      	movs	r2, #0
 8001574:	f24c 31d0 	movw	r1, #50128	; 0xc3d0
 8001578:	484e      	ldr	r0, [pc, #312]	; (80016b4 <MX_GPIO_Init+0x1b8>)
 800157a:	f002 f8e3 	bl	8003744 <HAL_GPIO_WritePin>
                          |DI_OUT_3_N_Pin|DI_OUT_3_P_Pin|DI_OUT_1_N_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DI_OUT_4_P_Pin|DI_OUT_6_P_Pin|DI_OUT_2_N_Pin|DI_OUT_4_N_Pin
 800157e:	2200      	movs	r2, #0
 8001580:	f64e 41ff 	movw	r1, #60671	; 0xecff
 8001584:	484c      	ldr	r0, [pc, #304]	; (80016b8 <MX_GPIO_Init+0x1bc>)
 8001586:	f002 f8dd 	bl	8003744 <HAL_GPIO_WritePin>
                          |DI_OUT_2_P_Pin|DI_OUT_7_N_Pin|DI_OUT_7_P_Pin|DI_OUT_5_N_Pin
                          |RFM_NSS_Pin|RFM_RST_Pin|RFM_DI_3_Pin|RFM_DI_0_Pin
                          |RFM_DI_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DI_OUT_1_P_Pin|LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001594:	f002 f8d6 	bl	8003744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001598:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800159e:	2303      	movs	r3, #3
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	4841      	ldr	r0, [pc, #260]	; (80016b4 <MX_GPIO_Init+0x1b8>)
 80015ae:	f001 ff4f 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DI_OUT_8_P_Pin|DI_OUT_8_N_Pin|DI_OUT_6_N_Pin|DI_OUT_5_P_Pin
 80015b2:	f24c 33d0 	movw	r3, #50128	; 0xc3d0
 80015b6:	617b      	str	r3, [r7, #20]
                          |DI_OUT_3_N_Pin|DI_OUT_3_P_Pin|DI_OUT_1_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	483a      	ldr	r0, [pc, #232]	; (80016b4 <MX_GPIO_Init+0x1b8>)
 80015cc:	f001 ff40 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80015d0:	2309      	movs	r3, #9
 80015d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d4:	2303      	movs	r3, #3
 80015d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	4836      	ldr	r0, [pc, #216]	; (80016bc <MX_GPIO_Init+0x1c0>)
 80015e4:	f001 ff34 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DI_1_Pin;
 80015e8:	2302      	movs	r3, #2
 80015ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DI_1_GPIO_Port, &GPIO_InitStruct);
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4619      	mov	r1, r3
 80015fa:	4830      	ldr	r0, [pc, #192]	; (80016bc <MX_GPIO_Init+0x1c0>)
 80015fc:	f001 ff28 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DI_2_Pin|DI_3_Pin|DI_4_Pin|DI_5_Pin;
 8001600:	230f      	movs	r3, #15
 8001602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001604:	2300      	movs	r3, #0
 8001606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	4828      	ldr	r0, [pc, #160]	; (80016b4 <MX_GPIO_Init+0x1b8>)
 8001614:	f001 ff1c 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DI_6_Pin|DI_7_Pin|DI_8_Pin;
 8001618:	2307      	movs	r3, #7
 800161a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161c:	2300      	movs	r3, #0
 800161e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4619      	mov	r1, r3
 800162a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162e:	f001 ff0f 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_15;
 8001632:	f248 0308 	movw	r3, #32776	; 0x8008
 8001636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001638:	2303      	movs	r3, #3
 800163a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164a:	f001 ff01 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DI_OUT_4_P_Pin|DI_OUT_6_P_Pin|DI_OUT_2_N_Pin|DI_OUT_4_N_Pin
 800164e:	f64e 43ff 	movw	r3, #60671	; 0xecff
 8001652:	617b      	str	r3, [r7, #20]
                          |DI_OUT_2_P_Pin|DI_OUT_7_N_Pin|DI_OUT_7_P_Pin|DI_OUT_5_N_Pin
                          |RFM_NSS_Pin|RFM_RST_Pin|RFM_DI_3_Pin|RFM_DI_0_Pin
                          |RFM_DI_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	4814      	ldr	r0, [pc, #80]	; (80016b8 <MX_GPIO_Init+0x1bc>)
 8001668:	f001 fef2 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 800166c:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001672:	2303      	movs	r3, #3
 8001674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	480d      	ldr	r0, [pc, #52]	; (80016b8 <MX_GPIO_Init+0x1bc>)
 8001682:	f001 fee5 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DI_OUT_1_P_Pin|LED_R_Pin|LED_G_Pin;
 8001686:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a2:	f001 fed5 	bl	8003450 <HAL_GPIO_Init>

}
 80016a6:	bf00      	nop
 80016a8:	3728      	adds	r7, #40	; 0x28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000
 80016b4:	48000800 	.word	0x48000800
 80016b8:	48000400 	.word	0x48000400
 80016bc:	48001c00 	.word	0x48001c00

080016c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c4:	f000 fad7 	bl	8001c76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c8:	f000 f81a 	bl	8001700 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80016cc:	f000 f87b 	bl	80017c6 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d0:	f7ff ff14 	bl	80014fc <MX_GPIO_Init>
  MX_DMA_Init();
 80016d4:	f7ff fee4 	bl	80014a0 <MX_DMA_Init>
  MX_ADC1_Init();
 80016d8:	f7ff fcd0 	bl	800107c <MX_ADC1_Init>
  MX_DAC1_Init();
 80016dc:	f7ff fe08 	bl	80012f0 <MX_DAC1_Init>
  MX_SPI3_Init();
 80016e0:	f000 f8e6 	bl	80018b0 <MX_SPI3_Init>
  MX_USB_DEVICE_Init();
 80016e4:	f009 ff50 	bl	800b588 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 80016e8:	f7ff fdc0 	bl	800126c <MX_CRC_Init>
  MX_TIM6_Init();
 80016ec:	f000 f9f4 	bl	8001ad8 <MX_TIM6_Init>
  MX_TIM7_Init();
 80016f0:	f000 fa28 	bl	8001b44 <MX_TIM7_Init>


  /* USER CODE BEGIN 2 */

  	  appMain.Startup();
 80016f4:	4801      	ldr	r0, [pc, #4]	; (80016fc <main+0x3c>)
 80016f6:	f7fe ffa1 	bl	800063c <_ZN7AppMain7StartupEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <main+0x3a>
 80016fc:	20000320 	.word	0x20000320

08001700 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b096      	sub	sp, #88	; 0x58
 8001704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	2244      	movs	r2, #68	; 0x44
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f00a fce8 	bl	800c0e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001714:	463b      	mov	r3, r7
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001722:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001726:	f003 fdd9 	bl	80052dc <HAL_PWREx_ControlVoltageScaling>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	bf14      	ite	ne
 8001730:	2301      	movne	r3, #1
 8001732:	2300      	moveq	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800173a:	f000 f895 	bl	8001868 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 800173e:	2330      	movs	r3, #48	; 0x30
 8001740:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001742:	2301      	movs	r3, #1
 8001744:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001746:	2301      	movs	r3, #1
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800174e:	2360      	movs	r3, #96	; 0x60
 8001750:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001752:	2302      	movs	r3, #2
 8001754:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001756:	2301      	movs	r3, #1
 8001758:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800175a:	2301      	movs	r3, #1
 800175c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 800175e:	2324      	movs	r3, #36	; 0x24
 8001760:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001762:	2307      	movs	r3, #7
 8001764:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001766:	2302      	movs	r3, #2
 8001768:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800176a:	2302      	movs	r3, #2
 800176c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4618      	mov	r0, r3
 8001774:	f003 fe18 	bl	80053a8 <HAL_RCC_OscConfig>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	bf14      	ite	ne
 800177e:	2301      	movne	r3, #1
 8001780:	2300      	moveq	r3, #0
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8001788:	f000 f86e 	bl	8001868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800178c:	230f      	movs	r3, #15
 800178e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001790:	2303      	movs	r3, #3
 8001792:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001794:	2300      	movs	r3, #0
 8001796:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800179c:	2300      	movs	r3, #0
 800179e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017a0:	463b      	mov	r3, r7
 80017a2:	2104      	movs	r1, #4
 80017a4:	4618      	mov	r0, r3
 80017a6:	f004 fa13 	bl	8005bd0 <HAL_RCC_ClockConfig>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	bf14      	ite	ne
 80017b0:	2301      	movne	r3, #1
 80017b2:	2300      	moveq	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 80017ba:	f000 f855 	bl	8001868 <Error_Handler>
  }
}
 80017be:	bf00      	nop
 80017c0:	3758      	adds	r7, #88	; 0x58
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b098      	sub	sp, #96	; 0x60
 80017ca:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017cc:	463b      	mov	r3, r7
 80017ce:	2260      	movs	r2, #96	; 0x60
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f00a fc86 	bl	800c0e4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80017d8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80017dc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80017de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80017e2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80017e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80017e8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80017ea:	2301      	movs	r3, #1
 80017ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80017ee:	2301      	movs	r3, #1
 80017f0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80017f2:	2318      	movs	r3, #24
 80017f4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80017f6:	2307      	movs	r3, #7
 80017f8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80017fa:	2302      	movs	r3, #2
 80017fc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80017fe:	2302      	movs	r3, #2
 8001800:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001802:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001806:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001808:	463b      	mov	r3, r7
 800180a:	4618      	mov	r0, r3
 800180c:	f004 fbd8 	bl	8005fc0 <HAL_RCCEx_PeriphCLKConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	bf14      	ite	ne
 8001816:	2301      	movne	r3, #1
 8001818:	2300      	moveq	r3, #0
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <_Z24PeriphCommonClock_Configv+0x5e>
  {
    Error_Handler();
 8001820:	f000 f822 	bl	8001868 <Error_Handler>
  }
}
 8001824:	bf00      	nop
 8001826:	3760      	adds	r7, #96	; 0x60
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
//	if(htim->Instance == TIM17){
//		msCounter++;
//	}


	if(htim->Instance == TIM7){
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a04      	ldr	r2, [pc, #16]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d102      	bne.n	8001844 <HAL_TIM_PeriodElapsedCallback+0x18>
		appMain.taskStatus.UpdateTasks();
 800183e:	4804      	ldr	r0, [pc, #16]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001840:	f7ff fb1e 	bl	8000e80 <_ZN11TaskHandler11UpdateTasksEv>
	}



}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40001400 	.word	0x40001400
 8001850:	20000340 	.word	0x20000340

08001854 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800186c:	b672      	cpsid	i
}
 800186e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001870:	e7fe      	b.n	8001870 <Error_Handler+0x8>
	...

08001874 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d107      	bne.n	8001894 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800188a:	4293      	cmp	r3, r2
 800188c:	d102      	bne.n	8001894 <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 800188e:	4803      	ldr	r0, [pc, #12]	; (800189c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001890:	f7fe fe48 	bl	8000524 <_ZN7AppMainC1Ev>
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000320 	.word	0x20000320

080018a0 <_GLOBAL__sub_I_appMain>:
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80018a8:	2001      	movs	r0, #1
 80018aa:	f7ff ffe3 	bl	8001874 <_Z41__static_initialization_and_destruction_0ii>
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <MX_SPI3_Init+0x74>)
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <MX_SPI3_Init+0x78>)
 80018b8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <MX_SPI3_Init+0x74>)
 80018bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018c0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <MX_SPI3_Init+0x74>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c8:	4b16      	ldr	r3, [pc, #88]	; (8001924 <MX_SPI3_Init+0x74>)
 80018ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80018ce:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018d0:	4b14      	ldr	r3, [pc, #80]	; (8001924 <MX_SPI3_Init+0x74>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018d6:	4b13      	ldr	r3, [pc, #76]	; (8001924 <MX_SPI3_Init+0x74>)
 80018d8:	2200      	movs	r2, #0
 80018da:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MX_SPI3_Init+0x74>)
 80018de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <MX_SPI3_Init+0x74>)
 80018e6:	2218      	movs	r2, #24
 80018e8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <MX_SPI3_Init+0x74>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <MX_SPI3_Init+0x74>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <MX_SPI3_Init+0x74>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <MX_SPI3_Init+0x74>)
 80018fe:	2207      	movs	r2, #7
 8001900:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <MX_SPI3_Init+0x74>)
 8001904:	2200      	movs	r2, #0
 8001906:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <MX_SPI3_Init+0x74>)
 800190a:	2208      	movs	r2, #8
 800190c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <MX_SPI3_Init+0x74>)
 8001910:	f004 fe92 	bl	8006638 <HAL_SPI_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800191a:	f7ff ffa5 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200003dc 	.word	0x200003dc
 8001928:	40003c00 	.word	0x40003c00

0800192c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a17      	ldr	r2, [pc, #92]	; (80019a8 <HAL_SPI_MspInit+0x7c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d128      	bne.n	80019a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_SPI_MspInit+0x80>)
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	4a16      	ldr	r2, [pc, #88]	; (80019ac <HAL_SPI_MspInit+0x80>)
 8001954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001958:	6593      	str	r3, [r2, #88]	; 0x58
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_SPI_MspInit+0x80>)
 800195c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_SPI_MspInit+0x80>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	4a10      	ldr	r2, [pc, #64]	; (80019ac <HAL_SPI_MspInit+0x80>)
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_SPI_MspInit+0x80>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800197e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198c:	2303      	movs	r3, #3
 800198e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001990:	2306      	movs	r3, #6
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4619      	mov	r1, r3
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <HAL_SPI_MspInit+0x84>)
 800199c:	f001 fd58 	bl	8003450 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80019a0:	bf00      	nop
 80019a2:	3728      	adds	r7, #40	; 0x28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40003c00 	.word	0x40003c00
 80019ac:	40021000 	.word	0x40021000
 80019b0:	48000800 	.word	0x48000800

080019b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ba:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <HAL_MspInit+0x44>)
 80019bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019be:	4a0e      	ldr	r2, [pc, #56]	; (80019f8 <HAL_MspInit+0x44>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6613      	str	r3, [r2, #96]	; 0x60
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_MspInit+0x44>)
 80019c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_MspInit+0x44>)
 80019d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d6:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <HAL_MspInit+0x44>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019dc:	6593      	str	r3, [r2, #88]	; 0x58
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_MspInit+0x44>)
 80019e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000

080019fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <NMI_Handler+0x4>

08001a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <HardFault_Handler+0x4>

08001a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <MemManage_Handler+0x4>

08001a0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <BusFault_Handler+0x4>

08001a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <UsageFault_Handler+0x4>

08001a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a48:	f000 f96a 	bl	8001d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <DMA1_Channel1_IRQHandler+0x10>)
 8001a56:	f001 fc4b 	bl	80032f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000210 	.word	0x20000210

08001a64 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <DMA1_Channel3_IRQHandler+0x10>)
 8001a6a:	f001 fc41 	bl	80032f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000290 	.word	0x20000290

08001a78 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <DMA1_Channel4_IRQHandler+0x10>)
 8001a7e:	f001 fc37 	bl	80032f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200002d8 	.word	0x200002d8

08001a8c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <TIM7_IRQHandler+0x10>)
 8001a92:	f005 fc05 	bl	80072a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2000048c 	.word	0x2000048c

08001aa0 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <USB_IRQHandler+0x10>)
 8001aa6:	f001 ffb8 	bl	8003a1a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20001180 	.word	0x20001180

08001ab4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <SystemInit+0x20>)
 8001aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001abe:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <SystemInit+0x20>)
 8001ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <MX_TIM6_Init+0x64>)
 8001aea:	4a15      	ldr	r2, [pc, #84]	; (8001b40 <MX_TIM6_Init+0x68>)
 8001aec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 8001aee:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <MX_TIM6_Init+0x64>)
 8001af0:	220a      	movs	r2, #10
 8001af2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <MX_TIM6_Init+0x64>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16000;
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <MX_TIM6_Init+0x64>)
 8001afc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001b00:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <MX_TIM6_Init+0x64>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b08:	480c      	ldr	r0, [pc, #48]	; (8001b3c <MX_TIM6_Init+0x64>)
 8001b0a:	f005 fb1d 	bl	8007148 <HAL_TIM_Base_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b14:	f7ff fea8 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	4619      	mov	r1, r3
 8001b24:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_TIM6_Init+0x64>)
 8001b26:	f005 fd5d 	bl	80075e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b30:	f7ff fe9a 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000440 	.word	0x20000440
 8001b40:	40001000 	.word	0x40001000

08001b44 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <MX_TIM7_Init+0x64>)
 8001b56:	4a15      	ldr	r2, [pc, #84]	; (8001bac <MX_TIM7_Init+0x68>)
 8001b58:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10;
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <MX_TIM7_Init+0x64>)
 8001b5c:	220a      	movs	r2, #10
 8001b5e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <MX_TIM7_Init+0x64>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7199;
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <MX_TIM7_Init+0x64>)
 8001b68:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001b6c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <MX_TIM7_Init+0x64>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001b74:	480c      	ldr	r0, [pc, #48]	; (8001ba8 <MX_TIM7_Init+0x64>)
 8001b76:	f005 fae7 	bl	8007148 <HAL_TIM_Base_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001b80:	f7ff fe72 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b84:	2320      	movs	r3, #32
 8001b86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <MX_TIM7_Init+0x64>)
 8001b92:	f005 fd27 	bl	80075e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001b9c:	f7ff fe64 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001ba0:	bf00      	nop
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	2000048c 	.word	0x2000048c
 8001bac:	40001400 	.word	0x40001400

08001bb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <HAL_TIM_Base_MspInit+0x68>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d10c      	bne.n	8001bdc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001bc2:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <HAL_TIM_Base_MspInit+0x6c>)
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc6:	4a15      	ldr	r2, [pc, #84]	; (8001c1c <HAL_TIM_Base_MspInit+0x6c>)
 8001bc8:	f043 0310 	orr.w	r3, r3, #16
 8001bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8001bce:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <HAL_TIM_Base_MspInit+0x6c>)
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	f003 0310 	and.w	r3, r3, #16
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001bda:	e018      	b.n	8001c0e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0f      	ldr	r2, [pc, #60]	; (8001c20 <HAL_TIM_Base_MspInit+0x70>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d113      	bne.n	8001c0e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001be6:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <HAL_TIM_Base_MspInit+0x6c>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	4a0c      	ldr	r2, [pc, #48]	; (8001c1c <HAL_TIM_Base_MspInit+0x6c>)
 8001bec:	f043 0320 	orr.w	r3, r3, #32
 8001bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_TIM_Base_MspInit+0x6c>)
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	f003 0320 	and.w	r3, r3, #32
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	2037      	movs	r0, #55	; 0x37
 8001c04:	f001 f85f 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c08:	2037      	movs	r0, #55	; 0x37
 8001c0a:	f001 f878 	bl	8002cfe <HAL_NVIC_EnableIRQ>
}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40001000 	.word	0x40001000
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40001400 	.word	0x40001400

08001c24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c28:	f7ff ff44 	bl	8001ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c2c:	480c      	ldr	r0, [pc, #48]	; (8001c60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c2e:	490d      	ldr	r1, [pc, #52]	; (8001c64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c30:	4a0d      	ldr	r2, [pc, #52]	; (8001c68 <LoopForever+0xe>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c34:	e002      	b.n	8001c3c <LoopCopyDataInit>

08001c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3a:	3304      	adds	r3, #4

08001c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c40:	d3f9      	bcc.n	8001c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c42:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c44:	4c0a      	ldr	r4, [pc, #40]	; (8001c70 <LoopForever+0x16>)
  movs r3, #0
 8001c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c48:	e001      	b.n	8001c4e <LoopFillZerobss>

08001c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c4c:	3204      	adds	r2, #4

08001c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c50:	d3fb      	bcc.n	8001c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c52:	f00a fa23 	bl	800c09c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c56:	f7ff fd33 	bl	80016c0 <main>

08001c5a <LoopForever>:

LoopForever:
    b LoopForever
 8001c5a:	e7fe      	b.n	8001c5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c5c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c64:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001c68:	0800c1c4 	.word	0x0800c1c4
  ldr r2, =_sbss
 8001c6c:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8001c70:	2000169c 	.word	0x2000169c

08001c74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c74:	e7fe      	b.n	8001c74 <ADC1_IRQHandler>

08001c76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c80:	2003      	movs	r0, #3
 8001c82:	f001 f815 	bl	8002cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c86:	200f      	movs	r0, #15
 8001c88:	f000 f80e 	bl	8001ca8 <HAL_InitTick>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	71fb      	strb	r3, [r7, #7]
 8001c96:	e001      	b.n	8001c9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c98:	f7ff fe8c 	bl	80019b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001cb4:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <HAL_InitTick+0x6c>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d023      	beq.n	8001d04 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001cbc:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <HAL_InitTick+0x70>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <HAL_InitTick+0x6c>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f001 f821 	bl	8002d1a <HAL_SYSTICK_Config>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10f      	bne.n	8001cfe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b0f      	cmp	r3, #15
 8001ce2:	d809      	bhi.n	8001cf8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	f000 ffeb 	bl	8002cc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cf0:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <HAL_InitTick+0x74>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e007      	b.n	8001d08 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
 8001cfc:	e004      	b.n	8001d08 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	73fb      	strb	r3, [r7, #15]
 8001d02:	e001      	b.n	8001d08 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000008 	.word	0x20000008
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	20000004 	.word	0x20000004

08001d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_IncTick+0x20>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_IncTick+0x24>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <HAL_IncTick+0x24>)
 8001d32:	6013      	str	r3, [r2, #0]
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000008 	.word	0x20000008
 8001d44:	200004d8 	.word	0x200004d8

08001d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <HAL_GetTick+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	200004d8 	.word	0x200004d8

08001d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d68:	f7ff ffee 	bl	8001d48 <HAL_GetTick>
 8001d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d005      	beq.n	8001d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_Delay+0x44>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d86:	bf00      	nop
 8001d88:	f7ff ffde 	bl	8001d48 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d8f7      	bhi.n	8001d88 <HAL_Delay+0x28>
  {
  }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000008 	.word	0x20000008

08001da8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	609a      	str	r2, [r3, #8]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	3360      	adds	r3, #96	; 0x60
 8001e22:	461a      	mov	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <LL_ADC_SetOffset+0x44>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e48:	bf00      	nop
 8001e4a:	371c      	adds	r7, #28
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	03fff000 	.word	0x03fff000

08001e58 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3360      	adds	r3, #96	; 0x60
 8001e66:	461a      	mov	r2, r3
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3360      	adds	r3, #96	; 0x60
 8001e94:	461a      	mov	r2, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001eae:	bf00      	nop
 8001eb0:	371c      	adds	r7, #28
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b087      	sub	sp, #28
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	3330      	adds	r3, #48	; 0x30
 8001eca:	461a      	mov	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	0a1b      	lsrs	r3, r3, #8
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	4413      	add	r3, r2
 8001ed8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	211f      	movs	r1, #31
 8001ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	401a      	ands	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	0e9b      	lsrs	r3, r3, #26
 8001ef2:	f003 011f 	and.w	r1, r3, #31
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	f003 031f 	and.w	r3, r3, #31
 8001efc:	fa01 f303 	lsl.w	r3, r1, r3
 8001f00:	431a      	orrs	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f06:	bf00      	nop
 8001f08:	371c      	adds	r7, #28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b087      	sub	sp, #28
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	3314      	adds	r3, #20
 8001f22:	461a      	mov	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	0e5b      	lsrs	r3, r3, #25
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	4413      	add	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	0d1b      	lsrs	r3, r3, #20
 8001f3a:	f003 031f 	and.w	r3, r3, #31
 8001f3e:	2107      	movs	r1, #7
 8001f40:	fa01 f303 	lsl.w	r3, r1, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	401a      	ands	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	0d1b      	lsrs	r3, r3, #20
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	fa01 f303 	lsl.w	r3, r1, r3
 8001f56:	431a      	orrs	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f5c:	bf00      	nop
 8001f5e:	371c      	adds	r7, #28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f80:	43db      	mvns	r3, r3
 8001f82:	401a      	ands	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f003 0318 	and.w	r3, r3, #24
 8001f8a:	4908      	ldr	r1, [pc, #32]	; (8001fac <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f8c:	40d9      	lsrs	r1, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	400b      	ands	r3, r1
 8001f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f96:	431a      	orrs	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	0007ffff 	.word	0x0007ffff

08001fb0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001fc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6093      	str	r3, [r2, #8]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fe8:	d101      	bne.n	8001fee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800200c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002010:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002034:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002038:	d101      	bne.n	800203e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <LL_ADC_IsEnabled+0x18>
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <LL_ADC_IsEnabled+0x1a>
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b04      	cmp	r3, #4
 8002084:	d101      	bne.n	800208a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d101      	bne.n	80020b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e12c      	b.n	8002334 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d109      	bne.n	80020fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff f82b 	bl	8001144 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff67 	bl	8001fd4 <LL_ADC_IsDeepPowerDownEnabled>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d004      	beq.n	8002116 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff4d 	bl	8001fb0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff ff82 	bl	8002024 <LL_ADC_IsInternalRegulatorEnabled>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d115      	bne.n	8002152 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ff66 	bl	8001ffc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002130:	4b82      	ldr	r3, [pc, #520]	; (800233c <HAL_ADC_Init+0x27c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	099b      	lsrs	r3, r3, #6
 8002136:	4a82      	ldr	r2, [pc, #520]	; (8002340 <HAL_ADC_Init+0x280>)
 8002138:	fba2 2303 	umull	r2, r3, r2, r3
 800213c:	099b      	lsrs	r3, r3, #6
 800213e:	3301      	adds	r3, #1
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002144:	e002      	b.n	800214c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	3b01      	subs	r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f9      	bne.n	8002146 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff64 	bl	8002024 <LL_ADC_IsInternalRegulatorEnabled>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10d      	bne.n	800217e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002166:	f043 0210 	orr.w	r2, r3, #16
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002172:	f043 0201 	orr.w	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff ff75 	bl	8002072 <LL_ADC_REG_IsConversionOngoing>
 8002188:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	2b00      	cmp	r3, #0
 8002194:	f040 80c5 	bne.w	8002322 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f040 80c1 	bne.w	8002322 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021a8:	f043 0202 	orr.w	r2, r3, #2
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff49 	bl	800204c <LL_ADC_IsEnabled>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10b      	bne.n	80021d8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021c0:	4860      	ldr	r0, [pc, #384]	; (8002344 <HAL_ADC_Init+0x284>)
 80021c2:	f7ff ff43 	bl	800204c <LL_ADC_IsEnabled>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d105      	bne.n	80021d8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4619      	mov	r1, r3
 80021d2:	485d      	ldr	r0, [pc, #372]	; (8002348 <HAL_ADC_Init+0x288>)
 80021d4:	f7ff fde8 	bl	8001da8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	7e5b      	ldrb	r3, [r3, #25]
 80021dc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021e2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80021e8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80021ee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d106      	bne.n	8002214 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	3b01      	subs	r3, #1
 800220c:	045b      	lsls	r3, r3, #17
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	2b00      	cmp	r3, #0
 800221a:	d009      	beq.n	8002230 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	4b45      	ldr	r3, [pc, #276]	; (800234c <HAL_ADC_Init+0x28c>)
 8002238:	4013      	ands	r3, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	69b9      	ldr	r1, [r7, #24]
 8002240:	430b      	orrs	r3, r1
 8002242:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff12 	bl	8002072 <LL_ADC_REG_IsConversionOngoing>
 800224e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ff1f 	bl	8002098 <LL_ADC_INJ_IsConversionOngoing>
 800225a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d13d      	bne.n	80022de <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d13a      	bne.n	80022de <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800226c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002274:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002284:	f023 0302 	bic.w	r3, r3, #2
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	69b9      	ldr	r1, [r7, #24]
 800228e:	430b      	orrs	r3, r1
 8002290:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002298:	2b01      	cmp	r3, #1
 800229a:	d118      	bne.n	80022ce <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022a6:	f023 0304 	bic.w	r3, r3, #4
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022b2:	4311      	orrs	r1, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022b8:	4311      	orrs	r1, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022be:	430a      	orrs	r2, r1
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	611a      	str	r2, [r3, #16]
 80022cc:	e007      	b.n	80022de <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0201 	bic.w	r2, r2, #1
 80022dc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d10c      	bne.n	8002300 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	f023 010f 	bic.w	r1, r3, #15
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	1e5a      	subs	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	631a      	str	r2, [r3, #48]	; 0x30
 80022fe:	e007      	b.n	8002310 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 020f 	bic.w	r2, r2, #15
 800230e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002314:	f023 0303 	bic.w	r3, r3, #3
 8002318:	f043 0201 	orr.w	r2, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	655a      	str	r2, [r3, #84]	; 0x54
 8002320:	e007      	b.n	8002332 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002326:	f043 0210 	orr.w	r2, r3, #16
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002332:	7ffb      	ldrb	r3, [r7, #31]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3720      	adds	r7, #32
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000000 	.word	0x20000000
 8002340:	053e2d63 	.word	0x053e2d63
 8002344:	50040000 	.word	0x50040000
 8002348:	50040300 	.word	0x50040300
 800234c:	fff0c007 	.word	0xfff0c007

08002350 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b0b6      	sub	sp, #216	; 0xd8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x22>
 800236e:	2302      	movs	r3, #2
 8002370:	e3b9      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x796>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fe77 	bl	8002072 <LL_ADC_REG_IsConversionOngoing>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	f040 839e 	bne.w	8002ac8 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b05      	cmp	r3, #5
 8002392:	d824      	bhi.n	80023de <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	3b02      	subs	r3, #2
 800239a:	2b03      	cmp	r3, #3
 800239c:	d81b      	bhi.n	80023d6 <HAL_ADC_ConfigChannel+0x86>
 800239e:	a201      	add	r2, pc, #4	; (adr r2, 80023a4 <HAL_ADC_ConfigChannel+0x54>)
 80023a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a4:	080023b5 	.word	0x080023b5
 80023a8:	080023bd 	.word	0x080023bd
 80023ac:	080023c5 	.word	0x080023c5
 80023b0:	080023cd 	.word	0x080023cd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	220c      	movs	r2, #12
 80023b8:	605a      	str	r2, [r3, #4]
          break;
 80023ba:	e011      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2212      	movs	r2, #18
 80023c0:	605a      	str	r2, [r3, #4]
          break;
 80023c2:	e00d      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2218      	movs	r2, #24
 80023c8:	605a      	str	r2, [r3, #4]
          break;
 80023ca:	e009      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023d2:	605a      	str	r2, [r3, #4]
          break;
 80023d4:	e004      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2206      	movs	r2, #6
 80023da:	605a      	str	r2, [r3, #4]
          break;
 80023dc:	e000      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80023de:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	6859      	ldr	r1, [r3, #4]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	f7ff fd64 	bl	8001eba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fe3b 	bl	8002072 <LL_ADC_REG_IsConversionOngoing>
 80023fc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fe47 	bl	8002098 <LL_ADC_INJ_IsConversionOngoing>
 800240a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800240e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002412:	2b00      	cmp	r3, #0
 8002414:	f040 81a6 	bne.w	8002764 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002418:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800241c:	2b00      	cmp	r3, #0
 800241e:	f040 81a1 	bne.w	8002764 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6819      	ldr	r1, [r3, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	461a      	mov	r2, r3
 8002430:	f7ff fd6f 	bl	8001f12 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	695a      	ldr	r2, [r3, #20]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	08db      	lsrs	r3, r3, #3
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b04      	cmp	r3, #4
 8002454:	d00a      	beq.n	800246c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6919      	ldr	r1, [r3, #16]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002466:	f7ff fcd3 	bl	8001e10 <LL_ADC_SetOffset>
 800246a:	e17b      	b.n	8002764 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fcf0 	bl	8001e58 <LL_ADC_GetOffsetChannel>
 8002478:	4603      	mov	r3, r0
 800247a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10a      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x148>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fce5 	bl	8001e58 <LL_ADC_GetOffsetChannel>
 800248e:	4603      	mov	r3, r0
 8002490:	0e9b      	lsrs	r3, r3, #26
 8002492:	f003 021f 	and.w	r2, r3, #31
 8002496:	e01e      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x186>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fcda 	bl	8001e58 <LL_ADC_GetOffsetChannel>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80024ae:	fa93 f3a3 	rbit	r3, r3
 80024b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80024ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80024c6:	2320      	movs	r3, #32
 80024c8:	e004      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80024ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d105      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x19e>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	0e9b      	lsrs	r3, r3, #26
 80024e8:	f003 031f 	and.w	r3, r3, #31
 80024ec:	e018      	b.n	8002520 <HAL_ADC_ConfigChannel+0x1d0>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002502:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002506:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800250a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002512:	2320      	movs	r3, #32
 8002514:	e004      	b.n	8002520 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002516:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002520:	429a      	cmp	r2, r3
 8002522:	d106      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2200      	movs	r2, #0
 800252a:	2100      	movs	r1, #0
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fca9 	bl	8001e84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2101      	movs	r1, #1
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fc8d 	bl	8001e58 <LL_ADC_GetOffsetChannel>
 800253e:	4603      	mov	r3, r0
 8002540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10a      	bne.n	800255e <HAL_ADC_ConfigChannel+0x20e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2101      	movs	r1, #1
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fc82 	bl	8001e58 <LL_ADC_GetOffsetChannel>
 8002554:	4603      	mov	r3, r0
 8002556:	0e9b      	lsrs	r3, r3, #26
 8002558:	f003 021f 	and.w	r2, r3, #31
 800255c:	e01e      	b.n	800259c <HAL_ADC_ConfigChannel+0x24c>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2101      	movs	r1, #1
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fc77 	bl	8001e58 <LL_ADC_GetOffsetChannel>
 800256a:	4603      	mov	r3, r0
 800256c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800257c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002580:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002584:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800258c:	2320      	movs	r3, #32
 800258e:	e004      	b.n	800259a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002590:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002594:	fab3 f383 	clz	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x264>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	0e9b      	lsrs	r3, r3, #26
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	e018      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x296>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80025c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80025d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80025d8:	2320      	movs	r3, #32
 80025da:	e004      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80025dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d106      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2200      	movs	r2, #0
 80025f0:	2101      	movs	r1, #1
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fc46 	bl	8001e84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2102      	movs	r1, #2
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fc2a 	bl	8001e58 <LL_ADC_GetOffsetChannel>
 8002604:	4603      	mov	r3, r0
 8002606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10a      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x2d4>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2102      	movs	r1, #2
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff fc1f 	bl	8001e58 <LL_ADC_GetOffsetChannel>
 800261a:	4603      	mov	r3, r0
 800261c:	0e9b      	lsrs	r3, r3, #26
 800261e:	f003 021f 	and.w	r2, r3, #31
 8002622:	e01e      	b.n	8002662 <HAL_ADC_ConfigChannel+0x312>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2102      	movs	r1, #2
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fc14 	bl	8001e58 <LL_ADC_GetOffsetChannel>
 8002630:	4603      	mov	r3, r0
 8002632:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002642:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002646:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800264a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002652:	2320      	movs	r3, #32
 8002654:	e004      	b.n	8002660 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002656:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266a:	2b00      	cmp	r3, #0
 800266c:	d105      	bne.n	800267a <HAL_ADC_ConfigChannel+0x32a>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	0e9b      	lsrs	r3, r3, #26
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	e016      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x358>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800268c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800268e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002692:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800269a:	2320      	movs	r3, #32
 800269c:	e004      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800269e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d106      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2200      	movs	r2, #0
 80026b2:	2102      	movs	r1, #2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fbe5 	bl	8001e84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2103      	movs	r1, #3
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fbc9 	bl	8001e58 <LL_ADC_GetOffsetChannel>
 80026c6:	4603      	mov	r3, r0
 80026c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10a      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x396>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2103      	movs	r1, #3
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fbbe 	bl	8001e58 <LL_ADC_GetOffsetChannel>
 80026dc:	4603      	mov	r3, r0
 80026de:	0e9b      	lsrs	r3, r3, #26
 80026e0:	f003 021f 	and.w	r2, r3, #31
 80026e4:	e017      	b.n	8002716 <HAL_ADC_ConfigChannel+0x3c6>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2103      	movs	r1, #3
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fbb3 	bl	8001e58 <LL_ADC_GetOffsetChannel>
 80026f2:	4603      	mov	r3, r0
 80026f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80026fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002700:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002708:	2320      	movs	r3, #32
 800270a:	e003      	b.n	8002714 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800270c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271e:	2b00      	cmp	r3, #0
 8002720:	d105      	bne.n	800272e <HAL_ADC_ConfigChannel+0x3de>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	0e9b      	lsrs	r3, r3, #26
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	e011      	b.n	8002752 <HAL_ADC_ConfigChannel+0x402>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002736:	fa93 f3a3 	rbit	r3, r3
 800273a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800273c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800273e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002746:	2320      	movs	r3, #32
 8002748:	e003      	b.n	8002752 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800274a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800274c:	fab3 f383 	clz	r3, r3
 8002750:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002752:	429a      	cmp	r2, r3
 8002754:	d106      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2200      	movs	r2, #0
 800275c:	2103      	movs	r1, #3
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fb90 	bl	8001e84 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fc6f 	bl	800204c <LL_ADC_IsEnabled>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	f040 813f 	bne.w	80029f4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	6819      	ldr	r1, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	461a      	mov	r2, r3
 8002784:	f7ff fbf0 	bl	8001f68 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a8e      	ldr	r2, [pc, #568]	; (80029c8 <HAL_ADC_ConfigChannel+0x678>)
 800278e:	4293      	cmp	r3, r2
 8002790:	f040 8130 	bne.w	80029f4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10b      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x46c>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	0e9b      	lsrs	r3, r3, #26
 80027aa:	3301      	adds	r3, #1
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	2b09      	cmp	r3, #9
 80027b2:	bf94      	ite	ls
 80027b4:	2301      	movls	r3, #1
 80027b6:	2300      	movhi	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	e019      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x4a0>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80027ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027cc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80027ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80027d4:	2320      	movs	r3, #32
 80027d6:	e003      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80027d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027da:	fab3 f383 	clz	r3, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	3301      	adds	r3, #1
 80027e2:	f003 031f 	and.w	r3, r3, #31
 80027e6:	2b09      	cmp	r3, #9
 80027e8:	bf94      	ite	ls
 80027ea:	2301      	movls	r3, #1
 80027ec:	2300      	movhi	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d079      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d107      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x4c0>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	0e9b      	lsrs	r3, r3, #26
 8002806:	3301      	adds	r3, #1
 8002808:	069b      	lsls	r3, r3, #26
 800280a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800280e:	e015      	b.n	800283c <HAL_ADC_ConfigChannel+0x4ec>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800281e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002820:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002828:	2320      	movs	r3, #32
 800282a:	e003      	b.n	8002834 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800282c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	3301      	adds	r3, #1
 8002836:	069b      	lsls	r3, r3, #26
 8002838:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002844:	2b00      	cmp	r3, #0
 8002846:	d109      	bne.n	800285c <HAL_ADC_ConfigChannel+0x50c>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	0e9b      	lsrs	r3, r3, #26
 800284e:	3301      	adds	r3, #1
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	2101      	movs	r1, #1
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	e017      	b.n	800288c <HAL_ADC_ConfigChannel+0x53c>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002864:	fa93 f3a3 	rbit	r3, r3
 8002868:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800286a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800286c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800286e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002874:	2320      	movs	r3, #32
 8002876:	e003      	b.n	8002880 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800287a:	fab3 f383 	clz	r3, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	3301      	adds	r3, #1
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	2101      	movs	r1, #1
 8002888:	fa01 f303 	lsl.w	r3, r1, r3
 800288c:	ea42 0103 	orr.w	r1, r2, r3
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x562>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	0e9b      	lsrs	r3, r3, #26
 80028a2:	3301      	adds	r3, #1
 80028a4:	f003 021f 	and.w	r2, r3, #31
 80028a8:	4613      	mov	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4413      	add	r3, r2
 80028ae:	051b      	lsls	r3, r3, #20
 80028b0:	e018      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x594>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ba:	fa93 f3a3 	rbit	r3, r3
 80028be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80028c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80028ca:	2320      	movs	r3, #32
 80028cc:	e003      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80028ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d0:	fab3 f383 	clz	r3, r3
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	3301      	adds	r3, #1
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	4613      	mov	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4413      	add	r3, r2
 80028e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028e4:	430b      	orrs	r3, r1
 80028e6:	e080      	b.n	80029ea <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d107      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x5b4>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	0e9b      	lsrs	r3, r3, #26
 80028fa:	3301      	adds	r3, #1
 80028fc:	069b      	lsls	r3, r3, #26
 80028fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002902:	e015      	b.n	8002930 <HAL_ADC_ConfigChannel+0x5e0>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290c:	fa93 f3a3 	rbit	r3, r3
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002914:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800291c:	2320      	movs	r3, #32
 800291e:	e003      	b.n	8002928 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002922:	fab3 f383 	clz	r3, r3
 8002926:	b2db      	uxtb	r3, r3
 8002928:	3301      	adds	r3, #1
 800292a:	069b      	lsls	r3, r3, #26
 800292c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002938:	2b00      	cmp	r3, #0
 800293a:	d109      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x600>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	0e9b      	lsrs	r3, r3, #26
 8002942:	3301      	adds	r3, #1
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	2101      	movs	r1, #1
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	e017      	b.n	8002980 <HAL_ADC_ConfigChannel+0x630>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	61fb      	str	r3, [r7, #28]
  return result;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002968:	2320      	movs	r3, #32
 800296a:	e003      	b.n	8002974 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	3301      	adds	r3, #1
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	2101      	movs	r1, #1
 800297c:	fa01 f303 	lsl.w	r3, r1, r3
 8002980:	ea42 0103 	orr.w	r1, r2, r3
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10d      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x65c>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	0e9b      	lsrs	r3, r3, #26
 8002996:	3301      	adds	r3, #1
 8002998:	f003 021f 	and.w	r2, r3, #31
 800299c:	4613      	mov	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	3b1e      	subs	r3, #30
 80029a4:	051b      	lsls	r3, r3, #20
 80029a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029aa:	e01d      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x698>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	fa93 f3a3 	rbit	r3, r3
 80029b8:	613b      	str	r3, [r7, #16]
  return result;
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d103      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80029c4:	2320      	movs	r3, #32
 80029c6:	e005      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x684>
 80029c8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	3301      	adds	r3, #1
 80029d6:	f003 021f 	and.w	r2, r3, #31
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	3b1e      	subs	r3, #30
 80029e2:	051b      	lsls	r3, r3, #20
 80029e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029e8:	430b      	orrs	r3, r1
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	6892      	ldr	r2, [r2, #8]
 80029ee:	4619      	mov	r1, r3
 80029f0:	f7ff fa8f 	bl	8001f12 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4b3d      	ldr	r3, [pc, #244]	; (8002af0 <HAL_ADC_ConfigChannel+0x7a0>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d06c      	beq.n	8002ada <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a00:	483c      	ldr	r0, [pc, #240]	; (8002af4 <HAL_ADC_ConfigChannel+0x7a4>)
 8002a02:	f7ff f9f7 	bl	8001df4 <LL_ADC_GetCommonPathInternalCh>
 8002a06:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a3a      	ldr	r2, [pc, #232]	; (8002af8 <HAL_ADC_ConfigChannel+0x7a8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d127      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d121      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a35      	ldr	r2, [pc, #212]	; (8002afc <HAL_ADC_ConfigChannel+0x7ac>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d157      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a32:	4619      	mov	r1, r3
 8002a34:	482f      	ldr	r0, [pc, #188]	; (8002af4 <HAL_ADC_ConfigChannel+0x7a4>)
 8002a36:	f7ff f9ca 	bl	8001dce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a3a:	4b31      	ldr	r3, [pc, #196]	; (8002b00 <HAL_ADC_ConfigChannel+0x7b0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	099b      	lsrs	r3, r3, #6
 8002a40:	4a30      	ldr	r2, [pc, #192]	; (8002b04 <HAL_ADC_ConfigChannel+0x7b4>)
 8002a42:	fba2 2303 	umull	r2, r3, r2, r3
 8002a46:	099b      	lsrs	r3, r3, #6
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a54:	e002      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f9      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a62:	e03a      	b.n	8002ada <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a27      	ldr	r2, [pc, #156]	; (8002b08 <HAL_ADC_ConfigChannel+0x7b8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d113      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x746>
 8002a6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10d      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a1f      	ldr	r2, [pc, #124]	; (8002afc <HAL_ADC_ConfigChannel+0x7ac>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d12a      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4819      	ldr	r0, [pc, #100]	; (8002af4 <HAL_ADC_ConfigChannel+0x7a4>)
 8002a90:	f7ff f99d 	bl	8001dce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a94:	e021      	b.n	8002ada <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a1c      	ldr	r2, [pc, #112]	; (8002b0c <HAL_ADC_ConfigChannel+0x7bc>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d11c      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002aa0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d116      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a12      	ldr	r2, [pc, #72]	; (8002afc <HAL_ADC_ConfigChannel+0x7ac>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d111      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ab6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002abe:	4619      	mov	r1, r3
 8002ac0:	480c      	ldr	r0, [pc, #48]	; (8002af4 <HAL_ADC_ConfigChannel+0x7a4>)
 8002ac2:	f7ff f984 	bl	8001dce <LL_ADC_SetCommonPathInternalCh>
 8002ac6:	e008      	b.n	8002ada <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002acc:	f043 0220 	orr.w	r2, r3, #32
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ae2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	37d8      	adds	r7, #216	; 0xd8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	80080000 	.word	0x80080000
 8002af4:	50040300 	.word	0x50040300
 8002af8:	c7520000 	.word	0xc7520000
 8002afc:	50040000 	.word	0x50040000
 8002b00:	20000000 	.word	0x20000000
 8002b04:	053e2d63 	.word	0x053e2d63
 8002b08:	cb840000 	.word	0xcb840000
 8002b0c:	80000001 	.word	0x80000001

08002b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b20:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <__NVIC_SetPriorityGrouping+0x44>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b42:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <__NVIC_SetPriorityGrouping+0x44>)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	60d3      	str	r3, [r2, #12]
}
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <__NVIC_GetPriorityGrouping+0x18>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	0a1b      	lsrs	r3, r3, #8
 8002b62:	f003 0307 	and.w	r3, r3, #7
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	db0b      	blt.n	8002b9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	f003 021f 	and.w	r2, r3, #31
 8002b8c:	4907      	ldr	r1, [pc, #28]	; (8002bac <__NVIC_EnableIRQ+0x38>)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	2001      	movs	r0, #1
 8002b96:	fa00 f202 	lsl.w	r2, r0, r2
 8002b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	e000e100 	.word	0xe000e100

08002bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	6039      	str	r1, [r7, #0]
 8002bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	db0a      	blt.n	8002bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	490c      	ldr	r1, [pc, #48]	; (8002bfc <__NVIC_SetPriority+0x4c>)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	0112      	lsls	r2, r2, #4
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd8:	e00a      	b.n	8002bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	4908      	ldr	r1, [pc, #32]	; (8002c00 <__NVIC_SetPriority+0x50>)
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	3b04      	subs	r3, #4
 8002be8:	0112      	lsls	r2, r2, #4
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	440b      	add	r3, r1
 8002bee:	761a      	strb	r2, [r3, #24]
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000e100 	.word	0xe000e100
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b089      	sub	sp, #36	; 0x24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f1c3 0307 	rsb	r3, r3, #7
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	bf28      	it	cs
 8002c22:	2304      	movcs	r3, #4
 8002c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	2b06      	cmp	r3, #6
 8002c2c:	d902      	bls.n	8002c34 <NVIC_EncodePriority+0x30>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3b03      	subs	r3, #3
 8002c32:	e000      	b.n	8002c36 <NVIC_EncodePriority+0x32>
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c38:	f04f 32ff 	mov.w	r2, #4294967295
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43da      	mvns	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	401a      	ands	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	fa01 f303 	lsl.w	r3, r1, r3
 8002c56:	43d9      	mvns	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c5c:	4313      	orrs	r3, r2
         );
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3724      	adds	r7, #36	; 0x24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c7c:	d301      	bcc.n	8002c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e00f      	b.n	8002ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c82:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <SysTick_Config+0x40>)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c8a:	210f      	movs	r1, #15
 8002c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c90:	f7ff ff8e 	bl	8002bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <SysTick_Config+0x40>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c9a:	4b04      	ldr	r3, [pc, #16]	; (8002cac <SysTick_Config+0x40>)
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	e000e010 	.word	0xe000e010

08002cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff ff29 	bl	8002b10 <__NVIC_SetPriorityGrouping>
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4603      	mov	r3, r0
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd8:	f7ff ff3e 	bl	8002b58 <__NVIC_GetPriorityGrouping>
 8002cdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	6978      	ldr	r0, [r7, #20]
 8002ce4:	f7ff ff8e 	bl	8002c04 <NVIC_EncodePriority>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff5d 	bl	8002bb0 <__NVIC_SetPriority>
}
 8002cf6:	bf00      	nop
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	4603      	mov	r3, r0
 8002d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff31 	bl	8002b74 <__NVIC_EnableIRQ>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff ffa2 	bl	8002c6c <SysTick_Config>
 8002d28:	4603      	mov	r3, r0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e054      	b.n	8002df0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	7f5b      	ldrb	r3, [r3, #29]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d105      	bne.n	8002d5c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7fe faaa 	bl	80012b0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	791b      	ldrb	r3, [r3, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10c      	bne.n	8002d84 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a22      	ldr	r2, [pc, #136]	; (8002df8 <HAL_CRC_Init+0xc4>)
 8002d70:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0218 	bic.w	r2, r2, #24
 8002d80:	609a      	str	r2, [r3, #8]
 8002d82:	e00c      	b.n	8002d9e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6899      	ldr	r1, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f834 	bl	8002dfc <HAL_CRCEx_Polynomial_Set>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e028      	b.n	8002df0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	795b      	ldrb	r3, [r3, #5]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d105      	bne.n	8002db2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f04f 32ff 	mov.w	r2, #4294967295
 8002dae:	611a      	str	r2, [r3, #16]
 8002db0:	e004      	b.n	8002dbc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6912      	ldr	r2, [r2, #16]
 8002dba:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699a      	ldr	r2, [r3, #24]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	04c11db7 	.word	0x04c11db7

08002dfc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002e0c:	231f      	movs	r3, #31
 8002e0e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002e10:	bf00      	nop
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1e5a      	subs	r2, r3, #1
 8002e16:	613a      	str	r2, [r7, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d009      	beq.n	8002e30 <HAL_CRCEx_Polynomial_Set+0x34>
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b18      	cmp	r3, #24
 8002e34:	d846      	bhi.n	8002ec4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002e36:	a201      	add	r2, pc, #4	; (adr r2, 8002e3c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3c:	08002ecb 	.word	0x08002ecb
 8002e40:	08002ec5 	.word	0x08002ec5
 8002e44:	08002ec5 	.word	0x08002ec5
 8002e48:	08002ec5 	.word	0x08002ec5
 8002e4c:	08002ec5 	.word	0x08002ec5
 8002e50:	08002ec5 	.word	0x08002ec5
 8002e54:	08002ec5 	.word	0x08002ec5
 8002e58:	08002ec5 	.word	0x08002ec5
 8002e5c:	08002eb9 	.word	0x08002eb9
 8002e60:	08002ec5 	.word	0x08002ec5
 8002e64:	08002ec5 	.word	0x08002ec5
 8002e68:	08002ec5 	.word	0x08002ec5
 8002e6c:	08002ec5 	.word	0x08002ec5
 8002e70:	08002ec5 	.word	0x08002ec5
 8002e74:	08002ec5 	.word	0x08002ec5
 8002e78:	08002ec5 	.word	0x08002ec5
 8002e7c:	08002ead 	.word	0x08002ead
 8002e80:	08002ec5 	.word	0x08002ec5
 8002e84:	08002ec5 	.word	0x08002ec5
 8002e88:	08002ec5 	.word	0x08002ec5
 8002e8c:	08002ec5 	.word	0x08002ec5
 8002e90:	08002ec5 	.word	0x08002ec5
 8002e94:	08002ec5 	.word	0x08002ec5
 8002e98:	08002ec5 	.word	0x08002ec5
 8002e9c:	08002ea1 	.word	0x08002ea1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	2b06      	cmp	r3, #6
 8002ea4:	d913      	bls.n	8002ece <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002eaa:	e010      	b.n	8002ece <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	2b07      	cmp	r3, #7
 8002eb0:	d90f      	bls.n	8002ed2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002eb6:	e00c      	b.n	8002ed2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	2b0f      	cmp	r3, #15
 8002ebc:	d90b      	bls.n	8002ed6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002ec2:	e008      	b.n	8002ed6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ec8:	e006      	b.n	8002ed8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e004      	b.n	8002ed8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002ece:	bf00      	nop
 8002ed0:	e002      	b.n	8002ed8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002ed2:	bf00      	nop
 8002ed4:	e000      	b.n	8002ed8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002ed6:	bf00      	nop
  }
  if (status == HAL_OK)
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10d      	bne.n	8002efa <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f023 0118 	bic.w	r1, r3, #24
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	371c      	adds	r7, #28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e014      	b.n	8002f44 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	791b      	ldrb	r3, [r3, #4]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d105      	bne.n	8002f30 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fe fa1c 	bl	8001368 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	795b      	ldrb	r3, [r3, #5]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_DAC_ConfigChannel+0x1c>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e107      	b.n	8003178 <HAL_DAC_ConfigChannel+0x22c>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2202      	movs	r2, #2
 8002f72:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d174      	bne.n	8003066 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002f7c:	f7fe fee4 	bl	8001d48 <HAL_GetTick>
 8002f80:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d134      	bne.n	8002ff2 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f88:	e011      	b.n	8002fae <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f8a:	f7fe fedd 	bl	8001d48 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d90a      	bls.n	8002fae <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	f043 0208 	orr.w	r2, r3, #8
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e0e4      	b.n	8003178 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1e6      	bne.n	8002f8a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	f7fe fecf 	bl	8001d60 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	6992      	ldr	r2, [r2, #24]
 8002fca:	641a      	str	r2, [r3, #64]	; 0x40
 8002fcc:	e01e      	b.n	800300c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002fce:	f7fe febb 	bl	8001d48 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d90a      	bls.n	8002ff2 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	f043 0208 	orr.w	r2, r3, #8
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2203      	movs	r2, #3
 8002fec:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e0c2      	b.n	8003178 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	dbe8      	blt.n	8002fce <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	f7fe feaf 	bl	8001d60 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	6992      	ldr	r2, [r2, #24]
 800300a:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800301c:	fa01 f303 	lsl.w	r3, r1, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	ea02 0103 	and.w	r1, r2, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	69da      	ldr	r2, [r3, #28]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	409a      	lsls	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f003 0310 	and.w	r3, r3, #16
 8003046:	21ff      	movs	r1, #255	; 0xff
 8003048:	fa01 f303 	lsl.w	r3, r1, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	ea02 0103 	and.w	r1, r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	6a1a      	ldr	r2, [r3, #32]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	409a      	lsls	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d11d      	bne.n	80030aa <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003074:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	221f      	movs	r2, #31
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f003 0310 	and.w	r3, r3, #16
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b0:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	2207      	movs	r2, #7
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4013      	ands	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6819      	ldr	r1, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43da      	mvns	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	400a      	ands	r2, r1
 800310e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4313      	orrs	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6819      	ldr	r1, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	22c0      	movs	r2, #192	; 0xc0
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43da      	mvns	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	400a      	ands	r2, r1
 8003168:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3720      	adds	r7, #32
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e098      	b.n	80032c4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	4b4d      	ldr	r3, [pc, #308]	; (80032d0 <HAL_DMA_Init+0x150>)
 800319a:	429a      	cmp	r2, r3
 800319c:	d80f      	bhi.n	80031be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	4b4b      	ldr	r3, [pc, #300]	; (80032d4 <HAL_DMA_Init+0x154>)
 80031a6:	4413      	add	r3, r2
 80031a8:	4a4b      	ldr	r2, [pc, #300]	; (80032d8 <HAL_DMA_Init+0x158>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	091b      	lsrs	r3, r3, #4
 80031b0:	009a      	lsls	r2, r3, #2
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a48      	ldr	r2, [pc, #288]	; (80032dc <HAL_DMA_Init+0x15c>)
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40
 80031bc:	e00e      	b.n	80031dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	4b46      	ldr	r3, [pc, #280]	; (80032e0 <HAL_DMA_Init+0x160>)
 80031c6:	4413      	add	r3, r2
 80031c8:	4a43      	ldr	r2, [pc, #268]	; (80032d8 <HAL_DMA_Init+0x158>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	091b      	lsrs	r3, r3, #4
 80031d0:	009a      	lsls	r2, r3, #2
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a42      	ldr	r2, [pc, #264]	; (80032e4 <HAL_DMA_Init+0x164>)
 80031da:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80031f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003200:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800320c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003218:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003236:	d039      	beq.n	80032ac <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	4a27      	ldr	r2, [pc, #156]	; (80032dc <HAL_DMA_Init+0x15c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d11a      	bne.n	8003278 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003242:	4b29      	ldr	r3, [pc, #164]	; (80032e8 <HAL_DMA_Init+0x168>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	f003 031c 	and.w	r3, r3, #28
 800324e:	210f      	movs	r1, #15
 8003250:	fa01 f303 	lsl.w	r3, r1, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	4924      	ldr	r1, [pc, #144]	; (80032e8 <HAL_DMA_Init+0x168>)
 8003258:	4013      	ands	r3, r2
 800325a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800325c:	4b22      	ldr	r3, [pc, #136]	; (80032e8 <HAL_DMA_Init+0x168>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6859      	ldr	r1, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	f003 031c 	and.w	r3, r3, #28
 800326c:	fa01 f303 	lsl.w	r3, r1, r3
 8003270:	491d      	ldr	r1, [pc, #116]	; (80032e8 <HAL_DMA_Init+0x168>)
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]
 8003276:	e019      	b.n	80032ac <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003278:	4b1c      	ldr	r3, [pc, #112]	; (80032ec <HAL_DMA_Init+0x16c>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	f003 031c 	and.w	r3, r3, #28
 8003284:	210f      	movs	r1, #15
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	4917      	ldr	r1, [pc, #92]	; (80032ec <HAL_DMA_Init+0x16c>)
 800328e:	4013      	ands	r3, r2
 8003290:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003292:	4b16      	ldr	r3, [pc, #88]	; (80032ec <HAL_DMA_Init+0x16c>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6859      	ldr	r1, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329e:	f003 031c 	and.w	r3, r3, #28
 80032a2:	fa01 f303 	lsl.w	r3, r1, r3
 80032a6:	4911      	ldr	r1, [pc, #68]	; (80032ec <HAL_DMA_Init+0x16c>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	40020407 	.word	0x40020407
 80032d4:	bffdfff8 	.word	0xbffdfff8
 80032d8:	cccccccd 	.word	0xcccccccd
 80032dc:	40020000 	.word	0x40020000
 80032e0:	bffdfbf8 	.word	0xbffdfbf8
 80032e4:	40020400 	.word	0x40020400
 80032e8:	400200a8 	.word	0x400200a8
 80032ec:	400204a8 	.word	0x400204a8

080032f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330c:	f003 031c 	and.w	r3, r3, #28
 8003310:	2204      	movs	r2, #4
 8003312:	409a      	lsls	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d026      	beq.n	800336a <HAL_DMA_IRQHandler+0x7a>
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b00      	cmp	r3, #0
 8003324:	d021      	beq.n	800336a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d107      	bne.n	8003344 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0204 	bic.w	r2, r2, #4
 8003342:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003348:	f003 021c 	and.w	r2, r3, #28
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	2104      	movs	r1, #4
 8003352:	fa01 f202 	lsl.w	r2, r1, r2
 8003356:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	2b00      	cmp	r3, #0
 800335e:	d071      	beq.n	8003444 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003368:	e06c      	b.n	8003444 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	f003 031c 	and.w	r3, r3, #28
 8003372:	2202      	movs	r2, #2
 8003374:	409a      	lsls	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4013      	ands	r3, r2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d02e      	beq.n	80033dc <HAL_DMA_IRQHandler+0xec>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d029      	beq.n	80033dc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10b      	bne.n	80033ae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 020a 	bic.w	r2, r2, #10
 80033a4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	f003 021c 	and.w	r2, r3, #28
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	2102      	movs	r1, #2
 80033bc:	fa01 f202 	lsl.w	r2, r1, r2
 80033c0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d038      	beq.n	8003444 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80033da:	e033      	b.n	8003444 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e0:	f003 031c 	and.w	r3, r3, #28
 80033e4:	2208      	movs	r2, #8
 80033e6:	409a      	lsls	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d02a      	beq.n	8003446 <HAL_DMA_IRQHandler+0x156>
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d025      	beq.n	8003446 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 020e 	bic.w	r2, r2, #14
 8003408:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	f003 021c 	and.w	r2, r3, #28
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	2101      	movs	r1, #1
 8003418:	fa01 f202 	lsl.w	r2, r1, r2
 800341c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003438:	2b00      	cmp	r3, #0
 800343a:	d004      	beq.n	8003446 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003444:	bf00      	nop
 8003446:	bf00      	nop
}
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800345e:	e154      	b.n	800370a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	2101      	movs	r1, #1
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	fa01 f303 	lsl.w	r3, r1, r3
 800346c:	4013      	ands	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 8146 	beq.w	8003704 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	2b01      	cmp	r3, #1
 8003482:	d005      	beq.n	8003490 <HAL_GPIO_Init+0x40>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d130      	bne.n	80034f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	2203      	movs	r2, #3
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4013      	ands	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034c6:	2201      	movs	r2, #1
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	43db      	mvns	r3, r3
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4013      	ands	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	091b      	lsrs	r3, r3, #4
 80034dc:	f003 0201 	and.w	r2, r3, #1
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d017      	beq.n	800352e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	2203      	movs	r2, #3
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43db      	mvns	r3, r3
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4013      	ands	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d123      	bne.n	8003582 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	08da      	lsrs	r2, r3, #3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3208      	adds	r2, #8
 8003542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003546:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	220f      	movs	r2, #15
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43db      	mvns	r3, r3
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4013      	ands	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	691a      	ldr	r2, [r3, #16]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	08da      	lsrs	r2, r3, #3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3208      	adds	r2, #8
 800357c:	6939      	ldr	r1, [r7, #16]
 800357e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	2203      	movs	r2, #3
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43db      	mvns	r3, r3
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4013      	ands	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 0203 	and.w	r2, r3, #3
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80a0 	beq.w	8003704 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c4:	4b58      	ldr	r3, [pc, #352]	; (8003728 <HAL_GPIO_Init+0x2d8>)
 80035c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c8:	4a57      	ldr	r2, [pc, #348]	; (8003728 <HAL_GPIO_Init+0x2d8>)
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	6613      	str	r3, [r2, #96]	; 0x60
 80035d0:	4b55      	ldr	r3, [pc, #340]	; (8003728 <HAL_GPIO_Init+0x2d8>)
 80035d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035dc:	4a53      	ldr	r2, [pc, #332]	; (800372c <HAL_GPIO_Init+0x2dc>)
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	089b      	lsrs	r3, r3, #2
 80035e2:	3302      	adds	r3, #2
 80035e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	220f      	movs	r2, #15
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4013      	ands	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003606:	d019      	beq.n	800363c <HAL_GPIO_Init+0x1ec>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a49      	ldr	r2, [pc, #292]	; (8003730 <HAL_GPIO_Init+0x2e0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d013      	beq.n	8003638 <HAL_GPIO_Init+0x1e8>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a48      	ldr	r2, [pc, #288]	; (8003734 <HAL_GPIO_Init+0x2e4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d00d      	beq.n	8003634 <HAL_GPIO_Init+0x1e4>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a47      	ldr	r2, [pc, #284]	; (8003738 <HAL_GPIO_Init+0x2e8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d007      	beq.n	8003630 <HAL_GPIO_Init+0x1e0>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a46      	ldr	r2, [pc, #280]	; (800373c <HAL_GPIO_Init+0x2ec>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d101      	bne.n	800362c <HAL_GPIO_Init+0x1dc>
 8003628:	2304      	movs	r3, #4
 800362a:	e008      	b.n	800363e <HAL_GPIO_Init+0x1ee>
 800362c:	2307      	movs	r3, #7
 800362e:	e006      	b.n	800363e <HAL_GPIO_Init+0x1ee>
 8003630:	2303      	movs	r3, #3
 8003632:	e004      	b.n	800363e <HAL_GPIO_Init+0x1ee>
 8003634:	2302      	movs	r3, #2
 8003636:	e002      	b.n	800363e <HAL_GPIO_Init+0x1ee>
 8003638:	2301      	movs	r3, #1
 800363a:	e000      	b.n	800363e <HAL_GPIO_Init+0x1ee>
 800363c:	2300      	movs	r3, #0
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	f002 0203 	and.w	r2, r2, #3
 8003644:	0092      	lsls	r2, r2, #2
 8003646:	4093      	lsls	r3, r2
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800364e:	4937      	ldr	r1, [pc, #220]	; (800372c <HAL_GPIO_Init+0x2dc>)
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	089b      	lsrs	r3, r3, #2
 8003654:	3302      	adds	r3, #2
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800365c:	4b38      	ldr	r3, [pc, #224]	; (8003740 <HAL_GPIO_Init+0x2f0>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	43db      	mvns	r3, r3
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	4013      	ands	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4313      	orrs	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003680:	4a2f      	ldr	r2, [pc, #188]	; (8003740 <HAL_GPIO_Init+0x2f0>)
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003686:	4b2e      	ldr	r3, [pc, #184]	; (8003740 <HAL_GPIO_Init+0x2f0>)
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	43db      	mvns	r3, r3
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4013      	ands	r3, r2
 8003694:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036aa:	4a25      	ldr	r2, [pc, #148]	; (8003740 <HAL_GPIO_Init+0x2f0>)
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036b0:	4b23      	ldr	r3, [pc, #140]	; (8003740 <HAL_GPIO_Init+0x2f0>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	43db      	mvns	r3, r3
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036d4:	4a1a      	ldr	r2, [pc, #104]	; (8003740 <HAL_GPIO_Init+0x2f0>)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80036da:	4b19      	ldr	r3, [pc, #100]	; (8003740 <HAL_GPIO_Init+0x2f0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	43db      	mvns	r3, r3
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4013      	ands	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036fe:	4a10      	ldr	r2, [pc, #64]	; (8003740 <HAL_GPIO_Init+0x2f0>)
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	3301      	adds	r3, #1
 8003708:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	fa22 f303 	lsr.w	r3, r2, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	f47f aea3 	bne.w	8003460 <HAL_GPIO_Init+0x10>
  }
}
 800371a:	bf00      	nop
 800371c:	bf00      	nop
 800371e:	371c      	adds	r7, #28
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	40021000 	.word	0x40021000
 800372c:	40010000 	.word	0x40010000
 8003730:	48000400 	.word	0x48000400
 8003734:	48000800 	.word	0x48000800
 8003738:	48000c00 	.word	0x48000c00
 800373c:	48001000 	.word	0x48001000
 8003740:	40010400 	.word	0x40010400

08003744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	807b      	strh	r3, [r7, #2]
 8003750:	4613      	mov	r3, r2
 8003752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003754:	787b      	ldrb	r3, [r7, #1]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800375a:	887a      	ldrh	r2, [r7, #2]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003760:	e002      	b.n	8003768 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003762:	887a      	ldrh	r2, [r7, #2]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003786:	887a      	ldrh	r2, [r7, #2]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4013      	ands	r3, r2
 800378c:	041a      	lsls	r2, r3, #16
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	43d9      	mvns	r1, r3
 8003792:	887b      	ldrh	r3, [r7, #2]
 8003794:	400b      	ands	r3, r1
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	619a      	str	r2, [r3, #24]
}
 800379c:	bf00      	nop
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037aa:	b08b      	sub	sp, #44	; 0x2c
 80037ac:	af06      	add	r7, sp, #24
 80037ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e109      	b.n	80039ce <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f008 f8cc 	bl	800b96c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2203      	movs	r2, #3
 80037d8:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f003 ffab 	bl	800773c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	687e      	ldr	r6, [r7, #4]
 80037ee:	466d      	mov	r5, sp
 80037f0:	f106 0410 	add.w	r4, r6, #16
 80037f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003800:	1d33      	adds	r3, r6, #4
 8003802:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003804:	6838      	ldr	r0, [r7, #0]
 8003806:	f003 ff71 	bl	80076ec <USB_CoreInit>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0d8      	b.n	80039ce <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f003 ffa5 	bl	8007772 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003828:	2300      	movs	r3, #0
 800382a:	73fb      	strb	r3, [r7, #15]
 800382c:	e04d      	b.n	80038ca <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	440b      	add	r3, r1
 800383e:	3305      	adds	r3, #5
 8003840:	2201      	movs	r2, #1
 8003842:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	440b      	add	r3, r1
 8003854:	3304      	adds	r3, #4
 8003856:	7bfa      	ldrb	r2, [r7, #15]
 8003858:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800385a:	7bfa      	ldrb	r2, [r7, #15]
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	b298      	uxth	r0, r3
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	440b      	add	r3, r1
 800386c:	333a      	adds	r3, #58	; 0x3a
 800386e:	4602      	mov	r2, r0
 8003870:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	440b      	add	r3, r1
 8003882:	3307      	adds	r3, #7
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003888:	7bfa      	ldrb	r2, [r7, #15]
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	440b      	add	r3, r1
 8003896:	333c      	adds	r3, #60	; 0x3c
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800389c:	7bfa      	ldrb	r2, [r7, #15]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	440b      	add	r3, r1
 80038aa:	3340      	adds	r3, #64	; 0x40
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038b0:	7bfa      	ldrb	r2, [r7, #15]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	440b      	add	r3, r1
 80038be:	3344      	adds	r3, #68	; 0x44
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	3301      	adds	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
 80038ca:	7bfa      	ldrb	r2, [r7, #15]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d3ac      	bcc.n	800382e <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]
 80038d8:	e044      	b.n	8003964 <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038da:	7bfa      	ldrb	r2, [r7, #15]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	440b      	add	r3, r1
 80038e8:	f203 136d 	addw	r3, r3, #365	; 0x16d
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038f0:	7bfa      	ldrb	r2, [r7, #15]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	440b      	add	r3, r1
 80038fe:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003902:	7bfa      	ldrb	r2, [r7, #15]
 8003904:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003906:	7bfa      	ldrb	r2, [r7, #15]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	440b      	add	r3, r1
 8003914:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800391c:	7bfa      	ldrb	r2, [r7, #15]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	440b      	add	r3, r1
 800392a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003932:	7bfa      	ldrb	r2, [r7, #15]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	440b      	add	r3, r1
 8003940:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003948:	7bfa      	ldrb	r2, [r7, #15]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	440b      	add	r3, r1
 8003956:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	3301      	adds	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
 8003964:	7bfa      	ldrb	r2, [r7, #15]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	429a      	cmp	r2, r3
 800396c:	d3b5      	bcc.n	80038da <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	687e      	ldr	r6, [r7, #4]
 8003976:	466d      	mov	r5, sp
 8003978:	f106 0410 	add.w	r4, r6, #16
 800397c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800397e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003980:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003984:	e885 0003 	stmia.w	r5, {r0, r1}
 8003988:	1d33      	adds	r3, r6, #4
 800398a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800398c:	6838      	ldr	r0, [r7, #0]
 800398e:	f003 fefd 	bl	800778c <USB_DevInit>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e014      	b.n	80039ce <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d102      	bne.n	80039c2 <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f001 fc55 	bl	800526c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f006 f909 	bl	8009bde <USB_DevDisconnect>

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_PCD_Start+0x16>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e012      	b.n	8003a12 <HAL_PCD_Start+0x3c>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f003 fe88 	bl	800770e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f006 f8d4 	bl	8009bb0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f006 f8ee 	bl	8009c08 <USB_ReadInterrupts>
 8003a2c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 fb3e 	bl	80040ba <PCD_EP_ISR_Handler>

    return;
 8003a3e:	e110      	b.n	8003c62 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d013      	beq.n	8003a72 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a5c:	b292      	uxth	r2, r2
 8003a5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f008 f813 	bl	800ba8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003a68:	2100      	movs	r1, #0
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f8fc 	bl	8003c68 <HAL_PCD_SetAddress>

    return;
 8003a70:	e0f7      	b.n	8003c62 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00c      	beq.n	8003a96 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a8e:	b292      	uxth	r2, r2
 8003a90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003a94:	e0e5      	b.n	8003c62 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00c      	beq.n	8003aba <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ab2:	b292      	uxth	r2, r2
 8003ab4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003ab8:	e0d3      	b.n	8003c62 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d034      	beq.n	8003b2e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0204 	bic.w	r2, r2, #4
 8003ad6:	b292      	uxth	r2, r2
 8003ad8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0208 	bic.w	r2, r2, #8
 8003aee:	b292      	uxth	r2, r2
 8003af0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d107      	bne.n	8003b0e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b06:	2100      	movs	r1, #0
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f008 fa71 	bl	800bff0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f007 fff6 	bl	800bb00 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b26:	b292      	uxth	r2, r2
 8003b28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003b2c:	e099      	b.n	8003c62 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d027      	beq.n	8003b88 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0208 	orr.w	r2, r2, #8
 8003b4a:	b292      	uxth	r2, r2
 8003b4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b62:	b292      	uxth	r2, r2
 8003b64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0204 	orr.w	r2, r2, #4
 8003b7a:	b292      	uxth	r2, r2
 8003b7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f007 ffa3 	bl	800bacc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003b86:	e06c      	b.n	8003c62 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d040      	beq.n	8003c14 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ba4:	b292      	uxth	r2, r2
 8003ba6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d12b      	bne.n	8003c0c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0204 	orr.w	r2, r2, #4
 8003bc6:	b292      	uxth	r2, r2
 8003bc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0208 	orr.w	r2, r2, #8
 8003bde:	b292      	uxth	r2, r2
 8003be0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	089b      	lsrs	r3, r3, #2
 8003bf8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003c02:	2101      	movs	r1, #1
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f008 f9f3 	bl	800bff0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003c0a:	e02a      	b.n	8003c62 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f007 ff5d 	bl	800bacc <HAL_PCD_SuspendCallback>
    return;
 8003c12:	e026      	b.n	8003c62 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00f      	beq.n	8003c3e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c30:	b292      	uxth	r2, r2
 8003c32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f007 ff1b 	bl	800ba72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003c3c:	e011      	b.n	8003c62 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00c      	beq.n	8003c62 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c5a:	b292      	uxth	r2, r2
 8003c5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003c60:	bf00      	nop
  }
}
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_PCD_SetAddress+0x1a>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e013      	b.n	8003caa <HAL_PCD_SetAddress+0x42>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	78fa      	ldrb	r2, [r7, #3]
 8003c8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	78fa      	ldrb	r2, [r7, #3]
 8003c98:	4611      	mov	r1, r2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f005 ff74 	bl	8009b88 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	4608      	mov	r0, r1
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	70fb      	strb	r3, [r7, #3]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	803b      	strh	r3, [r7, #0]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	da0f      	bge.n	8003cf8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	4413      	add	r3, r2
 8003cec:	3304      	adds	r3, #4
 8003cee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	705a      	strb	r2, [r3, #1]
 8003cf6:	e00f      	b.n	8003d18 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	f003 0207 	and.w	r2, r3, #7
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	3304      	adds	r3, #4
 8003d10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003d24:	883a      	ldrh	r2, [r7, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	78ba      	ldrb	r2, [r7, #2]
 8003d2e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	785b      	ldrb	r3, [r3, #1]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d004      	beq.n	8003d42 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d42:	78bb      	ldrb	r3, [r7, #2]
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d102      	bne.n	8003d4e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_PCD_EP_Open+0xaa>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e00e      	b.n	8003d7a <HAL_PCD_EP_Open+0xc8>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68f9      	ldr	r1, [r7, #12]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f003 fd30 	bl	80077d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8003d78:	7afb      	ldrb	r3, [r7, #11]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	da0f      	bge.n	8003db6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d96:	78fb      	ldrb	r3, [r7, #3]
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	4613      	mov	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	3304      	adds	r3, #4
 8003dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	705a      	strb	r2, [r3, #1]
 8003db4:	e00f      	b.n	8003dd6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	f003 0207 	and.w	r2, r3, #7
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	4413      	add	r3, r2
 8003dcc:	3304      	adds	r3, #4
 8003dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003dd6:	78fb      	ldrb	r3, [r7, #3]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_PCD_EP_Close+0x6e>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e00e      	b.n	8003e0e <HAL_PCD_EP_Close+0x8c>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68f9      	ldr	r1, [r7, #12]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f004 f8a0 	bl	8007f44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b086      	sub	sp, #24
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	603b      	str	r3, [r7, #0]
 8003e22:	460b      	mov	r3, r1
 8003e24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e26:	7afb      	ldrb	r3, [r7, #11]
 8003e28:	f003 0207 	and.w	r2, r3, #7
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2200      	movs	r2, #0
 8003e56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e58:	7afb      	ldrb	r3, [r7, #11]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e64:	7afb      	ldrb	r3, [r7, #11]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6979      	ldr	r1, [r7, #20]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f004 fa52 	bl	800831e <USB_EPStartXfer>
 8003e7a:	e005      	b.n	8003e88 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6979      	ldr	r1, [r7, #20]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f004 fa4b 	bl	800831e <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e9e:	78fb      	ldrb	r3, [r7, #3]
 8003ea0:	f003 0207 	and.w	r2, r3, #7
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	440b      	add	r3, r1
 8003eb0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003eb4:	681b      	ldr	r3, [r3, #0]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b086      	sub	sp, #24
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	603b      	str	r3, [r7, #0]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ed2:	7afb      	ldrb	r3, [r7, #11]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	4613      	mov	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2200      	movs	r2, #0
 8003f08:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f10:	7afb      	ldrb	r3, [r7, #11]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f1c:	7afb      	ldrb	r3, [r7, #11]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6979      	ldr	r1, [r7, #20]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f004 f9f6 	bl	800831e <USB_EPStartXfer>
 8003f32:	e005      	b.n	8003f40 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6979      	ldr	r1, [r7, #20]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f004 f9ef 	bl	800831e <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b084      	sub	sp, #16
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	460b      	mov	r3, r1
 8003f54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f56:	78fb      	ldrb	r3, [r7, #3]
 8003f58:	f003 0207 	and.w	r2, r3, #7
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d901      	bls.n	8003f68 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e04e      	b.n	8004006 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	da0f      	bge.n	8003f90 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	4413      	add	r3, r2
 8003f84:	3304      	adds	r3, #4
 8003f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	705a      	strb	r2, [r3, #1]
 8003f8e:	e00d      	b.n	8003fac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f90:	78fa      	ldrb	r2, [r7, #3]
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_PCD_EP_SetStall+0x82>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e01c      	b.n	8004006 <HAL_PCD_EP_SetStall+0xbc>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68f9      	ldr	r1, [r7, #12]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f005 fcd5 	bl	800998a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d108      	bne.n	8003ffc <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	f005 fe16 	bl	8009c28 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	460b      	mov	r3, r1
 8004018:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800401a:	78fb      	ldrb	r3, [r7, #3]
 800401c:	f003 020f 	and.w	r2, r3, #15
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	429a      	cmp	r2, r3
 8004026:	d901      	bls.n	800402c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e042      	b.n	80040b2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800402c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004030:	2b00      	cmp	r3, #0
 8004032:	da0f      	bge.n	8004054 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	4613      	mov	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	4413      	add	r3, r2
 8004048:	3304      	adds	r3, #4
 800404a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2201      	movs	r2, #1
 8004050:	705a      	strb	r2, [r3, #1]
 8004052:	e00f      	b.n	8004074 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	f003 0207 	and.w	r2, r3, #7
 800405a:	4613      	mov	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	4413      	add	r3, r2
 800406a:	3304      	adds	r3, #4
 800406c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800407a:	78fb      	ldrb	r3, [r7, #3]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	b2da      	uxtb	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <HAL_PCD_EP_ClrStall+0x86>
 8004090:	2302      	movs	r3, #2
 8004092:	e00e      	b.n	80040b2 <HAL_PCD_EP_ClrStall+0xa4>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68f9      	ldr	r1, [r7, #12]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f005 fcc2 	bl	8009a2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b096      	sub	sp, #88	; 0x58
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80040c2:	e3a9      	b.n	8004818 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80040d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80040de:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f040 8169 	bne.w	80043ba <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80040e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d150      	bne.n	8004196 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004104:	81fb      	strh	r3, [r7, #14]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	89fb      	ldrh	r3, [r7, #14]
 800410c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004114:	b29b      	uxth	r3, r3
 8004116:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	332c      	adds	r3, #44	; 0x2c
 800411c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004126:	b29b      	uxth	r3, r3
 8004128:	461a      	mov	r2, r3
 800412a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	4413      	add	r3, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	4413      	add	r3, r2
 8004138:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004144:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004148:	695a      	ldr	r2, [r3, #20]
 800414a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	441a      	add	r2, r3
 8004150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004152:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004154:	2100      	movs	r1, #0
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f007 fc71 	bl	800ba3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 8357 	beq.w	8004818 <PCD_EP_ISR_Handler+0x75e>
 800416a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2b00      	cmp	r3, #0
 8004170:	f040 8352 	bne.w	8004818 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004180:	b2da      	uxtb	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	b292      	uxth	r2, r2
 8004188:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004194:	e340      	b.n	8004818 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800419c:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80041a8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80041ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d032      	beq.n	800421a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041bc:	b29b      	uxth	r3, r3
 80041be:	461a      	mov	r2, r3
 80041c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4413      	add	r3, r2
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	4413      	add	r3, r2
 80041ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80041d2:	881b      	ldrh	r3, [r3, #0]
 80041d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80041d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041da:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6818      	ldr	r0, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 80041e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80041ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ec:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f005 fd68 	bl	8009cc4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004200:	4013      	ands	r3, r2
 8004202:	823b      	strh	r3, [r7, #16]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	8a3a      	ldrh	r2, [r7, #16]
 800420a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800420e:	b292      	uxth	r2, r2
 8004210:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f007 fbe6 	bl	800b9e4 <HAL_PCD_SetupStageCallback>
 8004218:	e2fe      	b.n	8004818 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800421a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800421e:	2b00      	cmp	r3, #0
 8004220:	f280 82fa 	bge.w	8004818 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	b29a      	uxth	r2, r3
 800422c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004230:	4013      	ands	r3, r2
 8004232:	83fb      	strh	r3, [r7, #30]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	8bfa      	ldrh	r2, [r7, #30]
 800423a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800423e:	b292      	uxth	r2, r2
 8004240:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800424a:	b29b      	uxth	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4413      	add	r3, r2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6812      	ldr	r2, [r2, #0]
 800425a:	4413      	add	r3, r2
 800425c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004268:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800426a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d019      	beq.n	80042a6 <PCD_EP_ISR_Handler+0x1ec>
 8004272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d015      	beq.n	80042a6 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004280:	6959      	ldr	r1, [r3, #20]
 8004282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004284:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004288:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800428a:	b29b      	uxth	r3, r3
 800428c:	f005 fd1a 	bl	8009cc4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004292:	695a      	ldr	r2, [r3, #20]
 8004294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	441a      	add	r2, r3
 800429a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800429c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800429e:	2100      	movs	r1, #0
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f007 fbb1 	bl	800ba08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80042b0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80042b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f040 82ad 	bne.w	8004818 <PCD_EP_ISR_Handler+0x75e>
 80042be:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80042c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80042c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042ca:	f000 82a5 	beq.w	8004818 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	61bb      	str	r3, [r7, #24]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042dc:	b29b      	uxth	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	4413      	add	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80042ec:	617b      	str	r3, [r7, #20]
 80042ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b3e      	cmp	r3, #62	; 0x3e
 80042f4:	d918      	bls.n	8004328 <PCD_EP_ISR_Handler+0x26e>
 80042f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	647b      	str	r3, [r7, #68]	; 0x44
 80042fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f003 031f 	and.w	r3, r3, #31
 8004306:	2b00      	cmp	r3, #0
 8004308:	d102      	bne.n	8004310 <PCD_EP_ISR_Handler+0x256>
 800430a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800430c:	3b01      	subs	r3, #1
 800430e:	647b      	str	r3, [r7, #68]	; 0x44
 8004310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004312:	b29b      	uxth	r3, r3
 8004314:	029b      	lsls	r3, r3, #10
 8004316:	b29b      	uxth	r3, r3
 8004318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800431c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004320:	b29a      	uxth	r2, r3
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	801a      	strh	r2, [r3, #0]
 8004326:	e029      	b.n	800437c <PCD_EP_ISR_Handler+0x2c2>
 8004328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d112      	bne.n	8004356 <PCD_EP_ISR_Handler+0x29c>
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	b29b      	uxth	r3, r3
 8004336:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800433a:	b29a      	uxth	r2, r3
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	801a      	strh	r2, [r3, #0]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	b29b      	uxth	r3, r3
 8004346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800434a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800434e:	b29a      	uxth	r2, r3
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	801a      	strh	r2, [r3, #0]
 8004354:	e012      	b.n	800437c <PCD_EP_ISR_Handler+0x2c2>
 8004356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	085b      	lsrs	r3, r3, #1
 800435c:	647b      	str	r3, [r7, #68]	; 0x44
 800435e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <PCD_EP_ISR_Handler+0x2b6>
 800436a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800436c:	3301      	adds	r3, #1
 800436e:	647b      	str	r3, [r7, #68]	; 0x44
 8004370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004372:	b29b      	uxth	r3, r3
 8004374:	029b      	lsls	r3, r3, #10
 8004376:	b29a      	uxth	r2, r3
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	b29b      	uxth	r3, r3
 8004384:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438c:	827b      	strh	r3, [r7, #18]
 800438e:	8a7b      	ldrh	r3, [r7, #18]
 8004390:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004394:	827b      	strh	r3, [r7, #18]
 8004396:	8a7b      	ldrh	r3, [r7, #18]
 8004398:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800439c:	827b      	strh	r3, [r7, #18]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	8a7b      	ldrh	r3, [r7, #18]
 80043a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	8013      	strh	r3, [r2, #0]
 80043b8:	e22e      	b.n	8004818 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	461a      	mov	r2, r3
 80043c0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80043ce:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f280 80f7 	bge.w	80045c6 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	f640 738f 	movw	r3, #3983	; 0xf8f
 80043ee:	4013      	ands	r3, r2
 80043f0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004406:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800440a:	b292      	uxth	r2, r2
 800440c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800440e:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8004412:	4613      	mov	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	4413      	add	r3, r2
 8004422:	3304      	adds	r3, #4
 8004424:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004428:	7b1b      	ldrb	r3, [r3, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d123      	bne.n	8004476 <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004436:	b29b      	uxth	r3, r3
 8004438:	461a      	mov	r2, r3
 800443a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4413      	add	r3, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6812      	ldr	r2, [r2, #0]
 8004446:	4413      	add	r3, r2
 8004448:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004452:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8004456:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 808e 	beq.w	800457c <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6818      	ldr	r0, [r3, #0]
 8004464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004466:	6959      	ldr	r1, [r3, #20]
 8004468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800446a:	88da      	ldrh	r2, [r3, #6]
 800446c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004470:	f005 fc28 	bl	8009cc4 <USB_ReadPMA>
 8004474:	e082      	b.n	800457c <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004478:	78db      	ldrb	r3, [r3, #3]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d10a      	bne.n	8004494 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800447e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004482:	461a      	mov	r2, r3
 8004484:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f9d4 	bl	8004834 <HAL_PCD_EP_DB_Receive>
 800448c:	4603      	mov	r3, r0
 800448e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004492:	e073      	b.n	800457c <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	441a      	add	r2, r3
 80044c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80044c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d022      	beq.n	8004538 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	4413      	add	r3, r2
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6812      	ldr	r2, [r2, #0]
 800450a:	4413      	add	r3, r2
 800450c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004516:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800451a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800451e:	2b00      	cmp	r3, #0
 8004520:	d02c      	beq.n	800457c <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004528:	6959      	ldr	r1, [r3, #20]
 800452a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800452c:	891a      	ldrh	r2, [r3, #8]
 800452e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004532:	f005 fbc7 	bl	8009cc4 <USB_ReadPMA>
 8004536:	e021      	b.n	800457c <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004540:	b29b      	uxth	r3, r3
 8004542:	461a      	mov	r2, r3
 8004544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	4413      	add	r3, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	4413      	add	r3, r2
 8004552:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800455c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8004560:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004564:	2b00      	cmp	r3, #0
 8004566:	d009      	beq.n	800457c <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6818      	ldr	r0, [r3, #0]
 800456c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800456e:	6959      	ldr	r1, [r3, #20]
 8004570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004572:	895a      	ldrh	r2, [r3, #10]
 8004574:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004578:	f005 fba4 	bl	8009cc4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800457c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004584:	441a      	add	r2, r3
 8004586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004588:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800458a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800458c:	695a      	ldr	r2, [r3, #20]
 800458e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004592:	441a      	add	r2, r3
 8004594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004596:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <PCD_EP_ISR_Handler+0x4f2>
 80045a0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80045a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d206      	bcs.n	80045ba <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80045ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	4619      	mov	r1, r3
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f007 fa28 	bl	800ba08 <HAL_PCD_DataOutStageCallback>
 80045b8:	e005      	b.n	80045c6 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80045c0:	4618      	mov	r0, r3
 80045c2:	f003 feac 	bl	800831e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80045c6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80045ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 8122 	beq.w	8004818 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 80045d4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	4613      	mov	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	4413      	add	r3, r2
 80045e6:	3304      	adds	r3, #4
 80045e8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004604:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	461a      	mov	r2, r3
 800460e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	441a      	add	r2, r3
 8004616:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800461a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800461e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004622:	b29b      	uxth	r3, r3
 8004624:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004628:	78db      	ldrb	r3, [r3, #3]
 800462a:	2b01      	cmp	r3, #1
 800462c:	f040 80a2 	bne.w	8004774 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8004630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004632:	2200      	movs	r2, #0
 8004634:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004638:	7b1b      	ldrb	r3, [r3, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 8093 	beq.w	8004766 <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004640:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004648:	2b00      	cmp	r3, #0
 800464a:	d046      	beq.n	80046da <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800464c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800464e:	785b      	ldrb	r3, [r3, #1]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d126      	bne.n	80046a2 <PCD_EP_ISR_Handler+0x5e8>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004662:	b29b      	uxth	r3, r3
 8004664:	461a      	mov	r2, r3
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	4413      	add	r3, r2
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
 800466c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	00da      	lsls	r2, r3, #3
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	4413      	add	r3, r2
 8004676:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800467a:	623b      	str	r3, [r7, #32]
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	b29b      	uxth	r3, r3
 8004682:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004686:	b29a      	uxth	r2, r3
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	801a      	strh	r2, [r3, #0]
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	b29b      	uxth	r3, r3
 8004692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800469a:	b29a      	uxth	r2, r3
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	801a      	strh	r2, [r3, #0]
 80046a0:	e061      	b.n	8004766 <PCD_EP_ISR_Handler+0x6ac>
 80046a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a4:	785b      	ldrb	r3, [r3, #1]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d15d      	bne.n	8004766 <PCD_EP_ISR_Handler+0x6ac>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	461a      	mov	r2, r3
 80046bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046be:	4413      	add	r3, r2
 80046c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	00da      	lsls	r2, r3, #3
 80046c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ca:	4413      	add	r3, r2
 80046cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80046d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d4:	2200      	movs	r2, #0
 80046d6:	801a      	strh	r2, [r3, #0]
 80046d8:	e045      	b.n	8004766 <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e2:	785b      	ldrb	r3, [r3, #1]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d126      	bne.n	8004736 <PCD_EP_ISR_Handler+0x67c>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	637b      	str	r3, [r7, #52]	; 0x34
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	461a      	mov	r2, r3
 80046fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fc:	4413      	add	r3, r2
 80046fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	00da      	lsls	r2, r3, #3
 8004706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004708:	4413      	add	r3, r2
 800470a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800470e:	633b      	str	r3, [r7, #48]	; 0x30
 8004710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	b29b      	uxth	r3, r3
 8004716:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800471a:	b29a      	uxth	r2, r3
 800471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471e:	801a      	strh	r2, [r3, #0]
 8004720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	b29b      	uxth	r3, r3
 8004726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800472a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800472e:	b29a      	uxth	r2, r3
 8004730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004732:	801a      	strh	r2, [r3, #0]
 8004734:	e017      	b.n	8004766 <PCD_EP_ISR_Handler+0x6ac>
 8004736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004738:	785b      	ldrb	r3, [r3, #1]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d113      	bne.n	8004766 <PCD_EP_ISR_Handler+0x6ac>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004746:	b29b      	uxth	r3, r3
 8004748:	461a      	mov	r2, r3
 800474a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800474c:	4413      	add	r3, r2
 800474e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	00da      	lsls	r2, r3, #3
 8004756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004758:	4413      	add	r3, r2
 800475a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800475e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004762:	2200      	movs	r2, #0
 8004764:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	4619      	mov	r1, r3
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f007 f966 	bl	800ba3e <HAL_PCD_DataInStageCallback>
 8004772:	e051      	b.n	8004818 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004774:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477c:	2b00      	cmp	r3, #0
 800477e:	d144      	bne.n	800480a <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004788:	b29b      	uxth	r3, r3
 800478a:	461a      	mov	r2, r3
 800478c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	4413      	add	r3, r2
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	4413      	add	r3, r2
 800479a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047a4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80047a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047aa:	699a      	ldr	r2, [r3, #24]
 80047ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d907      	bls.n	80047c4 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 80047b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b6:	699a      	ldr	r2, [r3, #24]
 80047b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80047bc:	1ad2      	subs	r2, r2, r3
 80047be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c0:	619a      	str	r2, [r3, #24]
 80047c2:	e002      	b.n	80047ca <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 80047c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c6:	2200      	movs	r2, #0
 80047c8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80047ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80047d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	4619      	mov	r1, r3
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f007 f930 	bl	800ba3e <HAL_PCD_DataInStageCallback>
 80047de:	e01b      	b.n	8004818 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80047e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e2:	695a      	ldr	r2, [r3, #20]
 80047e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80047e8:	441a      	add	r2, r3
 80047ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ec:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80047ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f0:	69da      	ldr	r2, [r3, #28]
 80047f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80047f6:	441a      	add	r2, r3
 80047f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047fa:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004802:	4618      	mov	r0, r3
 8004804:	f003 fd8b 	bl	800831e <USB_EPStartXfer>
 8004808:	e006      	b.n	8004818 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800480a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800480e:	461a      	mov	r2, r3
 8004810:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f917 	bl	8004a46 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004820:	b29b      	uxth	r3, r3
 8004822:	b21b      	sxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	f6ff ac4d 	blt.w	80040c4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3758      	adds	r7, #88	; 0x58
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	4613      	mov	r3, r2
 8004840:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004842:	88fb      	ldrh	r3, [r7, #6]
 8004844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d07c      	beq.n	8004946 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004854:	b29b      	uxth	r3, r3
 8004856:	461a      	mov	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	4413      	add	r3, r2
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	4413      	add	r3, r2
 8004866:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004870:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	8b7b      	ldrh	r3, [r7, #26]
 8004878:	429a      	cmp	r2, r3
 800487a:	d306      	bcc.n	800488a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	699a      	ldr	r2, [r3, #24]
 8004880:	8b7b      	ldrh	r3, [r7, #26]
 8004882:	1ad2      	subs	r2, r2, r3
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	619a      	str	r2, [r3, #24]
 8004888:	e002      	b.n	8004890 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2200      	movs	r2, #0
 800488e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d123      	bne.n	80048e0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b2:	833b      	strh	r3, [r7, #24]
 80048b4:	8b3b      	ldrh	r3, [r7, #24]
 80048b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048ba:	833b      	strh	r3, [r7, #24]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	461a      	mov	r2, r3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	441a      	add	r2, r3
 80048ca:	8b3b      	ldrh	r3, [r7, #24]
 80048cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048dc:	b29b      	uxth	r3, r3
 80048de:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80048e0:	88fb      	ldrh	r3, [r7, #6]
 80048e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d01f      	beq.n	800492a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004904:	82fb      	strh	r3, [r7, #22]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	441a      	add	r2, r3
 8004914:	8afb      	ldrh	r3, [r7, #22]
 8004916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800491a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800491e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004922:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004926:	b29b      	uxth	r3, r3
 8004928:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800492a:	8b7b      	ldrh	r3, [r7, #26]
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 8085 	beq.w	8004a3c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6818      	ldr	r0, [r3, #0]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	6959      	ldr	r1, [r3, #20]
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	891a      	ldrh	r2, [r3, #8]
 800493e:	8b7b      	ldrh	r3, [r7, #26]
 8004940:	f005 f9c0 	bl	8009cc4 <USB_ReadPMA>
 8004944:	e07a      	b.n	8004a3c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800494e:	b29b      	uxth	r3, r3
 8004950:	461a      	mov	r2, r3
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	4413      	add	r3, r2
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	6812      	ldr	r2, [r2, #0]
 800495e:	4413      	add	r3, r2
 8004960:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800496a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	699a      	ldr	r2, [r3, #24]
 8004970:	8b7b      	ldrh	r3, [r7, #26]
 8004972:	429a      	cmp	r2, r3
 8004974:	d306      	bcc.n	8004984 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	699a      	ldr	r2, [r3, #24]
 800497a:	8b7b      	ldrh	r3, [r7, #26]
 800497c:	1ad2      	subs	r2, r2, r3
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	619a      	str	r2, [r3, #24]
 8004982:	e002      	b.n	800498a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2200      	movs	r2, #0
 8004988:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d123      	bne.n	80049da <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ac:	83fb      	strh	r3, [r7, #30]
 80049ae:	8bfb      	ldrh	r3, [r7, #30]
 80049b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049b4:	83fb      	strh	r3, [r7, #30]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	441a      	add	r2, r3
 80049c4:	8bfb      	ldrh	r3, [r7, #30]
 80049c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80049da:	88fb      	ldrh	r3, [r7, #6]
 80049dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d11f      	bne.n	8004a24 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fe:	83bb      	strh	r3, [r7, #28]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	441a      	add	r2, r3
 8004a0e:	8bbb      	ldrh	r3, [r7, #28]
 8004a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004a24:	8b7b      	ldrh	r3, [r7, #26]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d008      	beq.n	8004a3c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6818      	ldr	r0, [r3, #0]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	6959      	ldr	r1, [r3, #20]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	895a      	ldrh	r2, [r3, #10]
 8004a36:	8b7b      	ldrh	r3, [r7, #26]
 8004a38:	f005 f944 	bl	8009cc4 <USB_ReadPMA>
    }
  }

  return count;
 8004a3c:	8b7b      	ldrh	r3, [r7, #26]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3720      	adds	r7, #32
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b0a2      	sub	sp, #136	; 0x88
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	60f8      	str	r0, [r7, #12]
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	4613      	mov	r3, r2
 8004a52:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004a54:	88fb      	ldrh	r3, [r7, #6]
 8004a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 81c5 	beq.w	8004dea <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	4413      	add	r3, r2
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	6812      	ldr	r2, [r2, #0]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	699a      	ldr	r2, [r3, #24]
 8004a8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d907      	bls.n	8004aa4 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	699a      	ldr	r2, [r3, #24]
 8004a98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a9c:	1ad2      	subs	r2, r2, r3
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	619a      	str	r2, [r3, #24]
 8004aa2:	e002      	b.n	8004aaa <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f040 80b9 	bne.w	8004c26 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	785b      	ldrb	r3, [r3, #1]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d126      	bne.n	8004b0a <HAL_PCD_EP_DB_Transmit+0xc4>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	461a      	mov	r2, r3
 8004ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad0:	4413      	add	r3, r2
 8004ad2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	00da      	lsls	r2, r3, #3
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	4413      	add	r3, r2
 8004ade:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	801a      	strh	r2, [r3, #0]
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	801a      	strh	r2, [r3, #0]
 8004b08:	e01a      	b.n	8004b40 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	785b      	ldrb	r3, [r3, #1]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d116      	bne.n	8004b40 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	633b      	str	r3, [r7, #48]	; 0x30
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	461a      	mov	r2, r3
 8004b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b26:	4413      	add	r3, r2
 8004b28:	633b      	str	r3, [r7, #48]	; 0x30
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	00da      	lsls	r2, r3, #3
 8004b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b32:	4413      	add	r3, r2
 8004b34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	623b      	str	r3, [r7, #32]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	785b      	ldrb	r3, [r3, #1]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d126      	bne.n	8004b9c <HAL_PCD_EP_DB_Transmit+0x156>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	61bb      	str	r3, [r7, #24]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	461a      	mov	r2, r3
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	4413      	add	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	00da      	lsls	r2, r3, #3
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	801a      	strh	r2, [r3, #0]
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	801a      	strh	r2, [r3, #0]
 8004b9a:	e017      	b.n	8004bcc <HAL_PCD_EP_DB_Transmit+0x186>
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	785b      	ldrb	r3, [r3, #1]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d113      	bne.n	8004bcc <HAL_PCD_EP_DB_Transmit+0x186>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	461a      	mov	r2, r3
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	623b      	str	r3, [r7, #32]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	00da      	lsls	r2, r3, #3
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004bc4:	61fb      	str	r3, [r7, #28]
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f006 ff33 	bl	800ba3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004bd8:	88fb      	ldrh	r3, [r7, #6]
 8004bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 82d2 	beq.w	8005188 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	461a      	mov	r2, r3
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfe:	827b      	strh	r3, [r7, #18]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	441a      	add	r2, r3
 8004c0e:	8a7b      	ldrh	r3, [r7, #18]
 8004c10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	8013      	strh	r3, [r2, #0]
 8004c24:	e2b0      	b.n	8005188 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d021      	beq.n	8004c74 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	441a      	add	r2, r3
 8004c5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	f040 8284 	bne.w	8005188 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	695a      	ldr	r2, [r3, #20]
 8004c84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c88:	441a      	add	r2, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	69da      	ldr	r2, [r3, #28]
 8004c92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c96:	441a      	add	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	6a1a      	ldr	r2, [r3, #32]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d309      	bcc.n	8004cbc <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	6a1a      	ldr	r2, [r3, #32]
 8004cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cb4:	1ad2      	subs	r2, r2, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	621a      	str	r2, [r3, #32]
 8004cba:	e015      	b.n	8004ce8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d107      	bne.n	8004cd4 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8004cc4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004cc8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004cd2:	e009      	b.n	8004ce8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	785b      	ldrb	r3, [r3, #1]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d155      	bne.n	8004d9c <HAL_PCD_EP_DB_Transmit+0x356>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	461a      	mov	r2, r3
 8004d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d04:	4413      	add	r3, r2
 8004d06:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	00da      	lsls	r2, r3, #3
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d10:	4413      	add	r3, r2
 8004d12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d16:	637b      	str	r3, [r7, #52]	; 0x34
 8004d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d1a:	2b3e      	cmp	r3, #62	; 0x3e
 8004d1c:	d916      	bls.n	8004d4c <HAL_PCD_EP_DB_Transmit+0x306>
 8004d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d20:	095b      	lsrs	r3, r3, #5
 8004d22:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d26:	f003 031f 	and.w	r3, r3, #31
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d102      	bne.n	8004d34 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8004d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d30:	3b01      	subs	r3, #1
 8004d32:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	029b      	lsls	r3, r3, #10
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d48:	801a      	strh	r2, [r3, #0]
 8004d4a:	e043      	b.n	8004dd4 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d112      	bne.n	8004d78 <HAL_PCD_EP_DB_Transmit+0x332>
 8004d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d60:	801a      	strh	r2, [r3, #0]
 8004d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d74:	801a      	strh	r2, [r3, #0]
 8004d76:	e02d      	b.n	8004dd4 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d7a:	085b      	lsrs	r3, r3, #1
 8004d7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <HAL_PCD_EP_DB_Transmit+0x348>
 8004d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	029b      	lsls	r3, r3, #10
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d98:	801a      	strh	r2, [r3, #0]
 8004d9a:	e01b      	b.n	8004dd4 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	785b      	ldrb	r3, [r3, #1]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d117      	bne.n	8004dd4 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	643b      	str	r3, [r7, #64]	; 0x40
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	461a      	mov	r2, r3
 8004db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004db8:	4413      	add	r3, r2
 8004dba:	643b      	str	r3, [r7, #64]	; 0x40
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	00da      	lsls	r2, r3, #3
 8004dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6818      	ldr	r0, [r3, #0]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	6959      	ldr	r1, [r3, #20]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	891a      	ldrh	r2, [r3, #8]
 8004de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f004 ff2c 	bl	8009c40 <USB_WritePMA>
 8004de8:	e1ce      	b.n	8005188 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	461a      	mov	r2, r3
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	4413      	add	r3, r2
 8004e04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e0e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	699a      	ldr	r2, [r3, #24]
 8004e16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d307      	bcc.n	8004e2e <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	699a      	ldr	r2, [r3, #24]
 8004e22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e26:	1ad2      	subs	r2, r2, r3
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	619a      	str	r2, [r3, #24]
 8004e2c:	e002      	b.n	8004e34 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2200      	movs	r2, #0
 8004e32:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f040 80c4 	bne.w	8004fc6 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	785b      	ldrb	r3, [r3, #1]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d126      	bne.n	8004e94 <HAL_PCD_EP_DB_Transmit+0x44e>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	461a      	mov	r2, r3
 8004e58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e5a:	4413      	add	r3, r2
 8004e5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	00da      	lsls	r2, r3, #3
 8004e64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e66:	4413      	add	r3, r2
 8004e68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e6c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e7c:	801a      	strh	r2, [r3, #0]
 8004e7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e90:	801a      	strh	r2, [r3, #0]
 8004e92:	e01a      	b.n	8004eca <HAL_PCD_EP_DB_Transmit+0x484>
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	785b      	ldrb	r3, [r3, #1]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d116      	bne.n	8004eca <HAL_PCD_EP_DB_Transmit+0x484>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	673b      	str	r3, [r7, #112]	; 0x70
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	461a      	mov	r2, r3
 8004eae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004eb0:	4413      	add	r3, r2
 8004eb2:	673b      	str	r3, [r7, #112]	; 0x70
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	00da      	lsls	r2, r3, #3
 8004eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ec2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	785b      	ldrb	r3, [r3, #1]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d12f      	bne.n	8004f38 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	461a      	mov	r2, r3
 8004eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	00da      	lsls	r2, r3, #3
 8004efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f00:	4413      	add	r3, r2
 8004f02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f1c:	801a      	strh	r2, [r3, #0]
 8004f1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f34:	801a      	strh	r2, [r3, #0]
 8004f36:	e017      	b.n	8004f68 <HAL_PCD_EP_DB_Transmit+0x522>
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	785b      	ldrb	r3, [r3, #1]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d113      	bne.n	8004f68 <HAL_PCD_EP_DB_Transmit+0x522>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f4e:	4413      	add	r3, r2
 8004f50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	00da      	lsls	r2, r3, #3
 8004f58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f60:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f64:	2200      	movs	r2, #0
 8004f66:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f006 fd65 	bl	800ba3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004f74:	88fb      	ldrh	r3, [r7, #6]
 8004f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f040 8104 	bne.w	8005188 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	461a      	mov	r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	441a      	add	r2, r3
 8004fac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004fb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	8013      	strh	r3, [r2, #0]
 8004fc4:	e0e0      	b.n	8005188 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004fc6:	88fb      	ldrh	r3, [r7, #6]
 8004fc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d121      	bne.n	8005014 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	441a      	add	r2, r3
 8004ffc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005008:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800500c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005010:	b29b      	uxth	r3, r3
 8005012:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800501a:	2b01      	cmp	r3, #1
 800501c:	f040 80b4 	bne.w	8005188 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	695a      	ldr	r2, [r3, #20]
 8005024:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005028:	441a      	add	r2, r3
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	69da      	ldr	r2, [r3, #28]
 8005032:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005036:	441a      	add	r2, r3
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	6a1a      	ldr	r2, [r3, #32]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	429a      	cmp	r2, r3
 8005046:	d309      	bcc.n	800505c <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	6a1a      	ldr	r2, [r3, #32]
 8005052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005054:	1ad2      	subs	r2, r2, r3
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	621a      	str	r2, [r3, #32]
 800505a:	e015      	b.n	8005088 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d107      	bne.n	8005074 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8005064:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005068:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005072:	e009      	b.n	8005088 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2200      	movs	r2, #0
 800507e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	663b      	str	r3, [r7, #96]	; 0x60
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	785b      	ldrb	r3, [r3, #1]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d155      	bne.n	8005142 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	65bb      	str	r3, [r7, #88]	; 0x58
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	461a      	mov	r2, r3
 80050a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050aa:	4413      	add	r3, r2
 80050ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	00da      	lsls	r2, r3, #3
 80050b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050b6:	4413      	add	r3, r2
 80050b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80050bc:	657b      	str	r3, [r7, #84]	; 0x54
 80050be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c0:	2b3e      	cmp	r3, #62	; 0x3e
 80050c2:	d916      	bls.n	80050f2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80050c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c6:	095b      	lsrs	r3, r3, #5
 80050c8:	677b      	str	r3, [r7, #116]	; 0x74
 80050ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050cc:	f003 031f 	and.w	r3, r3, #31
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d102      	bne.n	80050da <HAL_PCD_EP_DB_Transmit+0x694>
 80050d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050d6:	3b01      	subs	r3, #1
 80050d8:	677b      	str	r3, [r7, #116]	; 0x74
 80050da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050dc:	b29b      	uxth	r3, r3
 80050de:	029b      	lsls	r3, r3, #10
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ee:	801a      	strh	r2, [r3, #0]
 80050f0:	e040      	b.n	8005174 <HAL_PCD_EP_DB_Transmit+0x72e>
 80050f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d112      	bne.n	800511e <HAL_PCD_EP_DB_Transmit+0x6d8>
 80050f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005102:	b29a      	uxth	r2, r3
 8005104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005106:	801a      	strh	r2, [r3, #0]
 8005108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	b29b      	uxth	r3, r3
 800510e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005116:	b29a      	uxth	r2, r3
 8005118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800511a:	801a      	strh	r2, [r3, #0]
 800511c:	e02a      	b.n	8005174 <HAL_PCD_EP_DB_Transmit+0x72e>
 800511e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005120:	085b      	lsrs	r3, r3, #1
 8005122:	677b      	str	r3, [r7, #116]	; 0x74
 8005124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <HAL_PCD_EP_DB_Transmit+0x6ee>
 800512e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005130:	3301      	adds	r3, #1
 8005132:	677b      	str	r3, [r7, #116]	; 0x74
 8005134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005136:	b29b      	uxth	r3, r3
 8005138:	029b      	lsls	r3, r3, #10
 800513a:	b29a      	uxth	r2, r3
 800513c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800513e:	801a      	strh	r2, [r3, #0]
 8005140:	e018      	b.n	8005174 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	785b      	ldrb	r3, [r3, #1]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d114      	bne.n	8005174 <HAL_PCD_EP_DB_Transmit+0x72e>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005152:	b29b      	uxth	r3, r3
 8005154:	461a      	mov	r2, r3
 8005156:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005158:	4413      	add	r3, r2
 800515a:	663b      	str	r3, [r7, #96]	; 0x60
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	00da      	lsls	r2, r3, #3
 8005162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005164:	4413      	add	r3, r2
 8005166:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800516a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800516c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800516e:	b29a      	uxth	r2, r3
 8005170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005172:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6818      	ldr	r0, [r3, #0]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	6959      	ldr	r1, [r3, #20]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	895a      	ldrh	r2, [r3, #10]
 8005180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005182:	b29b      	uxth	r3, r3
 8005184:	f004 fd5c 	bl	8009c40 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	461a      	mov	r2, r3
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	b29b      	uxth	r3, r3
 800519a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800519e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051a2:	823b      	strh	r3, [r7, #16]
 80051a4:	8a3b      	ldrh	r3, [r7, #16]
 80051a6:	f083 0310 	eor.w	r3, r3, #16
 80051aa:	823b      	strh	r3, [r7, #16]
 80051ac:	8a3b      	ldrh	r3, [r7, #16]
 80051ae:	f083 0320 	eor.w	r3, r3, #32
 80051b2:	823b      	strh	r3, [r7, #16]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	441a      	add	r2, r3
 80051c2:	8a3b      	ldrh	r3, [r7, #16]
 80051c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3788      	adds	r7, #136	; 0x88
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b087      	sub	sp, #28
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	60f8      	str	r0, [r7, #12]
 80051ea:	607b      	str	r3, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	817b      	strh	r3, [r7, #10]
 80051f0:	4613      	mov	r3, r2
 80051f2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80051f4:	897b      	ldrh	r3, [r7, #10]
 80051f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00c      	beq.n	800521a <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005200:	897b      	ldrh	r3, [r7, #10]
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4413      	add	r3, r2
 8005214:	3304      	adds	r3, #4
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	e00a      	b.n	8005230 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800521a:	897a      	ldrh	r2, [r7, #10]
 800521c:	4613      	mov	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4413      	add	r3, r2
 800522c:	3304      	adds	r3, #4
 800522e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005230:	893b      	ldrh	r3, [r7, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d107      	bne.n	8005246 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2200      	movs	r2, #0
 800523a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	b29a      	uxth	r2, r3
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	80da      	strh	r2, [r3, #6]
 8005244:	e00b      	b.n	800525e <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2201      	movs	r2, #1
 800524a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	b29a      	uxth	r2, r3
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	0c1b      	lsrs	r3, r3, #16
 8005258:	b29a      	uxth	r2, r3
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005290:	b29b      	uxth	r3, r3
 8005292:	f043 0301 	orr.w	r3, r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	f043 0302 	orr.w	r3, r3, #2
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80052c4:	4b04      	ldr	r3, [pc, #16]	; (80052d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	40007000 	.word	0x40007000

080052dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ea:	d130      	bne.n	800534e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80052ec:	4b23      	ldr	r3, [pc, #140]	; (800537c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052f8:	d038      	beq.n	800536c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052fa:	4b20      	ldr	r3, [pc, #128]	; (800537c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005302:	4a1e      	ldr	r2, [pc, #120]	; (800537c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005304:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005308:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800530a:	4b1d      	ldr	r3, [pc, #116]	; (8005380 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2232      	movs	r2, #50	; 0x32
 8005310:	fb02 f303 	mul.w	r3, r2, r3
 8005314:	4a1b      	ldr	r2, [pc, #108]	; (8005384 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005316:	fba2 2303 	umull	r2, r3, r2, r3
 800531a:	0c9b      	lsrs	r3, r3, #18
 800531c:	3301      	adds	r3, #1
 800531e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005320:	e002      	b.n	8005328 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3b01      	subs	r3, #1
 8005326:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005328:	4b14      	ldr	r3, [pc, #80]	; (800537c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005334:	d102      	bne.n	800533c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1f2      	bne.n	8005322 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800533c:	4b0f      	ldr	r3, [pc, #60]	; (800537c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005348:	d110      	bne.n	800536c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e00f      	b.n	800536e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800534e:	4b0b      	ldr	r3, [pc, #44]	; (800537c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800535a:	d007      	beq.n	800536c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800535c:	4b07      	ldr	r3, [pc, #28]	; (800537c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005364:	4a05      	ldr	r2, [pc, #20]	; (800537c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800536a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40007000 	.word	0x40007000
 8005380:	20000000 	.word	0x20000000
 8005384:	431bde83 	.word	0x431bde83

08005388 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800538c:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	4a04      	ldr	r2, [pc, #16]	; (80053a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005396:	6053      	str	r3, [r2, #4]
}
 8005398:	bf00      	nop
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40007000 	.word	0x40007000

080053a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b088      	sub	sp, #32
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d102      	bne.n	80053bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	f000 bc02 	b.w	8005bc0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053bc:	4b96      	ldr	r3, [pc, #600]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 030c 	and.w	r3, r3, #12
 80053c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053c6:	4b94      	ldr	r3, [pc, #592]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 80e4 	beq.w	80055a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d007      	beq.n	80053f4 <HAL_RCC_OscConfig+0x4c>
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	2b0c      	cmp	r3, #12
 80053e8:	f040 808b 	bne.w	8005502 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	f040 8087 	bne.w	8005502 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053f4:	4b88      	ldr	r3, [pc, #544]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d005      	beq.n	800540c <HAL_RCC_OscConfig+0x64>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e3d9      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a1a      	ldr	r2, [r3, #32]
 8005410:	4b81      	ldr	r3, [pc, #516]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0308 	and.w	r3, r3, #8
 8005418:	2b00      	cmp	r3, #0
 800541a:	d004      	beq.n	8005426 <HAL_RCC_OscConfig+0x7e>
 800541c:	4b7e      	ldr	r3, [pc, #504]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005424:	e005      	b.n	8005432 <HAL_RCC_OscConfig+0x8a>
 8005426:	4b7c      	ldr	r3, [pc, #496]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 8005428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800542c:	091b      	lsrs	r3, r3, #4
 800542e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005432:	4293      	cmp	r3, r2
 8005434:	d223      	bcs.n	800547e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fd60 	bl	8005f00 <RCC_SetFlashLatencyFromMSIRange>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e3ba      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800544a:	4b73      	ldr	r3, [pc, #460]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a72      	ldr	r2, [pc, #456]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 8005450:	f043 0308 	orr.w	r3, r3, #8
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	4b70      	ldr	r3, [pc, #448]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	496d      	ldr	r1, [pc, #436]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 8005464:	4313      	orrs	r3, r2
 8005466:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005468:	4b6b      	ldr	r3, [pc, #428]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	021b      	lsls	r3, r3, #8
 8005476:	4968      	ldr	r1, [pc, #416]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 8005478:	4313      	orrs	r3, r2
 800547a:	604b      	str	r3, [r1, #4]
 800547c:	e025      	b.n	80054ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800547e:	4b66      	ldr	r3, [pc, #408]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a65      	ldr	r2, [pc, #404]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 8005484:	f043 0308 	orr.w	r3, r3, #8
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	4b63      	ldr	r3, [pc, #396]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	4960      	ldr	r1, [pc, #384]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 8005498:	4313      	orrs	r3, r2
 800549a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800549c:	4b5e      	ldr	r3, [pc, #376]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	021b      	lsls	r3, r3, #8
 80054aa:	495b      	ldr	r1, [pc, #364]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d109      	bne.n	80054ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fd20 	bl	8005f00 <RCC_SetFlashLatencyFromMSIRange>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e37a      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054ca:	f000 fc81 	bl	8005dd0 <HAL_RCC_GetSysClockFreq>
 80054ce:	4602      	mov	r2, r0
 80054d0:	4b51      	ldr	r3, [pc, #324]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	091b      	lsrs	r3, r3, #4
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	4950      	ldr	r1, [pc, #320]	; (800561c <HAL_RCC_OscConfig+0x274>)
 80054dc:	5ccb      	ldrb	r3, [r1, r3]
 80054de:	f003 031f 	and.w	r3, r3, #31
 80054e2:	fa22 f303 	lsr.w	r3, r2, r3
 80054e6:	4a4e      	ldr	r2, [pc, #312]	; (8005620 <HAL_RCC_OscConfig+0x278>)
 80054e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80054ea:	4b4e      	ldr	r3, [pc, #312]	; (8005624 <HAL_RCC_OscConfig+0x27c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fc fbda 	bl	8001ca8 <HAL_InitTick>
 80054f4:	4603      	mov	r3, r0
 80054f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d052      	beq.n	80055a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
 8005500:	e35e      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d032      	beq.n	8005570 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800550a:	4b43      	ldr	r3, [pc, #268]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a42      	ldr	r2, [pc, #264]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 8005510:	f043 0301 	orr.w	r3, r3, #1
 8005514:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005516:	f7fc fc17 	bl	8001d48 <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800551c:	e008      	b.n	8005530 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800551e:	f7fc fc13 	bl	8001d48 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e347      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005530:	4b39      	ldr	r3, [pc, #228]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0f0      	beq.n	800551e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800553c:	4b36      	ldr	r3, [pc, #216]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a35      	ldr	r2, [pc, #212]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 8005542:	f043 0308 	orr.w	r3, r3, #8
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	4b33      	ldr	r3, [pc, #204]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	4930      	ldr	r1, [pc, #192]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 8005556:	4313      	orrs	r3, r2
 8005558:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800555a:	4b2f      	ldr	r3, [pc, #188]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	021b      	lsls	r3, r3, #8
 8005568:	492b      	ldr	r1, [pc, #172]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 800556a:	4313      	orrs	r3, r2
 800556c:	604b      	str	r3, [r1, #4]
 800556e:	e01a      	b.n	80055a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005570:	4b29      	ldr	r3, [pc, #164]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a28      	ldr	r2, [pc, #160]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 8005576:	f023 0301 	bic.w	r3, r3, #1
 800557a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800557c:	f7fc fbe4 	bl	8001d48 <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005584:	f7fc fbe0 	bl	8001d48 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e314      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005596:	4b20      	ldr	r3, [pc, #128]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f0      	bne.n	8005584 <HAL_RCC_OscConfig+0x1dc>
 80055a2:	e000      	b.n	80055a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d073      	beq.n	800569a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d005      	beq.n	80055c4 <HAL_RCC_OscConfig+0x21c>
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	2b0c      	cmp	r3, #12
 80055bc:	d10e      	bne.n	80055dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	2b03      	cmp	r3, #3
 80055c2:	d10b      	bne.n	80055dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055c4:	4b14      	ldr	r3, [pc, #80]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d063      	beq.n	8005698 <HAL_RCC_OscConfig+0x2f0>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d15f      	bne.n	8005698 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e2f1      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e4:	d106      	bne.n	80055f4 <HAL_RCC_OscConfig+0x24c>
 80055e6:	4b0c      	ldr	r3, [pc, #48]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a0b      	ldr	r2, [pc, #44]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 80055ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	e025      	b.n	8005640 <HAL_RCC_OscConfig+0x298>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055fc:	d114      	bne.n	8005628 <HAL_RCC_OscConfig+0x280>
 80055fe:	4b06      	ldr	r3, [pc, #24]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a05      	ldr	r2, [pc, #20]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 8005604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	4b03      	ldr	r3, [pc, #12]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a02      	ldr	r2, [pc, #8]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 8005610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	e013      	b.n	8005640 <HAL_RCC_OscConfig+0x298>
 8005618:	40021000 	.word	0x40021000
 800561c:	0800c170 	.word	0x0800c170
 8005620:	20000000 	.word	0x20000000
 8005624:	20000004 	.word	0x20000004
 8005628:	4ba0      	ldr	r3, [pc, #640]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a9f      	ldr	r2, [pc, #636]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 800562e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	4b9d      	ldr	r3, [pc, #628]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a9c      	ldr	r2, [pc, #624]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 800563a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800563e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d013      	beq.n	8005670 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005648:	f7fc fb7e 	bl	8001d48 <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005650:	f7fc fb7a 	bl	8001d48 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b64      	cmp	r3, #100	; 0x64
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e2ae      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005662:	4b92      	ldr	r3, [pc, #584]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0f0      	beq.n	8005650 <HAL_RCC_OscConfig+0x2a8>
 800566e:	e014      	b.n	800569a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005670:	f7fc fb6a 	bl	8001d48 <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005678:	f7fc fb66 	bl	8001d48 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b64      	cmp	r3, #100	; 0x64
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e29a      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800568a:	4b88      	ldr	r3, [pc, #544]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1f0      	bne.n	8005678 <HAL_RCC_OscConfig+0x2d0>
 8005696:	e000      	b.n	800569a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d060      	beq.n	8005768 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d005      	beq.n	80056b8 <HAL_RCC_OscConfig+0x310>
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	2b0c      	cmp	r3, #12
 80056b0:	d119      	bne.n	80056e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d116      	bne.n	80056e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056b8:	4b7c      	ldr	r3, [pc, #496]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_RCC_OscConfig+0x328>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e277      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d0:	4b76      	ldr	r3, [pc, #472]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	061b      	lsls	r3, r3, #24
 80056de:	4973      	ldr	r1, [pc, #460]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056e4:	e040      	b.n	8005768 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d023      	beq.n	8005736 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056ee:	4b6f      	ldr	r3, [pc, #444]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a6e      	ldr	r2, [pc, #440]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 80056f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fa:	f7fc fb25 	bl	8001d48 <HAL_GetTick>
 80056fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005700:	e008      	b.n	8005714 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005702:	f7fc fb21 	bl	8001d48 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e255      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005714:	4b65      	ldr	r3, [pc, #404]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0f0      	beq.n	8005702 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005720:	4b62      	ldr	r3, [pc, #392]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	061b      	lsls	r3, r3, #24
 800572e:	495f      	ldr	r1, [pc, #380]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 8005730:	4313      	orrs	r3, r2
 8005732:	604b      	str	r3, [r1, #4]
 8005734:	e018      	b.n	8005768 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005736:	4b5d      	ldr	r3, [pc, #372]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a5c      	ldr	r2, [pc, #368]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 800573c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005742:	f7fc fb01 	bl	8001d48 <HAL_GetTick>
 8005746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005748:	e008      	b.n	800575c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800574a:	f7fc fafd 	bl	8001d48 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d901      	bls.n	800575c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e231      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800575c:	4b53      	ldr	r3, [pc, #332]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1f0      	bne.n	800574a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b00      	cmp	r3, #0
 8005772:	d03c      	beq.n	80057ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01c      	beq.n	80057b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800577c:	4b4b      	ldr	r3, [pc, #300]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 800577e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005782:	4a4a      	ldr	r2, [pc, #296]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 8005784:	f043 0301 	orr.w	r3, r3, #1
 8005788:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800578c:	f7fc fadc 	bl	8001d48 <HAL_GetTick>
 8005790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005792:	e008      	b.n	80057a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005794:	f7fc fad8 	bl	8001d48 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e20c      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057a6:	4b41      	ldr	r3, [pc, #260]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 80057a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0ef      	beq.n	8005794 <HAL_RCC_OscConfig+0x3ec>
 80057b4:	e01b      	b.n	80057ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057b6:	4b3d      	ldr	r3, [pc, #244]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 80057b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057bc:	4a3b      	ldr	r2, [pc, #236]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 80057be:	f023 0301 	bic.w	r3, r3, #1
 80057c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c6:	f7fc fabf 	bl	8001d48 <HAL_GetTick>
 80057ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057cc:	e008      	b.n	80057e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ce:	f7fc fabb 	bl	8001d48 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e1ef      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057e0:	4b32      	ldr	r3, [pc, #200]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 80057e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1ef      	bne.n	80057ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0304 	and.w	r3, r3, #4
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 80a6 	beq.w	8005948 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057fc:	2300      	movs	r3, #0
 80057fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005800:	4b2a      	ldr	r3, [pc, #168]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 8005802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10d      	bne.n	8005828 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800580c:	4b27      	ldr	r3, [pc, #156]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 800580e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005810:	4a26      	ldr	r2, [pc, #152]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 8005812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005816:	6593      	str	r3, [r2, #88]	; 0x58
 8005818:	4b24      	ldr	r3, [pc, #144]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 800581a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005820:	60bb      	str	r3, [r7, #8]
 8005822:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005824:	2301      	movs	r3, #1
 8005826:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005828:	4b21      	ldr	r3, [pc, #132]	; (80058b0 <HAL_RCC_OscConfig+0x508>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005830:	2b00      	cmp	r3, #0
 8005832:	d118      	bne.n	8005866 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005834:	4b1e      	ldr	r3, [pc, #120]	; (80058b0 <HAL_RCC_OscConfig+0x508>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a1d      	ldr	r2, [pc, #116]	; (80058b0 <HAL_RCC_OscConfig+0x508>)
 800583a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800583e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005840:	f7fc fa82 	bl	8001d48 <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005848:	f7fc fa7e 	bl	8001d48 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e1b2      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800585a:	4b15      	ldr	r3, [pc, #84]	; (80058b0 <HAL_RCC_OscConfig+0x508>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0f0      	beq.n	8005848 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d108      	bne.n	8005880 <HAL_RCC_OscConfig+0x4d8>
 800586e:	4b0f      	ldr	r3, [pc, #60]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 8005870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005874:	4a0d      	ldr	r2, [pc, #52]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 8005876:	f043 0301 	orr.w	r3, r3, #1
 800587a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800587e:	e029      	b.n	80058d4 <HAL_RCC_OscConfig+0x52c>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	2b05      	cmp	r3, #5
 8005886:	d115      	bne.n	80058b4 <HAL_RCC_OscConfig+0x50c>
 8005888:	4b08      	ldr	r3, [pc, #32]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 800588a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588e:	4a07      	ldr	r2, [pc, #28]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 8005890:	f043 0304 	orr.w	r3, r3, #4
 8005894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005898:	4b04      	ldr	r3, [pc, #16]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 800589a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589e:	4a03      	ldr	r2, [pc, #12]	; (80058ac <HAL_RCC_OscConfig+0x504>)
 80058a0:	f043 0301 	orr.w	r3, r3, #1
 80058a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058a8:	e014      	b.n	80058d4 <HAL_RCC_OscConfig+0x52c>
 80058aa:	bf00      	nop
 80058ac:	40021000 	.word	0x40021000
 80058b0:	40007000 	.word	0x40007000
 80058b4:	4b9a      	ldr	r3, [pc, #616]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 80058b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ba:	4a99      	ldr	r2, [pc, #612]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 80058bc:	f023 0301 	bic.w	r3, r3, #1
 80058c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058c4:	4b96      	ldr	r3, [pc, #600]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 80058c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ca:	4a95      	ldr	r2, [pc, #596]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 80058cc:	f023 0304 	bic.w	r3, r3, #4
 80058d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d016      	beq.n	800590a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058dc:	f7fc fa34 	bl	8001d48 <HAL_GetTick>
 80058e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058e2:	e00a      	b.n	80058fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058e4:	f7fc fa30 	bl	8001d48 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e162      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058fa:	4b89      	ldr	r3, [pc, #548]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 80058fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d0ed      	beq.n	80058e4 <HAL_RCC_OscConfig+0x53c>
 8005908:	e015      	b.n	8005936 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800590a:	f7fc fa1d 	bl	8001d48 <HAL_GetTick>
 800590e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005910:	e00a      	b.n	8005928 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005912:	f7fc fa19 	bl	8001d48 <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005920:	4293      	cmp	r3, r2
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e14b      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005928:	4b7d      	ldr	r3, [pc, #500]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 800592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1ed      	bne.n	8005912 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005936:	7ffb      	ldrb	r3, [r7, #31]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d105      	bne.n	8005948 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800593c:	4b78      	ldr	r3, [pc, #480]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 800593e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005940:	4a77      	ldr	r2, [pc, #476]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 8005942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005946:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	2b00      	cmp	r3, #0
 8005952:	d03c      	beq.n	80059ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01c      	beq.n	8005996 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800595c:	4b70      	ldr	r3, [pc, #448]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 800595e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005962:	4a6f      	ldr	r2, [pc, #444]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 8005964:	f043 0301 	orr.w	r3, r3, #1
 8005968:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800596c:	f7fc f9ec 	bl	8001d48 <HAL_GetTick>
 8005970:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005972:	e008      	b.n	8005986 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005974:	f7fc f9e8 	bl	8001d48 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e11c      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005986:	4b66      	ldr	r3, [pc, #408]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 8005988:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d0ef      	beq.n	8005974 <HAL_RCC_OscConfig+0x5cc>
 8005994:	e01b      	b.n	80059ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005996:	4b62      	ldr	r3, [pc, #392]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 8005998:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800599c:	4a60      	ldr	r2, [pc, #384]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 800599e:	f023 0301 	bic.w	r3, r3, #1
 80059a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a6:	f7fc f9cf 	bl	8001d48 <HAL_GetTick>
 80059aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059ac:	e008      	b.n	80059c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059ae:	f7fc f9cb 	bl	8001d48 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e0ff      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059c0:	4b57      	ldr	r3, [pc, #348]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 80059c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1ef      	bne.n	80059ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 80f3 	beq.w	8005bbe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059dc:	2b02      	cmp	r3, #2
 80059de:	f040 80c9 	bne.w	8005b74 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80059e2:	4b4f      	ldr	r3, [pc, #316]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f003 0203 	and.w	r2, r3, #3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d12c      	bne.n	8005a50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a00:	3b01      	subs	r3, #1
 8005a02:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d123      	bne.n	8005a50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a12:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d11b      	bne.n	8005a50 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a22:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d113      	bne.n	8005a50 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a32:	085b      	lsrs	r3, r3, #1
 8005a34:	3b01      	subs	r3, #1
 8005a36:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d109      	bne.n	8005a50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d06b      	beq.n	8005b28 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2b0c      	cmp	r3, #12
 8005a54:	d062      	beq.n	8005b1c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a56:	4b32      	ldr	r3, [pc, #200]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e0ac      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a66:	4b2e      	ldr	r3, [pc, #184]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a2d      	ldr	r2, [pc, #180]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 8005a6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a70:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a72:	f7fc f969 	bl	8001d48 <HAL_GetTick>
 8005a76:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a78:	e008      	b.n	8005a8c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a7a:	f7fc f965 	bl	8001d48 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e099      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a8c:	4b24      	ldr	r3, [pc, #144]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1f0      	bne.n	8005a7a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a98:	4b21      	ldr	r3, [pc, #132]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	4b21      	ldr	r3, [pc, #132]	; (8005b24 <HAL_RCC_OscConfig+0x77c>)
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005aa8:	3a01      	subs	r2, #1
 8005aaa:	0112      	lsls	r2, r2, #4
 8005aac:	4311      	orrs	r1, r2
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ab2:	0212      	lsls	r2, r2, #8
 8005ab4:	4311      	orrs	r1, r2
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005aba:	0852      	lsrs	r2, r2, #1
 8005abc:	3a01      	subs	r2, #1
 8005abe:	0552      	lsls	r2, r2, #21
 8005ac0:	4311      	orrs	r1, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ac6:	0852      	lsrs	r2, r2, #1
 8005ac8:	3a01      	subs	r2, #1
 8005aca:	0652      	lsls	r2, r2, #25
 8005acc:	4311      	orrs	r1, r2
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ad2:	06d2      	lsls	r2, r2, #27
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	4912      	ldr	r1, [pc, #72]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005adc:	4b10      	ldr	r3, [pc, #64]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a0f      	ldr	r2, [pc, #60]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 8005ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ae6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ae8:	4b0d      	ldr	r3, [pc, #52]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	4a0c      	ldr	r2, [pc, #48]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 8005aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005af2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005af4:	f7fc f928 	bl	8001d48 <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005afc:	f7fc f924 	bl	8001d48 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e058      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b0e:	4b04      	ldr	r3, [pc, #16]	; (8005b20 <HAL_RCC_OscConfig+0x778>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0f0      	beq.n	8005afc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b1a:	e050      	b.n	8005bbe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e04f      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
 8005b20:	40021000 	.word	0x40021000
 8005b24:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b28:	4b27      	ldr	r3, [pc, #156]	; (8005bc8 <HAL_RCC_OscConfig+0x820>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d144      	bne.n	8005bbe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b34:	4b24      	ldr	r3, [pc, #144]	; (8005bc8 <HAL_RCC_OscConfig+0x820>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a23      	ldr	r2, [pc, #140]	; (8005bc8 <HAL_RCC_OscConfig+0x820>)
 8005b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b40:	4b21      	ldr	r3, [pc, #132]	; (8005bc8 <HAL_RCC_OscConfig+0x820>)
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	4a20      	ldr	r2, [pc, #128]	; (8005bc8 <HAL_RCC_OscConfig+0x820>)
 8005b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b4c:	f7fc f8fc 	bl	8001d48 <HAL_GetTick>
 8005b50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b52:	e008      	b.n	8005b66 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b54:	f7fc f8f8 	bl	8001d48 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e02c      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b66:	4b18      	ldr	r3, [pc, #96]	; (8005bc8 <HAL_RCC_OscConfig+0x820>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d0f0      	beq.n	8005b54 <HAL_RCC_OscConfig+0x7ac>
 8005b72:	e024      	b.n	8005bbe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	2b0c      	cmp	r3, #12
 8005b78:	d01f      	beq.n	8005bba <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b7a:	4b13      	ldr	r3, [pc, #76]	; (8005bc8 <HAL_RCC_OscConfig+0x820>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a12      	ldr	r2, [pc, #72]	; (8005bc8 <HAL_RCC_OscConfig+0x820>)
 8005b80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b86:	f7fc f8df 	bl	8001d48 <HAL_GetTick>
 8005b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b8c:	e008      	b.n	8005ba0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b8e:	f7fc f8db 	bl	8001d48 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e00f      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ba0:	4b09      	ldr	r3, [pc, #36]	; (8005bc8 <HAL_RCC_OscConfig+0x820>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1f0      	bne.n	8005b8e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005bac:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <HAL_RCC_OscConfig+0x820>)
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	4905      	ldr	r1, [pc, #20]	; (8005bc8 <HAL_RCC_OscConfig+0x820>)
 8005bb2:	4b06      	ldr	r3, [pc, #24]	; (8005bcc <HAL_RCC_OscConfig+0x824>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	60cb      	str	r3, [r1, #12]
 8005bb8:	e001      	b.n	8005bbe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3720      	adds	r7, #32
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	feeefffc 	.word	0xfeeefffc

08005bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e0e7      	b.n	8005db4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005be4:	4b75      	ldr	r3, [pc, #468]	; (8005dbc <HAL_RCC_ClockConfig+0x1ec>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0307 	and.w	r3, r3, #7
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d910      	bls.n	8005c14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bf2:	4b72      	ldr	r3, [pc, #456]	; (8005dbc <HAL_RCC_ClockConfig+0x1ec>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f023 0207 	bic.w	r2, r3, #7
 8005bfa:	4970      	ldr	r1, [pc, #448]	; (8005dbc <HAL_RCC_ClockConfig+0x1ec>)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c02:	4b6e      	ldr	r3, [pc, #440]	; (8005dbc <HAL_RCC_ClockConfig+0x1ec>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0307 	and.w	r3, r3, #7
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d001      	beq.n	8005c14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e0cf      	b.n	8005db4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d010      	beq.n	8005c42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	4b66      	ldr	r3, [pc, #408]	; (8005dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d908      	bls.n	8005c42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c30:	4b63      	ldr	r3, [pc, #396]	; (8005dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	4960      	ldr	r1, [pc, #384]	; (8005dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d04c      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	2b03      	cmp	r3, #3
 8005c54:	d107      	bne.n	8005c66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c56:	4b5a      	ldr	r3, [pc, #360]	; (8005dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d121      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e0a6      	b.n	8005db4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d107      	bne.n	8005c7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c6e:	4b54      	ldr	r3, [pc, #336]	; (8005dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d115      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e09a      	b.n	8005db4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d107      	bne.n	8005c96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c86:	4b4e      	ldr	r3, [pc, #312]	; (8005dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d109      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e08e      	b.n	8005db4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c96:	4b4a      	ldr	r3, [pc, #296]	; (8005dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e086      	b.n	8005db4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ca6:	4b46      	ldr	r3, [pc, #280]	; (8005dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f023 0203 	bic.w	r2, r3, #3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	4943      	ldr	r1, [pc, #268]	; (8005dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cb8:	f7fc f846 	bl	8001d48 <HAL_GetTick>
 8005cbc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cbe:	e00a      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cc0:	f7fc f842 	bl	8001d48 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e06e      	b.n	8005db4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cd6:	4b3a      	ldr	r3, [pc, #232]	; (8005dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f003 020c 	and.w	r2, r3, #12
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d1eb      	bne.n	8005cc0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d010      	beq.n	8005d16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689a      	ldr	r2, [r3, #8]
 8005cf8:	4b31      	ldr	r3, [pc, #196]	; (8005dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d208      	bcs.n	8005d16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d04:	4b2e      	ldr	r3, [pc, #184]	; (8005dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	492b      	ldr	r1, [pc, #172]	; (8005dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d16:	4b29      	ldr	r3, [pc, #164]	; (8005dbc <HAL_RCC_ClockConfig+0x1ec>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0307 	and.w	r3, r3, #7
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d210      	bcs.n	8005d46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d24:	4b25      	ldr	r3, [pc, #148]	; (8005dbc <HAL_RCC_ClockConfig+0x1ec>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f023 0207 	bic.w	r2, r3, #7
 8005d2c:	4923      	ldr	r1, [pc, #140]	; (8005dbc <HAL_RCC_ClockConfig+0x1ec>)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d34:	4b21      	ldr	r3, [pc, #132]	; (8005dbc <HAL_RCC_ClockConfig+0x1ec>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d001      	beq.n	8005d46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e036      	b.n	8005db4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0304 	and.w	r3, r3, #4
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d008      	beq.n	8005d64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d52:	4b1b      	ldr	r3, [pc, #108]	; (8005dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	4918      	ldr	r1, [pc, #96]	; (8005dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d009      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d70:	4b13      	ldr	r3, [pc, #76]	; (8005dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	4910      	ldr	r1, [pc, #64]	; (8005dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d84:	f000 f824 	bl	8005dd0 <HAL_RCC_GetSysClockFreq>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	4b0d      	ldr	r3, [pc, #52]	; (8005dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	091b      	lsrs	r3, r3, #4
 8005d90:	f003 030f 	and.w	r3, r3, #15
 8005d94:	490b      	ldr	r1, [pc, #44]	; (8005dc4 <HAL_RCC_ClockConfig+0x1f4>)
 8005d96:	5ccb      	ldrb	r3, [r1, r3]
 8005d98:	f003 031f 	and.w	r3, r3, #31
 8005d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005da0:	4a09      	ldr	r2, [pc, #36]	; (8005dc8 <HAL_RCC_ClockConfig+0x1f8>)
 8005da2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005da4:	4b09      	ldr	r3, [pc, #36]	; (8005dcc <HAL_RCC_ClockConfig+0x1fc>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fb ff7d 	bl	8001ca8 <HAL_InitTick>
 8005dae:	4603      	mov	r3, r0
 8005db0:	72fb      	strb	r3, [r7, #11]

  return status;
 8005db2:	7afb      	ldrb	r3, [r7, #11]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	40022000 	.word	0x40022000
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	0800c170 	.word	0x0800c170
 8005dc8:	20000000 	.word	0x20000000
 8005dcc:	20000004 	.word	0x20000004

08005dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b089      	sub	sp, #36	; 0x24
 8005dd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	61fb      	str	r3, [r7, #28]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dde:	4b3e      	ldr	r3, [pc, #248]	; (8005ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 030c 	and.w	r3, r3, #12
 8005de6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005de8:	4b3b      	ldr	r3, [pc, #236]	; (8005ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f003 0303 	and.w	r3, r3, #3
 8005df0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d005      	beq.n	8005e04 <HAL_RCC_GetSysClockFreq+0x34>
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	2b0c      	cmp	r3, #12
 8005dfc:	d121      	bne.n	8005e42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d11e      	bne.n	8005e42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e04:	4b34      	ldr	r3, [pc, #208]	; (8005ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0308 	and.w	r3, r3, #8
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d107      	bne.n	8005e20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e10:	4b31      	ldr	r3, [pc, #196]	; (8005ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e16:	0a1b      	lsrs	r3, r3, #8
 8005e18:	f003 030f 	and.w	r3, r3, #15
 8005e1c:	61fb      	str	r3, [r7, #28]
 8005e1e:	e005      	b.n	8005e2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e20:	4b2d      	ldr	r3, [pc, #180]	; (8005ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	091b      	lsrs	r3, r3, #4
 8005e26:	f003 030f 	and.w	r3, r3, #15
 8005e2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e2c:	4a2b      	ldr	r2, [pc, #172]	; (8005edc <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10d      	bne.n	8005e58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e40:	e00a      	b.n	8005e58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d102      	bne.n	8005e4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e48:	4b25      	ldr	r3, [pc, #148]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e4a:	61bb      	str	r3, [r7, #24]
 8005e4c:	e004      	b.n	8005e58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d101      	bne.n	8005e58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e54:	4b23      	ldr	r3, [pc, #140]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	2b0c      	cmp	r3, #12
 8005e5c:	d134      	bne.n	8005ec8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e5e:	4b1e      	ldr	r3, [pc, #120]	; (8005ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d003      	beq.n	8005e76 <HAL_RCC_GetSysClockFreq+0xa6>
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2b03      	cmp	r3, #3
 8005e72:	d003      	beq.n	8005e7c <HAL_RCC_GetSysClockFreq+0xac>
 8005e74:	e005      	b.n	8005e82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005e76:	4b1a      	ldr	r3, [pc, #104]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e78:	617b      	str	r3, [r7, #20]
      break;
 8005e7a:	e005      	b.n	8005e88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005e7c:	4b19      	ldr	r3, [pc, #100]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e7e:	617b      	str	r3, [r7, #20]
      break;
 8005e80:	e002      	b.n	8005e88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	617b      	str	r3, [r7, #20]
      break;
 8005e86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e88:	4b13      	ldr	r3, [pc, #76]	; (8005ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	091b      	lsrs	r3, r3, #4
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	3301      	adds	r3, #1
 8005e94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e96:	4b10      	ldr	r3, [pc, #64]	; (8005ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	0a1b      	lsrs	r3, r3, #8
 8005e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	fb03 f202 	mul.w	r2, r3, r2
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005eae:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	0e5b      	lsrs	r3, r3, #25
 8005eb4:	f003 0303 	and.w	r3, r3, #3
 8005eb8:	3301      	adds	r3, #1
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ec8:	69bb      	ldr	r3, [r7, #24]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3724      	adds	r7, #36	; 0x24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	40021000 	.word	0x40021000
 8005edc:	0800c180 	.word	0x0800c180
 8005ee0:	00f42400 	.word	0x00f42400
 8005ee4:	007a1200 	.word	0x007a1200

08005ee8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005eec:	4b03      	ldr	r3, [pc, #12]	; (8005efc <HAL_RCC_GetHCLKFreq+0x14>)
 8005eee:	681b      	ldr	r3, [r3, #0]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	20000000 	.word	0x20000000

08005f00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005f08:	2300      	movs	r3, #0
 8005f0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f0c:	4b2a      	ldr	r3, [pc, #168]	; (8005fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f18:	f7ff f9d2 	bl	80052c0 <HAL_PWREx_GetVoltageRange>
 8005f1c:	6178      	str	r0, [r7, #20]
 8005f1e:	e014      	b.n	8005f4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f20:	4b25      	ldr	r3, [pc, #148]	; (8005fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f24:	4a24      	ldr	r2, [pc, #144]	; (8005fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f2a:	6593      	str	r3, [r2, #88]	; 0x58
 8005f2c:	4b22      	ldr	r3, [pc, #136]	; (8005fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f38:	f7ff f9c2 	bl	80052c0 <HAL_PWREx_GetVoltageRange>
 8005f3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f3e:	4b1e      	ldr	r3, [pc, #120]	; (8005fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f42:	4a1d      	ldr	r2, [pc, #116]	; (8005fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f48:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f50:	d10b      	bne.n	8005f6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b80      	cmp	r3, #128	; 0x80
 8005f56:	d919      	bls.n	8005f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2ba0      	cmp	r3, #160	; 0xa0
 8005f5c:	d902      	bls.n	8005f64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f5e:	2302      	movs	r3, #2
 8005f60:	613b      	str	r3, [r7, #16]
 8005f62:	e013      	b.n	8005f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f64:	2301      	movs	r3, #1
 8005f66:	613b      	str	r3, [r7, #16]
 8005f68:	e010      	b.n	8005f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b80      	cmp	r3, #128	; 0x80
 8005f6e:	d902      	bls.n	8005f76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005f70:	2303      	movs	r3, #3
 8005f72:	613b      	str	r3, [r7, #16]
 8005f74:	e00a      	b.n	8005f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b80      	cmp	r3, #128	; 0x80
 8005f7a:	d102      	bne.n	8005f82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	e004      	b.n	8005f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b70      	cmp	r3, #112	; 0x70
 8005f86:	d101      	bne.n	8005f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f88:	2301      	movs	r3, #1
 8005f8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005f8c:	4b0b      	ldr	r3, [pc, #44]	; (8005fbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f023 0207 	bic.w	r2, r3, #7
 8005f94:	4909      	ldr	r1, [pc, #36]	; (8005fbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005f9c:	4b07      	ldr	r3, [pc, #28]	; (8005fbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d001      	beq.n	8005fae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3718      	adds	r7, #24
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	40021000 	.word	0x40021000
 8005fbc:	40022000 	.word	0x40022000

08005fc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fc8:	2300      	movs	r3, #0
 8005fca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fcc:	2300      	movs	r3, #0
 8005fce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d031      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005fe4:	d01a      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005fe6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005fea:	d814      	bhi.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d009      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ff0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ff4:	d10f      	bne.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005ff6:	4b5d      	ldr	r3, [pc, #372]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	4a5c      	ldr	r2, [pc, #368]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006000:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006002:	e00c      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3304      	adds	r3, #4
 8006008:	2100      	movs	r1, #0
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fa22 	bl	8006454 <RCCEx_PLLSAI1_Config>
 8006010:	4603      	mov	r3, r0
 8006012:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006014:	e003      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	74fb      	strb	r3, [r7, #19]
      break;
 800601a:	e000      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800601c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800601e:	7cfb      	ldrb	r3, [r7, #19]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10b      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006024:	4b51      	ldr	r3, [pc, #324]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006032:	494e      	ldr	r1, [pc, #312]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006034:	4313      	orrs	r3, r2
 8006036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800603a:	e001      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603c:	7cfb      	ldrb	r3, [r7, #19]
 800603e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 809e 	beq.w	800618a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800604e:	2300      	movs	r3, #0
 8006050:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006052:	4b46      	ldr	r3, [pc, #280]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800605e:	2301      	movs	r3, #1
 8006060:	e000      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006062:	2300      	movs	r3, #0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00d      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006068:	4b40      	ldr	r3, [pc, #256]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800606a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606c:	4a3f      	ldr	r2, [pc, #252]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800606e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006072:	6593      	str	r3, [r2, #88]	; 0x58
 8006074:	4b3d      	ldr	r3, [pc, #244]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800607c:	60bb      	str	r3, [r7, #8]
 800607e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006080:	2301      	movs	r3, #1
 8006082:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006084:	4b3a      	ldr	r3, [pc, #232]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a39      	ldr	r2, [pc, #228]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800608a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800608e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006090:	f7fb fe5a 	bl	8001d48 <HAL_GetTick>
 8006094:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006096:	e009      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006098:	f7fb fe56 	bl	8001d48 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d902      	bls.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	74fb      	strb	r3, [r7, #19]
        break;
 80060aa:	e005      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80060ac:	4b30      	ldr	r3, [pc, #192]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0ef      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80060b8:	7cfb      	ldrb	r3, [r7, #19]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d15a      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060be:	4b2b      	ldr	r3, [pc, #172]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01e      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d019      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060da:	4b24      	ldr	r3, [pc, #144]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060e6:	4b21      	ldr	r3, [pc, #132]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ec:	4a1f      	ldr	r2, [pc, #124]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060f6:	4b1d      	ldr	r3, [pc, #116]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fc:	4a1b      	ldr	r2, [pc, #108]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006102:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006106:	4a19      	ldr	r2, [pc, #100]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b00      	cmp	r3, #0
 8006116:	d016      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006118:	f7fb fe16 	bl	8001d48 <HAL_GetTick>
 800611c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800611e:	e00b      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006120:	f7fb fe12 	bl	8001d48 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	f241 3288 	movw	r2, #5000	; 0x1388
 800612e:	4293      	cmp	r3, r2
 8006130:	d902      	bls.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	74fb      	strb	r3, [r7, #19]
            break;
 8006136:	e006      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006138:	4b0c      	ldr	r3, [pc, #48]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800613a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d0ec      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006146:	7cfb      	ldrb	r3, [r7, #19]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10b      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800614c:	4b07      	ldr	r3, [pc, #28]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800614e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006152:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800615a:	4904      	ldr	r1, [pc, #16]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800615c:	4313      	orrs	r3, r2
 800615e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006162:	e009      	b.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006164:	7cfb      	ldrb	r3, [r7, #19]
 8006166:	74bb      	strb	r3, [r7, #18]
 8006168:	e006      	b.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800616a:	bf00      	nop
 800616c:	40021000 	.word	0x40021000
 8006170:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006174:	7cfb      	ldrb	r3, [r7, #19]
 8006176:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006178:	7c7b      	ldrb	r3, [r7, #17]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d105      	bne.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800617e:	4b8d      	ldr	r3, [pc, #564]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006182:	4a8c      	ldr	r2, [pc, #560]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006188:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006196:	4b87      	ldr	r3, [pc, #540]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800619c:	f023 0203 	bic.w	r2, r3, #3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	4983      	ldr	r1, [pc, #524]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00a      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061b8:	4b7e      	ldr	r3, [pc, #504]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80061ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061be:	f023 020c 	bic.w	r2, r3, #12
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	497b      	ldr	r1, [pc, #492]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0304 	and.w	r3, r3, #4
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00a      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061da:	4b76      	ldr	r3, [pc, #472]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80061dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e8:	4972      	ldr	r1, [pc, #456]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0320 	and.w	r3, r3, #32
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00a      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061fc:	4b6d      	ldr	r3, [pc, #436]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80061fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006202:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	496a      	ldr	r1, [pc, #424]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800620c:	4313      	orrs	r3, r2
 800620e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00a      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800621e:	4b65      	ldr	r3, [pc, #404]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006224:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622c:	4961      	ldr	r1, [pc, #388]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800622e:	4313      	orrs	r3, r2
 8006230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00a      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006240:	4b5c      	ldr	r3, [pc, #368]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006246:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	4959      	ldr	r1, [pc, #356]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006250:	4313      	orrs	r3, r2
 8006252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006262:	4b54      	ldr	r3, [pc, #336]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006268:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006270:	4950      	ldr	r1, [pc, #320]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006272:	4313      	orrs	r3, r2
 8006274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00a      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006284:	4b4b      	ldr	r3, [pc, #300]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006292:	4948      	ldr	r1, [pc, #288]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006294:	4313      	orrs	r3, r2
 8006296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062a6:	4b43      	ldr	r3, [pc, #268]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80062a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	493f      	ldr	r1, [pc, #252]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d028      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062c8:	4b3a      	ldr	r3, [pc, #232]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80062ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062d6:	4937      	ldr	r1, [pc, #220]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062e6:	d106      	bne.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062e8:	4b32      	ldr	r3, [pc, #200]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	4a31      	ldr	r2, [pc, #196]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80062ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062f2:	60d3      	str	r3, [r2, #12]
 80062f4:	e011      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062fe:	d10c      	bne.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3304      	adds	r3, #4
 8006304:	2101      	movs	r1, #1
 8006306:	4618      	mov	r0, r3
 8006308:	f000 f8a4 	bl	8006454 <RCCEx_PLLSAI1_Config>
 800630c:	4603      	mov	r3, r0
 800630e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006310:	7cfb      	ldrb	r3, [r7, #19]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8006316:	7cfb      	ldrb	r3, [r7, #19]
 8006318:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d028      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006326:	4b23      	ldr	r3, [pc, #140]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006334:	491f      	ldr	r1, [pc, #124]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006336:	4313      	orrs	r3, r2
 8006338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006344:	d106      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006346:	4b1b      	ldr	r3, [pc, #108]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	4a1a      	ldr	r2, [pc, #104]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800634c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006350:	60d3      	str	r3, [r2, #12]
 8006352:	e011      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006358:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800635c:	d10c      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	3304      	adds	r3, #4
 8006362:	2101      	movs	r1, #1
 8006364:	4618      	mov	r0, r3
 8006366:	f000 f875 	bl	8006454 <RCCEx_PLLSAI1_Config>
 800636a:	4603      	mov	r3, r0
 800636c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800636e:	7cfb      	ldrb	r3, [r7, #19]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8006374:	7cfb      	ldrb	r3, [r7, #19]
 8006376:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d02b      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006384:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800638a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006392:	4908      	ldr	r1, [pc, #32]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006394:	4313      	orrs	r3, r2
 8006396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800639e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063a2:	d109      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063a4:	4b03      	ldr	r3, [pc, #12]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	4a02      	ldr	r2, [pc, #8]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80063aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063ae:	60d3      	str	r3, [r2, #12]
 80063b0:	e014      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80063b2:	bf00      	nop
 80063b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063c0:	d10c      	bne.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	3304      	adds	r3, #4
 80063c6:	2101      	movs	r1, #1
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 f843 	bl	8006454 <RCCEx_PLLSAI1_Config>
 80063ce:	4603      	mov	r3, r0
 80063d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063d2:	7cfb      	ldrb	r3, [r7, #19]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80063d8:	7cfb      	ldrb	r3, [r7, #19]
 80063da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d01c      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063e8:	4b19      	ldr	r3, [pc, #100]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f6:	4916      	ldr	r1, [pc, #88]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006402:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006406:	d10c      	bne.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3304      	adds	r3, #4
 800640c:	2102      	movs	r1, #2
 800640e:	4618      	mov	r0, r3
 8006410:	f000 f820 	bl	8006454 <RCCEx_PLLSAI1_Config>
 8006414:	4603      	mov	r3, r0
 8006416:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006418:	7cfb      	ldrb	r3, [r7, #19]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800641e:	7cfb      	ldrb	r3, [r7, #19]
 8006420:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800642e:	4b08      	ldr	r3, [pc, #32]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006434:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800643c:	4904      	ldr	r1, [pc, #16]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800643e:	4313      	orrs	r3, r2
 8006440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006444:	7cbb      	ldrb	r3, [r7, #18]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3718      	adds	r7, #24
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	40021000 	.word	0x40021000

08006454 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006462:	4b74      	ldr	r3, [pc, #464]	; (8006634 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d018      	beq.n	80064a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800646e:	4b71      	ldr	r3, [pc, #452]	; (8006634 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	f003 0203 	and.w	r2, r3, #3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d10d      	bne.n	800649a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
       ||
 8006482:	2b00      	cmp	r3, #0
 8006484:	d009      	beq.n	800649a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006486:	4b6b      	ldr	r3, [pc, #428]	; (8006634 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	091b      	lsrs	r3, r3, #4
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
       ||
 8006496:	429a      	cmp	r2, r3
 8006498:	d047      	beq.n	800652a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	73fb      	strb	r3, [r7, #15]
 800649e:	e044      	b.n	800652a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d018      	beq.n	80064da <RCCEx_PLLSAI1_Config+0x86>
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d825      	bhi.n	80064f8 <RCCEx_PLLSAI1_Config+0xa4>
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d002      	beq.n	80064b6 <RCCEx_PLLSAI1_Config+0x62>
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d009      	beq.n	80064c8 <RCCEx_PLLSAI1_Config+0x74>
 80064b4:	e020      	b.n	80064f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80064b6:	4b5f      	ldr	r3, [pc, #380]	; (8006634 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d11d      	bne.n	80064fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064c6:	e01a      	b.n	80064fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80064c8:	4b5a      	ldr	r3, [pc, #360]	; (8006634 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d116      	bne.n	8006502 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064d8:	e013      	b.n	8006502 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80064da:	4b56      	ldr	r3, [pc, #344]	; (8006634 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10f      	bne.n	8006506 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80064e6:	4b53      	ldr	r3, [pc, #332]	; (8006634 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d109      	bne.n	8006506 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064f6:	e006      	b.n	8006506 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	73fb      	strb	r3, [r7, #15]
      break;
 80064fc:	e004      	b.n	8006508 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80064fe:	bf00      	nop
 8006500:	e002      	b.n	8006508 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006502:	bf00      	nop
 8006504:	e000      	b.n	8006508 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006506:	bf00      	nop
    }

    if(status == HAL_OK)
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10d      	bne.n	800652a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800650e:	4b49      	ldr	r3, [pc, #292]	; (8006634 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6819      	ldr	r1, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	3b01      	subs	r3, #1
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	430b      	orrs	r3, r1
 8006524:	4943      	ldr	r1, [pc, #268]	; (8006634 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006526:	4313      	orrs	r3, r2
 8006528:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d17c      	bne.n	800662a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006530:	4b40      	ldr	r3, [pc, #256]	; (8006634 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a3f      	ldr	r2, [pc, #252]	; (8006634 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006536:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800653a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800653c:	f7fb fc04 	bl	8001d48 <HAL_GetTick>
 8006540:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006542:	e009      	b.n	8006558 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006544:	f7fb fc00 	bl	8001d48 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b02      	cmp	r3, #2
 8006550:	d902      	bls.n	8006558 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	73fb      	strb	r3, [r7, #15]
        break;
 8006556:	e005      	b.n	8006564 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006558:	4b36      	ldr	r3, [pc, #216]	; (8006634 <RCCEx_PLLSAI1_Config+0x1e0>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1ef      	bne.n	8006544 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d15f      	bne.n	800662a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d110      	bne.n	8006592 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006570:	4b30      	ldr	r3, [pc, #192]	; (8006634 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006578:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6892      	ldr	r2, [r2, #8]
 8006580:	0211      	lsls	r1, r2, #8
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	68d2      	ldr	r2, [r2, #12]
 8006586:	06d2      	lsls	r2, r2, #27
 8006588:	430a      	orrs	r2, r1
 800658a:	492a      	ldr	r1, [pc, #168]	; (8006634 <RCCEx_PLLSAI1_Config+0x1e0>)
 800658c:	4313      	orrs	r3, r2
 800658e:	610b      	str	r3, [r1, #16]
 8006590:	e027      	b.n	80065e2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d112      	bne.n	80065be <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006598:	4b26      	ldr	r3, [pc, #152]	; (8006634 <RCCEx_PLLSAI1_Config+0x1e0>)
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80065a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6892      	ldr	r2, [r2, #8]
 80065a8:	0211      	lsls	r1, r2, #8
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	6912      	ldr	r2, [r2, #16]
 80065ae:	0852      	lsrs	r2, r2, #1
 80065b0:	3a01      	subs	r2, #1
 80065b2:	0552      	lsls	r2, r2, #21
 80065b4:	430a      	orrs	r2, r1
 80065b6:	491f      	ldr	r1, [pc, #124]	; (8006634 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	610b      	str	r3, [r1, #16]
 80065bc:	e011      	b.n	80065e2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065be:	4b1d      	ldr	r3, [pc, #116]	; (8006634 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80065c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	6892      	ldr	r2, [r2, #8]
 80065ce:	0211      	lsls	r1, r2, #8
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	6952      	ldr	r2, [r2, #20]
 80065d4:	0852      	lsrs	r2, r2, #1
 80065d6:	3a01      	subs	r2, #1
 80065d8:	0652      	lsls	r2, r2, #25
 80065da:	430a      	orrs	r2, r1
 80065dc:	4915      	ldr	r1, [pc, #84]	; (8006634 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80065e2:	4b14      	ldr	r3, [pc, #80]	; (8006634 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a13      	ldr	r2, [pc, #76]	; (8006634 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ee:	f7fb fbab 	bl	8001d48 <HAL_GetTick>
 80065f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065f4:	e009      	b.n	800660a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065f6:	f7fb fba7 	bl	8001d48 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	2b02      	cmp	r3, #2
 8006602:	d902      	bls.n	800660a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	73fb      	strb	r3, [r7, #15]
          break;
 8006608:	e005      	b.n	8006616 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800660a:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <RCCEx_PLLSAI1_Config+0x1e0>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d0ef      	beq.n	80065f6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006616:	7bfb      	ldrb	r3, [r7, #15]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d106      	bne.n	800662a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800661c:	4b05      	ldr	r3, [pc, #20]	; (8006634 <RCCEx_PLLSAI1_Config+0x1e0>)
 800661e:	691a      	ldr	r2, [r3, #16]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	4903      	ldr	r1, [pc, #12]	; (8006634 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006626:	4313      	orrs	r3, r2
 8006628:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800662a:	7bfb      	ldrb	r3, [r7, #15]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	40021000 	.word	0x40021000

08006638 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e095      	b.n	8006776 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	2b00      	cmp	r3, #0
 8006650:	d108      	bne.n	8006664 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800665a:	d009      	beq.n	8006670 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	61da      	str	r2, [r3, #28]
 8006662:	e005      	b.n	8006670 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d106      	bne.n	8006690 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7fb f94e 	bl	800192c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066b0:	d902      	bls.n	80066b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80066b2:	2300      	movs	r3, #0
 80066b4:	60fb      	str	r3, [r7, #12]
 80066b6:	e002      	b.n	80066be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80066b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80066c6:	d007      	beq.n	80066d8 <HAL_SPI_Init+0xa0>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066d0:	d002      	beq.n	80066d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80066e8:	431a      	orrs	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	431a      	orrs	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	f003 0301 	and.w	r3, r3, #1
 80066fc:	431a      	orrs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006706:	431a      	orrs	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006710:	431a      	orrs	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800671a:	ea42 0103 	orr.w	r1, r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006722:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	0c1b      	lsrs	r3, r3, #16
 8006734:	f003 0204 	and.w	r2, r3, #4
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673c:	f003 0310 	and.w	r3, r3, #16
 8006740:	431a      	orrs	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006746:	f003 0308 	and.w	r3, r3, #8
 800674a:	431a      	orrs	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006754:	ea42 0103 	orr.w	r1, r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b088      	sub	sp, #32
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	603b      	str	r3, [r7, #0]
 800678a:	4613      	mov	r3, r2
 800678c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006798:	2b01      	cmp	r3, #1
 800679a:	d101      	bne.n	80067a0 <HAL_SPI_Transmit+0x22>
 800679c:	2302      	movs	r3, #2
 800679e:	e158      	b.n	8006a52 <HAL_SPI_Transmit+0x2d4>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067a8:	f7fb face 	bl	8001d48 <HAL_GetTick>
 80067ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80067ae:	88fb      	ldrh	r3, [r7, #6]
 80067b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d002      	beq.n	80067c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80067be:	2302      	movs	r3, #2
 80067c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067c2:	e13d      	b.n	8006a40 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <HAL_SPI_Transmit+0x52>
 80067ca:	88fb      	ldrh	r3, [r7, #6]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d102      	bne.n	80067d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067d4:	e134      	b.n	8006a40 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2203      	movs	r2, #3
 80067da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	88fa      	ldrh	r2, [r7, #6]
 80067ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	88fa      	ldrh	r2, [r7, #6]
 80067f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006820:	d10f      	bne.n	8006842 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006830:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006840:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684c:	2b40      	cmp	r3, #64	; 0x40
 800684e:	d007      	beq.n	8006860 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800685e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006868:	d94b      	bls.n	8006902 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <HAL_SPI_Transmit+0xfa>
 8006872:	8afb      	ldrh	r3, [r7, #22]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d13e      	bne.n	80068f6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687c:	881a      	ldrh	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006888:	1c9a      	adds	r2, r3, #2
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006892:	b29b      	uxth	r3, r3
 8006894:	3b01      	subs	r3, #1
 8006896:	b29a      	uxth	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800689c:	e02b      	b.n	80068f6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f003 0302 	and.w	r3, r3, #2
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d112      	bne.n	80068d2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b0:	881a      	ldrh	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068bc:	1c9a      	adds	r2, r3, #2
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	3b01      	subs	r3, #1
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068d0:	e011      	b.n	80068f6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068d2:	f7fb fa39 	bl	8001d48 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d803      	bhi.n	80068ea <HAL_SPI_Transmit+0x16c>
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e8:	d102      	bne.n	80068f0 <HAL_SPI_Transmit+0x172>
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d102      	bne.n	80068f6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80068f4:	e0a4      	b.n	8006a40 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1ce      	bne.n	800689e <HAL_SPI_Transmit+0x120>
 8006900:	e07c      	b.n	80069fc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d002      	beq.n	8006910 <HAL_SPI_Transmit+0x192>
 800690a:	8afb      	ldrh	r3, [r7, #22]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d170      	bne.n	80069f2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006914:	b29b      	uxth	r3, r3
 8006916:	2b01      	cmp	r3, #1
 8006918:	d912      	bls.n	8006940 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691e:	881a      	ldrh	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692a:	1c9a      	adds	r2, r3, #2
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006934:	b29b      	uxth	r3, r3
 8006936:	3b02      	subs	r3, #2
 8006938:	b29a      	uxth	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800693e:	e058      	b.n	80069f2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	330c      	adds	r3, #12
 800694a:	7812      	ldrb	r2, [r2, #0]
 800694c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006952:	1c5a      	adds	r2, r3, #1
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800695c:	b29b      	uxth	r3, r3
 800695e:	3b01      	subs	r3, #1
 8006960:	b29a      	uxth	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006966:	e044      	b.n	80069f2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f003 0302 	and.w	r3, r3, #2
 8006972:	2b02      	cmp	r3, #2
 8006974:	d12b      	bne.n	80069ce <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800697a:	b29b      	uxth	r3, r3
 800697c:	2b01      	cmp	r3, #1
 800697e:	d912      	bls.n	80069a6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006984:	881a      	ldrh	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006990:	1c9a      	adds	r2, r3, #2
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800699a:	b29b      	uxth	r3, r3
 800699c:	3b02      	subs	r3, #2
 800699e:	b29a      	uxth	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069a4:	e025      	b.n	80069f2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	330c      	adds	r3, #12
 80069b0:	7812      	ldrb	r2, [r2, #0]
 80069b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	3b01      	subs	r3, #1
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069cc:	e011      	b.n	80069f2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069ce:	f7fb f9bb 	bl	8001d48 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d803      	bhi.n	80069e6 <HAL_SPI_Transmit+0x268>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e4:	d102      	bne.n	80069ec <HAL_SPI_Transmit+0x26e>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d102      	bne.n	80069f2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80069f0:	e026      	b.n	8006a40 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1b5      	bne.n	8006968 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	6839      	ldr	r1, [r7, #0]
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 fb5b 	bl	80070bc <SPI_EndRxTxTransaction>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2220      	movs	r2, #32
 8006a10:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10a      	bne.n	8006a30 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	613b      	str	r3, [r7, #16]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	613b      	str	r3, [r7, #16]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	613b      	str	r3, [r7, #16]
 8006a2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	77fb      	strb	r3, [r7, #31]
 8006a3c:	e000      	b.n	8006a40 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006a3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006a50:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3720      	adds	r7, #32
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b08a      	sub	sp, #40	; 0x28
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	60f8      	str	r0, [r7, #12]
 8006a62:	60b9      	str	r1, [r7, #8]
 8006a64:	607a      	str	r2, [r7, #4]
 8006a66:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d101      	bne.n	8006a80 <HAL_SPI_TransmitReceive+0x26>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e1fb      	b.n	8006e78 <HAL_SPI_TransmitReceive+0x41e>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a88:	f7fb f95e 	bl	8001d48 <HAL_GetTick>
 8006a8c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a94:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006a9c:	887b      	ldrh	r3, [r7, #2]
 8006a9e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006aa0:	887b      	ldrh	r3, [r7, #2]
 8006aa2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006aa4:	7efb      	ldrb	r3, [r7, #27]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d00e      	beq.n	8006ac8 <HAL_SPI_TransmitReceive+0x6e>
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ab0:	d106      	bne.n	8006ac0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d102      	bne.n	8006ac0 <HAL_SPI_TransmitReceive+0x66>
 8006aba:	7efb      	ldrb	r3, [r7, #27]
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	d003      	beq.n	8006ac8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006ac6:	e1cd      	b.n	8006e64 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d005      	beq.n	8006ada <HAL_SPI_TransmitReceive+0x80>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <HAL_SPI_TransmitReceive+0x80>
 8006ad4:	887b      	ldrh	r3, [r7, #2]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d103      	bne.n	8006ae2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006ae0:	e1c0      	b.n	8006e64 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	d003      	beq.n	8006af6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2205      	movs	r2, #5
 8006af2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	887a      	ldrh	r2, [r7, #2]
 8006b06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	887a      	ldrh	r2, [r7, #2]
 8006b0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	887a      	ldrh	r2, [r7, #2]
 8006b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	887a      	ldrh	r2, [r7, #2]
 8006b22:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b38:	d802      	bhi.n	8006b40 <HAL_SPI_TransmitReceive+0xe6>
 8006b3a:	8a3b      	ldrh	r3, [r7, #16]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d908      	bls.n	8006b52 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b4e:	605a      	str	r2, [r3, #4]
 8006b50:	e007      	b.n	8006b62 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b60:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6c:	2b40      	cmp	r3, #64	; 0x40
 8006b6e:	d007      	beq.n	8006b80 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b88:	d97c      	bls.n	8006c84 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <HAL_SPI_TransmitReceive+0x13e>
 8006b92:	8a7b      	ldrh	r3, [r7, #18]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d169      	bne.n	8006c6c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9c:	881a      	ldrh	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba8:	1c9a      	adds	r2, r3, #2
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bbc:	e056      	b.n	8006c6c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d11b      	bne.n	8006c04 <HAL_SPI_TransmitReceive+0x1aa>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d016      	beq.n	8006c04 <HAL_SPI_TransmitReceive+0x1aa>
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d113      	bne.n	8006c04 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be0:	881a      	ldrh	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bec:	1c9a      	adds	r2, r3, #2
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d11c      	bne.n	8006c4c <HAL_SPI_TransmitReceive+0x1f2>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d016      	beq.n	8006c4c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68da      	ldr	r2, [r3, #12]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c28:	b292      	uxth	r2, r2
 8006c2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c30:	1c9a      	adds	r2, r3, #2
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c4c:	f7fb f87c 	bl	8001d48 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d807      	bhi.n	8006c6c <HAL_SPI_TransmitReceive+0x212>
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c62:	d003      	beq.n	8006c6c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006c6a:	e0fb      	b.n	8006e64 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1a3      	bne.n	8006bbe <HAL_SPI_TransmitReceive+0x164>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d19d      	bne.n	8006bbe <HAL_SPI_TransmitReceive+0x164>
 8006c82:	e0df      	b.n	8006e44 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <HAL_SPI_TransmitReceive+0x23a>
 8006c8c:	8a7b      	ldrh	r3, [r7, #18]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	f040 80cb 	bne.w	8006e2a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d912      	bls.n	8006cc4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca2:	881a      	ldrh	r2, [r3, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cae:	1c9a      	adds	r2, r3, #2
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	3b02      	subs	r3, #2
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006cc2:	e0b2      	b.n	8006e2a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	330c      	adds	r3, #12
 8006cce:	7812      	ldrb	r2, [r2, #0]
 8006cd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd6:	1c5a      	adds	r2, r3, #1
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cea:	e09e      	b.n	8006e2a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d134      	bne.n	8006d64 <HAL_SPI_TransmitReceive+0x30a>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d02f      	beq.n	8006d64 <HAL_SPI_TransmitReceive+0x30a>
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d12c      	bne.n	8006d64 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d912      	bls.n	8006d3a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d18:	881a      	ldrh	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d24:	1c9a      	adds	r2, r3, #2
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	3b02      	subs	r3, #2
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d38:	e012      	b.n	8006d60 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	330c      	adds	r3, #12
 8006d44:	7812      	ldrb	r2, [r2, #0]
 8006d46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d148      	bne.n	8006e04 <HAL_SPI_TransmitReceive+0x3aa>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d042      	beq.n	8006e04 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d923      	bls.n	8006dd2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68da      	ldr	r2, [r3, #12]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d94:	b292      	uxth	r2, r2
 8006d96:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9c:	1c9a      	adds	r2, r3, #2
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	3b02      	subs	r3, #2
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d81f      	bhi.n	8006e00 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006dce:	605a      	str	r2, [r3, #4]
 8006dd0:	e016      	b.n	8006e00 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f103 020c 	add.w	r2, r3, #12
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	7812      	ldrb	r2, [r2, #0]
 8006de0:	b2d2      	uxtb	r2, r2
 8006de2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	3b01      	subs	r3, #1
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e00:	2301      	movs	r3, #1
 8006e02:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e04:	f7fa ffa0 	bl	8001d48 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d803      	bhi.n	8006e1c <HAL_SPI_TransmitReceive+0x3c2>
 8006e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1a:	d102      	bne.n	8006e22 <HAL_SPI_TransmitReceive+0x3c8>
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d103      	bne.n	8006e2a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006e28:	e01c      	b.n	8006e64 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f47f af5b 	bne.w	8006cec <HAL_SPI_TransmitReceive+0x292>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f47f af54 	bne.w	8006cec <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e44:	69fa      	ldr	r2, [r7, #28]
 8006e46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f000 f937 	bl	80070bc <SPI_EndRxTxTransaction>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d006      	beq.n	8006e62 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	661a      	str	r2, [r3, #96]	; 0x60
 8006e60:	e000      	b.n	8006e64 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006e62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3728      	adds	r7, #40	; 0x28
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b088      	sub	sp, #32
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	603b      	str	r3, [r7, #0]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e90:	f7fa ff5a 	bl	8001d48 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e98:	1a9b      	subs	r3, r3, r2
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ea0:	f7fa ff52 	bl	8001d48 <HAL_GetTick>
 8006ea4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ea6:	4b39      	ldr	r3, [pc, #228]	; (8006f8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	015b      	lsls	r3, r3, #5
 8006eac:	0d1b      	lsrs	r3, r3, #20
 8006eae:	69fa      	ldr	r2, [r7, #28]
 8006eb0:	fb02 f303 	mul.w	r3, r2, r3
 8006eb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eb6:	e054      	b.n	8006f62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebe:	d050      	beq.n	8006f62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ec0:	f7fa ff42 	bl	8001d48 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	69fa      	ldr	r2, [r7, #28]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d902      	bls.n	8006ed6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d13d      	bne.n	8006f52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ee4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eee:	d111      	bne.n	8006f14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ef8:	d004      	beq.n	8006f04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f02:	d107      	bne.n	8006f14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f1c:	d10f      	bne.n	8006f3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e017      	b.n	8006f82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	bf0c      	ite	eq
 8006f72:	2301      	moveq	r3, #1
 8006f74:	2300      	movne	r3, #0
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	461a      	mov	r2, r3
 8006f7a:	79fb      	ldrb	r3, [r7, #7]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d19b      	bne.n	8006eb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3720      	adds	r7, #32
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	20000000 	.word	0x20000000

08006f90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b08a      	sub	sp, #40	; 0x28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006fa2:	f7fa fed1 	bl	8001d48 <HAL_GetTick>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006faa:	1a9b      	subs	r3, r3, r2
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	4413      	add	r3, r2
 8006fb0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006fb2:	f7fa fec9 	bl	8001d48 <HAL_GetTick>
 8006fb6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	330c      	adds	r3, #12
 8006fbe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006fc0:	4b3d      	ldr	r3, [pc, #244]	; (80070b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	00da      	lsls	r2, r3, #3
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	0d1b      	lsrs	r3, r3, #20
 8006fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fd2:	fb02 f303 	mul.w	r3, r2, r3
 8006fd6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006fd8:	e060      	b.n	800709c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006fe0:	d107      	bne.n	8006ff2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d104      	bne.n	8006ff2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006ff0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff8:	d050      	beq.n	800709c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ffa:	f7fa fea5 	bl	8001d48 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007006:	429a      	cmp	r2, r3
 8007008:	d902      	bls.n	8007010 <SPI_WaitFifoStateUntilTimeout+0x80>
 800700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700c:	2b00      	cmp	r3, #0
 800700e:	d13d      	bne.n	800708c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685a      	ldr	r2, [r3, #4]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800701e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007028:	d111      	bne.n	800704e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007032:	d004      	beq.n	800703e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800703c:	d107      	bne.n	800704e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800704c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007056:	d10f      	bne.n	8007078 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007076:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e010      	b.n	80070ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007092:	2300      	movs	r3, #0
 8007094:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	3b01      	subs	r3, #1
 800709a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689a      	ldr	r2, [r3, #8]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	4013      	ands	r3, r2
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d196      	bne.n	8006fda <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3728      	adds	r7, #40	; 0x28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	20000000 	.word	0x20000000

080070bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af02      	add	r7, sp, #8
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f7ff ff5b 	bl	8006f90 <SPI_WaitFifoStateUntilTimeout>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d007      	beq.n	80070f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070e4:	f043 0220 	orr.w	r2, r3, #32
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e027      	b.n	8007140 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2200      	movs	r2, #0
 80070f8:	2180      	movs	r1, #128	; 0x80
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f7ff fec0 	bl	8006e80 <SPI_WaitFlagStateUntilTimeout>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d007      	beq.n	8007116 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800710a:	f043 0220 	orr.w	r2, r3, #32
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e014      	b.n	8007140 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2200      	movs	r2, #0
 800711e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f7ff ff34 	bl	8006f90 <SPI_WaitFifoStateUntilTimeout>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d007      	beq.n	800713e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007132:	f043 0220 	orr.w	r2, r3, #32
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e000      	b.n	8007140 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d101      	bne.n	800715a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e049      	b.n	80071ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d106      	bne.n	8007174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7fa fd1e 	bl	8001bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	3304      	adds	r3, #4
 8007184:	4619      	mov	r1, r3
 8007186:	4610      	mov	r0, r2
 8007188:	f000 f9c8 	bl	800751c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
	...

080071f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b01      	cmp	r3, #1
 800720a:	d001      	beq.n	8007210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e03b      	b.n	8007288 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2202      	movs	r2, #2
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68da      	ldr	r2, [r3, #12]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f042 0201 	orr.w	r2, r2, #1
 8007226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a19      	ldr	r2, [pc, #100]	; (8007294 <HAL_TIM_Base_Start_IT+0x9c>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d009      	beq.n	8007246 <HAL_TIM_Base_Start_IT+0x4e>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800723a:	d004      	beq.n	8007246 <HAL_TIM_Base_Start_IT+0x4e>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a15      	ldr	r2, [pc, #84]	; (8007298 <HAL_TIM_Base_Start_IT+0xa0>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d115      	bne.n	8007272 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	689a      	ldr	r2, [r3, #8]
 800724c:	4b13      	ldr	r3, [pc, #76]	; (800729c <HAL_TIM_Base_Start_IT+0xa4>)
 800724e:	4013      	ands	r3, r2
 8007250:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b06      	cmp	r3, #6
 8007256:	d015      	beq.n	8007284 <HAL_TIM_Base_Start_IT+0x8c>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800725e:	d011      	beq.n	8007284 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0201 	orr.w	r2, r2, #1
 800726e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007270:	e008      	b.n	8007284 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f042 0201 	orr.w	r2, r2, #1
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	e000      	b.n	8007286 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007284:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	40012c00 	.word	0x40012c00
 8007298:	40014000 	.word	0x40014000
 800729c:	00010007 	.word	0x00010007

080072a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d122      	bne.n	80072fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d11b      	bne.n	80072fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f06f 0202 	mvn.w	r2, #2
 80072cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	f003 0303 	and.w	r3, r3, #3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d003      	beq.n	80072ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f905 	bl	80074f2 <HAL_TIM_IC_CaptureCallback>
 80072e8:	e005      	b.n	80072f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f8f7 	bl	80074de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7fa faaf 	bl	8001854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	f003 0304 	and.w	r3, r3, #4
 8007306:	2b04      	cmp	r3, #4
 8007308:	d122      	bne.n	8007350 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	2b04      	cmp	r3, #4
 8007316:	d11b      	bne.n	8007350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f06f 0204 	mvn.w	r2, #4
 8007320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2202      	movs	r2, #2
 8007326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007332:	2b00      	cmp	r3, #0
 8007334:	d003      	beq.n	800733e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f8db 	bl	80074f2 <HAL_TIM_IC_CaptureCallback>
 800733c:	e005      	b.n	800734a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f8cd 	bl	80074de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7fa fa85 	bl	8001854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	f003 0308 	and.w	r3, r3, #8
 800735a:	2b08      	cmp	r3, #8
 800735c:	d122      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f003 0308 	and.w	r3, r3, #8
 8007368:	2b08      	cmp	r3, #8
 800736a:	d11b      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f06f 0208 	mvn.w	r2, #8
 8007374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2204      	movs	r2, #4
 800737a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	f003 0303 	and.w	r3, r3, #3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f8b1 	bl	80074f2 <HAL_TIM_IC_CaptureCallback>
 8007390:	e005      	b.n	800739e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f8a3 	bl	80074de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f7fa fa5b 	bl	8001854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	f003 0310 	and.w	r3, r3, #16
 80073ae:	2b10      	cmp	r3, #16
 80073b0:	d122      	bne.n	80073f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	f003 0310 	and.w	r3, r3, #16
 80073bc:	2b10      	cmp	r3, #16
 80073be:	d11b      	bne.n	80073f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f06f 0210 	mvn.w	r2, #16
 80073c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2208      	movs	r2, #8
 80073ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d003      	beq.n	80073e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f887 	bl	80074f2 <HAL_TIM_IC_CaptureCallback>
 80073e4:	e005      	b.n	80073f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f879 	bl	80074de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7fa fa31 	bl	8001854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	2b01      	cmp	r3, #1
 8007404:	d10e      	bne.n	8007424 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b01      	cmp	r3, #1
 8007412:	d107      	bne.n	8007424 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f06f 0201 	mvn.w	r2, #1
 800741c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7fa fa04 	bl	800182c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800742e:	2b80      	cmp	r3, #128	; 0x80
 8007430:	d10e      	bne.n	8007450 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800743c:	2b80      	cmp	r3, #128	; 0x80
 800743e:	d107      	bne.n	8007450 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f93a 	bl	80076c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800745a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800745e:	d10e      	bne.n	800747e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800746a:	2b80      	cmp	r3, #128	; 0x80
 800746c:	d107      	bne.n	800747e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f92d 	bl	80076d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007488:	2b40      	cmp	r3, #64	; 0x40
 800748a:	d10e      	bne.n	80074aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007496:	2b40      	cmp	r3, #64	; 0x40
 8007498:	d107      	bne.n	80074aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f82e 	bl	8007506 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	f003 0320 	and.w	r3, r3, #32
 80074b4:	2b20      	cmp	r3, #32
 80074b6:	d10e      	bne.n	80074d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f003 0320 	and.w	r3, r3, #32
 80074c2:	2b20      	cmp	r3, #32
 80074c4:	d107      	bne.n	80074d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f06f 0220 	mvn.w	r2, #32
 80074ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f8ed 	bl	80076b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074d6:	bf00      	nop
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074e6:	bf00      	nop
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b083      	sub	sp, #12
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074fa:	bf00      	nop
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007506:	b480      	push	{r7}
 8007508:	b083      	sub	sp, #12
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800750e:	bf00      	nop
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
	...

0800751c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a2a      	ldr	r2, [pc, #168]	; (80075d8 <TIM_Base_SetConfig+0xbc>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d003      	beq.n	800753c <TIM_Base_SetConfig+0x20>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800753a:	d108      	bne.n	800754e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	4313      	orrs	r3, r2
 800754c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a21      	ldr	r2, [pc, #132]	; (80075d8 <TIM_Base_SetConfig+0xbc>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d00b      	beq.n	800756e <TIM_Base_SetConfig+0x52>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800755c:	d007      	beq.n	800756e <TIM_Base_SetConfig+0x52>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a1e      	ldr	r2, [pc, #120]	; (80075dc <TIM_Base_SetConfig+0xc0>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d003      	beq.n	800756e <TIM_Base_SetConfig+0x52>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a1d      	ldr	r2, [pc, #116]	; (80075e0 <TIM_Base_SetConfig+0xc4>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d108      	bne.n	8007580 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	4313      	orrs	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	4313      	orrs	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	689a      	ldr	r2, [r3, #8]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a0c      	ldr	r2, [pc, #48]	; (80075d8 <TIM_Base_SetConfig+0xbc>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d007      	beq.n	80075bc <TIM_Base_SetConfig+0xa0>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a0b      	ldr	r2, [pc, #44]	; (80075dc <TIM_Base_SetConfig+0xc0>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d003      	beq.n	80075bc <TIM_Base_SetConfig+0xa0>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a0a      	ldr	r2, [pc, #40]	; (80075e0 <TIM_Base_SetConfig+0xc4>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d103      	bne.n	80075c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	691a      	ldr	r2, [r3, #16]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	615a      	str	r2, [r3, #20]
}
 80075ca:	bf00      	nop
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	40012c00 	.word	0x40012c00
 80075dc:	40014000 	.word	0x40014000
 80075e0:	40014400 	.word	0x40014400

080075e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d101      	bne.n	80075fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075f8:	2302      	movs	r3, #2
 80075fa:	e04f      	b.n	800769c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2202      	movs	r2, #2
 8007608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a21      	ldr	r2, [pc, #132]	; (80076a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d108      	bne.n	8007638 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800762c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	4313      	orrs	r3, r2
 8007636:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800763e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	4313      	orrs	r3, r2
 8007648:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a14      	ldr	r2, [pc, #80]	; (80076a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d009      	beq.n	8007670 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007664:	d004      	beq.n	8007670 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a10      	ldr	r2, [pc, #64]	; (80076ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d10c      	bne.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007676:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	4313      	orrs	r3, r2
 8007680:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	40012c00 	.word	0x40012c00
 80076ac:	40014000 	.word	0x40014000

080076b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80076ec:	b084      	sub	sp, #16
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	f107 0014 	add.w	r0, r7, #20
 80076fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	b004      	add	sp, #16
 800770c:	4770      	bx	lr

0800770e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800770e:	b480      	push	{r7}
 8007710:	b085      	sub	sp, #20
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800771e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007722:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	b29a      	uxth	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007744:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007748:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007750:	b29a      	uxth	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	b29b      	uxth	r3, r3
 8007756:	43db      	mvns	r3, r3
 8007758:	b29b      	uxth	r3, r3
 800775a:	4013      	ands	r3, r2
 800775c:	b29a      	uxth	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007772:	b480      	push	{r7}
 8007774:	b083      	sub	sp, #12
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	460b      	mov	r3, r1
 800777c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800778c:	b084      	sub	sp, #16
 800778e:	b480      	push	{r7}
 8007790:	b083      	sub	sp, #12
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	f107 0014 	add.w	r0, r7, #20
 800779a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	b004      	add	sp, #16
 80077cc:	4770      	bx	lr
	...

080077d0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b09d      	sub	sp, #116	; 0x74
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	4413      	add	r3, r2
 80077ea:	881b      	ldrh	r3, [r3, #0]
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80077f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	78db      	ldrb	r3, [r3, #3]
 80077fe:	2b03      	cmp	r3, #3
 8007800:	d81f      	bhi.n	8007842 <USB_ActivateEndpoint+0x72>
 8007802:	a201      	add	r2, pc, #4	; (adr r2, 8007808 <USB_ActivateEndpoint+0x38>)
 8007804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007808:	08007819 	.word	0x08007819
 800780c:	08007835 	.word	0x08007835
 8007810:	0800784b 	.word	0x0800784b
 8007814:	08007827 	.word	0x08007827
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007818:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800781c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007820:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007824:	e012      	b.n	800784c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007826:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800782a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800782e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007832:	e00b      	b.n	800784c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007834:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007838:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800783c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007840:	e004      	b.n	800784c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007848:	e000      	b.n	800784c <USB_ActivateEndpoint+0x7c>
      break;
 800784a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	441a      	add	r2, r3
 8007856:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800785a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800785e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800786a:	b29b      	uxth	r3, r3
 800786c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	b29b      	uxth	r3, r3
 800787c:	b21b      	sxth	r3, r3
 800787e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007886:	b21a      	sxth	r2, r3
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	b21b      	sxth	r3, r3
 800788e:	4313      	orrs	r3, r2
 8007890:	b21b      	sxth	r3, r3
 8007892:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	441a      	add	r2, r3
 80078a0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80078a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	7b1b      	ldrb	r3, [r3, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f040 816e 	bne.w	8007b9e <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	785b      	ldrb	r3, [r3, #1]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 8084 	beq.w	80079d4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	61bb      	str	r3, [r7, #24]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	461a      	mov	r2, r3
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	4413      	add	r3, r2
 80078de:	61bb      	str	r3, [r7, #24]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	00da      	lsls	r2, r3, #3
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078ee:	617b      	str	r3, [r7, #20]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	88db      	ldrh	r3, [r3, #6]
 80078f4:	085b      	lsrs	r3, r3, #1
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	005b      	lsls	r3, r3, #1
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	881b      	ldrh	r3, [r3, #0]
 800790c:	827b      	strh	r3, [r7, #18]
 800790e:	8a7b      	ldrh	r3, [r7, #18]
 8007910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007914:	2b00      	cmp	r3, #0
 8007916:	d01b      	beq.n	8007950 <USB_ActivateEndpoint+0x180>
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	b29b      	uxth	r3, r3
 8007926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800792a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800792e:	823b      	strh	r3, [r7, #16]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	441a      	add	r2, r3
 800793a:	8a3b      	ldrh	r3, [r7, #16]
 800793c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007948:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800794c:	b29b      	uxth	r3, r3
 800794e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	78db      	ldrb	r3, [r3, #3]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d020      	beq.n	800799a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	881b      	ldrh	r3, [r3, #0]
 8007964:	b29b      	uxth	r3, r3
 8007966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800796a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800796e:	81bb      	strh	r3, [r7, #12]
 8007970:	89bb      	ldrh	r3, [r7, #12]
 8007972:	f083 0320 	eor.w	r3, r3, #32
 8007976:	81bb      	strh	r3, [r7, #12]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	441a      	add	r2, r3
 8007982:	89bb      	ldrh	r3, [r7, #12]
 8007984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800798c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007994:	b29b      	uxth	r3, r3
 8007996:	8013      	strh	r3, [r2, #0]
 8007998:	e2cb      	b.n	8007f32 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	881b      	ldrh	r3, [r3, #0]
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079b0:	81fb      	strh	r3, [r7, #14]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	441a      	add	r2, r3
 80079bc:	89fb      	ldrh	r3, [r7, #14]
 80079be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	8013      	strh	r3, [r2, #0]
 80079d2:	e2ae      	b.n	8007f32 <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	633b      	str	r3, [r7, #48]	; 0x30
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079de:	b29b      	uxth	r3, r3
 80079e0:	461a      	mov	r2, r3
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	4413      	add	r3, r2
 80079e6:	633b      	str	r3, [r7, #48]	; 0x30
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	00da      	lsls	r2, r3, #3
 80079ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f0:	4413      	add	r3, r2
 80079f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	88db      	ldrh	r3, [r3, #6]
 80079fc:	085b      	lsrs	r3, r3, #1
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	005b      	lsls	r3, r3, #1
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a06:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	461a      	mov	r2, r3
 8007a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a18:	4413      	add	r3, r2
 8007a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	00da      	lsls	r2, r3, #3
 8007a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a24:	4413      	add	r3, r2
 8007a26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	2b3e      	cmp	r3, #62	; 0x3e
 8007a32:	d918      	bls.n	8007a66 <USB_ActivateEndpoint+0x296>
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	095b      	lsrs	r3, r3, #5
 8007a3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	f003 031f 	and.w	r3, r3, #31
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d102      	bne.n	8007a4e <USB_ActivateEndpoint+0x27e>
 8007a48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	029b      	lsls	r3, r3, #10
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	801a      	strh	r2, [r3, #0]
 8007a64:	e029      	b.n	8007aba <USB_ActivateEndpoint+0x2ea>
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d112      	bne.n	8007a94 <USB_ActivateEndpoint+0x2c4>
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	881b      	ldrh	r3, [r3, #0]
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	801a      	strh	r2, [r3, #0]
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a80:	881b      	ldrh	r3, [r3, #0]
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	801a      	strh	r2, [r3, #0]
 8007a92:	e012      	b.n	8007aba <USB_ActivateEndpoint+0x2ea>
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	085b      	lsrs	r3, r3, #1
 8007a9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	f003 0301 	and.w	r3, r3, #1
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d002      	beq.n	8007aae <USB_ActivateEndpoint+0x2de>
 8007aa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007aaa:	3301      	adds	r3, #1
 8007aac:	66bb      	str	r3, [r7, #104]	; 0x68
 8007aae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	029b      	lsls	r3, r3, #10
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	881b      	ldrh	r3, [r3, #0]
 8007ac6:	847b      	strh	r3, [r7, #34]	; 0x22
 8007ac8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d01b      	beq.n	8007b0a <USB_ActivateEndpoint+0x33a>
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ae8:	843b      	strh	r3, [r7, #32]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	441a      	add	r2, r3
 8007af4:	8c3b      	ldrh	r3, [r7, #32]
 8007af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007afe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d124      	bne.n	8007b5c <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	4413      	add	r3, r2
 8007b1c:	881b      	ldrh	r3, [r3, #0]
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b28:	83bb      	strh	r3, [r7, #28]
 8007b2a:	8bbb      	ldrh	r3, [r7, #28]
 8007b2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b30:	83bb      	strh	r3, [r7, #28]
 8007b32:	8bbb      	ldrh	r3, [r7, #28]
 8007b34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b38:	83bb      	strh	r3, [r7, #28]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	441a      	add	r2, r3
 8007b44:	8bbb      	ldrh	r3, [r7, #28]
 8007b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	8013      	strh	r3, [r2, #0]
 8007b5a:	e1ea      	b.n	8007f32 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b72:	83fb      	strh	r3, [r7, #30]
 8007b74:	8bfb      	ldrh	r3, [r7, #30]
 8007b76:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b7a:	83fb      	strh	r3, [r7, #30]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	441a      	add	r2, r3
 8007b86:	8bfb      	ldrh	r3, [r7, #30]
 8007b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	8013      	strh	r3, [r2, #0]
 8007b9c:	e1c9      	b.n	8007f32 <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	78db      	ldrb	r3, [r3, #3]
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d11e      	bne.n	8007be4 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	881b      	ldrh	r3, [r3, #0]
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bbc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	441a      	add	r2, r3
 8007bca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bd6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	8013      	strh	r3, [r2, #0]
 8007be2:	e01d      	b.n	8007c20 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bfa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	441a      	add	r2, r3
 8007c08:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c30:	4413      	add	r3, r2
 8007c32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	00da      	lsls	r2, r3, #3
 8007c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c42:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	891b      	ldrh	r3, [r3, #8]
 8007c48:	085b      	lsrs	r3, r3, #1
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	005b      	lsls	r3, r3, #1
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c52:	801a      	strh	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	657b      	str	r3, [r7, #84]	; 0x54
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	461a      	mov	r2, r3
 8007c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c64:	4413      	add	r3, r2
 8007c66:	657b      	str	r3, [r7, #84]	; 0x54
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	00da      	lsls	r2, r3, #3
 8007c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c70:	4413      	add	r3, r2
 8007c72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c76:	653b      	str	r3, [r7, #80]	; 0x50
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	895b      	ldrh	r3, [r3, #10]
 8007c7c:	085b      	lsrs	r3, r3, #1
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	005b      	lsls	r3, r3, #1
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c86:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	785b      	ldrb	r3, [r3, #1]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f040 8093 	bne.w	8007db8 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	881b      	ldrh	r3, [r3, #0]
 8007c9e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007ca2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d01b      	beq.n	8007ce6 <USB_ActivateEndpoint+0x516>
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	881b      	ldrh	r3, [r3, #0]
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	441a      	add	r2, r3
 8007cd0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007cf4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d01b      	beq.n	8007d36 <USB_ActivateEndpoint+0x566>
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	881b      	ldrh	r3, [r3, #0]
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d14:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	441a      	add	r2, r3
 8007d20:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	4413      	add	r3, r2
 8007d40:	881b      	ldrh	r3, [r3, #0]
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d4c:	873b      	strh	r3, [r7, #56]	; 0x38
 8007d4e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007d50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d54:	873b      	strh	r3, [r7, #56]	; 0x38
 8007d56:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007d58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d5c:	873b      	strh	r3, [r7, #56]	; 0x38
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	441a      	add	r2, r3
 8007d68:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4413      	add	r3, r2
 8007d88:	881b      	ldrh	r3, [r3, #0]
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d94:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	441a      	add	r2, r3
 8007da0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	8013      	strh	r3, [r2, #0]
 8007db6:	e0bc      	b.n	8007f32 <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	881b      	ldrh	r3, [r3, #0]
 8007dc4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007dc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d01d      	beq.n	8007e10 <USB_ActivateEndpoint+0x640>
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	441a      	add	r2, r3
 8007df8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	881b      	ldrh	r3, [r3, #0]
 8007e1c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007e20:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d01d      	beq.n	8007e68 <USB_ActivateEndpoint+0x698>
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	881b      	ldrh	r3, [r3, #0]
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e42:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	441a      	add	r2, r3
 8007e50:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	78db      	ldrb	r3, [r3, #3]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d024      	beq.n	8007eba <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4413      	add	r3, r2
 8007e7a:	881b      	ldrh	r3, [r3, #0]
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e86:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007e8a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007e8e:	f083 0320 	eor.w	r3, r3, #32
 8007e92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	441a      	add	r2, r3
 8007ea0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	8013      	strh	r3, [r2, #0]
 8007eb8:	e01d      	b.n	8007ef6 <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	881b      	ldrh	r3, [r3, #0]
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ed0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	441a      	add	r2, r3
 8007ede:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007ee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f0c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	441a      	add	r2, r3
 8007f1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007f32:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3774      	adds	r7, #116	; 0x74
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop

08007f44 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b08d      	sub	sp, #52	; 0x34
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	7b1b      	ldrb	r3, [r3, #12]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f040 808e 	bne.w	8008074 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	785b      	ldrb	r3, [r3, #1]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d044      	beq.n	8007fea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	4413      	add	r3, r2
 8007f6a:	881b      	ldrh	r3, [r3, #0]
 8007f6c:	81bb      	strh	r3, [r7, #12]
 8007f6e:	89bb      	ldrh	r3, [r7, #12]
 8007f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d01b      	beq.n	8007fb0 <USB_DeactivateEndpoint+0x6c>
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4413      	add	r3, r2
 8007f82:	881b      	ldrh	r3, [r3, #0]
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f8e:	817b      	strh	r3, [r7, #10]
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	441a      	add	r2, r3
 8007f9a:	897b      	ldrh	r3, [r7, #10]
 8007f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fa8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	881b      	ldrh	r3, [r3, #0]
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fc6:	813b      	strh	r3, [r7, #8]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	441a      	add	r2, r3
 8007fd2:	893b      	ldrh	r3, [r7, #8]
 8007fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	8013      	strh	r3, [r2, #0]
 8007fe8:	e192      	b.n	8008310 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	827b      	strh	r3, [r7, #18]
 8007ff8:	8a7b      	ldrh	r3, [r7, #18]
 8007ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d01b      	beq.n	800803a <USB_DeactivateEndpoint+0xf6>
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	b29b      	uxth	r3, r3
 8008010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008018:	823b      	strh	r3, [r7, #16]
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	441a      	add	r2, r3
 8008024:	8a3b      	ldrh	r3, [r7, #16]
 8008026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800802a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800802e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008036:	b29b      	uxth	r3, r3
 8008038:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4413      	add	r3, r2
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	b29b      	uxth	r3, r3
 8008048:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800804c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008050:	81fb      	strh	r3, [r7, #14]
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	441a      	add	r2, r3
 800805c:	89fb      	ldrh	r3, [r7, #14]
 800805e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800806a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800806e:	b29b      	uxth	r3, r3
 8008070:	8013      	strh	r3, [r2, #0]
 8008072:	e14d      	b.n	8008310 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	785b      	ldrb	r3, [r3, #1]
 8008078:	2b00      	cmp	r3, #0
 800807a:	f040 80a5 	bne.w	80081c8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	881b      	ldrh	r3, [r3, #0]
 800808a:	843b      	strh	r3, [r7, #32]
 800808c:	8c3b      	ldrh	r3, [r7, #32]
 800808e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d01b      	beq.n	80080ce <USB_DeactivateEndpoint+0x18a>
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4413      	add	r3, r2
 80080a0:	881b      	ldrh	r3, [r3, #0]
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ac:	83fb      	strh	r3, [r7, #30]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	441a      	add	r2, r3
 80080b8:	8bfb      	ldrh	r3, [r7, #30]
 80080ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	4413      	add	r3, r2
 80080d8:	881b      	ldrh	r3, [r3, #0]
 80080da:	83bb      	strh	r3, [r7, #28]
 80080dc:	8bbb      	ldrh	r3, [r7, #28]
 80080de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d01b      	beq.n	800811e <USB_DeactivateEndpoint+0x1da>
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4413      	add	r3, r2
 80080f0:	881b      	ldrh	r3, [r3, #0]
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080fc:	837b      	strh	r3, [r7, #26]
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	441a      	add	r2, r3
 8008108:	8b7b      	ldrh	r3, [r7, #26]
 800810a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800810e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008116:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800811a:	b29b      	uxth	r3, r3
 800811c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	b29b      	uxth	r3, r3
 800812c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008134:	833b      	strh	r3, [r7, #24]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	441a      	add	r2, r3
 8008140:	8b3b      	ldrh	r3, [r7, #24]
 8008142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800814a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800814e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008152:	b29b      	uxth	r3, r3
 8008154:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	881b      	ldrh	r3, [r3, #0]
 8008162:	b29b      	uxth	r3, r3
 8008164:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816c:	82fb      	strh	r3, [r7, #22]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	441a      	add	r2, r3
 8008178:	8afb      	ldrh	r3, [r7, #22]
 800817a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800817e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800818a:	b29b      	uxth	r3, r3
 800818c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	b29b      	uxth	r3, r3
 800819c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081a4:	82bb      	strh	r3, [r7, #20]
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	441a      	add	r2, r3
 80081b0:	8abb      	ldrh	r3, [r7, #20]
 80081b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	8013      	strh	r3, [r2, #0]
 80081c6:	e0a3      	b.n	8008310 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4413      	add	r3, r2
 80081d2:	881b      	ldrh	r3, [r3, #0]
 80081d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80081d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80081d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d01b      	beq.n	8008218 <USB_DeactivateEndpoint+0x2d4>
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	881b      	ldrh	r3, [r3, #0]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	441a      	add	r2, r3
 8008202:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800820c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008214:	b29b      	uxth	r3, r3
 8008216:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	881b      	ldrh	r3, [r3, #0]
 8008224:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008226:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800822c:	2b00      	cmp	r3, #0
 800822e:	d01b      	beq.n	8008268 <USB_DeactivateEndpoint+0x324>
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4413      	add	r3, r2
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	b29b      	uxth	r3, r3
 800823e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008246:	853b      	strh	r3, [r7, #40]	; 0x28
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	441a      	add	r2, r3
 8008252:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800825c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008260:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008264:	b29b      	uxth	r3, r3
 8008266:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	881b      	ldrh	r3, [r3, #0]
 8008274:	b29b      	uxth	r3, r3
 8008276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800827a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800827e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	441a      	add	r2, r3
 800828a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800828c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008294:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800829c:	b29b      	uxth	r3, r3
 800829e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	881b      	ldrh	r3, [r3, #0]
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	441a      	add	r2, r3
 80082c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	441a      	add	r2, r3
 80082fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80082fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800830c:	b29b      	uxth	r3, r3
 800830e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3734      	adds	r7, #52	; 0x34
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b0c2      	sub	sp, #264	; 0x108
 8008322:	af00      	add	r7, sp, #0
 8008324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008328:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800832c:	6018      	str	r0, [r3, #0]
 800832e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008336:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800833c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	785b      	ldrb	r3, [r3, #1]
 8008344:	2b01      	cmp	r3, #1
 8008346:	f040 867b 	bne.w	8009040 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800834a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800834e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	699a      	ldr	r2, [r3, #24]
 8008356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800835a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	429a      	cmp	r2, r3
 8008364:	d908      	bls.n	8008378 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800836a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008376:	e007      	b.n	8008388 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800837c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800838c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	7b1b      	ldrb	r3, [r3, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d13a      	bne.n	800840e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800839c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6959      	ldr	r1, [r3, #20]
 80083a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	88da      	ldrh	r2, [r3, #6]
 80083b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80083ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80083be:	6800      	ldr	r0, [r0, #0]
 80083c0:	f001 fc3e 	bl	8009c40 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80083c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	613b      	str	r3, [r7, #16]
 80083d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083de:	b29b      	uxth	r3, r3
 80083e0:	461a      	mov	r2, r3
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	4413      	add	r3, r2
 80083e6:	613b      	str	r3, [r7, #16]
 80083e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	00da      	lsls	r2, r3, #3
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	4413      	add	r3, r2
 80083fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80083fe:	60fb      	str	r3, [r7, #12]
 8008400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008404:	b29a      	uxth	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	801a      	strh	r2, [r3, #0]
 800840a:	f000 bde3 	b.w	8008fd4 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800840e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	78db      	ldrb	r3, [r3, #3]
 800841a:	2b02      	cmp	r3, #2
 800841c:	f040 843a 	bne.w	8008c94 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6a1a      	ldr	r2, [r3, #32]
 800842c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	429a      	cmp	r2, r3
 800843a:	f240 83b7 	bls.w	8008bac <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800843e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008442:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800844c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4413      	add	r3, r2
 8008458:	881b      	ldrh	r3, [r3, #0]
 800845a:	b29b      	uxth	r3, r3
 800845c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008464:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800846c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	441a      	add	r2, r3
 8008482:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800848a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800848e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008496:	b29b      	uxth	r3, r3
 8008498:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800849a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800849e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6a1a      	ldr	r2, [r3, #32]
 80084a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084aa:	1ad2      	subs	r2, r2, r3
 80084ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80084b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4413      	add	r3, r2
 80084d2:	881b      	ldrh	r3, [r3, #0]
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 81b3 	beq.w	8008846 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80084e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	633b      	str	r3, [r7, #48]	; 0x30
 80084ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	785b      	ldrb	r3, [r3, #1]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d16d      	bne.n	80085d8 <USB_EPStartXfer+0x2ba>
 80084fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008500:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	62bb      	str	r3, [r7, #40]	; 0x28
 8008508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800850c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008516:	b29b      	uxth	r3, r3
 8008518:	461a      	mov	r2, r3
 800851a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851c:	4413      	add	r3, r2
 800851e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	00da      	lsls	r2, r3, #3
 800852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008530:	4413      	add	r3, r2
 8008532:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008536:	627b      	str	r3, [r7, #36]	; 0x24
 8008538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800853c:	2b3e      	cmp	r3, #62	; 0x3e
 800853e:	d91c      	bls.n	800857a <USB_EPStartXfer+0x25c>
 8008540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008544:	095b      	lsrs	r3, r3, #5
 8008546:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800854a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800854e:	f003 031f 	and.w	r3, r3, #31
 8008552:	2b00      	cmp	r3, #0
 8008554:	d104      	bne.n	8008560 <USB_EPStartXfer+0x242>
 8008556:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800855a:	3b01      	subs	r3, #1
 800855c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008560:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008564:	b29b      	uxth	r3, r3
 8008566:	029b      	lsls	r3, r3, #10
 8008568:	b29b      	uxth	r3, r3
 800856a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800856e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008572:	b29a      	uxth	r2, r3
 8008574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008576:	801a      	strh	r2, [r3, #0]
 8008578:	e053      	b.n	8008622 <USB_EPStartXfer+0x304>
 800857a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800857e:	2b00      	cmp	r3, #0
 8008580:	d112      	bne.n	80085a8 <USB_EPStartXfer+0x28a>
 8008582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008584:	881b      	ldrh	r3, [r3, #0]
 8008586:	b29b      	uxth	r3, r3
 8008588:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800858c:	b29a      	uxth	r2, r3
 800858e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008590:	801a      	strh	r2, [r3, #0]
 8008592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008594:	881b      	ldrh	r3, [r3, #0]
 8008596:	b29b      	uxth	r3, r3
 8008598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800859c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a4:	801a      	strh	r2, [r3, #0]
 80085a6:	e03c      	b.n	8008622 <USB_EPStartXfer+0x304>
 80085a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085ac:	085b      	lsrs	r3, r3, #1
 80085ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d004      	beq.n	80085c8 <USB_EPStartXfer+0x2aa>
 80085be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085c2:	3301      	adds	r3, #1
 80085c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	029b      	lsls	r3, r3, #10
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	801a      	strh	r2, [r3, #0]
 80085d6:	e024      	b.n	8008622 <USB_EPStartXfer+0x304>
 80085d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	785b      	ldrb	r3, [r3, #1]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d11c      	bne.n	8008622 <USB_EPStartXfer+0x304>
 80085e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	461a      	mov	r2, r3
 80085fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fc:	4413      	add	r3, r2
 80085fe:	633b      	str	r3, [r7, #48]	; 0x30
 8008600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	00da      	lsls	r2, r3, #3
 800860e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008610:	4413      	add	r3, r2
 8008612:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800861c:	b29a      	uxth	r2, r3
 800861e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008620:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	895b      	ldrh	r3, [r3, #10]
 800862e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6959      	ldr	r1, [r3, #20]
 800863e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008642:	b29b      	uxth	r3, r3
 8008644:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008648:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800864c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008650:	6800      	ldr	r0, [r0, #0]
 8008652:	f001 faf5 	bl	8009c40 <USB_WritePMA>
            ep->xfer_buff += len;
 8008656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800865a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	695a      	ldr	r2, [r3, #20]
 8008662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008666:	441a      	add	r2, r3
 8008668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800866c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	6a1a      	ldr	r2, [r3, #32]
 8008680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	429a      	cmp	r2, r3
 800868e:	d90f      	bls.n	80086b0 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8008690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	6a1a      	ldr	r2, [r3, #32]
 800869c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086a0:	1ad2      	subs	r2, r2, r3
 80086a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	621a      	str	r2, [r3, #32]
 80086ae:	e00e      	b.n	80086ce <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80086b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6a1b      	ldr	r3, [r3, #32]
 80086bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80086c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2200      	movs	r2, #0
 80086cc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80086ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	785b      	ldrb	r3, [r3, #1]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d16d      	bne.n	80087ba <USB_EPStartXfer+0x49c>
 80086de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	61bb      	str	r3, [r7, #24]
 80086ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	461a      	mov	r2, r3
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	4413      	add	r3, r2
 8008700:	61bb      	str	r3, [r7, #24]
 8008702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	00da      	lsls	r2, r3, #3
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	4413      	add	r3, r2
 8008714:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008718:	617b      	str	r3, [r7, #20]
 800871a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800871e:	2b3e      	cmp	r3, #62	; 0x3e
 8008720:	d91c      	bls.n	800875c <USB_EPStartXfer+0x43e>
 8008722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008726:	095b      	lsrs	r3, r3, #5
 8008728:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800872c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008730:	f003 031f 	and.w	r3, r3, #31
 8008734:	2b00      	cmp	r3, #0
 8008736:	d104      	bne.n	8008742 <USB_EPStartXfer+0x424>
 8008738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800873c:	3b01      	subs	r3, #1
 800873e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008746:	b29b      	uxth	r3, r3
 8008748:	029b      	lsls	r3, r3, #10
 800874a:	b29b      	uxth	r3, r3
 800874c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008754:	b29a      	uxth	r2, r3
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	801a      	strh	r2, [r3, #0]
 800875a:	e059      	b.n	8008810 <USB_EPStartXfer+0x4f2>
 800875c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008760:	2b00      	cmp	r3, #0
 8008762:	d112      	bne.n	800878a <USB_EPStartXfer+0x46c>
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	881b      	ldrh	r3, [r3, #0]
 8008768:	b29b      	uxth	r3, r3
 800876a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800876e:	b29a      	uxth	r2, r3
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	801a      	strh	r2, [r3, #0]
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	881b      	ldrh	r3, [r3, #0]
 8008778:	b29b      	uxth	r3, r3
 800877a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800877e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008782:	b29a      	uxth	r2, r3
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	801a      	strh	r2, [r3, #0]
 8008788:	e042      	b.n	8008810 <USB_EPStartXfer+0x4f2>
 800878a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800878e:	085b      	lsrs	r3, r3, #1
 8008790:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008798:	f003 0301 	and.w	r3, r3, #1
 800879c:	2b00      	cmp	r3, #0
 800879e:	d004      	beq.n	80087aa <USB_EPStartXfer+0x48c>
 80087a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087a4:	3301      	adds	r3, #1
 80087a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80087aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	029b      	lsls	r3, r3, #10
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	801a      	strh	r2, [r3, #0]
 80087b8:	e02a      	b.n	8008810 <USB_EPStartXfer+0x4f2>
 80087ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	785b      	ldrb	r3, [r3, #1]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d122      	bne.n	8008810 <USB_EPStartXfer+0x4f2>
 80087ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	623b      	str	r3, [r7, #32]
 80087d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	461a      	mov	r2, r3
 80087e8:	6a3b      	ldr	r3, [r7, #32]
 80087ea:	4413      	add	r3, r2
 80087ec:	623b      	str	r3, [r7, #32]
 80087ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	00da      	lsls	r2, r3, #3
 80087fc:	6a3b      	ldr	r3, [r7, #32]
 80087fe:	4413      	add	r3, r2
 8008800:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008804:	61fb      	str	r3, [r7, #28]
 8008806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800880a:	b29a      	uxth	r2, r3
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	891b      	ldrh	r3, [r3, #8]
 800881c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	6959      	ldr	r1, [r3, #20]
 800882c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008830:	b29b      	uxth	r3, r3
 8008832:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008836:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800883a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800883e:	6800      	ldr	r0, [r0, #0]
 8008840:	f001 f9fe 	bl	8009c40 <USB_WritePMA>
 8008844:	e3c6      	b.n	8008fd4 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800884a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	785b      	ldrb	r3, [r3, #1]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d16d      	bne.n	8008932 <USB_EPStartXfer+0x614>
 8008856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800885a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	64bb      	str	r3, [r7, #72]	; 0x48
 8008862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008866:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008870:	b29b      	uxth	r3, r3
 8008872:	461a      	mov	r2, r3
 8008874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008876:	4413      	add	r3, r2
 8008878:	64bb      	str	r3, [r7, #72]	; 0x48
 800887a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800887e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	00da      	lsls	r2, r3, #3
 8008888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800888a:	4413      	add	r3, r2
 800888c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008890:	647b      	str	r3, [r7, #68]	; 0x44
 8008892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008896:	2b3e      	cmp	r3, #62	; 0x3e
 8008898:	d91c      	bls.n	80088d4 <USB_EPStartXfer+0x5b6>
 800889a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800889e:	095b      	lsrs	r3, r3, #5
 80088a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80088a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088a8:	f003 031f 	and.w	r3, r3, #31
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d104      	bne.n	80088ba <USB_EPStartXfer+0x59c>
 80088b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80088b4:	3b01      	subs	r3, #1
 80088b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80088ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80088be:	b29b      	uxth	r3, r3
 80088c0:	029b      	lsls	r3, r3, #10
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088d0:	801a      	strh	r2, [r3, #0]
 80088d2:	e059      	b.n	8008988 <USB_EPStartXfer+0x66a>
 80088d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d112      	bne.n	8008902 <USB_EPStartXfer+0x5e4>
 80088dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088de:	881b      	ldrh	r3, [r3, #0]
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088ea:	801a      	strh	r2, [r3, #0]
 80088ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088ee:	881b      	ldrh	r3, [r3, #0]
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088fe:	801a      	strh	r2, [r3, #0]
 8008900:	e042      	b.n	8008988 <USB_EPStartXfer+0x66a>
 8008902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008906:	085b      	lsrs	r3, r3, #1
 8008908:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800890c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	2b00      	cmp	r3, #0
 8008916:	d004      	beq.n	8008922 <USB_EPStartXfer+0x604>
 8008918:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800891c:	3301      	adds	r3, #1
 800891e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008922:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008926:	b29b      	uxth	r3, r3
 8008928:	029b      	lsls	r3, r3, #10
 800892a:	b29a      	uxth	r2, r3
 800892c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800892e:	801a      	strh	r2, [r3, #0]
 8008930:	e02a      	b.n	8008988 <USB_EPStartXfer+0x66a>
 8008932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	785b      	ldrb	r3, [r3, #1]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d122      	bne.n	8008988 <USB_EPStartXfer+0x66a>
 8008942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	653b      	str	r3, [r7, #80]	; 0x50
 800894e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800895c:	b29b      	uxth	r3, r3
 800895e:	461a      	mov	r2, r3
 8008960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008962:	4413      	add	r3, r2
 8008964:	653b      	str	r3, [r7, #80]	; 0x50
 8008966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800896a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	00da      	lsls	r2, r3, #3
 8008974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008976:	4413      	add	r3, r2
 8008978:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800897c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800897e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008982:	b29a      	uxth	r2, r3
 8008984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008986:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800898c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	891b      	ldrh	r3, [r3, #8]
 8008994:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800899c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	6959      	ldr	r1, [r3, #20]
 80089a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80089ae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80089b2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80089b6:	6800      	ldr	r0, [r0, #0]
 80089b8:	f001 f942 	bl	8009c40 <USB_WritePMA>
            ep->xfer_buff += len;
 80089bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	695a      	ldr	r2, [r3, #20]
 80089c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089cc:	441a      	add	r2, r3
 80089ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80089da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6a1a      	ldr	r2, [r3, #32]
 80089e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d90f      	bls.n	8008a16 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 80089f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6a1a      	ldr	r2, [r3, #32]
 8008a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a06:	1ad2      	subs	r2, r2, r3
 8008a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	621a      	str	r2, [r3, #32]
 8008a14:	e00e      	b.n	8008a34 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8008a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6a1b      	ldr	r3, [r3, #32]
 8008a22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2200      	movs	r2, #0
 8008a32:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	643b      	str	r3, [r7, #64]	; 0x40
 8008a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	785b      	ldrb	r3, [r3, #1]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d16d      	bne.n	8008b2c <USB_EPStartXfer+0x80e>
 8008a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a70:	4413      	add	r3, r2
 8008a72:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	00da      	lsls	r2, r3, #3
 8008a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a84:	4413      	add	r3, r2
 8008a86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8008a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a90:	2b3e      	cmp	r3, #62	; 0x3e
 8008a92:	d91c      	bls.n	8008ace <USB_EPStartXfer+0x7b0>
 8008a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a98:	095b      	lsrs	r3, r3, #5
 8008a9a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aa2:	f003 031f 	and.w	r3, r3, #31
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d104      	bne.n	8008ab4 <USB_EPStartXfer+0x796>
 8008aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	029b      	lsls	r3, r3, #10
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aca:	801a      	strh	r2, [r3, #0]
 8008acc:	e053      	b.n	8008b76 <USB_EPStartXfer+0x858>
 8008ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d112      	bne.n	8008afc <USB_EPStartXfer+0x7de>
 8008ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad8:	881b      	ldrh	r3, [r3, #0]
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae4:	801a      	strh	r2, [r3, #0]
 8008ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae8:	881b      	ldrh	r3, [r3, #0]
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008af0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af8:	801a      	strh	r2, [r3, #0]
 8008afa:	e03c      	b.n	8008b76 <USB_EPStartXfer+0x858>
 8008afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b00:	085b      	lsrs	r3, r3, #1
 8008b02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b0a:	f003 0301 	and.w	r3, r3, #1
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d004      	beq.n	8008b1c <USB_EPStartXfer+0x7fe>
 8008b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b16:	3301      	adds	r3, #1
 8008b18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	029b      	lsls	r3, r3, #10
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b28:	801a      	strh	r2, [r3, #0]
 8008b2a:	e024      	b.n	8008b76 <USB_EPStartXfer+0x858>
 8008b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	785b      	ldrb	r3, [r3, #1]
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d11c      	bne.n	8008b76 <USB_EPStartXfer+0x858>
 8008b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b50:	4413      	add	r3, r2
 8008b52:	643b      	str	r3, [r7, #64]	; 0x40
 8008b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	00da      	lsls	r2, r3, #3
 8008b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b64:	4413      	add	r3, r2
 8008b66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	895b      	ldrh	r3, [r3, #10]
 8008b82:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6959      	ldr	r1, [r3, #20]
 8008b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008b9c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008ba0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008ba4:	6800      	ldr	r0, [r0, #0]
 8008ba6:	f001 f84b 	bl	8009c40 <USB_WritePMA>
 8008baa:	e213      	b.n	8008fd4 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008bac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
 8008bb8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4413      	add	r3, r2
 8008bd6:	881b      	ldrh	r3, [r3, #0]
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008be2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	441a      	add	r2, r3
 8008c00:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	461a      	mov	r2, r3
 8008c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c38:	4413      	add	r3, r2
 8008c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	00da      	lsls	r2, r3, #3
 8008c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008c52:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c5c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	891b      	ldrh	r3, [r3, #8]
 8008c6a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	6959      	ldr	r1, [r3, #20]
 8008c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008c84:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008c88:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008c8c:	6800      	ldr	r0, [r0, #0]
 8008c8e:	f000 ffd7 	bl	8009c40 <USB_WritePMA>
 8008c92:	e19f      	b.n	8008fd4 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	6a1a      	ldr	r2, [r3, #32]
 8008ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ca4:	1ad2      	subs	r2, r2, r3
 8008ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4413      	add	r3, r2
 8008ccc:	881b      	ldrh	r3, [r3, #0]
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f000 80bc 	beq.w	8008e52 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	673b      	str	r3, [r7, #112]	; 0x70
 8008ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	785b      	ldrb	r3, [r3, #1]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d16d      	bne.n	8008dd2 <USB_EPStartXfer+0xab4>
 8008cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	461a      	mov	r2, r3
 8008d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d16:	4413      	add	r3, r2
 8008d18:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	00da      	lsls	r2, r3, #3
 8008d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d2a:	4413      	add	r3, r2
 8008d2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d30:	667b      	str	r3, [r7, #100]	; 0x64
 8008d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d36:	2b3e      	cmp	r3, #62	; 0x3e
 8008d38:	d91c      	bls.n	8008d74 <USB_EPStartXfer+0xa56>
 8008d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d3e:	095b      	lsrs	r3, r3, #5
 8008d40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d48:	f003 031f 	and.w	r3, r3, #31
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d104      	bne.n	8008d5a <USB_EPStartXfer+0xa3c>
 8008d50:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008d54:	3b01      	subs	r3, #1
 8008d56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008d5a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	029b      	lsls	r3, r3, #10
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d70:	801a      	strh	r2, [r3, #0]
 8008d72:	e053      	b.n	8008e1c <USB_EPStartXfer+0xafe>
 8008d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d112      	bne.n	8008da2 <USB_EPStartXfer+0xa84>
 8008d7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d7e:	881b      	ldrh	r3, [r3, #0]
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d8a:	801a      	strh	r2, [r3, #0]
 8008d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d8e:	881b      	ldrh	r3, [r3, #0]
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d9e:	801a      	strh	r2, [r3, #0]
 8008da0:	e03c      	b.n	8008e1c <USB_EPStartXfer+0xafe>
 8008da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008da6:	085b      	lsrs	r3, r3, #1
 8008da8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008db0:	f003 0301 	and.w	r3, r3, #1
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d004      	beq.n	8008dc2 <USB_EPStartXfer+0xaa4>
 8008db8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008dc2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	029b      	lsls	r3, r3, #10
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dce:	801a      	strh	r2, [r3, #0]
 8008dd0:	e024      	b.n	8008e1c <USB_EPStartXfer+0xafe>
 8008dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	785b      	ldrb	r3, [r3, #1]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d11c      	bne.n	8008e1c <USB_EPStartXfer+0xafe>
 8008de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008de6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	461a      	mov	r2, r3
 8008df4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008df6:	4413      	add	r3, r2
 8008df8:	673b      	str	r3, [r7, #112]	; 0x70
 8008dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	00da      	lsls	r2, r3, #3
 8008e08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008e10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e1a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	895b      	ldrh	r3, [r3, #10]
 8008e28:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	6959      	ldr	r1, [r3, #20]
 8008e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008e42:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008e46:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008e4a:	6800      	ldr	r0, [r0, #0]
 8008e4c:	f000 fef8 	bl	8009c40 <USB_WritePMA>
 8008e50:	e0c0      	b.n	8008fd4 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	785b      	ldrb	r3, [r3, #1]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d16d      	bne.n	8008f3e <USB_EPStartXfer+0xc20>
 8008e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	461a      	mov	r2, r3
 8008e80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e82:	4413      	add	r3, r2
 8008e84:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	00da      	lsls	r2, r3, #3
 8008e94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e96:	4413      	add	r3, r2
 8008e98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ea2:	2b3e      	cmp	r3, #62	; 0x3e
 8008ea4:	d91c      	bls.n	8008ee0 <USB_EPStartXfer+0xbc2>
 8008ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eaa:	095b      	lsrs	r3, r3, #5
 8008eac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eb4:	f003 031f 	and.w	r3, r3, #31
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d104      	bne.n	8008ec6 <USB_EPStartXfer+0xba8>
 8008ebc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008ec6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	029b      	lsls	r3, r3, #10
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008edc:	801a      	strh	r2, [r3, #0]
 8008ede:	e05f      	b.n	8008fa0 <USB_EPStartXfer+0xc82>
 8008ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d112      	bne.n	8008f0e <USB_EPStartXfer+0xbf0>
 8008ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008eea:	881b      	ldrh	r3, [r3, #0]
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ef6:	801a      	strh	r2, [r3, #0]
 8008ef8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008efa:	881b      	ldrh	r3, [r3, #0]
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f0a:	801a      	strh	r2, [r3, #0]
 8008f0c:	e048      	b.n	8008fa0 <USB_EPStartXfer+0xc82>
 8008f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f12:	085b      	lsrs	r3, r3, #1
 8008f14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f1c:	f003 0301 	and.w	r3, r3, #1
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d004      	beq.n	8008f2e <USB_EPStartXfer+0xc10>
 8008f24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008f28:	3301      	adds	r3, #1
 8008f2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008f2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	029b      	lsls	r3, r3, #10
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f3a:	801a      	strh	r2, [r3, #0]
 8008f3c:	e030      	b.n	8008fa0 <USB_EPStartXfer+0xc82>
 8008f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	785b      	ldrb	r3, [r3, #1]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d128      	bne.n	8008fa0 <USB_EPStartXfer+0xc82>
 8008f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f72:	4413      	add	r3, r2
 8008f74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	00da      	lsls	r2, r3, #3
 8008f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008f90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f9e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	891b      	ldrh	r3, [r3, #8]
 8008fac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	6959      	ldr	r1, [r3, #20]
 8008fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008fc6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008fca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008fce:	6800      	ldr	r0, [r0, #0]
 8008fd0:	f000 fe36 	bl	8009c40 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	4413      	add	r3, r2
 8008fee:	881b      	ldrh	r3, [r3, #0]
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ffa:	817b      	strh	r3, [r7, #10]
 8008ffc:	897b      	ldrh	r3, [r7, #10]
 8008ffe:	f083 0310 	eor.w	r3, r3, #16
 8009002:	817b      	strh	r3, [r7, #10]
 8009004:	897b      	ldrh	r3, [r7, #10]
 8009006:	f083 0320 	eor.w	r3, r3, #32
 800900a:	817b      	strh	r3, [r7, #10]
 800900c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009010:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800901a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	441a      	add	r2, r3
 8009026:	897b      	ldrh	r3, [r7, #10]
 8009028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800902c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009038:	b29b      	uxth	r3, r3
 800903a:	8013      	strh	r3, [r2, #0]
 800903c:	f000 bc9f 	b.w	800997e <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	7b1b      	ldrb	r3, [r3, #12]
 800904c:	2b00      	cmp	r3, #0
 800904e:	f040 80ae 	bne.w	80091ae <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	699a      	ldr	r2, [r3, #24]
 800905e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	429a      	cmp	r2, r3
 800906c:	d917      	bls.n	800909e <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800906e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800907e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	699a      	ldr	r2, [r3, #24]
 800908a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800908e:	1ad2      	subs	r2, r2, r3
 8009090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	619a      	str	r2, [r3, #24]
 800909c:	e00e      	b.n	80090bc <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800909e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80090ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2200      	movs	r2, #0
 80090ba:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80090bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090d8:	b29b      	uxth	r3, r3
 80090da:	461a      	mov	r2, r3
 80090dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090e0:	4413      	add	r3, r2
 80090e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	00da      	lsls	r2, r3, #3
 80090f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090f8:	4413      	add	r3, r2
 80090fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80090fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009102:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009106:	2b3e      	cmp	r3, #62	; 0x3e
 8009108:	d91d      	bls.n	8009146 <USB_EPStartXfer+0xe28>
 800910a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800910e:	095b      	lsrs	r3, r3, #5
 8009110:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009118:	f003 031f 	and.w	r3, r3, #31
 800911c:	2b00      	cmp	r3, #0
 800911e:	d104      	bne.n	800912a <USB_EPStartXfer+0xe0c>
 8009120:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009124:	3b01      	subs	r3, #1
 8009126:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800912a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800912e:	b29b      	uxth	r3, r3
 8009130:	029b      	lsls	r3, r3, #10
 8009132:	b29b      	uxth	r3, r3
 8009134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800913c:	b29a      	uxth	r2, r3
 800913e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009142:	801a      	strh	r2, [r3, #0]
 8009144:	e3e1      	b.n	800990a <USB_EPStartXfer+0x15ec>
 8009146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800914a:	2b00      	cmp	r3, #0
 800914c:	d116      	bne.n	800917c <USB_EPStartXfer+0xe5e>
 800914e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009152:	881b      	ldrh	r3, [r3, #0]
 8009154:	b29b      	uxth	r3, r3
 8009156:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800915a:	b29a      	uxth	r2, r3
 800915c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009160:	801a      	strh	r2, [r3, #0]
 8009162:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009166:	881b      	ldrh	r3, [r3, #0]
 8009168:	b29b      	uxth	r3, r3
 800916a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800916e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009172:	b29a      	uxth	r2, r3
 8009174:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009178:	801a      	strh	r2, [r3, #0]
 800917a:	e3c6      	b.n	800990a <USB_EPStartXfer+0x15ec>
 800917c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009180:	085b      	lsrs	r3, r3, #1
 8009182:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800918a:	f003 0301 	and.w	r3, r3, #1
 800918e:	2b00      	cmp	r3, #0
 8009190:	d004      	beq.n	800919c <USB_EPStartXfer+0xe7e>
 8009192:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009196:	3301      	adds	r3, #1
 8009198:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800919c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	029b      	lsls	r3, r3, #10
 80091a4:	b29a      	uxth	r2, r3
 80091a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091aa:	801a      	strh	r2, [r3, #0]
 80091ac:	e3ad      	b.n	800990a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80091ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	78db      	ldrb	r3, [r3, #3]
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	f040 8200 	bne.w	80095c0 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80091c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	785b      	ldrb	r3, [r3, #1]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f040 8091 	bne.w	80092f4 <USB_EPStartXfer+0xfd6>
 80091d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80091e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	461a      	mov	r2, r3
 80091f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091f6:	4413      	add	r3, r2
 80091f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80091fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	00da      	lsls	r2, r3, #3
 800920a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800920e:	4413      	add	r3, r2
 8009210:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009214:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800921c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	2b3e      	cmp	r3, #62	; 0x3e
 8009226:	d925      	bls.n	8009274 <USB_EPStartXfer+0xf56>
 8009228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800922c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	095b      	lsrs	r3, r3, #5
 8009236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800923a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800923e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	f003 031f 	and.w	r3, r3, #31
 800924a:	2b00      	cmp	r3, #0
 800924c:	d104      	bne.n	8009258 <USB_EPStartXfer+0xf3a>
 800924e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009252:	3b01      	subs	r3, #1
 8009254:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800925c:	b29b      	uxth	r3, r3
 800925e:	029b      	lsls	r3, r3, #10
 8009260:	b29b      	uxth	r3, r3
 8009262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800926a:	b29a      	uxth	r2, r3
 800926c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009270:	801a      	strh	r2, [r3, #0]
 8009272:	e074      	b.n	800935e <USB_EPStartXfer+0x1040>
 8009274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d116      	bne.n	80092b2 <USB_EPStartXfer+0xf94>
 8009284:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009288:	881b      	ldrh	r3, [r3, #0]
 800928a:	b29b      	uxth	r3, r3
 800928c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009290:	b29a      	uxth	r2, r3
 8009292:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009296:	801a      	strh	r2, [r3, #0]
 8009298:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800929c:	881b      	ldrh	r3, [r3, #0]
 800929e:	b29b      	uxth	r3, r3
 80092a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80092ae:	801a      	strh	r2, [r3, #0]
 80092b0:	e055      	b.n	800935e <USB_EPStartXfer+0x1040>
 80092b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	085b      	lsrs	r3, r3, #1
 80092c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80092c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	f003 0301 	and.w	r3, r3, #1
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d004      	beq.n	80092e2 <USB_EPStartXfer+0xfc4>
 80092d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092dc:	3301      	adds	r3, #1
 80092de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80092e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	029b      	lsls	r3, r3, #10
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80092f0:	801a      	strh	r2, [r3, #0]
 80092f2:	e034      	b.n	800935e <USB_EPStartXfer+0x1040>
 80092f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	785b      	ldrb	r3, [r3, #1]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d12c      	bne.n	800935e <USB_EPStartXfer+0x1040>
 8009304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009308:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009316:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009320:	b29b      	uxth	r3, r3
 8009322:	461a      	mov	r2, r3
 8009324:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009328:	4413      	add	r3, r2
 800932a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800932e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	00da      	lsls	r2, r3, #3
 800933c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009340:	4413      	add	r3, r2
 8009342:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009346:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800934a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800934e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	b29a      	uxth	r2, r3
 8009358:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800935c:	801a      	strh	r2, [r3, #0]
 800935e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009362:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800936c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	785b      	ldrb	r3, [r3, #1]
 8009378:	2b00      	cmp	r3, #0
 800937a:	f040 8091 	bne.w	80094a0 <USB_EPStartXfer+0x1182>
 800937e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009382:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800938c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009390:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800939a:	b29b      	uxth	r3, r3
 800939c:	461a      	mov	r2, r3
 800939e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80093a2:	4413      	add	r3, r2
 80093a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80093a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	00da      	lsls	r2, r3, #3
 80093b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80093ba:	4413      	add	r3, r2
 80093bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80093c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80093c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	2b3e      	cmp	r3, #62	; 0x3e
 80093d2:	d925      	bls.n	8009420 <USB_EPStartXfer+0x1102>
 80093d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	095b      	lsrs	r3, r3, #5
 80093e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	f003 031f 	and.w	r3, r3, #31
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d104      	bne.n	8009404 <USB_EPStartXfer+0x10e6>
 80093fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093fe:	3b01      	subs	r3, #1
 8009400:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009408:	b29b      	uxth	r3, r3
 800940a:	029b      	lsls	r3, r3, #10
 800940c:	b29b      	uxth	r3, r3
 800940e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009416:	b29a      	uxth	r2, r3
 8009418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800941c:	801a      	strh	r2, [r3, #0]
 800941e:	e06d      	b.n	80094fc <USB_EPStartXfer+0x11de>
 8009420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d116      	bne.n	800945e <USB_EPStartXfer+0x1140>
 8009430:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009434:	881b      	ldrh	r3, [r3, #0]
 8009436:	b29b      	uxth	r3, r3
 8009438:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800943c:	b29a      	uxth	r2, r3
 800943e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009442:	801a      	strh	r2, [r3, #0]
 8009444:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009448:	881b      	ldrh	r3, [r3, #0]
 800944a:	b29b      	uxth	r3, r3
 800944c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009454:	b29a      	uxth	r2, r3
 8009456:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800945a:	801a      	strh	r2, [r3, #0]
 800945c:	e04e      	b.n	80094fc <USB_EPStartXfer+0x11de>
 800945e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	085b      	lsrs	r3, r3, #1
 800946c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	f003 0301 	and.w	r3, r3, #1
 8009480:	2b00      	cmp	r3, #0
 8009482:	d004      	beq.n	800948e <USB_EPStartXfer+0x1170>
 8009484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009488:	3301      	adds	r3, #1
 800948a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800948e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009492:	b29b      	uxth	r3, r3
 8009494:	029b      	lsls	r3, r3, #10
 8009496:	b29a      	uxth	r2, r3
 8009498:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800949c:	801a      	strh	r2, [r3, #0]
 800949e:	e02d      	b.n	80094fc <USB_EPStartXfer+0x11de>
 80094a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	785b      	ldrb	r3, [r3, #1]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d125      	bne.n	80094fc <USB_EPStartXfer+0x11de>
 80094b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094be:	b29b      	uxth	r3, r3
 80094c0:	461a      	mov	r2, r3
 80094c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80094c6:	4413      	add	r3, r2
 80094c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80094cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	00da      	lsls	r2, r3, #3
 80094da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80094de:	4413      	add	r3, r2
 80094e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80094e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80094e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	691b      	ldr	r3, [r3, #16]
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80094fa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80094fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	69db      	ldr	r3, [r3, #28]
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 81fe 	beq.w	800990a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800950e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009512:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800951c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	4413      	add	r3, r2
 8009528:	881b      	ldrh	r3, [r3, #0]
 800952a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800952e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009536:	2b00      	cmp	r3, #0
 8009538:	d005      	beq.n	8009546 <USB_EPStartXfer+0x1228>
 800953a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800953e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10d      	bne.n	8009562 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009546:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800954a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800954e:	2b00      	cmp	r3, #0
 8009550:	f040 81db 	bne.w	800990a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009554:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800955c:	2b00      	cmp	r3, #0
 800955e:	f040 81d4 	bne.w	800990a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009566:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	4413      	add	r3, r2
 800957c:	881b      	ldrh	r3, [r3, #0]
 800957e:	b29b      	uxth	r3, r3
 8009580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009588:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800958c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009590:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800959a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	441a      	add	r2, r3
 80095a6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80095aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	8013      	strh	r3, [r2, #0]
 80095be:	e1a4      	b.n	800990a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80095c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	78db      	ldrb	r3, [r3, #3]
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	f040 819a 	bne.w	8009906 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80095d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	699a      	ldr	r2, [r3, #24]
 80095de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d917      	bls.n	800961e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 80095ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80095fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	699a      	ldr	r2, [r3, #24]
 800960a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800960e:	1ad2      	subs	r2, r2, r3
 8009610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	619a      	str	r2, [r3, #24]
 800961c:	e00e      	b.n	800963c <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800961e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	699b      	ldr	r3, [r3, #24]
 800962a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800962e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2200      	movs	r2, #0
 800963a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800963c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	785b      	ldrb	r3, [r3, #1]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d178      	bne.n	800973e <USB_EPStartXfer+0x1420>
 800964c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800965a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800965e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009668:	b29b      	uxth	r3, r3
 800966a:	461a      	mov	r2, r3
 800966c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009670:	4413      	add	r3, r2
 8009672:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800967a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	00da      	lsls	r2, r3, #3
 8009684:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009688:	4413      	add	r3, r2
 800968a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800968e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009696:	2b3e      	cmp	r3, #62	; 0x3e
 8009698:	d91d      	bls.n	80096d6 <USB_EPStartXfer+0x13b8>
 800969a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800969e:	095b      	lsrs	r3, r3, #5
 80096a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80096a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096a8:	f003 031f 	and.w	r3, r3, #31
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d104      	bne.n	80096ba <USB_EPStartXfer+0x139c>
 80096b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096b4:	3b01      	subs	r3, #1
 80096b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80096ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096be:	b29b      	uxth	r3, r3
 80096c0:	029b      	lsls	r3, r3, #10
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096d2:	801a      	strh	r2, [r3, #0]
 80096d4:	e064      	b.n	80097a0 <USB_EPStartXfer+0x1482>
 80096d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d116      	bne.n	800970c <USB_EPStartXfer+0x13ee>
 80096de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096e2:	881b      	ldrh	r3, [r3, #0]
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096f0:	801a      	strh	r2, [r3, #0]
 80096f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096f6:	881b      	ldrh	r3, [r3, #0]
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009702:	b29a      	uxth	r2, r3
 8009704:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009708:	801a      	strh	r2, [r3, #0]
 800970a:	e049      	b.n	80097a0 <USB_EPStartXfer+0x1482>
 800970c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009710:	085b      	lsrs	r3, r3, #1
 8009712:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800971a:	f003 0301 	and.w	r3, r3, #1
 800971e:	2b00      	cmp	r3, #0
 8009720:	d004      	beq.n	800972c <USB_EPStartXfer+0x140e>
 8009722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009726:	3301      	adds	r3, #1
 8009728:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800972c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009730:	b29b      	uxth	r3, r3
 8009732:	029b      	lsls	r3, r3, #10
 8009734:	b29a      	uxth	r2, r3
 8009736:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800973a:	801a      	strh	r2, [r3, #0]
 800973c:	e030      	b.n	80097a0 <USB_EPStartXfer+0x1482>
 800973e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	785b      	ldrb	r3, [r3, #1]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d128      	bne.n	80097a0 <USB_EPStartXfer+0x1482>
 800974e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009752:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800975c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009760:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800976a:	b29b      	uxth	r3, r3
 800976c:	461a      	mov	r2, r3
 800976e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009772:	4413      	add	r3, r2
 8009774:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800977c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	00da      	lsls	r2, r3, #3
 8009786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800978a:	4413      	add	r3, r2
 800978c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009790:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009798:	b29a      	uxth	r2, r3
 800979a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800979e:	801a      	strh	r2, [r3, #0]
 80097a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	785b      	ldrb	r3, [r3, #1]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d178      	bne.n	80098b0 <USB_EPStartXfer+0x1592>
 80097be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80097cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097da:	b29b      	uxth	r3, r3
 80097dc:	461a      	mov	r2, r3
 80097de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80097e2:	4413      	add	r3, r2
 80097e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80097e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	00da      	lsls	r2, r3, #3
 80097f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80097fa:	4413      	add	r3, r2
 80097fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009800:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009808:	2b3e      	cmp	r3, #62	; 0x3e
 800980a:	d91d      	bls.n	8009848 <USB_EPStartXfer+0x152a>
 800980c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009810:	095b      	lsrs	r3, r3, #5
 8009812:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800981a:	f003 031f 	and.w	r3, r3, #31
 800981e:	2b00      	cmp	r3, #0
 8009820:	d104      	bne.n	800982c <USB_EPStartXfer+0x150e>
 8009822:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009826:	3b01      	subs	r3, #1
 8009828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800982c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009830:	b29b      	uxth	r3, r3
 8009832:	029b      	lsls	r3, r3, #10
 8009834:	b29b      	uxth	r3, r3
 8009836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800983a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800983e:	b29a      	uxth	r2, r3
 8009840:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009844:	801a      	strh	r2, [r3, #0]
 8009846:	e060      	b.n	800990a <USB_EPStartXfer+0x15ec>
 8009848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800984c:	2b00      	cmp	r3, #0
 800984e:	d116      	bne.n	800987e <USB_EPStartXfer+0x1560>
 8009850:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009854:	881b      	ldrh	r3, [r3, #0]
 8009856:	b29b      	uxth	r3, r3
 8009858:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800985c:	b29a      	uxth	r2, r3
 800985e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009862:	801a      	strh	r2, [r3, #0]
 8009864:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009868:	881b      	ldrh	r3, [r3, #0]
 800986a:	b29b      	uxth	r3, r3
 800986c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009874:	b29a      	uxth	r2, r3
 8009876:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800987a:	801a      	strh	r2, [r3, #0]
 800987c:	e045      	b.n	800990a <USB_EPStartXfer+0x15ec>
 800987e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009882:	085b      	lsrs	r3, r3, #1
 8009884:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800988c:	f003 0301 	and.w	r3, r3, #1
 8009890:	2b00      	cmp	r3, #0
 8009892:	d004      	beq.n	800989e <USB_EPStartXfer+0x1580>
 8009894:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009898:	3301      	adds	r3, #1
 800989a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800989e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	029b      	lsls	r3, r3, #10
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80098ac:	801a      	strh	r2, [r3, #0]
 80098ae:	e02c      	b.n	800990a <USB_EPStartXfer+0x15ec>
 80098b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	785b      	ldrb	r3, [r3, #1]
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d124      	bne.n	800990a <USB_EPStartXfer+0x15ec>
 80098c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	461a      	mov	r2, r3
 80098d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80098d6:	4413      	add	r3, r2
 80098d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80098dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	00da      	lsls	r2, r3, #3
 80098ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80098ee:	4413      	add	r3, r2
 80098f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80098f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80098f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009902:	801a      	strh	r2, [r3, #0]
 8009904:	e001      	b.n	800990a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	e03a      	b.n	8009980 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800990a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800990e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	4413      	add	r3, r2
 8009924:	881b      	ldrh	r3, [r3, #0]
 8009926:	b29b      	uxth	r3, r3
 8009928:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800992c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009930:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009934:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009938:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800993c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009940:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009944:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009948:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800994c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009950:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800995a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	441a      	add	r2, r3
 8009966:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800996a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800996e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800997a:	b29b      	uxth	r3, r3
 800997c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800998a:	b480      	push	{r7}
 800998c:	b085      	sub	sp, #20
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	785b      	ldrb	r3, [r3, #1]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d020      	beq.n	80099de <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	4413      	add	r3, r2
 80099a6:	881b      	ldrh	r3, [r3, #0]
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099b2:	81bb      	strh	r3, [r7, #12]
 80099b4:	89bb      	ldrh	r3, [r7, #12]
 80099b6:	f083 0310 	eor.w	r3, r3, #16
 80099ba:	81bb      	strh	r3, [r7, #12]
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	441a      	add	r2, r3
 80099c6:	89bb      	ldrh	r3, [r7, #12]
 80099c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099d8:	b29b      	uxth	r3, r3
 80099da:	8013      	strh	r3, [r2, #0]
 80099dc:	e01f      	b.n	8009a1e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	881b      	ldrh	r3, [r3, #0]
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099f4:	81fb      	strh	r3, [r7, #14]
 80099f6:	89fb      	ldrh	r3, [r7, #14]
 80099f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80099fc:	81fb      	strh	r3, [r7, #14]
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	441a      	add	r2, r3
 8009a08:	89fb      	ldrh	r3, [r7, #14]
 8009a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3714      	adds	r7, #20
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b087      	sub	sp, #28
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	7b1b      	ldrb	r3, [r3, #12]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f040 809d 	bne.w	8009b7a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	785b      	ldrb	r3, [r3, #1]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d04c      	beq.n	8009ae2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	4413      	add	r3, r2
 8009a52:	881b      	ldrh	r3, [r3, #0]
 8009a54:	823b      	strh	r3, [r7, #16]
 8009a56:	8a3b      	ldrh	r3, [r7, #16]
 8009a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d01b      	beq.n	8009a98 <USB_EPClearStall+0x6c>
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	4413      	add	r3, r2
 8009a6a:	881b      	ldrh	r3, [r3, #0]
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a76:	81fb      	strh	r3, [r7, #14]
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	441a      	add	r2, r3
 8009a82:	89fb      	ldrh	r3, [r7, #14]
 8009a84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	78db      	ldrb	r3, [r3, #3]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d06c      	beq.n	8009b7a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	4413      	add	r3, r2
 8009aaa:	881b      	ldrh	r3, [r3, #0]
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ab6:	81bb      	strh	r3, [r7, #12]
 8009ab8:	89bb      	ldrh	r3, [r7, #12]
 8009aba:	f083 0320 	eor.w	r3, r3, #32
 8009abe:	81bb      	strh	r3, [r7, #12]
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	441a      	add	r2, r3
 8009aca:	89bb      	ldrh	r3, [r7, #12]
 8009acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	8013      	strh	r3, [r2, #0]
 8009ae0:	e04b      	b.n	8009b7a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	82fb      	strh	r3, [r7, #22]
 8009af0:	8afb      	ldrh	r3, [r7, #22]
 8009af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d01b      	beq.n	8009b32 <USB_EPClearStall+0x106>
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	4413      	add	r3, r2
 8009b04:	881b      	ldrh	r3, [r3, #0]
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b10:	82bb      	strh	r3, [r7, #20]
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	441a      	add	r2, r3
 8009b1c:	8abb      	ldrh	r3, [r7, #20]
 8009b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	4413      	add	r3, r2
 8009b3c:	881b      	ldrh	r3, [r3, #0]
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b48:	827b      	strh	r3, [r7, #18]
 8009b4a:	8a7b      	ldrh	r3, [r7, #18]
 8009b4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009b50:	827b      	strh	r3, [r7, #18]
 8009b52:	8a7b      	ldrh	r3, [r7, #18]
 8009b54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009b58:	827b      	strh	r3, [r7, #18]
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	441a      	add	r2, r3
 8009b64:	8a7b      	ldrh	r3, [r7, #18]
 8009b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	371c      	adds	r7, #28
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	460b      	mov	r3, r1
 8009b92:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009b94:	78fb      	ldrb	r3, [r7, #3]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d103      	bne.n	8009ba2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2280      	movs	r2, #128	; 0x80
 8009b9e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bc8:	b29a      	uxth	r2, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	370c      	adds	r7, #12
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr

08009bde <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009bde:	b480      	push	{r7}
 8009be0:	b083      	sub	sp, #12
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009bf2:	b29a      	uxth	r2, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3714      	adds	r7, #20
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b08b      	sub	sp, #44	; 0x2c
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	4611      	mov	r1, r2
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	460b      	mov	r3, r1
 8009c50:	80fb      	strh	r3, [r7, #6]
 8009c52:	4613      	mov	r3, r2
 8009c54:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009c56:	88bb      	ldrh	r3, [r7, #4]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	085b      	lsrs	r3, r3, #1
 8009c5c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009c66:	88fa      	ldrh	r2, [r7, #6]
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c70:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	627b      	str	r3, [r7, #36]	; 0x24
 8009c76:	e01b      	b.n	8009cb0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	3301      	adds	r3, #1
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	021b      	lsls	r3, r3, #8
 8009c86:	b21a      	sxth	r2, r3
 8009c88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	b21b      	sxth	r3, r3
 8009c90:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009c92:	6a3b      	ldr	r3, [r7, #32]
 8009c94:	8a7a      	ldrh	r2, [r7, #18]
 8009c96:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009c98:	6a3b      	ldr	r3, [r7, #32]
 8009c9a:	3302      	adds	r3, #2
 8009c9c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cac:	3b01      	subs	r3, #1
 8009cae:	627b      	str	r3, [r7, #36]	; 0x24
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1e0      	bne.n	8009c78 <USB_WritePMA+0x38>
  }
}
 8009cb6:	bf00      	nop
 8009cb8:	bf00      	nop
 8009cba:	372c      	adds	r7, #44	; 0x2c
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b08b      	sub	sp, #44	; 0x2c
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	4611      	mov	r1, r2
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	80fb      	strh	r3, [r7, #6]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009cda:	88bb      	ldrh	r3, [r7, #4]
 8009cdc:	085b      	lsrs	r3, r3, #1
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009cea:	88fa      	ldrh	r2, [r7, #6]
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	4413      	add	r3, r2
 8009cf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cf4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8009cfa:	e018      	b.n	8009d2e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009cfc:	6a3b      	ldr	r3, [r7, #32]
 8009cfe:	881b      	ldrh	r3, [r3, #0]
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009d04:	6a3b      	ldr	r3, [r7, #32]
 8009d06:	3302      	adds	r3, #2
 8009d08:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	b2da      	uxtb	r2, r3
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	3301      	adds	r3, #1
 8009d16:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	0a1b      	lsrs	r3, r3, #8
 8009d1c:	b2da      	uxtb	r2, r3
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	3301      	adds	r3, #1
 8009d26:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1e3      	bne.n	8009cfc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009d34:	88bb      	ldrh	r3, [r7, #4]
 8009d36:	f003 0301 	and.w	r3, r3, #1
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d007      	beq.n	8009d50 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009d40:	6a3b      	ldr	r3, [r7, #32]
 8009d42:	881b      	ldrh	r3, [r3, #0]
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	b2da      	uxtb	r2, r3
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	701a      	strb	r2, [r3, #0]
  }
}
 8009d50:	bf00      	nop
 8009d52:	372c      	adds	r7, #44	; 0x2c
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	460b      	mov	r3, r1
 8009d66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009d68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009d6c:	f002 f976 	bl	800c05c <USBD_static_malloc>
 8009d70:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d105      	bne.n	8009d84 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009d80:	2302      	movs	r3, #2
 8009d82:	e066      	b.n	8009e52 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	7c1b      	ldrb	r3, [r3, #16]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d119      	bne.n	8009dc8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d98:	2202      	movs	r2, #2
 8009d9a:	2181      	movs	r1, #129	; 0x81
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f001 ff5f 	bl	800bc60 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2201      	movs	r2, #1
 8009da6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dac:	2202      	movs	r2, #2
 8009dae:	2101      	movs	r1, #1
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f001 ff55 	bl	800bc60 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2210      	movs	r2, #16
 8009dc2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009dc6:	e016      	b.n	8009df6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009dc8:	2340      	movs	r3, #64	; 0x40
 8009dca:	2202      	movs	r2, #2
 8009dcc:	2181      	movs	r1, #129	; 0x81
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f001 ff46 	bl	800bc60 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009dda:	2340      	movs	r3, #64	; 0x40
 8009ddc:	2202      	movs	r2, #2
 8009dde:	2101      	movs	r1, #1
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f001 ff3d 	bl	800bc60 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2210      	movs	r2, #16
 8009df2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009df6:	2308      	movs	r3, #8
 8009df8:	2203      	movs	r2, #3
 8009dfa:	2182      	movs	r1, #130	; 0x82
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f001 ff2f 	bl	800bc60 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	7c1b      	ldrb	r3, [r3, #16]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d109      	bne.n	8009e40 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e36:	2101      	movs	r1, #1
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f002 f88d 	bl	800bf58 <USBD_LL_PrepareReceive>
 8009e3e:	e007      	b.n	8009e50 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e46:	2340      	movs	r3, #64	; 0x40
 8009e48:	2101      	movs	r1, #1
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f002 f884 	bl	800bf58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b082      	sub	sp, #8
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	460b      	mov	r3, r1
 8009e64:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009e66:	2181      	movs	r1, #129	; 0x81
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f001 ff37 	bl	800bcdc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009e74:	2101      	movs	r1, #1
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f001 ff30 	bl	800bcdc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009e84:	2182      	movs	r1, #130	; 0x82
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f001 ff28 	bl	800bcdc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00e      	beq.n	8009ec4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f002 f8de 	bl	800c078 <USBD_static_free>
    pdev->pClassData = NULL;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
	...

08009ed0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ee0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009eea:	2300      	movs	r3, #0
 8009eec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d101      	bne.n	8009ef8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	e0af      	b.n	800a058 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d03f      	beq.n	8009f84 <USBD_CDC_Setup+0xb4>
 8009f04:	2b20      	cmp	r3, #32
 8009f06:	f040 809f 	bne.w	800a048 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	88db      	ldrh	r3, [r3, #6]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d02e      	beq.n	8009f70 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	b25b      	sxtb	r3, r3
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	da16      	bge.n	8009f4a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	683a      	ldr	r2, [r7, #0]
 8009f26:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009f28:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	88d2      	ldrh	r2, [r2, #6]
 8009f2e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	88db      	ldrh	r3, [r3, #6]
 8009f34:	2b07      	cmp	r3, #7
 8009f36:	bf28      	it	cs
 8009f38:	2307      	movcs	r3, #7
 8009f3a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	89fa      	ldrh	r2, [r7, #14]
 8009f40:	4619      	mov	r1, r3
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f001 fa9f 	bl	800b486 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009f48:	e085      	b.n	800a056 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	785a      	ldrb	r2, [r3, #1]
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	88db      	ldrh	r3, [r3, #6]
 8009f58:	b2da      	uxtb	r2, r3
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009f60:	6939      	ldr	r1, [r7, #16]
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	88db      	ldrh	r3, [r3, #6]
 8009f66:	461a      	mov	r2, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f001 fab8 	bl	800b4de <USBD_CtlPrepareRx>
      break;
 8009f6e:	e072      	b.n	800a056 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	683a      	ldr	r2, [r7, #0]
 8009f7a:	7850      	ldrb	r0, [r2, #1]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	6839      	ldr	r1, [r7, #0]
 8009f80:	4798      	blx	r3
      break;
 8009f82:	e068      	b.n	800a056 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	785b      	ldrb	r3, [r3, #1]
 8009f88:	2b0b      	cmp	r3, #11
 8009f8a:	d852      	bhi.n	800a032 <USBD_CDC_Setup+0x162>
 8009f8c:	a201      	add	r2, pc, #4	; (adr r2, 8009f94 <USBD_CDC_Setup+0xc4>)
 8009f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f92:	bf00      	nop
 8009f94:	08009fc5 	.word	0x08009fc5
 8009f98:	0800a041 	.word	0x0800a041
 8009f9c:	0800a033 	.word	0x0800a033
 8009fa0:	0800a033 	.word	0x0800a033
 8009fa4:	0800a033 	.word	0x0800a033
 8009fa8:	0800a033 	.word	0x0800a033
 8009fac:	0800a033 	.word	0x0800a033
 8009fb0:	0800a033 	.word	0x0800a033
 8009fb4:	0800a033 	.word	0x0800a033
 8009fb8:	0800a033 	.word	0x0800a033
 8009fbc:	08009fef 	.word	0x08009fef
 8009fc0:	0800a019 	.word	0x0800a019
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	2b03      	cmp	r3, #3
 8009fce:	d107      	bne.n	8009fe0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009fd0:	f107 030a 	add.w	r3, r7, #10
 8009fd4:	2202      	movs	r2, #2
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f001 fa54 	bl	800b486 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009fde:	e032      	b.n	800a046 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009fe0:	6839      	ldr	r1, [r7, #0]
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f001 f9de 	bl	800b3a4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009fe8:	2303      	movs	r3, #3
 8009fea:	75fb      	strb	r3, [r7, #23]
          break;
 8009fec:	e02b      	b.n	800a046 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	2b03      	cmp	r3, #3
 8009ff8:	d107      	bne.n	800a00a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009ffa:	f107 030d 	add.w	r3, r7, #13
 8009ffe:	2201      	movs	r2, #1
 800a000:	4619      	mov	r1, r3
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f001 fa3f 	bl	800b486 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a008:	e01d      	b.n	800a046 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a00a:	6839      	ldr	r1, [r7, #0]
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f001 f9c9 	bl	800b3a4 <USBD_CtlError>
            ret = USBD_FAIL;
 800a012:	2303      	movs	r3, #3
 800a014:	75fb      	strb	r3, [r7, #23]
          break;
 800a016:	e016      	b.n	800a046 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	2b03      	cmp	r3, #3
 800a022:	d00f      	beq.n	800a044 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a024:	6839      	ldr	r1, [r7, #0]
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f001 f9bc 	bl	800b3a4 <USBD_CtlError>
            ret = USBD_FAIL;
 800a02c:	2303      	movs	r3, #3
 800a02e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a030:	e008      	b.n	800a044 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a032:	6839      	ldr	r1, [r7, #0]
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f001 f9b5 	bl	800b3a4 <USBD_CtlError>
          ret = USBD_FAIL;
 800a03a:	2303      	movs	r3, #3
 800a03c:	75fb      	strb	r3, [r7, #23]
          break;
 800a03e:	e002      	b.n	800a046 <USBD_CDC_Setup+0x176>
          break;
 800a040:	bf00      	nop
 800a042:	e008      	b.n	800a056 <USBD_CDC_Setup+0x186>
          break;
 800a044:	bf00      	nop
      }
      break;
 800a046:	e006      	b.n	800a056 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a048:	6839      	ldr	r1, [r7, #0]
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f001 f9aa 	bl	800b3a4 <USBD_CtlError>
      ret = USBD_FAIL;
 800a050:	2303      	movs	r3, #3
 800a052:	75fb      	strb	r3, [r7, #23]
      break;
 800a054:	bf00      	nop
  }

  return (uint8_t)ret;
 800a056:	7dfb      	ldrb	r3, [r7, #23]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3718      	adds	r7, #24
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	460b      	mov	r3, r1
 800a06a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a072:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d101      	bne.n	800a082 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a07e:	2303      	movs	r3, #3
 800a080:	e04f      	b.n	800a122 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a088:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a08a:	78fa      	ldrb	r2, [r7, #3]
 800a08c:	6879      	ldr	r1, [r7, #4]
 800a08e:	4613      	mov	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	4413      	add	r3, r2
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	440b      	add	r3, r1
 800a098:	3318      	adds	r3, #24
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d029      	beq.n	800a0f4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a0a0:	78fa      	ldrb	r2, [r7, #3]
 800a0a2:	6879      	ldr	r1, [r7, #4]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	4413      	add	r3, r2
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	440b      	add	r3, r1
 800a0ae:	3318      	adds	r3, #24
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	78f9      	ldrb	r1, [r7, #3]
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	440b      	add	r3, r1
 800a0bc:	00db      	lsls	r3, r3, #3
 800a0be:	4403      	add	r3, r0
 800a0c0:	333c      	adds	r3, #60	; 0x3c
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	fbb2 f1f3 	udiv	r1, r2, r3
 800a0c8:	fb01 f303 	mul.w	r3, r1, r3
 800a0cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d110      	bne.n	800a0f4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a0d2:	78fa      	ldrb	r2, [r7, #3]
 800a0d4:	6879      	ldr	r1, [r7, #4]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4413      	add	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	440b      	add	r3, r1
 800a0e0:	3318      	adds	r3, #24
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a0e6:	78f9      	ldrb	r1, [r7, #3]
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f001 fefb 	bl	800bee8 <USBD_LL_Transmit>
 800a0f2:	e015      	b.n	800a120 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a102:	691b      	ldr	r3, [r3, #16]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00b      	beq.n	800a120 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a11c:	78fa      	ldrb	r2, [r7, #3]
 800a11e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b084      	sub	sp, #16
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
 800a132:	460b      	mov	r3, r1
 800a134:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a13c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a144:	2b00      	cmp	r3, #0
 800a146:	d101      	bne.n	800a14c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a148:	2303      	movs	r3, #3
 800a14a:	e015      	b.n	800a178 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a14c:	78fb      	ldrb	r3, [r7, #3]
 800a14e:	4619      	mov	r1, r3
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f001 ff39 	bl	800bfc8 <USBD_LL_GetRxDataSize>
 800a156:	4602      	mov	r2, r0
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a172:	4611      	mov	r1, r2
 800a174:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a18e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d101      	bne.n	800a19a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a196:	2303      	movs	r3, #3
 800a198:	e01b      	b.n	800a1d2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d015      	beq.n	800a1d0 <USBD_CDC_EP0_RxReady+0x50>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a1aa:	2bff      	cmp	r3, #255	; 0xff
 800a1ac:	d010      	beq.n	800a1d0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	68fa      	ldr	r2, [r7, #12]
 800a1b8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a1bc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a1c4:	b292      	uxth	r2, r2
 800a1c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	22ff      	movs	r2, #255	; 0xff
 800a1cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
	...

0800a1dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2243      	movs	r2, #67	; 0x43
 800a1e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a1ea:	4b03      	ldr	r3, [pc, #12]	; (800a1f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	20000094 	.word	0x20000094

0800a1fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2243      	movs	r2, #67	; 0x43
 800a208:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a20a:	4b03      	ldr	r3, [pc, #12]	; (800a218 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr
 800a218:	20000050 	.word	0x20000050

0800a21c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2243      	movs	r2, #67	; 0x43
 800a228:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a22a:	4b03      	ldr	r3, [pc, #12]	; (800a238 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr
 800a238:	200000d8 	.word	0x200000d8

0800a23c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	220a      	movs	r2, #10
 800a248:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a24a:	4b03      	ldr	r3, [pc, #12]	; (800a258 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr
 800a258:	2000000c 	.word	0x2000000c

0800a25c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d101      	bne.n	800a270 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a26c:	2303      	movs	r3, #3
 800a26e:	e004      	b.n	800a27a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	683a      	ldr	r2, [r7, #0]
 800a274:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a278:	2300      	movs	r3, #0
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	370c      	adds	r7, #12
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr

0800a286 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a286:	b480      	push	{r7}
 800a288:	b087      	sub	sp, #28
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	60f8      	str	r0, [r7, #12]
 800a28e:	60b9      	str	r1, [r7, #8]
 800a290:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a298:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d101      	bne.n	800a2a4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	e008      	b.n	800a2b6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	68ba      	ldr	r2, [r7, #8]
 800a2a8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	371c      	adds	r7, #28
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr

0800a2c2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a2c2:	b480      	push	{r7}
 800a2c4:	b085      	sub	sp, #20
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
 800a2ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2d2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d101      	bne.n	800a2de <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a2da:	2303      	movs	r3, #3
 800a2dc:	e004      	b.n	800a2e8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	683a      	ldr	r2, [r7, #0]
 800a2e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3714      	adds	r7, #20
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a302:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d101      	bne.n	800a312 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a30e:	2303      	movs	r3, #3
 800a310:	e016      	b.n	800a340 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	7c1b      	ldrb	r3, [r3, #16]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d109      	bne.n	800a32e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a320:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a324:	2101      	movs	r1, #1
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f001 fe16 	bl	800bf58 <USBD_LL_PrepareReceive>
 800a32c:	e007      	b.n	800a33e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a334:	2340      	movs	r3, #64	; 0x40
 800a336:	2101      	movs	r1, #1
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f001 fe0d 	bl	800bf58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	4613      	mov	r3, r2
 800a354:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d101      	bne.n	800a360 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a35c:	2303      	movs	r3, #3
 800a35e:	e01f      	b.n	800a3a0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2200      	movs	r2, #0
 800a364:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2200      	movs	r2, #0
 800a374:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	68ba      	ldr	r2, [r7, #8]
 800a382:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2201      	movs	r2, #1
 800a38a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	79fa      	ldrb	r2, [r7, #7]
 800a392:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a394:	68f8      	ldr	r0, [r7, #12]
 800a396:	f001 fbcf 	bl	800bb38 <USBD_LL_Init>
 800a39a:	4603      	mov	r3, r0
 800a39c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a39e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3718      	adds	r7, #24
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d101      	bne.n	800a3c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a3bc:	2303      	movs	r3, #3
 800a3be:	e016      	b.n	800a3ee <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	683a      	ldr	r2, [r7, #0]
 800a3c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d00b      	beq.n	800a3ec <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3dc:	f107 020e 	add.w	r2, r7, #14
 800a3e0:	4610      	mov	r0, r2
 800a3e2:	4798      	blx	r3
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b082      	sub	sp, #8
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f001 fbfc 	bl	800bbfc <USBD_LL_Start>
 800a404:	4603      	mov	r3, r0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a40e:	b480      	push	{r7}
 800a410:	b083      	sub	sp, #12
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	460b      	mov	r3, r1
 800a42e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a430:	2303      	movs	r3, #3
 800a432:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d009      	beq.n	800a452 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	78fa      	ldrb	r2, [r7, #3]
 800a448:	4611      	mov	r1, r2
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	4798      	blx	r3
 800a44e:	4603      	mov	r3, r0
 800a450:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a452:	7bfb      	ldrb	r3, [r7, #15]
}
 800a454:	4618      	mov	r0, r3
 800a456:	3710      	adds	r7, #16
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	460b      	mov	r3, r1
 800a466:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d007      	beq.n	800a482 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	78fa      	ldrb	r2, [r7, #3]
 800a47c:	4611      	mov	r1, r2
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	4798      	blx	r3
  }

  return USBD_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a49c:	6839      	ldr	r1, [r7, #0]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 ff46 	bl	800b330 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a4c0:	f003 031f 	and.w	r3, r3, #31
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d01a      	beq.n	800a4fe <USBD_LL_SetupStage+0x72>
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	d822      	bhi.n	800a512 <USBD_LL_SetupStage+0x86>
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d002      	beq.n	800a4d6 <USBD_LL_SetupStage+0x4a>
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d00a      	beq.n	800a4ea <USBD_LL_SetupStage+0x5e>
 800a4d4:	e01d      	b.n	800a512 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4dc:	4619      	mov	r1, r3
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 f9ee 	bl	800a8c0 <USBD_StdDevReq>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a4e8:	e020      	b.n	800a52c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 fa52 	bl	800a99c <USBD_StdItfReq>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	73fb      	strb	r3, [r7, #15]
      break;
 800a4fc:	e016      	b.n	800a52c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a504:	4619      	mov	r1, r3
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 fa91 	bl	800aa2e <USBD_StdEPReq>
 800a50c:	4603      	mov	r3, r0
 800a50e:	73fb      	strb	r3, [r7, #15]
      break;
 800a510:	e00c      	b.n	800a52c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a518:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	4619      	mov	r1, r3
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f001 fc11 	bl	800bd48 <USBD_LL_StallEP>
 800a526:	4603      	mov	r3, r0
 800a528:	73fb      	strb	r3, [r7, #15]
      break;
 800a52a:	bf00      	nop
  }

  return ret;
 800a52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b086      	sub	sp, #24
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	60f8      	str	r0, [r7, #12]
 800a53e:	460b      	mov	r3, r1
 800a540:	607a      	str	r2, [r7, #4]
 800a542:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a544:	7afb      	ldrb	r3, [r7, #11]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d138      	bne.n	800a5bc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a550:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a558:	2b03      	cmp	r3, #3
 800a55a:	d14a      	bne.n	800a5f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	689a      	ldr	r2, [r3, #8]
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	429a      	cmp	r2, r3
 800a566:	d913      	bls.n	800a590 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	689a      	ldr	r2, [r3, #8]
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	1ad2      	subs	r2, r2, r3
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	68da      	ldr	r2, [r3, #12]
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	4293      	cmp	r3, r2
 800a580:	bf28      	it	cs
 800a582:	4613      	movcs	r3, r2
 800a584:	461a      	mov	r2, r3
 800a586:	6879      	ldr	r1, [r7, #4]
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f000 ffc5 	bl	800b518 <USBD_CtlContinueRx>
 800a58e:	e030      	b.n	800a5f2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b03      	cmp	r3, #3
 800a59a:	d10b      	bne.n	800a5b4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d005      	beq.n	800a5b4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a5b4:	68f8      	ldr	r0, [r7, #12]
 800a5b6:	f000 ffc0 	bl	800b53a <USBD_CtlSendStatus>
 800a5ba:	e01a      	b.n	800a5f2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	2b03      	cmp	r3, #3
 800a5c6:	d114      	bne.n	800a5f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ce:	699b      	ldr	r3, [r3, #24]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d00e      	beq.n	800a5f2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5da:	699b      	ldr	r3, [r3, #24]
 800a5dc:	7afa      	ldrb	r2, [r7, #11]
 800a5de:	4611      	mov	r1, r2
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	4798      	blx	r3
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a5e8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d001      	beq.n	800a5f2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a5ee:	7dfb      	ldrb	r3, [r7, #23]
 800a5f0:	e000      	b.n	800a5f4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a5f2:	2300      	movs	r3, #0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3718      	adds	r7, #24
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b086      	sub	sp, #24
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	460b      	mov	r3, r1
 800a606:	607a      	str	r2, [r7, #4]
 800a608:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a60a:	7afb      	ldrb	r3, [r7, #11]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d16b      	bne.n	800a6e8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	3314      	adds	r3, #20
 800a614:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d156      	bne.n	800a6ce <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	689a      	ldr	r2, [r3, #8]
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d914      	bls.n	800a656 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	689a      	ldr	r2, [r3, #8]
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	1ad2      	subs	r2, r2, r3
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	461a      	mov	r2, r3
 800a640:	6879      	ldr	r1, [r7, #4]
 800a642:	68f8      	ldr	r0, [r7, #12]
 800a644:	f000 ff3a 	bl	800b4bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a648:	2300      	movs	r3, #0
 800a64a:	2200      	movs	r2, #0
 800a64c:	2100      	movs	r1, #0
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	f001 fc82 	bl	800bf58 <USBD_LL_PrepareReceive>
 800a654:	e03b      	b.n	800a6ce <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	68da      	ldr	r2, [r3, #12]
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d11c      	bne.n	800a69c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	685a      	ldr	r2, [r3, #4]
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d316      	bcc.n	800a69c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	685a      	ldr	r2, [r3, #4]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a678:	429a      	cmp	r2, r3
 800a67a:	d20f      	bcs.n	800a69c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a67c:	2200      	movs	r2, #0
 800a67e:	2100      	movs	r1, #0
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f000 ff1b 	bl	800b4bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2200      	movs	r2, #0
 800a68a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a68e:	2300      	movs	r3, #0
 800a690:	2200      	movs	r2, #0
 800a692:	2100      	movs	r1, #0
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f001 fc5f 	bl	800bf58 <USBD_LL_PrepareReceive>
 800a69a:	e018      	b.n	800a6ce <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	2b03      	cmp	r3, #3
 800a6a6:	d10b      	bne.n	800a6c0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d005      	beq.n	800a6c0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6c0:	2180      	movs	r1, #128	; 0x80
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	f001 fb40 	bl	800bd48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f000 ff49 	bl	800b560 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d122      	bne.n	800a71e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f7ff fe98 	bl	800a40e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a6e6:	e01a      	b.n	800a71e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	2b03      	cmp	r3, #3
 800a6f2:	d114      	bne.n	800a71e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6fa:	695b      	ldr	r3, [r3, #20]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00e      	beq.n	800a71e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a706:	695b      	ldr	r3, [r3, #20]
 800a708:	7afa      	ldrb	r2, [r7, #11]
 800a70a:	4611      	mov	r1, r2
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	4798      	blx	r3
 800a710:	4603      	mov	r3, r0
 800a712:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a714:	7dfb      	ldrb	r3, [r7, #23]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d001      	beq.n	800a71e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a71a:	7dfb      	ldrb	r3, [r7, #23]
 800a71c:	e000      	b.n	800a720 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	3718      	adds	r7, #24
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a754:	2b00      	cmp	r3, #0
 800a756:	d101      	bne.n	800a75c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a758:	2303      	movs	r3, #3
 800a75a:	e02f      	b.n	800a7bc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00f      	beq.n	800a786 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d009      	beq.n	800a786 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	6852      	ldr	r2, [r2, #4]
 800a77e:	b2d2      	uxtb	r2, r2
 800a780:	4611      	mov	r1, r2
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a786:	2340      	movs	r3, #64	; 0x40
 800a788:	2200      	movs	r2, #0
 800a78a:	2100      	movs	r1, #0
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f001 fa67 	bl	800bc60 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2201      	movs	r2, #1
 800a796:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2240      	movs	r2, #64	; 0x40
 800a79e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7a2:	2340      	movs	r3, #64	; 0x40
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	2180      	movs	r1, #128	; 0x80
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f001 fa59 	bl	800bc60 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2240      	movs	r2, #64	; 0x40
 800a7b8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	78fa      	ldrb	r2, [r7, #3]
 800a7d4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7f2:	b2da      	uxtb	r2, r3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2204      	movs	r2, #4
 800a7fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	370c      	adds	r7, #12
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	2b04      	cmp	r3, #4
 800a822:	d106      	bne.n	800a832 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a82a:	b2da      	uxtb	r2, r3
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a832:	2300      	movs	r3, #0
}
 800a834:	4618      	mov	r0, r3
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d101      	bne.n	800a856 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a852:	2303      	movs	r3, #3
 800a854:	e012      	b.n	800a87c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	2b03      	cmp	r3, #3
 800a860:	d10b      	bne.n	800a87a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a868:	69db      	ldr	r3, [r3, #28]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d005      	beq.n	800a87a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a874:	69db      	ldr	r3, [r3, #28]
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3708      	adds	r7, #8
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a884:	b480      	push	{r7}
 800a886:	b087      	sub	sp, #28
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	3301      	adds	r3, #1
 800a89a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a8a2:	8a3b      	ldrh	r3, [r7, #16]
 800a8a4:	021b      	lsls	r3, r3, #8
 800a8a6:	b21a      	sxth	r2, r3
 800a8a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	b21b      	sxth	r3, r3
 800a8b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a8b2:	89fb      	ldrh	r3, [r7, #14]
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	371c      	adds	r7, #28
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8d6:	2b40      	cmp	r3, #64	; 0x40
 800a8d8:	d005      	beq.n	800a8e6 <USBD_StdDevReq+0x26>
 800a8da:	2b40      	cmp	r3, #64	; 0x40
 800a8dc:	d853      	bhi.n	800a986 <USBD_StdDevReq+0xc6>
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00b      	beq.n	800a8fa <USBD_StdDevReq+0x3a>
 800a8e2:	2b20      	cmp	r3, #32
 800a8e4:	d14f      	bne.n	800a986 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	6839      	ldr	r1, [r7, #0]
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	4798      	blx	r3
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a8f8:	e04a      	b.n	800a990 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	785b      	ldrb	r3, [r3, #1]
 800a8fe:	2b09      	cmp	r3, #9
 800a900:	d83b      	bhi.n	800a97a <USBD_StdDevReq+0xba>
 800a902:	a201      	add	r2, pc, #4	; (adr r2, 800a908 <USBD_StdDevReq+0x48>)
 800a904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a908:	0800a95d 	.word	0x0800a95d
 800a90c:	0800a971 	.word	0x0800a971
 800a910:	0800a97b 	.word	0x0800a97b
 800a914:	0800a967 	.word	0x0800a967
 800a918:	0800a97b 	.word	0x0800a97b
 800a91c:	0800a93b 	.word	0x0800a93b
 800a920:	0800a931 	.word	0x0800a931
 800a924:	0800a97b 	.word	0x0800a97b
 800a928:	0800a953 	.word	0x0800a953
 800a92c:	0800a945 	.word	0x0800a945
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a930:	6839      	ldr	r1, [r7, #0]
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f9de 	bl	800acf4 <USBD_GetDescriptor>
          break;
 800a938:	e024      	b.n	800a984 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a93a:	6839      	ldr	r1, [r7, #0]
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 fb6d 	bl	800b01c <USBD_SetAddress>
          break;
 800a942:	e01f      	b.n	800a984 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a944:	6839      	ldr	r1, [r7, #0]
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 fbac 	bl	800b0a4 <USBD_SetConfig>
 800a94c:	4603      	mov	r3, r0
 800a94e:	73fb      	strb	r3, [r7, #15]
          break;
 800a950:	e018      	b.n	800a984 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a952:	6839      	ldr	r1, [r7, #0]
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 fc4b 	bl	800b1f0 <USBD_GetConfig>
          break;
 800a95a:	e013      	b.n	800a984 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a95c:	6839      	ldr	r1, [r7, #0]
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 fc7c 	bl	800b25c <USBD_GetStatus>
          break;
 800a964:	e00e      	b.n	800a984 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a966:	6839      	ldr	r1, [r7, #0]
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 fcab 	bl	800b2c4 <USBD_SetFeature>
          break;
 800a96e:	e009      	b.n	800a984 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a970:	6839      	ldr	r1, [r7, #0]
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 fcba 	bl	800b2ec <USBD_ClrFeature>
          break;
 800a978:	e004      	b.n	800a984 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a97a:	6839      	ldr	r1, [r7, #0]
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 fd11 	bl	800b3a4 <USBD_CtlError>
          break;
 800a982:	bf00      	nop
      }
      break;
 800a984:	e004      	b.n	800a990 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a986:	6839      	ldr	r1, [r7, #0]
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fd0b 	bl	800b3a4 <USBD_CtlError>
      break;
 800a98e:	bf00      	nop
  }

  return ret;
 800a990:	7bfb      	ldrb	r3, [r7, #15]
}
 800a992:	4618      	mov	r0, r3
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop

0800a99c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9b2:	2b40      	cmp	r3, #64	; 0x40
 800a9b4:	d005      	beq.n	800a9c2 <USBD_StdItfReq+0x26>
 800a9b6:	2b40      	cmp	r3, #64	; 0x40
 800a9b8:	d82f      	bhi.n	800aa1a <USBD_StdItfReq+0x7e>
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d001      	beq.n	800a9c2 <USBD_StdItfReq+0x26>
 800a9be:	2b20      	cmp	r3, #32
 800a9c0:	d12b      	bne.n	800aa1a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d81d      	bhi.n	800aa0c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	889b      	ldrh	r3, [r3, #4]
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d813      	bhi.n	800aa02 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	6839      	ldr	r1, [r7, #0]
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	4798      	blx	r3
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	88db      	ldrh	r3, [r3, #6]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d110      	bne.n	800aa16 <USBD_StdItfReq+0x7a>
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10d      	bne.n	800aa16 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 fd9d 	bl	800b53a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aa00:	e009      	b.n	800aa16 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800aa02:	6839      	ldr	r1, [r7, #0]
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 fccd 	bl	800b3a4 <USBD_CtlError>
          break;
 800aa0a:	e004      	b.n	800aa16 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800aa0c:	6839      	ldr	r1, [r7, #0]
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 fcc8 	bl	800b3a4 <USBD_CtlError>
          break;
 800aa14:	e000      	b.n	800aa18 <USBD_StdItfReq+0x7c>
          break;
 800aa16:	bf00      	nop
      }
      break;
 800aa18:	e004      	b.n	800aa24 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800aa1a:	6839      	ldr	r1, [r7, #0]
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fcc1 	bl	800b3a4 <USBD_CtlError>
      break;
 800aa22:	bf00      	nop
  }

  return ret;
 800aa24:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3710      	adds	r7, #16
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b084      	sub	sp, #16
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
 800aa36:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	889b      	ldrh	r3, [r3, #4]
 800aa40:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa4a:	2b40      	cmp	r3, #64	; 0x40
 800aa4c:	d007      	beq.n	800aa5e <USBD_StdEPReq+0x30>
 800aa4e:	2b40      	cmp	r3, #64	; 0x40
 800aa50:	f200 8145 	bhi.w	800acde <USBD_StdEPReq+0x2b0>
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00c      	beq.n	800aa72 <USBD_StdEPReq+0x44>
 800aa58:	2b20      	cmp	r3, #32
 800aa5a:	f040 8140 	bne.w	800acde <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	6839      	ldr	r1, [r7, #0]
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	4798      	blx	r3
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	73fb      	strb	r3, [r7, #15]
      break;
 800aa70:	e13a      	b.n	800ace8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	785b      	ldrb	r3, [r3, #1]
 800aa76:	2b03      	cmp	r3, #3
 800aa78:	d007      	beq.n	800aa8a <USBD_StdEPReq+0x5c>
 800aa7a:	2b03      	cmp	r3, #3
 800aa7c:	f300 8129 	bgt.w	800acd2 <USBD_StdEPReq+0x2a4>
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d07f      	beq.n	800ab84 <USBD_StdEPReq+0x156>
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d03c      	beq.n	800ab02 <USBD_StdEPReq+0xd4>
 800aa88:	e123      	b.n	800acd2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	d002      	beq.n	800aa9c <USBD_StdEPReq+0x6e>
 800aa96:	2b03      	cmp	r3, #3
 800aa98:	d016      	beq.n	800aac8 <USBD_StdEPReq+0x9a>
 800aa9a:	e02c      	b.n	800aaf6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa9c:	7bbb      	ldrb	r3, [r7, #14]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00d      	beq.n	800aabe <USBD_StdEPReq+0x90>
 800aaa2:	7bbb      	ldrb	r3, [r7, #14]
 800aaa4:	2b80      	cmp	r3, #128	; 0x80
 800aaa6:	d00a      	beq.n	800aabe <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aaa8:	7bbb      	ldrb	r3, [r7, #14]
 800aaaa:	4619      	mov	r1, r3
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f001 f94b 	bl	800bd48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aab2:	2180      	movs	r1, #128	; 0x80
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f001 f947 	bl	800bd48 <USBD_LL_StallEP>
 800aaba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aabc:	e020      	b.n	800ab00 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800aabe:	6839      	ldr	r1, [r7, #0]
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 fc6f 	bl	800b3a4 <USBD_CtlError>
              break;
 800aac6:	e01b      	b.n	800ab00 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	885b      	ldrh	r3, [r3, #2]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d10e      	bne.n	800aaee <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aad0:	7bbb      	ldrb	r3, [r7, #14]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00b      	beq.n	800aaee <USBD_StdEPReq+0xc0>
 800aad6:	7bbb      	ldrb	r3, [r7, #14]
 800aad8:	2b80      	cmp	r3, #128	; 0x80
 800aada:	d008      	beq.n	800aaee <USBD_StdEPReq+0xc0>
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	88db      	ldrh	r3, [r3, #6]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d104      	bne.n	800aaee <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aae4:	7bbb      	ldrb	r3, [r7, #14]
 800aae6:	4619      	mov	r1, r3
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f001 f92d 	bl	800bd48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 fd23 	bl	800b53a <USBD_CtlSendStatus>

              break;
 800aaf4:	e004      	b.n	800ab00 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800aaf6:	6839      	ldr	r1, [r7, #0]
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 fc53 	bl	800b3a4 <USBD_CtlError>
              break;
 800aafe:	bf00      	nop
          }
          break;
 800ab00:	e0ec      	b.n	800acdc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d002      	beq.n	800ab14 <USBD_StdEPReq+0xe6>
 800ab0e:	2b03      	cmp	r3, #3
 800ab10:	d016      	beq.n	800ab40 <USBD_StdEPReq+0x112>
 800ab12:	e030      	b.n	800ab76 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab14:	7bbb      	ldrb	r3, [r7, #14]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d00d      	beq.n	800ab36 <USBD_StdEPReq+0x108>
 800ab1a:	7bbb      	ldrb	r3, [r7, #14]
 800ab1c:	2b80      	cmp	r3, #128	; 0x80
 800ab1e:	d00a      	beq.n	800ab36 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab20:	7bbb      	ldrb	r3, [r7, #14]
 800ab22:	4619      	mov	r1, r3
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f001 f90f 	bl	800bd48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab2a:	2180      	movs	r1, #128	; 0x80
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f001 f90b 	bl	800bd48 <USBD_LL_StallEP>
 800ab32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab34:	e025      	b.n	800ab82 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 fc33 	bl	800b3a4 <USBD_CtlError>
              break;
 800ab3e:	e020      	b.n	800ab82 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	885b      	ldrh	r3, [r3, #2]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d11b      	bne.n	800ab80 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ab48:	7bbb      	ldrb	r3, [r7, #14]
 800ab4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d004      	beq.n	800ab5c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ab52:	7bbb      	ldrb	r3, [r7, #14]
 800ab54:	4619      	mov	r1, r3
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f001 f92c 	bl	800bdb4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 fcec 	bl	800b53a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	6839      	ldr	r1, [r7, #0]
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	4798      	blx	r3
 800ab70:	4603      	mov	r3, r0
 800ab72:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ab74:	e004      	b.n	800ab80 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ab76:	6839      	ldr	r1, [r7, #0]
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 fc13 	bl	800b3a4 <USBD_CtlError>
              break;
 800ab7e:	e000      	b.n	800ab82 <USBD_StdEPReq+0x154>
              break;
 800ab80:	bf00      	nop
          }
          break;
 800ab82:	e0ab      	b.n	800acdc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b02      	cmp	r3, #2
 800ab8e:	d002      	beq.n	800ab96 <USBD_StdEPReq+0x168>
 800ab90:	2b03      	cmp	r3, #3
 800ab92:	d032      	beq.n	800abfa <USBD_StdEPReq+0x1cc>
 800ab94:	e097      	b.n	800acc6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab96:	7bbb      	ldrb	r3, [r7, #14]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d007      	beq.n	800abac <USBD_StdEPReq+0x17e>
 800ab9c:	7bbb      	ldrb	r3, [r7, #14]
 800ab9e:	2b80      	cmp	r3, #128	; 0x80
 800aba0:	d004      	beq.n	800abac <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800aba2:	6839      	ldr	r1, [r7, #0]
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 fbfd 	bl	800b3a4 <USBD_CtlError>
                break;
 800abaa:	e091      	b.n	800acd0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	da0b      	bge.n	800abcc <USBD_StdEPReq+0x19e>
 800abb4:	7bbb      	ldrb	r3, [r7, #14]
 800abb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abba:	4613      	mov	r3, r2
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	4413      	add	r3, r2
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	3310      	adds	r3, #16
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	4413      	add	r3, r2
 800abc8:	3304      	adds	r3, #4
 800abca:	e00b      	b.n	800abe4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800abcc:	7bbb      	ldrb	r3, [r7, #14]
 800abce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abd2:	4613      	mov	r3, r2
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	4413      	add	r3, r2
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	4413      	add	r3, r2
 800abe2:	3304      	adds	r3, #4
 800abe4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	2200      	movs	r2, #0
 800abea:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	2202      	movs	r2, #2
 800abf0:	4619      	mov	r1, r3
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 fc47 	bl	800b486 <USBD_CtlSendData>
              break;
 800abf8:	e06a      	b.n	800acd0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800abfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	da11      	bge.n	800ac26 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ac02:	7bbb      	ldrb	r3, [r7, #14]
 800ac04:	f003 020f 	and.w	r2, r3, #15
 800ac08:	6879      	ldr	r1, [r7, #4]
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	4413      	add	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	440b      	add	r3, r1
 800ac14:	3324      	adds	r3, #36	; 0x24
 800ac16:	881b      	ldrh	r3, [r3, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d117      	bne.n	800ac4c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ac1c:	6839      	ldr	r1, [r7, #0]
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 fbc0 	bl	800b3a4 <USBD_CtlError>
                  break;
 800ac24:	e054      	b.n	800acd0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ac26:	7bbb      	ldrb	r3, [r7, #14]
 800ac28:	f003 020f 	and.w	r2, r3, #15
 800ac2c:	6879      	ldr	r1, [r7, #4]
 800ac2e:	4613      	mov	r3, r2
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4413      	add	r3, r2
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	440b      	add	r3, r1
 800ac38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac3c:	881b      	ldrh	r3, [r3, #0]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d104      	bne.n	800ac4c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ac42:	6839      	ldr	r1, [r7, #0]
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 fbad 	bl	800b3a4 <USBD_CtlError>
                  break;
 800ac4a:	e041      	b.n	800acd0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	da0b      	bge.n	800ac6c <USBD_StdEPReq+0x23e>
 800ac54:	7bbb      	ldrb	r3, [r7, #14]
 800ac56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac5a:	4613      	mov	r3, r2
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	4413      	add	r3, r2
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	3310      	adds	r3, #16
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	4413      	add	r3, r2
 800ac68:	3304      	adds	r3, #4
 800ac6a:	e00b      	b.n	800ac84 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac6c:	7bbb      	ldrb	r3, [r7, #14]
 800ac6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac72:	4613      	mov	r3, r2
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4413      	add	r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	4413      	add	r3, r2
 800ac82:	3304      	adds	r3, #4
 800ac84:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ac86:	7bbb      	ldrb	r3, [r7, #14]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d002      	beq.n	800ac92 <USBD_StdEPReq+0x264>
 800ac8c:	7bbb      	ldrb	r3, [r7, #14]
 800ac8e:	2b80      	cmp	r3, #128	; 0x80
 800ac90:	d103      	bne.n	800ac9a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	2200      	movs	r2, #0
 800ac96:	601a      	str	r2, [r3, #0]
 800ac98:	e00e      	b.n	800acb8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ac9a:	7bbb      	ldrb	r3, [r7, #14]
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f001 f8be 	bl	800be20 <USBD_LL_IsStallEP>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d003      	beq.n	800acb2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	2201      	movs	r2, #1
 800acae:	601a      	str	r2, [r3, #0]
 800acb0:	e002      	b.n	800acb8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	2200      	movs	r2, #0
 800acb6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	2202      	movs	r2, #2
 800acbc:	4619      	mov	r1, r3
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 fbe1 	bl	800b486 <USBD_CtlSendData>
              break;
 800acc4:	e004      	b.n	800acd0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800acc6:	6839      	ldr	r1, [r7, #0]
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 fb6b 	bl	800b3a4 <USBD_CtlError>
              break;
 800acce:	bf00      	nop
          }
          break;
 800acd0:	e004      	b.n	800acdc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800acd2:	6839      	ldr	r1, [r7, #0]
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 fb65 	bl	800b3a4 <USBD_CtlError>
          break;
 800acda:	bf00      	nop
      }
      break;
 800acdc:	e004      	b.n	800ace8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800acde:	6839      	ldr	r1, [r7, #0]
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fb5f 	bl	800b3a4 <USBD_CtlError>
      break;
 800ace6:	bf00      	nop
  }

  return ret;
 800ace8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acea:	4618      	mov	r0, r3
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
	...

0800acf4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800acfe:	2300      	movs	r3, #0
 800ad00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ad02:	2300      	movs	r3, #0
 800ad04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ad06:	2300      	movs	r3, #0
 800ad08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	885b      	ldrh	r3, [r3, #2]
 800ad0e:	0a1b      	lsrs	r3, r3, #8
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	3b01      	subs	r3, #1
 800ad14:	2b0e      	cmp	r3, #14
 800ad16:	f200 8152 	bhi.w	800afbe <USBD_GetDescriptor+0x2ca>
 800ad1a:	a201      	add	r2, pc, #4	; (adr r2, 800ad20 <USBD_GetDescriptor+0x2c>)
 800ad1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad20:	0800ad91 	.word	0x0800ad91
 800ad24:	0800ada9 	.word	0x0800ada9
 800ad28:	0800ade9 	.word	0x0800ade9
 800ad2c:	0800afbf 	.word	0x0800afbf
 800ad30:	0800afbf 	.word	0x0800afbf
 800ad34:	0800af5f 	.word	0x0800af5f
 800ad38:	0800af8b 	.word	0x0800af8b
 800ad3c:	0800afbf 	.word	0x0800afbf
 800ad40:	0800afbf 	.word	0x0800afbf
 800ad44:	0800afbf 	.word	0x0800afbf
 800ad48:	0800afbf 	.word	0x0800afbf
 800ad4c:	0800afbf 	.word	0x0800afbf
 800ad50:	0800afbf 	.word	0x0800afbf
 800ad54:	0800afbf 	.word	0x0800afbf
 800ad58:	0800ad5d 	.word	0x0800ad5d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad62:	69db      	ldr	r3, [r3, #28]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d00b      	beq.n	800ad80 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad6e:	69db      	ldr	r3, [r3, #28]
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	7c12      	ldrb	r2, [r2, #16]
 800ad74:	f107 0108 	add.w	r1, r7, #8
 800ad78:	4610      	mov	r0, r2
 800ad7a:	4798      	blx	r3
 800ad7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad7e:	e126      	b.n	800afce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ad80:	6839      	ldr	r1, [r7, #0]
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 fb0e 	bl	800b3a4 <USBD_CtlError>
        err++;
 800ad88:	7afb      	ldrb	r3, [r7, #11]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	72fb      	strb	r3, [r7, #11]
      break;
 800ad8e:	e11e      	b.n	800afce <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	7c12      	ldrb	r2, [r2, #16]
 800ad9c:	f107 0108 	add.w	r1, r7, #8
 800ada0:	4610      	mov	r0, r2
 800ada2:	4798      	blx	r3
 800ada4:	60f8      	str	r0, [r7, #12]
      break;
 800ada6:	e112      	b.n	800afce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	7c1b      	ldrb	r3, [r3, #16]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d10d      	bne.n	800adcc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb8:	f107 0208 	add.w	r2, r7, #8
 800adbc:	4610      	mov	r0, r2
 800adbe:	4798      	blx	r3
 800adc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	3301      	adds	r3, #1
 800adc6:	2202      	movs	r2, #2
 800adc8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800adca:	e100      	b.n	800afce <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800add2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add4:	f107 0208 	add.w	r2, r7, #8
 800add8:	4610      	mov	r0, r2
 800adda:	4798      	blx	r3
 800addc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	3301      	adds	r3, #1
 800ade2:	2202      	movs	r2, #2
 800ade4:	701a      	strb	r2, [r3, #0]
      break;
 800ade6:	e0f2      	b.n	800afce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	885b      	ldrh	r3, [r3, #2]
 800adec:	b2db      	uxtb	r3, r3
 800adee:	2b05      	cmp	r3, #5
 800adf0:	f200 80ac 	bhi.w	800af4c <USBD_GetDescriptor+0x258>
 800adf4:	a201      	add	r2, pc, #4	; (adr r2, 800adfc <USBD_GetDescriptor+0x108>)
 800adf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfa:	bf00      	nop
 800adfc:	0800ae15 	.word	0x0800ae15
 800ae00:	0800ae49 	.word	0x0800ae49
 800ae04:	0800ae7d 	.word	0x0800ae7d
 800ae08:	0800aeb1 	.word	0x0800aeb1
 800ae0c:	0800aee5 	.word	0x0800aee5
 800ae10:	0800af19 	.word	0x0800af19
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d00b      	beq.n	800ae38 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	7c12      	ldrb	r2, [r2, #16]
 800ae2c:	f107 0108 	add.w	r1, r7, #8
 800ae30:	4610      	mov	r0, r2
 800ae32:	4798      	blx	r3
 800ae34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae36:	e091      	b.n	800af5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae38:	6839      	ldr	r1, [r7, #0]
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 fab2 	bl	800b3a4 <USBD_CtlError>
            err++;
 800ae40:	7afb      	ldrb	r3, [r7, #11]
 800ae42:	3301      	adds	r3, #1
 800ae44:	72fb      	strb	r3, [r7, #11]
          break;
 800ae46:	e089      	b.n	800af5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00b      	beq.n	800ae6c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	7c12      	ldrb	r2, [r2, #16]
 800ae60:	f107 0108 	add.w	r1, r7, #8
 800ae64:	4610      	mov	r0, r2
 800ae66:	4798      	blx	r3
 800ae68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae6a:	e077      	b.n	800af5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae6c:	6839      	ldr	r1, [r7, #0]
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fa98 	bl	800b3a4 <USBD_CtlError>
            err++;
 800ae74:	7afb      	ldrb	r3, [r7, #11]
 800ae76:	3301      	adds	r3, #1
 800ae78:	72fb      	strb	r3, [r7, #11]
          break;
 800ae7a:	e06f      	b.n	800af5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d00b      	beq.n	800aea0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	7c12      	ldrb	r2, [r2, #16]
 800ae94:	f107 0108 	add.w	r1, r7, #8
 800ae98:	4610      	mov	r0, r2
 800ae9a:	4798      	blx	r3
 800ae9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae9e:	e05d      	b.n	800af5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aea0:	6839      	ldr	r1, [r7, #0]
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 fa7e 	bl	800b3a4 <USBD_CtlError>
            err++;
 800aea8:	7afb      	ldrb	r3, [r7, #11]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	72fb      	strb	r3, [r7, #11]
          break;
 800aeae:	e055      	b.n	800af5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeb6:	691b      	ldr	r3, [r3, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d00b      	beq.n	800aed4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aec2:	691b      	ldr	r3, [r3, #16]
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	7c12      	ldrb	r2, [r2, #16]
 800aec8:	f107 0108 	add.w	r1, r7, #8
 800aecc:	4610      	mov	r0, r2
 800aece:	4798      	blx	r3
 800aed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aed2:	e043      	b.n	800af5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fa64 	bl	800b3a4 <USBD_CtlError>
            err++;
 800aedc:	7afb      	ldrb	r3, [r7, #11]
 800aede:	3301      	adds	r3, #1
 800aee0:	72fb      	strb	r3, [r7, #11]
          break;
 800aee2:	e03b      	b.n	800af5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeea:	695b      	ldr	r3, [r3, #20]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d00b      	beq.n	800af08 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aef6:	695b      	ldr	r3, [r3, #20]
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	7c12      	ldrb	r2, [r2, #16]
 800aefc:	f107 0108 	add.w	r1, r7, #8
 800af00:	4610      	mov	r0, r2
 800af02:	4798      	blx	r3
 800af04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af06:	e029      	b.n	800af5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fa4a 	bl	800b3a4 <USBD_CtlError>
            err++;
 800af10:	7afb      	ldrb	r3, [r7, #11]
 800af12:	3301      	adds	r3, #1
 800af14:	72fb      	strb	r3, [r7, #11]
          break;
 800af16:	e021      	b.n	800af5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af1e:	699b      	ldr	r3, [r3, #24]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d00b      	beq.n	800af3c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af2a:	699b      	ldr	r3, [r3, #24]
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	7c12      	ldrb	r2, [r2, #16]
 800af30:	f107 0108 	add.w	r1, r7, #8
 800af34:	4610      	mov	r0, r2
 800af36:	4798      	blx	r3
 800af38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af3a:	e00f      	b.n	800af5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af3c:	6839      	ldr	r1, [r7, #0]
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 fa30 	bl	800b3a4 <USBD_CtlError>
            err++;
 800af44:	7afb      	ldrb	r3, [r7, #11]
 800af46:	3301      	adds	r3, #1
 800af48:	72fb      	strb	r3, [r7, #11]
          break;
 800af4a:	e007      	b.n	800af5c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800af4c:	6839      	ldr	r1, [r7, #0]
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fa28 	bl	800b3a4 <USBD_CtlError>
          err++;
 800af54:	7afb      	ldrb	r3, [r7, #11]
 800af56:	3301      	adds	r3, #1
 800af58:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800af5a:	bf00      	nop
      }
      break;
 800af5c:	e037      	b.n	800afce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	7c1b      	ldrb	r3, [r3, #16]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d109      	bne.n	800af7a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af6e:	f107 0208 	add.w	r2, r7, #8
 800af72:	4610      	mov	r0, r2
 800af74:	4798      	blx	r3
 800af76:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af78:	e029      	b.n	800afce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800af7a:	6839      	ldr	r1, [r7, #0]
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 fa11 	bl	800b3a4 <USBD_CtlError>
        err++;
 800af82:	7afb      	ldrb	r3, [r7, #11]
 800af84:	3301      	adds	r3, #1
 800af86:	72fb      	strb	r3, [r7, #11]
      break;
 800af88:	e021      	b.n	800afce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	7c1b      	ldrb	r3, [r3, #16]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d10d      	bne.n	800afae <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af9a:	f107 0208 	add.w	r2, r7, #8
 800af9e:	4610      	mov	r0, r2
 800afa0:	4798      	blx	r3
 800afa2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	3301      	adds	r3, #1
 800afa8:	2207      	movs	r2, #7
 800afaa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afac:	e00f      	b.n	800afce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800afae:	6839      	ldr	r1, [r7, #0]
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 f9f7 	bl	800b3a4 <USBD_CtlError>
        err++;
 800afb6:	7afb      	ldrb	r3, [r7, #11]
 800afb8:	3301      	adds	r3, #1
 800afba:	72fb      	strb	r3, [r7, #11]
      break;
 800afbc:	e007      	b.n	800afce <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800afbe:	6839      	ldr	r1, [r7, #0]
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 f9ef 	bl	800b3a4 <USBD_CtlError>
      err++;
 800afc6:	7afb      	ldrb	r3, [r7, #11]
 800afc8:	3301      	adds	r3, #1
 800afca:	72fb      	strb	r3, [r7, #11]
      break;
 800afcc:	bf00      	nop
  }

  if (err != 0U)
 800afce:	7afb      	ldrb	r3, [r7, #11]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d11e      	bne.n	800b012 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	88db      	ldrh	r3, [r3, #6]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d016      	beq.n	800b00a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800afdc:	893b      	ldrh	r3, [r7, #8]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00e      	beq.n	800b000 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	88da      	ldrh	r2, [r3, #6]
 800afe6:	893b      	ldrh	r3, [r7, #8]
 800afe8:	4293      	cmp	r3, r2
 800afea:	bf28      	it	cs
 800afec:	4613      	movcs	r3, r2
 800afee:	b29b      	uxth	r3, r3
 800aff0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aff2:	893b      	ldrh	r3, [r7, #8]
 800aff4:	461a      	mov	r2, r3
 800aff6:	68f9      	ldr	r1, [r7, #12]
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 fa44 	bl	800b486 <USBD_CtlSendData>
 800affe:	e009      	b.n	800b014 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 f9ce 	bl	800b3a4 <USBD_CtlError>
 800b008:	e004      	b.n	800b014 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 fa95 	bl	800b53a <USBD_CtlSendStatus>
 800b010:	e000      	b.n	800b014 <USBD_GetDescriptor+0x320>
    return;
 800b012:	bf00      	nop
  }
}
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop

0800b01c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	889b      	ldrh	r3, [r3, #4]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d131      	bne.n	800b092 <USBD_SetAddress+0x76>
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	88db      	ldrh	r3, [r3, #6]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d12d      	bne.n	800b092 <USBD_SetAddress+0x76>
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	885b      	ldrh	r3, [r3, #2]
 800b03a:	2b7f      	cmp	r3, #127	; 0x7f
 800b03c:	d829      	bhi.n	800b092 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	885b      	ldrh	r3, [r3, #2]
 800b042:	b2db      	uxtb	r3, r3
 800b044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b048:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b050:	b2db      	uxtb	r3, r3
 800b052:	2b03      	cmp	r3, #3
 800b054:	d104      	bne.n	800b060 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b056:	6839      	ldr	r1, [r7, #0]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 f9a3 	bl	800b3a4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b05e:	e01d      	b.n	800b09c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	7bfa      	ldrb	r2, [r7, #15]
 800b064:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b068:	7bfb      	ldrb	r3, [r7, #15]
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 ff05 	bl	800be7c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 fa61 	bl	800b53a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b078:	7bfb      	ldrb	r3, [r7, #15]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d004      	beq.n	800b088 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2202      	movs	r2, #2
 800b082:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b086:	e009      	b.n	800b09c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b090:	e004      	b.n	800b09c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b092:	6839      	ldr	r1, [r7, #0]
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 f985 	bl	800b3a4 <USBD_CtlError>
  }
}
 800b09a:	bf00      	nop
 800b09c:	bf00      	nop
 800b09e:	3710      	adds	r7, #16
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	885b      	ldrh	r3, [r3, #2]
 800b0b6:	b2da      	uxtb	r2, r3
 800b0b8:	4b4c      	ldr	r3, [pc, #304]	; (800b1ec <USBD_SetConfig+0x148>)
 800b0ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b0bc:	4b4b      	ldr	r3, [pc, #300]	; (800b1ec <USBD_SetConfig+0x148>)
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d905      	bls.n	800b0d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b0c4:	6839      	ldr	r1, [r7, #0]
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 f96c 	bl	800b3a4 <USBD_CtlError>
    return USBD_FAIL;
 800b0cc:	2303      	movs	r3, #3
 800b0ce:	e088      	b.n	800b1e2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	2b02      	cmp	r3, #2
 800b0da:	d002      	beq.n	800b0e2 <USBD_SetConfig+0x3e>
 800b0dc:	2b03      	cmp	r3, #3
 800b0de:	d025      	beq.n	800b12c <USBD_SetConfig+0x88>
 800b0e0:	e071      	b.n	800b1c6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b0e2:	4b42      	ldr	r3, [pc, #264]	; (800b1ec <USBD_SetConfig+0x148>)
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d01c      	beq.n	800b124 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b0ea:	4b40      	ldr	r3, [pc, #256]	; (800b1ec <USBD_SetConfig+0x148>)
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b0f4:	4b3d      	ldr	r3, [pc, #244]	; (800b1ec <USBD_SetConfig+0x148>)
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f7ff f992 	bl	800a424 <USBD_SetClassConfig>
 800b100:	4603      	mov	r3, r0
 800b102:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b104:	7bfb      	ldrb	r3, [r7, #15]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d004      	beq.n	800b114 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b10a:	6839      	ldr	r1, [r7, #0]
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 f949 	bl	800b3a4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b112:	e065      	b.n	800b1e0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 fa10 	bl	800b53a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2203      	movs	r2, #3
 800b11e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b122:	e05d      	b.n	800b1e0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 fa08 	bl	800b53a <USBD_CtlSendStatus>
      break;
 800b12a:	e059      	b.n	800b1e0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b12c:	4b2f      	ldr	r3, [pc, #188]	; (800b1ec <USBD_SetConfig+0x148>)
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d112      	bne.n	800b15a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2202      	movs	r2, #2
 800b138:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b13c:	4b2b      	ldr	r3, [pc, #172]	; (800b1ec <USBD_SetConfig+0x148>)
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	461a      	mov	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b146:	4b29      	ldr	r3, [pc, #164]	; (800b1ec <USBD_SetConfig+0x148>)
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	4619      	mov	r1, r3
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f7ff f985 	bl	800a45c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 f9f1 	bl	800b53a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b158:	e042      	b.n	800b1e0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b15a:	4b24      	ldr	r3, [pc, #144]	; (800b1ec <USBD_SetConfig+0x148>)
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	461a      	mov	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	429a      	cmp	r2, r3
 800b166:	d02a      	beq.n	800b1be <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f7ff f973 	bl	800a45c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b176:	4b1d      	ldr	r3, [pc, #116]	; (800b1ec <USBD_SetConfig+0x148>)
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	461a      	mov	r2, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b180:	4b1a      	ldr	r3, [pc, #104]	; (800b1ec <USBD_SetConfig+0x148>)
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	4619      	mov	r1, r3
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f7ff f94c 	bl	800a424 <USBD_SetClassConfig>
 800b18c:	4603      	mov	r3, r0
 800b18e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b190:	7bfb      	ldrb	r3, [r7, #15]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d00f      	beq.n	800b1b6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 f903 	bl	800b3a4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f7ff f958 	bl	800a45c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2202      	movs	r2, #2
 800b1b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b1b4:	e014      	b.n	800b1e0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 f9bf 	bl	800b53a <USBD_CtlSendStatus>
      break;
 800b1bc:	e010      	b.n	800b1e0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 f9bb 	bl	800b53a <USBD_CtlSendStatus>
      break;
 800b1c4:	e00c      	b.n	800b1e0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b1c6:	6839      	ldr	r1, [r7, #0]
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f8eb 	bl	800b3a4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b1ce:	4b07      	ldr	r3, [pc, #28]	; (800b1ec <USBD_SetConfig+0x148>)
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f7ff f941 	bl	800a45c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b1da:	2303      	movs	r3, #3
 800b1dc:	73fb      	strb	r3, [r7, #15]
      break;
 800b1de:	bf00      	nop
  }

  return ret;
 800b1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	200004dc 	.word	0x200004dc

0800b1f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	88db      	ldrh	r3, [r3, #6]
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d004      	beq.n	800b20c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b202:	6839      	ldr	r1, [r7, #0]
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 f8cd 	bl	800b3a4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b20a:	e023      	b.n	800b254 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b212:	b2db      	uxtb	r3, r3
 800b214:	2b02      	cmp	r3, #2
 800b216:	dc02      	bgt.n	800b21e <USBD_GetConfig+0x2e>
 800b218:	2b00      	cmp	r3, #0
 800b21a:	dc03      	bgt.n	800b224 <USBD_GetConfig+0x34>
 800b21c:	e015      	b.n	800b24a <USBD_GetConfig+0x5a>
 800b21e:	2b03      	cmp	r3, #3
 800b220:	d00b      	beq.n	800b23a <USBD_GetConfig+0x4a>
 800b222:	e012      	b.n	800b24a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	3308      	adds	r3, #8
 800b22e:	2201      	movs	r2, #1
 800b230:	4619      	mov	r1, r3
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f927 	bl	800b486 <USBD_CtlSendData>
        break;
 800b238:	e00c      	b.n	800b254 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	3304      	adds	r3, #4
 800b23e:	2201      	movs	r2, #1
 800b240:	4619      	mov	r1, r3
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 f91f 	bl	800b486 <USBD_CtlSendData>
        break;
 800b248:	e004      	b.n	800b254 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b24a:	6839      	ldr	r1, [r7, #0]
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f000 f8a9 	bl	800b3a4 <USBD_CtlError>
        break;
 800b252:	bf00      	nop
}
 800b254:	bf00      	nop
 800b256:	3708      	adds	r7, #8
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	3b01      	subs	r3, #1
 800b270:	2b02      	cmp	r3, #2
 800b272:	d81e      	bhi.n	800b2b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	88db      	ldrh	r3, [r3, #6]
 800b278:	2b02      	cmp	r3, #2
 800b27a:	d004      	beq.n	800b286 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b27c:	6839      	ldr	r1, [r7, #0]
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f890 	bl	800b3a4 <USBD_CtlError>
        break;
 800b284:	e01a      	b.n	800b2bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2201      	movs	r2, #1
 800b28a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b292:	2b00      	cmp	r3, #0
 800b294:	d005      	beq.n	800b2a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	f043 0202 	orr.w	r2, r3, #2
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	330c      	adds	r3, #12
 800b2a6:	2202      	movs	r2, #2
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 f8eb 	bl	800b486 <USBD_CtlSendData>
      break;
 800b2b0:	e004      	b.n	800b2bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b2b2:	6839      	ldr	r1, [r7, #0]
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 f875 	bl	800b3a4 <USBD_CtlError>
      break;
 800b2ba:	bf00      	nop
  }
}
 800b2bc:	bf00      	nop
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	885b      	ldrh	r3, [r3, #2]
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d106      	bne.n	800b2e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2201      	movs	r2, #1
 800b2da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 f92b 	bl	800b53a <USBD_CtlSendStatus>
  }
}
 800b2e4:	bf00      	nop
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	3b01      	subs	r3, #1
 800b300:	2b02      	cmp	r3, #2
 800b302:	d80b      	bhi.n	800b31c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	885b      	ldrh	r3, [r3, #2]
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d10c      	bne.n	800b326 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 f910 	bl	800b53a <USBD_CtlSendStatus>
      }
      break;
 800b31a:	e004      	b.n	800b326 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b31c:	6839      	ldr	r1, [r7, #0]
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 f840 	bl	800b3a4 <USBD_CtlError>
      break;
 800b324:	e000      	b.n	800b328 <USBD_ClrFeature+0x3c>
      break;
 800b326:	bf00      	nop
  }
}
 800b328:	bf00      	nop
 800b32a:	3708      	adds	r7, #8
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	781a      	ldrb	r2, [r3, #0]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	3301      	adds	r3, #1
 800b34a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	781a      	ldrb	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	3301      	adds	r3, #1
 800b358:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f7ff fa92 	bl	800a884 <SWAPBYTE>
 800b360:	4603      	mov	r3, r0
 800b362:	461a      	mov	r2, r3
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	3301      	adds	r3, #1
 800b36c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	3301      	adds	r3, #1
 800b372:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f7ff fa85 	bl	800a884 <SWAPBYTE>
 800b37a:	4603      	mov	r3, r0
 800b37c:	461a      	mov	r2, r3
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	3301      	adds	r3, #1
 800b386:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	3301      	adds	r3, #1
 800b38c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b38e:	68f8      	ldr	r0, [r7, #12]
 800b390:	f7ff fa78 	bl	800a884 <SWAPBYTE>
 800b394:	4603      	mov	r3, r0
 800b396:	461a      	mov	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	80da      	strh	r2, [r3, #6]
}
 800b39c:	bf00      	nop
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3ae:	2180      	movs	r1, #128	; 0x80
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fcc9 	bl	800bd48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b3b6:	2100      	movs	r1, #0
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 fcc5 	bl	800bd48 <USBD_LL_StallEP>
}
 800b3be:	bf00      	nop
 800b3c0:	3708      	adds	r7, #8
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b086      	sub	sp, #24
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	60f8      	str	r0, [r7, #12]
 800b3ce:	60b9      	str	r1, [r7, #8]
 800b3d0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d036      	beq.n	800b44a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b3e0:	6938      	ldr	r0, [r7, #16]
 800b3e2:	f000 f836 	bl	800b452 <USBD_GetLen>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	005b      	lsls	r3, r3, #1
 800b3ee:	b29a      	uxth	r2, r3
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b3f4:	7dfb      	ldrb	r3, [r7, #23]
 800b3f6:	68ba      	ldr	r2, [r7, #8]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	7812      	ldrb	r2, [r2, #0]
 800b3fe:	701a      	strb	r2, [r3, #0]
  idx++;
 800b400:	7dfb      	ldrb	r3, [r7, #23]
 800b402:	3301      	adds	r3, #1
 800b404:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b406:	7dfb      	ldrb	r3, [r7, #23]
 800b408:	68ba      	ldr	r2, [r7, #8]
 800b40a:	4413      	add	r3, r2
 800b40c:	2203      	movs	r2, #3
 800b40e:	701a      	strb	r2, [r3, #0]
  idx++;
 800b410:	7dfb      	ldrb	r3, [r7, #23]
 800b412:	3301      	adds	r3, #1
 800b414:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b416:	e013      	b.n	800b440 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b418:	7dfb      	ldrb	r3, [r7, #23]
 800b41a:	68ba      	ldr	r2, [r7, #8]
 800b41c:	4413      	add	r3, r2
 800b41e:	693a      	ldr	r2, [r7, #16]
 800b420:	7812      	ldrb	r2, [r2, #0]
 800b422:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	3301      	adds	r3, #1
 800b428:	613b      	str	r3, [r7, #16]
    idx++;
 800b42a:	7dfb      	ldrb	r3, [r7, #23]
 800b42c:	3301      	adds	r3, #1
 800b42e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b430:	7dfb      	ldrb	r3, [r7, #23]
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	4413      	add	r3, r2
 800b436:	2200      	movs	r2, #0
 800b438:	701a      	strb	r2, [r3, #0]
    idx++;
 800b43a:	7dfb      	ldrb	r3, [r7, #23]
 800b43c:	3301      	adds	r3, #1
 800b43e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d1e7      	bne.n	800b418 <USBD_GetString+0x52>
 800b448:	e000      	b.n	800b44c <USBD_GetString+0x86>
    return;
 800b44a:	bf00      	nop
  }
}
 800b44c:	3718      	adds	r7, #24
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b452:	b480      	push	{r7}
 800b454:	b085      	sub	sp, #20
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b45a:	2300      	movs	r3, #0
 800b45c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b462:	e005      	b.n	800b470 <USBD_GetLen+0x1e>
  {
    len++;
 800b464:	7bfb      	ldrb	r3, [r7, #15]
 800b466:	3301      	adds	r3, #1
 800b468:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	3301      	adds	r3, #1
 800b46e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1f5      	bne.n	800b464 <USBD_GetLen+0x12>
  }

  return len;
 800b478:	7bfb      	ldrb	r3, [r7, #15]
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3714      	adds	r7, #20
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr

0800b486 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b084      	sub	sp, #16
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	60f8      	str	r0, [r7, #12]
 800b48e:	60b9      	str	r1, [r7, #8]
 800b490:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2202      	movs	r2, #2
 800b496:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	68ba      	ldr	r2, [r7, #8]
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	68f8      	ldr	r0, [r7, #12]
 800b4ae:	f000 fd1b 	bl	800bee8 <USBD_LL_Transmit>

  return USBD_OK;
 800b4b2:	2300      	movs	r3, #0
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3710      	adds	r7, #16
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	68ba      	ldr	r2, [r7, #8]
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	68f8      	ldr	r0, [r7, #12]
 800b4d0:	f000 fd0a 	bl	800bee8 <USBD_LL_Transmit>

  return USBD_OK;
 800b4d4:	2300      	movs	r3, #0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3710      	adds	r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b4de:	b580      	push	{r7, lr}
 800b4e0:	b084      	sub	sp, #16
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	60f8      	str	r0, [r7, #12]
 800b4e6:	60b9      	str	r1, [r7, #8]
 800b4e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2203      	movs	r2, #3
 800b4ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	68ba      	ldr	r2, [r7, #8]
 800b506:	2100      	movs	r1, #0
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f000 fd25 	bl	800bf58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	3710      	adds	r7, #16
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	68ba      	ldr	r2, [r7, #8]
 800b528:	2100      	movs	r1, #0
 800b52a:	68f8      	ldr	r0, [r7, #12]
 800b52c:	f000 fd14 	bl	800bf58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b530:	2300      	movs	r3, #0
}
 800b532:	4618      	mov	r0, r3
 800b534:	3710      	adds	r7, #16
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b53a:	b580      	push	{r7, lr}
 800b53c:	b082      	sub	sp, #8
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2204      	movs	r2, #4
 800b546:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b54a:	2300      	movs	r3, #0
 800b54c:	2200      	movs	r2, #0
 800b54e:	2100      	movs	r1, #0
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 fcc9 	bl	800bee8 <USBD_LL_Transmit>

  return USBD_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2205      	movs	r2, #5
 800b56c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b570:	2300      	movs	r3, #0
 800b572:	2200      	movs	r2, #0
 800b574:	2100      	movs	r1, #0
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 fcee 	bl	800bf58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b57c:	2300      	movs	r3, #0
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3708      	adds	r7, #8
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
	...

0800b588 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b58c:	2200      	movs	r2, #0
 800b58e:	4912      	ldr	r1, [pc, #72]	; (800b5d8 <MX_USB_DEVICE_Init+0x50>)
 800b590:	4812      	ldr	r0, [pc, #72]	; (800b5dc <MX_USB_DEVICE_Init+0x54>)
 800b592:	f7fe fed9 	bl	800a348 <USBD_Init>
 800b596:	4603      	mov	r3, r0
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d001      	beq.n	800b5a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b59c:	f7f6 f964 	bl	8001868 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b5a0:	490f      	ldr	r1, [pc, #60]	; (800b5e0 <MX_USB_DEVICE_Init+0x58>)
 800b5a2:	480e      	ldr	r0, [pc, #56]	; (800b5dc <MX_USB_DEVICE_Init+0x54>)
 800b5a4:	f7fe ff00 	bl	800a3a8 <USBD_RegisterClass>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d001      	beq.n	800b5b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b5ae:	f7f6 f95b 	bl	8001868 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b5b2:	490c      	ldr	r1, [pc, #48]	; (800b5e4 <MX_USB_DEVICE_Init+0x5c>)
 800b5b4:	4809      	ldr	r0, [pc, #36]	; (800b5dc <MX_USB_DEVICE_Init+0x54>)
 800b5b6:	f7fe fe51 	bl	800a25c <USBD_CDC_RegisterInterface>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d001      	beq.n	800b5c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b5c0:	f7f6 f952 	bl	8001868 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b5c4:	4805      	ldr	r0, [pc, #20]	; (800b5dc <MX_USB_DEVICE_Init+0x54>)
 800b5c6:	f7fe ff16 	bl	800a3f6 <USBD_Start>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d001      	beq.n	800b5d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b5d0:	f7f6 f94a 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b5d4:	bf00      	nop
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	20000130 	.word	0x20000130
 800b5dc:	200004e0 	.word	0x200004e0
 800b5e0:	20000018 	.word	0x20000018
 800b5e4:	2000011c 	.word	0x2000011c

0800b5e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	4905      	ldr	r1, [pc, #20]	; (800b604 <CDC_Init_FS+0x1c>)
 800b5f0:	4805      	ldr	r0, [pc, #20]	; (800b608 <CDC_Init_FS+0x20>)
 800b5f2:	f7fe fe48 	bl	800a286 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b5f6:	4905      	ldr	r1, [pc, #20]	; (800b60c <CDC_Init_FS+0x24>)
 800b5f8:	4803      	ldr	r0, [pc, #12]	; (800b608 <CDC_Init_FS+0x20>)
 800b5fa:	f7fe fe62 	bl	800a2c2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b5fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b600:	4618      	mov	r0, r3
 800b602:	bd80      	pop	{r7, pc}
 800b604:	20000b98 	.word	0x20000b98
 800b608:	200004e0 	.word	0x200004e0
 800b60c:	200007b0 	.word	0x200007b0

0800b610 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b610:	b480      	push	{r7}
 800b612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b614:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b616:	4618      	mov	r0, r3
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	4603      	mov	r3, r0
 800b628:	6039      	str	r1, [r7, #0]
 800b62a:	71fb      	strb	r3, [r7, #7]
 800b62c:	4613      	mov	r3, r2
 800b62e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b630:	79fb      	ldrb	r3, [r7, #7]
 800b632:	2b23      	cmp	r3, #35	; 0x23
 800b634:	d84a      	bhi.n	800b6cc <CDC_Control_FS+0xac>
 800b636:	a201      	add	r2, pc, #4	; (adr r2, 800b63c <CDC_Control_FS+0x1c>)
 800b638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b63c:	0800b6cd 	.word	0x0800b6cd
 800b640:	0800b6cd 	.word	0x0800b6cd
 800b644:	0800b6cd 	.word	0x0800b6cd
 800b648:	0800b6cd 	.word	0x0800b6cd
 800b64c:	0800b6cd 	.word	0x0800b6cd
 800b650:	0800b6cd 	.word	0x0800b6cd
 800b654:	0800b6cd 	.word	0x0800b6cd
 800b658:	0800b6cd 	.word	0x0800b6cd
 800b65c:	0800b6cd 	.word	0x0800b6cd
 800b660:	0800b6cd 	.word	0x0800b6cd
 800b664:	0800b6cd 	.word	0x0800b6cd
 800b668:	0800b6cd 	.word	0x0800b6cd
 800b66c:	0800b6cd 	.word	0x0800b6cd
 800b670:	0800b6cd 	.word	0x0800b6cd
 800b674:	0800b6cd 	.word	0x0800b6cd
 800b678:	0800b6cd 	.word	0x0800b6cd
 800b67c:	0800b6cd 	.word	0x0800b6cd
 800b680:	0800b6cd 	.word	0x0800b6cd
 800b684:	0800b6cd 	.word	0x0800b6cd
 800b688:	0800b6cd 	.word	0x0800b6cd
 800b68c:	0800b6cd 	.word	0x0800b6cd
 800b690:	0800b6cd 	.word	0x0800b6cd
 800b694:	0800b6cd 	.word	0x0800b6cd
 800b698:	0800b6cd 	.word	0x0800b6cd
 800b69c:	0800b6cd 	.word	0x0800b6cd
 800b6a0:	0800b6cd 	.word	0x0800b6cd
 800b6a4:	0800b6cd 	.word	0x0800b6cd
 800b6a8:	0800b6cd 	.word	0x0800b6cd
 800b6ac:	0800b6cd 	.word	0x0800b6cd
 800b6b0:	0800b6cd 	.word	0x0800b6cd
 800b6b4:	0800b6cd 	.word	0x0800b6cd
 800b6b8:	0800b6cd 	.word	0x0800b6cd
 800b6bc:	0800b6cd 	.word	0x0800b6cd
 800b6c0:	0800b6cd 	.word	0x0800b6cd
 800b6c4:	0800b6cd 	.word	0x0800b6cd
 800b6c8:	0800b6cd 	.word	0x0800b6cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b6cc:	bf00      	nop
  }

  return (USBD_OK);
 800b6ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b6e6:	6879      	ldr	r1, [r7, #4]
 800b6e8:	4805      	ldr	r0, [pc, #20]	; (800b700 <CDC_Receive_FS+0x24>)
 800b6ea:	f7fe fdea 	bl	800a2c2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b6ee:	4804      	ldr	r0, [pc, #16]	; (800b700 <CDC_Receive_FS+0x24>)
 800b6f0:	f7fe fe00 	bl	800a2f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b6f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3708      	adds	r7, #8
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	200004e0 	.word	0x200004e0

0800b704 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b704:	b480      	push	{r7}
 800b706:	b087      	sub	sp, #28
 800b708:	af00      	add	r7, sp, #0
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	60b9      	str	r1, [r7, #8]
 800b70e:	4613      	mov	r3, r2
 800b710:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b712:	2300      	movs	r3, #0
 800b714:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b716:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	371c      	adds	r7, #28
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr
	...

0800b728 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	4603      	mov	r3, r0
 800b730:	6039      	str	r1, [r7, #0]
 800b732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	2212      	movs	r2, #18
 800b738:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b73a:	4b03      	ldr	r3, [pc, #12]	; (800b748 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	370c      	adds	r7, #12
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr
 800b748:	20000150 	.word	0x20000150

0800b74c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	4603      	mov	r3, r0
 800b754:	6039      	str	r1, [r7, #0]
 800b756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	2204      	movs	r2, #4
 800b75c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b75e:	4b03      	ldr	r3, [pc, #12]	; (800b76c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b760:	4618      	mov	r0, r3
 800b762:	370c      	adds	r7, #12
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr
 800b76c:	20000170 	.word	0x20000170

0800b770 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	4603      	mov	r3, r0
 800b778:	6039      	str	r1, [r7, #0]
 800b77a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b77c:	79fb      	ldrb	r3, [r7, #7]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d105      	bne.n	800b78e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	4907      	ldr	r1, [pc, #28]	; (800b7a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b786:	4808      	ldr	r0, [pc, #32]	; (800b7a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b788:	f7ff fe1d 	bl	800b3c6 <USBD_GetString>
 800b78c:	e004      	b.n	800b798 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	4904      	ldr	r1, [pc, #16]	; (800b7a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b792:	4805      	ldr	r0, [pc, #20]	; (800b7a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b794:	f7ff fe17 	bl	800b3c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b798:	4b02      	ldr	r3, [pc, #8]	; (800b7a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3708      	adds	r7, #8
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	20000f80 	.word	0x20000f80
 800b7a8:	0800c10c 	.word	0x0800c10c

0800b7ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	6039      	str	r1, [r7, #0]
 800b7b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b7b8:	683a      	ldr	r2, [r7, #0]
 800b7ba:	4904      	ldr	r1, [pc, #16]	; (800b7cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b7bc:	4804      	ldr	r0, [pc, #16]	; (800b7d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b7be:	f7ff fe02 	bl	800b3c6 <USBD_GetString>
  return USBD_StrDesc;
 800b7c2:	4b02      	ldr	r3, [pc, #8]	; (800b7cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3708      	adds	r7, #8
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	20000f80 	.word	0x20000f80
 800b7d0:	0800c124 	.word	0x0800c124

0800b7d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	4603      	mov	r3, r0
 800b7dc:	6039      	str	r1, [r7, #0]
 800b7de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	221a      	movs	r2, #26
 800b7e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b7e6:	f000 f855 	bl	800b894 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b7ea:	4b02      	ldr	r3, [pc, #8]	; (800b7f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	20000174 	.word	0x20000174

0800b7f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	4603      	mov	r3, r0
 800b800:	6039      	str	r1, [r7, #0]
 800b802:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b804:	79fb      	ldrb	r3, [r7, #7]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d105      	bne.n	800b816 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	4907      	ldr	r1, [pc, #28]	; (800b82c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b80e:	4808      	ldr	r0, [pc, #32]	; (800b830 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b810:	f7ff fdd9 	bl	800b3c6 <USBD_GetString>
 800b814:	e004      	b.n	800b820 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b816:	683a      	ldr	r2, [r7, #0]
 800b818:	4904      	ldr	r1, [pc, #16]	; (800b82c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b81a:	4805      	ldr	r0, [pc, #20]	; (800b830 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b81c:	f7ff fdd3 	bl	800b3c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b820:	4b02      	ldr	r3, [pc, #8]	; (800b82c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b822:	4618      	mov	r0, r3
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	20000f80 	.word	0x20000f80
 800b830:	0800c138 	.word	0x0800c138

0800b834 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	4603      	mov	r3, r0
 800b83c:	6039      	str	r1, [r7, #0]
 800b83e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b840:	79fb      	ldrb	r3, [r7, #7]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d105      	bne.n	800b852 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b846:	683a      	ldr	r2, [r7, #0]
 800b848:	4907      	ldr	r1, [pc, #28]	; (800b868 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b84a:	4808      	ldr	r0, [pc, #32]	; (800b86c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b84c:	f7ff fdbb 	bl	800b3c6 <USBD_GetString>
 800b850:	e004      	b.n	800b85c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b852:	683a      	ldr	r2, [r7, #0]
 800b854:	4904      	ldr	r1, [pc, #16]	; (800b868 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b856:	4805      	ldr	r0, [pc, #20]	; (800b86c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b858:	f7ff fdb5 	bl	800b3c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b85c:	4b02      	ldr	r3, [pc, #8]	; (800b868 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	20000f80 	.word	0x20000f80
 800b86c:	0800c144 	.word	0x0800c144

0800b870 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	4603      	mov	r3, r0
 800b878:	6039      	str	r1, [r7, #0]
 800b87a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	220c      	movs	r2, #12
 800b880:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b882:	4b03      	ldr	r3, [pc, #12]	; (800b890 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b884:	4618      	mov	r0, r3
 800b886:	370c      	adds	r7, #12
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr
 800b890:	20000164 	.word	0x20000164

0800b894 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b89a:	4b0f      	ldr	r3, [pc, #60]	; (800b8d8 <Get_SerialNum+0x44>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b8a0:	4b0e      	ldr	r3, [pc, #56]	; (800b8dc <Get_SerialNum+0x48>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b8a6:	4b0e      	ldr	r3, [pc, #56]	; (800b8e0 <Get_SerialNum+0x4c>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	4413      	add	r3, r2
 800b8b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d009      	beq.n	800b8ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b8ba:	2208      	movs	r2, #8
 800b8bc:	4909      	ldr	r1, [pc, #36]	; (800b8e4 <Get_SerialNum+0x50>)
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	f000 f814 	bl	800b8ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b8c4:	2204      	movs	r2, #4
 800b8c6:	4908      	ldr	r1, [pc, #32]	; (800b8e8 <Get_SerialNum+0x54>)
 800b8c8:	68b8      	ldr	r0, [r7, #8]
 800b8ca:	f000 f80f 	bl	800b8ec <IntToUnicode>
  }
}
 800b8ce:	bf00      	nop
 800b8d0:	3710      	adds	r7, #16
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	1fff7590 	.word	0x1fff7590
 800b8dc:	1fff7594 	.word	0x1fff7594
 800b8e0:	1fff7598 	.word	0x1fff7598
 800b8e4:	20000176 	.word	0x20000176
 800b8e8:	20000186 	.word	0x20000186

0800b8ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b087      	sub	sp, #28
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b8fe:	2300      	movs	r3, #0
 800b900:	75fb      	strb	r3, [r7, #23]
 800b902:	e027      	b.n	800b954 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	0f1b      	lsrs	r3, r3, #28
 800b908:	2b09      	cmp	r3, #9
 800b90a:	d80b      	bhi.n	800b924 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	0f1b      	lsrs	r3, r3, #28
 800b910:	b2da      	uxtb	r2, r3
 800b912:	7dfb      	ldrb	r3, [r7, #23]
 800b914:	005b      	lsls	r3, r3, #1
 800b916:	4619      	mov	r1, r3
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	440b      	add	r3, r1
 800b91c:	3230      	adds	r2, #48	; 0x30
 800b91e:	b2d2      	uxtb	r2, r2
 800b920:	701a      	strb	r2, [r3, #0]
 800b922:	e00a      	b.n	800b93a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	0f1b      	lsrs	r3, r3, #28
 800b928:	b2da      	uxtb	r2, r3
 800b92a:	7dfb      	ldrb	r3, [r7, #23]
 800b92c:	005b      	lsls	r3, r3, #1
 800b92e:	4619      	mov	r1, r3
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	440b      	add	r3, r1
 800b934:	3237      	adds	r2, #55	; 0x37
 800b936:	b2d2      	uxtb	r2, r2
 800b938:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	011b      	lsls	r3, r3, #4
 800b93e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b940:	7dfb      	ldrb	r3, [r7, #23]
 800b942:	005b      	lsls	r3, r3, #1
 800b944:	3301      	adds	r3, #1
 800b946:	68ba      	ldr	r2, [r7, #8]
 800b948:	4413      	add	r3, r2
 800b94a:	2200      	movs	r2, #0
 800b94c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b94e:	7dfb      	ldrb	r3, [r7, #23]
 800b950:	3301      	adds	r3, #1
 800b952:	75fb      	strb	r3, [r7, #23]
 800b954:	7dfa      	ldrb	r2, [r7, #23]
 800b956:	79fb      	ldrb	r3, [r7, #7]
 800b958:	429a      	cmp	r2, r3
 800b95a:	d3d3      	bcc.n	800b904 <IntToUnicode+0x18>
  }
}
 800b95c:	bf00      	nop
 800b95e:	bf00      	nop
 800b960:	371c      	adds	r7, #28
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr
	...

0800b96c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b09c      	sub	sp, #112	; 0x70
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b974:	f107 0310 	add.w	r3, r7, #16
 800b978:	2260      	movs	r2, #96	; 0x60
 800b97a:	2100      	movs	r1, #0
 800b97c:	4618      	mov	r0, r3
 800b97e:	f000 fbb1 	bl	800c0e4 <memset>
  if(pcdHandle->Instance==USB)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4a15      	ldr	r2, [pc, #84]	; (800b9dc <HAL_PCD_MspInit+0x70>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d122      	bne.n	800b9d2 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b98c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b990:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b992:	2300      	movs	r3, #0
 800b994:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b996:	f107 0310 	add.w	r3, r7, #16
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7fa fb10 	bl	8005fc0 <HAL_RCCEx_PeriphCLKConfig>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d001      	beq.n	800b9aa <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800b9a6:	f7f5 ff5f 	bl	8001868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b9aa:	4b0d      	ldr	r3, [pc, #52]	; (800b9e0 <HAL_PCD_MspInit+0x74>)
 800b9ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9ae:	4a0c      	ldr	r2, [pc, #48]	; (800b9e0 <HAL_PCD_MspInit+0x74>)
 800b9b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b9b4:	6593      	str	r3, [r2, #88]	; 0x58
 800b9b6:	4b0a      	ldr	r3, [pc, #40]	; (800b9e0 <HAL_PCD_MspInit+0x74>)
 800b9b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b9be:	60fb      	str	r3, [r7, #12]
 800b9c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	2043      	movs	r0, #67	; 0x43
 800b9c8:	f7f7 f97d 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b9cc:	2043      	movs	r0, #67	; 0x43
 800b9ce:	f7f7 f996 	bl	8002cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b9d2:	bf00      	nop
 800b9d4:	3770      	adds	r7, #112	; 0x70
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	40006800 	.word	0x40006800
 800b9e0:	40021000 	.word	0x40021000

0800b9e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	4610      	mov	r0, r2
 800b9fc:	f7fe fd46 	bl	800a48c <USBD_LL_SetupStage>
}
 800ba00:	bf00      	nop
 800ba02:	3708      	adds	r7, #8
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	460b      	mov	r3, r1
 800ba12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800ba1a:	78fa      	ldrb	r2, [r7, #3]
 800ba1c:	6879      	ldr	r1, [r7, #4]
 800ba1e:	4613      	mov	r3, r2
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	4413      	add	r3, r2
 800ba24:	00db      	lsls	r3, r3, #3
 800ba26:	440b      	add	r3, r1
 800ba28:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	78fb      	ldrb	r3, [r7, #3]
 800ba30:	4619      	mov	r1, r3
 800ba32:	f7fe fd80 	bl	800a536 <USBD_LL_DataOutStage>
}
 800ba36:	bf00      	nop
 800ba38:	3708      	adds	r7, #8
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba3e:	b580      	push	{r7, lr}
 800ba40:	b082      	sub	sp, #8
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
 800ba46:	460b      	mov	r3, r1
 800ba48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800ba50:	78fa      	ldrb	r2, [r7, #3]
 800ba52:	6879      	ldr	r1, [r7, #4]
 800ba54:	4613      	mov	r3, r2
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	4413      	add	r3, r2
 800ba5a:	00db      	lsls	r3, r3, #3
 800ba5c:	440b      	add	r3, r1
 800ba5e:	3340      	adds	r3, #64	; 0x40
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	78fb      	ldrb	r3, [r7, #3]
 800ba64:	4619      	mov	r1, r3
 800ba66:	f7fe fdc9 	bl	800a5fc <USBD_LL_DataInStage>
}
 800ba6a:	bf00      	nop
 800ba6c:	3708      	adds	r7, #8
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b082      	sub	sp, #8
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7fe fedd 	bl	800a840 <USBD_LL_SOF>
}
 800ba86:	bf00      	nop
 800ba88:	3708      	adds	r7, #8
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b084      	sub	sp, #16
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ba96:	2301      	movs	r3, #1
 800ba98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	2b02      	cmp	r3, #2
 800baa0:	d001      	beq.n	800baa6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800baa2:	f7f5 fee1 	bl	8001868 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800baac:	7bfa      	ldrb	r2, [r7, #15]
 800baae:	4611      	mov	r1, r2
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7fe fe87 	bl	800a7c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800babc:	4618      	mov	r0, r3
 800babe:	f7fe fe33 	bl	800a728 <USBD_LL_Reset>
}
 800bac2:	bf00      	nop
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
	...

0800bacc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800bada:	4618      	mov	r0, r3
 800badc:	f7fe fe82 	bl	800a7e4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	699b      	ldr	r3, [r3, #24]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d005      	beq.n	800baf4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bae8:	4b04      	ldr	r3, [pc, #16]	; (800bafc <HAL_PCD_SuspendCallback+0x30>)
 800baea:	691b      	ldr	r3, [r3, #16]
 800baec:	4a03      	ldr	r2, [pc, #12]	; (800bafc <HAL_PCD_SuspendCallback+0x30>)
 800baee:	f043 0306 	orr.w	r3, r3, #6
 800baf2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800baf4:	bf00      	nop
 800baf6:	3708      	adds	r7, #8
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	e000ed00 	.word	0xe000ed00

0800bb00 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	699b      	ldr	r3, [r3, #24]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d007      	beq.n	800bb20 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb10:	4b08      	ldr	r3, [pc, #32]	; (800bb34 <HAL_PCD_ResumeCallback+0x34>)
 800bb12:	691b      	ldr	r3, [r3, #16]
 800bb14:	4a07      	ldr	r2, [pc, #28]	; (800bb34 <HAL_PCD_ResumeCallback+0x34>)
 800bb16:	f023 0306 	bic.w	r3, r3, #6
 800bb1a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bb1c:	f000 fab6 	bl	800c08c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7fe fe72 	bl	800a810 <USBD_LL_Resume>
}
 800bb2c:	bf00      	nop
 800bb2e:	3708      	adds	r7, #8
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	e000ed00 	.word	0xe000ed00

0800bb38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800bb40:	f7f9 fc22 	bl	8005388 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bb44:	4a2b      	ldr	r2, [pc, #172]	; (800bbf4 <USBD_LL_Init+0xbc>)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	4a29      	ldr	r2, [pc, #164]	; (800bbf4 <USBD_LL_Init+0xbc>)
 800bb50:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800bb54:	4b27      	ldr	r3, [pc, #156]	; (800bbf4 <USBD_LL_Init+0xbc>)
 800bb56:	4a28      	ldr	r2, [pc, #160]	; (800bbf8 <USBD_LL_Init+0xc0>)
 800bb58:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bb5a:	4b26      	ldr	r3, [pc, #152]	; (800bbf4 <USBD_LL_Init+0xbc>)
 800bb5c:	2208      	movs	r2, #8
 800bb5e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bb60:	4b24      	ldr	r3, [pc, #144]	; (800bbf4 <USBD_LL_Init+0xbc>)
 800bb62:	2202      	movs	r2, #2
 800bb64:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bb66:	4b23      	ldr	r3, [pc, #140]	; (800bbf4 <USBD_LL_Init+0xbc>)
 800bb68:	2202      	movs	r2, #2
 800bb6a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bb6c:	4b21      	ldr	r3, [pc, #132]	; (800bbf4 <USBD_LL_Init+0xbc>)
 800bb6e:	2200      	movs	r2, #0
 800bb70:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bb72:	4b20      	ldr	r3, [pc, #128]	; (800bbf4 <USBD_LL_Init+0xbc>)
 800bb74:	2200      	movs	r2, #0
 800bb76:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bb78:	4b1e      	ldr	r3, [pc, #120]	; (800bbf4 <USBD_LL_Init+0xbc>)
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bb7e:	4b1d      	ldr	r3, [pc, #116]	; (800bbf4 <USBD_LL_Init+0xbc>)
 800bb80:	2200      	movs	r2, #0
 800bb82:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bb84:	481b      	ldr	r0, [pc, #108]	; (800bbf4 <USBD_LL_Init+0xbc>)
 800bb86:	f7f7 fe0f 	bl	80037a8 <HAL_PCD_Init>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d001      	beq.n	800bb94 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800bb90:	f7f5 fe6a 	bl	8001868 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb9a:	2318      	movs	r3, #24
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	2100      	movs	r1, #0
 800bba0:	f7f9 fb1f 	bl	80051e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bbaa:	2358      	movs	r3, #88	; 0x58
 800bbac:	2200      	movs	r2, #0
 800bbae:	2180      	movs	r1, #128	; 0x80
 800bbb0:	f7f9 fb17 	bl	80051e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bbba:	23c0      	movs	r3, #192	; 0xc0
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	2181      	movs	r1, #129	; 0x81
 800bbc0:	f7f9 fb0f 	bl	80051e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bbca:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bbce:	2200      	movs	r2, #0
 800bbd0:	2101      	movs	r1, #1
 800bbd2:	f7f9 fb06 	bl	80051e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bbdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	2182      	movs	r1, #130	; 0x82
 800bbe4:	f7f9 fafd 	bl	80051e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bbe8:	2300      	movs	r3, #0
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3708      	adds	r7, #8
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	20001180 	.word	0x20001180
 800bbf8:	40006800 	.word	0x40006800

0800bbfc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc04:	2300      	movs	r3, #0
 800bc06:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7f7 fedf 	bl	80039d6 <HAL_PCD_Start>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bc1c:	7bbb      	ldrb	r3, [r7, #14]
 800bc1e:	2b03      	cmp	r3, #3
 800bc20:	d816      	bhi.n	800bc50 <USBD_LL_Start+0x54>
 800bc22:	a201      	add	r2, pc, #4	; (adr r2, 800bc28 <USBD_LL_Start+0x2c>)
 800bc24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc28:	0800bc39 	.word	0x0800bc39
 800bc2c:	0800bc3f 	.word	0x0800bc3f
 800bc30:	0800bc45 	.word	0x0800bc45
 800bc34:	0800bc4b 	.word	0x0800bc4b
    case HAL_OK :
      usb_status = USBD_OK;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc3c:	e00b      	b.n	800bc56 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc3e:	2303      	movs	r3, #3
 800bc40:	73fb      	strb	r3, [r7, #15]
    break;
 800bc42:	e008      	b.n	800bc56 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc44:	2301      	movs	r3, #1
 800bc46:	73fb      	strb	r3, [r7, #15]
    break;
 800bc48:	e005      	b.n	800bc56 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc4a:	2303      	movs	r3, #3
 800bc4c:	73fb      	strb	r3, [r7, #15]
    break;
 800bc4e:	e002      	b.n	800bc56 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800bc50:	2303      	movs	r3, #3
 800bc52:	73fb      	strb	r3, [r7, #15]
    break;
 800bc54:	bf00      	nop
  }
  return usb_status;
 800bc56:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3710      	adds	r7, #16
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	4608      	mov	r0, r1
 800bc6a:	4611      	mov	r1, r2
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	4603      	mov	r3, r0
 800bc70:	70fb      	strb	r3, [r7, #3]
 800bc72:	460b      	mov	r3, r1
 800bc74:	70bb      	strb	r3, [r7, #2]
 800bc76:	4613      	mov	r3, r2
 800bc78:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc88:	78bb      	ldrb	r3, [r7, #2]
 800bc8a:	883a      	ldrh	r2, [r7, #0]
 800bc8c:	78f9      	ldrb	r1, [r7, #3]
 800bc8e:	f7f8 f810 	bl	8003cb2 <HAL_PCD_EP_Open>
 800bc92:	4603      	mov	r3, r0
 800bc94:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bc96:	7bbb      	ldrb	r3, [r7, #14]
 800bc98:	2b03      	cmp	r3, #3
 800bc9a:	d817      	bhi.n	800bccc <USBD_LL_OpenEP+0x6c>
 800bc9c:	a201      	add	r2, pc, #4	; (adr r2, 800bca4 <USBD_LL_OpenEP+0x44>)
 800bc9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca2:	bf00      	nop
 800bca4:	0800bcb5 	.word	0x0800bcb5
 800bca8:	0800bcbb 	.word	0x0800bcbb
 800bcac:	0800bcc1 	.word	0x0800bcc1
 800bcb0:	0800bcc7 	.word	0x0800bcc7
    case HAL_OK :
      usb_status = USBD_OK;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	73fb      	strb	r3, [r7, #15]
    break;
 800bcb8:	e00b      	b.n	800bcd2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bcba:	2303      	movs	r3, #3
 800bcbc:	73fb      	strb	r3, [r7, #15]
    break;
 800bcbe:	e008      	b.n	800bcd2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	73fb      	strb	r3, [r7, #15]
    break;
 800bcc4:	e005      	b.n	800bcd2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcc6:	2303      	movs	r3, #3
 800bcc8:	73fb      	strb	r3, [r7, #15]
    break;
 800bcca:	e002      	b.n	800bcd2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800bccc:	2303      	movs	r3, #3
 800bcce:	73fb      	strb	r3, [r7, #15]
    break;
 800bcd0:	bf00      	nop
  }
  return usb_status;
 800bcd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3710      	adds	r7, #16
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	460b      	mov	r3, r1
 800bce6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bce8:	2300      	movs	r3, #0
 800bcea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcec:	2300      	movs	r3, #0
 800bcee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bcf6:	78fa      	ldrb	r2, [r7, #3]
 800bcf8:	4611      	mov	r1, r2
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7f8 f841 	bl	8003d82 <HAL_PCD_EP_Close>
 800bd00:	4603      	mov	r3, r0
 800bd02:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bd04:	7bbb      	ldrb	r3, [r7, #14]
 800bd06:	2b03      	cmp	r3, #3
 800bd08:	d816      	bhi.n	800bd38 <USBD_LL_CloseEP+0x5c>
 800bd0a:	a201      	add	r2, pc, #4	; (adr r2, 800bd10 <USBD_LL_CloseEP+0x34>)
 800bd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd10:	0800bd21 	.word	0x0800bd21
 800bd14:	0800bd27 	.word	0x0800bd27
 800bd18:	0800bd2d 	.word	0x0800bd2d
 800bd1c:	0800bd33 	.word	0x0800bd33
    case HAL_OK :
      usb_status = USBD_OK;
 800bd20:	2300      	movs	r3, #0
 800bd22:	73fb      	strb	r3, [r7, #15]
    break;
 800bd24:	e00b      	b.n	800bd3e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd26:	2303      	movs	r3, #3
 800bd28:	73fb      	strb	r3, [r7, #15]
    break;
 800bd2a:	e008      	b.n	800bd3e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd30:	e005      	b.n	800bd3e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd32:	2303      	movs	r3, #3
 800bd34:	73fb      	strb	r3, [r7, #15]
    break;
 800bd36:	e002      	b.n	800bd3e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bd38:	2303      	movs	r3, #3
 800bd3a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd3c:	bf00      	nop
  }
  return usb_status;
 800bd3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3710      	adds	r7, #16
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b084      	sub	sp, #16
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	460b      	mov	r3, r1
 800bd52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd54:	2300      	movs	r3, #0
 800bd56:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bd62:	78fa      	ldrb	r2, [r7, #3]
 800bd64:	4611      	mov	r1, r2
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7f8 f8ef 	bl	8003f4a <HAL_PCD_EP_SetStall>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bd70:	7bbb      	ldrb	r3, [r7, #14]
 800bd72:	2b03      	cmp	r3, #3
 800bd74:	d816      	bhi.n	800bda4 <USBD_LL_StallEP+0x5c>
 800bd76:	a201      	add	r2, pc, #4	; (adr r2, 800bd7c <USBD_LL_StallEP+0x34>)
 800bd78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd7c:	0800bd8d 	.word	0x0800bd8d
 800bd80:	0800bd93 	.word	0x0800bd93
 800bd84:	0800bd99 	.word	0x0800bd99
 800bd88:	0800bd9f 	.word	0x0800bd9f
    case HAL_OK :
      usb_status = USBD_OK;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd90:	e00b      	b.n	800bdaa <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd92:	2303      	movs	r3, #3
 800bd94:	73fb      	strb	r3, [r7, #15]
    break;
 800bd96:	e008      	b.n	800bdaa <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd9c:	e005      	b.n	800bdaa <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd9e:	2303      	movs	r3, #3
 800bda0:	73fb      	strb	r3, [r7, #15]
    break;
 800bda2:	e002      	b.n	800bdaa <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bda4:	2303      	movs	r3, #3
 800bda6:	73fb      	strb	r3, [r7, #15]
    break;
 800bda8:	bf00      	nop
  }
  return usb_status;
 800bdaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b084      	sub	sp, #16
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bdce:	78fa      	ldrb	r2, [r7, #3]
 800bdd0:	4611      	mov	r1, r2
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7f8 f91b 	bl	800400e <HAL_PCD_EP_ClrStall>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bddc:	7bbb      	ldrb	r3, [r7, #14]
 800bdde:	2b03      	cmp	r3, #3
 800bde0:	d816      	bhi.n	800be10 <USBD_LL_ClearStallEP+0x5c>
 800bde2:	a201      	add	r2, pc, #4	; (adr r2, 800bde8 <USBD_LL_ClearStallEP+0x34>)
 800bde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde8:	0800bdf9 	.word	0x0800bdf9
 800bdec:	0800bdff 	.word	0x0800bdff
 800bdf0:	0800be05 	.word	0x0800be05
 800bdf4:	0800be0b 	.word	0x0800be0b
    case HAL_OK :
      usb_status = USBD_OK;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	73fb      	strb	r3, [r7, #15]
    break;
 800bdfc:	e00b      	b.n	800be16 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bdfe:	2303      	movs	r3, #3
 800be00:	73fb      	strb	r3, [r7, #15]
    break;
 800be02:	e008      	b.n	800be16 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be04:	2301      	movs	r3, #1
 800be06:	73fb      	strb	r3, [r7, #15]
    break;
 800be08:	e005      	b.n	800be16 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be0a:	2303      	movs	r3, #3
 800be0c:	73fb      	strb	r3, [r7, #15]
    break;
 800be0e:	e002      	b.n	800be16 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800be10:	2303      	movs	r3, #3
 800be12:	73fb      	strb	r3, [r7, #15]
    break;
 800be14:	bf00      	nop
  }
  return usb_status;
 800be16:	7bfb      	ldrb	r3, [r7, #15]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3710      	adds	r7, #16
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be20:	b480      	push	{r7}
 800be22:	b085      	sub	sp, #20
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	460b      	mov	r3, r1
 800be2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	da0c      	bge.n	800be56 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800be3c:	78fb      	ldrb	r3, [r7, #3]
 800be3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be42:	68f9      	ldr	r1, [r7, #12]
 800be44:	1c5a      	adds	r2, r3, #1
 800be46:	4613      	mov	r3, r2
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	4413      	add	r3, r2
 800be4c:	00db      	lsls	r3, r3, #3
 800be4e:	440b      	add	r3, r1
 800be50:	3306      	adds	r3, #6
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	e00b      	b.n	800be6e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800be56:	78fb      	ldrb	r3, [r7, #3]
 800be58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be5c:	68f9      	ldr	r1, [r7, #12]
 800be5e:	4613      	mov	r3, r2
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	4413      	add	r3, r2
 800be64:	00db      	lsls	r3, r3, #3
 800be66:	440b      	add	r3, r1
 800be68:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800be6c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3714      	adds	r7, #20
 800be72:	46bd      	mov	sp, r7
 800be74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be78:	4770      	bx	lr
	...

0800be7c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	460b      	mov	r3, r1
 800be86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be88:	2300      	movs	r3, #0
 800be8a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be8c:	2300      	movs	r3, #0
 800be8e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be96:	78fa      	ldrb	r2, [r7, #3]
 800be98:	4611      	mov	r1, r2
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7f7 fee4 	bl	8003c68 <HAL_PCD_SetAddress>
 800bea0:	4603      	mov	r3, r0
 800bea2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bea4:	7bbb      	ldrb	r3, [r7, #14]
 800bea6:	2b03      	cmp	r3, #3
 800bea8:	d816      	bhi.n	800bed8 <USBD_LL_SetUSBAddress+0x5c>
 800beaa:	a201      	add	r2, pc, #4	; (adr r2, 800beb0 <USBD_LL_SetUSBAddress+0x34>)
 800beac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beb0:	0800bec1 	.word	0x0800bec1
 800beb4:	0800bec7 	.word	0x0800bec7
 800beb8:	0800becd 	.word	0x0800becd
 800bebc:	0800bed3 	.word	0x0800bed3
    case HAL_OK :
      usb_status = USBD_OK;
 800bec0:	2300      	movs	r3, #0
 800bec2:	73fb      	strb	r3, [r7, #15]
    break;
 800bec4:	e00b      	b.n	800bede <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bec6:	2303      	movs	r3, #3
 800bec8:	73fb      	strb	r3, [r7, #15]
    break;
 800beca:	e008      	b.n	800bede <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800becc:	2301      	movs	r3, #1
 800bece:	73fb      	strb	r3, [r7, #15]
    break;
 800bed0:	e005      	b.n	800bede <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bed2:	2303      	movs	r3, #3
 800bed4:	73fb      	strb	r3, [r7, #15]
    break;
 800bed6:	e002      	b.n	800bede <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800bed8:	2303      	movs	r3, #3
 800beda:	73fb      	strb	r3, [r7, #15]
    break;
 800bedc:	bf00      	nop
  }
  return usb_status;
 800bede:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3710      	adds	r7, #16
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b086      	sub	sp, #24
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	607a      	str	r2, [r7, #4]
 800bef2:	603b      	str	r3, [r7, #0]
 800bef4:	460b      	mov	r3, r1
 800bef6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bef8:	2300      	movs	r3, #0
 800befa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bf06:	7af9      	ldrb	r1, [r7, #11]
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	f7f7 ffd9 	bl	8003ec2 <HAL_PCD_EP_Transmit>
 800bf10:	4603      	mov	r3, r0
 800bf12:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bf14:	7dbb      	ldrb	r3, [r7, #22]
 800bf16:	2b03      	cmp	r3, #3
 800bf18:	d816      	bhi.n	800bf48 <USBD_LL_Transmit+0x60>
 800bf1a:	a201      	add	r2, pc, #4	; (adr r2, 800bf20 <USBD_LL_Transmit+0x38>)
 800bf1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf20:	0800bf31 	.word	0x0800bf31
 800bf24:	0800bf37 	.word	0x0800bf37
 800bf28:	0800bf3d 	.word	0x0800bf3d
 800bf2c:	0800bf43 	.word	0x0800bf43
    case HAL_OK :
      usb_status = USBD_OK;
 800bf30:	2300      	movs	r3, #0
 800bf32:	75fb      	strb	r3, [r7, #23]
    break;
 800bf34:	e00b      	b.n	800bf4e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf36:	2303      	movs	r3, #3
 800bf38:	75fb      	strb	r3, [r7, #23]
    break;
 800bf3a:	e008      	b.n	800bf4e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	75fb      	strb	r3, [r7, #23]
    break;
 800bf40:	e005      	b.n	800bf4e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf42:	2303      	movs	r3, #3
 800bf44:	75fb      	strb	r3, [r7, #23]
    break;
 800bf46:	e002      	b.n	800bf4e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800bf48:	2303      	movs	r3, #3
 800bf4a:	75fb      	strb	r3, [r7, #23]
    break;
 800bf4c:	bf00      	nop
  }
  return usb_status;
 800bf4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3718      	adds	r7, #24
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b086      	sub	sp, #24
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	607a      	str	r2, [r7, #4]
 800bf62:	603b      	str	r3, [r7, #0]
 800bf64:	460b      	mov	r3, r1
 800bf66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bf76:	7af9      	ldrb	r1, [r7, #11]
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	f7f7 ff4b 	bl	8003e16 <HAL_PCD_EP_Receive>
 800bf80:	4603      	mov	r3, r0
 800bf82:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bf84:	7dbb      	ldrb	r3, [r7, #22]
 800bf86:	2b03      	cmp	r3, #3
 800bf88:	d816      	bhi.n	800bfb8 <USBD_LL_PrepareReceive+0x60>
 800bf8a:	a201      	add	r2, pc, #4	; (adr r2, 800bf90 <USBD_LL_PrepareReceive+0x38>)
 800bf8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf90:	0800bfa1 	.word	0x0800bfa1
 800bf94:	0800bfa7 	.word	0x0800bfa7
 800bf98:	0800bfad 	.word	0x0800bfad
 800bf9c:	0800bfb3 	.word	0x0800bfb3
    case HAL_OK :
      usb_status = USBD_OK;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	75fb      	strb	r3, [r7, #23]
    break;
 800bfa4:	e00b      	b.n	800bfbe <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bfa6:	2303      	movs	r3, #3
 800bfa8:	75fb      	strb	r3, [r7, #23]
    break;
 800bfaa:	e008      	b.n	800bfbe <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bfac:	2301      	movs	r3, #1
 800bfae:	75fb      	strb	r3, [r7, #23]
    break;
 800bfb0:	e005      	b.n	800bfbe <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bfb2:	2303      	movs	r3, #3
 800bfb4:	75fb      	strb	r3, [r7, #23]
    break;
 800bfb6:	e002      	b.n	800bfbe <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800bfb8:	2303      	movs	r3, #3
 800bfba:	75fb      	strb	r3, [r7, #23]
    break;
 800bfbc:	bf00      	nop
  }
  return usb_status;
 800bfbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3718      	adds	r7, #24
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bfda:	78fa      	ldrb	r2, [r7, #3]
 800bfdc:	4611      	mov	r1, r2
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7f7 ff57 	bl	8003e92 <HAL_PCD_EP_GetRxCount>
 800bfe4:	4603      	mov	r3, r0
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3708      	adds	r7, #8
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
	...

0800bff0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	460b      	mov	r3, r1
 800bffa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bffc:	78fb      	ldrb	r3, [r7, #3]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d002      	beq.n	800c008 <HAL_PCDEx_LPM_Callback+0x18>
 800c002:	2b01      	cmp	r3, #1
 800c004:	d013      	beq.n	800c02e <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c006:	e023      	b.n	800c050 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	699b      	ldr	r3, [r3, #24]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d007      	beq.n	800c020 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c010:	f000 f83c 	bl	800c08c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c014:	4b10      	ldr	r3, [pc, #64]	; (800c058 <HAL_PCDEx_LPM_Callback+0x68>)
 800c016:	691b      	ldr	r3, [r3, #16]
 800c018:	4a0f      	ldr	r2, [pc, #60]	; (800c058 <HAL_PCDEx_LPM_Callback+0x68>)
 800c01a:	f023 0306 	bic.w	r3, r3, #6
 800c01e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800c026:	4618      	mov	r0, r3
 800c028:	f7fe fbf2 	bl	800a810 <USBD_LL_Resume>
    break;
 800c02c:	e010      	b.n	800c050 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800c034:	4618      	mov	r0, r3
 800c036:	f7fe fbd5 	bl	800a7e4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	699b      	ldr	r3, [r3, #24]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d005      	beq.n	800c04e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c042:	4b05      	ldr	r3, [pc, #20]	; (800c058 <HAL_PCDEx_LPM_Callback+0x68>)
 800c044:	691b      	ldr	r3, [r3, #16]
 800c046:	4a04      	ldr	r2, [pc, #16]	; (800c058 <HAL_PCDEx_LPM_Callback+0x68>)
 800c048:	f043 0306 	orr.w	r3, r3, #6
 800c04c:	6113      	str	r3, [r2, #16]
    break;
 800c04e:	bf00      	nop
}
 800c050:	bf00      	nop
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}
 800c058:	e000ed00 	.word	0xe000ed00

0800c05c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b083      	sub	sp, #12
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c064:	4b03      	ldr	r3, [pc, #12]	; (800c074 <USBD_static_malloc+0x18>)
}
 800c066:	4618      	mov	r0, r3
 800c068:	370c      	adds	r7, #12
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr
 800c072:	bf00      	nop
 800c074:	2000147c 	.word	0x2000147c

0800c078 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]

}
 800c080:	bf00      	nop
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr

0800c08c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c08c:	b480      	push	{r7}
 800c08e:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800c090:	bf00      	nop
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr
	...

0800c09c <__libc_init_array>:
 800c09c:	b570      	push	{r4, r5, r6, lr}
 800c09e:	4d0d      	ldr	r5, [pc, #52]	; (800c0d4 <__libc_init_array+0x38>)
 800c0a0:	4c0d      	ldr	r4, [pc, #52]	; (800c0d8 <__libc_init_array+0x3c>)
 800c0a2:	1b64      	subs	r4, r4, r5
 800c0a4:	10a4      	asrs	r4, r4, #2
 800c0a6:	2600      	movs	r6, #0
 800c0a8:	42a6      	cmp	r6, r4
 800c0aa:	d109      	bne.n	800c0c0 <__libc_init_array+0x24>
 800c0ac:	4d0b      	ldr	r5, [pc, #44]	; (800c0dc <__libc_init_array+0x40>)
 800c0ae:	4c0c      	ldr	r4, [pc, #48]	; (800c0e0 <__libc_init_array+0x44>)
 800c0b0:	f000 f820 	bl	800c0f4 <_init>
 800c0b4:	1b64      	subs	r4, r4, r5
 800c0b6:	10a4      	asrs	r4, r4, #2
 800c0b8:	2600      	movs	r6, #0
 800c0ba:	42a6      	cmp	r6, r4
 800c0bc:	d105      	bne.n	800c0ca <__libc_init_array+0x2e>
 800c0be:	bd70      	pop	{r4, r5, r6, pc}
 800c0c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0c4:	4798      	blx	r3
 800c0c6:	3601      	adds	r6, #1
 800c0c8:	e7ee      	b.n	800c0a8 <__libc_init_array+0xc>
 800c0ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0ce:	4798      	blx	r3
 800c0d0:	3601      	adds	r6, #1
 800c0d2:	e7f2      	b.n	800c0ba <__libc_init_array+0x1e>
 800c0d4:	0800c1b8 	.word	0x0800c1b8
 800c0d8:	0800c1b8 	.word	0x0800c1b8
 800c0dc:	0800c1b8 	.word	0x0800c1b8
 800c0e0:	0800c1c0 	.word	0x0800c1c0

0800c0e4 <memset>:
 800c0e4:	4402      	add	r2, r0
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d100      	bne.n	800c0ee <memset+0xa>
 800c0ec:	4770      	bx	lr
 800c0ee:	f803 1b01 	strb.w	r1, [r3], #1
 800c0f2:	e7f9      	b.n	800c0e8 <memset+0x4>

0800c0f4 <_init>:
 800c0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0f6:	bf00      	nop
 800c0f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0fa:	bc08      	pop	{r3}
 800c0fc:	469e      	mov	lr, r3
 800c0fe:	4770      	bx	lr

0800c100 <_fini>:
 800c100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c102:	bf00      	nop
 800c104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c106:	bc08      	pop	{r3}
 800c108:	469e      	mov	lr, r3
 800c10a:	4770      	bx	lr
