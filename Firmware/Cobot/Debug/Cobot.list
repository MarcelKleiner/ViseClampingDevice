
Cobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee2c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800efb8  0800efb8  0001efb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0a4  0800f0a4  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0a4  0800f0a4  0001f0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0ac  0800f0ac  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f0ac  0800f0ac  0001f0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0b4  0800f0b4  0001f0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800f0b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fb8  20000208  0800f2c0  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200011c0  0800f2c0  000211c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c936  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000071fc  00000000  00000000  0004cb6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021f0  00000000  00000000  00053d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e78  00000000  00000000  00055f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030120  00000000  00000000  00057dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e4bb  00000000  00000000  00087ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4067  00000000  00000000  000b63b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001aa41a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e6c  00000000  00000000  001aa46c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000208 	.word	0x20000208
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800efa0 	.word	0x0800efa0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000020c 	.word	0x2000020c
 80001c8:	0800efa0 	.word	0x0800efa0

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <_ZN4IComC1Ev>:
 */

#ifndef SRC_COM_ICOM_H_
#define SRC_COM_ICOM_H_

class ICom{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <_ZN4IComC1Ev+0x1c>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	0800f010 	.word	0x0800f010

080004f0 <_ZN6USBComC1EP11DriveStatusP13DriveSettingsP12DriveCommand>:
class USBCom :  public ICom, public BaseCOM
{

	public:

		USBCom(DriveStatus *driveStatus, DriveSettings *driveSettings,
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	603b      	str	r3, [r7, #0]
				DriveCommand *driveCommand) :
				BaseCOM(driveStatus, driveSettings, driveCommand)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff ffe5 	bl	80004d0 <_ZN4IComC1Ev>
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	1d18      	adds	r0, r3, #4
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	68b9      	ldr	r1, [r7, #8]
 8000510:	f000 fa3c 	bl	800098c <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <_ZN6USBComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x34>)
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	601a      	str	r2, [r3, #0]
		{
		}
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	4618      	mov	r0, r3
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	0800f040 	.word	0x0800f040

08000528 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa>:


class RFM95Com :  public ICom, public BaseCOM
{
	public:
		RFM95Com(DriveStatus *driveStatus, DriveSettings *driveSettings,
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
 8000534:	603b      	str	r3, [r7, #0]
				DriveCommand *driveCommand, RFM95_LoRa *rfm95) :
				BaseCOM(driveStatus, driveSettings, driveCommand)
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ffc9 	bl	80004d0 <_ZN4IComC1Ev>
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	1d18      	adds	r0, r3, #4
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	68b9      	ldr	r1, [r7, #8]
 8000548:	f000 fa20 	bl	800098c <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 800054c:	4a0c      	ldr	r2, [pc, #48]	; (8000580 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa+0x58>)
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	3328      	adds	r3, #40	; 0x28
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	f8c3 2003 	str.w	r2, [r3, #3]
		{
			this->rfm95 = rfm95;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	69ba      	ldr	r2, [r7, #24]
 8000562:	619a      	str	r2, [r3, #24]
			this->driveCommand = driveCommand;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	683a      	ldr	r2, [r7, #0]
 8000568:	625a      	str	r2, [r3, #36]	; 0x24
			this->driveStatus = driveStatus;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	68ba      	ldr	r2, [r7, #8]
 800056e:	621a      	str	r2, [r3, #32]
			this->driveSettings = driveSettings;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	61da      	str	r2, [r3, #28]
		}
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	4618      	mov	r0, r3
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	0800f030 	.word	0x0800f030

08000584 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand>:
#include "../IO/DO.h"

class IOCom: public ICom, public BaseCOM
{
	public:
		IOCom(DriveStatus *driveStatus, DriveSettings *driveSettings,
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af02      	add	r7, sp, #8
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	603b      	str	r3, [r7, #0]
				DriveCommand *driveCommand) :
				BaseCOM(driveStatus, driveSettings, driveCommand)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff ff9b 	bl	80004d0 <_ZN4IComC1Ev>
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	1d18      	adds	r0, r3, #4
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	68b9      	ldr	r1, [r7, #8]
 80005a4:	f000 f9f2 	bl	800098c <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 80005a8:	4a3b      	ldr	r2, [pc, #236]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f103 0018 	add.w	r0, r3, #24
 80005b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005c2:	4936      	ldr	r1, [pc, #216]	; (800069c <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x118>)
 80005c4:	f001 fde4 	bl	8002190 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80005ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	4b32      	ldr	r3, [pc, #200]	; (80006a0 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x11c>)
 80005d6:	2204      	movs	r2, #4
 80005d8:	4931      	ldr	r1, [pc, #196]	; (80006a0 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x11c>)
 80005da:	f001 fdd9 	bl	8002190 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80005e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	4b2c      	ldr	r3, [pc, #176]	; (800069c <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x118>)
 80005ec:	2280      	movs	r2, #128	; 0x80
 80005ee:	492b      	ldr	r1, [pc, #172]	; (800069c <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x118>)
 80005f0:	f001 fdce 	bl	8002190 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f103 0048 	add.w	r0, r3, #72	; 0x48
 80005fa:	2301      	movs	r3, #1
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x11c>)
 8000600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000604:	4926      	ldr	r1, [pc, #152]	; (80006a0 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x11c>)
 8000606:	f001 fdc3 	bl	8002190 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8000610:	2340      	movs	r3, #64	; 0x40
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	4b21      	ldr	r3, [pc, #132]	; (800069c <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x118>)
 8000616:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800061a:	4921      	ldr	r1, [pc, #132]	; (80006a0 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x11c>)
 800061c:	f001 fdb8 	bl	8002190 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8000626:	2302      	movs	r3, #2
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x11c>)
 800062c:	2210      	movs	r2, #16
 800062e:	491b      	ldr	r1, [pc, #108]	; (800069c <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x118>)
 8000630:	f001 fdae 	bl	8002190 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800063a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x11c>)
 8000642:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000646:	4916      	ldr	r1, [pc, #88]	; (80006a0 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x11c>)
 8000648:	f001 fda2 	bl	8002190 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8000652:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x118>)
 800065a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800065e:	490f      	ldr	r1, [pc, #60]	; (800069c <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x118>)
 8000660:	f001 fd96 	bl	8002190 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2200      	movs	r2, #0
 8000668:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	2200      	movs	r2, #0
 8000670:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2200      	movs	r2, #0
 8000678:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	2200      	movs	r2, #0
 8000680:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
		{
			this->driveStatus = driveStatus;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	68ba      	ldr	r2, [r7, #8]
 8000688:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	4618      	mov	r0, r3
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	0800f020 	.word	0x0800f020
 800069c:	48000800 	.word	0x48000800
 80006a0:	48000400 	.word	0x48000400

080006a4 <_ZN11TaskHandlerC1Ev>:


#include "stdint.h"


class TaskHandler{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2200      	movs	r2, #0
 80006b6:	705a      	strb	r2, [r3, #1]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2200      	movs	r2, #0
 80006bc:	709a      	strb	r2, [r3, #2]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2200      	movs	r2, #0
 80006c2:	70da      	strb	r2, [r3, #3]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2200      	movs	r2, #0
 80006c8:	711a      	strb	r2, [r3, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2200      	movs	r2, #0
 80006ce:	715a      	strb	r2, [r3, #5]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2201      	movs	r2, #1
 80006d4:	719a      	strb	r2, [r3, #6]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2201      	movs	r2, #1
 80006da:	71da      	strb	r2, [r3, #7]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2201      	movs	r2, #1
 80006e0:	721a      	strb	r2, [r3, #8]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2201      	movs	r2, #1
 80006e6:	725a      	strb	r2, [r3, #9]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2201      	movs	r2, #1
 80006ec:	729a      	strb	r2, [r3, #10]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2201      	movs	r2, #1
 80006f2:	72da      	strb	r2, [r3, #11]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4618      	mov	r0, r3
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <_ZN13DriveSettingsC1Ev>:
#define SRC_SETTINGS_DRIVESETTINGS_H_

#include "stdint.h"
#include "main.h"

class DriveSettings{
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	221f      	movs	r2, #31
 800070e:	701a      	strb	r2, [r3, #0]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2200      	movs	r2, #0
 8000714:	805a      	strh	r2, [r3, #2]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2200      	movs	r2, #0
 800071a:	809a      	strh	r2, [r3, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	80da      	strh	r2, [r3, #6]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2200      	movs	r2, #0
 8000726:	811a      	strh	r2, [r3, #8]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800072e:	815a      	strh	r2, [r3, #10]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2214      	movs	r2, #20
 8000734:	819a      	strh	r2, [r3, #12]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2264      	movs	r2, #100	; 0x64
 800073a:	81da      	strh	r2, [r3, #14]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8000742:	821a      	strh	r2, [r3, #16]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800074a:	825a      	strh	r2, [r3, #18]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2232      	movs	r2, #50	; 0x32
 8000750:	829a      	strh	r2, [r3, #20]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2264      	movs	r2, #100	; 0x64
 8000756:	82da      	strh	r2, [r3, #22]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800075e:	831a      	strh	r2, [r3, #24]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2200      	movs	r2, #0
 8000764:	769a      	strb	r2, [r3, #26]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2200      	movs	r2, #0
 800076a:	839a      	strh	r2, [r3, #28]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <_ZN7AppMainC1Ev>:
#include "AppMain.h"
#include "../Tools/Delay.h"

extern TIM_HandleTypeDef htim7;

AppMain::AppMain()
 800077a:	b590      	push	{r4, r7, lr}
 800077c:	b085      	sub	sp, #20
 800077e:	af02      	add	r7, sp, #8
 8000780:	6078      	str	r0, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4618      	mov	r0, r3
 8000786:	f001 fda3 	bl	80022d0 <_ZN10RFM95_LoRaC1Ev>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	3320      	adds	r3, #32
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	819a      	strh	r2, [r3, #12]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3320      	adds	r3, #32
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff81 	bl	80006a4 <_ZN11TaskHandlerC1Ev>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80007a8:	2301      	movs	r3, #1
 80007aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ae:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80007b2:	f001 fd44 	bl	800223e <_ZN3LEDC1EP12GPIO_TypeDeftb>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80007bc:	2301      	movs	r3, #1
 80007be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80007c6:	f001 fd3a 	bl	800223e <_ZN3LEDC1EP12GPIO_TypeDeftb>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3340      	adds	r3, #64	; 0x40
 80007ce:	221e      	movs	r2, #30
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f00e fae6 	bl	800eda4 <memset>
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3340      	adds	r3, #64	; 0x40
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff90 	bl	8000702 <_ZN13DriveSettingsC1Ev>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	335e      	adds	r3, #94	; 0x5e
 80007e6:	4618      	mov	r0, r3
 80007e8:	f002 fd15 	bl	8003216 <_ZN11DriveStatusC1Ev>
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3367      	adds	r3, #103	; 0x67
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 fbcd 	bl	8002f90 <_ZN12DriveCommandC1Ev>
 80007f6:	2030      	movs	r0, #48	; 0x30
 80007f8:	f00e fa6b 	bl	800ecd2 <_Znwj>
 80007fc:	4603      	mov	r3, r0
 80007fe:	461c      	mov	r4, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f103 0067 	add.w	r0, r3, #103	; 0x67
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	4603      	mov	r3, r0
 8000818:	4620      	mov	r0, r4
 800081a:	f7ff fe85 	bl	8000528 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	675c      	str	r4, [r3, #116]	; 0x74
 8000822:	2018      	movs	r0, #24
 8000824:	f00e fa55 	bl	800ecd2 <_Znwj>
 8000828:	4603      	mov	r3, r0
 800082a:	461c      	mov	r4, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3367      	adds	r3, #103	; 0x67
 800083c:	4620      	mov	r0, r4
 800083e:	f7ff fe57 	bl	80004f0 <_ZN6USBComC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	679c      	str	r4, [r3, #120]	; 0x78
 8000846:	20a8      	movs	r0, #168	; 0xa8
 8000848:	f00e fa43 	bl	800ecd2 <_Znwj>
 800084c:	4603      	mov	r3, r0
 800084e:	461c      	mov	r4, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3367      	adds	r3, #103	; 0x67
 8000860:	4620      	mov	r0, r4
 8000862:	f7ff fe8f 	bl	8000584 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	67dc      	str	r4, [r3, #124]	; 0x7c
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	335e      	adds	r3, #94	; 0x5e
 800087a:	461a      	mov	r2, r3
 800087c:	f001 fa9e 	bl	8001dbc <_ZN5FlashC1EP13DriveSettingsP11DriveStatus>
{

}
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4618      	mov	r0, r3
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	bd90      	pop	{r4, r7, pc}
	...

0800088c <_ZN7AppMain7StartupEv>:

void AppMain::Startup()
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	Storage.ReadFlash();
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3380      	adds	r3, #128	; 0x80
 8000898:	4618      	mov	r0, r3
 800089a:	f001 faa2 	bl	8001de2 <_ZN5Flash9ReadFlashEv>

	HAL_TIM_Base_Start_IT(&htim7);
 800089e:	480d      	ldr	r0, [pc, #52]	; (80008d4 <_ZN7AppMain7StartupEv+0x48>)
 80008a0:	f009 fad2 	bl	8009e48 <HAL_TIM_Base_Start_IT>

	LED_Green.OFF();
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3330      	adds	r3, #48	; 0x30
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fce3 	bl	8002274 <_ZN3LED3OFFEv>
	LED_Red.OFF();
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3338      	adds	r3, #56	; 0x38
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 fcde 	bl	8002274 <_ZN3LED3OFFEv>

	if (!rfm95.InitRFM())
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f002 f8f2 	bl	8002aa4 <_ZN10RFM95_LoRa7InitRFMEv>
	{
		//ToDo set error
	}

	Delay::DWT_Init();
 80008c0:	f002 fed8 	bl	8003674 <_ZN5Delay8DWT_InitEv>

	Main();
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f000 f807 	bl	80008d8 <_ZN7AppMain4MainEv>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000574 	.word	0x20000574

080008d8 <_ZN7AppMain4MainEv>:

void AppMain::Main()
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

	while (1)
	{

		if (taskStatus.isErrorTask())
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3320      	adds	r3, #32
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 fe73 	bl	80035d0 <_ZN11TaskHandler11isErrorTaskEv>
		{
			//ToDo implement error class
		}

		if (taskStatus.isLEDUpdateTask())
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3320      	adds	r3, #32
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 fea4 	bl	800363c <_ZN11TaskHandler15isLEDUpdateTaskEv>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d004      	beq.n	8000904 <_ZN7AppMain4MainEv+0x2c>
		{
			LED_Green.Toggle();
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	3330      	adds	r3, #48	; 0x30
 80008fe:	4618      	mov	r0, r3
 8000900:	f001 fcd5 	bl	80022ae <_ZN3LED6ToggleEv>
		}

		if (taskStatus.isComTask())
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3320      	adds	r3, #32
 8000908:	4618      	mov	r0, r3
 800090a:	f002 fe2b 	bl	8003564 <_ZN11TaskHandler9isComTaskEv>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d012      	beq.n	800093a <_ZN7AppMain4MainEv+0x62>
		{
			rfm95COM->Transmitt();
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2200      	movs	r2, #0
 8000922:	2100      	movs	r1, #0
 8000924:	4798      	blx	r3
			rfm95COM->Receive();
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	3304      	adds	r3, #4
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	4798      	blx	r3
		}

		if (taskStatus.isIoUpdateTask())
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3320      	adds	r3, #32
 800093e:	4618      	mov	r0, r3
 8000940:	f002 fe61 	bl	8003606 <_ZN11TaskHandler14isIoUpdateTaskEv>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d012      	beq.n	8000970 <_ZN7AppMain4MainEv+0x98>
		{
			ioCOM->Receive();
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	3304      	adds	r3, #4
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	4798      	blx	r3
			ioCOM->Transmitt();
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	4798      	blx	r3
		}

		if (taskStatus.isSaveTask())
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3320      	adds	r3, #32
 8000974:	4618      	mov	r0, r3
 8000976:	f002 fe10 	bl	800359a <_ZN11TaskHandler10isSaveTaskEv>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d0af      	beq.n	80008e0 <_ZN7AppMain4MainEv+0x8>
		{
			Storage.SaveFlash();
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3380      	adds	r3, #128	; 0x80
 8000984:	4618      	mov	r0, r3
 8000986:	f001 fac1 	bl	8001f0c <_ZN5Flash9SaveFlashEv>
		if (taskStatus.isErrorTask())
 800098a:	e7a9      	b.n	80008e0 <_ZN7AppMain4MainEv+0x8>

0800098c <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>:
#include "BaseCOM.h"
#include "../AppMain/Defines.h"
#include "../Tools/CRC8.h"
#include "../Tools/TypeConverter.h"

BaseCOM::BaseCOM(DriveStatus *driveStatus, DriveSettings *driveSettings,
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
 8000998:	603b      	str	r3, [r7, #0]
		DriveCommand *driveCommand)
{
	this->driveSettings = driveSettings;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	605a      	str	r2, [r3, #4]
	this->driveCommand = driveCommand;
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	609a      	str	r2, [r3, #8]
}
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4618      	mov	r0, r3
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
	...

080009bc <_ZN7BaseCOM11GetSettingsEh>:


uint8_t* BaseCOM::GetSettings(uint8_t addr)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	460b      	mov	r3, r1
 80009c6:	70fb      	strb	r3, [r7, #3]

	data2send[0] = 0x1F;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	221f      	movs	r2, #31
 80009cc:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f002 fa6c 	bl	8002eb0 <_ZN13DriveSettings16getDeviceAddressEv>
 80009d8:	4603      	mov	r3, r0
 80009da:	461a      	mov	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_COMMAND;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2212      	movs	r2, #18
 80009e4:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	78fa      	ldrb	r2, [r7, #3]
 80009ea:	73da      	strb	r2, [r3, #15]

	switch (addr)
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	3b10      	subs	r3, #16
 80009f0:	2b10      	cmp	r3, #16
 80009f2:	f200 80d3 	bhi.w	8000b9c <_ZN7BaseCOM11GetSettingsEh+0x1e0>
 80009f6:	a201      	add	r2, pc, #4	; (adr r2, 80009fc <_ZN7BaseCOM11GetSettingsEh+0x40>)
 80009f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009fc:	08000a41 	.word	0x08000a41
 8000a00:	08000a5f 	.word	0x08000a5f
 8000a04:	08000a7d 	.word	0x08000a7d
 8000a08:	08000a9b 	.word	0x08000a9b
 8000a0c:	08000ab9 	.word	0x08000ab9
 8000a10:	08000ad7 	.word	0x08000ad7
 8000a14:	08000af3 	.word	0x08000af3
 8000a18:	08000b11 	.word	0x08000b11
 8000a1c:	08000b2f 	.word	0x08000b2f
 8000a20:	08000b4d 	.word	0x08000b4d
 8000a24:	08000b6b 	.word	0x08000b6b
 8000a28:	08000b9d 	.word	0x08000b9d
 8000a2c:	08000b9d 	.word	0x08000b9d
 8000a30:	08000b9d 	.word	0x08000b9d
 8000a34:	08000b9d 	.word	0x08000b9d
 8000a38:	08000b9d 	.word	0x08000b9d
 8000a3c:	08000b89 	.word	0x08000b89
	{
		case TEACH_TORQUE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getTeachTroque(), 4);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 f994 	bl	8002d78 <_ZNK13DriveSettings14getTeachTroqueEv>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2204      	movs	r2, #4
 8000a54:	4619      	mov	r1, r3
 8000a56:	4620      	mov	r0, r4
 8000a58:	f002 fe4e 	bl	80036f8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000a5c:	e0a2      	b.n	8000ba4 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case TEACH_SPEED_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getTeachSpeed(), 4);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f002 f95e 	bl	8002d2a <_ZNK13DriveSettings13getTeachSpeedEv>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2204      	movs	r2, #4
 8000a72:	4619      	mov	r1, r3
 8000a74:	4620      	mov	r0, r4
 8000a76:	f002 fe3f 	bl	80036f8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000a7a:	e093      	b.n	8000ba4 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case CLAMPING_TORQUE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getClampingTorque(), 4);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a86:	4618      	mov	r0, r3
 8000a88:	f002 f865 	bl	8002b56 <_ZNK13DriveSettings17getClampingTorqueEv>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2204      	movs	r2, #4
 8000a90:	4619      	mov	r1, r3
 8000a92:	4620      	mov	r0, r4
 8000a94:	f002 fe30 	bl	80036f8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000a98:	e084      	b.n	8000ba4 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case CLAMPING_SPEED_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getClampingSpeed(), 4);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f002 f82f 	bl	8002b08 <_ZNK13DriveSettings16getClampingSpeedEv>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2204      	movs	r2, #4
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4620      	mov	r0, r4
 8000ab2:	f002 fe21 	bl	80036f8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000ab6:	e075      	b.n	8000ba4 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case SELF_SHUTDOWN_DELAY_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getSelfShutdownDelay(), 4);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f002 f90a 	bl	8002cdc <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2204      	movs	r2, #4
 8000acc:	4619      	mov	r1, r3
 8000ace:	4620      	mov	r0, r4
 8000ad0:	f002 fe12 	bl	80036f8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000ad4:	e066      	b.n	8000ba4 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case IN_POS_DIFF_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getInPosDiff(), 4);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f002 f85f 	bl	8002ba4 <_ZNK13DriveSettings12getInPosDiffEv>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2204      	movs	r2, #4
 8000aea:	4619      	mov	r1, r3
 8000aec:	4620      	mov	r0, r4
 8000aee:	f002 fe03 	bl	80036f8 <_ZN13TypeConverter12uint16ToByteEPhth>
		case OPENING_DISTANCE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOpeningDistance(), 4);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000afc:	4618      	mov	r0, r3
 8000afe:	f002 f878 	bl	8002bf2 <_ZNK13DriveSettings18getOpeningDistanceEv>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2204      	movs	r2, #4
 8000b06:	4619      	mov	r1, r3
 8000b08:	4620      	mov	r0, r4
 8000b0a:	f002 fdf5 	bl	80036f8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b0e:	e049      	b.n	8000ba4 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case UNDERVOLTAGE_WARNING_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getUnderVoltageWarning(),4);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f002 f97a 	bl	8002e14 <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2204      	movs	r2, #4
 8000b24:	4619      	mov	r1, r3
 8000b26:	4620      	mov	r0, r4
 8000b28:	f002 fde6 	bl	80036f8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b2c:	e03a      	b.n	8000ba4 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case UNDERVOLTAGE_ERROR_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getUnderVoltageError(), 4);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f002 f944 	bl	8002dc6 <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2204      	movs	r2, #4
 8000b42:	4619      	mov	r1, r3
 8000b44:	4620      	mov	r0, r4
 8000b46:	f002 fdd7 	bl	80036f8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b4a:	e02b      	b.n	8000ba4 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case OVER_CURRENT_WARNING_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOverCurrentWarning(), 4);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000b56:	4618      	mov	r0, r3
 8000b58:	f002 f899 	bl	8002c8e <_ZNK13DriveSettings21getOverCurrentWarningEv>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2204      	movs	r2, #4
 8000b60:	4619      	mov	r1, r3
 8000b62:	4620      	mov	r0, r4
 8000b64:	f002 fdc8 	bl	80036f8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b68:	e01c      	b.n	8000ba4 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case OVER_CURRENT_ERROR_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOverCurrentError(), 4);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000b74:	4618      	mov	r0, r3
 8000b76:	f002 f974 	bl	8002e62 <_ZNK13DriveSettings19getOverCurrentErrorEv>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2204      	movs	r2, #4
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4620      	mov	r0, r4
 8000b82:	f002 fdb9 	bl	80036f8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b86:	e00d      	b.n	8000ba4 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case DEVICE_ADDRESS_ADDR:
			data2send[4] = driveSettings->getDeviceAddress();
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f002 f98f 	bl	8002eb0 <_ZN13DriveSettings16getDeviceAddressEv>
 8000b92:	4603      	mov	r3, r0
 8000b94:	461a      	mov	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	741a      	strb	r2, [r3, #16]
			break;
 8000b9a:	e003      	b.n	8000ba4 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		default:
			data2send[1] = 0x1D;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	221d      	movs	r2, #29
 8000ba0:	735a      	strb	r2, [r3, #13]
			break;
 8000ba2:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	330c      	adds	r3, #12
 8000ba8:	2206      	movs	r2, #6
 8000baa:	4619      	mov	r1, r3
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f000 fbcd 	bl	800134c <_ZN7BaseCOM4CRC8EPhh>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	749a      	strb	r2, [r3, #18]
	return data2send;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	330c      	adds	r3, #12
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd90      	pop	{r4, r7, pc}
 8000bc6:	bf00      	nop

08000bc8 <_ZN7BaseCOM9GetStatusEh>:


uint8_t* BaseCOM::GetStatus(uint8_t addr)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	70fb      	strb	r3, [r7, #3]

	data2send[0] = 0x1F;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	221f      	movs	r2, #31
 8000bd8:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f002 f966 	bl	8002eb0 <_ZN13DriveSettings16getDeviceAddressEv>
 8000be4:	4603      	mov	r3, r0
 8000be6:	461a      	mov	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_STATUS;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2213      	movs	r2, #19
 8000bf0:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	78fa      	ldrb	r2, [r7, #3]
 8000bf6:	73da      	strb	r2, [r3, #15]

	switch (addr)
 8000bf8:	78fb      	ldrb	r3, [r7, #3]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	2b07      	cmp	r3, #7
 8000bfe:	d863      	bhi.n	8000cc8 <_ZN7BaseCOM9GetStatusEh+0x100>
 8000c00:	a201      	add	r2, pc, #4	; (adr r2, 8000c08 <_ZN7BaseCOM9GetStatusEh+0x40>)
 8000c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c06:	bf00      	nop
 8000c08:	08000c29 	.word	0x08000c29
 8000c0c:	08000c3d 	.word	0x08000c3d
 8000c10:	08000c51 	.word	0x08000c51
 8000c14:	08000c65 	.word	0x08000c65
 8000c18:	08000c79 	.word	0x08000c79
 8000c1c:	08000c8d 	.word	0x08000c8d
 8000c20:	08000ca1 	.word	0x08000ca1
 8000c24:	08000cb5 	.word	0x08000cb5
	{
		case CLOSE_ADDR:
			data2send[4] = driveStatus->isClose();
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f002 fb00 	bl	8003232 <_ZN11DriveStatus7isCloseEv>
 8000c32:	4603      	mov	r3, r0
 8000c34:	461a      	mov	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	741a      	strb	r2, [r3, #16]
			break;
 8000c3a:	e049      	b.n	8000cd0 <_ZN7BaseCOM9GetStatusEh+0x108>
		case OPEN_ADDR:
			data2send[4] = driveStatus->isOpen();
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f002 fb19 	bl	8003278 <_ZN11DriveStatus6isOpenEv>
 8000c46:	4603      	mov	r3, r0
 8000c48:	461a      	mov	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	741a      	strb	r2, [r3, #16]
			break;
 8000c4e:	e03f      	b.n	8000cd0 <_ZN7BaseCOM9GetStatusEh+0x108>
		case TEACH_ADDR:
			data2send[4] = driveStatus->isTeach();
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f002 fbbe 	bl	80033d6 <_ZN11DriveStatus7isTeachEv>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	741a      	strb	r2, [r3, #16]
			break;
 8000c62:	e035      	b.n	8000cd0 <_ZN7BaseCOM9GetStatusEh+0x108>
		case RESET_ADDR:
			data2send[4] = driveStatus->isReset();
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f002 fb6e 	bl	800334a <_ZN11DriveStatus7isResetEv>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	461a      	mov	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	741a      	strb	r2, [r3, #16]
			break;
 8000c76:	e02b      	b.n	8000cd0 <_ZN7BaseCOM9GetStatusEh+0x108>
		case ENABLE_ADDR:
			data2send[4] = driveStatus->isEnable();
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f002 fb41 	bl	8003304 <_ZN11DriveStatus8isEnableEv>
 8000c82:	4603      	mov	r3, r0
 8000c84:	461a      	mov	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	741a      	strb	r2, [r3, #16]
			break;
 8000c8a:	e021      	b.n	8000cd0 <_ZN7BaseCOM9GetStatusEh+0x108>
		case DISABLE_ADDR:
			data2send[4] = driveStatus->isDisable();
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f002 fb14 	bl	80032be <_ZN11DriveStatus9isDisableEv>
 8000c96:	4603      	mov	r3, r0
 8000c98:	461a      	mov	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	741a      	strb	r2, [r3, #16]
			break;
 8000c9e:	e017      	b.n	8000cd0 <_ZN7BaseCOM9GetStatusEh+0x108>
		case STOP_ADDR:
			data2send[4] = driveStatus->isStop();
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f002 fb73 	bl	8003390 <_ZN11DriveStatus6isStopEv>
 8000caa:	4603      	mov	r3, r0
 8000cac:	461a      	mov	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	741a      	strb	r2, [r3, #16]
			break;
 8000cb2:	e00d      	b.n	8000cd0 <_ZN7BaseCOM9GetStatusEh+0x108>
		case ERROR_ADDR:
			data2send[4] = driveStatus->getError();
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f002 fbaf 	bl	800341c <_ZN11DriveStatus8getErrorEv>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	741a      	strb	r2, [r3, #16]
			break;
 8000cc6:	e003      	b.n	8000cd0 <_ZN7BaseCOM9GetStatusEh+0x108>
		default:
			data2send[0] = 0x1D;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	221d      	movs	r2, #29
 8000ccc:	731a      	strb	r2, [r3, #12]
			break;
 8000cce:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	330c      	adds	r3, #12
 8000cd4:	2206      	movs	r2, #6
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f000 fb37 	bl	800134c <_ZN7BaseCOM4CRC8EPhh>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	749a      	strb	r2, [r3, #18]

	return data2send;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	330c      	adds	r3, #12
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop

08000cf4 <_ZN7BaseCOM10GetCommandEh>:


uint8_t* BaseCOM::GetCommand(uint8_t addr)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	70fb      	strb	r3, [r7, #3]
	data2send[0] = 0x1F;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	221f      	movs	r2, #31
 8000d04:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f002 f8d0 	bl	8002eb0 <_ZN13DriveSettings16getDeviceAddressEv>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_COMMAND;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2212      	movs	r2, #18
 8000d1c:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	78fa      	ldrb	r2, [r7, #3]
 8000d22:	73da      	strb	r2, [r3, #15]

	switch (addr)
 8000d24:	78fb      	ldrb	r3, [r7, #3]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	2b06      	cmp	r3, #6
 8000d2a:	d857      	bhi.n	8000ddc <_ZN7BaseCOM10GetCommandEh+0xe8>
 8000d2c:	a201      	add	r2, pc, #4	; (adr r2, 8000d34 <_ZN7BaseCOM10GetCommandEh+0x40>)
 8000d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d32:	bf00      	nop
 8000d34:	08000d51 	.word	0x08000d51
 8000d38:	08000d65 	.word	0x08000d65
 8000d3c:	08000d79 	.word	0x08000d79
 8000d40:	08000d8d 	.word	0x08000d8d
 8000d44:	08000da1 	.word	0x08000da1
 8000d48:	08000db5 	.word	0x08000db5
 8000d4c:	08000dc9 	.word	0x08000dc9
	{
		case CLOSE_ADDR:
			data2send[4] = driveCommand->isClose();
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f002 f944 	bl	8002fe2 <_ZN12DriveCommand7isCloseEv>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	741a      	strb	r2, [r3, #16]
			break;
 8000d62:	e03f      	b.n	8000de4 <_ZN7BaseCOM10GetCommandEh+0xf0>
		case OPEN_ADDR:
			data2send[4] = driveCommand->isOpen();
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f002 f95a 	bl	8003022 <_ZN12DriveCommand6isOpenEv>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	461a      	mov	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	741a      	strb	r2, [r3, #16]
			break;
 8000d76:	e035      	b.n	8000de4 <_ZN7BaseCOM10GetCommandEh+0xf0>
		case TEACH_ADDR:
			data2send[4] = driveCommand->isTeach();
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f002 f9f0 	bl	8003162 <_ZN12DriveCommand7isTeachEv>
 8000d82:	4603      	mov	r3, r0
 8000d84:	461a      	mov	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	741a      	strb	r2, [r3, #16]
			break;
 8000d8a:	e02b      	b.n	8000de4 <_ZN7BaseCOM10GetCommandEh+0xf0>
		case RESET_ADDR:
			data2send[4] = driveCommand->isReset();
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f002 f9a6 	bl	80030e2 <_ZN12DriveCommand7isResetEv>
 8000d96:	4603      	mov	r3, r0
 8000d98:	461a      	mov	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	741a      	strb	r2, [r3, #16]
			break;
 8000d9e:	e021      	b.n	8000de4 <_ZN7BaseCOM10GetCommandEh+0xf0>
		case ENABLE_ADDR:
			data2send[4] = driveCommand->isEnable();
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f002 f97c 	bl	80030a2 <_ZN12DriveCommand8isEnableEv>
 8000daa:	4603      	mov	r3, r0
 8000dac:	461a      	mov	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	741a      	strb	r2, [r3, #16]
			break;
 8000db2:	e017      	b.n	8000de4 <_ZN7BaseCOM10GetCommandEh+0xf0>
		case DISABLE_ADDR:
			data2send[4] = driveCommand->isDisable();
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f002 f952 	bl	8003062 <_ZN12DriveCommand9isDisableEv>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	741a      	strb	r2, [r3, #16]
			break;
 8000dc6:	e00d      	b.n	8000de4 <_ZN7BaseCOM10GetCommandEh+0xf0>
		case STOP_ADDR:
			data2send[4] = driveCommand->isStop();
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f002 f9a8 	bl	8003122 <_ZN12DriveCommand6isStopEv>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	741a      	strb	r2, [r3, #16]
			break;
 8000dda:	e003      	b.n	8000de4 <_ZN7BaseCOM10GetCommandEh+0xf0>
		default:
			data2send[0] = 0x1D;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	221d      	movs	r2, #29
 8000de0:	731a      	strb	r2, [r3, #12]
			break;
 8000de2:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	330c      	adds	r3, #12
 8000de8:	2206      	movs	r2, #6
 8000dea:	4619      	mov	r1, r3
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f000 faad 	bl	800134c <_ZN7BaseCOM4CRC8EPhh>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	749a      	strb	r2, [r3, #18]

	return data2send;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	330c      	adds	r3, #12
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop

08000e08 <_ZN7BaseCOM11SetSettingsEPh>:



void BaseCOM::SetSettings(uint8_t *data)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..5] = Payload
	//data[6] = crc

	uint16_t value = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	81fb      	strh	r3, [r7, #14]
	switch (data[3])
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	3303      	adds	r3, #3
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	3b10      	subs	r3, #16
 8000e1e:	2b45      	cmp	r3, #69	; 0x45
 8000e20:	f200 817b 	bhi.w	800111a <_ZN7BaseCOM11SetSettingsEPh+0x312>
 8000e24:	a201      	add	r2, pc, #4	; (adr r2, 8000e2c <_ZN7BaseCOM11SetSettingsEPh+0x24>)
 8000e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2a:	bf00      	nop
 8000e2c:	08000f45 	.word	0x08000f45
 8000e30:	08000f6d 	.word	0x08000f6d
 8000e34:	08000f95 	.word	0x08000f95
 8000e38:	08000fbd 	.word	0x08000fbd
 8000e3c:	08001085 	.word	0x08001085
 8000e40:	08000fe5 	.word	0x08000fe5
 8000e44:	0800100d 	.word	0x0800100d
 8000e48:	080010ad 	.word	0x080010ad
 8000e4c:	080010d5 	.word	0x080010d5
 8000e50:	08001035 	.word	0x08001035
 8000e54:	0800105d 	.word	0x0800105d
 8000e58:	0800111b 	.word	0x0800111b
 8000e5c:	0800111b 	.word	0x0800111b
 8000e60:	0800111b 	.word	0x0800111b
 8000e64:	0800111b 	.word	0x0800111b
 8000e68:	0800111b 	.word	0x0800111b
 8000e6c:	0800111b 	.word	0x0800111b
 8000e70:	0800111b 	.word	0x0800111b
 8000e74:	0800111b 	.word	0x0800111b
 8000e78:	0800111b 	.word	0x0800111b
 8000e7c:	0800111b 	.word	0x0800111b
 8000e80:	0800111b 	.word	0x0800111b
 8000e84:	0800111b 	.word	0x0800111b
 8000e88:	0800111b 	.word	0x0800111b
 8000e8c:	0800111b 	.word	0x0800111b
 8000e90:	0800111b 	.word	0x0800111b
 8000e94:	0800111b 	.word	0x0800111b
 8000e98:	0800111b 	.word	0x0800111b
 8000e9c:	0800111b 	.word	0x0800111b
 8000ea0:	0800111b 	.word	0x0800111b
 8000ea4:	0800111b 	.word	0x0800111b
 8000ea8:	0800111b 	.word	0x0800111b
 8000eac:	0800111b 	.word	0x0800111b
 8000eb0:	0800111b 	.word	0x0800111b
 8000eb4:	0800111b 	.word	0x0800111b
 8000eb8:	0800111b 	.word	0x0800111b
 8000ebc:	0800111b 	.word	0x0800111b
 8000ec0:	0800111b 	.word	0x0800111b
 8000ec4:	0800111b 	.word	0x0800111b
 8000ec8:	0800111b 	.word	0x0800111b
 8000ecc:	0800111b 	.word	0x0800111b
 8000ed0:	0800111b 	.word	0x0800111b
 8000ed4:	0800111b 	.word	0x0800111b
 8000ed8:	0800111b 	.word	0x0800111b
 8000edc:	0800111b 	.word	0x0800111b
 8000ee0:	0800111b 	.word	0x0800111b
 8000ee4:	0800111b 	.word	0x0800111b
 8000ee8:	0800111b 	.word	0x0800111b
 8000eec:	0800111b 	.word	0x0800111b
 8000ef0:	0800111b 	.word	0x0800111b
 8000ef4:	0800111b 	.word	0x0800111b
 8000ef8:	0800111b 	.word	0x0800111b
 8000efc:	0800111b 	.word	0x0800111b
 8000f00:	0800111b 	.word	0x0800111b
 8000f04:	0800111b 	.word	0x0800111b
 8000f08:	0800111b 	.word	0x0800111b
 8000f0c:	0800111b 	.word	0x0800111b
 8000f10:	0800111b 	.word	0x0800111b
 8000f14:	0800111b 	.word	0x0800111b
 8000f18:	0800111b 	.word	0x0800111b
 8000f1c:	0800111b 	.word	0x0800111b
 8000f20:	0800111b 	.word	0x0800111b
 8000f24:	0800111b 	.word	0x0800111b
 8000f28:	0800111b 	.word	0x0800111b
 8000f2c:	0800111b 	.word	0x0800111b
 8000f30:	0800111b 	.word	0x0800111b
 8000f34:	0800111b 	.word	0x0800111b
 8000f38:	0800111b 	.word	0x0800111b
 8000f3c:	0800111b 	.word	0x0800111b
 8000f40:	080010fd 	.word	0x080010fd
	{
		case TEACH_TORQUE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	3305      	adds	r3, #5
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	01db      	lsls	r3, r3, #7
 8000f4c:	b21a      	sxth	r2, r3
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	3304      	adds	r3, #4
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	4313      	orrs	r3, r2
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	81fb      	strh	r3, [r7, #14]
			driveSettings->setTeachTroque(value);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	89fa      	ldrh	r2, [r7, #14]
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f001 ff13 	bl	8002d90 <_ZN13DriveSettings14setTeachTroqueEt>
			break;
 8000f6a:	e0d7      	b.n	800111c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case TEACH_SPEED_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	3305      	adds	r3, #5
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	01db      	lsls	r3, r3, #7
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	81fb      	strh	r3, [r7, #14]
			driveSettings->setTeachSpeed(value);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	89fa      	ldrh	r2, [r7, #14]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f001 fed8 	bl	8002d42 <_ZN13DriveSettings13setTeachSpeedEt>
			break;
 8000f92:	e0c3      	b.n	800111c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case CLAMPING_TORQUE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	3305      	adds	r3, #5
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	01db      	lsls	r3, r3, #7
 8000f9c:	b21a      	sxth	r2, r3
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b21b      	sxth	r3, r3
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	81fb      	strh	r3, [r7, #14]
			driveSettings->setClampingTorque(value);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	89fa      	ldrh	r2, [r7, #14]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 fdda 	bl	8002b6e <_ZN13DriveSettings17setClampingTorqueEt>
			break;
 8000fba:	e0af      	b.n	800111c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case CLAMPING_SPEED_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	3305      	adds	r3, #5
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	01db      	lsls	r3, r3, #7
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	81fb      	strh	r3, [r7, #14]
			driveSettings->setClampingSpeed(value);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	89fa      	ldrh	r2, [r7, #14]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f001 fd9f 	bl	8002b20 <_ZN13DriveSettings16setClampingSpeedEt>
			break;
 8000fe2:	e09b      	b.n	800111c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case IN_POS_DIFF_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	3305      	adds	r3, #5
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	01db      	lsls	r3, r3, #7
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	81fb      	strh	r3, [r7, #14]
			driveSettings->setInPosDiff(value);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	89fa      	ldrh	r2, [r7, #14]
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f001 fdd9 	bl	8002bbc <_ZN13DriveSettings12setInPosDiffEt>
			break;
 800100a:	e087      	b.n	800111c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case OPENING_DISTANCE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	3305      	adds	r3, #5
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	01db      	lsls	r3, r3, #7
 8001014:	b21a      	sxth	r2, r3
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	3304      	adds	r3, #4
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	b21b      	sxth	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b21b      	sxth	r3, r3
 8001022:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOpeningDistance(value);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	89fa      	ldrh	r2, [r7, #14]
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f001 fdec 	bl	8002c0a <_ZN13DriveSettings18setOpeningDistanceEt>
			break;
 8001032:	e073      	b.n	800111c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case OVER_CURRENT_WARNING_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	3305      	adds	r3, #5
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	01db      	lsls	r3, r3, #7
 800103c:	b21a      	sxth	r2, r3
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	3304      	adds	r3, #4
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21b      	sxth	r3, r3
 800104a:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOverCurrentWarning(value);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	89fa      	ldrh	r2, [r7, #14]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f001 fe26 	bl	8002ca6 <_ZN13DriveSettings21setOverCurrentWarningEt>
			break;
 800105a:	e05f      	b.n	800111c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case OVER_CURRENT_ERROR_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	3305      	adds	r3, #5
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	01db      	lsls	r3, r3, #7
 8001064:	b21a      	sxth	r2, r3
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	3304      	adds	r3, #4
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21b      	sxth	r3, r3
 8001072:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOverCurrentError(value);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	89fa      	ldrh	r2, [r7, #14]
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f001 fefc 	bl	8002e7a <_ZN13DriveSettings19setOverCurrentErrorEt>
			break;
 8001082:	e04b      	b.n	800111c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case SELF_SHUTDOWN_DELAY_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	3305      	adds	r3, #5
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	01db      	lsls	r3, r3, #7
 800108c:	b21a      	sxth	r2, r3
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	3304      	adds	r3, #4
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b21b      	sxth	r3, r3
 800109a:	81fb      	strh	r3, [r7, #14]
			driveSettings->setSelfShutdownDelay(value);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	89fa      	ldrh	r2, [r7, #14]
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 fe25 	bl	8002cf4 <_ZN13DriveSettings20setSelfShutdownDelayEt>
			break;
 80010aa:	e037      	b.n	800111c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case UNDERVOLTAGE_WARNING_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	3305      	adds	r3, #5
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	01db      	lsls	r3, r3, #7
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	3304      	adds	r3, #4
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	81fb      	strh	r3, [r7, #14]
			driveSettings->setUnderVoltageWarning(value);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	89fa      	ldrh	r2, [r7, #14]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 fead 	bl	8002e2c <_ZN13DriveSettings22setUnderVoltageWarningEt>
			break;
 80010d2:	e023      	b.n	800111c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case UNDERVOLTAGE_ERROR_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	3305      	adds	r3, #5
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	01db      	lsls	r3, r3, #7
 80010dc:	b21a      	sxth	r2, r3
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	3304      	adds	r3, #4
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	81fb      	strh	r3, [r7, #14]
			driveSettings->setUnderVoltageError(value);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	89fa      	ldrh	r2, [r7, #14]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 fe72 	bl	8002dde <_ZN13DriveSettings20setUnderVoltageErrorEt>
			break;
 80010fa:	e00f      	b.n	800111c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case SAVE_SETTINGS_ADDR:
			driveSettings->setSaveSettings(data[4] != 0);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	3304      	adds	r3, #4
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	bf14      	ite	ne
 800110a:	2301      	movne	r3, #1
 800110c:	2300      	moveq	r3, #0
 800110e:	b2db      	uxtb	r3, r3
 8001110:	4619      	mov	r1, r3
 8001112:	4610      	mov	r0, r2
 8001114:	f001 fef8 	bl	8002f08 <_ZN13DriveSettings15setSaveSettingsEb>
			break;
 8001118:	e000      	b.n	800111c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		default:
			break;
 800111a:	bf00      	nop
	}
}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_ZN7BaseCOM9SetStatusEPh>:

void BaseCOM::SetStatus(uint8_t *data)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	switch (data[3])
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	3303      	adds	r3, #3
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	3b01      	subs	r3, #1
 8001136:	2b06      	cmp	r3, #6
 8001138:	d879      	bhi.n	800122e <_ZN7BaseCOM9SetStatusEPh+0x10a>
 800113a:	a201      	add	r2, pc, #4	; (adr r2, 8001140 <_ZN7BaseCOM9SetStatusEPh+0x1c>)
 800113c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001140:	0800115d 	.word	0x0800115d
 8001144:	0800117b 	.word	0x0800117b
 8001148:	08001199 	.word	0x08001199
 800114c:	080011b7 	.word	0x080011b7
 8001150:	080011d5 	.word	0x080011d5
 8001154:	080011f3 	.word	0x080011f3
 8001158:	08001211 	.word	0x08001211
	{
		case CLOSE_ADDR:
			driveStatus->setClose(data[4] == 0x01);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	3304      	adds	r3, #4
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b01      	cmp	r3, #1
 8001168:	bf0c      	ite	eq
 800116a:	2301      	moveq	r3, #1
 800116c:	2300      	movne	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	4619      	mov	r1, r3
 8001172:	4610      	mov	r0, r2
 8001174:	f002 f869 	bl	800324a <_ZN11DriveStatus8setCloseEb>
			break;
 8001178:	e05a      	b.n	8001230 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case OPEN_ADDR:
			driveStatus->setOpen(data[4] == 0x01);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	3304      	adds	r3, #4
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b01      	cmp	r3, #1
 8001186:	bf0c      	ite	eq
 8001188:	2301      	moveq	r3, #1
 800118a:	2300      	movne	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	4619      	mov	r1, r3
 8001190:	4610      	mov	r0, r2
 8001192:	f002 f87d 	bl	8003290 <_ZN11DriveStatus7setOpenEb>
			break;
 8001196:	e04b      	b.n	8001230 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case TEACH_ADDR:
			driveStatus->setTeach(data[4] == 0x01);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	3304      	adds	r3, #4
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	bf0c      	ite	eq
 80011a6:	2301      	moveq	r3, #1
 80011a8:	2300      	movne	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4619      	mov	r1, r3
 80011ae:	4610      	mov	r0, r2
 80011b0:	f002 f91d 	bl	80033ee <_ZN11DriveStatus8setTeachEb>
			break;
 80011b4:	e03c      	b.n	8001230 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case RESET_ADDR:
			driveStatus->setReset(data[4] == 0x01);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	3304      	adds	r3, #4
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	bf0c      	ite	eq
 80011c4:	2301      	moveq	r3, #1
 80011c6:	2300      	movne	r3, #0
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	4619      	mov	r1, r3
 80011cc:	4610      	mov	r0, r2
 80011ce:	f002 f8c8 	bl	8003362 <_ZN11DriveStatus8setResetEb>
			break;
 80011d2:	e02d      	b.n	8001230 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case ENABLE_ADDR:
			driveStatus->setEnable(data[4] == 0x01);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	3304      	adds	r3, #4
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	bf0c      	ite	eq
 80011e2:	2301      	moveq	r3, #1
 80011e4:	2300      	movne	r3, #0
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4619      	mov	r1, r3
 80011ea:	4610      	mov	r0, r2
 80011ec:	f002 f896 	bl	800331c <_ZN11DriveStatus9setEnableEb>
			break;
 80011f0:	e01e      	b.n	8001230 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case DISABLE_ADDR:
			driveStatus->setDisable(data[4] == 0x01);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	3304      	adds	r3, #4
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	bf0c      	ite	eq
 8001200:	2301      	moveq	r3, #1
 8001202:	2300      	movne	r3, #0
 8001204:	b2db      	uxtb	r3, r3
 8001206:	4619      	mov	r1, r3
 8001208:	4610      	mov	r0, r2
 800120a:	f002 f864 	bl	80032d6 <_ZN11DriveStatus10setDisableEb>
			break;
 800120e:	e00f      	b.n	8001230 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case STOP_ADDR:
			driveStatus->setStop(data[4] == 0x01);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	3304      	adds	r3, #4
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b01      	cmp	r3, #1
 800121c:	bf0c      	ite	eq
 800121e:	2301      	moveq	r3, #1
 8001220:	2300      	movne	r3, #0
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4619      	mov	r1, r3
 8001226:	4610      	mov	r0, r2
 8001228:	f002 f8be 	bl	80033a8 <_ZN11DriveStatus7setStopEb>
			break;
 800122c:	e000      	b.n	8001230 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		default:
			break;
 800122e:	bf00      	nop
	}
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_ZN7BaseCOM10SetCommandEPh>:

void BaseCOM::SetCommand(uint8_t *data)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	switch (data[3])
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	3303      	adds	r3, #3
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	3b01      	subs	r3, #1
 800124a:	2b06      	cmp	r3, #6
 800124c:	d879      	bhi.n	8001342 <_ZN7BaseCOM10SetCommandEPh+0x10a>
 800124e:	a201      	add	r2, pc, #4	; (adr r2, 8001254 <_ZN7BaseCOM10SetCommandEPh+0x1c>)
 8001250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001254:	08001271 	.word	0x08001271
 8001258:	0800128f 	.word	0x0800128f
 800125c:	080012ad 	.word	0x080012ad
 8001260:	080012cb 	.word	0x080012cb
 8001264:	080012e9 	.word	0x080012e9
 8001268:	08001307 	.word	0x08001307
 800126c:	08001325 	.word	0x08001325
	{
		case CLOSE_ADDR:
			driveCommand->setClose(data[4] == 0x01);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	3304      	adds	r3, #4
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	bf0c      	ite	eq
 800127e:	2301      	moveq	r3, #1
 8001280:	2300      	movne	r3, #0
 8001282:	b2db      	uxtb	r3, r3
 8001284:	4619      	mov	r1, r3
 8001286:	4610      	mov	r0, r2
 8001288:	f001 febc 	bl	8003004 <_ZN12DriveCommand8setCloseEb>
			break;
 800128c:	e05a      	b.n	8001344 <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case OPEN_ADDR:
			driveCommand->setOpen(data[4] == 0x01);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	3304      	adds	r3, #4
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b01      	cmp	r3, #1
 800129a:	bf0c      	ite	eq
 800129c:	2301      	moveq	r3, #1
 800129e:	2300      	movne	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	4619      	mov	r1, r3
 80012a4:	4610      	mov	r0, r2
 80012a6:	f001 fecd 	bl	8003044 <_ZN12DriveCommand7setOpenEb>
			break;
 80012aa:	e04b      	b.n	8001344 <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case TEACH_ADDR:
			driveCommand->setTeach(data[4] == 0x01);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	3304      	adds	r3, #4
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	bf0c      	ite	eq
 80012ba:	2301      	moveq	r3, #1
 80012bc:	2300      	movne	r3, #0
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	4619      	mov	r1, r3
 80012c2:	4610      	mov	r0, r2
 80012c4:	f001 ff5e 	bl	8003184 <_ZN12DriveCommand8setTeachEb>
			break;
 80012c8:	e03c      	b.n	8001344 <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case RESET_ADDR:
			driveCommand->setReset(data[4] == 0x01);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	3304      	adds	r3, #4
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	bf0c      	ite	eq
 80012d8:	2301      	moveq	r3, #1
 80012da:	2300      	movne	r3, #0
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	4619      	mov	r1, r3
 80012e0:	4610      	mov	r0, r2
 80012e2:	f001 ff0f 	bl	8003104 <_ZN12DriveCommand8setResetEb>
			break;
 80012e6:	e02d      	b.n	8001344 <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case ENABLE_ADDR:
			driveCommand->setEnable(data[4] == 0x01);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	3304      	adds	r3, #4
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	bf0c      	ite	eq
 80012f6:	2301      	moveq	r3, #1
 80012f8:	2300      	movne	r3, #0
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	4619      	mov	r1, r3
 80012fe:	4610      	mov	r0, r2
 8001300:	f001 fee0 	bl	80030c4 <_ZN12DriveCommand9setEnableEb>
			break;
 8001304:	e01e      	b.n	8001344 <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case DISABLE_ADDR:
			driveCommand->setDisable(data[4] == 0x01);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	3304      	adds	r3, #4
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b01      	cmp	r3, #1
 8001312:	bf0c      	ite	eq
 8001314:	2301      	moveq	r3, #1
 8001316:	2300      	movne	r3, #0
 8001318:	b2db      	uxtb	r3, r3
 800131a:	4619      	mov	r1, r3
 800131c:	4610      	mov	r0, r2
 800131e:	f001 feb1 	bl	8003084 <_ZN12DriveCommand10setDisableEb>
			break;
 8001322:	e00f      	b.n	8001344 <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case STOP_ADDR:
			driveCommand->setStop(data[4] == 0x01);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	3304      	adds	r3, #4
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b01      	cmp	r3, #1
 8001330:	bf0c      	ite	eq
 8001332:	2301      	moveq	r3, #1
 8001334:	2300      	movne	r3, #0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4619      	mov	r1, r3
 800133a:	4610      	mov	r0, r2
 800133c:	f001 ff02 	bl	8003144 <_ZN12DriveCommand7setStopEb>
			break;
 8001340:	e000      	b.n	8001344 <_ZN7BaseCOM10SetCommandEPh+0x10c>
		default:
			break;
 8001342:	bf00      	nop
	}
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <_ZN7BaseCOM4CRC8EPhh>:




uint8_t BaseCOM::CRC8(uint8_t *data, uint8_t length)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	4613      	mov	r3, r2
 8001358:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0xff;
 800135a:	23ff      	movs	r3, #255	; 0xff
 800135c:	77fb      	strb	r3, [r7, #31]
	size_t i, j;
	for (i = 0; i < length; i++)
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	429a      	cmp	r2, r3
 8001368:	d222      	bcs.n	80013b0 <_ZN7BaseCOM4CRC8EPhh+0x64>
	{
		crc ^= data[i];
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	4413      	add	r3, r2
 8001370:	781a      	ldrb	r2, [r3, #0]
 8001372:	7ffb      	ldrb	r3, [r7, #31]
 8001374:	4053      	eors	r3, r2
 8001376:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	2b07      	cmp	r3, #7
 8001380:	d812      	bhi.n	80013a8 <_ZN7BaseCOM4CRC8EPhh+0x5c>
		{
			if ((crc & 0x80) != 0)
 8001382:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001386:	2b00      	cmp	r3, #0
 8001388:	da07      	bge.n	800139a <_ZN7BaseCOM4CRC8EPhh+0x4e>
				crc = (uint8_t) ((crc << 1) ^ 0x31);
 800138a:	7ffb      	ldrb	r3, [r7, #31]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	b25b      	sxtb	r3, r3
 8001390:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001394:	b25b      	sxtb	r3, r3
 8001396:	77fb      	strb	r3, [r7, #31]
 8001398:	e002      	b.n	80013a0 <_ZN7BaseCOM4CRC8EPhh+0x54>
			else
				crc <<= 1;
 800139a:	7ffb      	ldrb	r3, [r7, #31]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	3301      	adds	r3, #1
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	e7e9      	b.n	800137c <_ZN7BaseCOM4CRC8EPhh+0x30>
	for (i = 0; i < length; i++)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	3301      	adds	r3, #1
 80013ac:	61bb      	str	r3, [r7, #24]
 80013ae:	e7d8      	b.n	8001362 <_ZN7BaseCOM4CRC8EPhh+0x16>
		}
	}
	return crc;
 80013b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <_ZN5IOCom9TransmittEPhh>:
/// Set IO output pins, this function is called by the main function through the task handler
/// @param data
/// @param length
/// @return
bool IOCom::Transmitt(uint8_t *data, uint8_t length)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	60f8      	str	r0, [r7, #12]
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	4613      	mov	r3, r2
 80013ca:	71fb      	strb	r3, [r7, #7]
	// data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	// data[3] = reg addr (close, open, setTeach...)
	// data[4..n] = Payload
	// data[5] = crc

	this->driveStatus->isEnable() == true ? Out1.Set() : Out1.Reset();
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80013d2:	4618      	mov	r0, r3
 80013d4:	f001 ff96 	bl	8003304 <_ZN11DriveStatus8isEnableEv>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d105      	bne.n	80013ea <_ZN5IOCom9TransmittEPhh+0x2c>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	3318      	adds	r3, #24
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 feef 	bl	80021c6 <_ZN10DigitalOut3SetEv>
 80013e8:	e004      	b.n	80013f4 <_ZN5IOCom9TransmittEPhh+0x36>
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	3318      	adds	r3, #24
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 ff07 	bl	8002202 <_ZN10DigitalOut5ResetEv>
	this->driveStatus->isOpen() == true ? Out2.Set() : Out2.Reset();
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80013fa:	4618      	mov	r0, r3
 80013fc:	f001 ff3c 	bl	8003278 <_ZN11DriveStatus6isOpenEv>
 8001400:	4603      	mov	r3, r0
 8001402:	2b01      	cmp	r3, #1
 8001404:	d105      	bne.n	8001412 <_ZN5IOCom9TransmittEPhh+0x54>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	3328      	adds	r3, #40	; 0x28
 800140a:	4618      	mov	r0, r3
 800140c:	f000 fedb 	bl	80021c6 <_ZN10DigitalOut3SetEv>
 8001410:	e004      	b.n	800141c <_ZN5IOCom9TransmittEPhh+0x5e>
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	3328      	adds	r3, #40	; 0x28
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fef3 	bl	8002202 <_ZN10DigitalOut5ResetEv>
	this->driveStatus->isClose() == true ? Out3.Set() : Out3.Reset();
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001422:	4618      	mov	r0, r3
 8001424:	f001 ff05 	bl	8003232 <_ZN11DriveStatus7isCloseEv>
 8001428:	4603      	mov	r3, r0
 800142a:	2b01      	cmp	r3, #1
 800142c:	d105      	bne.n	800143a <_ZN5IOCom9TransmittEPhh+0x7c>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3338      	adds	r3, #56	; 0x38
 8001432:	4618      	mov	r0, r3
 8001434:	f000 fec7 	bl	80021c6 <_ZN10DigitalOut3SetEv>
 8001438:	e004      	b.n	8001444 <_ZN5IOCom9TransmittEPhh+0x86>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	3338      	adds	r3, #56	; 0x38
 800143e:	4618      	mov	r0, r3
 8001440:	f000 fedf 	bl	8002202 <_ZN10DigitalOut5ResetEv>
	this->driveStatus->isStop() == true ? Out4.Set() : Out4.Reset();
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800144a:	4618      	mov	r0, r3
 800144c:	f001 ffa0 	bl	8003390 <_ZN11DriveStatus6isStopEv>
 8001450:	4603      	mov	r3, r0
 8001452:	2b01      	cmp	r3, #1
 8001454:	d105      	bne.n	8001462 <_ZN5IOCom9TransmittEPhh+0xa4>
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	3348      	adds	r3, #72	; 0x48
 800145a:	4618      	mov	r0, r3
 800145c:	f000 feb3 	bl	80021c6 <_ZN10DigitalOut3SetEv>
 8001460:	e004      	b.n	800146c <_ZN5IOCom9TransmittEPhh+0xae>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	3348      	adds	r3, #72	; 0x48
 8001466:	4618      	mov	r0, r3
 8001468:	f000 fecb 	bl	8002202 <_ZN10DigitalOut5ResetEv>
	this->driveStatus->isTeach() == true ? Out5.Set() : Out5.Reset();
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001472:	4618      	mov	r0, r3
 8001474:	f001 ffaf 	bl	80033d6 <_ZN11DriveStatus7isTeachEv>
 8001478:	4603      	mov	r3, r0
 800147a:	2b01      	cmp	r3, #1
 800147c:	d105      	bne.n	800148a <_ZN5IOCom9TransmittEPhh+0xcc>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	3358      	adds	r3, #88	; 0x58
 8001482:	4618      	mov	r0, r3
 8001484:	f000 fe9f 	bl	80021c6 <_ZN10DigitalOut3SetEv>
 8001488:	e004      	b.n	8001494 <_ZN5IOCom9TransmittEPhh+0xd6>
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	3358      	adds	r3, #88	; 0x58
 800148e:	4618      	mov	r0, r3
 8001490:	f000 feb7 	bl	8002202 <_ZN10DigitalOut5ResetEv>

	uint8_t errorTemp = (uint8_t)this->driveStatus->getError();
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800149a:	4618      	mov	r0, r3
 800149c:	f001 ffbe 	bl	800341c <_ZN11DriveStatus8getErrorEv>
 80014a0:	4603      	mov	r3, r0
 80014a2:	75fb      	strb	r3, [r7, #23]
	(errorTemp & 0x01) == true ? Out6.Set() : Out6.Reset();
 80014a4:	7dfb      	ldrb	r3, [r7, #23]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d005      	beq.n	80014ba <_ZN5IOCom9TransmittEPhh+0xfc>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	3368      	adds	r3, #104	; 0x68
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 fe87 	bl	80021c6 <_ZN10DigitalOut3SetEv>
 80014b8:	e004      	b.n	80014c4 <_ZN5IOCom9TransmittEPhh+0x106>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	3368      	adds	r3, #104	; 0x68
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fe9f 	bl	8002202 <_ZN10DigitalOut5ResetEv>
	(errorTemp & 0x02) == true ? Out7.Set() : Out7.Reset();
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3378      	adds	r3, #120	; 0x78
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fe9a 	bl	8002202 <_ZN10DigitalOut5ResetEv>
	(errorTemp & 0x04) == true ? Out8.Set() : Out8.Reset();
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	3388      	adds	r3, #136	; 0x88
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 fe95 	bl	8002202 <_ZN10DigitalOut5ResetEv>

	return true;
 80014d8:	2301      	movs	r3, #1
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <_ZN5IOCom7ReceiveEPhh>:
/// Read IO input pins, this function is called by the main function through the task handler
/// @param data
/// @param length
/// @return
bool IOCom::Receive(uint8_t *data, uint8_t length)
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	4613      	mov	r3, r2
 80014f0:	71fb      	strb	r3, [r7, #7]
	configeWriteStatus = CONFIG_WRITE;
 80014f2:	2102      	movs	r1, #2
 80014f4:	4869      	ldr	r0, [pc, #420]	; (800169c <_ZN5IOCom7ReceiveEPhh+0x1b8>)
 80014f6:	f004 ff29 	bl	800634c <HAL_GPIO_ReadPin>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	bf0c      	ite	eq
 8001500:	2301      	moveq	r3, #1
 8001502:	2300      	movne	r3, #0
 8001504:	b2da      	uxtb	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

	if (configeWriteStatus == previousConfigeWriteStatus)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8001518:	429a      	cmp	r2, r3
 800151a:	d116      	bne.n	800154a <_ZN5IOCom7ReceiveEPhh+0x66>
	{
		
		if (IO_TIMEOUT / IO_UPDATE_TIME >= timeoutCounter)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8001522:	2b06      	cmp	r3, #6
 8001524:	d808      	bhi.n	8001538 <_ZN5IOCom7ReceiveEPhh+0x54>
		{
			timeoutCounter = 0;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
			counter = 0;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8001536:	e00c      	b.n	8001552 <_ZN5IOCom7ReceiveEPhh+0x6e>
		}else{
			timeoutCounter++;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800153e:	3301      	adds	r3, #1
 8001540:	b29a      	uxth	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8001548:	e003      	b.n	8001552 <_ZN5IOCom7ReceiveEPhh+0x6e>
		}
	}
	else
	{
		timeoutCounter=0;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2200      	movs	r2, #0
 800154e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	}

	if (configeWriteStatus && !previousConfigeWriteStatus)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 8094 	beq.w	8001686 <_ZN5IOCom7ReceiveEPhh+0x1a2>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8001564:	f083 0301 	eor.w	r3, r3, #1
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 808b 	beq.w	8001686 <_ZN5IOCom7ReceiveEPhh+0x1a2>
	{
		// read digial config
		uint8_t data = ((uint8_t)CONFIG_ADDR_7 << 7) + (((uint8_t)CONFIG_ADDR_6) << 6) + (((uint8_t)CONFIG_ADDR_5) << 5) + (((uint8_t)CONFIG_ADDR_4) << 4) + (((uint8_t)CONFIG_ADDR_3) << 3) + (((uint8_t)CONFIG_ADDR_2) << 2) + (((uint8_t)CONFIG_ADDR_1) << 1);
 8001570:	2104      	movs	r1, #4
 8001572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001576:	f004 fee9 	bl	800634c <HAL_GPIO_ReadPin>
 800157a:	4603      	mov	r3, r0
 800157c:	2b80      	cmp	r3, #128	; 0x80
 800157e:	bf0c      	ite	eq
 8001580:	2301      	moveq	r3, #1
 8001582:	2300      	movne	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	461c      	mov	r4, r3
 8001588:	2102      	movs	r1, #2
 800158a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158e:	f004 fedd 	bl	800634c <HAL_GPIO_ReadPin>
 8001592:	4603      	mov	r3, r0
 8001594:	2b01      	cmp	r3, #1
 8001596:	d101      	bne.n	800159c <_ZN5IOCom7ReceiveEPhh+0xb8>
 8001598:	2340      	movs	r3, #64	; 0x40
 800159a:	e000      	b.n	800159e <_ZN5IOCom7ReceiveEPhh+0xba>
 800159c:	2300      	movs	r3, #0
 800159e:	4423      	add	r3, r4
 80015a0:	b2dc      	uxtb	r4, r3
 80015a2:	2101      	movs	r1, #1
 80015a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a8:	f004 fed0 	bl	800634c <HAL_GPIO_ReadPin>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d101      	bne.n	80015b6 <_ZN5IOCom7ReceiveEPhh+0xd2>
 80015b2:	2320      	movs	r3, #32
 80015b4:	e000      	b.n	80015b8 <_ZN5IOCom7ReceiveEPhh+0xd4>
 80015b6:	2300      	movs	r3, #0
 80015b8:	4423      	add	r3, r4
 80015ba:	b2dc      	uxtb	r4, r3
 80015bc:	2108      	movs	r1, #8
 80015be:	4838      	ldr	r0, [pc, #224]	; (80016a0 <_ZN5IOCom7ReceiveEPhh+0x1bc>)
 80015c0:	f004 fec4 	bl	800634c <HAL_GPIO_ReadPin>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d101      	bne.n	80015ce <_ZN5IOCom7ReceiveEPhh+0xea>
 80015ca:	2310      	movs	r3, #16
 80015cc:	e000      	b.n	80015d0 <_ZN5IOCom7ReceiveEPhh+0xec>
 80015ce:	2300      	movs	r3, #0
 80015d0:	4423      	add	r3, r4
 80015d2:	b2dc      	uxtb	r4, r3
 80015d4:	2104      	movs	r1, #4
 80015d6:	4832      	ldr	r0, [pc, #200]	; (80016a0 <_ZN5IOCom7ReceiveEPhh+0x1bc>)
 80015d8:	f004 feb8 	bl	800634c <HAL_GPIO_ReadPin>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d101      	bne.n	80015e6 <_ZN5IOCom7ReceiveEPhh+0x102>
 80015e2:	2308      	movs	r3, #8
 80015e4:	e000      	b.n	80015e8 <_ZN5IOCom7ReceiveEPhh+0x104>
 80015e6:	2300      	movs	r3, #0
 80015e8:	4423      	add	r3, r4
 80015ea:	b2dc      	uxtb	r4, r3
 80015ec:	2102      	movs	r1, #2
 80015ee:	482c      	ldr	r0, [pc, #176]	; (80016a0 <_ZN5IOCom7ReceiveEPhh+0x1bc>)
 80015f0:	f004 feac 	bl	800634c <HAL_GPIO_ReadPin>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <_ZN5IOCom7ReceiveEPhh+0x11a>
 80015fa:	2304      	movs	r3, #4
 80015fc:	e000      	b.n	8001600 <_ZN5IOCom7ReceiveEPhh+0x11c>
 80015fe:	2300      	movs	r3, #0
 8001600:	4423      	add	r3, r4
 8001602:	b2dc      	uxtb	r4, r3
 8001604:	2101      	movs	r1, #1
 8001606:	4826      	ldr	r0, [pc, #152]	; (80016a0 <_ZN5IOCom7ReceiveEPhh+0x1bc>)
 8001608:	f004 fea0 	bl	800634c <HAL_GPIO_ReadPin>
 800160c:	4603      	mov	r3, r0
 800160e:	2b01      	cmp	r3, #1
 8001610:	d101      	bne.n	8001616 <_ZN5IOCom7ReceiveEPhh+0x132>
 8001612:	2302      	movs	r3, #2
 8001614:	e000      	b.n	8001618 <_ZN5IOCom7ReceiveEPhh+0x134>
 8001616:	2300      	movs	r3, #0
 8001618:	4423      	add	r3, r4
 800161a:	75fb      	strb	r3, [r7, #23]

		switch (counter)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8001622:	2b03      	cmp	r3, #3
 8001624:	d829      	bhi.n	800167a <_ZN5IOCom7ReceiveEPhh+0x196>
 8001626:	a201      	add	r2, pc, #4	; (adr r2, 800162c <_ZN5IOCom7ReceiveEPhh+0x148>)
 8001628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162c:	0800163d 	.word	0x0800163d
 8001630:	08001685 	.word	0x08001685
 8001634:	08001685 	.word	0x08001685
 8001638:	08001657 	.word	0x08001657
		{
		case 0:
			reg = data;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	7dfa      	ldrb	r2, [r7, #23]
 8001640:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
			counter++;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800164a:	3301      	adds	r3, #1
 800164c:	b2da      	uxtb	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
		case 1:
			break;
 8001654:	e016      	b.n	8001684 <_ZN5IOCom7ReceiveEPhh+0x1a0>
			break;
			payload |= ((uint16_t)data) << 7;
			counter++;
			break;
		case 3:
			payload |= data;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 800165c:	7dfb      	ldrb	r3, [r7, #23]
 800165e:	b29b      	uxth	r3, r3
 8001660:	4313      	orrs	r3, r2
 8001662:	b29a      	uxth	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
			counter = 0;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			CheckData();
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 f816 	bl	80016a4 <_ZN5IOCom9CheckDataEv>
			break;
 8001678:	e005      	b.n	8001686 <_ZN5IOCom7ReceiveEPhh+0x1a2>
		default:
			counter = 0;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			break;
 8001682:	e000      	b.n	8001686 <_ZN5IOCom7ReceiveEPhh+0x1a2>
			break;
 8001684:	bf00      	nop
		}
	}

previousConfigeWriteStatus = configeWriteStatus;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

	return false;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	371c      	adds	r7, #28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd90      	pop	{r4, r7, pc}
 800169c:	48001c00 	.word	0x48001c00
 80016a0:	48000800 	.word	0x48000800

080016a4 <_ZN5IOCom9CheckDataEv>:

bool IOCom::CheckData()
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	// data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	// data[3] = reg addr (close, open, setTeach...)
	// data[4..n] = Payload
	// data[5] = crc

	uint8_t data[] =
 80016ac:	f107 0308 	add.w	r3, r7, #8
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	231f      	movs	r3, #31
 80016b8:	723b      	strb	r3, [r7, #8]
		{0x1F, 0x00, command, reg, (uint8_t)(payload >> 8), (uint8_t)(payload), 0x00, 0x00};
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80016c0:	72bb      	strb	r3, [r7, #10]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80016c8:	72fb      	strb	r3, [r7, #11]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	733b      	strb	r3, [r7, #12]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	737b      	strb	r3, [r7, #13]

	switch (reg)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d018      	beq.n	800171e <_ZN5IOCom9CheckDataEv+0x7a>
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	dc1f      	bgt.n	8001730 <_ZN5IOCom9CheckDataEv+0x8c>
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d002      	beq.n	80016fa <_ZN5IOCom9CheckDataEv+0x56>
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d009      	beq.n	800170c <_ZN5IOCom9CheckDataEv+0x68>
		break;
	case SEND_STATUS:
		SetStatus(data);
		break;
	default:
		break;
 80016f8:	e01a      	b.n	8001730 <_ZN5IOCom9CheckDataEv+0x8c>
		SetSettings(data);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3304      	adds	r3, #4
 80016fe:	f107 0208 	add.w	r2, r7, #8
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fb7f 	bl	8000e08 <_ZN7BaseCOM11SetSettingsEPh>
		break;
 800170a:	e012      	b.n	8001732 <_ZN5IOCom9CheckDataEv+0x8e>
		SetCommand(data);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3304      	adds	r3, #4
 8001710:	f107 0208 	add.w	r2, r7, #8
 8001714:	4611      	mov	r1, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fd8e 	bl	8001238 <_ZN7BaseCOM10SetCommandEPh>
		break;
 800171c:	e009      	b.n	8001732 <_ZN5IOCom9CheckDataEv+0x8e>
		SetStatus(data);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3304      	adds	r3, #4
 8001722:	f107 0208 	add.w	r2, r7, #8
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fcfb 	bl	8001124 <_ZN7BaseCOM9SetStatusEPh>
		break;
 800172e:	e000      	b.n	8001732 <_ZN5IOCom9CheckDataEv+0x8e>
		break;
 8001730:	bf00      	nop
	}
	return true;
 8001732:	2301      	movs	r3, #1
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <_ZN8RFM95Com9TransmittEPhh>:

#include "RFM95Com.h"
#include "../AppMain/Defines.h"

bool RFM95Com::Transmitt(uint8_t *data, uint8_t length)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	4613      	mov	r3, r2
 8001748:	71fb      	strb	r3, [r7, #7]
	uint8_t *txData;

	if (this->driveCommand->isCommandChanged() != 0)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	4618      	mov	r0, r3
 8001750:	f001 fd2c 	bl	80031ac <_ZNK12DriveCommand16isCommandChangedEv>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	bf14      	ite	ne
 800175a:	2301      	movne	r3, #1
 800175c:	2300      	moveq	r3, #0
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 808d 	beq.w	8001880 <_ZN8RFM95Com9TransmittEPhh+0x144>
	{
		uint8_t command = driveCommand->getCommandChangedReg();
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	4618      	mov	r0, r3
 800176c:	f001 fd2f 	bl	80031ce <_ZNK12DriveCommand20getCommandChangedRegEv>
 8001770:	4603      	mov	r3, r0
 8001772:	767b      	strb	r3, [r7, #25]

		if (command & CLOSE_CHANGE)
 8001774:	7e7b      	ldrb	r3, [r7, #25]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00d      	beq.n	800179a <_ZN8RFM95Com9TransmittEPhh+0x5e>
		{
			txData = this->GetCommand(CLOSE_ADDR);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3304      	adds	r3, #4
 8001782:	2101      	movs	r1, #1
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fab5 	bl	8000cf4 <_ZN7BaseCOM10GetCommandEh>
 800178a:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(CLOSE_CHANGE);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001790:	2101      	movs	r1, #1
 8001792:	4618      	mov	r0, r3
 8001794:	f001 fd27 	bl	80031e6 <_ZN12DriveCommand19ResetCommandChangedEh>
 8001798:	e179      	b.n	8001a8e <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & OPEN_CHANGE)
 800179a:	7e7b      	ldrb	r3, [r7, #25]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00d      	beq.n	80017c0 <_ZN8RFM95Com9TransmittEPhh+0x84>
		{
			txData = this->GetCommand(OPEN_ADDR);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	3304      	adds	r3, #4
 80017a8:	2102      	movs	r1, #2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff faa2 	bl	8000cf4 <_ZN7BaseCOM10GetCommandEh>
 80017b0:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(OPEN_CHANGE);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	2102      	movs	r1, #2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f001 fd14 	bl	80031e6 <_ZN12DriveCommand19ResetCommandChangedEh>
 80017be:	e166      	b.n	8001a8e <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & TEACH_CHANGE)
 80017c0:	7e7b      	ldrb	r3, [r7, #25]
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00d      	beq.n	80017e6 <_ZN8RFM95Com9TransmittEPhh+0xaa>
		{
			txData = this->GetCommand(TEACH_ADDR);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2103      	movs	r1, #3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fa8f 	bl	8000cf4 <_ZN7BaseCOM10GetCommandEh>
 80017d6:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(TEACH_CHANGE);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	2104      	movs	r1, #4
 80017de:	4618      	mov	r0, r3
 80017e0:	f001 fd01 	bl	80031e6 <_ZN12DriveCommand19ResetCommandChangedEh>
 80017e4:	e153      	b.n	8001a8e <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & RESET_CHANGE)
 80017e6:	7e7b      	ldrb	r3, [r7, #25]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00d      	beq.n	800180c <_ZN8RFM95Com9TransmittEPhh+0xd0>
		{
			txData = this->GetCommand(RESET_ADDR);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	3304      	adds	r3, #4
 80017f4:	2104      	movs	r1, #4
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fa7c 	bl	8000cf4 <_ZN7BaseCOM10GetCommandEh>
 80017fc:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(RESET_CHANGE);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001802:	2108      	movs	r1, #8
 8001804:	4618      	mov	r0, r3
 8001806:	f001 fcee 	bl	80031e6 <_ZN12DriveCommand19ResetCommandChangedEh>
 800180a:	e140      	b.n	8001a8e <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & ENABLE_CHANGE)
 800180c:	7e7b      	ldrb	r3, [r7, #25]
 800180e:	f003 0310 	and.w	r3, r3, #16
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00d      	beq.n	8001832 <_ZN8RFM95Com9TransmittEPhh+0xf6>
		{
			txData = this->GetCommand(ENABLE_ADDR);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	3304      	adds	r3, #4
 800181a:	2105      	movs	r1, #5
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fa69 	bl	8000cf4 <_ZN7BaseCOM10GetCommandEh>
 8001822:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(ENABLE_CHANGE);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	2110      	movs	r1, #16
 800182a:	4618      	mov	r0, r3
 800182c:	f001 fcdb 	bl	80031e6 <_ZN12DriveCommand19ResetCommandChangedEh>
 8001830:	e12d      	b.n	8001a8e <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & DISABLE_CHANGE)
 8001832:	7e7b      	ldrb	r3, [r7, #25]
 8001834:	f003 0320 	and.w	r3, r3, #32
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00d      	beq.n	8001858 <_ZN8RFM95Com9TransmittEPhh+0x11c>
		{
			txData = this->GetCommand(DISABLE_ADDR);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	3304      	adds	r3, #4
 8001840:	2106      	movs	r1, #6
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fa56 	bl	8000cf4 <_ZN7BaseCOM10GetCommandEh>
 8001848:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(DISABLE_CHANGE);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184e:	2120      	movs	r1, #32
 8001850:	4618      	mov	r0, r3
 8001852:	f001 fcc8 	bl	80031e6 <_ZN12DriveCommand19ResetCommandChangedEh>
 8001856:	e11a      	b.n	8001a8e <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & STOP_CHANGE)
 8001858:	7e7b      	ldrb	r3, [r7, #25]
 800185a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 8115 	beq.w	8001a8e <_ZN8RFM95Com9TransmittEPhh+0x352>
		{
			txData = this->GetCommand(STOP_ADDR);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	3304      	adds	r3, #4
 8001868:	2107      	movs	r1, #7
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fa42 	bl	8000cf4 <_ZN7BaseCOM10GetCommandEh>
 8001870:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(STOP_CHANGE);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	2140      	movs	r1, #64	; 0x40
 8001878:	4618      	mov	r0, r3
 800187a:	f001 fcb4 	bl	80031e6 <_ZN12DriveCommand19ResetCommandChangedEh>
 800187e:	e106      	b.n	8001a8e <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
	}
	else if (driveSettings->isSettingsChanged() != 0)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	4618      	mov	r0, r3
 8001886:	f001 fb4e 	bl	8002f26 <_ZN13DriveSettings17isSettingsChangedEv>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf14      	ite	ne
 8001890:	2301      	movne	r3, #1
 8001892:	2300      	moveq	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 80db 	beq.w	8001a52 <_ZN8RFM95Com9TransmittEPhh+0x316>
	{
		uint16_t commands = driveSettings->getSettingsChangedReg();
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f001 fb51 	bl	8002f48 <_ZNK13DriveSettings21getSettingsChangedRegEv>
 80018a6:	4603      	mov	r3, r0
 80018a8:	837b      	strh	r3, [r7, #26]

		if (commands & TEACH_TORQUE_CHANGE)
 80018aa:	8b7b      	ldrh	r3, [r7, #26]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00d      	beq.n	80018d0 <_ZN8RFM95Com9TransmittEPhh+0x194>
		{
			txData = this->GetSettings(TEACH_TORQUE_ADDR);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	3304      	adds	r3, #4
 80018b8:	2110      	movs	r1, #16
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff f87e 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 80018c0:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(TEACH_TORQUE_CHANGE);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	2101      	movs	r1, #1
 80018c8:	4618      	mov	r0, r3
 80018ca:	f001 fb49 	bl	8002f60 <_ZN13DriveSettings20ResetSettingsChangedEt>
 80018ce:	e0de      	b.n	8001a8e <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & TEACH_SPEED_CHANGE)
 80018d0:	8b7b      	ldrh	r3, [r7, #26]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00d      	beq.n	80018f6 <_ZN8RFM95Com9TransmittEPhh+0x1ba>
		{
			txData = this->GetSettings(TEACH_SPEED_ADDR);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	3304      	adds	r3, #4
 80018de:	2111      	movs	r1, #17
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff f86b 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 80018e6:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(TEACH_SPEED_CHANGE);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	2102      	movs	r1, #2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f001 fb36 	bl	8002f60 <_ZN13DriveSettings20ResetSettingsChangedEt>
 80018f4:	e0cb      	b.n	8001a8e <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & CLAMPING_TORQUE_CHANGE)
 80018f6:	8b7b      	ldrh	r3, [r7, #26]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00d      	beq.n	800191c <_ZN8RFM95Com9TransmittEPhh+0x1e0>
		{
			txData = this->GetSettings(CLAMPING_TORQUE_ADDR);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	3304      	adds	r3, #4
 8001904:	2112      	movs	r1, #18
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff f858 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 800190c:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(CLAMPING_TORQUE_CHANGE);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	2104      	movs	r1, #4
 8001914:	4618      	mov	r0, r3
 8001916:	f001 fb23 	bl	8002f60 <_ZN13DriveSettings20ResetSettingsChangedEt>
 800191a:	e0b8      	b.n	8001a8e <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & CLAMPING_SPEED_CHANGE)
 800191c:	8b7b      	ldrh	r3, [r7, #26]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00d      	beq.n	8001942 <_ZN8RFM95Com9TransmittEPhh+0x206>
		{
			txData = this->GetSettings(CLAMPING_SPEED_ADDR);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3304      	adds	r3, #4
 800192a:	2113      	movs	r1, #19
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff f845 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 8001932:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(CLAMPING_SPEED_CHANGE);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	2108      	movs	r1, #8
 800193a:	4618      	mov	r0, r3
 800193c:	f001 fb10 	bl	8002f60 <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001940:	e0a5      	b.n	8001a8e <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & SELF_SHUTDOWN_DELAY_CHANGE)
 8001942:	8b7b      	ldrh	r3, [r7, #26]
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00d      	beq.n	8001968 <_ZN8RFM95Com9TransmittEPhh+0x22c>
		{
			txData = this->GetSettings(SELF_SHUTDOWN_DELAY_ADDR);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3304      	adds	r3, #4
 8001950:	2114      	movs	r1, #20
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff f832 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 8001958:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(SELF_SHUTDOWN_DELAY_CHANGE);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	2110      	movs	r1, #16
 8001960:	4618      	mov	r0, r3
 8001962:	f001 fafd 	bl	8002f60 <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001966:	e092      	b.n	8001a8e <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & IN_POS_DIFF_CHANGE)
 8001968:	8b7b      	ldrh	r3, [r7, #26]
 800196a:	f003 0320 	and.w	r3, r3, #32
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00d      	beq.n	800198e <_ZN8RFM95Com9TransmittEPhh+0x252>
		{
			txData = this->GetSettings(IN_POS_DIFF_ADDR);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	3304      	adds	r3, #4
 8001976:	2115      	movs	r1, #21
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff f81f 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 800197e:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(IN_POS_DIFF_CHANGE);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	2120      	movs	r1, #32
 8001986:	4618      	mov	r0, r3
 8001988:	f001 faea 	bl	8002f60 <_ZN13DriveSettings20ResetSettingsChangedEt>
 800198c:	e07f      	b.n	8001a8e <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & OPENING_DISTANCE_CHANGE)
 800198e:	8b7b      	ldrh	r3, [r7, #26]
 8001990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00d      	beq.n	80019b4 <_ZN8RFM95Com9TransmittEPhh+0x278>
		{
			txData = this->GetSettings(OPENING_DISTANCE_ADDR);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3304      	adds	r3, #4
 800199c:	2116      	movs	r1, #22
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff f80c 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 80019a4:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(OPENING_DISTANCE_CHANGE);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	2140      	movs	r1, #64	; 0x40
 80019ac:	4618      	mov	r0, r3
 80019ae:	f001 fad7 	bl	8002f60 <_ZN13DriveSettings20ResetSettingsChangedEt>
 80019b2:	e06c      	b.n	8001a8e <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & UNDERVOLTAGE_WARNING_CHANGE)
 80019b4:	8b7b      	ldrh	r3, [r7, #26]
 80019b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00d      	beq.n	80019da <_ZN8RFM95Com9TransmittEPhh+0x29e>
		{
			txData = this->GetSettings(UNDERVOLTAGE_WARNING_ADDR);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3304      	adds	r3, #4
 80019c2:	2117      	movs	r1, #23
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fff9 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 80019ca:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(UNDERVOLTAGE_WARNING_CHANGE);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	2180      	movs	r1, #128	; 0x80
 80019d2:	4618      	mov	r0, r3
 80019d4:	f001 fac4 	bl	8002f60 <_ZN13DriveSettings20ResetSettingsChangedEt>
 80019d8:	e059      	b.n	8001a8e <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & UNDERVOLTAGE_ERROR_CHANGE)
 80019da:	8b7b      	ldrh	r3, [r7, #26]
 80019dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00e      	beq.n	8001a02 <_ZN8RFM95Com9TransmittEPhh+0x2c6>
		{
			txData = this->GetSettings(UNDERVOLTAGE_ERROR_ADDR);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3304      	adds	r3, #4
 80019e8:	2118      	movs	r1, #24
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe ffe6 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 80019f0:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(UNDERVOLTAGE_ERROR_CHANGE);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019fa:	4618      	mov	r0, r3
 80019fc:	f001 fab0 	bl	8002f60 <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001a00:	e045      	b.n	8001a8e <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & OVER_CURRENT_WARNING_CHANGE)
 8001a02:	8b7b      	ldrh	r3, [r7, #26]
 8001a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00e      	beq.n	8001a2a <_ZN8RFM95Com9TransmittEPhh+0x2ee>
		{
			txData = this->GetSettings(OVER_CURRENT_WARNING_ADDR);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3304      	adds	r3, #4
 8001a10:	2119      	movs	r1, #25
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe ffd2 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 8001a18:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(OVER_CURRENT_WARNING_CHANGE);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a22:	4618      	mov	r0, r3
 8001a24:	f001 fa9c 	bl	8002f60 <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001a28:	e031      	b.n	8001a8e <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & OVER_CURRENT_ERROR_CHANGE)
 8001a2a:	8b7b      	ldrh	r3, [r7, #26]
 8001a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d02c      	beq.n	8001a8e <_ZN8RFM95Com9TransmittEPhh+0x352>
		{
			txData = this->GetSettings(OVER_CURRENT_ERROR_ADDR);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3304      	adds	r3, #4
 8001a38:	211a      	movs	r1, #26
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe ffbe 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 8001a40:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(OVER_CURRENT_ERROR_CHANGE);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f001 fa88 	bl	8002f60 <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001a50:	e01d      	b.n	8001a8e <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
	}
	else
	{
		uint8_t dataTemp[] =
 8001a52:	f107 0310 	add.w	r3, r7, #16
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	f8c3 2003 	str.w	r2, [r3, #3]
 8001a5e:	231f      	movs	r3, #31
 8001a60:	743b      	strb	r3, [r7, #16]
 8001a62:	2313      	movs	r3, #19
 8001a64:	74bb      	strb	r3, [r7, #18]
		{ 0x1F, driveSettings->getDeviceAddress(), GET_STATUS, 0x00, 0x00, 0x00,
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f001 fa20 	bl	8002eb0 <_ZN13DriveSettings16getDeviceAddressEv>
 8001a70:	4603      	mov	r3, r0
				0x00 };
 8001a72:	747b      	strb	r3, [r7, #17]
		dataTemp[6] = CRC8(dataTemp, 6);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	3304      	adds	r3, #4
 8001a78:	f107 0110 	add.w	r1, r7, #16
 8001a7c:	2206      	movs	r2, #6
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fc64 	bl	800134c <_ZN7BaseCOM4CRC8EPhh>
 8001a84:	4603      	mov	r3, r0
 8001a86:	75bb      	strb	r3, [r7, #22]
		txData = dataTemp;
 8001a88:	f107 0310 	add.w	r3, r7, #16
 8001a8c:	61fb      	str	r3, [r7, #28]
	}

	rfm95->beginPacket();
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	2100      	movs	r1, #0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 fd06 	bl	80024a6 <_ZN10RFM95_LoRa11beginPacketEi>
	rfm95->write(txData, 7);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6998      	ldr	r0, [r3, #24]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	69f9      	ldr	r1, [r7, #28]
 8001aac:	4798      	blx	r3
	rfm95->endPacket();
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 fd18 	bl	80024e8 <_ZN10RFM95_LoRa9endPacketEv>
	return true;
 8001ab8:	2301      	movs	r3, #1
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3720      	adds	r7, #32
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <_ZN8RFM95Com7ReceiveEPhh>:

bool RFM95Com::Receive(uint8_t *data, uint8_t length)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	4613      	mov	r3, r2
 8001ace:	71fb      	strb	r3, [r7, #7]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[5] = crc

	uint8_t packetSize = rfm95->parsePacket();
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fd28 	bl	800252c <_ZN10RFM95_LoRa11parsePacketEi>
 8001adc:	4603      	mov	r3, r0
 8001ade:	75bb      	strb	r3, [r7, #22]
	if (packetSize != 0)
 8001ae0:	7dbb      	ldrb	r3, [r7, #22]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d065      	beq.n	8001bb2 <_ZN8RFM95Com7ReceiveEPhh+0xf0>
	{
		uint8_t counter = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	75fb      	strb	r3, [r7, #23]
		while (rfm95->available())
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	699a      	ldr	r2, [r3, #24]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	3308      	adds	r3, #8
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4610      	mov	r0, r2
 8001afa:	4798      	blx	r3
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bf14      	ite	ne
 8001b02:	2301      	movne	r3, #1
 8001b04:	2300      	moveq	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d017      	beq.n	8001b3c <_ZN8RFM95Com7ReceiveEPhh+0x7a>
		{
			data[counter] = rfm95->read();
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	699a      	ldr	r2, [r3, #24]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	330c      	adds	r3, #12
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4798      	blx	r3
 8001b1e:	4601      	mov	r1, r0
 8001b20:	7dfb      	ldrb	r3, [r7, #23]
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	4413      	add	r3, r2
 8001b26:	b2ca      	uxtb	r2, r1
 8001b28:	701a      	strb	r2, [r3, #0]
			if (counter > MAX_PACKET_2_RECEIVE)
 8001b2a:	7dfb      	ldrb	r3, [r7, #23]
 8001b2c:	2b07      	cmp	r3, #7
 8001b2e:	d901      	bls.n	8001b34 <_ZN8RFM95Com7ReceiveEPhh+0x72>
			{
				return false;
 8001b30:	2300      	movs	r3, #0
 8001b32:	e03f      	b.n	8001bb4 <_ZN8RFM95Com7ReceiveEPhh+0xf2>
			}
			counter++;
 8001b34:	7dfb      	ldrb	r3, [r7, #23]
 8001b36:	3301      	adds	r3, #1
 8001b38:	75fb      	strb	r3, [r7, #23]
		while (rfm95->available())
 8001b3a:	e7d6      	b.n	8001aea <_ZN8RFM95Com7ReceiveEPhh+0x28>
		}

		//check CRC
		if (CRC8(data, 6) != data[6])
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	3304      	adds	r3, #4
 8001b40:	2206      	movs	r2, #6
 8001b42:	68b9      	ldr	r1, [r7, #8]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fc01 	bl	800134c <_ZN7BaseCOM4CRC8EPhh>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	3306      	adds	r3, #6
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	bf14      	ite	ne
 8001b58:	2301      	movne	r3, #1
 8001b5a:	2300      	moveq	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <_ZN8RFM95Com7ReceiveEPhh+0xa4>
		{
			//error crc error //ToDO
			return false;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e026      	b.n	8001bb4 <_ZN8RFM95Com7ReceiveEPhh+0xf2>
		}

		switch (data[2])
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	3302      	adds	r3, #2
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d014      	beq.n	8001b9a <_ZN8RFM95Com7ReceiveEPhh+0xd8>
 8001b70:	2b03      	cmp	r3, #3
 8001b72:	dc19      	bgt.n	8001ba8 <_ZN8RFM95Com7ReceiveEPhh+0xe6>
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d002      	beq.n	8001b7e <_ZN8RFM95Com7ReceiveEPhh+0xbc>
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d007      	beq.n	8001b8c <_ZN8RFM95Com7ReceiveEPhh+0xca>
 8001b7c:	e014      	b.n	8001ba8 <_ZN8RFM95Com7ReceiveEPhh+0xe6>
		{
			case SEND_SETTINGS:
				this->SetSettings(data);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	3304      	adds	r3, #4
 8001b82:	68b9      	ldr	r1, [r7, #8]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff f93f 	bl	8000e08 <_ZN7BaseCOM11SetSettingsEPh>
				break;
 8001b8a:	e012      	b.n	8001bb2 <_ZN8RFM95Com7ReceiveEPhh+0xf0>
			case SEND_COMMAND:
				this->SetCommand(data);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	3304      	adds	r3, #4
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fb50 	bl	8001238 <_ZN7BaseCOM10SetCommandEPh>
				break;
 8001b98:	e00b      	b.n	8001bb2 <_ZN8RFM95Com7ReceiveEPhh+0xf0>
			case SEND_STATUS:
				this->SetStatus(data);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	68b9      	ldr	r1, [r7, #8]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fabf 	bl	8001124 <_ZN7BaseCOM9SetStatusEPh>
				break;
 8001ba6:	e004      	b.n	8001bb2 <_ZN8RFM95Com7ReceiveEPhh+0xf0>
			default:
				//not sported command
				data[2] = 0;
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	3302      	adds	r3, #2
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
				break;
 8001bb0:	bf00      	nop
		}
	}
	return true;
 8001bb2:	2301      	movs	r3, #1
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <_ZN6USBCom9TransmittEPhh>:
#include "../AppMain/Defines.h"
#include "usb_device.h"
#include "usbd_cdc_if.h"

bool USBCom::Transmitt(uint8_t *data, uint8_t length)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	71fb      	strb	r3, [r7, #7]
	if (data == NULL)
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <_ZN6USBCom9TransmittEPhh+0x18>
	{
		return false;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e019      	b.n	8001c08 <_ZN6USBCom9TransmittEPhh+0x4c>
	}

	uint16_t counter = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	82fb      	strh	r3, [r7, #22]
	while (CDC_Transmit_FS((uint8_t*) data, length) != USBD_OK)
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4619      	mov	r1, r3
 8001bde:	68b8      	ldr	r0, [r7, #8]
 8001be0:	f00c fbce 	bl	800e380 <CDC_Transmit_FS>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	bf14      	ite	ne
 8001bea:	2301      	movne	r3, #1
 8001bec:	2300      	moveq	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <_ZN6USBCom9TransmittEPhh+0x4a>
	{
		counter++;
 8001bf4:	8afb      	ldrh	r3, [r7, #22]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	82fb      	strh	r3, [r7, #22]
		if (counter >= 1000)
 8001bfa:	8afb      	ldrh	r3, [r7, #22]
 8001bfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c00:	d3ea      	bcc.n	8001bd8 <_ZN6USBCom9TransmittEPhh+0x1c>
		{
			//ToDo USB Error
			return false;	//Transmit failed
 8001c02:	2300      	movs	r3, #0
 8001c04:	e000      	b.n	8001c08 <_ZN6USBCom9TransmittEPhh+0x4c>
		}
	}
	return true;	//Transmit successful
 8001c06:	2301      	movs	r3, #1
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_ZN6USBCom7ReceiveEPhh>:

bool USBCom::Receive(uint8_t *data, uint8_t length)
{
 8001c10:	b590      	push	{r4, r7, lr}
 8001c12:	b087      	sub	sp, #28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	71fb      	strb	r3, [r7, #7]
	uint8_t data2send[] = { 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001c1e:	4a66      	ldr	r2, [pc, #408]	; (8001db8 <_ZN6USBCom7ReceiveEPhh+0x1a8>)
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c28:	6018      	str	r0, [r3, #0]
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	8019      	strh	r1, [r3, #0]
 8001c2e:	3302      	adds	r3, #2
 8001c30:	0c0a      	lsrs	r2, r1, #16
 8001c32:	701a      	strb	r2, [r3, #0]
	uint8_t crc = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	75fb      	strb	r3, [r7, #23]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	if (length >= 5)
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	f240 80b6 	bls.w	8001dac <_ZN6USBCom7ReceiveEPhh+0x19c>
	{
		//calculate CRC from received data
		crc = this->CRC8(data, 6);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	3304      	adds	r3, #4
 8001c44:	2206      	movs	r2, #6
 8001c46:	68b9      	ldr	r1, [r7, #8]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fb7f 	bl	800134c <_ZN7BaseCOM4CRC8EPhh>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	75fb      	strb	r3, [r7, #23]
		if (crc != data[6])
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	3306      	adds	r3, #6
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	7dfa      	ldrb	r2, [r7, #23]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d003      	beq.n	8001c66 <_ZN6USBCom7ReceiveEPhh+0x56>
		{
			data[2] = 0;
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	3302      	adds	r3, #2
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
		}

		switch (data[2])
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	3302      	adds	r3, #2
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	2b12      	cmp	r3, #18
 8001c70:	d876      	bhi.n	8001d60 <_ZN6USBCom7ReceiveEPhh+0x150>
 8001c72:	a201      	add	r2, pc, #4	; (adr r2, 8001c78 <_ZN6USBCom7ReceiveEPhh+0x68>)
 8001c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c78:	08001cc5 	.word	0x08001cc5
 8001c7c:	08001cd3 	.word	0x08001cd3
 8001c80:	08001ce1 	.word	0x08001ce1
 8001c84:	08001d61 	.word	0x08001d61
 8001c88:	08001d61 	.word	0x08001d61
 8001c8c:	08001d61 	.word	0x08001d61
 8001c90:	08001d61 	.word	0x08001d61
 8001c94:	08001d61 	.word	0x08001d61
 8001c98:	08001d61 	.word	0x08001d61
 8001c9c:	08001d61 	.word	0x08001d61
 8001ca0:	08001d61 	.word	0x08001d61
 8001ca4:	08001d61 	.word	0x08001d61
 8001ca8:	08001d61 	.word	0x08001d61
 8001cac:	08001d61 	.word	0x08001d61
 8001cb0:	08001d61 	.word	0x08001d61
 8001cb4:	08001d61 	.word	0x08001d61
 8001cb8:	08001cef 	.word	0x08001cef
 8001cbc:	08001d15 	.word	0x08001d15
 8001cc0:	08001d3b 	.word	0x08001d3b
		{
			case SEND_SETTINGS:
				this->SetSettings(data);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff f89c 	bl	8000e08 <_ZN7BaseCOM11SetSettingsEPh>
				break;
 8001cd0:	e04b      	b.n	8001d6a <_ZN6USBCom7ReceiveEPhh+0x15a>
			case SEND_COMMAND:
				this->SetCommand(data);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	68b9      	ldr	r1, [r7, #8]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff faad 	bl	8001238 <_ZN7BaseCOM10SetCommandEPh>
				break;
 8001cde:	e044      	b.n	8001d6a <_ZN6USBCom7ReceiveEPhh+0x15a>
			case SEND_STATUS:
				this->SetStatus(data);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fa1c 	bl	8001124 <_ZN7BaseCOM9SetStatusEPh>
				break;
 8001cec:	e03d      	b.n	8001d6a <_ZN6USBCom7ReceiveEPhh+0x15a>
			case GET_SETTINGS:
				return Transmitt(this->GetSettings(data[3]), 7);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681c      	ldr	r4, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	1d1a      	adds	r2, r3, #4
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	3303      	adds	r3, #3
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4610      	mov	r0, r2
 8001d02:	f7fe fe5b 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2207      	movs	r2, #7
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	47a0      	blx	r4
 8001d10:	4603      	mov	r3, r0
 8001d12:	e04c      	b.n	8001dae <_ZN6USBCom7ReceiveEPhh+0x19e>
			case GET_COMMAND:
				return Transmitt(this->GetCommand(data[3]), 7);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681c      	ldr	r4, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1d1a      	adds	r2, r3, #4
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	3303      	adds	r3, #3
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	4619      	mov	r1, r3
 8001d26:	4610      	mov	r0, r2
 8001d28:	f7fe ffe4 	bl	8000cf4 <_ZN7BaseCOM10GetCommandEh>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2207      	movs	r2, #7
 8001d30:	4619      	mov	r1, r3
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	47a0      	blx	r4
 8001d36:	4603      	mov	r3, r0
 8001d38:	e039      	b.n	8001dae <_ZN6USBCom7ReceiveEPhh+0x19e>
			case GET_STATUS:
				return Transmitt(this->GetStatus(data[3]), 7);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681c      	ldr	r4, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	1d1a      	adds	r2, r3, #4
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	3303      	adds	r3, #3
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	f7fe ff3b 	bl	8000bc8 <_ZN7BaseCOM9GetStatusEh>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2207      	movs	r2, #7
 8001d56:	4619      	mov	r1, r3
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	47a0      	blx	r4
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	e026      	b.n	8001dae <_ZN6USBCom7ReceiveEPhh+0x19e>
			default:
				//not suported command
				data[2] = 0;
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	3302      	adds	r3, #2
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
				break;
 8001d68:	bf00      	nop
		}

		data2send[0] = 0x1F;
 8001d6a:	231f      	movs	r3, #31
 8001d6c:	743b      	strb	r3, [r7, #16]
		data2send[1] = driveSettings->getDeviceAddress();
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f001 f89c 	bl	8002eb0 <_ZN13DriveSettings16getDeviceAddressEv>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	747b      	strb	r3, [r7, #17]
		data2send[2] = 0x00;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	74bb      	strb	r3, [r7, #18]
		data2send[3] = 0x00;
 8001d80:	2300      	movs	r3, #0
 8001d82:	74fb      	strb	r3, [r7, #19]
		data2send[6] = CRC8(data2send, 6);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3304      	adds	r3, #4
 8001d88:	f107 0110 	add.w	r1, r7, #16
 8001d8c:	2206      	movs	r2, #6
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fadc 	bl	800134c <_ZN7BaseCOM4CRC8EPhh>
 8001d94:	4603      	mov	r3, r0
 8001d96:	75bb      	strb	r3, [r7, #22]
		return Transmitt(data2send, 6);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f107 0110 	add.w	r1, r7, #16
 8001da2:	2206      	movs	r2, #6
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	4798      	blx	r3
 8001da8:	4603      	mov	r3, r0
 8001daa:	e000      	b.n	8001dae <_ZN6USBCom7ReceiveEPhh+0x19e>
	}

	return false;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	371c      	adds	r7, #28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd90      	pop	{r4, r7, pc}
 8001db6:	bf00      	nop
 8001db8:	0800efb8 	.word	0x0800efb8

08001dbc <_ZN5FlashC1EP13DriveSettingsP11DriveStatus>:
 */

#include "Flash.h"
#include "stm32l4xx_hal.h"

Flash::Flash(DriveSettings *driveSettings, DriveStatus *driveStatus)
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
{
	this->driveSettings = driveSettings;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	605a      	str	r2, [r3, #4]
}
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <_ZN5Flash9ReadFlashEv>:
 *
 * @param None
 * @return None
 */
void Flash::ReadFlash()
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b084      	sub	sp, #16
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < UFLASH_SIZE; i++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2b13      	cmp	r3, #19
 8001df2:	dc12      	bgt.n	8001e1a <_ZN5Flash9ReadFlashEv+0x38>
	{
		tmpFlashArray[i] = *(uint64_t*) (FLASH_STAR_PAGE_ADDR + 64 * i);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8001dfa:	f503 637e 	add.w	r3, r3, #4064	; 0xfe0
 8001dfe:	019b      	lsls	r3, r3, #6
 8001e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	68f9      	ldr	r1, [r7, #12]
 8001e08:	3101      	adds	r1, #1
 8001e0a:	00c9      	lsls	r1, r1, #3
 8001e0c:	4401      	add	r1, r0
 8001e0e:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < UFLASH_SIZE; i++)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	3301      	adds	r3, #1
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	e7e9      	b.n	8001dee <_ZN5Flash9ReadFlashEv+0xc>
	}

	driveSettings->setClampingSpeed(tmpFlashArray[0]);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e24:	b293      	uxth	r3, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	f000 fe7a 	bl	8002b20 <_ZN13DriveSettings16setClampingSpeedEt>
	driveSettings->setClampingTorque(tmpFlashArray[1]);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e36:	b293      	uxth	r3, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f000 fe98 	bl	8002b6e <_ZN13DriveSettings17setClampingTorqueEt>
	driveSettings->setTeachSpeed(tmpFlashArray[2]);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001e48:	b293      	uxth	r3, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f000 ff79 	bl	8002d42 <_ZN13DriveSettings13setTeachSpeedEt>
	driveSettings->setTeachTroque(tmpFlashArray[3]);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001e5a:	b293      	uxth	r3, r2
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f000 ff97 	bl	8002d90 <_ZN13DriveSettings14setTeachTroqueEt>

	driveSettings->setOverCurrentError(tmpFlashArray[4]);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001e6c:	b293      	uxth	r3, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f001 f803 	bl	8002e7a <_ZN13DriveSettings19setOverCurrentErrorEt>
	driveSettings->setOverCurrentWarning(tmpFlashArray[5]);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001e7e:	b293      	uxth	r3, r2
 8001e80:	4619      	mov	r1, r3
 8001e82:	f000 ff10 	bl	8002ca6 <_ZN13DriveSettings21setOverCurrentWarningEt>
	driveSettings->setUnderVoltageError(tmpFlashArray[6]);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001e90:	b293      	uxth	r3, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	f000 ffa3 	bl	8002dde <_ZN13DriveSettings20setUnderVoltageErrorEt>
	driveSettings->setUnderVoltageWarning(tmpFlashArray[7]);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001ea2:	b293      	uxth	r3, r2
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f000 ffc1 	bl	8002e2c <_ZN13DriveSettings22setUnderVoltageWarningEt>

	driveSettings->setSelfShutdownDelay(tmpFlashArray[8]);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001eb4:	b293      	uxth	r3, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f000 ff1c 	bl	8002cf4 <_ZN13DriveSettings20setSelfShutdownDelayEt>
	driveSettings->setInPosDiff(tmpFlashArray[9]);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001ec6:	b293      	uxth	r3, r2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f000 fe77 	bl	8002bbc <_ZN13DriveSettings12setInPosDiffEt>
	driveSettings->setOpeningDistance(tmpFlashArray[10]);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6818      	ldr	r0, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001ed8:	b293      	uxth	r3, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f000 fe95 	bl	8002c0a <_ZN13DriveSettings18setOpeningDistanceEt>

	driveSettings->setOverCurrentTimeThreshold(tmpFlashArray[11]);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001eea:	b293      	uxth	r3, r2
 8001eec:	4619      	mov	r1, r3
 8001eee:	f000 feb3 	bl	8002c58 <_ZN13DriveSettings27setOverCurrentTimeThresholdEt>
	driveSettings->setDeviceAddress(tmpFlashArray[12]);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001efc:	b2d3      	uxtb	r3, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	f000 ffe2 	bl	8002ec8 <_ZN13DriveSettings16setDeviceAddressEh>
}
 8001f04:	bf00      	nop
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <_ZN5Flash9SaveFlashEv>:



void Flash::SaveFlash(){
 8001f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f10:	b096      	sub	sp, #88	; 0x58
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6578      	str	r0, [r7, #84]	; 0x54
	if (this->driveSettings->isSaveSettings())
 8001f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 ffe3 	bl	8002ee6 <_ZN13DriveSettings14isSaveSettingsEv>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 80c0 	beq.w	80020a8 <_ZN5Flash9SaveFlashEv+0x19c>
	{
		tmpFlashArray[0] = driveSettings->getClampingSpeed();
 8001f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 fdeb 	bl	8002b08 <_ZNK13DriveSettings16getClampingSpeedEv>
 8001f32:	4603      	mov	r3, r0
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	2200      	movs	r2, #0
 8001f38:	461c      	mov	r4, r3
 8001f3a:	4615      	mov	r5, r2
 8001f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f3e:	e9c3 4502 	strd	r4, r5, [r3, #8]
		tmpFlashArray[1] = driveSettings->getClampingTorque();
 8001f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 fe05 	bl	8002b56 <_ZNK13DriveSettings17getClampingTorqueEv>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2200      	movs	r2, #0
 8001f52:	4698      	mov	r8, r3
 8001f54:	4691      	mov	r9, r2
 8001f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f58:	e9c3 8904 	strd	r8, r9, [r3, #16]
		tmpFlashArray[2] = driveSettings->getTeachSpeed();
 8001f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f000 fee2 	bl	8002d2a <_ZNK13DriveSettings13getTeachSpeedEv>
 8001f66:	4603      	mov	r3, r0
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	469a      	mov	sl, r3
 8001f6e:	4693      	mov	fp, r2
 8001f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f72:	e9c3 ab06 	strd	sl, fp, [r3, #24]
		tmpFlashArray[3] = driveSettings->getTeachTroque();
 8001f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 fefc 	bl	8002d78 <_ZNK13DriveSettings14getTeachTroqueEv>
 8001f80:	4603      	mov	r3, r0
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	2200      	movs	r2, #0
 8001f86:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f88:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f8c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8001f90:	e9c3 1208 	strd	r1, r2, [r3, #32]

		tmpFlashArray[4] = driveSettings->getOverCurrentError();
 8001f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 ff62 	bl	8002e62 <_ZNK13DriveSettings19getOverCurrentErrorEv>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	643b      	str	r3, [r7, #64]	; 0x40
 8001fa6:	647a      	str	r2, [r7, #68]	; 0x44
 8001fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001faa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8001fae:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
		tmpFlashArray[5] = driveSettings->getOverCurrentWarning();
 8001fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 fe69 	bl	8002c8e <_ZNK13DriveSettings21getOverCurrentWarningEv>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8001fcc:	e9c3 120c 	strd	r1, r2, [r3, #48]	; 0x30
		tmpFlashArray[6] = driveSettings->getUnderVoltageError();
 8001fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fef6 	bl	8002dc6 <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2200      	movs	r2, #0
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8001fe2:	637a      	str	r2, [r7, #52]	; 0x34
 8001fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8001fea:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tmpFlashArray[7] = driveSettings->getUnderVoltageWarning();
 8001fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 ff0e 	bl	8002e14 <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002000:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002004:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002008:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

		tmpFlashArray[8] = driveSettings->getSelfShutdownDelay();
 800200c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fe63 	bl	8002cdc <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8002016:	4603      	mov	r3, r0
 8002018:	b29b      	uxth	r3, r3
 800201a:	2200      	movs	r2, #0
 800201c:	623b      	str	r3, [r7, #32]
 800201e:	627a      	str	r2, [r7, #36]	; 0x24
 8002020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002022:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002026:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
		tmpFlashArray[9] = driveSettings->getInPosDiff();
 800202a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f000 fdb8 	bl	8002ba4 <_ZNK13DriveSettings12getInPosDiffEv>
 8002034:	4603      	mov	r3, r0
 8002036:	b29b      	uxth	r3, r3
 8002038:	2200      	movs	r2, #0
 800203a:	61bb      	str	r3, [r7, #24]
 800203c:	61fa      	str	r2, [r7, #28]
 800203e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002040:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002044:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
		tmpFlashArray[10] = driveSettings->getOpeningDistance();
 8002048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f000 fdd0 	bl	8002bf2 <_ZNK13DriveSettings18getOpeningDistanceEv>
 8002052:	4603      	mov	r3, r0
 8002054:	b29b      	uxth	r3, r3
 8002056:	2200      	movs	r2, #0
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	617a      	str	r2, [r7, #20]
 800205c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800205e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002062:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58

		tmpFlashArray[11] = driveSettings->getOverCurrentTimeThreshold();
 8002066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f000 fde8 	bl	8002c40 <_ZNK13DriveSettings27getOverCurrentTimeThresholdEv>
 8002070:	4603      	mov	r3, r0
 8002072:	b29b      	uxth	r3, r3
 8002074:	2200      	movs	r2, #0
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	60fa      	str	r2, [r7, #12]
 800207a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800207c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002080:	e9c3 1218 	strd	r1, r2, [r3, #96]	; 0x60
		tmpFlashArray[12] = driveSettings->getDeviceAddress();
 8002084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f000 ff11 	bl	8002eb0 <_ZN13DriveSettings16getDeviceAddressEv>
 800208e:	4603      	mov	r3, r0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2200      	movs	r2, #0
 8002094:	603b      	str	r3, [r7, #0]
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800209a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800209e:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
		WriteFlash();
 80020a2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80020a4:	f000 f805 	bl	80020b2 <_ZN5Flash10WriteFlashEv>
	}
}
 80020a8:	bf00      	nop
 80020aa:	3758      	adds	r7, #88	; 0x58
 80020ac:	46bd      	mov	sp, r7
 80020ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080020b2 <_ZN5Flash10WriteFlashEv>:
 *
 * @param None
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef Flash::WriteFlash()
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b088      	sub	sp, #32
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]

	FLASH_EraseInitTypeDef EraseinitStruct;
	uint32_t sectorError = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]

	if (HAL_FLASH_Unlock() != HAL_OK)
 80020be:	f003 fdbf 	bl	8005c40 <HAL_FLASH_Unlock>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf14      	ite	ne
 80020c8:	2301      	movne	r3, #1
 80020ca:	2300      	moveq	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d009      	beq.n	80020e6 <_ZN5Flash10WriteFlashEv+0x34>
	{
		HAL_FLASH_Lock();
 80020d2:	f003 fdd7 	bl	8005c84 <HAL_FLASH_Lock>
		driveStatus->setError(DriveStatus::E_FLASH_ERROR);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2101      	movs	r1, #1
 80020dc:	4618      	mov	r0, r3
 80020de:	f001 f9a9 	bl	8003434 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
		return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e050      	b.n	8002188 <_ZN5Flash10WriteFlashEv+0xd6>
	}

	EraseinitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
	EraseinitStruct.Banks = 1;
 80020ea:	2301      	movs	r3, #1
 80020ec:	613b      	str	r3, [r7, #16]
	EraseinitStruct.Page = UFLASH_PAGE;
 80020ee:	237f      	movs	r3, #127	; 0x7f
 80020f0:	617b      	str	r3, [r7, #20]
	EraseinitStruct.NbPages = UFLASH_NPAGES;
 80020f2:	2301      	movs	r3, #1
 80020f4:	61bb      	str	r3, [r7, #24]

	if (HAL_FLASHEx_Erase(&EraseinitStruct, &sectorError) != HAL_OK)
 80020f6:	f107 0208 	add.w	r2, r7, #8
 80020fa:	f107 030c 	add.w	r3, r7, #12
 80020fe:	4611      	mov	r1, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f003 fe83 	bl	8005e0c <HAL_FLASHEx_Erase>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	bf14      	ite	ne
 800210c:	2301      	movne	r3, #1
 800210e:	2300      	moveq	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d009      	beq.n	800212a <_ZN5Flash10WriteFlashEv+0x78>
	{
		HAL_FLASH_Lock();
 8002116:	f003 fdb5 	bl	8005c84 <HAL_FLASH_Lock>
		driveStatus->setError(DriveStatus::E_FLASH_ERROR);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2101      	movs	r1, #1
 8002120:	4618      	mov	r0, r3
 8002122:	f001 f987 	bl	8003434 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
		return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e02e      	b.n	8002188 <_ZN5Flash10WriteFlashEv+0xd6>
	}

	for (int i = 0; i < UFLASH_SIZE; i++)
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	2b13      	cmp	r3, #19
 8002132:	dc14      	bgt.n	800215e <_ZN5Flash10WriteFlashEv+0xac>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
				(FLASH_STAR_PAGE_ADDR + 64 * i), tmpFlashArray[i]);
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800213a:	f503 637e 	add.w	r3, r3, #4064	; 0xfe0
 800213e:	019b      	lsls	r3, r3, #6
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8002140:	4619      	mov	r1, r3
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	3301      	adds	r3, #1
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002150:	2000      	movs	r0, #0
 8002152:	f003 fd09 	bl	8005b68 <HAL_FLASH_Program>
	for (int i = 0; i < UFLASH_SIZE; i++)
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3301      	adds	r3, #1
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	e7e7      	b.n	800212e <_ZN5Flash10WriteFlashEv+0x7c>
	}

	if (HAL_FLASH_Lock() != HAL_OK)
 800215e:	f003 fd91 	bl	8005c84 <HAL_FLASH_Lock>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	bf14      	ite	ne
 8002168:	2301      	movne	r3, #1
 800216a:	2300      	moveq	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <_ZN5Flash10WriteFlashEv+0xd4>
	{
		HAL_FLASH_Lock();
 8002172:	f003 fd87 	bl	8005c84 <HAL_FLASH_Lock>
		driveStatus->setError(DriveStatus::E_FLASH_ERROR);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2101      	movs	r1, #1
 800217c:	4618      	mov	r0, r3
 800217e:	f001 f959 	bl	8003434 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
		return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <_ZN5Flash10WriteFlashEv+0xd6>
	}

	return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3720      	adds	r7, #32
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>:
 */

#include "DO.h"
#include "../Tools/Delay.h"

DigitalOut::DigitalOut(GPIO_TypeDef* GPIOx_N, uint16_t GPIO_Pin_N, GPIO_TypeDef* GPIOx_P, uint16_t GPIO_Pin_P){
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	4613      	mov	r3, r2
 800219e:	80fb      	strh	r3, [r7, #6]
	this->GPIO_Pin_N = GPIO_Pin_N;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	88fa      	ldrh	r2, [r7, #6]
 80021a4:	809a      	strh	r2, [r3, #4]
	this->GPIOx_N = GPIOx_N;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	601a      	str	r2, [r3, #0]
	this->GPIO_Pin_N = GPIO_Pin_P;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8b3a      	ldrh	r2, [r7, #24]
 80021b0:	809a      	strh	r2, [r3, #4]
	this->GPIOx_N = GPIOx_P;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	601a      	str	r2, [r3, #0]
}
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_ZN10DigitalOut3SetEv>:


/*
 *
 */
void DigitalOut::Set() {
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
	//P set, N reset
	HAL_GPIO_WritePin(GPIOx_N, GPIO_Pin_N, GPIO_PIN_RESET);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	889b      	ldrh	r3, [r3, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	4619      	mov	r1, r3
 80021da:	f004 f8cf 	bl	800637c <HAL_GPIO_WritePin>
	Delay::DWT_Delay_us(25);
 80021de:	2019      	movs	r0, #25
 80021e0:	f001 fa62 	bl	80036a8 <_ZN5Delay12DWT_Delay_usEm>
	HAL_GPIO_WritePin(GPIOx_P, GPIO_Pin_P, GPIO_PIN_SET);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6898      	ldr	r0, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	899b      	ldrh	r3, [r3, #12]
 80021ec:	2201      	movs	r2, #1
 80021ee:	4619      	mov	r1, r3
 80021f0:	f004 f8c4 	bl	800637c <HAL_GPIO_WritePin>
	status = true;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	739a      	strb	r2, [r3, #14]
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <_ZN10DigitalOut5ResetEv>:


/*
 *
 */
void DigitalOut::Reset() {
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOx_P, GPIO_Pin_P, GPIO_PIN_RESET);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6898      	ldr	r0, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	899b      	ldrh	r3, [r3, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	4619      	mov	r1, r3
 8002216:	f004 f8b1 	bl	800637c <HAL_GPIO_WritePin>
	Delay::DWT_Delay_us(25);
 800221a:	2019      	movs	r0, #25
 800221c:	f001 fa44 	bl	80036a8 <_ZN5Delay12DWT_Delay_usEm>
	HAL_GPIO_WritePin(GPIOx_N, GPIO_Pin_N, GPIO_PIN_SET);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	889b      	ldrh	r3, [r3, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	4619      	mov	r1, r3
 800222c:	f004 f8a6 	bl	800637c <HAL_GPIO_WritePin>
	status = false;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	739a      	strb	r2, [r3, #14]
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <_ZN3LEDC1EP12GPIO_TypeDeftb>:


#include "LED.h"


LED::LED(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool outputInverted) {
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	4611      	mov	r1, r2
 800224a:	461a      	mov	r2, r3
 800224c:	460b      	mov	r3, r1
 800224e:	80fb      	strh	r3, [r7, #6]
 8002250:	4613      	mov	r3, r2
 8002252:	717b      	strb	r3, [r7, #5]

	this->GPIO_Pin = GPIO_Pin;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	88fa      	ldrh	r2, [r7, #6]
 8002258:	809a      	strh	r2, [r3, #4]
	this->GPIOx = GPIOx;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	601a      	str	r2, [r3, #0]
	this->outputInverted = outputInverted;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	797a      	ldrb	r2, [r7, #5]
 8002264:	719a      	strb	r2, [r3, #6]
}
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4618      	mov	r0, r3
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <_ZN3LED3OFFEv>:
}

/*
 * LED OFF method
 */
void LED::OFF() {
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
	//check if output is inverted
	if(outputInverted){
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	799b      	ldrb	r3, [r3, #6]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <_ZN3LED3OFFEv+0x22>
		//clear output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	889b      	ldrh	r3, [r3, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	4619      	mov	r1, r3
 8002290:	f004 f874 	bl	800637c <HAL_GPIO_WritePin>
	}else{
		//write output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
	}
}
 8002294:	e007      	b.n	80022a6 <_ZN3LED3OFFEv+0x32>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	889b      	ldrh	r3, [r3, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	4619      	mov	r1, r3
 80022a2:	f004 f86b 	bl	800637c <HAL_GPIO_WritePin>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <_ZN3LED6ToggleEv>:

/*
 * LED Toggle method
 */
void LED::Toggle() {
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	889b      	ldrh	r3, [r3, #4]
 80022be:	4619      	mov	r1, r3
 80022c0:	4610      	mov	r0, r2
 80022c2:	f004 f873 	bl	80063ac <HAL_GPIO_TogglePin>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <_ZN10RFM95_LoRaC1Ev>:
 */

#include "RFM95.h"
#include "../AppMain/AppMain.h"

RFM95_LoRa::RFM95_LoRa() :
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(0)
 80022d8:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <_ZN10RFM95_LoRaC1Ev+0x34>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	615a      	str	r2, [r3, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
{

}
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	0800f050 	.word	0x0800f050

08002308 <_ZN10RFM95_LoRa9selectRFMEv>:
 * @brief RFM95 chip select
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::selectRFM(){
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_RESET);
 8002310:	2200      	movs	r2, #0
 8002312:	2108      	movs	r1, #8
 8002314:	4803      	ldr	r0, [pc, #12]	; (8002324 <_ZN10RFM95_LoRa9selectRFMEv+0x1c>)
 8002316:	f004 f831 	bl	800637c <HAL_GPIO_WritePin>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	48000400 	.word	0x48000400

08002328 <_ZN10RFM95_LoRa11deselectRFMEv>:
 * @brief RFM95 chip deselect
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::deselectRFM(){
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_SET);
 8002330:	2201      	movs	r2, #1
 8002332:	2108      	movs	r1, #8
 8002334:	4803      	ldr	r0, [pc, #12]	; (8002344 <_ZN10RFM95_LoRa11deselectRFMEv+0x1c>)
 8002336:	f004 f821 	bl	800637c <HAL_GPIO_WritePin>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	48000400 	.word	0x48000400

08002348 <_ZN10RFM95_LoRa8resetRFMEv>:

void RFM95_LoRa::resetRFM(){
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 8002350:	2200      	movs	r2, #0
 8002352:	2110      	movs	r1, #16
 8002354:	4808      	ldr	r0, [pc, #32]	; (8002378 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 8002356:	f004 f811 	bl	800637c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800235a:	2001      	movs	r0, #1
 800235c:	f002 f88c 	bl	8004478 <HAL_Delay>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 8002360:	2201      	movs	r2, #1
 8002362:	2110      	movs	r1, #16
 8002364:	4804      	ldr	r0, [pc, #16]	; (8002378 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 8002366:	f004 f809 	bl	800637c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800236a:	2005      	movs	r0, #5
 800236c:	f002 f884 	bl	8004478 <HAL_Delay>
}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	48000400 	.word	0x48000400

0800237c <_ZN10RFM95_LoRa13writeRegisterEhh>:

bool RFM95_LoRa::writeRegister(uint8_t addr, uint8_t data){
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	70fb      	strb	r3, [r7, #3]
 8002388:	4613      	mov	r3, r2
 800238a:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2] = {(uint8_t)(addr | 0x80), data};
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002392:	b2db      	uxtb	r3, r3
 8002394:	733b      	strb	r3, [r7, #12]
 8002396:	78bb      	ldrb	r3, [r7, #2]
 8002398:	737b      	strb	r3, [r7, #13]
	selectRFM();
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff ffb4 	bl	8002308 <_ZN10RFM95_LoRa9selectRFMEv>
	if(HAL_SPI_Transmit(&hspi3, (uint8_t*)buff, 2, 100) != HAL_OK){
 80023a0:	f107 010c 	add.w	r1, r7, #12
 80023a4:	2364      	movs	r3, #100	; 0x64
 80023a6:	2202      	movs	r2, #2
 80023a8:	480b      	ldr	r0, [pc, #44]	; (80023d8 <_ZN10RFM95_LoRa13writeRegisterEhh+0x5c>)
 80023aa:	f007 f810 	bl	80093ce <HAL_SPI_Transmit>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	bf14      	ite	ne
 80023b4:	2301      	movne	r3, #1
 80023b6:	2300      	moveq	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d004      	beq.n	80023c8 <_ZN10RFM95_LoRa13writeRegisterEhh+0x4c>
		deselectRFM();
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff ffb2 	bl	8002328 <_ZN10RFM95_LoRa11deselectRFMEv>
		return false;
 80023c4:	2300      	movs	r3, #0
 80023c6:	e003      	b.n	80023d0 <_ZN10RFM95_LoRa13writeRegisterEhh+0x54>
	}
	deselectRFM();
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ffad 	bl	8002328 <_ZN10RFM95_LoRa11deselectRFMEv>
	return true;
 80023ce:	2301      	movs	r3, #1
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	200004c0 	.word	0x200004c0

080023dc <_ZN10RFM95_LoRa12readRegisterEh>:

uint8_t RFM95_LoRa::readRegister(uint8_t addr){
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	70fb      	strb	r3, [r7, #3]
	uint8_t rxData[2] = {0,0};
 80023e8:	2300      	movs	r3, #0
 80023ea:	81bb      	strh	r3, [r7, #12]
	uint8_t txData[1] = {addr};
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	723b      	strb	r3, [r7, #8]

	selectRFM();
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff ff89 	bl	8002308 <_ZN10RFM95_LoRa9selectRFMEv>
	HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)txData,(uint8_t*)rxData,2,100);
 80023f6:	f107 020c 	add.w	r2, r7, #12
 80023fa:	f107 0108 	add.w	r1, r7, #8
 80023fe:	2364      	movs	r3, #100	; 0x64
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	2302      	movs	r3, #2
 8002404:	4805      	ldr	r0, [pc, #20]	; (800241c <_ZN10RFM95_LoRa12readRegisterEh+0x40>)
 8002406:	f007 f950 	bl	80096aa <HAL_SPI_TransmitReceive>
	deselectRFM();
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ff8c 	bl	8002328 <_ZN10RFM95_LoRa11deselectRFMEv>
	return rxData[1];
 8002410:	7b7b      	ldrb	r3, [r7, #13]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200004c0 	.word	0x200004c0

08002420 <_ZN10RFM95_LoRa5beginEl>:


int RFM95_LoRa::begin(long frequency){
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
 resetRFM();
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff ff8c 	bl	8002348 <_ZN10RFM95_LoRa8resetRFMEv>
  // check version
  uint8_t version = readRegister(REG_VERSION);
 8002430:	2142      	movs	r1, #66	; 0x42
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ffd2 	bl	80023dc <_ZN10RFM95_LoRa12readRegisterEh>
 8002438:	4603      	mov	r3, r0
 800243a:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	2b12      	cmp	r3, #18
 8002440:	d001      	beq.n	8002446 <_ZN10RFM95_LoRa5beginEl+0x26>
    return 0;
 8002442:	2300      	movs	r3, #0
 8002444:	e02b      	b.n	800249e <_ZN10RFM95_LoRa5beginEl+0x7e>
  }
  // put in sleep mode
  sleep();
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f995 	bl	8002776 <_ZN10RFM95_LoRa5sleepEv>
  // set frequency
  setFrequency(frequency);
 800244c:	6839      	ldr	r1, [r7, #0]
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f9dc 	bl	800280c <_ZN10RFM95_LoRa12setFrequencyEl>
  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 8002454:	2200      	movs	r2, #0
 8002456:	210e      	movs	r1, #14
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ff8f 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 800245e:	2200      	movs	r2, #0
 8002460:	210f      	movs	r1, #15
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff ff8a 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 8002468:	210c      	movs	r1, #12
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff ffb6 	bl	80023dc <_ZN10RFM95_LoRa12readRegisterEh>
 8002470:	4603      	mov	r3, r0
 8002472:	f043 0303 	orr.w	r3, r3, #3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	210c      	movs	r1, #12
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff ff7d 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 8002482:	2204      	movs	r2, #4
 8002484:	2126      	movs	r1, #38	; 0x26
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ff78 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set output power to 17 dBm
  setTxPower(20);
 800248c:	2201      	movs	r2, #1
 800248e:	2114      	movs	r1, #20
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f97d 	bl	8002790 <_ZN10RFM95_LoRa10setTxPowerEii>
  // put in standby mode
  idle();
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f960 	bl	800275c <_ZN10RFM95_LoRa4idleEv>
  return 1;
 800249c:	2301      	movs	r3, #1
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <_ZN10RFM95_LoRa11beginPacketEi>:
  sleep();
}



int RFM95_LoRa::beginPacket(int implicitHeader){
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	6039      	str	r1, [r7, #0]
  // put in standby mode
  idle();
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f953 	bl	800275c <_ZN10RFM95_LoRa4idleEv>

  if (implicitHeader) {
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <_ZN10RFM95_LoRa11beginPacketEi+0x1e>
    implicitHeaderMode();
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 fad8 	bl	8002a72 <_ZN10RFM95_LoRa18implicitHeaderModeEv>
 80024c2:	e002      	b.n	80024ca <_ZN10RFM95_LoRa11beginPacketEi+0x24>
  } else {
    explicitHeaderMode();
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 fabc 	bl	8002a42 <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // reset FIFO address and paload length
  writeRegister(REG_FIFO_ADDR_PTR, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	210d      	movs	r1, #13
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff ff54 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_PAYLOAD_LENGTH, 0);
 80024d4:	2200      	movs	r2, #0
 80024d6:	2122      	movs	r1, #34	; 0x22
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ff4f 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 80024de:	2301      	movs	r3, #1
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <_ZN10RFM95_LoRa9endPacketEv>:



int RFM95_LoRa::endPacket(){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  // put in TX mode
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 80024f0:	2283      	movs	r2, #131	; 0x83
 80024f2:	2101      	movs	r1, #1
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ff41 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
  // wait for TX done
  while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 80024fa:	2112      	movs	r1, #18
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff ff6d 	bl	80023dc <_ZN10RFM95_LoRa12readRegisterEh>
 8002502:	4603      	mov	r3, r0
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d000      	beq.n	8002518 <_ZN10RFM95_LoRa9endPacketEv+0x30>
 8002516:	e7f0      	b.n	80024fa <_ZN10RFM95_LoRa9endPacketEv+0x12>

  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8002518:	2208      	movs	r2, #8
 800251a:	2112      	movs	r1, #18
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ff2d 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 8002522:	2301      	movs	r3, #1
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <_ZN10RFM95_LoRa11parsePacketEi>:



int RFM95_LoRa::parsePacket(int size)

{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  int packetLength = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 800253a:	2112      	movs	r1, #18
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ff4d 	bl	80023dc <_ZN10RFM95_LoRa12readRegisterEh>
 8002542:	4603      	mov	r3, r0
 8002544:	60bb      	str	r3, [r7, #8]
  if (size > 0) {
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	dd0a      	ble.n	8002562 <_ZN10RFM95_LoRa11parsePacketEi+0x36>
    implicitHeaderMode();
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 fa90 	bl	8002a72 <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	2122      	movs	r1, #34	; 0x22
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ff0e 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
 8002560:	e002      	b.n	8002568 <_ZN10RFM95_LoRa11parsePacketEi+0x3c>
  } else {
    explicitHeaderMode();
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fa6d 	bl	8002a42 <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	461a      	mov	r2, r3
 800256e:	2112      	movs	r1, #18
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff ff03 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
  if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	d026      	beq.n	80025ce <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	2b00      	cmp	r3, #0
 8002588:	d121      	bne.n	80025ce <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
    // received a packet
    _packetIndex = 0;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	615a      	str	r2, [r3, #20]
    // read packet length
    if (_implicitHeaderMode) {
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d006      	beq.n	80025a6 <_ZN10RFM95_LoRa11parsePacketEi+0x7a>
      packetLength = readRegister(REG_PAYLOAD_LENGTH);
 8002598:	2122      	movs	r1, #34	; 0x22
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff ff1e 	bl	80023dc <_ZN10RFM95_LoRa12readRegisterEh>
 80025a0:	4603      	mov	r3, r0
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	e005      	b.n	80025b2 <_ZN10RFM95_LoRa11parsePacketEi+0x86>
    } else {
      packetLength = readRegister(REG_RX_NB_BYTES);
 80025a6:	2113      	movs	r1, #19
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff ff17 	bl	80023dc <_ZN10RFM95_LoRa12readRegisterEh>
 80025ae:	4603      	mov	r3, r0
 80025b0:	60fb      	str	r3, [r7, #12]
    }
    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 80025b2:	2110      	movs	r1, #16
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff ff11 	bl	80023dc <_ZN10RFM95_LoRa12readRegisterEh>
 80025ba:	4603      	mov	r3, r0
 80025bc:	461a      	mov	r2, r3
 80025be:	210d      	movs	r1, #13
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff fedb 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in standby mode
    idle();
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f8c8 	bl	800275c <_ZN10RFM95_LoRa4idleEv>
 80025cc:	e015      	b.n	80025fa <_ZN10RFM95_LoRa11parsePacketEi+0xce>
  } else if (readRegister(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
 80025ce:	2101      	movs	r1, #1
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff ff03 	bl	80023dc <_ZN10RFM95_LoRa12readRegisterEh>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b86      	cmp	r3, #134	; 0x86
 80025da:	bf14      	ite	ne
 80025dc:	2301      	movne	r3, #1
 80025de:	2300      	moveq	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <_ZN10RFM95_LoRa11parsePacketEi+0xce>
    // not currently in RX mode
    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 80025e6:	2200      	movs	r2, #0
 80025e8:	210d      	movs	r1, #13
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff fec6 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in single RX mode
    writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 80025f0:	2286      	movs	r2, #134	; 0x86
 80025f2:	2101      	movs	r1, #1
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff fec1 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  return packetLength;
 80025fa:	68fb      	ldr	r3, [r7, #12]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <_ZN10RFM95_LoRa5writeEh>:

float RFM95_LoRa::packetSnr(){
  return ((int8_t)readRegister(REG_PKT_SNR_VALUE)) * 0.25;
}

size_t RFM95_LoRa::write(uint8_t byte){
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	3304      	adds	r3, #4
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	1cf9      	adds	r1, r7, #3
 800261a:	2201      	movs	r2, #1
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	4798      	blx	r3
 8002620:	4603      	mov	r3, r0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <_ZN10RFM95_LoRa5writeEPKhj>:



size_t RFM95_LoRa::write(const uint8_t *buffer, size_t size){
 800262a:	b580      	push	{r7, lr}
 800262c:	b086      	sub	sp, #24
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 8002636:	2122      	movs	r1, #34	; 0x22
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f7ff fecf 	bl	80023dc <_ZN10RFM95_LoRa12readRegisterEh>
 800263e:	4603      	mov	r3, r0
 8002640:	613b      	str	r3, [r7, #16]
  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4413      	add	r3, r2
 8002648:	2bff      	cmp	r3, #255	; 0xff
 800264a:	d903      	bls.n	8002654 <_ZN10RFM95_LoRa5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002652:	607b      	str	r3, [r7, #4]
  }
  // write data
  for (size_t i = 0; i < size; i++) {
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	429a      	cmp	r2, r3
 800265e:	d20c      	bcs.n	800267a <_ZN10RFM95_LoRa5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	4413      	add	r3, r2
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	2100      	movs	r1, #0
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f7ff fe85 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	3301      	adds	r3, #1
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	e7ee      	b.n	8002658 <_ZN10RFM95_LoRa5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	b2da      	uxtb	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	4413      	add	r3, r2
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	2122      	movs	r1, #34	; 0x22
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f7ff fe76 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
  return size;
 8002690:	687b      	ldr	r3, [r7, #4]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <_ZN10RFM95_LoRa9availableEv>:


int RFM95_LoRa::available()
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 80026a2:	2113      	movs	r1, #19
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff fe99 	bl	80023dc <_ZN10RFM95_LoRa12readRegisterEh>
 80026aa:	4603      	mov	r3, r0
 80026ac:	461a      	mov	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	1ad3      	subs	r3, r2, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <_ZN10RFM95_LoRa4readEv>:



int RFM95_LoRa::read(){
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  if (!available()) {
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	3308      	adds	r3, #8
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	bf0c      	ite	eq
 80026d6:	2301      	moveq	r3, #1
 80026d8:	2300      	movne	r3, #0
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <_ZN10RFM95_LoRa4readEv+0x2a>
    return -1;
 80026e0:	f04f 33ff 	mov.w	r3, #4294967295
 80026e4:	e009      	b.n	80026fa <_ZN10RFM95_LoRa4readEv+0x3e>
  }
  _packetIndex++;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	615a      	str	r2, [r3, #20]
  return readRegister(REG_FIFO);
 80026f0:	2100      	movs	r1, #0
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff fe72 	bl	80023dc <_ZN10RFM95_LoRa12readRegisterEh>
 80026f8:	4603      	mov	r3, r0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <_ZN10RFM95_LoRa4peekEv>:



int RFM95_LoRa::peek(){
 8002702:	b580      	push	{r7, lr}
 8002704:	b084      	sub	sp, #16
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  if (!available()) {
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3308      	adds	r3, #8
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	4798      	blx	r3
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	bf0c      	ite	eq
 800271c:	2301      	moveq	r3, #1
 800271e:	2300      	movne	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <_ZN10RFM95_LoRa4peekEv+0x2a>
    return -1;
 8002726:	f04f 33ff 	mov.w	r3, #4294967295
 800272a:	e013      	b.n	8002754 <_ZN10RFM95_LoRa4peekEv+0x52>
  }
  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 800272c:	210d      	movs	r1, #13
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff fe54 	bl	80023dc <_ZN10RFM95_LoRa12readRegisterEh>
 8002734:	4603      	mov	r3, r0
 8002736:	60fb      	str	r3, [r7, #12]
  // read
  uint8_t b = readRegister(REG_FIFO);
 8002738:	2100      	movs	r1, #0
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff fe4e 	bl	80023dc <_ZN10RFM95_LoRa12readRegisterEh>
 8002740:	4603      	mov	r3, r0
 8002742:	72fb      	strb	r3, [r7, #11]
  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	210d      	movs	r1, #13
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff fe15 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
  return b;
 8002752:	7afb      	ldrb	r3, [r7, #11]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <_ZN10RFM95_LoRa4idleEv>:
    explicitHeaderMode();
  }
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
}

void RFM95_LoRa::idle(){
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8002764:	2281      	movs	r2, #129	; 0x81
 8002766:	2101      	movs	r1, #1
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff fe07 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <_ZN10RFM95_LoRa5sleepEv>:

void RFM95_LoRa::sleep(){
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 800277e:	2280      	movs	r2, #128	; 0x80
 8002780:	2101      	movs	r1, #1
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff fdfa 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002788:	bf00      	nop
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <_ZN10RFM95_LoRa10setTxPowerEii>:



void RFM95_LoRa::setTxPower(int level, int outputPin){
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d116      	bne.n	80027d0 <_ZN10RFM95_LoRa10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	da02      	bge.n	80027ae <_ZN10RFM95_LoRa10setTxPowerEii+0x1e>
      level = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	e004      	b.n	80027b8 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
    } else if (level > 14) {
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b0e      	cmp	r3, #14
 80027b2:	dd01      	ble.n	80027b8 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
      level = 14;
 80027b4:	230e      	movs	r3, #14
 80027b6:	60bb      	str	r3, [r7, #8]
    }
    writeRegister(REG_PA_CONFIG, 0x70 | level);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	b25b      	sxtb	r3, r3
 80027bc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80027c0:	b25b      	sxtb	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	2109      	movs	r1, #9
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f7ff fdd7 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
    } else if (level > 17) {
      level = 17;
    }
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 80027ce:	e018      	b.n	8002802 <_ZN10RFM95_LoRa10setTxPowerEii+0x72>
    if (level < 2) {
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	dc02      	bgt.n	80027dc <_ZN10RFM95_LoRa10setTxPowerEii+0x4c>
      level = 2;
 80027d6:	2302      	movs	r3, #2
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	e004      	b.n	80027e6 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
    } else if (level > 17) {
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b11      	cmp	r3, #17
 80027e0:	dd01      	ble.n	80027e6 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
      level = 17;
 80027e2:	2311      	movs	r3, #17
 80027e4:	60bb      	str	r3, [r7, #8]
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	3b02      	subs	r3, #2
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	b25b      	sxtb	r3, r3
 80027f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027f4:	b25b      	sxtb	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	2109      	movs	r1, #9
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f7ff fdbd 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <_ZN10RFM95_LoRa12setFrequencyEl>:



void RFM95_LoRa::setFrequency(long frequency){
 800280c:	b5b0      	push	{r4, r5, r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	6838      	ldr	r0, [r7, #0]
 800281a:	6108      	str	r0, [r1, #16]
  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 800281c:	6839      	ldr	r1, [r7, #0]
 800281e:	17c8      	asrs	r0, r1, #31
 8002820:	460a      	mov	r2, r1
 8002822:	4603      	mov	r3, r0
 8002824:	1355      	asrs	r5, r2, #13
 8002826:	04d4      	lsls	r4, r2, #19
 8002828:	4a1a      	ldr	r2, [pc, #104]	; (8002894 <_ZN10RFM95_LoRa12setFrequencyEl+0x88>)
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	4620      	mov	r0, r4
 8002830:	4629      	mov	r1, r5
 8002832:	f7fd fccb 	bl	80001cc <__aeabi_uldivmod>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 800283e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	0c02      	lsrs	r2, r0, #16
 800284c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002850:	0c0b      	lsrs	r3, r1, #16
 8002852:	b2d3      	uxtb	r3, r2
 8002854:	461a      	mov	r2, r3
 8002856:	2106      	movs	r1, #6
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff fd8f 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 800285e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	0a02      	lsrs	r2, r0, #8
 800286c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002870:	0a0b      	lsrs	r3, r1, #8
 8002872:	b2d3      	uxtb	r3, r2
 8002874:	461a      	mov	r2, r3
 8002876:	2107      	movs	r1, #7
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff fd7f 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 800287e:	7a3b      	ldrb	r3, [r7, #8]
 8002880:	461a      	mov	r2, r3
 8002882:	2108      	movs	r1, #8
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff fd79 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800288a:	bf00      	nop
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bdb0      	pop	{r4, r5, r7, pc}
 8002892:	bf00      	nop
 8002894:	01e84800 	.word	0x01e84800

08002898 <_ZN10RFM95_LoRa18setSpreadingFactorEi>:



void RFM95_LoRa::setSpreadingFactor(int sf){
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b05      	cmp	r3, #5
 80028a6:	dc02      	bgt.n	80028ae <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x16>
    sf = 6;
 80028a8:	2306      	movs	r3, #6
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	e004      	b.n	80028b8 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b0c      	cmp	r3, #12
 80028b2:	dd01      	ble.n	80028b8 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
    sf = 12;
 80028b4:	230c      	movs	r3, #12
 80028b6:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d10a      	bne.n	80028d4 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 80028be:	22c5      	movs	r2, #197	; 0xc5
 80028c0:	2131      	movs	r1, #49	; 0x31
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff fd5a 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 80028c8:	220c      	movs	r2, #12
 80028ca:	2137      	movs	r1, #55	; 0x37
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff fd55 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
 80028d2:	e009      	b.n	80028e8 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 80028d4:	22c3      	movs	r2, #195	; 0xc3
 80028d6:	2131      	movs	r1, #49	; 0x31
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff fd4f 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 80028de:	220a      	movs	r2, #10
 80028e0:	2137      	movs	r1, #55	; 0x37
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff fd4a 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 80028e8:	211e      	movs	r1, #30
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff fd76 	bl	80023dc <_ZN10RFM95_LoRa12readRegisterEh>
 80028f0:	4603      	mov	r3, r0
 80028f2:	b25b      	sxtb	r3, r3
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	b25a      	sxtb	r2, r3
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	b25b      	sxtb	r3, r3
 8002900:	4313      	orrs	r3, r2
 8002902:	b25b      	sxtb	r3, r3
 8002904:	b2db      	uxtb	r3, r3
 8002906:	461a      	mov	r2, r3
 8002908:	211e      	movs	r1, #30
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff fd36 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <_ZN10RFM95_LoRa18setSignalBandwidthEl>:


void RFM95_LoRa::setSignalBandwidth(long sbw){
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  int bw;
  if (sbw <= 7.8E3) {
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	f641 6278 	movw	r2, #7800	; 0x1e78
 8002928:	4293      	cmp	r3, r2
 800292a:	dc02      	bgt.n	8002932 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x1a>
    bw = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	e03f      	b.n	80029b2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 10.4E3) {
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8002938:	4293      	cmp	r3, r2
 800293a:	dc02      	bgt.n	8002942 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x2a>
    bw = 1;
 800293c:	2301      	movs	r3, #1
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	e037      	b.n	80029b2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 15.6E3) {
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 8002948:	4293      	cmp	r3, r2
 800294a:	dc02      	bgt.n	8002952 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x3a>
    bw = 2;
 800294c:	2302      	movs	r3, #2
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	e02f      	b.n	80029b2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 20.8E3) {
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	f245 1240 	movw	r2, #20800	; 0x5140
 8002958:	4293      	cmp	r3, r2
 800295a:	dc02      	bgt.n	8002962 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x4a>
    bw = 3;
 800295c:	2303      	movs	r3, #3
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	e027      	b.n	80029b2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 31.25E3) {
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	f647 2212 	movw	r2, #31250	; 0x7a12
 8002968:	4293      	cmp	r3, r2
 800296a:	dc02      	bgt.n	8002972 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x5a>
    bw = 4;
 800296c:	2304      	movs	r3, #4
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	e01f      	b.n	80029b2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 41.7E3) {
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 8002978:	4293      	cmp	r3, r2
 800297a:	dc02      	bgt.n	8002982 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x6a>
    bw = 5;
 800297c:	2305      	movs	r3, #5
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	e017      	b.n	80029b2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 62.5E3) {
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002988:	4293      	cmp	r3, r2
 800298a:	dc02      	bgt.n	8002992 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x7a>
    bw = 6;
 800298c:	2306      	movs	r3, #6
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	e00f      	b.n	80029b2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 125E3) {
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	4a13      	ldr	r2, [pc, #76]	; (80029e4 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xcc>)
 8002996:	4293      	cmp	r3, r2
 8002998:	dc02      	bgt.n	80029a0 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x88>
    bw = 7;
 800299a:	2307      	movs	r3, #7
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	e008      	b.n	80029b2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 250E3) {
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	4a11      	ldr	r2, [pc, #68]	; (80029e8 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xd0>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	dc02      	bgt.n	80029ae <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x96>
    bw = 8;
 80029a8:	2308      	movs	r3, #8
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	e001      	b.n	80029b2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 80029ae:	2309      	movs	r3, #9
 80029b0:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 80029b2:	211d      	movs	r1, #29
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff fd11 	bl	80023dc <_ZN10RFM95_LoRa12readRegisterEh>
 80029ba:	4603      	mov	r3, r0
 80029bc:	b25b      	sxtb	r3, r3
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	b25a      	sxtb	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	b25b      	sxtb	r3, r3
 80029ca:	4313      	orrs	r3, r2
 80029cc:	b25b      	sxtb	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	211d      	movs	r1, #29
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff fcd1 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80029da:	bf00      	nop
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	0001e848 	.word	0x0001e848
 80029e8:	0003d090 	.word	0x0003d090

080029ec <_ZN10RFM95_LoRa14setCodingRate4Ei>:



void RFM95_LoRa::setCodingRate4(int denominator){
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  if (denominator < 5) {
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	dc02      	bgt.n	8002a02 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x16>
    denominator = 5;
 80029fc:	2305      	movs	r3, #5
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	e004      	b.n	8002a0c <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
  } else if (denominator > 8) {
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	dd01      	ble.n	8002a0c <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
	  denominator = 8;
 8002a08:	2308      	movs	r3, #8
 8002a0a:	603b      	str	r3, [r7, #0]
  }
  int cr = denominator - 4;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	3b04      	subs	r3, #4
 8002a10:	60fb      	str	r3, [r7, #12]
  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 8002a12:	211d      	movs	r1, #29
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff fce1 	bl	80023dc <_ZN10RFM95_LoRa12readRegisterEh>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	b25b      	sxtb	r3, r3
 8002a1e:	f023 030e 	bic.w	r3, r3, #14
 8002a22:	b25a      	sxtb	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	b25b      	sxtb	r3, r3
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	b25b      	sxtb	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	211d      	movs	r1, #29
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff fca1 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002a3a:	bf00      	nop
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <_ZN10RFM95_LoRa18explicitHeaderModeEv>:
uint8_t RFM95_LoRa::random(){
  return readRegister(REG_RSSI_WIDEBAND);
}


void RFM95_LoRa::explicitHeaderMode(){
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8002a50:	211d      	movs	r1, #29
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff fcc2 	bl	80023dc <_ZN10RFM95_LoRa12readRegisterEh>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f023 0301 	bic.w	r3, r3, #1
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	211d      	movs	r1, #29
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff fc89 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <_ZN10RFM95_LoRa18implicitHeaderModeEv>:


void RFM95_LoRa::implicitHeaderMode(){
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8002a80:	211d      	movs	r1, #29
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff fcaa 	bl	80023dc <_ZN10RFM95_LoRa12readRegisterEh>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	461a      	mov	r2, r3
 8002a92:	211d      	movs	r1, #29
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff fc71 	bl	800237c <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <_ZN10RFM95_LoRa7InitRFMEv>:
    writeRegister(REG_FIFO_ADDR_PTR, 0);
  }
}


bool RFM95_LoRa::InitRFM(){
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]


	setFrequency(868000000);
 8002aac:	4914      	ldr	r1, [pc, #80]	; (8002b00 <_ZN10RFM95_LoRa7InitRFMEv+0x5c>)
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff feac 	bl	800280c <_ZN10RFM95_LoRa12setFrequencyEl>
	setTxPower(17, PA_OUTPUT_PA_BOOST_PIN);
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	2111      	movs	r1, #17
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff fe69 	bl	8002790 <_ZN10RFM95_LoRa10setTxPowerEii>
	setSignalBandwidth(31.25E3);
 8002abe:	f647 2112 	movw	r1, #31250	; 0x7a12
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff ff28 	bl	8002918 <_ZN10RFM95_LoRa18setSignalBandwidthEl>
	setSpreadingFactor(12);
 8002ac8:	210c      	movs	r1, #12
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff fee4 	bl	8002898 <_ZN10RFM95_LoRa18setSpreadingFactorEi>
	setCodingRate4(5);
 8002ad0:	2105      	movs	r1, #5
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff ff8a 	bl	80029ec <_ZN10RFM95_LoRa14setCodingRate4Ei>
	if (!begin(866E6)) {
 8002ad8:	490a      	ldr	r1, [pc, #40]	; (8002b04 <_ZN10RFM95_LoRa7InitRFMEv+0x60>)
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff fca0 	bl	8002420 <_ZN10RFM95_LoRa5beginEl>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	bf0c      	ite	eq
 8002ae6:	2301      	moveq	r3, #1
 8002ae8:	2300      	movne	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <_ZN10RFM95_LoRa7InitRFMEv+0x50>
		return false;
 8002af0:	2300      	movs	r3, #0
 8002af2:	e000      	b.n	8002af6 <_ZN10RFM95_LoRa7InitRFMEv+0x52>
	}
	return true;
 8002af4:	2301      	movs	r3, #1
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	33bca100 	.word	0x33bca100
 8002b04:	339e1c80 	.word	0x339e1c80

08002b08 <_ZNK13DriveSettings16getClampingSpeedEv>:

/****************************************************************************************
 / * 	Clamping speed get/set
 ****************************************************************************************/
uint16_t DriveSettings::getClampingSpeed() const
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	return clampingSpeed;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	891b      	ldrh	r3, [r3, #8]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <_ZN13DriveSettings16setClampingSpeedEt>:

void DriveSettings::setClampingSpeed(uint16_t clampingSpeed)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	807b      	strh	r3, [r7, #2]
	if (this->clampingSpeed != clampingSpeed)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	891b      	ldrh	r3, [r3, #8]
 8002b30:	887a      	ldrh	r2, [r7, #2]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d009      	beq.n	8002b4a <_ZN13DriveSettings16setClampingSpeedEt+0x2a>
	{
		this->clampingSpeed = clampingSpeed;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	887a      	ldrh	r2, [r7, #2]
 8002b3a:	811a      	strh	r2, [r3, #8]
		this->settingsChangedReg |= CLAMPING_SPEED_CHANGE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	8b9b      	ldrh	r3, [r3, #28]
 8002b40:	f043 0308 	orr.w	r3, r3, #8
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	839a      	strh	r2, [r3, #28]
	}
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <_ZNK13DriveSettings17getClampingTorqueEv>:

/****************************************************************************************
 / * 	Clamping torque get/set
 ****************************************************************************************/
uint16_t DriveSettings::getClampingTorque() const
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
	return clampingTorque;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	889b      	ldrh	r3, [r3, #4]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <_ZN13DriveSettings17setClampingTorqueEt>:

void DriveSettings::setClampingTorque(uint16_t clampingTorque)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	460b      	mov	r3, r1
 8002b78:	807b      	strh	r3, [r7, #2]
	if (this->clampingTorque != clampingTorque)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	889b      	ldrh	r3, [r3, #4]
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d009      	beq.n	8002b98 <_ZN13DriveSettings17setClampingTorqueEt+0x2a>
	{
		this->clampingTorque = clampingTorque;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	887a      	ldrh	r2, [r7, #2]
 8002b88:	809a      	strh	r2, [r3, #4]
		this->settingsChangedReg |= CLAMPING_TORQUE_CHANGE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	8b9b      	ldrh	r3, [r3, #28]
 8002b8e:	f043 0304 	orr.w	r3, r3, #4
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	839a      	strh	r2, [r3, #28]
	}
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <_ZNK13DriveSettings12getInPosDiffEv>:

/****************************************************************************************
 / * 	clamping position difference get/set
 ****************************************************************************************/
uint16_t DriveSettings::getInPosDiff() const
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
	return inPosDiff;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	899b      	ldrh	r3, [r3, #12]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <_ZN13DriveSettings12setInPosDiffEt>:

void DriveSettings::setInPosDiff(uint16_t inPosDiff)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	807b      	strh	r3, [r7, #2]
	if (this->inPosDiff != inPosDiff)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	899b      	ldrh	r3, [r3, #12]
 8002bcc:	887a      	ldrh	r2, [r7, #2]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d009      	beq.n	8002be6 <_ZN13DriveSettings12setInPosDiffEt+0x2a>
	{
		this->inPosDiff = inPosDiff;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	887a      	ldrh	r2, [r7, #2]
 8002bd6:	819a      	strh	r2, [r3, #12]
		this->settingsChangedReg |= IN_POS_DIFF_CHANGE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	8b9b      	ldrh	r3, [r3, #28]
 8002bdc:	f043 0320 	orr.w	r3, r3, #32
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	839a      	strh	r2, [r3, #28]
	}

}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <_ZNK13DriveSettings18getOpeningDistanceEv>:

/****************************************************************************************
 / * 	opening distance get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOpeningDistance() const
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
	return openingDistance;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	89db      	ldrh	r3, [r3, #14]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <_ZN13DriveSettings18setOpeningDistanceEt>:

void DriveSettings::setOpeningDistance(uint16_t openingDistance)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	460b      	mov	r3, r1
 8002c14:	807b      	strh	r3, [r7, #2]
	if (this->openingDistance != openingDistance)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	89db      	ldrh	r3, [r3, #14]
 8002c1a:	887a      	ldrh	r2, [r7, #2]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d009      	beq.n	8002c34 <_ZN13DriveSettings18setOpeningDistanceEt+0x2a>
	{
		this->openingDistance = openingDistance;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	887a      	ldrh	r2, [r7, #2]
 8002c24:	81da      	strh	r2, [r3, #14]
		this->settingsChangedReg |= OPENING_DISTANCE_CHANGE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	8b9b      	ldrh	r3, [r3, #28]
 8002c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	839a      	strh	r2, [r3, #28]
	}
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <_ZNK13DriveSettings27getOverCurrentTimeThresholdEv>:

/****************************************************************************************
 / * 	overcurrent time threshold get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOverCurrentTimeThreshold() const
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
	return overCurrentTimeThreshold;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	8b1b      	ldrh	r3, [r3, #24]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <_ZN13DriveSettings27setOverCurrentTimeThresholdEt>:

void DriveSettings::setOverCurrentTimeThreshold(
		uint16_t overCurrentTimeThreshold)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	807b      	strh	r3, [r7, #2]
	if (this->overCurrentTimeThreshold != overCurrentTimeThreshold)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	8b1b      	ldrh	r3, [r3, #24]
 8002c68:	887a      	ldrh	r2, [r7, #2]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d009      	beq.n	8002c82 <_ZN13DriveSettings27setOverCurrentTimeThresholdEt+0x2a>
	{
		this->overCurrentTimeThreshold = overCurrentTimeThreshold;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	887a      	ldrh	r2, [r7, #2]
 8002c72:	831a      	strh	r2, [r3, #24]
		this->settingsChangedReg |= OVER_CURRENT_TIME_TH_CHANGE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	8b9b      	ldrh	r3, [r3, #28]
 8002c78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	839a      	strh	r2, [r3, #28]
	}
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <_ZNK13DriveSettings21getOverCurrentWarningEv>:

/****************************************************************************************
 / * 	overcurrent warning get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOverCurrentWarning() const
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
	return overCurrentWarning;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	8a9b      	ldrh	r3, [r3, #20]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <_ZN13DriveSettings21setOverCurrentWarningEt>:

void DriveSettings::setOverCurrentWarning(uint16_t overCurrentWarning)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	807b      	strh	r3, [r7, #2]
	if (this->overCurrentWarning != overCurrentWarning)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	8a9b      	ldrh	r3, [r3, #20]
 8002cb6:	887a      	ldrh	r2, [r7, #2]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d009      	beq.n	8002cd0 <_ZN13DriveSettings21setOverCurrentWarningEt+0x2a>
	{
		this->overCurrentWarning = overCurrentWarning;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	829a      	strh	r2, [r3, #20]
		this->settingsChangedReg |= OVER_CURRENT_WARNING_CHANGE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	8b9b      	ldrh	r3, [r3, #28]
 8002cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	839a      	strh	r2, [r3, #28]
	}
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <_ZNK13DriveSettings20getSelfShutdownDelayEv>:
/****************************************************************************************
 / * 	self shutdown delay get/set
 ****************************************************************************************/
uint16_t DriveSettings::getSelfShutdownDelay() const
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
	return selfShutdownDelay;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	895b      	ldrh	r3, [r3, #10]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <_ZN13DriveSettings20setSelfShutdownDelayEt>:

void DriveSettings::setSelfShutdownDelay(uint16_t selfShutdownDelay)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	807b      	strh	r3, [r7, #2]
	if (this->selfShutdownDelay != selfShutdownDelay)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	895b      	ldrh	r3, [r3, #10]
 8002d04:	887a      	ldrh	r2, [r7, #2]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d009      	beq.n	8002d1e <_ZN13DriveSettings20setSelfShutdownDelayEt+0x2a>
	{
		this->selfShutdownDelay = selfShutdownDelay;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	887a      	ldrh	r2, [r7, #2]
 8002d0e:	815a      	strh	r2, [r3, #10]
		this->settingsChangedReg |= SELF_SHUTDOWN_DELAY_CHANGE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	8b9b      	ldrh	r3, [r3, #28]
 8002d14:	f043 0310 	orr.w	r3, r3, #16
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	839a      	strh	r2, [r3, #28]
	}
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <_ZNK13DriveSettings13getTeachSpeedEv>:

/****************************************************************************************
 / * 	teach speed get/set
 ****************************************************************************************/
uint16_t DriveSettings::getTeachSpeed() const
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
	return teachSpeed;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	88db      	ldrh	r3, [r3, #6]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <_ZN13DriveSettings13setTeachSpeedEt>:

void DriveSettings::setTeachSpeed(uint16_t teachSpeed)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	807b      	strh	r3, [r7, #2]
	if (this->teachSpeed != teachSpeed)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	88db      	ldrh	r3, [r3, #6]
 8002d52:	887a      	ldrh	r2, [r7, #2]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d009      	beq.n	8002d6c <_ZN13DriveSettings13setTeachSpeedEt+0x2a>
	{
		this->teachSpeed = teachSpeed;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	887a      	ldrh	r2, [r7, #2]
 8002d5c:	80da      	strh	r2, [r3, #6]
		this->settingsChangedReg |= TEACH_SPEED_CHANGE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	8b9b      	ldrh	r3, [r3, #28]
 8002d62:	f043 0302 	orr.w	r3, r3, #2
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	839a      	strh	r2, [r3, #28]
	}
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <_ZNK13DriveSettings14getTeachTroqueEv>:
/****************************************************************************************
 / * 	teach torque get/set
 ****************************************************************************************/
uint16_t DriveSettings::getTeachTroque() const
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
	return teachTroque;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	885b      	ldrh	r3, [r3, #2]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <_ZN13DriveSettings14setTeachTroqueEt>:

void DriveSettings::setTeachTroque(uint16_t teachTroque)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	807b      	strh	r3, [r7, #2]
	if (this->teachTroque != teachTroque)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	885b      	ldrh	r3, [r3, #2]
 8002da0:	887a      	ldrh	r2, [r7, #2]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d009      	beq.n	8002dba <_ZN13DriveSettings14setTeachTroqueEt+0x2a>
	{
		this->teachTroque = teachTroque;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	887a      	ldrh	r2, [r7, #2]
 8002daa:	805a      	strh	r2, [r3, #2]
		this->settingsChangedReg |= TEACH_TORQUE_CHANGE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	8b9b      	ldrh	r3, [r3, #28]
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	839a      	strh	r2, [r3, #28]
	}
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <_ZNK13DriveSettings20getUnderVoltageErrorEv>:
/****************************************************************************************
 / * 	undervoltage error get/set
 ****************************************************************************************/
uint16_t DriveSettings::getUnderVoltageError() const
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
	return underVoltageError;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	8a5b      	ldrh	r3, [r3, #18]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <_ZN13DriveSettings20setUnderVoltageErrorEt>:

void DriveSettings::setUnderVoltageError(uint16_t underVoltageError)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	460b      	mov	r3, r1
 8002de8:	807b      	strh	r3, [r7, #2]
	if (this->underVoltageError != underVoltageError)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	8a5b      	ldrh	r3, [r3, #18]
 8002dee:	887a      	ldrh	r2, [r7, #2]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d009      	beq.n	8002e08 <_ZN13DriveSettings20setUnderVoltageErrorEt+0x2a>
	{
		this->underVoltageError = underVoltageError;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	887a      	ldrh	r2, [r7, #2]
 8002df8:	825a      	strh	r2, [r3, #18]
		this->settingsChangedReg |= UNDERVOLTAGE_ERROR_CHANGE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	8b9b      	ldrh	r3, [r3, #28]
 8002dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	839a      	strh	r2, [r3, #28]
	}
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <_ZNK13DriveSettings22getUnderVoltageWarningEv>:

/****************************************************************************************
 / * 	undervoltage warning get/set
 ****************************************************************************************/
uint16_t DriveSettings::getUnderVoltageWarning() const
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
	return underVoltageWarning;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	8a1b      	ldrh	r3, [r3, #16]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <_ZN13DriveSettings22setUnderVoltageWarningEt>:

void DriveSettings::setUnderVoltageWarning(uint16_t underVoltageWarning)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	807b      	strh	r3, [r7, #2]
	if (this->underVoltageWarning != underVoltageWarning)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	8a1b      	ldrh	r3, [r3, #16]
 8002e3c:	887a      	ldrh	r2, [r7, #2]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d009      	beq.n	8002e56 <_ZN13DriveSettings22setUnderVoltageWarningEt+0x2a>
	{
		this->underVoltageWarning = underVoltageWarning;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	887a      	ldrh	r2, [r7, #2]
 8002e46:	821a      	strh	r2, [r3, #16]
		this->settingsChangedReg |= UNDERVOLTAGE_WARNING_CHANGE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	8b9b      	ldrh	r3, [r3, #28]
 8002e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	839a      	strh	r2, [r3, #28]
	}
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <_ZNK13DriveSettings19getOverCurrentErrorEv>:
/****************************************************************************************
 / * 	overcurrent error get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOverCurrentError() const
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
	return overCurrentError;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	8adb      	ldrh	r3, [r3, #22]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <_ZN13DriveSettings19setOverCurrentErrorEt>:

void DriveSettings::setOverCurrentError(uint16_t overCurrentError)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	460b      	mov	r3, r1
 8002e84:	807b      	strh	r3, [r7, #2]
	if (this->overCurrentError != overCurrentError)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	8adb      	ldrh	r3, [r3, #22]
 8002e8a:	887a      	ldrh	r2, [r7, #2]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d009      	beq.n	8002ea4 <_ZN13DriveSettings19setOverCurrentErrorEt+0x2a>
	{
		this->overCurrentError = overCurrentError;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	887a      	ldrh	r2, [r7, #2]
 8002e94:	82da      	strh	r2, [r3, #22]
		this->settingsChangedReg |= OVER_CURRENT_ERROR_CHANGE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	8b9b      	ldrh	r3, [r3, #28]
 8002e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	839a      	strh	r2, [r3, #28]
	}
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <_ZN13DriveSettings16getDeviceAddressEv>:
/****************************************************************************************
 / * 	device address get/set
 ****************************************************************************************/
uint8_t DriveSettings::getDeviceAddress()
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
	return deviceAddress;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	781b      	ldrb	r3, [r3, #0]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <_ZN13DriveSettings16setDeviceAddressEh>:

void DriveSettings::setDeviceAddress(uint8_t deviceAddress = 0)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	70fb      	strb	r3, [r7, #3]
	this->deviceAddress = deviceAddress;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	701a      	strb	r2, [r3, #0]
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <_ZN13DriveSettings14isSaveSettingsEv>:

/****************************************************************************************
 / * 	device address get/set
 ****************************************************************************************/
bool DriveSettings::isSaveSettings()
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b085      	sub	sp, #20
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
	bool saveSettingsTemp = this->saveSettings;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	7e9b      	ldrb	r3, [r3, #26]
 8002ef2:	73fb      	strb	r3, [r7, #15]
	this->saveSettings = false;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	769a      	strb	r2, [r3, #26]
	return saveSettingsTemp;
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <_ZN13DriveSettings15setSaveSettingsEb>:

void DriveSettings::setSaveSettings(bool saveSettings)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	70fb      	strb	r3, [r7, #3]
	this->saveSettings = saveSettings;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	769a      	strb	r2, [r3, #26]
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <_ZN13DriveSettings17isSettingsChangedEv>:


bool DriveSettings::isSettingsChanged()
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
	return (settingsChangedReg != 0);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	8b9b      	ldrh	r3, [r3, #28]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	bf14      	ite	ne
 8002f36:	2301      	movne	r3, #1
 8002f38:	2300      	moveq	r3, #0
 8002f3a:	b2db      	uxtb	r3, r3
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <_ZNK13DriveSettings21getSettingsChangedRegEv>:

uint16_t DriveSettings::getSettingsChangedReg() const
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	return this->settingsChangedReg;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	8b9b      	ldrh	r3, [r3, #28]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <_ZN13DriveSettings20ResetSettingsChangedEt>:

void DriveSettings::ResetSettingsChanged(uint16_t bit){
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	807b      	strh	r3, [r7, #2]
	settingsChangedReg &= ~bit;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	8b9b      	ldrh	r3, [r3, #28]
 8002f70:	b21a      	sxth	r2, r3
 8002f72:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	b21b      	sxth	r3, r3
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	b21b      	sxth	r3, r3
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	839a      	strh	r2, [r3, #28]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <_ZN12DriveCommandC1Ev>:
 *      Author: marce
 */

#include "DriveCommand.h"

DriveCommand::DriveCommand()
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	701a      	strb	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	705a      	strb	r2, [r3, #1]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	709a      	strb	r2, [r3, #2]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	70da      	strb	r2, [r3, #3]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	711a      	strb	r2, [r3, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	715a      	strb	r2, [r3, #5]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	719a      	strb	r2, [r3, #6]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	71da      	strb	r2, [r3, #7]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	721a      	strb	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	725a      	strb	r2, [r3, #9]
{
}
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <_ZN12DriveCommand7isCloseEv>:

/****************************************************************************************
 / * 	close get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isClose()
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
	bool closeTemp = close;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	73fb      	strb	r3, [r7, #15]
	close = false;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
	return closeTemp;
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <_ZN12DriveCommand8setCloseEb>:

void DriveCommand::setClose(bool close)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	70fb      	strb	r3, [r7, #3]
	this->close = close;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	701a      	strb	r2, [r3, #0]
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <_ZN12DriveCommand6isOpenEv>:

/****************************************************************************************
 / * 	open get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isOpen()
{
 8003022:	b480      	push	{r7}
 8003024:	b085      	sub	sp, #20
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
	bool openTemp = open;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	785b      	ldrb	r3, [r3, #1]
 800302e:	73fb      	strb	r3, [r7, #15]
	open = false;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	705a      	strb	r2, [r3, #1]
	return openTemp;
 8003036:	7bfb      	ldrb	r3, [r7, #15]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <_ZN12DriveCommand7setOpenEb>:

void DriveCommand::setOpen(bool open)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	70fb      	strb	r3, [r7, #3]
	this->open = open;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	705a      	strb	r2, [r3, #1]
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <_ZN12DriveCommand9isDisableEv>:

/****************************************************************************************
 / * 	disable get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isDisable()
{
 8003062:	b480      	push	{r7}
 8003064:	b085      	sub	sp, #20
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
	bool disableTemp = disable;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	799b      	ldrb	r3, [r3, #6]
 800306e:	73fb      	strb	r3, [r7, #15]
	disable = false;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	719a      	strb	r2, [r3, #6]
	return disableTemp;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <_ZN12DriveCommand10setDisableEb>:

void DriveCommand::setDisable(bool disable)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	70fb      	strb	r3, [r7, #3]
	this->disable = disable;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	78fa      	ldrb	r2, [r7, #3]
 8003094:	719a      	strb	r2, [r3, #6]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <_ZN12DriveCommand8isEnableEv>:

/****************************************************************************************
 / * 	enable get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isEnable()
{
 80030a2:	b480      	push	{r7}
 80030a4:	b085      	sub	sp, #20
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
	bool enableTemp = enable;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	791b      	ldrb	r3, [r3, #4]
 80030ae:	73fb      	strb	r3, [r7, #15]
	enable = false;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	711a      	strb	r2, [r3, #4]
	return enableTemp;
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <_ZN12DriveCommand9setEnableEb>:

void DriveCommand::setEnable(bool enable)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	70fb      	strb	r3, [r7, #3]
	this->enable = enable;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	711a      	strb	r2, [r3, #4]
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <_ZN12DriveCommand7isResetEv>:

/****************************************************************************************
 / * 	reset get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isReset()
{
 80030e2:	b480      	push	{r7}
 80030e4:	b085      	sub	sp, #20
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
	bool resetTemp = reset;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	78db      	ldrb	r3, [r3, #3]
 80030ee:	73fb      	strb	r3, [r7, #15]
	reset = false;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	70da      	strb	r2, [r3, #3]
	return resetTemp;
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <_ZN12DriveCommand8setResetEb>:

void DriveCommand::setReset(bool reset)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	70fb      	strb	r3, [r7, #3]
	this->reset = reset;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	70da      	strb	r2, [r3, #3]
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <_ZN12DriveCommand6isStopEv>:

/****************************************************************************************
 * 	stop get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isStop()
{
 8003122:	b480      	push	{r7}
 8003124:	b085      	sub	sp, #20
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
	bool stopTemp = stop;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	795b      	ldrb	r3, [r3, #5]
 800312e:	73fb      	strb	r3, [r7, #15]
	stop = false;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	715a      	strb	r2, [r3, #5]
	return stopTemp;
 8003136:	7bfb      	ldrb	r3, [r7, #15]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <_ZN12DriveCommand7setStopEb>:

void DriveCommand::setStop(bool stop)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	70fb      	strb	r3, [r7, #3]
	this->stop = stop;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	78fa      	ldrb	r2, [r7, #3]
 8003154:	715a      	strb	r2, [r3, #5]
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <_ZN12DriveCommand7isTeachEv>:

/****************************************************************************************
 * 	teach get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isTeach()
{
 8003162:	b480      	push	{r7}
 8003164:	b085      	sub	sp, #20
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
	bool teachTemp = teach;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	789b      	ldrb	r3, [r3, #2]
 800316e:	73fb      	strb	r3, [r7, #15]
	teach = false;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	709a      	strb	r2, [r3, #2]
	return teachTemp;
 8003176:	7bfb      	ldrb	r3, [r7, #15]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <_ZN12DriveCommand8setTeachEb>:

void DriveCommand::setTeach(bool teach)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	70fb      	strb	r3, [r7, #3]
	if (this->teach != teach)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	789b      	ldrb	r3, [r3, #2]
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	429a      	cmp	r2, r3
 8003198:	d002      	beq.n	80031a0 <_ZN12DriveCommand8setTeachEb+0x1c>
	{
		this->teach = teach;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	709a      	strb	r2, [r3, #2]
	}

}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <_ZNK12DriveCommand16isCommandChangedEv>:
/****************************************************************************************
 * 	has commands changed get/set (read reset)
 ****************************************************************************************/

bool DriveCommand::isCommandChanged() const
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
	return (commandChangeReg != 0);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	7a5b      	ldrb	r3, [r3, #9]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	bf14      	ite	ne
 80031bc:	2301      	movne	r3, #1
 80031be:	2300      	moveq	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <_ZNK12DriveCommand20getCommandChangedRegEv>:

uint8_t DriveCommand::getCommandChangedReg() const
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
	return this->commandChangeReg;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	7a5b      	ldrb	r3, [r3, #9]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <_ZN12DriveCommand19ResetCommandChangedEh>:

void DriveCommand::ResetCommandChanged(uint8_t bit)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	460b      	mov	r3, r1
 80031f0:	70fb      	strb	r3, [r7, #3]
	this->commandChangeReg &= ~bit;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	7a5b      	ldrb	r3, [r3, #9]
 80031f6:	b25a      	sxtb	r2, r3
 80031f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	b25b      	sxtb	r3, r3
 8003200:	4013      	ands	r3, r2
 8003202:	b25b      	sxtb	r3, r3
 8003204:	b2da      	uxtb	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	725a      	strb	r2, [r3, #9]
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <_ZN11DriveStatusC1Ev>:
 *      Author: marce
 */

#include "DriveStatus.h"

DriveStatus::DriveStatus()
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	721a      	strb	r2, [r3, #8]
{
}
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4618      	mov	r0, r3
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <_ZN11DriveStatus7isCloseEv>:

/****************************************************************************************
 / * 	close get/set
 ****************************************************************************************/
bool DriveStatus::isClose()
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
	return close;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	785b      	ldrb	r3, [r3, #1]
}
 800323e:	4618      	mov	r0, r3
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <_ZN11DriveStatus8setCloseEb>:

void DriveStatus::setClose(bool close)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	460b      	mov	r3, r1
 8003254:	70fb      	strb	r3, [r7, #3]
	if (this->close != close)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	785b      	ldrb	r3, [r3, #1]
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	429a      	cmp	r2, r3
 800325e:	d005      	beq.n	800326c <_ZN11DriveStatus8setCloseEb+0x22>
	{
		this->close = close;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	705a      	strb	r2, [r3, #1]
		statusChanged = true;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	721a      	strb	r2, [r3, #8]
	}
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <_ZN11DriveStatus6isOpenEv>:

/****************************************************************************************
 / * 	open get/set
 ****************************************************************************************/
bool DriveStatus::isOpen()
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
	return open;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	789b      	ldrb	r3, [r3, #2]
}
 8003284:	4618      	mov	r0, r3
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <_ZN11DriveStatus7setOpenEb>:

void DriveStatus::setOpen(bool open)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	70fb      	strb	r3, [r7, #3]
	if (this->open != open)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	789b      	ldrb	r3, [r3, #2]
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d005      	beq.n	80032b2 <_ZN11DriveStatus7setOpenEb+0x22>
	{
		this->open = open;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	78fa      	ldrb	r2, [r7, #3]
 80032aa:	709a      	strb	r2, [r3, #2]
		statusChanged = true;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	721a      	strb	r2, [r3, #8]
	}
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <_ZN11DriveStatus9isDisableEv>:

/****************************************************************************************
 / * 	disable get/set
 ****************************************************************************************/
bool DriveStatus::isDisable()
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
	return disable;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	79db      	ldrb	r3, [r3, #7]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <_ZN11DriveStatus10setDisableEb>:

void DriveStatus::setDisable(bool disable)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	460b      	mov	r3, r1
 80032e0:	70fb      	strb	r3, [r7, #3]
	if (this->disable != disable)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	79db      	ldrb	r3, [r3, #7]
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d005      	beq.n	80032f8 <_ZN11DriveStatus10setDisableEb+0x22>
	{
		this->disable = disable;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	71da      	strb	r2, [r3, #7]
		statusChanged = true;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	721a      	strb	r2, [r3, #8]
	}
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <_ZN11DriveStatus8isEnableEv>:

/****************************************************************************************
 / * 	enable get/set
 ****************************************************************************************/
bool DriveStatus::isEnable()
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
	return enable;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	795b      	ldrb	r3, [r3, #5]
}
 8003310:	4618      	mov	r0, r3
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <_ZN11DriveStatus9setEnableEb>:

void DriveStatus::setEnable(bool enable)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	70fb      	strb	r3, [r7, #3]
	if (this->enable != enable)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	795b      	ldrb	r3, [r3, #5]
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	429a      	cmp	r2, r3
 8003330:	d005      	beq.n	800333e <_ZN11DriveStatus9setEnableEb+0x22>
	{
		this->enable = enable;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	715a      	strb	r2, [r3, #5]
		statusChanged = true;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	721a      	strb	r2, [r3, #8]
	}
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <_ZN11DriveStatus7isResetEv>:

/****************************************************************************************
 / * 	reset get/set
 ****************************************************************************************/
bool DriveStatus::isReset()
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
	return reset;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	791b      	ldrb	r3, [r3, #4]
}
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <_ZN11DriveStatus8setResetEb>:

void DriveStatus::setReset(bool reset)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	460b      	mov	r3, r1
 800336c:	70fb      	strb	r3, [r7, #3]
	if (this->reset != reset)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	791b      	ldrb	r3, [r3, #4]
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	429a      	cmp	r2, r3
 8003376:	d005      	beq.n	8003384 <_ZN11DriveStatus8setResetEb+0x22>
	{
		this->reset = reset;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	711a      	strb	r2, [r3, #4]
		statusChanged = true;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	721a      	strb	r2, [r3, #8]
	}
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <_ZN11DriveStatus6isStopEv>:

/****************************************************************************************
 / * 	stop get/set
 /****************************************************************************************/
bool DriveStatus::isStop()
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	return stop;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	799b      	ldrb	r3, [r3, #6]
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <_ZN11DriveStatus7setStopEb>:

void DriveStatus::setStop(bool stop)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	70fb      	strb	r3, [r7, #3]
	if (this->stop != stop)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	799b      	ldrb	r3, [r3, #6]
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d005      	beq.n	80033ca <_ZN11DriveStatus7setStopEb+0x22>
	{
		this->stop = stop;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	78fa      	ldrb	r2, [r7, #3]
 80033c2:	719a      	strb	r2, [r3, #6]
		statusChanged = true;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	721a      	strb	r2, [r3, #8]
	}
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <_ZN11DriveStatus7isTeachEv>:

/****************************************************************************************
 / * 	teach get/set
 /****************************************************************************************/
bool DriveStatus::isTeach()
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
	return teach;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	78db      	ldrb	r3, [r3, #3]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <_ZN11DriveStatus8setTeachEb>:

void DriveStatus::setTeach(bool teach)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	460b      	mov	r3, r1
 80033f8:	70fb      	strb	r3, [r7, #3]
	if (this->teach != teach)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	78db      	ldrb	r3, [r3, #3]
 80033fe:	78fa      	ldrb	r2, [r7, #3]
 8003400:	429a      	cmp	r2, r3
 8003402:	d005      	beq.n	8003410 <_ZN11DriveStatus8setTeachEb+0x22>
	{
		this->teach = teach;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	78fa      	ldrb	r2, [r7, #3]
 8003408:	70da      	strb	r2, [r3, #3]
		statusChanged = true;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	721a      	strb	r2, [r3, #8]
	}
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <_ZN11DriveStatus8getErrorEv>:

/****************************************************************************************
 / * 	write config get/set
 ****************************************************************************************/
DriveStatus::_ERROR DriveStatus::getError()
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
	return this->error;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	781b      	ldrb	r3, [r3, #0]
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <_ZN11DriveStatus8setErrorENS_6_ERRORE>:

void DriveStatus::setError(_ERROR error)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	70fb      	strb	r3, [r7, #3]
	if (this->error = error)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	78fa      	ldrb	r2, [r7, #3]
 8003444:	701a      	strb	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	bf14      	ite	ne
 800344e:	2301      	movne	r3, #1
 8003450:	2300      	moveq	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <_ZN11DriveStatus8setErrorENS_6_ERRORE+0x2a>
	{
		statusChanged = true;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	721a      	strb	r2, [r3, #8]
	}
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <_ZN11TaskHandler11UpdateTasksEv>:
#include "TaskHandler.h"
#include "gpio.h"
#include "../AppMain/Defines.h"

//update tasks, should be called every 1ms
void TaskHandler::UpdateTasks() {
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

	//1ms

	//2ms
	if(counter % ADC_UPDATE_TIME == 0){
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	899b      	ldrh	r3, [r3, #12]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d102      	bne.n	8003486 <_ZN11TaskHandler11UpdateTasksEv+0x1a>
		adcUpdateTask = true;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	70da      	strb	r2, [r3, #3]
	}


	//15ms
	if(counter % IO_UPDATE_TIME == 0){
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	899a      	ldrh	r2, [r3, #12]
 800348a:	4b33      	ldr	r3, [pc, #204]	; (8003558 <_ZN11TaskHandler11UpdateTasksEv+0xec>)
 800348c:	fba3 1302 	umull	r1, r3, r3, r2
 8003490:	08d9      	lsrs	r1, r3, #3
 8003492:	460b      	mov	r3, r1
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	1a5b      	subs	r3, r3, r1
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	b29b      	uxth	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <_ZN11TaskHandler11UpdateTasksEv+0x3a>
		ioUpdateTask = true;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	709a      	strb	r2, [r3, #2]
	}



	//100ms
	if(counter % ERROR_UPDATE_TIME == 0){
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	899b      	ldrh	r3, [r3, #12]
 80034aa:	4a2c      	ldr	r2, [pc, #176]	; (800355c <_ZN11TaskHandler11UpdateTasksEv+0xf0>)
 80034ac:	fba2 1203 	umull	r1, r2, r2, r3
 80034b0:	0952      	lsrs	r2, r2, #5
 80034b2:	2164      	movs	r1, #100	; 0x64
 80034b4:	fb01 f202 	mul.w	r2, r1, r2
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d102      	bne.n	80034c6 <_ZN11TaskHandler11UpdateTasksEv+0x5a>
		errorTask = true;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	701a      	strb	r2, [r3, #0]
	}

	if(counter % COM_UPDATE_TIME == 0){
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	899b      	ldrh	r3, [r3, #12]
 80034ca:	4a24      	ldr	r2, [pc, #144]	; (800355c <_ZN11TaskHandler11UpdateTasksEv+0xf0>)
 80034cc:	fba2 1203 	umull	r1, r2, r2, r3
 80034d0:	0992      	lsrs	r2, r2, #6
 80034d2:	21c8      	movs	r1, #200	; 0xc8
 80034d4:	fb01 f202 	mul.w	r2, r1, r2
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d102      	bne.n	80034e6 <_ZN11TaskHandler11UpdateTasksEv+0x7a>
		comTask = true;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	705a      	strb	r2, [r3, #1]
	}


	//500ms
	if(counter % LED_UPDATE_TIME == 0){
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	899b      	ldrh	r3, [r3, #12]
 80034ea:	4a1d      	ldr	r2, [pc, #116]	; (8003560 <_ZN11TaskHandler11UpdateTasksEv+0xf4>)
 80034ec:	fba2 1203 	umull	r1, r2, r2, r3
 80034f0:	0952      	lsrs	r2, r2, #5
 80034f2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80034f6:	fb01 f202 	mul.w	r2, r1, r2
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d102      	bne.n	8003508 <_ZN11TaskHandler11UpdateTasksEv+0x9c>
		ledUpdateTask = true;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	711a      	strb	r2, [r3, #4]
	}


	//1000ms
	if(counter % SAVE_UPDATE_TIME == 0){
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	899b      	ldrh	r3, [r3, #12]
 800350c:	4a14      	ldr	r2, [pc, #80]	; (8003560 <_ZN11TaskHandler11UpdateTasksEv+0xf4>)
 800350e:	fba2 1203 	umull	r1, r2, r2, r3
 8003512:	0992      	lsrs	r2, r2, #6
 8003514:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003518:	fb01 f202 	mul.w	r2, r1, r2
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	b29b      	uxth	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <_ZN11TaskHandler11UpdateTasksEv+0xbe>
		saveTask = true;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	715a      	strb	r2, [r3, #5]
	}



	//increment counter
	if(counter > 2999){
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	899b      	ldrh	r3, [r3, #12]
 800352e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003532:	4293      	cmp	r3, r2
 8003534:	d903      	bls.n	800353e <_ZN11TaskHandler11UpdateTasksEv+0xd2>
		counter = 1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	819a      	strh	r2, [r3, #12]
	}else{
		counter++;
	}
}
 800353c:	e005      	b.n	800354a <_ZN11TaskHandler11UpdateTasksEv+0xde>
		counter++;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	899b      	ldrh	r3, [r3, #12]
 8003542:	3301      	adds	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	819a      	strh	r2, [r3, #12]
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	88888889 	.word	0x88888889
 800355c:	51eb851f 	.word	0x51eb851f
 8003560:	10624dd3 	.word	0x10624dd3

08003564 <_ZN11TaskHandler9isComTaskEv>:



bool TaskHandler::isComTask()  {
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
	bool comTaskTemp = (comTask & comTaskEnable);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	785b      	ldrb	r3, [r3, #1]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	79db      	ldrb	r3, [r3, #7]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	4013      	ands	r3, r2
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf14      	ite	ne
 8003580:	2301      	movne	r3, #1
 8003582:	2300      	moveq	r3, #0
 8003584:	73fb      	strb	r3, [r7, #15]
	comTask = false;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	705a      	strb	r2, [r3, #1]
	return comTaskTemp;
 800358c:	7bfb      	ldrb	r3, [r7, #15]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <_ZN11TaskHandler10isSaveTaskEv>:

bool TaskHandler::isSaveTask(){
 800359a:	b480      	push	{r7}
 800359c:	b085      	sub	sp, #20
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
	bool saveTaskTemp = (saveTask & saveTaskEnable);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	795b      	ldrb	r3, [r3, #5]
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	461a      	mov	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	7adb      	ldrb	r3, [r3, #11]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	bf14      	ite	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	2300      	moveq	r3, #0
 80035ba:	73fb      	strb	r3, [r7, #15]
	saveTask = false;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	715a      	strb	r2, [r3, #5]
	return saveTaskTemp;
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <_ZN11TaskHandler11isErrorTaskEv>:


bool TaskHandler::isErrorTask()  {
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
	bool errorTaskTemp = (errorTask & errorTaskEnable);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	461a      	mov	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	799b      	ldrb	r3, [r3, #6]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	4013      	ands	r3, r2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf14      	ite	ne
 80035ec:	2301      	movne	r3, #1
 80035ee:	2300      	moveq	r3, #0
 80035f0:	73fb      	strb	r3, [r7, #15]
	errorTask = false;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	701a      	strb	r2, [r3, #0]
	return errorTaskTemp;
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <_ZN11TaskHandler14isIoUpdateTaskEv>:

bool TaskHandler::isIoUpdateTask()  {
 8003606:	b480      	push	{r7}
 8003608:	b085      	sub	sp, #20
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
	bool ioUpdateTaskTemp = (ioUpdateTask & ioUpdateTaskEnable);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	789b      	ldrb	r3, [r3, #2]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	461a      	mov	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	7a1b      	ldrb	r3, [r3, #8]
 800361a:	b2db      	uxtb	r3, r3
 800361c:	4013      	ands	r3, r2
 800361e:	2b00      	cmp	r3, #0
 8003620:	bf14      	ite	ne
 8003622:	2301      	movne	r3, #1
 8003624:	2300      	moveq	r3, #0
 8003626:	73fb      	strb	r3, [r7, #15]
	ioUpdateTask = false;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	709a      	strb	r2, [r3, #2]
	return ioUpdateTaskTemp;
 800362e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <_ZN11TaskHandler15isLEDUpdateTaskEv>:
	adcUpdateTask = false;
	return adcUpdateTaskTemp;
}


bool TaskHandler::isLEDUpdateTask(){
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
	bool ledUpdateTaskTemp = (ledUpdateTask & ledUpdateTaskEnable);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	791b      	ldrb	r3, [r3, #4]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	7a9b      	ldrb	r3, [r3, #10]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	4013      	ands	r3, r2
 8003654:	2b00      	cmp	r3, #0
 8003656:	bf14      	ite	ne
 8003658:	2301      	movne	r3, #1
 800365a:	2300      	moveq	r3, #0
 800365c:	73fb      	strb	r3, [r7, #15]
	ledUpdateTask = false;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	711a      	strb	r2, [r3, #4]
	return ledUpdateTaskTemp;
 8003664:	7bfb      	ldrb	r3, [r7, #15]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <_ZN5Delay8DWT_InitEv>:


/*
 * Mikrosenkunden delay Initialisieren
 */
void Delay::DWT_Init(void) {
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003678:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <_ZN5Delay8DWT_InitEv+0x2c>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	4a08      	ldr	r2, [pc, #32]	; (80036a0 <_ZN5Delay8DWT_InitEv+0x2c>)
 800367e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003682:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8003684:	4b07      	ldr	r3, [pc, #28]	; (80036a4 <_ZN5Delay8DWT_InitEv+0x30>)
 8003686:	2200      	movs	r2, #0
 8003688:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <_ZN5Delay8DWT_InitEv+0x30>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a05      	ldr	r2, [pc, #20]	; (80036a4 <_ZN5Delay8DWT_InitEv+0x30>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6013      	str	r3, [r2, #0]
}
 8003696:	bf00      	nop
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	e000edf0 	.word	0xe000edf0
 80036a4:	e0001000 	.word	0xe0001000

080036a8 <_ZN5Delay12DWT_Delay_usEm>:

/*
 * Mikrosenkunden delay für Push-Pull ansteuerung
 */
void Delay::DWT_Delay_us(volatile uint32_t microseconds) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 80036b0:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <_ZN5Delay12DWT_Delay_usEm+0x48>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	60fb      	str	r3, [r7, #12]
	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80036b6:	f005 fa3f 	bl	8008b38 <HAL_RCC_GetHCLKFreq>
 80036ba:	4603      	mov	r3, r0
 80036bc:	4a0d      	ldr	r2, [pc, #52]	; (80036f4 <_ZN5Delay12DWT_Delay_usEm+0x4c>)
 80036be:	fba2 2303 	umull	r2, r3, r2, r3
 80036c2:	0c9b      	lsrs	r3, r3, #18
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	fb02 f303 	mul.w	r3, r2, r3
 80036ca:	607b      	str	r3, [r7, #4]
	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80036cc:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <_ZN5Delay12DWT_Delay_usEm+0x48>)
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	1ad2      	subs	r2, r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	bf34      	ite	cc
 80036da:	2301      	movcc	r3, #1
 80036dc:	2300      	movcs	r3, #0
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d000      	beq.n	80036e6 <_ZN5Delay12DWT_Delay_usEm+0x3e>
 80036e4:	e7f2      	b.n	80036cc <_ZN5Delay12DWT_Delay_usEm+0x24>
}
 80036e6:	bf00      	nop
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	e0001000 	.word	0xe0001000
 80036f4:	431bde83 	.word	0x431bde83

080036f8 <_ZN13TypeConverter12uint16ToByteEPhth>:
}




void TypeConverter::uint16ToByte(uint8_t* byteArray, uint16_t data, uint8_t offset){
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	807b      	strh	r3, [r7, #2]
 8003704:	4613      	mov	r3, r2
 8003706:	707b      	strb	r3, [r7, #1]
	byteArray[offset] = data;
 8003708:	787b      	ldrb	r3, [r7, #1]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	4413      	add	r3, r2
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	701a      	strb	r2, [r3, #0]
	byteArray[offset+1] = data>>8;
 8003714:	887b      	ldrh	r3, [r7, #2]
 8003716:	0a1b      	lsrs	r3, r3, #8
 8003718:	b299      	uxth	r1, r3
 800371a:	787b      	ldrb	r3, [r7, #1]
 800371c:	3301      	adds	r3, #1
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	b2ca      	uxtb	r2, r1
 8003724:	701a      	strb	r2, [r3, #0]
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
	...

08003734 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800373a:	463b      	mov	r3, r7
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	611a      	str	r2, [r3, #16]
 8003748:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800374a:	4b29      	ldr	r3, [pc, #164]	; (80037f0 <MX_ADC1_Init+0xbc>)
 800374c:	4a29      	ldr	r2, [pc, #164]	; (80037f4 <MX_ADC1_Init+0xc0>)
 800374e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003750:	4b27      	ldr	r3, [pc, #156]	; (80037f0 <MX_ADC1_Init+0xbc>)
 8003752:	2200      	movs	r2, #0
 8003754:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003756:	4b26      	ldr	r3, [pc, #152]	; (80037f0 <MX_ADC1_Init+0xbc>)
 8003758:	2200      	movs	r2, #0
 800375a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800375c:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <MX_ADC1_Init+0xbc>)
 800375e:	2200      	movs	r2, #0
 8003760:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003762:	4b23      	ldr	r3, [pc, #140]	; (80037f0 <MX_ADC1_Init+0xbc>)
 8003764:	2200      	movs	r2, #0
 8003766:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003768:	4b21      	ldr	r3, [pc, #132]	; (80037f0 <MX_ADC1_Init+0xbc>)
 800376a:	2204      	movs	r2, #4
 800376c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800376e:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <MX_ADC1_Init+0xbc>)
 8003770:	2200      	movs	r2, #0
 8003772:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003774:	4b1e      	ldr	r3, [pc, #120]	; (80037f0 <MX_ADC1_Init+0xbc>)
 8003776:	2200      	movs	r2, #0
 8003778:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800377a:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <MX_ADC1_Init+0xbc>)
 800377c:	2201      	movs	r2, #1
 800377e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003780:	4b1b      	ldr	r3, [pc, #108]	; (80037f0 <MX_ADC1_Init+0xbc>)
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003788:	4b19      	ldr	r3, [pc, #100]	; (80037f0 <MX_ADC1_Init+0xbc>)
 800378a:	2200      	movs	r2, #0
 800378c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800378e:	4b18      	ldr	r3, [pc, #96]	; (80037f0 <MX_ADC1_Init+0xbc>)
 8003790:	2200      	movs	r2, #0
 8003792:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003794:	4b16      	ldr	r3, [pc, #88]	; (80037f0 <MX_ADC1_Init+0xbc>)
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800379c:	4b14      	ldr	r3, [pc, #80]	; (80037f0 <MX_ADC1_Init+0xbc>)
 800379e:	2200      	movs	r2, #0
 80037a0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80037a2:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <MX_ADC1_Init+0xbc>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80037aa:	4811      	ldr	r0, [pc, #68]	; (80037f0 <MX_ADC1_Init+0xbc>)
 80037ac:	f001 f814 	bl	80047d8 <HAL_ADC_Init>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80037b6:	f000 fb8b 	bl	8003ed0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80037ba:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <MX_ADC1_Init+0xc4>)
 80037bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80037be:	2306      	movs	r3, #6
 80037c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80037c6:	237f      	movs	r3, #127	; 0x7f
 80037c8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80037ca:	2304      	movs	r3, #4
 80037cc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037d2:	463b      	mov	r3, r7
 80037d4:	4619      	mov	r1, r3
 80037d6:	4806      	ldr	r0, [pc, #24]	; (80037f0 <MX_ADC1_Init+0xbc>)
 80037d8:	f001 f946 	bl	8004a68 <HAL_ADC_ConfigChannel>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80037e2:	f000 fb75 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80037e6:	bf00      	nop
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000224 	.word	0x20000224
 80037f4:	50040000 	.word	0x50040000
 80037f8:	2e300800 	.word	0x2e300800

080037fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b0a2      	sub	sp, #136	; 0x88
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003804:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003814:	f107 0314 	add.w	r3, r7, #20
 8003818:	2260      	movs	r2, #96	; 0x60
 800381a:	2100      	movs	r1, #0
 800381c:	4618      	mov	r0, r3
 800381e:	f00b fac1 	bl	800eda4 <memset>
  if(adcHandle->Instance==ADC1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a3b      	ldr	r2, [pc, #236]	; (8003914 <HAL_ADC_MspInit+0x118>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d16e      	bne.n	800390a <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800382c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003830:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003832:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003836:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003838:	2301      	movs	r3, #1
 800383a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800383c:	2301      	movs	r3, #1
 800383e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8003840:	2310      	movs	r3, #16
 8003842:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003844:	2307      	movs	r3, #7
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003848:	2302      	movs	r3, #2
 800384a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800384c:	2302      	movs	r3, #2
 800384e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003850:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003854:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003856:	f107 0314 	add.w	r3, r7, #20
 800385a:	4618      	mov	r0, r3
 800385c:	f005 f9d8 	bl	8008c10 <HAL_RCCEx_PeriphCLKConfig>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8003866:	f000 fb33 	bl	8003ed0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800386a:	4b2b      	ldr	r3, [pc, #172]	; (8003918 <HAL_ADC_MspInit+0x11c>)
 800386c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386e:	4a2a      	ldr	r2, [pc, #168]	; (8003918 <HAL_ADC_MspInit+0x11c>)
 8003870:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003876:	4b28      	ldr	r3, [pc, #160]	; (8003918 <HAL_ADC_MspInit+0x11c>)
 8003878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003882:	4b25      	ldr	r3, [pc, #148]	; (8003918 <HAL_ADC_MspInit+0x11c>)
 8003884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003886:	4a24      	ldr	r2, [pc, #144]	; (8003918 <HAL_ADC_MspInit+0x11c>)
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800388e:	4b22      	ldr	r3, [pc, #136]	; (8003918 <HAL_ADC_MspInit+0x11c>)
 8003890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800389a:	23c0      	movs	r3, #192	; 0xc0
 800389c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800389e:	230b      	movs	r3, #11
 80038a0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80038aa:	4619      	mov	r1, r3
 80038ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038b0:	f002 fbd2 	bl	8006058 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80038b4:	4b19      	ldr	r3, [pc, #100]	; (800391c <HAL_ADC_MspInit+0x120>)
 80038b6:	4a1a      	ldr	r2, [pc, #104]	; (8003920 <HAL_ADC_MspInit+0x124>)
 80038b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80038ba:	4b18      	ldr	r3, [pc, #96]	; (800391c <HAL_ADC_MspInit+0x120>)
 80038bc:	2200      	movs	r2, #0
 80038be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038c0:	4b16      	ldr	r3, [pc, #88]	; (800391c <HAL_ADC_MspInit+0x120>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80038c6:	4b15      	ldr	r3, [pc, #84]	; (800391c <HAL_ADC_MspInit+0x120>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80038cc:	4b13      	ldr	r3, [pc, #76]	; (800391c <HAL_ADC_MspInit+0x120>)
 80038ce:	2280      	movs	r2, #128	; 0x80
 80038d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80038d2:	4b12      	ldr	r3, [pc, #72]	; (800391c <HAL_ADC_MspInit+0x120>)
 80038d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80038da:	4b10      	ldr	r3, [pc, #64]	; (800391c <HAL_ADC_MspInit+0x120>)
 80038dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80038e2:	4b0e      	ldr	r3, [pc, #56]	; (800391c <HAL_ADC_MspInit+0x120>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80038e8:	4b0c      	ldr	r3, [pc, #48]	; (800391c <HAL_ADC_MspInit+0x120>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80038ee:	480b      	ldr	r0, [pc, #44]	; (800391c <HAL_ADC_MspInit+0x120>)
 80038f0:	f001 ffd2 	bl	8005898 <HAL_DMA_Init>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 80038fa:	f000 fae9 	bl	8003ed0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a06      	ldr	r2, [pc, #24]	; (800391c <HAL_ADC_MspInit+0x120>)
 8003902:	64da      	str	r2, [r3, #76]	; 0x4c
 8003904:	4a05      	ldr	r2, [pc, #20]	; (800391c <HAL_ADC_MspInit+0x120>)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800390a:	bf00      	nop
 800390c:	3788      	adds	r7, #136	; 0x88
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	50040000 	.word	0x50040000
 8003918:	40021000 	.word	0x40021000
 800391c:	20000288 	.word	0x20000288
 8003920:	40020008 	.word	0x40020008

08003924 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003928:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <MX_CRC_Init+0x3c>)
 800392a:	4a0e      	ldr	r2, [pc, #56]	; (8003964 <MX_CRC_Init+0x40>)
 800392c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800392e:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <MX_CRC_Init+0x3c>)
 8003930:	2200      	movs	r2, #0
 8003932:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003934:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <MX_CRC_Init+0x3c>)
 8003936:	2200      	movs	r2, #0
 8003938:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800393a:	4b09      	ldr	r3, [pc, #36]	; (8003960 <MX_CRC_Init+0x3c>)
 800393c:	2200      	movs	r2, #0
 800393e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003940:	4b07      	ldr	r3, [pc, #28]	; (8003960 <MX_CRC_Init+0x3c>)
 8003942:	2200      	movs	r2, #0
 8003944:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003946:	4b06      	ldr	r3, [pc, #24]	; (8003960 <MX_CRC_Init+0x3c>)
 8003948:	2201      	movs	r2, #1
 800394a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800394c:	4804      	ldr	r0, [pc, #16]	; (8003960 <MX_CRC_Init+0x3c>)
 800394e:	f001 fd7d 	bl	800544c <HAL_CRC_Init>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003958:	f000 faba 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800395c:	bf00      	nop
 800395e:	bd80      	pop	{r7, pc}
 8003960:	200002d0 	.word	0x200002d0
 8003964:	40023000 	.word	0x40023000

08003968 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a0a      	ldr	r2, [pc, #40]	; (80039a0 <HAL_CRC_MspInit+0x38>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d10b      	bne.n	8003992 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800397a:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <HAL_CRC_MspInit+0x3c>)
 800397c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397e:	4a09      	ldr	r2, [pc, #36]	; (80039a4 <HAL_CRC_MspInit+0x3c>)
 8003980:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003984:	6493      	str	r3, [r2, #72]	; 0x48
 8003986:	4b07      	ldr	r3, [pc, #28]	; (80039a4 <HAL_CRC_MspInit+0x3c>)
 8003988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003992:	bf00      	nop
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40023000 	.word	0x40023000
 80039a4:	40021000 	.word	0x40021000

080039a8 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08a      	sub	sp, #40	; 0x28
 80039ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80039ae:	1d3b      	adds	r3, r7, #4
 80039b0:	2224      	movs	r2, #36	; 0x24
 80039b2:	2100      	movs	r1, #0
 80039b4:	4618      	mov	r0, r3
 80039b6:	f00b f9f5 	bl	800eda4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80039ba:	4b17      	ldr	r3, [pc, #92]	; (8003a18 <MX_DAC1_Init+0x70>)
 80039bc:	4a17      	ldr	r2, [pc, #92]	; (8003a1c <MX_DAC1_Init+0x74>)
 80039be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80039c0:	4815      	ldr	r0, [pc, #84]	; (8003a18 <MX_DAC1_Init+0x70>)
 80039c2:	f001 fe2d 	bl	8005620 <HAL_DAC_Init>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80039cc:	f000 fa80 	bl	8003ed0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80039d0:	2300      	movs	r3, #0
 80039d2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80039d4:	2300      	movs	r3, #0
 80039d6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80039d8:	2300      	movs	r3, #0
 80039da:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80039dc:	2300      	movs	r3, #0
 80039de:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80039e4:	1d3b      	adds	r3, r7, #4
 80039e6:	2200      	movs	r2, #0
 80039e8:	4619      	mov	r1, r3
 80039ea:	480b      	ldr	r0, [pc, #44]	; (8003a18 <MX_DAC1_Init+0x70>)
 80039ec:	f001 fe3a 	bl	8005664 <HAL_DAC_ConfigChannel>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80039f6:	f000 fa6b 	bl	8003ed0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80039fa:	1d3b      	adds	r3, r7, #4
 80039fc:	2210      	movs	r2, #16
 80039fe:	4619      	mov	r1, r3
 8003a00:	4805      	ldr	r0, [pc, #20]	; (8003a18 <MX_DAC1_Init+0x70>)
 8003a02:	f001 fe2f 	bl	8005664 <HAL_DAC_ConfigChannel>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8003a0c:	f000 fa60 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003a10:	bf00      	nop
 8003a12:	3728      	adds	r7, #40	; 0x28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	200002f4 	.word	0x200002f4
 8003a1c:	40007400 	.word	0x40007400

08003a20 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08a      	sub	sp, #40	; 0x28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a28:	f107 0314 	add.w	r3, r7, #20
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	605a      	str	r2, [r3, #4]
 8003a32:	609a      	str	r2, [r3, #8]
 8003a34:	60da      	str	r2, [r3, #12]
 8003a36:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a40      	ldr	r2, [pc, #256]	; (8003b40 <HAL_DAC_MspInit+0x120>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d17a      	bne.n	8003b38 <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003a42:	4b40      	ldr	r3, [pc, #256]	; (8003b44 <HAL_DAC_MspInit+0x124>)
 8003a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a46:	4a3f      	ldr	r2, [pc, #252]	; (8003b44 <HAL_DAC_MspInit+0x124>)
 8003a48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a4e:	4b3d      	ldr	r3, [pc, #244]	; (8003b44 <HAL_DAC_MspInit+0x124>)
 8003a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a5a:	4b3a      	ldr	r3, [pc, #232]	; (8003b44 <HAL_DAC_MspInit+0x124>)
 8003a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5e:	4a39      	ldr	r2, [pc, #228]	; (8003b44 <HAL_DAC_MspInit+0x124>)
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a66:	4b37      	ldr	r3, [pc, #220]	; (8003b44 <HAL_DAC_MspInit+0x124>)
 8003a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003a72:	2330      	movs	r3, #48	; 0x30
 8003a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a76:	2303      	movs	r3, #3
 8003a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a7e:	f107 0314 	add.w	r3, r7, #20
 8003a82:	4619      	mov	r1, r3
 8003a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a88:	f002 fae6 	bl	8006058 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8003a8c:	4b2e      	ldr	r3, [pc, #184]	; (8003b48 <HAL_DAC_MspInit+0x128>)
 8003a8e:	4a2f      	ldr	r2, [pc, #188]	; (8003b4c <HAL_DAC_MspInit+0x12c>)
 8003a90:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8003a92:	4b2d      	ldr	r3, [pc, #180]	; (8003b48 <HAL_DAC_MspInit+0x128>)
 8003a94:	2206      	movs	r2, #6
 8003a96:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a98:	4b2b      	ldr	r3, [pc, #172]	; (8003b48 <HAL_DAC_MspInit+0x128>)
 8003a9a:	2210      	movs	r2, #16
 8003a9c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a9e:	4b2a      	ldr	r3, [pc, #168]	; (8003b48 <HAL_DAC_MspInit+0x128>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003aa4:	4b28      	ldr	r3, [pc, #160]	; (8003b48 <HAL_DAC_MspInit+0x128>)
 8003aa6:	2280      	movs	r2, #128	; 0x80
 8003aa8:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003aaa:	4b27      	ldr	r3, [pc, #156]	; (8003b48 <HAL_DAC_MspInit+0x128>)
 8003aac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ab0:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ab2:	4b25      	ldr	r3, [pc, #148]	; (8003b48 <HAL_DAC_MspInit+0x128>)
 8003ab4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ab8:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 8003aba:	4b23      	ldr	r3, [pc, #140]	; (8003b48 <HAL_DAC_MspInit+0x128>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003ac0:	4b21      	ldr	r3, [pc, #132]	; (8003b48 <HAL_DAC_MspInit+0x128>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8003ac6:	4820      	ldr	r0, [pc, #128]	; (8003b48 <HAL_DAC_MspInit+0x128>)
 8003ac8:	f001 fee6 	bl	8005898 <HAL_DMA_Init>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8003ad2:	f000 f9fd 	bl	8003ed0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a1b      	ldr	r2, [pc, #108]	; (8003b48 <HAL_DAC_MspInit+0x128>)
 8003ada:	609a      	str	r2, [r3, #8]
 8003adc:	4a1a      	ldr	r2, [pc, #104]	; (8003b48 <HAL_DAC_MspInit+0x128>)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8003ae2:	4b1b      	ldr	r3, [pc, #108]	; (8003b50 <HAL_DAC_MspInit+0x130>)
 8003ae4:	4a1b      	ldr	r2, [pc, #108]	; (8003b54 <HAL_DAC_MspInit+0x134>)
 8003ae6:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8003ae8:	4b19      	ldr	r3, [pc, #100]	; (8003b50 <HAL_DAC_MspInit+0x130>)
 8003aea:	2205      	movs	r2, #5
 8003aec:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003aee:	4b18      	ldr	r3, [pc, #96]	; (8003b50 <HAL_DAC_MspInit+0x130>)
 8003af0:	2210      	movs	r2, #16
 8003af2:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003af4:	4b16      	ldr	r3, [pc, #88]	; (8003b50 <HAL_DAC_MspInit+0x130>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003afa:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <HAL_DAC_MspInit+0x130>)
 8003afc:	2280      	movs	r2, #128	; 0x80
 8003afe:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b00:	4b13      	ldr	r3, [pc, #76]	; (8003b50 <HAL_DAC_MspInit+0x130>)
 8003b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b06:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b08:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <HAL_DAC_MspInit+0x130>)
 8003b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b0e:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_NORMAL;
 8003b10:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <HAL_DAC_MspInit+0x130>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003b16:	4b0e      	ldr	r3, [pc, #56]	; (8003b50 <HAL_DAC_MspInit+0x130>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8003b1c:	480c      	ldr	r0, [pc, #48]	; (8003b50 <HAL_DAC_MspInit+0x130>)
 8003b1e:	f001 febb 	bl	8005898 <HAL_DMA_Init>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8003b28:	f000 f9d2 	bl	8003ed0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a08      	ldr	r2, [pc, #32]	; (8003b50 <HAL_DAC_MspInit+0x130>)
 8003b30:	60da      	str	r2, [r3, #12]
 8003b32:	4a07      	ldr	r2, [pc, #28]	; (8003b50 <HAL_DAC_MspInit+0x130>)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8003b38:	bf00      	nop
 8003b3a:	3728      	adds	r7, #40	; 0x28
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40007400 	.word	0x40007400
 8003b44:	40021000 	.word	0x40021000
 8003b48:	20000308 	.word	0x20000308
 8003b4c:	40020030 	.word	0x40020030
 8003b50:	20000350 	.word	0x20000350
 8003b54:	40020044 	.word	0x40020044

08003b58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b5e:	4b14      	ldr	r3, [pc, #80]	; (8003bb0 <MX_DMA_Init+0x58>)
 8003b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b62:	4a13      	ldr	r2, [pc, #76]	; (8003bb0 <MX_DMA_Init+0x58>)
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	6493      	str	r3, [r2, #72]	; 0x48
 8003b6a:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <MX_DMA_Init+0x58>)
 8003b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	607b      	str	r3, [r7, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003b76:	2200      	movs	r2, #0
 8003b78:	2100      	movs	r1, #0
 8003b7a:	200b      	movs	r0, #11
 8003b7c:	f001 fc2f 	bl	80053de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003b80:	200b      	movs	r0, #11
 8003b82:	f001 fc48 	bl	8005416 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003b86:	2200      	movs	r2, #0
 8003b88:	2100      	movs	r1, #0
 8003b8a:	200d      	movs	r0, #13
 8003b8c:	f001 fc27 	bl	80053de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003b90:	200d      	movs	r0, #13
 8003b92:	f001 fc40 	bl	8005416 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003b96:	2200      	movs	r2, #0
 8003b98:	2100      	movs	r1, #0
 8003b9a:	200e      	movs	r0, #14
 8003b9c:	f001 fc1f 	bl	80053de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003ba0:	200e      	movs	r0, #14
 8003ba2:	f001 fc38 	bl	8005416 <HAL_NVIC_EnableIRQ>

}
 8003ba6:	bf00      	nop
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40021000 	.word	0x40021000

08003bb4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08a      	sub	sp, #40	; 0x28
 8003bb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bba:	f107 0314 	add.w	r3, r7, #20
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	605a      	str	r2, [r3, #4]
 8003bc4:	609a      	str	r2, [r3, #8]
 8003bc6:	60da      	str	r2, [r3, #12]
 8003bc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bca:	4b67      	ldr	r3, [pc, #412]	; (8003d68 <MX_GPIO_Init+0x1b4>)
 8003bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bce:	4a66      	ldr	r2, [pc, #408]	; (8003d68 <MX_GPIO_Init+0x1b4>)
 8003bd0:	f043 0304 	orr.w	r3, r3, #4
 8003bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bd6:	4b64      	ldr	r3, [pc, #400]	; (8003d68 <MX_GPIO_Init+0x1b4>)
 8003bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003be2:	4b61      	ldr	r3, [pc, #388]	; (8003d68 <MX_GPIO_Init+0x1b4>)
 8003be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be6:	4a60      	ldr	r2, [pc, #384]	; (8003d68 <MX_GPIO_Init+0x1b4>)
 8003be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bee:	4b5e      	ldr	r3, [pc, #376]	; (8003d68 <MX_GPIO_Init+0x1b4>)
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bfa:	4b5b      	ldr	r3, [pc, #364]	; (8003d68 <MX_GPIO_Init+0x1b4>)
 8003bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfe:	4a5a      	ldr	r2, [pc, #360]	; (8003d68 <MX_GPIO_Init+0x1b4>)
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c06:	4b58      	ldr	r3, [pc, #352]	; (8003d68 <MX_GPIO_Init+0x1b4>)
 8003c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c12:	4b55      	ldr	r3, [pc, #340]	; (8003d68 <MX_GPIO_Init+0x1b4>)
 8003c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c16:	4a54      	ldr	r2, [pc, #336]	; (8003d68 <MX_GPIO_Init+0x1b4>)
 8003c18:	f043 0302 	orr.w	r3, r3, #2
 8003c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c1e:	4b52      	ldr	r3, [pc, #328]	; (8003d68 <MX_GPIO_Init+0x1b4>)
 8003c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	607b      	str	r3, [r7, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DI_OUT_8_P_Pin|DI_OUT_8_N_Pin|DI_OUT_6_N_Pin|DI_OUT_5_P_Pin
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f24c 31d0 	movw	r1, #50128	; 0xc3d0
 8003c30:	484e      	ldr	r0, [pc, #312]	; (8003d6c <MX_GPIO_Init+0x1b8>)
 8003c32:	f002 fba3 	bl	800637c <HAL_GPIO_WritePin>
                          |DI_OUT_3_N_Pin|DI_OUT_3_P_Pin|DI_OUT_1_N_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DI_OUT_4_P_Pin|DI_OUT_6_P_Pin|DI_OUT_2_N_Pin|DI_OUT_4_N_Pin
 8003c36:	2200      	movs	r2, #0
 8003c38:	f64e 41ff 	movw	r1, #60671	; 0xecff
 8003c3c:	484c      	ldr	r0, [pc, #304]	; (8003d70 <MX_GPIO_Init+0x1bc>)
 8003c3e:	f002 fb9d 	bl	800637c <HAL_GPIO_WritePin>
                          |DI_OUT_2_P_Pin|DI_OUT_7_N_Pin|DI_OUT_7_P_Pin|DI_OUT_5_N_Pin
                          |RFM_NSS_Pin|RFM_RST_Pin|RFM_DI_3_Pin|RFM_DI_0_Pin
                          |RFM_DI_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DI_OUT_1_P_Pin|LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8003c42:	2200      	movs	r2, #0
 8003c44:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003c48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c4c:	f002 fb96 	bl	800637c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c56:	2303      	movs	r3, #3
 8003c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c5e:	f107 0314 	add.w	r3, r7, #20
 8003c62:	4619      	mov	r1, r3
 8003c64:	4841      	ldr	r0, [pc, #260]	; (8003d6c <MX_GPIO_Init+0x1b8>)
 8003c66:	f002 f9f7 	bl	8006058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DI_OUT_8_P_Pin|DI_OUT_8_N_Pin|DI_OUT_6_N_Pin|DI_OUT_5_P_Pin
 8003c6a:	f24c 33d0 	movw	r3, #50128	; 0xc3d0
 8003c6e:	617b      	str	r3, [r7, #20]
                          |DI_OUT_3_N_Pin|DI_OUT_3_P_Pin|DI_OUT_1_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c70:	2301      	movs	r3, #1
 8003c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c7c:	f107 0314 	add.w	r3, r7, #20
 8003c80:	4619      	mov	r1, r3
 8003c82:	483a      	ldr	r0, [pc, #232]	; (8003d6c <MX_GPIO_Init+0x1b8>)
 8003c84:	f002 f9e8 	bl	8006058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8003c88:	2309      	movs	r3, #9
 8003c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003c94:	f107 0314 	add.w	r3, r7, #20
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4836      	ldr	r0, [pc, #216]	; (8003d74 <MX_GPIO_Init+0x1c0>)
 8003c9c:	f002 f9dc 	bl	8006058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DI_1_Pin;
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DI_1_GPIO_Port, &GPIO_InitStruct);
 8003cac:	f107 0314 	add.w	r3, r7, #20
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4830      	ldr	r0, [pc, #192]	; (8003d74 <MX_GPIO_Init+0x1c0>)
 8003cb4:	f002 f9d0 	bl	8006058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DI_2_Pin|DI_3_Pin|DI_4_Pin|DI_5_Pin;
 8003cb8:	230f      	movs	r3, #15
 8003cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cc4:	f107 0314 	add.w	r3, r7, #20
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4828      	ldr	r0, [pc, #160]	; (8003d6c <MX_GPIO_Init+0x1b8>)
 8003ccc:	f002 f9c4 	bl	8006058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DI_6_Pin|DI_7_Pin|DI_8_Pin;
 8003cd0:	2307      	movs	r3, #7
 8003cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cdc:	f107 0314 	add.w	r3, r7, #20
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ce6:	f002 f9b7 	bl	8006058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_15;
 8003cea:	f248 0308 	movw	r3, #32776	; 0x8008
 8003cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cf8:	f107 0314 	add.w	r3, r7, #20
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d02:	f002 f9a9 	bl	8006058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DI_OUT_4_P_Pin|DI_OUT_6_P_Pin|DI_OUT_2_N_Pin|DI_OUT_4_N_Pin
 8003d06:	f64e 43ff 	movw	r3, #60671	; 0xecff
 8003d0a:	617b      	str	r3, [r7, #20]
                          |DI_OUT_2_P_Pin|DI_OUT_7_N_Pin|DI_OUT_7_P_Pin|DI_OUT_5_N_Pin
                          |RFM_NSS_Pin|RFM_RST_Pin|RFM_DI_3_Pin|RFM_DI_0_Pin
                          |RFM_DI_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d14:	2300      	movs	r3, #0
 8003d16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d18:	f107 0314 	add.w	r3, r7, #20
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4814      	ldr	r0, [pc, #80]	; (8003d70 <MX_GPIO_Init+0x1bc>)
 8003d20:	f002 f99a 	bl	8006058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 8003d24:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8003d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d32:	f107 0314 	add.w	r3, r7, #20
 8003d36:	4619      	mov	r1, r3
 8003d38:	480d      	ldr	r0, [pc, #52]	; (8003d70 <MX_GPIO_Init+0x1bc>)
 8003d3a:	f002 f98d 	bl	8006058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DI_OUT_1_P_Pin|LED_R_Pin|LED_G_Pin;
 8003d3e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d44:	2301      	movs	r3, #1
 8003d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d50:	f107 0314 	add.w	r3, r7, #20
 8003d54:	4619      	mov	r1, r3
 8003d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d5a:	f002 f97d 	bl	8006058 <HAL_GPIO_Init>

}
 8003d5e:	bf00      	nop
 8003d60:	3728      	adds	r7, #40	; 0x28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	48000800 	.word	0x48000800
 8003d70:	48000400 	.word	0x48000400
 8003d74:	48001c00 	.word	0x48001c00

08003d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d7c:	f000 fb07 	bl	800438e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d80:	f000 f818 	bl	8003db4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d84:	f7ff ff16 	bl	8003bb4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003d88:	f7ff fee6 	bl	8003b58 <MX_DMA_Init>
  MX_ADC1_Init();
 8003d8c:	f7ff fcd2 	bl	8003734 <MX_ADC1_Init>
  MX_DAC1_Init();
 8003d90:	f7ff fe0a 	bl	80039a8 <MX_DAC1_Init>
  MX_SPI3_Init();
 8003d94:	f000 f8c0 	bl	8003f18 <MX_SPI3_Init>
  MX_CRC_Init();
 8003d98:	f7ff fdc4 	bl	8003924 <MX_CRC_Init>
  MX_TIM6_Init();
 8003d9c:	f000 fa28 	bl	80041f0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8003da0:	f000 fa5c 	bl	800425c <MX_TIM7_Init>
  MX_USB_DEVICE_Init();
 8003da4:	f00a fa28 	bl	800e1f8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  appMain.Startup();
 8003da8:	4801      	ldr	r0, [pc, #4]	; (8003db0 <main+0x38>)
 8003daa:	f7fc fd6f 	bl	800088c <_ZN7AppMain7StartupEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003dae:	e7fe      	b.n	8003dae <main+0x36>
 8003db0:	20000398 	.word	0x20000398

08003db4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b096      	sub	sp, #88	; 0x58
 8003db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dba:	f107 0314 	add.w	r3, r7, #20
 8003dbe:	2244      	movs	r2, #68	; 0x44
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f00a ffee 	bl	800eda4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003dc8:	463b      	mov	r3, r7
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	605a      	str	r2, [r3, #4]
 8003dd0:	609a      	str	r2, [r3, #8]
 8003dd2:	60da      	str	r2, [r3, #12]
 8003dd4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003dd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003dda:	f004 f8a7 	bl	8007f2c <HAL_PWREx_ControlVoltageScaling>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	bf14      	ite	ne
 8003de4:	2301      	movne	r3, #1
 8003de6:	2300      	moveq	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8003dee:	f000 f86f 	bl	8003ed0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8003df2:	2330      	movs	r3, #48	; 0x30
 8003df4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003df6:	2301      	movs	r3, #1
 8003df8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003e02:	2360      	movs	r3, #96	; 0x60
 8003e04:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e06:	2302      	movs	r3, #2
 8003e08:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8003e12:	2324      	movs	r3, #36	; 0x24
 8003e14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003e16:	2307      	movs	r3, #7
 8003e18:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e22:	f107 0314 	add.w	r3, r7, #20
 8003e26:	4618      	mov	r0, r3
 8003e28:	f004 f8e6 	bl	8007ff8 <HAL_RCC_OscConfig>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	bf14      	ite	ne
 8003e32:	2301      	movne	r3, #1
 8003e34:	2300      	moveq	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8003e3c:	f000 f848 	bl	8003ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e40:	230f      	movs	r3, #15
 8003e42:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e44:	2303      	movs	r3, #3
 8003e46:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e50:	2300      	movs	r3, #0
 8003e52:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003e54:	463b      	mov	r3, r7
 8003e56:	2104      	movs	r1, #4
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f004 fce1 	bl	8008820 <HAL_RCC_ClockConfig>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	bf14      	ite	ne
 8003e64:	2301      	movne	r3, #1
 8003e66:	2300      	moveq	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 8003e6e:	f000 f82f 	bl	8003ed0 <Error_Handler>
  }
}
 8003e72:	bf00      	nop
 8003e74:	3758      	adds	r7, #88	; 0x58
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <HAL_TIM_PeriodElapsedCallback>:


/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a04      	ldr	r2, [pc, #16]	; (8003e9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d102      	bne.n	8003e94 <HAL_TIM_PeriodElapsedCallback+0x18>
		appMain.taskStatus.UpdateTasks();
 8003e8e:	4804      	ldr	r0, [pc, #16]	; (8003ea0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003e90:	f7ff faec 	bl	800346c <_ZN11TaskHandler11UpdateTasksEv>
	}
}
 8003e94:	bf00      	nop
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40001400 	.word	0x40001400
 8003ea0:	200003b8 	.word	0x200003b8

08003ea4 <USB_CDC_RX_Interrupt>:


void USB_CDC_RX_Interrupt(uint8_t *data, uint32_t length)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
	appMain.usbCOM->Receive(data, length);
 8003eae:	4b07      	ldr	r3, [pc, #28]	; (8003ecc <USB_CDC_RX_Interrupt+0x28>)
 8003eb0:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8003eb2:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <USB_CDC_RX_Interrupt+0x28>)
 8003eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	4798      	blx	r3
}
 8003ec4:	bf00      	nop
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	20000398 	.word	0x20000398

08003ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ed4:	b672      	cpsid	i
}
 8003ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ed8:	e7fe      	b.n	8003ed8 <Error_Handler+0x8>
	...

08003edc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d107      	bne.n	8003efc <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d102      	bne.n	8003efc <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 8003ef6:	4803      	ldr	r0, [pc, #12]	; (8003f04 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003ef8:	f7fc fc3f 	bl	800077a <_ZN7AppMainC1Ev>
}
 8003efc:	bf00      	nop
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20000398 	.word	0x20000398

08003f08 <_GLOBAL__sub_I_appMain>:
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f10:	2001      	movs	r0, #1
 8003f12:	f7ff ffe3 	bl	8003edc <_Z41__static_initialization_and_destruction_0ii>
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003f1c:	4b1b      	ldr	r3, [pc, #108]	; (8003f8c <MX_SPI3_Init+0x74>)
 8003f1e:	4a1c      	ldr	r2, [pc, #112]	; (8003f90 <MX_SPI3_Init+0x78>)
 8003f20:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003f22:	4b1a      	ldr	r3, [pc, #104]	; (8003f8c <MX_SPI3_Init+0x74>)
 8003f24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f28:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003f2a:	4b18      	ldr	r3, [pc, #96]	; (8003f8c <MX_SPI3_Init+0x74>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f30:	4b16      	ldr	r3, [pc, #88]	; (8003f8c <MX_SPI3_Init+0x74>)
 8003f32:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003f36:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f38:	4b14      	ldr	r3, [pc, #80]	; (8003f8c <MX_SPI3_Init+0x74>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f3e:	4b13      	ldr	r3, [pc, #76]	; (8003f8c <MX_SPI3_Init+0x74>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003f44:	4b11      	ldr	r3, [pc, #68]	; (8003f8c <MX_SPI3_Init+0x74>)
 8003f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f4a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003f4c:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <MX_SPI3_Init+0x74>)
 8003f4e:	2218      	movs	r2, #24
 8003f50:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f52:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <MX_SPI3_Init+0x74>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f58:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <MX_SPI3_Init+0x74>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f5e:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <MX_SPI3_Init+0x74>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003f64:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <MX_SPI3_Init+0x74>)
 8003f66:	2207      	movs	r2, #7
 8003f68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003f6a:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <MX_SPI3_Init+0x74>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003f70:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <MX_SPI3_Init+0x74>)
 8003f72:	2208      	movs	r2, #8
 8003f74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003f76:	4805      	ldr	r0, [pc, #20]	; (8003f8c <MX_SPI3_Init+0x74>)
 8003f78:	f005 f986 	bl	8009288 <HAL_SPI_Init>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8003f82:	f7ff ffa5 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003f86:	bf00      	nop
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	200004c0 	.word	0x200004c0
 8003f90:	40003c00 	.word	0x40003c00

08003f94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08a      	sub	sp, #40	; 0x28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f9c:	f107 0314 	add.w	r3, r7, #20
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	605a      	str	r2, [r3, #4]
 8003fa6:	609a      	str	r2, [r3, #8]
 8003fa8:	60da      	str	r2, [r3, #12]
 8003faa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a17      	ldr	r2, [pc, #92]	; (8004010 <HAL_SPI_MspInit+0x7c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d128      	bne.n	8004008 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003fb6:	4b17      	ldr	r3, [pc, #92]	; (8004014 <HAL_SPI_MspInit+0x80>)
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fba:	4a16      	ldr	r2, [pc, #88]	; (8004014 <HAL_SPI_MspInit+0x80>)
 8003fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fc0:	6593      	str	r3, [r2, #88]	; 0x58
 8003fc2:	4b14      	ldr	r3, [pc, #80]	; (8004014 <HAL_SPI_MspInit+0x80>)
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fce:	4b11      	ldr	r3, [pc, #68]	; (8004014 <HAL_SPI_MspInit+0x80>)
 8003fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd2:	4a10      	ldr	r2, [pc, #64]	; (8004014 <HAL_SPI_MspInit+0x80>)
 8003fd4:	f043 0304 	orr.w	r3, r3, #4
 8003fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fda:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <HAL_SPI_MspInit+0x80>)
 8003fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003fe6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fec:	2302      	movs	r3, #2
 8003fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003ff8:	2306      	movs	r3, #6
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ffc:	f107 0314 	add.w	r3, r7, #20
 8004000:	4619      	mov	r1, r3
 8004002:	4805      	ldr	r0, [pc, #20]	; (8004018 <HAL_SPI_MspInit+0x84>)
 8004004:	f002 f828 	bl	8006058 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004008:	bf00      	nop
 800400a:	3728      	adds	r7, #40	; 0x28
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40003c00 	.word	0x40003c00
 8004014:	40021000 	.word	0x40021000
 8004018:	48000800 	.word	0x48000800

0800401c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004022:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <HAL_MspInit+0x44>)
 8004024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004026:	4a0e      	ldr	r2, [pc, #56]	; (8004060 <HAL_MspInit+0x44>)
 8004028:	f043 0301 	orr.w	r3, r3, #1
 800402c:	6613      	str	r3, [r2, #96]	; 0x60
 800402e:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <HAL_MspInit+0x44>)
 8004030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	607b      	str	r3, [r7, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800403a:	4b09      	ldr	r3, [pc, #36]	; (8004060 <HAL_MspInit+0x44>)
 800403c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403e:	4a08      	ldr	r2, [pc, #32]	; (8004060 <HAL_MspInit+0x44>)
 8004040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004044:	6593      	str	r3, [r2, #88]	; 0x58
 8004046:	4b06      	ldr	r3, [pc, #24]	; (8004060 <HAL_MspInit+0x44>)
 8004048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404e:	603b      	str	r3, [r7, #0]
 8004050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40021000 	.word	0x40021000

08004064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004068:	e7fe      	b.n	8004068 <NMI_Handler+0x4>

0800406a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800406a:	b480      	push	{r7}
 800406c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800406e:	e7fe      	b.n	800406e <HardFault_Handler+0x4>

08004070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004074:	e7fe      	b.n	8004074 <MemManage_Handler+0x4>

08004076 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004076:	b480      	push	{r7}
 8004078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800407a:	e7fe      	b.n	800407a <BusFault_Handler+0x4>

0800407c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004080:	e7fe      	b.n	8004080 <UsageFault_Handler+0x4>

08004082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004082:	b480      	push	{r7}
 8004084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004086:	bf00      	nop
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004094:	bf00      	nop
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800409e:	b480      	push	{r7}
 80040a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040a2:	bf00      	nop
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040b0:	f000 f9c2 	bl	8004438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040b4:	bf00      	nop
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80040bc:	4802      	ldr	r0, [pc, #8]	; (80040c8 <DMA1_Channel1_IRQHandler+0x10>)
 80040be:	f001 fca3 	bl	8005a08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80040c2:	bf00      	nop
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	20000288 	.word	0x20000288

080040cc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80040d0:	4802      	ldr	r0, [pc, #8]	; (80040dc <DMA1_Channel3_IRQHandler+0x10>)
 80040d2:	f001 fc99 	bl	8005a08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80040d6:	bf00      	nop
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000308 	.word	0x20000308

080040e0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 80040e4:	4802      	ldr	r0, [pc, #8]	; (80040f0 <DMA1_Channel4_IRQHandler+0x10>)
 80040e6:	f001 fc8f 	bl	8005a08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80040ea:	bf00      	nop
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000350 	.word	0x20000350

080040f4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80040f8:	4802      	ldr	r0, [pc, #8]	; (8004104 <TIM7_IRQHandler+0x10>)
 80040fa:	f005 fef9 	bl	8009ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80040fe:	bf00      	nop
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000574 	.word	0x20000574

08004108 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800410c:	4802      	ldr	r0, [pc, #8]	; (8004118 <USB_IRQHandler+0x10>)
 800410e:	f002 faa0 	bl	8006652 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8004112:	bf00      	nop
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20000c90 	.word	0x20000c90

0800411c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
	return 1;
 8004120:	2301      	movs	r3, #1
}
 8004122:	4618      	mov	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <_kill>:

int _kill(int pid, int sig)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004136:	f00a fe03 	bl	800ed40 <__errno>
 800413a:	4603      	mov	r3, r0
 800413c:	2216      	movs	r2, #22
 800413e:	601a      	str	r2, [r3, #0]
	return -1;
 8004140:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004144:	4618      	mov	r0, r3
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <_exit>:

void _exit (int status)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004154:	f04f 31ff 	mov.w	r1, #4294967295
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff ffe7 	bl	800412c <_kill>
	while (1) {}		/* Make sure we hang here */
 800415e:	e7fe      	b.n	800415e <_exit+0x12>

08004160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004168:	4a14      	ldr	r2, [pc, #80]	; (80041bc <_sbrk+0x5c>)
 800416a:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <_sbrk+0x60>)
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004174:	4b13      	ldr	r3, [pc, #76]	; (80041c4 <_sbrk+0x64>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d102      	bne.n	8004182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800417c:	4b11      	ldr	r3, [pc, #68]	; (80041c4 <_sbrk+0x64>)
 800417e:	4a12      	ldr	r2, [pc, #72]	; (80041c8 <_sbrk+0x68>)
 8004180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004182:	4b10      	ldr	r3, [pc, #64]	; (80041c4 <_sbrk+0x64>)
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4413      	add	r3, r2
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	429a      	cmp	r2, r3
 800418e:	d207      	bcs.n	80041a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004190:	f00a fdd6 	bl	800ed40 <__errno>
 8004194:	4603      	mov	r3, r0
 8004196:	220c      	movs	r2, #12
 8004198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800419a:	f04f 33ff 	mov.w	r3, #4294967295
 800419e:	e009      	b.n	80041b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041a0:	4b08      	ldr	r3, [pc, #32]	; (80041c4 <_sbrk+0x64>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041a6:	4b07      	ldr	r3, [pc, #28]	; (80041c4 <_sbrk+0x64>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	4a05      	ldr	r2, [pc, #20]	; (80041c4 <_sbrk+0x64>)
 80041b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041b2:	68fb      	ldr	r3, [r7, #12]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20010000 	.word	0x20010000
 80041c0:	00000400 	.word	0x00000400
 80041c4:	20000524 	.word	0x20000524
 80041c8:	200011c0 	.word	0x200011c0

080041cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80041d0:	4b06      	ldr	r3, [pc, #24]	; (80041ec <SystemInit+0x20>)
 80041d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d6:	4a05      	ldr	r2, [pc, #20]	; (80041ec <SystemInit+0x20>)
 80041d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80041e0:	bf00      	nop
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	e000ed00 	.word	0xe000ed00

080041f0 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041f6:	1d3b      	adds	r3, r7, #4
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	605a      	str	r2, [r3, #4]
 80041fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004200:	4b14      	ldr	r3, [pc, #80]	; (8004254 <MX_TIM6_Init+0x64>)
 8004202:	4a15      	ldr	r2, [pc, #84]	; (8004258 <MX_TIM6_Init+0x68>)
 8004204:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 8004206:	4b13      	ldr	r3, [pc, #76]	; (8004254 <MX_TIM6_Init+0x64>)
 8004208:	220a      	movs	r2, #10
 800420a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800420c:	4b11      	ldr	r3, [pc, #68]	; (8004254 <MX_TIM6_Init+0x64>)
 800420e:	2200      	movs	r2, #0
 8004210:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16000;
 8004212:	4b10      	ldr	r3, [pc, #64]	; (8004254 <MX_TIM6_Init+0x64>)
 8004214:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8004218:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800421a:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <MX_TIM6_Init+0x64>)
 800421c:	2200      	movs	r2, #0
 800421e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004220:	480c      	ldr	r0, [pc, #48]	; (8004254 <MX_TIM6_Init+0x64>)
 8004222:	f005 fdb9 	bl	8009d98 <HAL_TIM_Base_Init>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800422c:	f7ff fe50 	bl	8003ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004230:	2300      	movs	r3, #0
 8004232:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004238:	1d3b      	adds	r3, r7, #4
 800423a:	4619      	mov	r1, r3
 800423c:	4805      	ldr	r0, [pc, #20]	; (8004254 <MX_TIM6_Init+0x64>)
 800423e:	f006 f803 	bl	800a248 <HAL_TIMEx_MasterConfigSynchronization>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004248:	f7ff fe42 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800424c:	bf00      	nop
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	20000528 	.word	0x20000528
 8004258:	40001000 	.word	0x40001000

0800425c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004262:	1d3b      	adds	r3, r7, #4
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	605a      	str	r2, [r3, #4]
 800426a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800426c:	4b14      	ldr	r3, [pc, #80]	; (80042c0 <MX_TIM7_Init+0x64>)
 800426e:	4a15      	ldr	r2, [pc, #84]	; (80042c4 <MX_TIM7_Init+0x68>)
 8004270:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10;
 8004272:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <MX_TIM7_Init+0x64>)
 8004274:	220a      	movs	r2, #10
 8004276:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004278:	4b11      	ldr	r3, [pc, #68]	; (80042c0 <MX_TIM7_Init+0x64>)
 800427a:	2200      	movs	r2, #0
 800427c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7199;
 800427e:	4b10      	ldr	r3, [pc, #64]	; (80042c0 <MX_TIM7_Init+0x64>)
 8004280:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8004284:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004286:	4b0e      	ldr	r3, [pc, #56]	; (80042c0 <MX_TIM7_Init+0x64>)
 8004288:	2200      	movs	r2, #0
 800428a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800428c:	480c      	ldr	r0, [pc, #48]	; (80042c0 <MX_TIM7_Init+0x64>)
 800428e:	f005 fd83 	bl	8009d98 <HAL_TIM_Base_Init>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004298:	f7ff fe1a 	bl	8003ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800429c:	2320      	movs	r3, #32
 800429e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042a0:	2300      	movs	r3, #0
 80042a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80042a4:	1d3b      	adds	r3, r7, #4
 80042a6:	4619      	mov	r1, r3
 80042a8:	4805      	ldr	r0, [pc, #20]	; (80042c0 <MX_TIM7_Init+0x64>)
 80042aa:	f005 ffcd 	bl	800a248 <HAL_TIMEx_MasterConfigSynchronization>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80042b4:	f7ff fe0c 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80042b8:	bf00      	nop
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000574 	.word	0x20000574
 80042c4:	40001400 	.word	0x40001400

080042c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a16      	ldr	r2, [pc, #88]	; (8004330 <HAL_TIM_Base_MspInit+0x68>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d10c      	bne.n	80042f4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80042da:	4b16      	ldr	r3, [pc, #88]	; (8004334 <HAL_TIM_Base_MspInit+0x6c>)
 80042dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042de:	4a15      	ldr	r2, [pc, #84]	; (8004334 <HAL_TIM_Base_MspInit+0x6c>)
 80042e0:	f043 0310 	orr.w	r3, r3, #16
 80042e4:	6593      	str	r3, [r2, #88]	; 0x58
 80042e6:	4b13      	ldr	r3, [pc, #76]	; (8004334 <HAL_TIM_Base_MspInit+0x6c>)
 80042e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ea:	f003 0310 	and.w	r3, r3, #16
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80042f2:	e018      	b.n	8004326 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a0f      	ldr	r2, [pc, #60]	; (8004338 <HAL_TIM_Base_MspInit+0x70>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d113      	bne.n	8004326 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80042fe:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <HAL_TIM_Base_MspInit+0x6c>)
 8004300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004302:	4a0c      	ldr	r2, [pc, #48]	; (8004334 <HAL_TIM_Base_MspInit+0x6c>)
 8004304:	f043 0320 	orr.w	r3, r3, #32
 8004308:	6593      	str	r3, [r2, #88]	; 0x58
 800430a:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <HAL_TIM_Base_MspInit+0x6c>)
 800430c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	60bb      	str	r3, [r7, #8]
 8004314:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004316:	2200      	movs	r2, #0
 8004318:	2100      	movs	r1, #0
 800431a:	2037      	movs	r0, #55	; 0x37
 800431c:	f001 f85f 	bl	80053de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004320:	2037      	movs	r0, #55	; 0x37
 8004322:	f001 f878 	bl	8005416 <HAL_NVIC_EnableIRQ>
}
 8004326:	bf00      	nop
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40001000 	.word	0x40001000
 8004334:	40021000 	.word	0x40021000
 8004338:	40001400 	.word	0x40001400

0800433c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800433c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004374 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004340:	f7ff ff44 	bl	80041cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004344:	480c      	ldr	r0, [pc, #48]	; (8004378 <LoopForever+0x6>)
  ldr r1, =_edata
 8004346:	490d      	ldr	r1, [pc, #52]	; (800437c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004348:	4a0d      	ldr	r2, [pc, #52]	; (8004380 <LoopForever+0xe>)
  movs r3, #0
 800434a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800434c:	e002      	b.n	8004354 <LoopCopyDataInit>

0800434e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800434e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004352:	3304      	adds	r3, #4

08004354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004358:	d3f9      	bcc.n	800434e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800435a:	4a0a      	ldr	r2, [pc, #40]	; (8004384 <LoopForever+0x12>)
  ldr r4, =_ebss
 800435c:	4c0a      	ldr	r4, [pc, #40]	; (8004388 <LoopForever+0x16>)
  movs r3, #0
 800435e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004360:	e001      	b.n	8004366 <LoopFillZerobss>

08004362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004364:	3204      	adds	r2, #4

08004366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004368:	d3fb      	bcc.n	8004362 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800436a:	f00a fcef 	bl	800ed4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800436e:	f7ff fd03 	bl	8003d78 <main>

08004372 <LoopForever>:

LoopForever:
    b LoopForever
 8004372:	e7fe      	b.n	8004372 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004374:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800437c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8004380:	0800f0b8 	.word	0x0800f0b8
  ldr r2, =_sbss
 8004384:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8004388:	200011c0 	.word	0x200011c0

0800438c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800438c:	e7fe      	b.n	800438c <ADC1_IRQHandler>

0800438e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004394:	2300      	movs	r3, #0
 8004396:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004398:	2003      	movs	r0, #3
 800439a:	f001 f815 	bl	80053c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800439e:	200f      	movs	r0, #15
 80043a0:	f000 f80e 	bl	80043c0 <HAL_InitTick>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	71fb      	strb	r3, [r7, #7]
 80043ae:	e001      	b.n	80043b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80043b0:	f7ff fe34 	bl	800401c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80043b4:	79fb      	ldrb	r3, [r7, #7]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80043cc:	4b17      	ldr	r3, [pc, #92]	; (800442c <HAL_InitTick+0x6c>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d023      	beq.n	800441c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80043d4:	4b16      	ldr	r3, [pc, #88]	; (8004430 <HAL_InitTick+0x70>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b14      	ldr	r3, [pc, #80]	; (800442c <HAL_InitTick+0x6c>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	4619      	mov	r1, r3
 80043de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80043e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ea:	4618      	mov	r0, r3
 80043ec:	f001 f821 	bl	8005432 <HAL_SYSTICK_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10f      	bne.n	8004416 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b0f      	cmp	r3, #15
 80043fa:	d809      	bhi.n	8004410 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043fc:	2200      	movs	r2, #0
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	f04f 30ff 	mov.w	r0, #4294967295
 8004404:	f000 ffeb 	bl	80053de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004408:	4a0a      	ldr	r2, [pc, #40]	; (8004434 <HAL_InitTick+0x74>)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	e007      	b.n	8004420 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	73fb      	strb	r3, [r7, #15]
 8004414:	e004      	b.n	8004420 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
 800441a:	e001      	b.n	8004420 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004420:	7bfb      	ldrb	r3, [r7, #15]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20000008 	.word	0x20000008
 8004430:	20000000 	.word	0x20000000
 8004434:	20000004 	.word	0x20000004

08004438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <HAL_IncTick+0x20>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	461a      	mov	r2, r3
 8004442:	4b06      	ldr	r3, [pc, #24]	; (800445c <HAL_IncTick+0x24>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4413      	add	r3, r2
 8004448:	4a04      	ldr	r2, [pc, #16]	; (800445c <HAL_IncTick+0x24>)
 800444a:	6013      	str	r3, [r2, #0]
}
 800444c:	bf00      	nop
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20000008 	.word	0x20000008
 800445c:	200005c0 	.word	0x200005c0

08004460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  return uwTick;
 8004464:	4b03      	ldr	r3, [pc, #12]	; (8004474 <HAL_GetTick+0x14>)
 8004466:	681b      	ldr	r3, [r3, #0]
}
 8004468:	4618      	mov	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	200005c0 	.word	0x200005c0

08004478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004480:	f7ff ffee 	bl	8004460 <HAL_GetTick>
 8004484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004490:	d005      	beq.n	800449e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004492:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <HAL_Delay+0x44>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4413      	add	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800449e:	bf00      	nop
 80044a0:	f7ff ffde 	bl	8004460 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d8f7      	bhi.n	80044a0 <HAL_Delay+0x28>
  {
  }
}
 80044b0:	bf00      	nop
 80044b2:	bf00      	nop
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20000008 	.word	0x20000008

080044c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	609a      	str	r2, [r3, #8]
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	609a      	str	r2, [r3, #8]
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	3360      	adds	r3, #96	; 0x60
 800453a:	461a      	mov	r2, r3
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	4b08      	ldr	r3, [pc, #32]	; (800456c <LL_ADC_SetOffset+0x44>)
 800454a:	4013      	ands	r3, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	4313      	orrs	r3, r2
 8004558:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004560:	bf00      	nop
 8004562:	371c      	adds	r7, #28
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	03fff000 	.word	0x03fff000

08004570 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3360      	adds	r3, #96	; 0x60
 800457e:	461a      	mov	r2, r3
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004590:	4618      	mov	r0, r3
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	3360      	adds	r3, #96	; 0x60
 80045ac:	461a      	mov	r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	431a      	orrs	r2, r3
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80045c6:	bf00      	nop
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b087      	sub	sp, #28
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	3330      	adds	r3, #48	; 0x30
 80045e2:	461a      	mov	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	0a1b      	lsrs	r3, r3, #8
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	f003 030c 	and.w	r3, r3, #12
 80045ee:	4413      	add	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f003 031f 	and.w	r3, r3, #31
 80045fc:	211f      	movs	r1, #31
 80045fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004602:	43db      	mvns	r3, r3
 8004604:	401a      	ands	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	0e9b      	lsrs	r3, r3, #26
 800460a:	f003 011f 	and.w	r1, r3, #31
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f003 031f 	and.w	r3, r3, #31
 8004614:	fa01 f303 	lsl.w	r3, r1, r3
 8004618:	431a      	orrs	r2, r3
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800461e:	bf00      	nop
 8004620:	371c      	adds	r7, #28
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800462a:	b480      	push	{r7}
 800462c:	b087      	sub	sp, #28
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3314      	adds	r3, #20
 800463a:	461a      	mov	r2, r3
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	0e5b      	lsrs	r3, r3, #25
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	4413      	add	r3, r2
 8004648:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	0d1b      	lsrs	r3, r3, #20
 8004652:	f003 031f 	and.w	r3, r3, #31
 8004656:	2107      	movs	r1, #7
 8004658:	fa01 f303 	lsl.w	r3, r1, r3
 800465c:	43db      	mvns	r3, r3
 800465e:	401a      	ands	r2, r3
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	0d1b      	lsrs	r3, r3, #20
 8004664:	f003 031f 	and.w	r3, r3, #31
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	fa01 f303 	lsl.w	r3, r1, r3
 800466e:	431a      	orrs	r2, r3
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004674:	bf00      	nop
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004698:	43db      	mvns	r3, r3
 800469a:	401a      	ands	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f003 0318 	and.w	r3, r3, #24
 80046a2:	4908      	ldr	r1, [pc, #32]	; (80046c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80046a4:	40d9      	lsrs	r1, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	400b      	ands	r3, r1
 80046aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ae:	431a      	orrs	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80046b6:	bf00      	nop
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	0007ffff 	.word	0x0007ffff

080046c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80046d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6093      	str	r3, [r2, #8]
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004700:	d101      	bne.n	8004706 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004724:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004728:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004750:	d101      	bne.n	8004756 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004752:	2301      	movs	r3, #1
 8004754:	e000      	b.n	8004758 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <LL_ADC_IsEnabled+0x18>
 8004778:	2301      	movs	r3, #1
 800477a:	e000      	b.n	800477e <LL_ADC_IsEnabled+0x1a>
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b04      	cmp	r3, #4
 800479c:	d101      	bne.n	80047a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d101      	bne.n	80047c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e12c      	b.n	8004a4c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d109      	bne.n	8004814 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7fe fffb 	bl	80037fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff ff67 	bl	80046ec <LL_ADC_IsDeepPowerDownEnabled>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d004      	beq.n	800482e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff ff4d 	bl	80046c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff ff82 	bl	800473c <LL_ADC_IsInternalRegulatorEnabled>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d115      	bne.n	800486a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff ff66 	bl	8004714 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004848:	4b82      	ldr	r3, [pc, #520]	; (8004a54 <HAL_ADC_Init+0x27c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	099b      	lsrs	r3, r3, #6
 800484e:	4a82      	ldr	r2, [pc, #520]	; (8004a58 <HAL_ADC_Init+0x280>)
 8004850:	fba2 2303 	umull	r2, r3, r2, r3
 8004854:	099b      	lsrs	r3, r3, #6
 8004856:	3301      	adds	r3, #1
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800485c:	e002      	b.n	8004864 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	3b01      	subs	r3, #1
 8004862:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1f9      	bne.n	800485e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff ff64 	bl	800473c <LL_ADC_IsInternalRegulatorEnabled>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10d      	bne.n	8004896 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487e:	f043 0210 	orr.w	r2, r3, #16
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488a:	f043 0201 	orr.w	r2, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff ff75 	bl	800478a <LL_ADC_REG_IsConversionOngoing>
 80048a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a6:	f003 0310 	and.w	r3, r3, #16
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f040 80c5 	bne.w	8004a3a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f040 80c1 	bne.w	8004a3a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80048c0:	f043 0202 	orr.w	r2, r3, #2
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff ff49 	bl	8004764 <LL_ADC_IsEnabled>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10b      	bne.n	80048f0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048d8:	4860      	ldr	r0, [pc, #384]	; (8004a5c <HAL_ADC_Init+0x284>)
 80048da:	f7ff ff43 	bl	8004764 <LL_ADC_IsEnabled>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d105      	bne.n	80048f0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	4619      	mov	r1, r3
 80048ea:	485d      	ldr	r0, [pc, #372]	; (8004a60 <HAL_ADC_Init+0x288>)
 80048ec:	f7ff fde8 	bl	80044c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	7e5b      	ldrb	r3, [r3, #25]
 80048f4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80048fa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004900:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004906:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800490e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004910:	4313      	orrs	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 3020 	ldrb.w	r3, [r3, #32]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d106      	bne.n	800492c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	3b01      	subs	r3, #1
 8004924:	045b      	lsls	r3, r3, #17
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4313      	orrs	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004930:	2b00      	cmp	r3, #0
 8004932:	d009      	beq.n	8004948 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004940:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4313      	orrs	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	4b45      	ldr	r3, [pc, #276]	; (8004a64 <HAL_ADC_Init+0x28c>)
 8004950:	4013      	ands	r3, r2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6812      	ldr	r2, [r2, #0]
 8004956:	69b9      	ldr	r1, [r7, #24]
 8004958:	430b      	orrs	r3, r1
 800495a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff ff12 	bl	800478a <LL_ADC_REG_IsConversionOngoing>
 8004966:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff ff1f 	bl	80047b0 <LL_ADC_INJ_IsConversionOngoing>
 8004972:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d13d      	bne.n	80049f6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d13a      	bne.n	80049f6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004984:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800498c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800498e:	4313      	orrs	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800499c:	f023 0302 	bic.w	r3, r3, #2
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	69b9      	ldr	r1, [r7, #24]
 80049a6:	430b      	orrs	r3, r1
 80049a8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d118      	bne.n	80049e6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80049be:	f023 0304 	bic.w	r3, r3, #4
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049ca:	4311      	orrs	r1, r2
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80049d0:	4311      	orrs	r1, r2
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80049d6:	430a      	orrs	r2, r1
 80049d8:	431a      	orrs	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	611a      	str	r2, [r3, #16]
 80049e4:	e007      	b.n	80049f6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	691a      	ldr	r2, [r3, #16]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0201 	bic.w	r2, r2, #1
 80049f4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d10c      	bne.n	8004a18 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	f023 010f 	bic.w	r1, r3, #15
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	1e5a      	subs	r2, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	631a      	str	r2, [r3, #48]	; 0x30
 8004a16:	e007      	b.n	8004a28 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 020f 	bic.w	r2, r2, #15
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	f023 0303 	bic.w	r3, r3, #3
 8004a30:	f043 0201 	orr.w	r2, r3, #1
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	655a      	str	r2, [r3, #84]	; 0x54
 8004a38:	e007      	b.n	8004a4a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3e:	f043 0210 	orr.w	r2, r3, #16
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3720      	adds	r7, #32
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	20000000 	.word	0x20000000
 8004a58:	053e2d63 	.word	0x053e2d63
 8004a5c:	50040000 	.word	0x50040000
 8004a60:	50040300 	.word	0x50040300
 8004a64:	fff0c007 	.word	0xfff0c007

08004a68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b0b6      	sub	sp, #216	; 0xd8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d101      	bne.n	8004a8a <HAL_ADC_ConfigChannel+0x22>
 8004a86:	2302      	movs	r3, #2
 8004a88:	e3b9      	b.n	80051fe <HAL_ADC_ConfigChannel+0x796>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff fe77 	bl	800478a <LL_ADC_REG_IsConversionOngoing>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f040 839e 	bne.w	80051e0 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2b05      	cmp	r3, #5
 8004aaa:	d824      	bhi.n	8004af6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	3b02      	subs	r3, #2
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	d81b      	bhi.n	8004aee <HAL_ADC_ConfigChannel+0x86>
 8004ab6:	a201      	add	r2, pc, #4	; (adr r2, 8004abc <HAL_ADC_ConfigChannel+0x54>)
 8004ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abc:	08004acd 	.word	0x08004acd
 8004ac0:	08004ad5 	.word	0x08004ad5
 8004ac4:	08004add 	.word	0x08004add
 8004ac8:	08004ae5 	.word	0x08004ae5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	220c      	movs	r2, #12
 8004ad0:	605a      	str	r2, [r3, #4]
          break;
 8004ad2:	e011      	b.n	8004af8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2212      	movs	r2, #18
 8004ad8:	605a      	str	r2, [r3, #4]
          break;
 8004ada:	e00d      	b.n	8004af8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	2218      	movs	r2, #24
 8004ae0:	605a      	str	r2, [r3, #4]
          break;
 8004ae2:	e009      	b.n	8004af8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004aea:	605a      	str	r2, [r3, #4]
          break;
 8004aec:	e004      	b.n	8004af8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2206      	movs	r2, #6
 8004af2:	605a      	str	r2, [r3, #4]
          break;
 8004af4:	e000      	b.n	8004af8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004af6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6818      	ldr	r0, [r3, #0]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	6859      	ldr	r1, [r3, #4]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	461a      	mov	r2, r3
 8004b06:	f7ff fd64 	bl	80045d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff fe3b 	bl	800478a <LL_ADC_REG_IsConversionOngoing>
 8004b14:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff fe47 	bl	80047b0 <LL_ADC_INJ_IsConversionOngoing>
 8004b22:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f040 81a6 	bne.w	8004e7c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f040 81a1 	bne.w	8004e7c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6818      	ldr	r0, [r3, #0]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	6819      	ldr	r1, [r3, #0]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	461a      	mov	r2, r3
 8004b48:	f7ff fd6f 	bl	800462a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	695a      	ldr	r2, [r3, #20]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	08db      	lsrs	r3, r3, #3
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d00a      	beq.n	8004b84 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6818      	ldr	r0, [r3, #0]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	6919      	ldr	r1, [r3, #16]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b7e:	f7ff fcd3 	bl	8004528 <LL_ADC_SetOffset>
 8004b82:	e17b      	b.n	8004e7c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2100      	movs	r1, #0
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff fcf0 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004b90:	4603      	mov	r3, r0
 8004b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10a      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x148>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff fce5 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	0e9b      	lsrs	r3, r3, #26
 8004baa:	f003 021f 	and.w	r2, r3, #31
 8004bae:	e01e      	b.n	8004bee <HAL_ADC_ConfigChannel+0x186>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff fcda 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004bc6:	fa93 f3a3 	rbit	r3, r3
 8004bca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004bce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004bd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004bd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8004bde:	2320      	movs	r3, #32
 8004be0:	e004      	b.n	8004bec <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004be2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004be6:	fab3 f383 	clz	r3, r3
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d105      	bne.n	8004c06 <HAL_ADC_ConfigChannel+0x19e>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	0e9b      	lsrs	r3, r3, #26
 8004c00:	f003 031f 	and.w	r3, r3, #31
 8004c04:	e018      	b.n	8004c38 <HAL_ADC_ConfigChannel+0x1d0>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c12:	fa93 f3a3 	rbit	r3, r3
 8004c16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004c22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004c2a:	2320      	movs	r3, #32
 8004c2c:	e004      	b.n	8004c38 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004c2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c32:	fab3 f383 	clz	r3, r3
 8004c36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d106      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2200      	movs	r2, #0
 8004c42:	2100      	movs	r1, #0
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff fca9 	bl	800459c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2101      	movs	r1, #1
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff fc8d 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004c56:	4603      	mov	r3, r0
 8004c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10a      	bne.n	8004c76 <HAL_ADC_ConfigChannel+0x20e>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2101      	movs	r1, #1
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff fc82 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	0e9b      	lsrs	r3, r3, #26
 8004c70:	f003 021f 	and.w	r2, r3, #31
 8004c74:	e01e      	b.n	8004cb4 <HAL_ADC_ConfigChannel+0x24c>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff fc77 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004c82:	4603      	mov	r3, r0
 8004c84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c8c:	fa93 f3a3 	rbit	r3, r3
 8004c90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004c94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004c9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004ca4:	2320      	movs	r3, #32
 8004ca6:	e004      	b.n	8004cb2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004ca8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004cac:	fab3 f383 	clz	r3, r3
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d105      	bne.n	8004ccc <HAL_ADC_ConfigChannel+0x264>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	0e9b      	lsrs	r3, r3, #26
 8004cc6:	f003 031f 	and.w	r3, r3, #31
 8004cca:	e018      	b.n	8004cfe <HAL_ADC_ConfigChannel+0x296>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cd8:	fa93 f3a3 	rbit	r3, r3
 8004cdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004ce0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ce4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004ce8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004cf0:	2320      	movs	r3, #32
 8004cf2:	e004      	b.n	8004cfe <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004cf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cf8:	fab3 f383 	clz	r3, r3
 8004cfc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d106      	bne.n	8004d10 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2200      	movs	r2, #0
 8004d08:	2101      	movs	r1, #1
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff fc46 	bl	800459c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2102      	movs	r1, #2
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff fc2a 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10a      	bne.n	8004d3c <HAL_ADC_ConfigChannel+0x2d4>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2102      	movs	r1, #2
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff fc1f 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004d32:	4603      	mov	r3, r0
 8004d34:	0e9b      	lsrs	r3, r3, #26
 8004d36:	f003 021f 	and.w	r2, r3, #31
 8004d3a:	e01e      	b.n	8004d7a <HAL_ADC_ConfigChannel+0x312>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2102      	movs	r1, #2
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff fc14 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d52:	fa93 f3a3 	rbit	r3, r3
 8004d56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004d5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004d62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004d6a:	2320      	movs	r3, #32
 8004d6c:	e004      	b.n	8004d78 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004d6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d72:	fab3 f383 	clz	r3, r3
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d105      	bne.n	8004d92 <HAL_ADC_ConfigChannel+0x32a>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	0e9b      	lsrs	r3, r3, #26
 8004d8c:	f003 031f 	and.w	r3, r3, #31
 8004d90:	e016      	b.n	8004dc0 <HAL_ADC_ConfigChannel+0x358>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d9e:	fa93 f3a3 	rbit	r3, r3
 8004da2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004da4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004da6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004daa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004db2:	2320      	movs	r3, #32
 8004db4:	e004      	b.n	8004dc0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004db6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dba:	fab3 f383 	clz	r3, r3
 8004dbe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d106      	bne.n	8004dd2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2102      	movs	r1, #2
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff fbe5 	bl	800459c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2103      	movs	r1, #3
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff fbc9 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004dde:	4603      	mov	r3, r0
 8004de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10a      	bne.n	8004dfe <HAL_ADC_ConfigChannel+0x396>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2103      	movs	r1, #3
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff fbbe 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004df4:	4603      	mov	r3, r0
 8004df6:	0e9b      	lsrs	r3, r3, #26
 8004df8:	f003 021f 	and.w	r2, r3, #31
 8004dfc:	e017      	b.n	8004e2e <HAL_ADC_ConfigChannel+0x3c6>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2103      	movs	r1, #3
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff fbb3 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e10:	fa93 f3a3 	rbit	r3, r3
 8004e14:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004e16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e18:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004e1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004e20:	2320      	movs	r3, #32
 8004e22:	e003      	b.n	8004e2c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e26:	fab3 f383 	clz	r3, r3
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d105      	bne.n	8004e46 <HAL_ADC_ConfigChannel+0x3de>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	0e9b      	lsrs	r3, r3, #26
 8004e40:	f003 031f 	and.w	r3, r3, #31
 8004e44:	e011      	b.n	8004e6a <HAL_ADC_ConfigChannel+0x402>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e4e:	fa93 f3a3 	rbit	r3, r3
 8004e52:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e56:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004e5e:	2320      	movs	r3, #32
 8004e60:	e003      	b.n	8004e6a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e64:	fab3 f383 	clz	r3, r3
 8004e68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d106      	bne.n	8004e7c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2200      	movs	r2, #0
 8004e74:	2103      	movs	r1, #3
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff fb90 	bl	800459c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff fc6f 	bl	8004764 <LL_ADC_IsEnabled>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f040 813f 	bne.w	800510c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	6819      	ldr	r1, [r3, #0]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f7ff fbf0 	bl	8004680 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	4a8e      	ldr	r2, [pc, #568]	; (80050e0 <HAL_ADC_ConfigChannel+0x678>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	f040 8130 	bne.w	800510c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10b      	bne.n	8004ed4 <HAL_ADC_ConfigChannel+0x46c>
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	0e9b      	lsrs	r3, r3, #26
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	f003 031f 	and.w	r3, r3, #31
 8004ec8:	2b09      	cmp	r3, #9
 8004eca:	bf94      	ite	ls
 8004ecc:	2301      	movls	r3, #1
 8004ece:	2300      	movhi	r3, #0
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	e019      	b.n	8004f08 <HAL_ADC_ConfigChannel+0x4a0>
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004edc:	fa93 f3a3 	rbit	r3, r3
 8004ee0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ee4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004eec:	2320      	movs	r3, #32
 8004eee:	e003      	b.n	8004ef8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004ef0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ef2:	fab3 f383 	clz	r3, r3
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	3301      	adds	r3, #1
 8004efa:	f003 031f 	and.w	r3, r3, #31
 8004efe:	2b09      	cmp	r3, #9
 8004f00:	bf94      	ite	ls
 8004f02:	2301      	movls	r3, #1
 8004f04:	2300      	movhi	r3, #0
 8004f06:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d079      	beq.n	8005000 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d107      	bne.n	8004f28 <HAL_ADC_ConfigChannel+0x4c0>
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	0e9b      	lsrs	r3, r3, #26
 8004f1e:	3301      	adds	r3, #1
 8004f20:	069b      	lsls	r3, r3, #26
 8004f22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f26:	e015      	b.n	8004f54 <HAL_ADC_ConfigChannel+0x4ec>
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f30:	fa93 f3a3 	rbit	r3, r3
 8004f34:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f38:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004f40:	2320      	movs	r3, #32
 8004f42:	e003      	b.n	8004f4c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f46:	fab3 f383 	clz	r3, r3
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	069b      	lsls	r3, r3, #26
 8004f50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d109      	bne.n	8004f74 <HAL_ADC_ConfigChannel+0x50c>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	0e9b      	lsrs	r3, r3, #26
 8004f66:	3301      	adds	r3, #1
 8004f68:	f003 031f 	and.w	r3, r3, #31
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f72:	e017      	b.n	8004fa4 <HAL_ADC_ConfigChannel+0x53c>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f7c:	fa93 f3a3 	rbit	r3, r3
 8004f80:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f84:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004f8c:	2320      	movs	r3, #32
 8004f8e:	e003      	b.n	8004f98 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f92:	fab3 f383 	clz	r3, r3
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	3301      	adds	r3, #1
 8004f9a:	f003 031f 	and.w	r3, r3, #31
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa4:	ea42 0103 	orr.w	r1, r2, r3
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10a      	bne.n	8004fca <HAL_ADC_ConfigChannel+0x562>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	0e9b      	lsrs	r3, r3, #26
 8004fba:	3301      	adds	r3, #1
 8004fbc:	f003 021f 	and.w	r2, r3, #31
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	4413      	add	r3, r2
 8004fc6:	051b      	lsls	r3, r3, #20
 8004fc8:	e018      	b.n	8004ffc <HAL_ADC_ConfigChannel+0x594>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd2:	fa93 f3a3 	rbit	r3, r3
 8004fd6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004fe2:	2320      	movs	r3, #32
 8004fe4:	e003      	b.n	8004fee <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe8:	fab3 f383 	clz	r3, r3
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	3301      	adds	r3, #1
 8004ff0:	f003 021f 	and.w	r2, r3, #31
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	4413      	add	r3, r2
 8004ffa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ffc:	430b      	orrs	r3, r1
 8004ffe:	e080      	b.n	8005102 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005008:	2b00      	cmp	r3, #0
 800500a:	d107      	bne.n	800501c <HAL_ADC_ConfigChannel+0x5b4>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	0e9b      	lsrs	r3, r3, #26
 8005012:	3301      	adds	r3, #1
 8005014:	069b      	lsls	r3, r3, #26
 8005016:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800501a:	e015      	b.n	8005048 <HAL_ADC_ConfigChannel+0x5e0>
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005024:	fa93 f3a3 	rbit	r3, r3
 8005028:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800502a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8005034:	2320      	movs	r3, #32
 8005036:	e003      	b.n	8005040 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8005038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503a:	fab3 f383 	clz	r3, r3
 800503e:	b2db      	uxtb	r3, r3
 8005040:	3301      	adds	r3, #1
 8005042:	069b      	lsls	r3, r3, #26
 8005044:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005050:	2b00      	cmp	r3, #0
 8005052:	d109      	bne.n	8005068 <HAL_ADC_ConfigChannel+0x600>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	0e9b      	lsrs	r3, r3, #26
 800505a:	3301      	adds	r3, #1
 800505c:	f003 031f 	and.w	r3, r3, #31
 8005060:	2101      	movs	r1, #1
 8005062:	fa01 f303 	lsl.w	r3, r1, r3
 8005066:	e017      	b.n	8005098 <HAL_ADC_ConfigChannel+0x630>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	fa93 f3a3 	rbit	r3, r3
 8005074:	61fb      	str	r3, [r7, #28]
  return result;
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8005080:	2320      	movs	r3, #32
 8005082:	e003      	b.n	800508c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	fab3 f383 	clz	r3, r3
 800508a:	b2db      	uxtb	r3, r3
 800508c:	3301      	adds	r3, #1
 800508e:	f003 031f 	and.w	r3, r3, #31
 8005092:	2101      	movs	r1, #1
 8005094:	fa01 f303 	lsl.w	r3, r1, r3
 8005098:	ea42 0103 	orr.w	r1, r2, r3
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10d      	bne.n	80050c4 <HAL_ADC_ConfigChannel+0x65c>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	0e9b      	lsrs	r3, r3, #26
 80050ae:	3301      	adds	r3, #1
 80050b0:	f003 021f 	and.w	r2, r3, #31
 80050b4:	4613      	mov	r3, r2
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	4413      	add	r3, r2
 80050ba:	3b1e      	subs	r3, #30
 80050bc:	051b      	lsls	r3, r3, #20
 80050be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80050c2:	e01d      	b.n	8005100 <HAL_ADC_ConfigChannel+0x698>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	fa93 f3a3 	rbit	r3, r3
 80050d0:	613b      	str	r3, [r7, #16]
  return result;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d103      	bne.n	80050e4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80050dc:	2320      	movs	r3, #32
 80050de:	e005      	b.n	80050ec <HAL_ADC_ConfigChannel+0x684>
 80050e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	fab3 f383 	clz	r3, r3
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	3301      	adds	r3, #1
 80050ee:	f003 021f 	and.w	r2, r3, #31
 80050f2:	4613      	mov	r3, r2
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	4413      	add	r3, r2
 80050f8:	3b1e      	subs	r3, #30
 80050fa:	051b      	lsls	r3, r3, #20
 80050fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005100:	430b      	orrs	r3, r1
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	6892      	ldr	r2, [r2, #8]
 8005106:	4619      	mov	r1, r3
 8005108:	f7ff fa8f 	bl	800462a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	4b3d      	ldr	r3, [pc, #244]	; (8005208 <HAL_ADC_ConfigChannel+0x7a0>)
 8005112:	4013      	ands	r3, r2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d06c      	beq.n	80051f2 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005118:	483c      	ldr	r0, [pc, #240]	; (800520c <HAL_ADC_ConfigChannel+0x7a4>)
 800511a:	f7ff f9f7 	bl	800450c <LL_ADC_GetCommonPathInternalCh>
 800511e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a3a      	ldr	r2, [pc, #232]	; (8005210 <HAL_ADC_ConfigChannel+0x7a8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d127      	bne.n	800517c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800512c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005130:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d121      	bne.n	800517c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a35      	ldr	r2, [pc, #212]	; (8005214 <HAL_ADC_ConfigChannel+0x7ac>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d157      	bne.n	80051f2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005142:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005146:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800514a:	4619      	mov	r1, r3
 800514c:	482f      	ldr	r0, [pc, #188]	; (800520c <HAL_ADC_ConfigChannel+0x7a4>)
 800514e:	f7ff f9ca 	bl	80044e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005152:	4b31      	ldr	r3, [pc, #196]	; (8005218 <HAL_ADC_ConfigChannel+0x7b0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	099b      	lsrs	r3, r3, #6
 8005158:	4a30      	ldr	r2, [pc, #192]	; (800521c <HAL_ADC_ConfigChannel+0x7b4>)
 800515a:	fba2 2303 	umull	r2, r3, r2, r3
 800515e:	099b      	lsrs	r3, r3, #6
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	4613      	mov	r3, r2
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	4413      	add	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800516c:	e002      	b.n	8005174 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	3b01      	subs	r3, #1
 8005172:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f9      	bne.n	800516e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800517a:	e03a      	b.n	80051f2 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a27      	ldr	r2, [pc, #156]	; (8005220 <HAL_ADC_ConfigChannel+0x7b8>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d113      	bne.n	80051ae <HAL_ADC_ConfigChannel+0x746>
 8005186:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800518a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10d      	bne.n	80051ae <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a1f      	ldr	r2, [pc, #124]	; (8005214 <HAL_ADC_ConfigChannel+0x7ac>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d12a      	bne.n	80051f2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800519c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051a4:	4619      	mov	r1, r3
 80051a6:	4819      	ldr	r0, [pc, #100]	; (800520c <HAL_ADC_ConfigChannel+0x7a4>)
 80051a8:	f7ff f99d 	bl	80044e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051ac:	e021      	b.n	80051f2 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a1c      	ldr	r2, [pc, #112]	; (8005224 <HAL_ADC_ConfigChannel+0x7bc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d11c      	bne.n	80051f2 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80051b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d116      	bne.n	80051f2 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a12      	ldr	r2, [pc, #72]	; (8005214 <HAL_ADC_ConfigChannel+0x7ac>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d111      	bne.n	80051f2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051d6:	4619      	mov	r1, r3
 80051d8:	480c      	ldr	r0, [pc, #48]	; (800520c <HAL_ADC_ConfigChannel+0x7a4>)
 80051da:	f7ff f984 	bl	80044e6 <LL_ADC_SetCommonPathInternalCh>
 80051de:	e008      	b.n	80051f2 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e4:	f043 0220 	orr.w	r2, r3, #32
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80051fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80051fe:	4618      	mov	r0, r3
 8005200:	37d8      	adds	r7, #216	; 0xd8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	80080000 	.word	0x80080000
 800520c:	50040300 	.word	0x50040300
 8005210:	c7520000 	.word	0xc7520000
 8005214:	50040000 	.word	0x50040000
 8005218:	20000000 	.word	0x20000000
 800521c:	053e2d63 	.word	0x053e2d63
 8005220:	cb840000 	.word	0xcb840000
 8005224:	80000001 	.word	0x80000001

08005228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005238:	4b0c      	ldr	r3, [pc, #48]	; (800526c <__NVIC_SetPriorityGrouping+0x44>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005244:	4013      	ands	r3, r2
 8005246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800525a:	4a04      	ldr	r2, [pc, #16]	; (800526c <__NVIC_SetPriorityGrouping+0x44>)
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	60d3      	str	r3, [r2, #12]
}
 8005260:	bf00      	nop
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	e000ed00 	.word	0xe000ed00

08005270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005274:	4b04      	ldr	r3, [pc, #16]	; (8005288 <__NVIC_GetPriorityGrouping+0x18>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	0a1b      	lsrs	r3, r3, #8
 800527a:	f003 0307 	and.w	r3, r3, #7
}
 800527e:	4618      	mov	r0, r3
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	e000ed00 	.word	0xe000ed00

0800528c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800529a:	2b00      	cmp	r3, #0
 800529c:	db0b      	blt.n	80052b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800529e:	79fb      	ldrb	r3, [r7, #7]
 80052a0:	f003 021f 	and.w	r2, r3, #31
 80052a4:	4907      	ldr	r1, [pc, #28]	; (80052c4 <__NVIC_EnableIRQ+0x38>)
 80052a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	2001      	movs	r0, #1
 80052ae:	fa00 f202 	lsl.w	r2, r0, r2
 80052b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	e000e100 	.word	0xe000e100

080052c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	4603      	mov	r3, r0
 80052d0:	6039      	str	r1, [r7, #0]
 80052d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	db0a      	blt.n	80052f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	490c      	ldr	r1, [pc, #48]	; (8005314 <__NVIC_SetPriority+0x4c>)
 80052e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052e6:	0112      	lsls	r2, r2, #4
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	440b      	add	r3, r1
 80052ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052f0:	e00a      	b.n	8005308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	4908      	ldr	r1, [pc, #32]	; (8005318 <__NVIC_SetPriority+0x50>)
 80052f8:	79fb      	ldrb	r3, [r7, #7]
 80052fa:	f003 030f 	and.w	r3, r3, #15
 80052fe:	3b04      	subs	r3, #4
 8005300:	0112      	lsls	r2, r2, #4
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	440b      	add	r3, r1
 8005306:	761a      	strb	r2, [r3, #24]
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	e000e100 	.word	0xe000e100
 8005318:	e000ed00 	.word	0xe000ed00

0800531c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800531c:	b480      	push	{r7}
 800531e:	b089      	sub	sp, #36	; 0x24
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	f1c3 0307 	rsb	r3, r3, #7
 8005336:	2b04      	cmp	r3, #4
 8005338:	bf28      	it	cs
 800533a:	2304      	movcs	r3, #4
 800533c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	3304      	adds	r3, #4
 8005342:	2b06      	cmp	r3, #6
 8005344:	d902      	bls.n	800534c <NVIC_EncodePriority+0x30>
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	3b03      	subs	r3, #3
 800534a:	e000      	b.n	800534e <NVIC_EncodePriority+0x32>
 800534c:	2300      	movs	r3, #0
 800534e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005350:	f04f 32ff 	mov.w	r2, #4294967295
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	fa02 f303 	lsl.w	r3, r2, r3
 800535a:	43da      	mvns	r2, r3
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	401a      	ands	r2, r3
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005364:	f04f 31ff 	mov.w	r1, #4294967295
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	fa01 f303 	lsl.w	r3, r1, r3
 800536e:	43d9      	mvns	r1, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005374:	4313      	orrs	r3, r2
         );
}
 8005376:	4618      	mov	r0, r3
 8005378:	3724      	adds	r7, #36	; 0x24
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
	...

08005384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3b01      	subs	r3, #1
 8005390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005394:	d301      	bcc.n	800539a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005396:	2301      	movs	r3, #1
 8005398:	e00f      	b.n	80053ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800539a:	4a0a      	ldr	r2, [pc, #40]	; (80053c4 <SysTick_Config+0x40>)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3b01      	subs	r3, #1
 80053a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053a2:	210f      	movs	r1, #15
 80053a4:	f04f 30ff 	mov.w	r0, #4294967295
 80053a8:	f7ff ff8e 	bl	80052c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053ac:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <SysTick_Config+0x40>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053b2:	4b04      	ldr	r3, [pc, #16]	; (80053c4 <SysTick_Config+0x40>)
 80053b4:	2207      	movs	r2, #7
 80053b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	e000e010 	.word	0xe000e010

080053c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff ff29 	bl	8005228 <__NVIC_SetPriorityGrouping>
}
 80053d6:	bf00      	nop
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b086      	sub	sp, #24
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	4603      	mov	r3, r0
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	607a      	str	r2, [r7, #4]
 80053ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80053ec:	2300      	movs	r3, #0
 80053ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053f0:	f7ff ff3e 	bl	8005270 <__NVIC_GetPriorityGrouping>
 80053f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	6978      	ldr	r0, [r7, #20]
 80053fc:	f7ff ff8e 	bl	800531c <NVIC_EncodePriority>
 8005400:	4602      	mov	r2, r0
 8005402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005406:	4611      	mov	r1, r2
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff ff5d 	bl	80052c8 <__NVIC_SetPriority>
}
 800540e:	bf00      	nop
 8005410:	3718      	adds	r7, #24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	4603      	mov	r3, r0
 800541e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff ff31 	bl	800528c <__NVIC_EnableIRQ>
}
 800542a:	bf00      	nop
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b082      	sub	sp, #8
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff ffa2 	bl	8005384 <SysTick_Config>
 8005440:	4603      	mov	r3, r0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
	...

0800544c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e054      	b.n	8005508 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	7f5b      	ldrb	r3, [r3, #29]
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d105      	bne.n	8005474 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7fe fa7a 	bl	8003968 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	791b      	ldrb	r3, [r3, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10c      	bne.n	800549c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a22      	ldr	r2, [pc, #136]	; (8005510 <HAL_CRC_Init+0xc4>)
 8005488:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0218 	bic.w	r2, r2, #24
 8005498:	609a      	str	r2, [r3, #8]
 800549a:	e00c      	b.n	80054b6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6899      	ldr	r1, [r3, #8]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	461a      	mov	r2, r3
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f834 	bl	8005514 <HAL_CRCEx_Polynomial_Set>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e028      	b.n	8005508 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	795b      	ldrb	r3, [r3, #5]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d105      	bne.n	80054ca <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f04f 32ff 	mov.w	r2, #4294967295
 80054c6:	611a      	str	r2, [r3, #16]
 80054c8:	e004      	b.n	80054d4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6912      	ldr	r2, [r2, #16]
 80054d2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695a      	ldr	r2, [r3, #20]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	699a      	ldr	r2, [r3, #24]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	04c11db7 	.word	0x04c11db7

08005514 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005524:	231f      	movs	r3, #31
 8005526:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005528:	bf00      	nop
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1e5a      	subs	r2, r3, #1
 800552e:	613a      	str	r2, [r7, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d009      	beq.n	8005548 <HAL_CRCEx_Polynomial_Set+0x34>
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f003 031f 	and.w	r3, r3, #31
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	fa22 f303 	lsr.w	r3, r2, r3
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0f0      	beq.n	800552a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b18      	cmp	r3, #24
 800554c:	d846      	bhi.n	80055dc <HAL_CRCEx_Polynomial_Set+0xc8>
 800554e:	a201      	add	r2, pc, #4	; (adr r2, 8005554 <HAL_CRCEx_Polynomial_Set+0x40>)
 8005550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005554:	080055e3 	.word	0x080055e3
 8005558:	080055dd 	.word	0x080055dd
 800555c:	080055dd 	.word	0x080055dd
 8005560:	080055dd 	.word	0x080055dd
 8005564:	080055dd 	.word	0x080055dd
 8005568:	080055dd 	.word	0x080055dd
 800556c:	080055dd 	.word	0x080055dd
 8005570:	080055dd 	.word	0x080055dd
 8005574:	080055d1 	.word	0x080055d1
 8005578:	080055dd 	.word	0x080055dd
 800557c:	080055dd 	.word	0x080055dd
 8005580:	080055dd 	.word	0x080055dd
 8005584:	080055dd 	.word	0x080055dd
 8005588:	080055dd 	.word	0x080055dd
 800558c:	080055dd 	.word	0x080055dd
 8005590:	080055dd 	.word	0x080055dd
 8005594:	080055c5 	.word	0x080055c5
 8005598:	080055dd 	.word	0x080055dd
 800559c:	080055dd 	.word	0x080055dd
 80055a0:	080055dd 	.word	0x080055dd
 80055a4:	080055dd 	.word	0x080055dd
 80055a8:	080055dd 	.word	0x080055dd
 80055ac:	080055dd 	.word	0x080055dd
 80055b0:	080055dd 	.word	0x080055dd
 80055b4:	080055b9 	.word	0x080055b9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	2b06      	cmp	r3, #6
 80055bc:	d913      	bls.n	80055e6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80055c2:	e010      	b.n	80055e6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	2b07      	cmp	r3, #7
 80055c8:	d90f      	bls.n	80055ea <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80055ce:	e00c      	b.n	80055ea <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	2b0f      	cmp	r3, #15
 80055d4:	d90b      	bls.n	80055ee <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80055da:	e008      	b.n	80055ee <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	75fb      	strb	r3, [r7, #23]
      break;
 80055e0:	e006      	b.n	80055f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80055e2:	bf00      	nop
 80055e4:	e004      	b.n	80055f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80055e6:	bf00      	nop
 80055e8:	e002      	b.n	80055f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80055ea:	bf00      	nop
 80055ec:	e000      	b.n	80055f0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80055ee:	bf00      	nop
  }
  if (status == HAL_OK)
 80055f0:	7dfb      	ldrb	r3, [r7, #23]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10d      	bne.n	8005612 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f023 0118 	bic.w	r1, r3, #24
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	430a      	orrs	r2, r1
 8005610:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005612:	7dfb      	ldrb	r3, [r7, #23]
}
 8005614:	4618      	mov	r0, r3
 8005616:	371c      	adds	r7, #28
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e014      	b.n	800565c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	791b      	ldrb	r3, [r3, #4]
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d105      	bne.n	8005648 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fe f9ec 	bl	8003a20 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b088      	sub	sp, #32
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	795b      	ldrb	r3, [r3, #5]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <HAL_DAC_ConfigChannel+0x1c>
 800567c:	2302      	movs	r3, #2
 800567e:	e107      	b.n	8005890 <HAL_DAC_ConfigChannel+0x22c>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2201      	movs	r2, #1
 8005684:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2202      	movs	r2, #2
 800568a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b04      	cmp	r3, #4
 8005692:	d174      	bne.n	800577e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005694:	f7fe fee4 	bl	8004460 <HAL_GetTick>
 8005698:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d134      	bne.n	800570a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80056a0:	e011      	b.n	80056c6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80056a2:	f7fe fedd 	bl	8004460 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d90a      	bls.n	80056c6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f043 0208 	orr.w	r2, r3, #8
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2203      	movs	r2, #3
 80056c0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e0e4      	b.n	8005890 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1e6      	bne.n	80056a2 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80056d4:	2001      	movs	r0, #1
 80056d6:	f7fe fecf 	bl	8004478 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	6992      	ldr	r2, [r2, #24]
 80056e2:	641a      	str	r2, [r3, #64]	; 0x40
 80056e4:	e01e      	b.n	8005724 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80056e6:	f7fe febb 	bl	8004460 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d90a      	bls.n	800570a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	f043 0208 	orr.w	r2, r3, #8
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2203      	movs	r2, #3
 8005704:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e0c2      	b.n	8005890 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005710:	2b00      	cmp	r3, #0
 8005712:	dbe8      	blt.n	80056e6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8005714:	2001      	movs	r0, #1
 8005716:	f7fe feaf 	bl	8004478 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	6992      	ldr	r2, [r2, #24]
 8005722:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f003 0310 	and.w	r3, r3, #16
 8005730:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005734:	fa01 f303 	lsl.w	r3, r1, r3
 8005738:	43db      	mvns	r3, r3
 800573a:	ea02 0103 	and.w	r1, r2, r3
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	69da      	ldr	r2, [r3, #28]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f003 0310 	and.w	r3, r3, #16
 8005748:	409a      	lsls	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f003 0310 	and.w	r3, r3, #16
 800575e:	21ff      	movs	r1, #255	; 0xff
 8005760:	fa01 f303 	lsl.w	r3, r1, r3
 8005764:	43db      	mvns	r3, r3
 8005766:	ea02 0103 	and.w	r1, r2, r3
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	6a1a      	ldr	r2, [r3, #32]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f003 0310 	and.w	r3, r3, #16
 8005774:	409a      	lsls	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d11d      	bne.n	80057c2 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f003 0310 	and.w	r3, r3, #16
 8005794:	221f      	movs	r2, #31
 8005796:	fa02 f303 	lsl.w	r3, r2, r3
 800579a:	43db      	mvns	r3, r3
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	4013      	ands	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f003 0310 	and.w	r3, r3, #16
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f003 0310 	and.w	r3, r3, #16
 80057d0:	2207      	movs	r2, #7
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	43db      	mvns	r3, r3
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	4013      	ands	r3, r2
 80057dc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	431a      	orrs	r2, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f003 0310 	and.w	r3, r3, #16
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	fa02 f303 	lsl.w	r3, r2, r3
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	4313      	orrs	r3, r2
 8005800:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6819      	ldr	r1, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f003 0310 	and.w	r3, r3, #16
 8005816:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800581a:	fa02 f303 	lsl.w	r3, r2, r3
 800581e:	43da      	mvns	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	400a      	ands	r2, r1
 8005826:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f003 0310 	and.w	r3, r3, #16
 8005836:	f640 72fc 	movw	r2, #4092	; 0xffc
 800583a:	fa02 f303 	lsl.w	r3, r2, r3
 800583e:	43db      	mvns	r3, r3
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	4013      	ands	r3, r2
 8005844:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f003 0310 	and.w	r3, r3, #16
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	4313      	orrs	r3, r2
 800585c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6819      	ldr	r1, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f003 0310 	and.w	r3, r3, #16
 8005872:	22c0      	movs	r2, #192	; 0xc0
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	43da      	mvns	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	400a      	ands	r2, r1
 8005880:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2201      	movs	r2, #1
 8005886:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3720      	adds	r7, #32
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e098      	b.n	80059dc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	4b4d      	ldr	r3, [pc, #308]	; (80059e8 <HAL_DMA_Init+0x150>)
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d80f      	bhi.n	80058d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	4b4b      	ldr	r3, [pc, #300]	; (80059ec <HAL_DMA_Init+0x154>)
 80058be:	4413      	add	r3, r2
 80058c0:	4a4b      	ldr	r2, [pc, #300]	; (80059f0 <HAL_DMA_Init+0x158>)
 80058c2:	fba2 2303 	umull	r2, r3, r2, r3
 80058c6:	091b      	lsrs	r3, r3, #4
 80058c8:	009a      	lsls	r2, r3, #2
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a48      	ldr	r2, [pc, #288]	; (80059f4 <HAL_DMA_Init+0x15c>)
 80058d2:	641a      	str	r2, [r3, #64]	; 0x40
 80058d4:	e00e      	b.n	80058f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	461a      	mov	r2, r3
 80058dc:	4b46      	ldr	r3, [pc, #280]	; (80059f8 <HAL_DMA_Init+0x160>)
 80058de:	4413      	add	r3, r2
 80058e0:	4a43      	ldr	r2, [pc, #268]	; (80059f0 <HAL_DMA_Init+0x158>)
 80058e2:	fba2 2303 	umull	r2, r3, r2, r3
 80058e6:	091b      	lsrs	r3, r3, #4
 80058e8:	009a      	lsls	r2, r3, #2
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a42      	ldr	r2, [pc, #264]	; (80059fc <HAL_DMA_Init+0x164>)
 80058f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800590a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005918:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005924:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005930:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800594e:	d039      	beq.n	80059c4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	4a27      	ldr	r2, [pc, #156]	; (80059f4 <HAL_DMA_Init+0x15c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d11a      	bne.n	8005990 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800595a:	4b29      	ldr	r3, [pc, #164]	; (8005a00 <HAL_DMA_Init+0x168>)
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005962:	f003 031c 	and.w	r3, r3, #28
 8005966:	210f      	movs	r1, #15
 8005968:	fa01 f303 	lsl.w	r3, r1, r3
 800596c:	43db      	mvns	r3, r3
 800596e:	4924      	ldr	r1, [pc, #144]	; (8005a00 <HAL_DMA_Init+0x168>)
 8005970:	4013      	ands	r3, r2
 8005972:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005974:	4b22      	ldr	r3, [pc, #136]	; (8005a00 <HAL_DMA_Init+0x168>)
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6859      	ldr	r1, [r3, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005980:	f003 031c 	and.w	r3, r3, #28
 8005984:	fa01 f303 	lsl.w	r3, r1, r3
 8005988:	491d      	ldr	r1, [pc, #116]	; (8005a00 <HAL_DMA_Init+0x168>)
 800598a:	4313      	orrs	r3, r2
 800598c:	600b      	str	r3, [r1, #0]
 800598e:	e019      	b.n	80059c4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005990:	4b1c      	ldr	r3, [pc, #112]	; (8005a04 <HAL_DMA_Init+0x16c>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005998:	f003 031c 	and.w	r3, r3, #28
 800599c:	210f      	movs	r1, #15
 800599e:	fa01 f303 	lsl.w	r3, r1, r3
 80059a2:	43db      	mvns	r3, r3
 80059a4:	4917      	ldr	r1, [pc, #92]	; (8005a04 <HAL_DMA_Init+0x16c>)
 80059a6:	4013      	ands	r3, r2
 80059a8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80059aa:	4b16      	ldr	r3, [pc, #88]	; (8005a04 <HAL_DMA_Init+0x16c>)
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6859      	ldr	r1, [r3, #4]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b6:	f003 031c 	and.w	r3, r3, #28
 80059ba:	fa01 f303 	lsl.w	r3, r1, r3
 80059be:	4911      	ldr	r1, [pc, #68]	; (8005a04 <HAL_DMA_Init+0x16c>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	40020407 	.word	0x40020407
 80059ec:	bffdfff8 	.word	0xbffdfff8
 80059f0:	cccccccd 	.word	0xcccccccd
 80059f4:	40020000 	.word	0x40020000
 80059f8:	bffdfbf8 	.word	0xbffdfbf8
 80059fc:	40020400 	.word	0x40020400
 8005a00:	400200a8 	.word	0x400200a8
 8005a04:	400204a8 	.word	0x400204a8

08005a08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a24:	f003 031c 	and.w	r3, r3, #28
 8005a28:	2204      	movs	r2, #4
 8005a2a:	409a      	lsls	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d026      	beq.n	8005a82 <HAL_DMA_IRQHandler+0x7a>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f003 0304 	and.w	r3, r3, #4
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d021      	beq.n	8005a82 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0320 	and.w	r3, r3, #32
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d107      	bne.n	8005a5c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0204 	bic.w	r2, r2, #4
 8005a5a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a60:	f003 021c 	and.w	r2, r3, #28
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a68:	2104      	movs	r1, #4
 8005a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a6e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d071      	beq.n	8005b5c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005a80:	e06c      	b.n	8005b5c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a86:	f003 031c 	and.w	r3, r3, #28
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	409a      	lsls	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4013      	ands	r3, r2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d02e      	beq.n	8005af4 <HAL_DMA_IRQHandler+0xec>
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d029      	beq.n	8005af4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10b      	bne.n	8005ac6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 020a 	bic.w	r2, r2, #10
 8005abc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aca:	f003 021c 	and.w	r2, r3, #28
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	2102      	movs	r1, #2
 8005ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8005ad8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d038      	beq.n	8005b5c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005af2:	e033      	b.n	8005b5c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af8:	f003 031c 	and.w	r3, r3, #28
 8005afc:	2208      	movs	r2, #8
 8005afe:	409a      	lsls	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4013      	ands	r3, r2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d02a      	beq.n	8005b5e <HAL_DMA_IRQHandler+0x156>
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d025      	beq.n	8005b5e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 020e 	bic.w	r2, r2, #14
 8005b20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b26:	f003 021c 	and.w	r2, r3, #28
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	2101      	movs	r1, #1
 8005b30:	fa01 f202 	lsl.w	r2, r1, r2
 8005b34:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d004      	beq.n	8005b5e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005b5c:	bf00      	nop
 8005b5e:	bf00      	nop
}
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
	...

08005b68 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8005b76:	2300      	movs	r3, #0
 8005b78:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005b7a:	4b2f      	ldr	r3, [pc, #188]	; (8005c38 <HAL_FLASH_Program+0xd0>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d101      	bne.n	8005b86 <HAL_FLASH_Program+0x1e>
 8005b82:	2302      	movs	r3, #2
 8005b84:	e053      	b.n	8005c2e <HAL_FLASH_Program+0xc6>
 8005b86:	4b2c      	ldr	r3, [pc, #176]	; (8005c38 <HAL_FLASH_Program+0xd0>)
 8005b88:	2201      	movs	r2, #1
 8005b8a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b8c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005b90:	f000 f888 	bl	8005ca4 <FLASH_WaitForLastOperation>
 8005b94:	4603      	mov	r3, r0
 8005b96:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005b98:	7dfb      	ldrb	r3, [r7, #23]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d143      	bne.n	8005c26 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b9e:	4b26      	ldr	r3, [pc, #152]	; (8005c38 <HAL_FLASH_Program+0xd0>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005ba4:	4b25      	ldr	r3, [pc, #148]	; (8005c3c <HAL_FLASH_Program+0xd4>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d009      	beq.n	8005bc4 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005bb0:	4b22      	ldr	r3, [pc, #136]	; (8005c3c <HAL_FLASH_Program+0xd4>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a21      	ldr	r2, [pc, #132]	; (8005c3c <HAL_FLASH_Program+0xd4>)
 8005bb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bba:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005bbc:	4b1e      	ldr	r3, [pc, #120]	; (8005c38 <HAL_FLASH_Program+0xd0>)
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	771a      	strb	r2, [r3, #28]
 8005bc2:	e002      	b.n	8005bca <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005bc4:	4b1c      	ldr	r3, [pc, #112]	; (8005c38 <HAL_FLASH_Program+0xd0>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d107      	bne.n	8005be0 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bd4:	68b8      	ldr	r0, [r7, #8]
 8005bd6:	f000 f8bd 	bl	8005d54 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	613b      	str	r3, [r7, #16]
 8005bde:	e010      	b.n	8005c02 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d002      	beq.n	8005bec <HAL_FLASH_Program+0x84>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d10a      	bne.n	8005c02 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	4619      	mov	r1, r3
 8005bf0:	68b8      	ldr	r0, [r7, #8]
 8005bf2:	f000 f8d5 	bl	8005da0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d102      	bne.n	8005c02 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8005bfc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005c00:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005c02:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005c06:	f000 f84d 	bl	8005ca4 <FLASH_WaitForLastOperation>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d006      	beq.n	8005c22 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8005c14:	4b09      	ldr	r3, [pc, #36]	; (8005c3c <HAL_FLASH_Program+0xd4>)
 8005c16:	695a      	ldr	r2, [r3, #20]
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	43db      	mvns	r3, r3
 8005c1c:	4907      	ldr	r1, [pc, #28]	; (8005c3c <HAL_FLASH_Program+0xd4>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005c22:	f000 f9cf 	bl	8005fc4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005c26:	4b04      	ldr	r3, [pc, #16]	; (8005c38 <HAL_FLASH_Program+0xd0>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	701a      	strb	r2, [r3, #0]

  return status;
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	2000000c 	.word	0x2000000c
 8005c3c:	40022000 	.word	0x40022000

08005c40 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005c4a:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <HAL_FLASH_Unlock+0x38>)
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	da0b      	bge.n	8005c6a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005c52:	4b09      	ldr	r3, [pc, #36]	; (8005c78 <HAL_FLASH_Unlock+0x38>)
 8005c54:	4a09      	ldr	r2, [pc, #36]	; (8005c7c <HAL_FLASH_Unlock+0x3c>)
 8005c56:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005c58:	4b07      	ldr	r3, [pc, #28]	; (8005c78 <HAL_FLASH_Unlock+0x38>)
 8005c5a:	4a09      	ldr	r2, [pc, #36]	; (8005c80 <HAL_FLASH_Unlock+0x40>)
 8005c5c:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005c5e:	4b06      	ldr	r3, [pc, #24]	; (8005c78 <HAL_FLASH_Unlock+0x38>)
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	da01      	bge.n	8005c6a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	40022000 	.word	0x40022000
 8005c7c:	45670123 	.word	0x45670123
 8005c80:	cdef89ab 	.word	0xcdef89ab

08005c84 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005c88:	4b05      	ldr	r3, [pc, #20]	; (8005ca0 <HAL_FLASH_Lock+0x1c>)
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	4a04      	ldr	r2, [pc, #16]	; (8005ca0 <HAL_FLASH_Lock+0x1c>)
 8005c8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c92:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	40022000 	.word	0x40022000

08005ca4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8005cac:	f7fe fbd8 	bl	8004460 <HAL_GetTick>
 8005cb0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005cb2:	e00d      	b.n	8005cd0 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cba:	d009      	beq.n	8005cd0 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8005cbc:	f7fe fbd0 	bl	8004460 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d801      	bhi.n	8005cd0 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e036      	b.n	8005d3e <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005cd0:	4b1d      	ldr	r3, [pc, #116]	; (8005d48 <FLASH_WaitForLastOperation+0xa4>)
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1eb      	bne.n	8005cb4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8005cdc:	4b1a      	ldr	r3, [pc, #104]	; (8005d48 <FLASH_WaitForLastOperation+0xa4>)
 8005cde:	691a      	ldr	r2, [r3, #16]
 8005ce0:	4b1a      	ldr	r3, [pc, #104]	; (8005d4c <FLASH_WaitForLastOperation+0xa8>)
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01e      	beq.n	8005d2a <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8005cec:	4b18      	ldr	r3, [pc, #96]	; (8005d50 <FLASH_WaitForLastOperation+0xac>)
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	4a16      	ldr	r2, [pc, #88]	; (8005d50 <FLASH_WaitForLastOperation+0xac>)
 8005cf6:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d007      	beq.n	8005d12 <FLASH_WaitForLastOperation+0x6e>
 8005d02:	4b11      	ldr	r3, [pc, #68]	; (8005d48 <FLASH_WaitForLastOperation+0xa4>)
 8005d04:	699a      	ldr	r2, [r3, #24]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005d0c:	490e      	ldr	r1, [pc, #56]	; (8005d48 <FLASH_WaitForLastOperation+0xa4>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	618b      	str	r3, [r1, #24]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d004      	beq.n	8005d26 <FLASH_WaitForLastOperation+0x82>
 8005d1c:	4a0a      	ldr	r2, [pc, #40]	; (8005d48 <FLASH_WaitForLastOperation+0xa4>)
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005d24:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e009      	b.n	8005d3e <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005d2a:	4b07      	ldr	r3, [pc, #28]	; (8005d48 <FLASH_WaitForLastOperation+0xa4>)
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005d36:	4b04      	ldr	r3, [pc, #16]	; (8005d48 <FLASH_WaitForLastOperation+0xa4>)
 8005d38:	2201      	movs	r2, #1
 8005d3a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	40022000 	.word	0x40022000
 8005d4c:	0002c3fa 	.word	0x0002c3fa
 8005d50:	2000000c 	.word	0x2000000c

08005d54 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005d60:	4b0e      	ldr	r3, [pc, #56]	; (8005d9c <FLASH_Program_DoubleWord+0x48>)
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	4a0d      	ldr	r2, [pc, #52]	; (8005d9c <FLASH_Program_DoubleWord+0x48>)
 8005d66:	f043 0301 	orr.w	r3, r3, #1
 8005d6a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005d72:	f3bf 8f6f 	isb	sy
}
 8005d76:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8005d78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	f04f 0300 	mov.w	r3, #0
 8005d84:	000a      	movs	r2, r1
 8005d86:	2300      	movs	r3, #0
 8005d88:	68f9      	ldr	r1, [r7, #12]
 8005d8a:	3104      	adds	r1, #4
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	600b      	str	r3, [r1, #0]
}
 8005d90:	bf00      	nop
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	40022000 	.word	0x40022000

08005da0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b089      	sub	sp, #36	; 0x24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005daa:	2340      	movs	r3, #64	; 0x40
 8005dac:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005db6:	4b14      	ldr	r3, [pc, #80]	; (8005e08 <FLASH_Program_Fast+0x68>)
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	4a13      	ldr	r2, [pc, #76]	; (8005e08 <FLASH_Program_Fast+0x68>)
 8005dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dc0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8005dc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8005dc8:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8005dca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005dcc:	b672      	cpsid	i
}
 8005dce:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	3304      	adds	r3, #4
 8005ddc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	3304      	adds	r3, #4
 8005de2:	617b      	str	r3, [r7, #20]
    row_index--;
 8005de4:	7ffb      	ldrb	r3, [r7, #31]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8005dea:	7ffb      	ldrb	r3, [r7, #31]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1ef      	bne.n	8005dd0 <FLASH_Program_Fast+0x30>
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f383 8810 	msr	PRIMASK, r3
}
 8005dfa:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8005dfc:	bf00      	nop
 8005dfe:	3724      	adds	r7, #36	; 0x24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	40022000 	.word	0x40022000

08005e0c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005e16:	4b48      	ldr	r3, [pc, #288]	; (8005f38 <HAL_FLASHEx_Erase+0x12c>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d101      	bne.n	8005e22 <HAL_FLASHEx_Erase+0x16>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	e085      	b.n	8005f2e <HAL_FLASHEx_Erase+0x122>
 8005e22:	4b45      	ldr	r3, [pc, #276]	; (8005f38 <HAL_FLASHEx_Erase+0x12c>)
 8005e24:	2201      	movs	r2, #1
 8005e26:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e28:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e2c:	f7ff ff3a 	bl	8005ca4 <FLASH_WaitForLastOperation>
 8005e30:	4603      	mov	r3, r0
 8005e32:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d175      	bne.n	8005f26 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005e3a:	4b3f      	ldr	r3, [pc, #252]	; (8005f38 <HAL_FLASHEx_Erase+0x12c>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005e40:	4b3e      	ldr	r3, [pc, #248]	; (8005f3c <HAL_FLASHEx_Erase+0x130>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d013      	beq.n	8005e74 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005e4c:	4b3b      	ldr	r3, [pc, #236]	; (8005f3c <HAL_FLASHEx_Erase+0x130>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d009      	beq.n	8005e6c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005e58:	4b38      	ldr	r3, [pc, #224]	; (8005f3c <HAL_FLASHEx_Erase+0x130>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a37      	ldr	r2, [pc, #220]	; (8005f3c <HAL_FLASHEx_Erase+0x130>)
 8005e5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e62:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005e64:	4b34      	ldr	r3, [pc, #208]	; (8005f38 <HAL_FLASHEx_Erase+0x12c>)
 8005e66:	2203      	movs	r2, #3
 8005e68:	771a      	strb	r2, [r3, #28]
 8005e6a:	e016      	b.n	8005e9a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005e6c:	4b32      	ldr	r3, [pc, #200]	; (8005f38 <HAL_FLASHEx_Erase+0x12c>)
 8005e6e:	2201      	movs	r2, #1
 8005e70:	771a      	strb	r2, [r3, #28]
 8005e72:	e012      	b.n	8005e9a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005e74:	4b31      	ldr	r3, [pc, #196]	; (8005f3c <HAL_FLASHEx_Erase+0x130>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d009      	beq.n	8005e94 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005e80:	4b2e      	ldr	r3, [pc, #184]	; (8005f3c <HAL_FLASHEx_Erase+0x130>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a2d      	ldr	r2, [pc, #180]	; (8005f3c <HAL_FLASHEx_Erase+0x130>)
 8005e86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e8a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005e8c:	4b2a      	ldr	r3, [pc, #168]	; (8005f38 <HAL_FLASHEx_Erase+0x12c>)
 8005e8e:	2202      	movs	r2, #2
 8005e90:	771a      	strb	r2, [r3, #28]
 8005e92:	e002      	b.n	8005e9a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005e94:	4b28      	ldr	r3, [pc, #160]	; (8005f38 <HAL_FLASHEx_Erase+0x12c>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d111      	bne.n	8005ec6 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 f84a 	bl	8005f40 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005eac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005eb0:	f7ff fef8 	bl	8005ca4 <FLASH_WaitForLastOperation>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8005eb8:	4b20      	ldr	r3, [pc, #128]	; (8005f3c <HAL_FLASHEx_Erase+0x130>)
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	4a1f      	ldr	r2, [pc, #124]	; (8005f3c <HAL_FLASHEx_Erase+0x130>)
 8005ebe:	f023 0304 	bic.w	r3, r3, #4
 8005ec2:	6153      	str	r3, [r2, #20]
 8005ec4:	e02d      	b.n	8005f22 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ecc:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	60bb      	str	r3, [r7, #8]
 8005ed4:	e01d      	b.n	8005f12 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	4619      	mov	r1, r3
 8005edc:	68b8      	ldr	r0, [r7, #8]
 8005ede:	f000 f84d 	bl	8005f7c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ee2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ee6:	f7ff fedd 	bl	8005ca4 <FLASH_WaitForLastOperation>
 8005eea:	4603      	mov	r3, r0
 8005eec:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005eee:	4b13      	ldr	r3, [pc, #76]	; (8005f3c <HAL_FLASHEx_Erase+0x130>)
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	4a12      	ldr	r2, [pc, #72]	; (8005f3c <HAL_FLASHEx_Erase+0x130>)
 8005ef4:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8005ef8:	f023 0302 	bic.w	r3, r3, #2
 8005efc:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d003      	beq.n	8005f0c <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	601a      	str	r2, [r3, #0]
          break;
 8005f0a:	e00a      	b.n	8005f22 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	60bb      	str	r3, [r7, #8]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	689a      	ldr	r2, [r3, #8]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d3d9      	bcc.n	8005ed6 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005f22:	f000 f84f 	bl	8005fc4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005f26:	4b04      	ldr	r3, [pc, #16]	; (8005f38 <HAL_FLASHEx_Erase+0x12c>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	701a      	strb	r2, [r3, #0]

  return status;
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	2000000c 	.word	0x2000000c
 8005f3c:	40022000 	.word	0x40022000

08005f40 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d005      	beq.n	8005f5e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8005f52:	4b09      	ldr	r3, [pc, #36]	; (8005f78 <FLASH_MassErase+0x38>)
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	4a08      	ldr	r2, [pc, #32]	; (8005f78 <FLASH_MassErase+0x38>)
 8005f58:	f043 0304 	orr.w	r3, r3, #4
 8005f5c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005f5e:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <FLASH_MassErase+0x38>)
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	4a05      	ldr	r2, [pc, #20]	; (8005f78 <FLASH_MassErase+0x38>)
 8005f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f68:	6153      	str	r3, [r2, #20]
}
 8005f6a:	bf00      	nop
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	40022000 	.word	0x40022000

08005f7c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8005f86:	4b0e      	ldr	r3, [pc, #56]	; (8005fc0 <FLASH_PageErase+0x44>)
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8005f96:	490a      	ldr	r1, [pc, #40]	; (8005fc0 <FLASH_PageErase+0x44>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005f9c:	4b08      	ldr	r3, [pc, #32]	; (8005fc0 <FLASH_PageErase+0x44>)
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	4a07      	ldr	r2, [pc, #28]	; (8005fc0 <FLASH_PageErase+0x44>)
 8005fa2:	f043 0302 	orr.w	r3, r3, #2
 8005fa6:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005fa8:	4b05      	ldr	r3, [pc, #20]	; (8005fc0 <FLASH_PageErase+0x44>)
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	4a04      	ldr	r2, [pc, #16]	; (8005fc0 <FLASH_PageErase+0x44>)
 8005fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fb2:	6153      	str	r3, [r2, #20]
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	40022000 	.word	0x40022000

08005fc4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8005fca:	4b21      	ldr	r3, [pc, #132]	; (8006050 <FLASH_FlushCaches+0x8c>)
 8005fcc:	7f1b      	ldrb	r3, [r3, #28]
 8005fce:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8005fd0:	79fb      	ldrb	r3, [r7, #7]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d002      	beq.n	8005fdc <FLASH_FlushCaches+0x18>
 8005fd6:	79fb      	ldrb	r3, [r7, #7]
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	d117      	bne.n	800600c <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005fdc:	4b1d      	ldr	r3, [pc, #116]	; (8006054 <FLASH_FlushCaches+0x90>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a1c      	ldr	r2, [pc, #112]	; (8006054 <FLASH_FlushCaches+0x90>)
 8005fe2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fe6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005fe8:	4b1a      	ldr	r3, [pc, #104]	; (8006054 <FLASH_FlushCaches+0x90>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a19      	ldr	r2, [pc, #100]	; (8006054 <FLASH_FlushCaches+0x90>)
 8005fee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005ff2:	6013      	str	r3, [r2, #0]
 8005ff4:	4b17      	ldr	r3, [pc, #92]	; (8006054 <FLASH_FlushCaches+0x90>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a16      	ldr	r2, [pc, #88]	; (8006054 <FLASH_FlushCaches+0x90>)
 8005ffa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ffe:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006000:	4b14      	ldr	r3, [pc, #80]	; (8006054 <FLASH_FlushCaches+0x90>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a13      	ldr	r2, [pc, #76]	; (8006054 <FLASH_FlushCaches+0x90>)
 8006006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800600a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800600c:	79fb      	ldrb	r3, [r7, #7]
 800600e:	2b02      	cmp	r3, #2
 8006010:	d002      	beq.n	8006018 <FLASH_FlushCaches+0x54>
 8006012:	79fb      	ldrb	r3, [r7, #7]
 8006014:	2b03      	cmp	r3, #3
 8006016:	d111      	bne.n	800603c <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006018:	4b0e      	ldr	r3, [pc, #56]	; (8006054 <FLASH_FlushCaches+0x90>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a0d      	ldr	r2, [pc, #52]	; (8006054 <FLASH_FlushCaches+0x90>)
 800601e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006022:	6013      	str	r3, [r2, #0]
 8006024:	4b0b      	ldr	r3, [pc, #44]	; (8006054 <FLASH_FlushCaches+0x90>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a0a      	ldr	r2, [pc, #40]	; (8006054 <FLASH_FlushCaches+0x90>)
 800602a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800602e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006030:	4b08      	ldr	r3, [pc, #32]	; (8006054 <FLASH_FlushCaches+0x90>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a07      	ldr	r2, [pc, #28]	; (8006054 <FLASH_FlushCaches+0x90>)
 8006036:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800603a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800603c:	4b04      	ldr	r3, [pc, #16]	; (8006050 <FLASH_FlushCaches+0x8c>)
 800603e:	2200      	movs	r2, #0
 8006040:	771a      	strb	r2, [r3, #28]
}
 8006042:	bf00      	nop
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	2000000c 	.word	0x2000000c
 8006054:	40022000 	.word	0x40022000

08006058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006062:	2300      	movs	r3, #0
 8006064:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006066:	e154      	b.n	8006312 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	2101      	movs	r1, #1
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	fa01 f303 	lsl.w	r3, r1, r3
 8006074:	4013      	ands	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 8146 	beq.w	800630c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f003 0303 	and.w	r3, r3, #3
 8006088:	2b01      	cmp	r3, #1
 800608a:	d005      	beq.n	8006098 <HAL_GPIO_Init+0x40>
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f003 0303 	and.w	r3, r3, #3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d130      	bne.n	80060fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	2203      	movs	r2, #3
 80060a4:	fa02 f303 	lsl.w	r3, r2, r3
 80060a8:	43db      	mvns	r3, r3
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	4013      	ands	r3, r2
 80060ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	68da      	ldr	r2, [r3, #12]
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	4313      	orrs	r3, r2
 80060c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060ce:	2201      	movs	r2, #1
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	fa02 f303 	lsl.w	r3, r2, r3
 80060d6:	43db      	mvns	r3, r3
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	4013      	ands	r3, r2
 80060dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	091b      	lsrs	r3, r3, #4
 80060e4:	f003 0201 	and.w	r2, r3, #1
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	fa02 f303 	lsl.w	r3, r2, r3
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f003 0303 	and.w	r3, r3, #3
 8006102:	2b03      	cmp	r3, #3
 8006104:	d017      	beq.n	8006136 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	2203      	movs	r2, #3
 8006112:	fa02 f303 	lsl.w	r3, r2, r3
 8006116:	43db      	mvns	r3, r3
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	4013      	ands	r3, r2
 800611c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	689a      	ldr	r2, [r3, #8]
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	fa02 f303 	lsl.w	r3, r2, r3
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	4313      	orrs	r3, r2
 800612e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f003 0303 	and.w	r3, r3, #3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d123      	bne.n	800618a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	08da      	lsrs	r2, r3, #3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	3208      	adds	r2, #8
 800614a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f003 0307 	and.w	r3, r3, #7
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	220f      	movs	r2, #15
 800615a:	fa02 f303 	lsl.w	r3, r2, r3
 800615e:	43db      	mvns	r3, r3
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	4013      	ands	r3, r2
 8006164:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	691a      	ldr	r2, [r3, #16]
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	4313      	orrs	r3, r2
 800617a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	08da      	lsrs	r2, r3, #3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3208      	adds	r2, #8
 8006184:	6939      	ldr	r1, [r7, #16]
 8006186:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	2203      	movs	r2, #3
 8006196:	fa02 f303 	lsl.w	r3, r2, r3
 800619a:	43db      	mvns	r3, r3
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	4013      	ands	r3, r2
 80061a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f003 0203 	and.w	r2, r3, #3
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	fa02 f303 	lsl.w	r3, r2, r3
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 80a0 	beq.w	800630c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061cc:	4b58      	ldr	r3, [pc, #352]	; (8006330 <HAL_GPIO_Init+0x2d8>)
 80061ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061d0:	4a57      	ldr	r2, [pc, #348]	; (8006330 <HAL_GPIO_Init+0x2d8>)
 80061d2:	f043 0301 	orr.w	r3, r3, #1
 80061d6:	6613      	str	r3, [r2, #96]	; 0x60
 80061d8:	4b55      	ldr	r3, [pc, #340]	; (8006330 <HAL_GPIO_Init+0x2d8>)
 80061da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	60bb      	str	r3, [r7, #8]
 80061e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80061e4:	4a53      	ldr	r2, [pc, #332]	; (8006334 <HAL_GPIO_Init+0x2dc>)
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	089b      	lsrs	r3, r3, #2
 80061ea:	3302      	adds	r3, #2
 80061ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f003 0303 	and.w	r3, r3, #3
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	220f      	movs	r2, #15
 80061fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006200:	43db      	mvns	r3, r3
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	4013      	ands	r3, r2
 8006206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800620e:	d019      	beq.n	8006244 <HAL_GPIO_Init+0x1ec>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a49      	ldr	r2, [pc, #292]	; (8006338 <HAL_GPIO_Init+0x2e0>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d013      	beq.n	8006240 <HAL_GPIO_Init+0x1e8>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a48      	ldr	r2, [pc, #288]	; (800633c <HAL_GPIO_Init+0x2e4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d00d      	beq.n	800623c <HAL_GPIO_Init+0x1e4>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a47      	ldr	r2, [pc, #284]	; (8006340 <HAL_GPIO_Init+0x2e8>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d007      	beq.n	8006238 <HAL_GPIO_Init+0x1e0>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a46      	ldr	r2, [pc, #280]	; (8006344 <HAL_GPIO_Init+0x2ec>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d101      	bne.n	8006234 <HAL_GPIO_Init+0x1dc>
 8006230:	2304      	movs	r3, #4
 8006232:	e008      	b.n	8006246 <HAL_GPIO_Init+0x1ee>
 8006234:	2307      	movs	r3, #7
 8006236:	e006      	b.n	8006246 <HAL_GPIO_Init+0x1ee>
 8006238:	2303      	movs	r3, #3
 800623a:	e004      	b.n	8006246 <HAL_GPIO_Init+0x1ee>
 800623c:	2302      	movs	r3, #2
 800623e:	e002      	b.n	8006246 <HAL_GPIO_Init+0x1ee>
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <HAL_GPIO_Init+0x1ee>
 8006244:	2300      	movs	r3, #0
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	f002 0203 	and.w	r2, r2, #3
 800624c:	0092      	lsls	r2, r2, #2
 800624e:	4093      	lsls	r3, r2
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4313      	orrs	r3, r2
 8006254:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006256:	4937      	ldr	r1, [pc, #220]	; (8006334 <HAL_GPIO_Init+0x2dc>)
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	089b      	lsrs	r3, r3, #2
 800625c:	3302      	adds	r3, #2
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006264:	4b38      	ldr	r3, [pc, #224]	; (8006348 <HAL_GPIO_Init+0x2f0>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	43db      	mvns	r3, r3
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	4013      	ands	r3, r2
 8006272:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d003      	beq.n	8006288 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4313      	orrs	r3, r2
 8006286:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006288:	4a2f      	ldr	r2, [pc, #188]	; (8006348 <HAL_GPIO_Init+0x2f0>)
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800628e:	4b2e      	ldr	r3, [pc, #184]	; (8006348 <HAL_GPIO_Init+0x2f0>)
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	43db      	mvns	r3, r3
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	4013      	ands	r3, r2
 800629c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80062b2:	4a25      	ldr	r2, [pc, #148]	; (8006348 <HAL_GPIO_Init+0x2f0>)
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80062b8:	4b23      	ldr	r3, [pc, #140]	; (8006348 <HAL_GPIO_Init+0x2f0>)
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	43db      	mvns	r3, r3
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	4013      	ands	r3, r2
 80062c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d003      	beq.n	80062dc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	4313      	orrs	r3, r2
 80062da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80062dc:	4a1a      	ldr	r2, [pc, #104]	; (8006348 <HAL_GPIO_Init+0x2f0>)
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80062e2:	4b19      	ldr	r3, [pc, #100]	; (8006348 <HAL_GPIO_Init+0x2f0>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	43db      	mvns	r3, r3
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	4013      	ands	r3, r2
 80062f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4313      	orrs	r3, r2
 8006304:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006306:	4a10      	ldr	r2, [pc, #64]	; (8006348 <HAL_GPIO_Init+0x2f0>)
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	3301      	adds	r3, #1
 8006310:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	fa22 f303 	lsr.w	r3, r2, r3
 800631c:	2b00      	cmp	r3, #0
 800631e:	f47f aea3 	bne.w	8006068 <HAL_GPIO_Init+0x10>
  }
}
 8006322:	bf00      	nop
 8006324:	bf00      	nop
 8006326:	371c      	adds	r7, #28
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	40021000 	.word	0x40021000
 8006334:	40010000 	.word	0x40010000
 8006338:	48000400 	.word	0x48000400
 800633c:	48000800 	.word	0x48000800
 8006340:	48000c00 	.word	0x48000c00
 8006344:	48001000 	.word	0x48001000
 8006348:	40010400 	.word	0x40010400

0800634c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	460b      	mov	r3, r1
 8006356:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	887b      	ldrh	r3, [r7, #2]
 800635e:	4013      	ands	r3, r2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006364:	2301      	movs	r3, #1
 8006366:	73fb      	strb	r3, [r7, #15]
 8006368:	e001      	b.n	800636e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800636a:	2300      	movs	r3, #0
 800636c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800636e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	807b      	strh	r3, [r7, #2]
 8006388:	4613      	mov	r3, r2
 800638a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800638c:	787b      	ldrb	r3, [r7, #1]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006392:	887a      	ldrh	r2, [r7, #2]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006398:	e002      	b.n	80063a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800639a:	887a      	ldrh	r2, [r7, #2]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	460b      	mov	r3, r1
 80063b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80063be:	887a      	ldrh	r2, [r7, #2]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4013      	ands	r3, r2
 80063c4:	041a      	lsls	r2, r3, #16
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	43d9      	mvns	r1, r3
 80063ca:	887b      	ldrh	r3, [r7, #2]
 80063cc:	400b      	ands	r3, r1
 80063ce:	431a      	orrs	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	619a      	str	r2, [r3, #24]
}
 80063d4:	bf00      	nop
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80063e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063e2:	b08b      	sub	sp, #44	; 0x2c
 80063e4:	af06      	add	r7, sp, #24
 80063e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e109      	b.n	8006606 <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f008 f902 	bl	800e610 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2203      	movs	r2, #3
 8006410:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4618      	mov	r0, r3
 800641a:	f003 ffc1 	bl	800a3a0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	603b      	str	r3, [r7, #0]
 8006424:	687e      	ldr	r6, [r7, #4]
 8006426:	466d      	mov	r5, sp
 8006428:	f106 0410 	add.w	r4, r6, #16
 800642c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800642e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006430:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006434:	e885 0003 	stmia.w	r5, {r0, r1}
 8006438:	1d33      	adds	r3, r6, #4
 800643a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800643c:	6838      	ldr	r0, [r7, #0]
 800643e:	f003 ff87 	bl	800a350 <USB_CoreInit>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d005      	beq.n	8006454 <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e0d8      	b.n	8006606 <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2100      	movs	r1, #0
 800645a:	4618      	mov	r0, r3
 800645c:	f003 ffbb 	bl	800a3d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006460:	2300      	movs	r3, #0
 8006462:	73fb      	strb	r3, [r7, #15]
 8006464:	e04d      	b.n	8006502 <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006466:	7bfb      	ldrb	r3, [r7, #15]
 8006468:	6879      	ldr	r1, [r7, #4]
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	4613      	mov	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	00db      	lsls	r3, r3, #3
 8006474:	440b      	add	r3, r1
 8006476:	3305      	adds	r3, #5
 8006478:	2201      	movs	r2, #1
 800647a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800647c:	7bfb      	ldrb	r3, [r7, #15]
 800647e:	6879      	ldr	r1, [r7, #4]
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	4613      	mov	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	440b      	add	r3, r1
 800648c:	3304      	adds	r3, #4
 800648e:	7bfa      	ldrb	r2, [r7, #15]
 8006490:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006492:	7bfa      	ldrb	r2, [r7, #15]
 8006494:	7bfb      	ldrb	r3, [r7, #15]
 8006496:	b298      	uxth	r0, r3
 8006498:	6879      	ldr	r1, [r7, #4]
 800649a:	4613      	mov	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	00db      	lsls	r3, r3, #3
 80064a2:	440b      	add	r3, r1
 80064a4:	333a      	adds	r3, #58	; 0x3a
 80064a6:	4602      	mov	r2, r0
 80064a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	6879      	ldr	r1, [r7, #4]
 80064ae:	1c5a      	adds	r2, r3, #1
 80064b0:	4613      	mov	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	440b      	add	r3, r1
 80064ba:	3307      	adds	r3, #7
 80064bc:	2200      	movs	r2, #0
 80064be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80064c0:	7bfa      	ldrb	r2, [r7, #15]
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	440b      	add	r3, r1
 80064ce:	333c      	adds	r3, #60	; 0x3c
 80064d0:	2200      	movs	r2, #0
 80064d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80064d4:	7bfa      	ldrb	r2, [r7, #15]
 80064d6:	6879      	ldr	r1, [r7, #4]
 80064d8:	4613      	mov	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	440b      	add	r3, r1
 80064e2:	3340      	adds	r3, #64	; 0x40
 80064e4:	2200      	movs	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80064e8:	7bfa      	ldrb	r2, [r7, #15]
 80064ea:	6879      	ldr	r1, [r7, #4]
 80064ec:	4613      	mov	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	00db      	lsls	r3, r3, #3
 80064f4:	440b      	add	r3, r1
 80064f6:	3344      	adds	r3, #68	; 0x44
 80064f8:	2200      	movs	r2, #0
 80064fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
 80064fe:	3301      	adds	r3, #1
 8006500:	73fb      	strb	r3, [r7, #15]
 8006502:	7bfa      	ldrb	r2, [r7, #15]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	429a      	cmp	r2, r3
 800650a:	d3ac      	bcc.n	8006466 <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800650c:	2300      	movs	r3, #0
 800650e:	73fb      	strb	r3, [r7, #15]
 8006510:	e044      	b.n	800659c <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006512:	7bfa      	ldrb	r2, [r7, #15]
 8006514:	6879      	ldr	r1, [r7, #4]
 8006516:	4613      	mov	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	440b      	add	r3, r1
 8006520:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8006524:	2200      	movs	r2, #0
 8006526:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006528:	7bfa      	ldrb	r2, [r7, #15]
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	4613      	mov	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	440b      	add	r3, r1
 8006536:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800653a:	7bfa      	ldrb	r2, [r7, #15]
 800653c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800653e:	7bfa      	ldrb	r2, [r7, #15]
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	440b      	add	r3, r1
 800654c:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8006550:	2200      	movs	r2, #0
 8006552:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006554:	7bfa      	ldrb	r2, [r7, #15]
 8006556:	6879      	ldr	r1, [r7, #4]
 8006558:	4613      	mov	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	440b      	add	r3, r1
 8006562:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006566:	2200      	movs	r2, #0
 8006568:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800656a:	7bfa      	ldrb	r2, [r7, #15]
 800656c:	6879      	ldr	r1, [r7, #4]
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	440b      	add	r3, r1
 8006578:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006580:	7bfa      	ldrb	r2, [r7, #15]
 8006582:	6879      	ldr	r1, [r7, #4]
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	440b      	add	r3, r1
 800658e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006592:	2200      	movs	r2, #0
 8006594:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	3301      	adds	r3, #1
 800659a:	73fb      	strb	r3, [r7, #15]
 800659c:	7bfa      	ldrb	r2, [r7, #15]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d3b5      	bcc.n	8006512 <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	687e      	ldr	r6, [r7, #4]
 80065ae:	466d      	mov	r5, sp
 80065b0:	f106 0410 	add.w	r4, r6, #16
 80065b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80065bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80065c0:	1d33      	adds	r3, r6, #4
 80065c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80065c4:	6838      	ldr	r0, [r7, #0]
 80065c6:	f003 ff13 	bl	800a3f0 <USB_DevInit>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d005      	beq.n	80065dc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e014      	b.n	8006606 <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d102      	bne.n	80065fa <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f001 fc55 	bl	8007ea4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4618      	mov	r0, r3
 8006600:	f006 f91f 	bl	800c842 <USB_DevDisconnect>

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800660e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b082      	sub	sp, #8
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800661c:	2b01      	cmp	r3, #1
 800661e:	d101      	bne.n	8006624 <HAL_PCD_Start+0x16>
 8006620:	2302      	movs	r3, #2
 8006622:	e012      	b.n	800664a <HAL_PCD_Start+0x3c>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4618      	mov	r0, r3
 8006632:	f003 fe9e 	bl	800a372 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4618      	mov	r0, r3
 800663c:	f006 f8ea 	bl	800c814 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b084      	sub	sp, #16
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4618      	mov	r0, r3
 8006660:	f006 f904 	bl	800c86c <USB_ReadInterrupts>
 8006664:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d003      	beq.n	8006678 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fb3e 	bl	8006cf2 <PCD_EP_ISR_Handler>

    return;
 8006676:	e110      	b.n	800689a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800667e:	2b00      	cmp	r3, #0
 8006680:	d013      	beq.n	80066aa <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800668a:	b29a      	uxth	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006694:	b292      	uxth	r2, r2
 8006696:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f008 f849 	bl	800e732 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80066a0:	2100      	movs	r1, #0
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f8fc 	bl	80068a0 <HAL_PCD_SetAddress>

    return;
 80066a8:	e0f7      	b.n	800689a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00c      	beq.n	80066ce <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066bc:	b29a      	uxth	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066c6:	b292      	uxth	r2, r2
 80066c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80066cc:	e0e5      	b.n	800689a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00c      	beq.n	80066f2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066ea:	b292      	uxth	r2, r2
 80066ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80066f0:	e0d3      	b.n	800689a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d034      	beq.n	8006766 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006704:	b29a      	uxth	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f022 0204 	bic.w	r2, r2, #4
 800670e:	b292      	uxth	r2, r2
 8006710:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800671c:	b29a      	uxth	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0208 	bic.w	r2, r2, #8
 8006726:	b292      	uxth	r2, r2
 8006728:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8006732:	2b01      	cmp	r3, #1
 8006734:	d107      	bne.n	8006746 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800673e:	2100      	movs	r1, #0
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f001 fbd9 	bl	8007ef8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f008 f82c 	bl	800e7a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006754:	b29a      	uxth	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800675e:	b292      	uxth	r2, r2
 8006760:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006764:	e099      	b.n	800689a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800676c:	2b00      	cmp	r3, #0
 800676e:	d027      	beq.n	80067c0 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006778:	b29a      	uxth	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 0208 	orr.w	r2, r2, #8
 8006782:	b292      	uxth	r2, r2
 8006784:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006790:	b29a      	uxth	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800679a:	b292      	uxth	r2, r2
 800679c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0204 	orr.w	r2, r2, #4
 80067b2:	b292      	uxth	r2, r2
 80067b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f007 ffd9 	bl	800e770 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80067be:	e06c      	b.n	800689a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d040      	beq.n	800684c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067dc:	b292      	uxth	r2, r2
 80067de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d12b      	bne.n	8006844 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0204 	orr.w	r2, r2, #4
 80067fe:	b292      	uxth	r2, r2
 8006800:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800680c:	b29a      	uxth	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0208 	orr.w	r2, r2, #8
 8006816:	b292      	uxth	r2, r2
 8006818:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800682c:	b29b      	uxth	r3, r3
 800682e:	089b      	lsrs	r3, r3, #2
 8006830:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800683a:	2101      	movs	r1, #1
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f001 fb5b 	bl	8007ef8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006842:	e02a      	b.n	800689a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f007 ff93 	bl	800e770 <HAL_PCD_SuspendCallback>
    return;
 800684a:	e026      	b.n	800689a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00f      	beq.n	8006876 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800685e:	b29a      	uxth	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006868:	b292      	uxth	r2, r2
 800686a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f007 ff51 	bl	800e716 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006874:	e011      	b.n	800689a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00c      	beq.n	800689a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006888:	b29a      	uxth	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006892:	b292      	uxth	r2, r2
 8006894:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006898:	bf00      	nop
  }
}
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	460b      	mov	r3, r1
 80068aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d101      	bne.n	80068ba <HAL_PCD_SetAddress+0x1a>
 80068b6:	2302      	movs	r3, #2
 80068b8:	e013      	b.n	80068e2 <HAL_PCD_SetAddress+0x42>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	78fa      	ldrb	r2, [r7, #3]
 80068c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	78fa      	ldrb	r2, [r7, #3]
 80068d0:	4611      	mov	r1, r2
 80068d2:	4618      	mov	r0, r3
 80068d4:	f005 ff8a 	bl	800c7ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b084      	sub	sp, #16
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	4608      	mov	r0, r1
 80068f4:	4611      	mov	r1, r2
 80068f6:	461a      	mov	r2, r3
 80068f8:	4603      	mov	r3, r0
 80068fa:	70fb      	strb	r3, [r7, #3]
 80068fc:	460b      	mov	r3, r1
 80068fe:	803b      	strh	r3, [r7, #0]
 8006900:	4613      	mov	r3, r2
 8006902:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006904:	2300      	movs	r3, #0
 8006906:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006908:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800690c:	2b00      	cmp	r3, #0
 800690e:	da0f      	bge.n	8006930 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	4613      	mov	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	4413      	add	r3, r2
 8006924:	3304      	adds	r3, #4
 8006926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2201      	movs	r2, #1
 800692c:	705a      	strb	r2, [r3, #1]
 800692e:	e00f      	b.n	8006950 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	f003 0207 	and.w	r2, r3, #7
 8006936:	4613      	mov	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	00db      	lsls	r3, r3, #3
 800693e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	4413      	add	r3, r2
 8006946:	3304      	adds	r3, #4
 8006948:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006950:	78fb      	ldrb	r3, [r7, #3]
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	b2da      	uxtb	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800695c:	883a      	ldrh	r2, [r7, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	78ba      	ldrb	r2, [r7, #2]
 8006966:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	785b      	ldrb	r3, [r3, #1]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d004      	beq.n	800697a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	b29a      	uxth	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800697a:	78bb      	ldrb	r3, [r7, #2]
 800697c:	2b02      	cmp	r3, #2
 800697e:	d102      	bne.n	8006986 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800698c:	2b01      	cmp	r3, #1
 800698e:	d101      	bne.n	8006994 <HAL_PCD_EP_Open+0xaa>
 8006990:	2302      	movs	r3, #2
 8006992:	e00e      	b.n	80069b2 <HAL_PCD_EP_Open+0xc8>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68f9      	ldr	r1, [r7, #12]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f003 fd46 	bl	800a434 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 80069b0:	7afb      	ldrb	r3, [r7, #11]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	460b      	mov	r3, r1
 80069c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80069c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	da0f      	bge.n	80069ee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069ce:	78fb      	ldrb	r3, [r7, #3]
 80069d0:	f003 0307 	and.w	r3, r3, #7
 80069d4:	1c5a      	adds	r2, r3, #1
 80069d6:	4613      	mov	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	00db      	lsls	r3, r3, #3
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	4413      	add	r3, r2
 80069e2:	3304      	adds	r3, #4
 80069e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2201      	movs	r2, #1
 80069ea:	705a      	strb	r2, [r3, #1]
 80069ec:	e00f      	b.n	8006a0e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069ee:	78fb      	ldrb	r3, [r7, #3]
 80069f0:	f003 0207 	and.w	r2, r3, #7
 80069f4:	4613      	mov	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	4413      	add	r3, r2
 8006a04:	3304      	adds	r3, #4
 8006a06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006a0e:	78fb      	ldrb	r3, [r7, #3]
 8006a10:	f003 0307 	and.w	r3, r3, #7
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d101      	bne.n	8006a28 <HAL_PCD_EP_Close+0x6e>
 8006a24:	2302      	movs	r3, #2
 8006a26:	e00e      	b.n	8006a46 <HAL_PCD_EP_Close+0x8c>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68f9      	ldr	r1, [r7, #12]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f004 f8b6 	bl	800aba8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b086      	sub	sp, #24
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	60f8      	str	r0, [r7, #12]
 8006a56:	607a      	str	r2, [r7, #4]
 8006a58:	603b      	str	r3, [r7, #0]
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a5e:	7afb      	ldrb	r3, [r7, #11]
 8006a60:	f003 0207 	and.w	r2, r3, #7
 8006a64:	4613      	mov	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	4413      	add	r3, r2
 8006a74:	3304      	adds	r3, #4
 8006a76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2200      	movs	r2, #0
 8006a88:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a90:	7afb      	ldrb	r3, [r7, #11]
 8006a92:	f003 0307 	and.w	r3, r3, #7
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006a9c:	7afb      	ldrb	r3, [r7, #11]
 8006a9e:	f003 0307 	and.w	r3, r3, #7
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d106      	bne.n	8006ab4 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6979      	ldr	r1, [r7, #20]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f004 fa68 	bl	800af82 <USB_EPStartXfer>
 8006ab2:	e005      	b.n	8006ac0 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6979      	ldr	r1, [r7, #20]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f004 fa61 	bl	800af82 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b083      	sub	sp, #12
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006ad6:	78fb      	ldrb	r3, [r7, #3]
 8006ad8:	f003 0207 	and.w	r2, r3, #7
 8006adc:	6879      	ldr	r1, [r7, #4]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	00db      	lsls	r3, r3, #3
 8006ae6:	440b      	add	r3, r1
 8006ae8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006aec:	681b      	ldr	r3, [r3, #0]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b086      	sub	sp, #24
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	603b      	str	r3, [r7, #0]
 8006b06:	460b      	mov	r3, r1
 8006b08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b0a:	7afb      	ldrb	r3, [r7, #11]
 8006b0c:	f003 0307 	and.w	r3, r3, #7
 8006b10:	1c5a      	adds	r2, r3, #1
 8006b12:	4613      	mov	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	3304      	adds	r3, #4
 8006b20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2201      	movs	r2, #1
 8006b46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b48:	7afb      	ldrb	r3, [r7, #11]
 8006b4a:	f003 0307 	and.w	r3, r3, #7
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b54:	7afb      	ldrb	r3, [r7, #11]
 8006b56:	f003 0307 	and.w	r3, r3, #7
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d106      	bne.n	8006b6c <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6979      	ldr	r1, [r7, #20]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f004 fa0c 	bl	800af82 <USB_EPStartXfer>
 8006b6a:	e005      	b.n	8006b78 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6979      	ldr	r1, [r7, #20]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f004 fa05 	bl	800af82 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3718      	adds	r7, #24
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006b8e:	78fb      	ldrb	r3, [r7, #3]
 8006b90:	f003 0207 	and.w	r2, r3, #7
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d901      	bls.n	8006ba0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e04e      	b.n	8006c3e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ba0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	da0f      	bge.n	8006bc8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ba8:	78fb      	ldrb	r3, [r7, #3]
 8006baa:	f003 0307 	and.w	r3, r3, #7
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	00db      	lsls	r3, r3, #3
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	4413      	add	r3, r2
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	705a      	strb	r2, [r3, #1]
 8006bc6:	e00d      	b.n	8006be4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006bc8:	78fa      	ldrb	r2, [r7, #3]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	00db      	lsls	r3, r3, #3
 8006bd2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	4413      	add	r3, r2
 8006bda:	3304      	adds	r3, #4
 8006bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2201      	movs	r2, #1
 8006be8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bea:	78fb      	ldrb	r3, [r7, #3]
 8006bec:	f003 0307 	and.w	r3, r3, #7
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d101      	bne.n	8006c04 <HAL_PCD_EP_SetStall+0x82>
 8006c00:	2302      	movs	r3, #2
 8006c02:	e01c      	b.n	8006c3e <HAL_PCD_EP_SetStall+0xbc>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68f9      	ldr	r1, [r7, #12]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f005 fceb 	bl	800c5ee <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c18:	78fb      	ldrb	r3, [r7, #3]
 8006c1a:	f003 0307 	and.w	r3, r3, #7
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d108      	bne.n	8006c34 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	4610      	mov	r0, r2
 8006c30:	f005 fe2c 	bl	800c88c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b084      	sub	sp, #16
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	460b      	mov	r3, r1
 8006c50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006c52:	78fb      	ldrb	r3, [r7, #3]
 8006c54:	f003 020f 	and.w	r2, r3, #15
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d901      	bls.n	8006c64 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e042      	b.n	8006cea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	da0f      	bge.n	8006c8c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c6c:	78fb      	ldrb	r3, [r7, #3]
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	1c5a      	adds	r2, r3, #1
 8006c74:	4613      	mov	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	4413      	add	r3, r2
 8006c80:	3304      	adds	r3, #4
 8006c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2201      	movs	r2, #1
 8006c88:	705a      	strb	r2, [r3, #1]
 8006c8a:	e00f      	b.n	8006cac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c8c:	78fb      	ldrb	r3, [r7, #3]
 8006c8e:	f003 0207 	and.w	r2, r3, #7
 8006c92:	4613      	mov	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	00db      	lsls	r3, r3, #3
 8006c9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cb2:	78fb      	ldrb	r3, [r7, #3]
 8006cb4:	f003 0307 	and.w	r3, r3, #7
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d101      	bne.n	8006ccc <HAL_PCD_EP_ClrStall+0x86>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e00e      	b.n	8006cea <HAL_PCD_EP_ClrStall+0xa4>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68f9      	ldr	r1, [r7, #12]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f005 fcd8 	bl	800c690 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b096      	sub	sp, #88	; 0x58
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006cfa:	e3a9      	b.n	8007450 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006d04:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006d08:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	f003 030f 	and.w	r3, r3, #15
 8006d12:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8006d16:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f040 8169 	bne.w	8006ff2 <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006d20:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d24:	f003 0310 	and.w	r3, r3, #16
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d150      	bne.n	8006dce <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	881b      	ldrh	r3, [r3, #0]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3c:	81fb      	strh	r3, [r7, #14]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	89fb      	ldrh	r3, [r7, #14]
 8006d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	332c      	adds	r3, #44	; 0x2c
 8006d54:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	461a      	mov	r2, r3
 8006d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	00db      	lsls	r3, r3, #3
 8006d68:	4413      	add	r3, r2
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	6812      	ldr	r2, [r2, #0]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d74:	881b      	ldrh	r3, [r3, #0]
 8006d76:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d7c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d80:	695a      	ldr	r2, [r3, #20]
 8006d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	441a      	add	r2, r3
 8006d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d8a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f007 fca7 	bl	800e6e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 8357 	beq.w	8007450 <PCD_EP_ISR_Handler+0x75e>
 8006da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f040 8352 	bne.w	8007450 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	b292      	uxth	r2, r2
 8006dc0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006dcc:	e340      	b.n	8007450 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8006dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006de0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d032      	beq.n	8006e52 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	461a      	mov	r2, r3
 8006df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	4413      	add	r3, r2
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	6812      	ldr	r2, [r2, #0]
 8006e04:	4413      	add	r3, r2
 8006e06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e0a:	881b      	ldrh	r3, [r3, #0]
 8006e0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e12:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6818      	ldr	r0, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8006e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e20:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e24:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f005 fd7e 	bl	800c928 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006e38:	4013      	ands	r3, r2
 8006e3a:	823b      	strh	r3, [r7, #16]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	8a3a      	ldrh	r2, [r7, #16]
 8006e42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e46:	b292      	uxth	r2, r2
 8006e48:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f007 fc1c 	bl	800e688 <HAL_PCD_SetupStageCallback>
 8006e50:	e2fe      	b.n	8007450 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006e52:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f280 82fa 	bge.w	8007450 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006e68:	4013      	ands	r3, r2
 8006e6a:	83fb      	strh	r3, [r7, #30]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	8bfa      	ldrh	r2, [r7, #30]
 8006e72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e76:	b292      	uxth	r2, r2
 8006e78:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	461a      	mov	r2, r3
 8006e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	00db      	lsls	r3, r3, #3
 8006e8c:	4413      	add	r3, r2
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	6812      	ldr	r2, [r2, #0]
 8006e92:	4413      	add	r3, r2
 8006e94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d019      	beq.n	8006ede <PCD_EP_ISR_Handler+0x1ec>
 8006eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d015      	beq.n	8006ede <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6818      	ldr	r0, [r3, #0]
 8006eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb8:	6959      	ldr	r1, [r3, #20]
 8006eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ebc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	f005 fd30 	bl	800c928 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eca:	695a      	ldr	r2, [r3, #20]
 8006ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	441a      	add	r2, r3
 8006ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f007 fbe7 	bl	800e6ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	881b      	ldrh	r3, [r3, #0]
 8006ee4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006ee8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f040 82ad 	bne.w	8007450 <PCD_EP_ISR_Handler+0x75e>
 8006ef6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006efa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006efe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f02:	f000 82a5 	beq.w	8007450 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	61bb      	str	r3, [r7, #24]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	461a      	mov	r2, r3
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	61bb      	str	r3, [r7, #24]
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f24:	617b      	str	r3, [r7, #20]
 8006f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	2b3e      	cmp	r3, #62	; 0x3e
 8006f2c:	d918      	bls.n	8006f60 <PCD_EP_ISR_Handler+0x26e>
 8006f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	095b      	lsrs	r3, r3, #5
 8006f34:	647b      	str	r3, [r7, #68]	; 0x44
 8006f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	f003 031f 	and.w	r3, r3, #31
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d102      	bne.n	8006f48 <PCD_EP_ISR_Handler+0x256>
 8006f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f44:	3b01      	subs	r3, #1
 8006f46:	647b      	str	r3, [r7, #68]	; 0x44
 8006f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	029b      	lsls	r3, r3, #10
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	801a      	strh	r2, [r3, #0]
 8006f5e:	e029      	b.n	8006fb4 <PCD_EP_ISR_Handler+0x2c2>
 8006f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d112      	bne.n	8006f8e <PCD_EP_ISR_Handler+0x29c>
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	801a      	strh	r2, [r3, #0]
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	801a      	strh	r2, [r3, #0]
 8006f8c:	e012      	b.n	8006fb4 <PCD_EP_ISR_Handler+0x2c2>
 8006f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	085b      	lsrs	r3, r3, #1
 8006f94:	647b      	str	r3, [r7, #68]	; 0x44
 8006f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <PCD_EP_ISR_Handler+0x2b6>
 8006fa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8006fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	029b      	lsls	r3, r3, #10
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc4:	827b      	strh	r3, [r7, #18]
 8006fc6:	8a7b      	ldrh	r3, [r7, #18]
 8006fc8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006fcc:	827b      	strh	r3, [r7, #18]
 8006fce:	8a7b      	ldrh	r3, [r7, #18]
 8006fd0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006fd4:	827b      	strh	r3, [r7, #18]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	8a7b      	ldrh	r3, [r7, #18]
 8006fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	8013      	strh	r3, [r2, #0]
 8006ff0:	e22e      	b.n	8007450 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007006:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800700a:	2b00      	cmp	r3, #0
 800700c:	f280 80f7 	bge.w	80071fe <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	461a      	mov	r2, r3
 8007016:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4413      	add	r3, r2
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	b29a      	uxth	r2, r3
 8007022:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007026:	4013      	ands	r3, r2
 8007028:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	461a      	mov	r2, r3
 8007032:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800703e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007042:	b292      	uxth	r2, r2
 8007044:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007046:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800704a:	4613      	mov	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	00db      	lsls	r3, r3, #3
 8007052:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	4413      	add	r3, r2
 800705a:	3304      	adds	r3, #4
 800705c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800705e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007060:	7b1b      	ldrb	r3, [r3, #12]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d123      	bne.n	80070ae <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800706e:	b29b      	uxth	r3, r3
 8007070:	461a      	mov	r2, r3
 8007072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	00db      	lsls	r3, r3, #3
 8007078:	4413      	add	r3, r2
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	6812      	ldr	r2, [r2, #0]
 800707e:	4413      	add	r3, r2
 8007080:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800708a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800708e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 808e 	beq.w	80071b4 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6818      	ldr	r0, [r3, #0]
 800709c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800709e:	6959      	ldr	r1, [r3, #20]
 80070a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a2:	88da      	ldrh	r2, [r3, #6]
 80070a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80070a8:	f005 fc3e 	bl	800c928 <USB_ReadPMA>
 80070ac:	e082      	b.n	80071b4 <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80070ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b0:	78db      	ldrb	r3, [r3, #3]
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d10a      	bne.n	80070cc <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80070b6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80070ba:	461a      	mov	r2, r3
 80070bc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f9d4 	bl	800746c <HAL_PCD_EP_DB_Receive>
 80070c4:	4603      	mov	r3, r0
 80070c6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80070ca:	e073      	b.n	80071b4 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	461a      	mov	r2, r3
 80070d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	461a      	mov	r2, r3
 80070f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	441a      	add	r2, r3
 80070f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80070fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007108:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800710c:	b29b      	uxth	r3, r3
 800710e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	461a      	mov	r2, r3
 8007116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	b29b      	uxth	r3, r3
 8007122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d022      	beq.n	8007170 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007132:	b29b      	uxth	r3, r3
 8007134:	461a      	mov	r2, r3
 8007136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	4413      	add	r3, r2
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	6812      	ldr	r2, [r2, #0]
 8007142:	4413      	add	r3, r2
 8007144:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800714e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8007152:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007156:	2b00      	cmp	r3, #0
 8007158:	d02c      	beq.n	80071b4 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6818      	ldr	r0, [r3, #0]
 800715e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007160:	6959      	ldr	r1, [r3, #20]
 8007162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007164:	891a      	ldrh	r2, [r3, #8]
 8007166:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800716a:	f005 fbdd 	bl	800c928 <USB_ReadPMA>
 800716e:	e021      	b.n	80071b4 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007178:	b29b      	uxth	r3, r3
 800717a:	461a      	mov	r2, r3
 800717c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	00db      	lsls	r3, r3, #3
 8007182:	4413      	add	r3, r2
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	6812      	ldr	r2, [r2, #0]
 8007188:	4413      	add	r3, r2
 800718a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007194:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8007198:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800719c:	2b00      	cmp	r3, #0
 800719e:	d009      	beq.n	80071b4 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6818      	ldr	r0, [r3, #0]
 80071a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a6:	6959      	ldr	r1, [r3, #20]
 80071a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071aa:	895a      	ldrh	r2, [r3, #10]
 80071ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80071b0:	f005 fbba 	bl	800c928 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80071b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b6:	69da      	ldr	r2, [r3, #28]
 80071b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80071bc:	441a      	add	r2, r3
 80071be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80071c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c4:	695a      	ldr	r2, [r3, #20]
 80071c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80071ca:	441a      	add	r2, r3
 80071cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ce:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80071d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d005      	beq.n	80071e4 <PCD_EP_ISR_Handler+0x4f2>
 80071d8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80071dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d206      	bcs.n	80071f2 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80071e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	4619      	mov	r1, r3
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f007 fa5e 	bl	800e6ac <HAL_PCD_DataOutStageCallback>
 80071f0:	e005      	b.n	80071fe <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80071f8:	4618      	mov	r0, r3
 80071fa:	f003 fec2 	bl	800af82 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80071fe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007206:	2b00      	cmp	r3, #0
 8007208:	f000 8122 	beq.w	8007450 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 800720c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007210:	1c5a      	adds	r2, r3, #1
 8007212:	4613      	mov	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	00db      	lsls	r3, r3, #3
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	4413      	add	r3, r2
 800721e:	3304      	adds	r3, #4
 8007220:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	461a      	mov	r2, r3
 8007228:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	881b      	ldrh	r3, [r3, #0]
 8007232:	b29b      	uxth	r3, r3
 8007234:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	461a      	mov	r2, r3
 8007246:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	441a      	add	r2, r3
 800724e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800725a:	b29b      	uxth	r3, r3
 800725c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800725e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007260:	78db      	ldrb	r3, [r3, #3]
 8007262:	2b01      	cmp	r3, #1
 8007264:	f040 80a2 	bne.w	80073ac <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8007268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800726a:	2200      	movs	r2, #0
 800726c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800726e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007270:	7b1b      	ldrb	r3, [r3, #12]
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 8093 	beq.w	800739e <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007278:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800727c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007280:	2b00      	cmp	r3, #0
 8007282:	d046      	beq.n	8007312 <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007286:	785b      	ldrb	r3, [r3, #1]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d126      	bne.n	80072da <PCD_EP_ISR_Handler+0x5e8>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	627b      	str	r3, [r7, #36]	; 0x24
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800729a:	b29b      	uxth	r3, r3
 800729c:	461a      	mov	r2, r3
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	4413      	add	r3, r2
 80072a2:	627b      	str	r3, [r7, #36]	; 0x24
 80072a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	00da      	lsls	r2, r3, #3
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	4413      	add	r3, r2
 80072ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072b2:	623b      	str	r3, [r7, #32]
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072be:	b29a      	uxth	r2, r3
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	801a      	strh	r2, [r3, #0]
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	801a      	strh	r2, [r3, #0]
 80072d8:	e061      	b.n	800739e <PCD_EP_ISR_Handler+0x6ac>
 80072da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072dc:	785b      	ldrb	r3, [r3, #1]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d15d      	bne.n	800739e <PCD_EP_ISR_Handler+0x6ac>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	461a      	mov	r2, r3
 80072f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f6:	4413      	add	r3, r2
 80072f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	00da      	lsls	r2, r3, #3
 8007300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007302:	4413      	add	r3, r2
 8007304:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007308:	62bb      	str	r3, [r7, #40]	; 0x28
 800730a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730c:	2200      	movs	r2, #0
 800730e:	801a      	strh	r2, [r3, #0]
 8007310:	e045      	b.n	800739e <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800731a:	785b      	ldrb	r3, [r3, #1]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d126      	bne.n	800736e <PCD_EP_ISR_Handler+0x67c>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	637b      	str	r3, [r7, #52]	; 0x34
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800732e:	b29b      	uxth	r3, r3
 8007330:	461a      	mov	r2, r3
 8007332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007334:	4413      	add	r3, r2
 8007336:	637b      	str	r3, [r7, #52]	; 0x34
 8007338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	00da      	lsls	r2, r3, #3
 800733e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007340:	4413      	add	r3, r2
 8007342:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007346:	633b      	str	r3, [r7, #48]	; 0x30
 8007348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	b29b      	uxth	r3, r3
 800734e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007352:	b29a      	uxth	r2, r3
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	801a      	strh	r2, [r3, #0]
 8007358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735a:	881b      	ldrh	r3, [r3, #0]
 800735c:	b29b      	uxth	r3, r3
 800735e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007366:	b29a      	uxth	r2, r3
 8007368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736a:	801a      	strh	r2, [r3, #0]
 800736c:	e017      	b.n	800739e <PCD_EP_ISR_Handler+0x6ac>
 800736e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007370:	785b      	ldrb	r3, [r3, #1]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d113      	bne.n	800739e <PCD_EP_ISR_Handler+0x6ac>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800737e:	b29b      	uxth	r3, r3
 8007380:	461a      	mov	r2, r3
 8007382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007384:	4413      	add	r3, r2
 8007386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	00da      	lsls	r2, r3, #3
 800738e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007390:	4413      	add	r3, r2
 8007392:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007396:	63bb      	str	r3, [r7, #56]	; 0x38
 8007398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739a:	2200      	movs	r2, #0
 800739c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800739e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f007 f99c 	bl	800e6e2 <HAL_PCD_DataInStageCallback>
 80073aa:	e051      	b.n	8007450 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80073ac:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80073b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d144      	bne.n	8007442 <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	461a      	mov	r2, r3
 80073c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	00db      	lsls	r3, r3, #3
 80073ca:	4413      	add	r3, r2
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	6812      	ldr	r2, [r2, #0]
 80073d0:	4413      	add	r3, r2
 80073d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80073e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073e2:	699a      	ldr	r2, [r3, #24]
 80073e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d907      	bls.n	80073fc <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 80073ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ee:	699a      	ldr	r2, [r3, #24]
 80073f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80073f4:	1ad2      	subs	r2, r2, r3
 80073f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073f8:	619a      	str	r2, [r3, #24]
 80073fa:	e002      	b.n	8007402 <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 80073fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073fe:	2200      	movs	r2, #0
 8007400:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d106      	bne.n	8007418 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800740a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f007 f966 	bl	800e6e2 <HAL_PCD_DataInStageCallback>
 8007416:	e01b      	b.n	8007450 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800741a:	695a      	ldr	r2, [r3, #20]
 800741c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007420:	441a      	add	r2, r3
 8007422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007424:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007428:	69da      	ldr	r2, [r3, #28]
 800742a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800742e:	441a      	add	r2, r3
 8007430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007432:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800743a:	4618      	mov	r0, r3
 800743c:	f003 fda1 	bl	800af82 <USB_EPStartXfer>
 8007440:	e006      	b.n	8007450 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007442:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007446:	461a      	mov	r2, r3
 8007448:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f917 	bl	800767e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007458:	b29b      	uxth	r3, r3
 800745a:	b21b      	sxth	r3, r3
 800745c:	2b00      	cmp	r3, #0
 800745e:	f6ff ac4d 	blt.w	8006cfc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3758      	adds	r7, #88	; 0x58
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	4613      	mov	r3, r2
 8007478:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800747a:	88fb      	ldrh	r3, [r7, #6]
 800747c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d07c      	beq.n	800757e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800748c:	b29b      	uxth	r3, r3
 800748e:	461a      	mov	r2, r3
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	00db      	lsls	r3, r3, #3
 8007496:	4413      	add	r3, r2
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	6812      	ldr	r2, [r2, #0]
 800749c:	4413      	add	r3, r2
 800749e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074a2:	881b      	ldrh	r3, [r3, #0]
 80074a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074a8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	699a      	ldr	r2, [r3, #24]
 80074ae:	8b7b      	ldrh	r3, [r7, #26]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d306      	bcc.n	80074c2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	699a      	ldr	r2, [r3, #24]
 80074b8:	8b7b      	ldrh	r3, [r7, #26]
 80074ba:	1ad2      	subs	r2, r2, r3
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	619a      	str	r2, [r3, #24]
 80074c0:	e002      	b.n	80074c8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2200      	movs	r2, #0
 80074c6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d123      	bne.n	8007518 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	461a      	mov	r2, r3
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ea:	833b      	strh	r3, [r7, #24]
 80074ec:	8b3b      	ldrh	r3, [r7, #24]
 80074ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80074f2:	833b      	strh	r3, [r7, #24]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	461a      	mov	r2, r3
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	441a      	add	r2, r3
 8007502:	8b3b      	ldrh	r3, [r7, #24]
 8007504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800750c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007514:	b29b      	uxth	r3, r3
 8007516:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007518:	88fb      	ldrh	r3, [r7, #6]
 800751a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751e:	2b00      	cmp	r3, #0
 8007520:	d01f      	beq.n	8007562 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	b29b      	uxth	r3, r3
 8007534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800753c:	82fb      	strh	r3, [r7, #22]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	441a      	add	r2, r3
 800754c:	8afb      	ldrh	r3, [r7, #22]
 800754e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800755a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800755e:	b29b      	uxth	r3, r3
 8007560:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007562:	8b7b      	ldrh	r3, [r7, #26]
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 8085 	beq.w	8007674 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6818      	ldr	r0, [r3, #0]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	6959      	ldr	r1, [r3, #20]
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	891a      	ldrh	r2, [r3, #8]
 8007576:	8b7b      	ldrh	r3, [r7, #26]
 8007578:	f005 f9d6 	bl	800c928 <USB_ReadPMA>
 800757c:	e07a      	b.n	8007674 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007586:	b29b      	uxth	r3, r3
 8007588:	461a      	mov	r2, r3
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	00db      	lsls	r3, r3, #3
 8007590:	4413      	add	r3, r2
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	6812      	ldr	r2, [r2, #0]
 8007596:	4413      	add	r3, r2
 8007598:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800759c:	881b      	ldrh	r3, [r3, #0]
 800759e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075a2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	699a      	ldr	r2, [r3, #24]
 80075a8:	8b7b      	ldrh	r3, [r7, #26]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d306      	bcc.n	80075bc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	699a      	ldr	r2, [r3, #24]
 80075b2:	8b7b      	ldrh	r3, [r7, #26]
 80075b4:	1ad2      	subs	r2, r2, r3
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	619a      	str	r2, [r3, #24]
 80075ba:	e002      	b.n	80075c2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2200      	movs	r2, #0
 80075c0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d123      	bne.n	8007612 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	b29b      	uxth	r3, r3
 80075dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075e4:	83fb      	strh	r3, [r7, #30]
 80075e6:	8bfb      	ldrh	r3, [r7, #30]
 80075e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80075ec:	83fb      	strh	r3, [r7, #30]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	441a      	add	r2, r3
 80075fc:	8bfb      	ldrh	r3, [r7, #30]
 80075fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800760a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800760e:	b29b      	uxth	r3, r3
 8007610:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007612:	88fb      	ldrh	r3, [r7, #6]
 8007614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007618:	2b00      	cmp	r3, #0
 800761a:	d11f      	bne.n	800765c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	461a      	mov	r2, r3
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4413      	add	r3, r2
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	b29b      	uxth	r3, r3
 800762e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007636:	83bb      	strh	r3, [r7, #28]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	461a      	mov	r2, r3
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	441a      	add	r2, r3
 8007646:	8bbb      	ldrh	r3, [r7, #28]
 8007648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800764c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007654:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007658:	b29b      	uxth	r3, r3
 800765a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800765c:	8b7b      	ldrh	r3, [r7, #26]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d008      	beq.n	8007674 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6818      	ldr	r0, [r3, #0]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	6959      	ldr	r1, [r3, #20]
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	895a      	ldrh	r2, [r3, #10]
 800766e:	8b7b      	ldrh	r3, [r7, #26]
 8007670:	f005 f95a 	bl	800c928 <USB_ReadPMA>
    }
  }

  return count;
 8007674:	8b7b      	ldrh	r3, [r7, #26]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3720      	adds	r7, #32
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b0a2      	sub	sp, #136	; 0x88
 8007682:	af00      	add	r7, sp, #0
 8007684:	60f8      	str	r0, [r7, #12]
 8007686:	60b9      	str	r1, [r7, #8]
 8007688:	4613      	mov	r3, r2
 800768a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800768c:	88fb      	ldrh	r3, [r7, #6]
 800768e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 81c5 	beq.w	8007a22 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	461a      	mov	r2, r3
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	00db      	lsls	r3, r3, #3
 80076aa:	4413      	add	r3, r2
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	6812      	ldr	r2, [r2, #0]
 80076b0:	4413      	add	r3, r2
 80076b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	699a      	ldr	r2, [r3, #24]
 80076c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d907      	bls.n	80076dc <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	699a      	ldr	r2, [r3, #24]
 80076d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80076d4:	1ad2      	subs	r2, r2, r3
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	619a      	str	r2, [r3, #24]
 80076da:	e002      	b.n	80076e2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	2200      	movs	r2, #0
 80076e0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f040 80b9 	bne.w	800785e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	785b      	ldrb	r3, [r3, #1]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d126      	bne.n	8007742 <HAL_PCD_EP_DB_Transmit+0xc4>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007702:	b29b      	uxth	r3, r3
 8007704:	461a      	mov	r2, r3
 8007706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007708:	4413      	add	r3, r2
 800770a:	62bb      	str	r3, [r7, #40]	; 0x28
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	00da      	lsls	r2, r3, #3
 8007712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007714:	4413      	add	r3, r2
 8007716:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800771a:	627b      	str	r3, [r7, #36]	; 0x24
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771e:	881b      	ldrh	r3, [r3, #0]
 8007720:	b29b      	uxth	r3, r3
 8007722:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007726:	b29a      	uxth	r2, r3
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	801a      	strh	r2, [r3, #0]
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	881b      	ldrh	r3, [r3, #0]
 8007730:	b29b      	uxth	r3, r3
 8007732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800773a:	b29a      	uxth	r2, r3
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	801a      	strh	r2, [r3, #0]
 8007740:	e01a      	b.n	8007778 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	785b      	ldrb	r3, [r3, #1]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d116      	bne.n	8007778 <HAL_PCD_EP_DB_Transmit+0xfa>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	633b      	str	r3, [r7, #48]	; 0x30
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007758:	b29b      	uxth	r3, r3
 800775a:	461a      	mov	r2, r3
 800775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775e:	4413      	add	r3, r2
 8007760:	633b      	str	r3, [r7, #48]	; 0x30
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	00da      	lsls	r2, r3, #3
 8007768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776a:	4413      	add	r3, r2
 800776c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007774:	2200      	movs	r2, #0
 8007776:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	623b      	str	r3, [r7, #32]
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	785b      	ldrb	r3, [r3, #1]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d126      	bne.n	80077d4 <HAL_PCD_EP_DB_Transmit+0x156>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	61bb      	str	r3, [r7, #24]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007794:	b29b      	uxth	r3, r3
 8007796:	461a      	mov	r2, r3
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	4413      	add	r3, r2
 800779c:	61bb      	str	r3, [r7, #24]
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	00da      	lsls	r2, r3, #3
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	4413      	add	r3, r2
 80077a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077ac:	617b      	str	r3, [r7, #20]
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	801a      	strh	r2, [r3, #0]
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	881b      	ldrh	r3, [r3, #0]
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	801a      	strh	r2, [r3, #0]
 80077d2:	e017      	b.n	8007804 <HAL_PCD_EP_DB_Transmit+0x186>
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	785b      	ldrb	r3, [r3, #1]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d113      	bne.n	8007804 <HAL_PCD_EP_DB_Transmit+0x186>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	461a      	mov	r2, r3
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	4413      	add	r3, r2
 80077ec:	623b      	str	r3, [r7, #32]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	00da      	lsls	r2, r3, #3
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	4413      	add	r3, r2
 80077f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077fc:	61fb      	str	r3, [r7, #28]
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	2200      	movs	r2, #0
 8007802:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	4619      	mov	r1, r3
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f006 ff69 	bl	800e6e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007810:	88fb      	ldrh	r3, [r7, #6]
 8007812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 82d2 	beq.w	8007dc0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	461a      	mov	r2, r3
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4413      	add	r3, r2
 800782a:	881b      	ldrh	r3, [r3, #0]
 800782c:	b29b      	uxth	r3, r3
 800782e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007836:	827b      	strh	r3, [r7, #18]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	461a      	mov	r2, r3
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	441a      	add	r2, r3
 8007846:	8a7b      	ldrh	r3, [r7, #18]
 8007848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800784c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007850:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007858:	b29b      	uxth	r3, r3
 800785a:	8013      	strh	r3, [r2, #0]
 800785c:	e2b0      	b.n	8007dc0 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800785e:	88fb      	ldrh	r3, [r7, #6]
 8007860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d021      	beq.n	80078ac <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	461a      	mov	r2, r3
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4413      	add	r3, r2
 8007876:	881b      	ldrh	r3, [r3, #0]
 8007878:	b29b      	uxth	r3, r3
 800787a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800787e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007882:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	461a      	mov	r2, r3
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	441a      	add	r2, r3
 8007894:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800789c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	f040 8284 	bne.w	8007dc0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	695a      	ldr	r2, [r3, #20]
 80078bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80078c0:	441a      	add	r2, r3
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	69da      	ldr	r2, [r3, #28]
 80078ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80078ce:	441a      	add	r2, r3
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	6a1a      	ldr	r2, [r3, #32]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d309      	bcc.n	80078f4 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	6a1a      	ldr	r2, [r3, #32]
 80078ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ec:	1ad2      	subs	r2, r2, r3
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	621a      	str	r2, [r3, #32]
 80078f2:	e015      	b.n	8007920 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d107      	bne.n	800790c <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80078fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007900:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800790a:	e009      	b.n	8007920 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	2200      	movs	r2, #0
 800791e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	785b      	ldrb	r3, [r3, #1]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d155      	bne.n	80079d4 <HAL_PCD_EP_DB_Transmit+0x356>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	63bb      	str	r3, [r7, #56]	; 0x38
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007936:	b29b      	uxth	r3, r3
 8007938:	461a      	mov	r2, r3
 800793a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793c:	4413      	add	r3, r2
 800793e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	00da      	lsls	r2, r3, #3
 8007946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007948:	4413      	add	r3, r2
 800794a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800794e:	637b      	str	r3, [r7, #52]	; 0x34
 8007950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007952:	2b3e      	cmp	r3, #62	; 0x3e
 8007954:	d916      	bls.n	8007984 <HAL_PCD_EP_DB_Transmit+0x306>
 8007956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007958:	095b      	lsrs	r3, r3, #5
 800795a:	64bb      	str	r3, [r7, #72]	; 0x48
 800795c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800795e:	f003 031f 	and.w	r3, r3, #31
 8007962:	2b00      	cmp	r3, #0
 8007964:	d102      	bne.n	800796c <HAL_PCD_EP_DB_Transmit+0x2ee>
 8007966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007968:	3b01      	subs	r3, #1
 800796a:	64bb      	str	r3, [r7, #72]	; 0x48
 800796c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800796e:	b29b      	uxth	r3, r3
 8007970:	029b      	lsls	r3, r3, #10
 8007972:	b29b      	uxth	r3, r3
 8007974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800797c:	b29a      	uxth	r2, r3
 800797e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007980:	801a      	strh	r2, [r3, #0]
 8007982:	e043      	b.n	8007a0c <HAL_PCD_EP_DB_Transmit+0x38e>
 8007984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007986:	2b00      	cmp	r3, #0
 8007988:	d112      	bne.n	80079b0 <HAL_PCD_EP_DB_Transmit+0x332>
 800798a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798c:	881b      	ldrh	r3, [r3, #0]
 800798e:	b29b      	uxth	r3, r3
 8007990:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007994:	b29a      	uxth	r2, r3
 8007996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007998:	801a      	strh	r2, [r3, #0]
 800799a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	b29b      	uxth	r3, r3
 80079a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ac:	801a      	strh	r2, [r3, #0]
 80079ae:	e02d      	b.n	8007a0c <HAL_PCD_EP_DB_Transmit+0x38e>
 80079b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079b2:	085b      	lsrs	r3, r3, #1
 80079b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80079b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <HAL_PCD_EP_DB_Transmit+0x348>
 80079c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079c2:	3301      	adds	r3, #1
 80079c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80079c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	029b      	lsls	r3, r3, #10
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d0:	801a      	strh	r2, [r3, #0]
 80079d2:	e01b      	b.n	8007a0c <HAL_PCD_EP_DB_Transmit+0x38e>
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	785b      	ldrb	r3, [r3, #1]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d117      	bne.n	8007a0c <HAL_PCD_EP_DB_Transmit+0x38e>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	643b      	str	r3, [r7, #64]	; 0x40
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	461a      	mov	r2, r3
 80079ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079f0:	4413      	add	r3, r2
 80079f2:	643b      	str	r3, [r7, #64]	; 0x40
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	00da      	lsls	r2, r3, #3
 80079fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079fc:	4413      	add	r3, r2
 80079fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a0a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6818      	ldr	r0, [r3, #0]
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	6959      	ldr	r1, [r3, #20]
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	891a      	ldrh	r2, [r3, #8]
 8007a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	f004 ff42 	bl	800c8a4 <USB_WritePMA>
 8007a20:	e1ce      	b.n	8007dc0 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	00db      	lsls	r3, r3, #3
 8007a34:	4413      	add	r3, r2
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	6812      	ldr	r2, [r2, #0]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a46:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	699a      	ldr	r2, [r3, #24]
 8007a4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d307      	bcc.n	8007a66 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	699a      	ldr	r2, [r3, #24]
 8007a5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a5e:	1ad2      	subs	r2, r2, r3
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	619a      	str	r2, [r3, #24]
 8007a64:	e002      	b.n	8007a6c <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f040 80c4 	bne.w	8007bfe <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	785b      	ldrb	r3, [r3, #1]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d126      	bne.n	8007acc <HAL_PCD_EP_DB_Transmit+0x44e>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	461a      	mov	r2, r3
 8007a90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a92:	4413      	add	r3, r2
 8007a94:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	00da      	lsls	r2, r3, #3
 8007a9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007aa4:	667b      	str	r3, [r7, #100]	; 0x64
 8007aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ab4:	801a      	strh	r2, [r3, #0]
 8007ab6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ab8:	881b      	ldrh	r3, [r3, #0]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ac8:	801a      	strh	r2, [r3, #0]
 8007aca:	e01a      	b.n	8007b02 <HAL_PCD_EP_DB_Transmit+0x484>
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	785b      	ldrb	r3, [r3, #1]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d116      	bne.n	8007b02 <HAL_PCD_EP_DB_Transmit+0x484>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	673b      	str	r3, [r7, #112]	; 0x70
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ae8:	4413      	add	r3, r2
 8007aea:	673b      	str	r3, [r7, #112]	; 0x70
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	00da      	lsls	r2, r3, #3
 8007af2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007af4:	4413      	add	r3, r2
 8007af6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007afa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007afe:	2200      	movs	r2, #0
 8007b00:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	785b      	ldrb	r3, [r3, #1]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d12f      	bne.n	8007b70 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	461a      	mov	r2, r3
 8007b24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b28:	4413      	add	r3, r2
 8007b2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	00da      	lsls	r2, r3, #3
 8007b34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b38:	4413      	add	r3, r2
 8007b3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b46:	881b      	ldrh	r3, [r3, #0]
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b54:	801a      	strh	r2, [r3, #0]
 8007b56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b6c:	801a      	strh	r2, [r3, #0]
 8007b6e:	e017      	b.n	8007ba0 <HAL_PCD_EP_DB_Transmit+0x522>
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	785b      	ldrb	r3, [r3, #1]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d113      	bne.n	8007ba0 <HAL_PCD_EP_DB_Transmit+0x522>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	461a      	mov	r2, r3
 8007b84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b86:	4413      	add	r3, r2
 8007b88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	00da      	lsls	r2, r3, #3
 8007b90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b92:	4413      	add	r3, r2
 8007b94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b98:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f006 fd9b 	bl	800e6e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007bac:	88fb      	ldrh	r3, [r7, #6]
 8007bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f040 8104 	bne.w	8007dc0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	881b      	ldrh	r3, [r3, #0]
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	441a      	add	r2, r3
 8007be4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	8013      	strh	r3, [r2, #0]
 8007bfc:	e0e0      	b.n	8007dc0 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007bfe:	88fb      	ldrh	r3, [r7, #6]
 8007c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d121      	bne.n	8007c4c <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	881b      	ldrh	r3, [r3, #0]
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c22:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	441a      	add	r2, r3
 8007c34:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007c38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	f040 80b4 	bne.w	8007dc0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	695a      	ldr	r2, [r3, #20]
 8007c5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c60:	441a      	add	r2, r3
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	69da      	ldr	r2, [r3, #28]
 8007c6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c6e:	441a      	add	r2, r3
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	6a1a      	ldr	r2, [r3, #32]
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d309      	bcc.n	8007c94 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	6a1a      	ldr	r2, [r3, #32]
 8007c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c8c:	1ad2      	subs	r2, r2, r3
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	621a      	str	r2, [r3, #32]
 8007c92:	e015      	b.n	8007cc0 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	6a1b      	ldr	r3, [r3, #32]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d107      	bne.n	8007cac <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8007c9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ca0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007caa:	e009      	b.n	8007cc0 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	6a1b      	ldr	r3, [r3, #32]
 8007cb0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	663b      	str	r3, [r7, #96]	; 0x60
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	785b      	ldrb	r3, [r3, #1]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d155      	bne.n	8007d7a <HAL_PCD_EP_DB_Transmit+0x6fc>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	461a      	mov	r2, r3
 8007ce0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ce2:	4413      	add	r3, r2
 8007ce4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	00da      	lsls	r2, r3, #3
 8007cec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cee:	4413      	add	r3, r2
 8007cf0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007cf4:	657b      	str	r3, [r7, #84]	; 0x54
 8007cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cf8:	2b3e      	cmp	r3, #62	; 0x3e
 8007cfa:	d916      	bls.n	8007d2a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8007cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cfe:	095b      	lsrs	r3, r3, #5
 8007d00:	677b      	str	r3, [r7, #116]	; 0x74
 8007d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d04:	f003 031f 	and.w	r3, r3, #31
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d102      	bne.n	8007d12 <HAL_PCD_EP_DB_Transmit+0x694>
 8007d0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	677b      	str	r3, [r7, #116]	; 0x74
 8007d12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	029b      	lsls	r3, r3, #10
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d26:	801a      	strh	r2, [r3, #0]
 8007d28:	e040      	b.n	8007dac <HAL_PCD_EP_DB_Transmit+0x72e>
 8007d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d112      	bne.n	8007d56 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8007d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d3e:	801a      	strh	r2, [r3, #0]
 8007d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d42:	881b      	ldrh	r3, [r3, #0]
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d52:	801a      	strh	r2, [r3, #0]
 8007d54:	e02a      	b.n	8007dac <HAL_PCD_EP_DB_Transmit+0x72e>
 8007d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d58:	085b      	lsrs	r3, r3, #1
 8007d5a:	677b      	str	r3, [r7, #116]	; 0x74
 8007d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <HAL_PCD_EP_DB_Transmit+0x6ee>
 8007d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d68:	3301      	adds	r3, #1
 8007d6a:	677b      	str	r3, [r7, #116]	; 0x74
 8007d6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	029b      	lsls	r3, r3, #10
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d76:	801a      	strh	r2, [r3, #0]
 8007d78:	e018      	b.n	8007dac <HAL_PCD_EP_DB_Transmit+0x72e>
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	785b      	ldrb	r3, [r3, #1]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d114      	bne.n	8007dac <HAL_PCD_EP_DB_Transmit+0x72e>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d90:	4413      	add	r3, r2
 8007d92:	663b      	str	r3, [r7, #96]	; 0x60
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	00da      	lsls	r2, r3, #3
 8007d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007da2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007da4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007daa:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6818      	ldr	r0, [r3, #0]
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	6959      	ldr	r1, [r3, #20]
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	895a      	ldrh	r2, [r3, #10]
 8007db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	f004 fd72 	bl	800c8a4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	881b      	ldrh	r3, [r3, #0]
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dda:	823b      	strh	r3, [r7, #16]
 8007ddc:	8a3b      	ldrh	r3, [r7, #16]
 8007dde:	f083 0310 	eor.w	r3, r3, #16
 8007de2:	823b      	strh	r3, [r7, #16]
 8007de4:	8a3b      	ldrh	r3, [r7, #16]
 8007de6:	f083 0320 	eor.w	r3, r3, #32
 8007dea:	823b      	strh	r3, [r7, #16]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	461a      	mov	r2, r3
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	441a      	add	r2, r3
 8007dfa:	8a3b      	ldrh	r3, [r7, #16]
 8007dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3788      	adds	r7, #136	; 0x88
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b087      	sub	sp, #28
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	60f8      	str	r0, [r7, #12]
 8007e22:	607b      	str	r3, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	817b      	strh	r3, [r7, #10]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007e2c:	897b      	ldrh	r3, [r7, #10]
 8007e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00c      	beq.n	8007e52 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e38:	897b      	ldrh	r3, [r7, #10]
 8007e3a:	f003 0307 	and.w	r3, r3, #7
 8007e3e:	1c5a      	adds	r2, r3, #1
 8007e40:	4613      	mov	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4413      	add	r3, r2
 8007e46:	00db      	lsls	r3, r3, #3
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	617b      	str	r3, [r7, #20]
 8007e50:	e00a      	b.n	8007e68 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007e52:	897a      	ldrh	r2, [r7, #10]
 8007e54:	4613      	mov	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	00db      	lsls	r3, r3, #3
 8007e5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	4413      	add	r3, r2
 8007e64:	3304      	adds	r3, #4
 8007e66:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007e68:	893b      	ldrh	r3, [r7, #8]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d107      	bne.n	8007e7e <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	2200      	movs	r2, #0
 8007e72:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	80da      	strh	r2, [r3, #6]
 8007e7c:	e00b      	b.n	8007e96 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	2201      	movs	r2, #1
 8007e82:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	0c1b      	lsrs	r3, r3, #16
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	371c      	adds	r7, #28
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	f043 0301 	orr.w	r3, r3, #1
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	f043 0302 	orr.w	r3, r3, #2
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3714      	adds	r7, #20
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007f10:	b480      	push	{r7}
 8007f12:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007f14:	4b04      	ldr	r3, [pc, #16]	; (8007f28 <HAL_PWREx_GetVoltageRange+0x18>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	40007000 	.word	0x40007000

08007f2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f3a:	d130      	bne.n	8007f9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007f3c:	4b23      	ldr	r3, [pc, #140]	; (8007fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f48:	d038      	beq.n	8007fbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007f4a:	4b20      	ldr	r3, [pc, #128]	; (8007fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007f52:	4a1e      	ldr	r2, [pc, #120]	; (8007fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007f54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007f5a:	4b1d      	ldr	r3, [pc, #116]	; (8007fd0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2232      	movs	r2, #50	; 0x32
 8007f60:	fb02 f303 	mul.w	r3, r2, r3
 8007f64:	4a1b      	ldr	r2, [pc, #108]	; (8007fd4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007f66:	fba2 2303 	umull	r2, r3, r2, r3
 8007f6a:	0c9b      	lsrs	r3, r3, #18
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f70:	e002      	b.n	8007f78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3b01      	subs	r3, #1
 8007f76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f78:	4b14      	ldr	r3, [pc, #80]	; (8007fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007f7a:	695b      	ldr	r3, [r3, #20]
 8007f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f84:	d102      	bne.n	8007f8c <HAL_PWREx_ControlVoltageScaling+0x60>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1f2      	bne.n	8007f72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f8c:	4b0f      	ldr	r3, [pc, #60]	; (8007fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f98:	d110      	bne.n	8007fbc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e00f      	b.n	8007fbe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007f9e:	4b0b      	ldr	r3, [pc, #44]	; (8007fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007faa:	d007      	beq.n	8007fbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007fac:	4b07      	ldr	r3, [pc, #28]	; (8007fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007fb4:	4a05      	ldr	r2, [pc, #20]	; (8007fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007fba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3714      	adds	r7, #20
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	40007000 	.word	0x40007000
 8007fd0:	20000000 	.word	0x20000000
 8007fd4:	431bde83 	.word	0x431bde83

08007fd8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007fdc:	4b05      	ldr	r3, [pc, #20]	; (8007ff4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	4a04      	ldr	r2, [pc, #16]	; (8007ff4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007fe2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007fe6:	6053      	str	r3, [r2, #4]
}
 8007fe8:	bf00      	nop
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	40007000 	.word	0x40007000

08007ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b088      	sub	sp, #32
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d102      	bne.n	800800c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	f000 bc02 	b.w	8008810 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800800c:	4b96      	ldr	r3, [pc, #600]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	f003 030c 	and.w	r3, r3, #12
 8008014:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008016:	4b94      	ldr	r3, [pc, #592]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	f003 0303 	and.w	r3, r3, #3
 800801e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0310 	and.w	r3, r3, #16
 8008028:	2b00      	cmp	r3, #0
 800802a:	f000 80e4 	beq.w	80081f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d007      	beq.n	8008044 <HAL_RCC_OscConfig+0x4c>
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	2b0c      	cmp	r3, #12
 8008038:	f040 808b 	bne.w	8008152 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	2b01      	cmp	r3, #1
 8008040:	f040 8087 	bne.w	8008152 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008044:	4b88      	ldr	r3, [pc, #544]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	2b00      	cmp	r3, #0
 800804e:	d005      	beq.n	800805c <HAL_RCC_OscConfig+0x64>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d101      	bne.n	800805c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e3d9      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a1a      	ldr	r2, [r3, #32]
 8008060:	4b81      	ldr	r3, [pc, #516]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0308 	and.w	r3, r3, #8
 8008068:	2b00      	cmp	r3, #0
 800806a:	d004      	beq.n	8008076 <HAL_RCC_OscConfig+0x7e>
 800806c:	4b7e      	ldr	r3, [pc, #504]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008074:	e005      	b.n	8008082 <HAL_RCC_OscConfig+0x8a>
 8008076:	4b7c      	ldr	r3, [pc, #496]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 8008078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800807c:	091b      	lsrs	r3, r3, #4
 800807e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008082:	4293      	cmp	r3, r2
 8008084:	d223      	bcs.n	80080ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a1b      	ldr	r3, [r3, #32]
 800808a:	4618      	mov	r0, r3
 800808c:	f000 fd60 	bl	8008b50 <RCC_SetFlashLatencyFromMSIRange>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e3ba      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800809a:	4b73      	ldr	r3, [pc, #460]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a72      	ldr	r2, [pc, #456]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 80080a0:	f043 0308 	orr.w	r3, r3, #8
 80080a4:	6013      	str	r3, [r2, #0]
 80080a6:	4b70      	ldr	r3, [pc, #448]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	496d      	ldr	r1, [pc, #436]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 80080b4:	4313      	orrs	r3, r2
 80080b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80080b8:	4b6b      	ldr	r3, [pc, #428]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	69db      	ldr	r3, [r3, #28]
 80080c4:	021b      	lsls	r3, r3, #8
 80080c6:	4968      	ldr	r1, [pc, #416]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	604b      	str	r3, [r1, #4]
 80080cc:	e025      	b.n	800811a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80080ce:	4b66      	ldr	r3, [pc, #408]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a65      	ldr	r2, [pc, #404]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 80080d4:	f043 0308 	orr.w	r3, r3, #8
 80080d8:	6013      	str	r3, [r2, #0]
 80080da:	4b63      	ldr	r3, [pc, #396]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	4960      	ldr	r1, [pc, #384]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80080ec:	4b5e      	ldr	r3, [pc, #376]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	69db      	ldr	r3, [r3, #28]
 80080f8:	021b      	lsls	r3, r3, #8
 80080fa:	495b      	ldr	r1, [pc, #364]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d109      	bne.n	800811a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a1b      	ldr	r3, [r3, #32]
 800810a:	4618      	mov	r0, r3
 800810c:	f000 fd20 	bl	8008b50 <RCC_SetFlashLatencyFromMSIRange>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e37a      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800811a:	f000 fc81 	bl	8008a20 <HAL_RCC_GetSysClockFreq>
 800811e:	4602      	mov	r2, r0
 8008120:	4b51      	ldr	r3, [pc, #324]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	091b      	lsrs	r3, r3, #4
 8008126:	f003 030f 	and.w	r3, r3, #15
 800812a:	4950      	ldr	r1, [pc, #320]	; (800826c <HAL_RCC_OscConfig+0x274>)
 800812c:	5ccb      	ldrb	r3, [r1, r3]
 800812e:	f003 031f 	and.w	r3, r3, #31
 8008132:	fa22 f303 	lsr.w	r3, r2, r3
 8008136:	4a4e      	ldr	r2, [pc, #312]	; (8008270 <HAL_RCC_OscConfig+0x278>)
 8008138:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800813a:	4b4e      	ldr	r3, [pc, #312]	; (8008274 <HAL_RCC_OscConfig+0x27c>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4618      	mov	r0, r3
 8008140:	f7fc f93e 	bl	80043c0 <HAL_InitTick>
 8008144:	4603      	mov	r3, r0
 8008146:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008148:	7bfb      	ldrb	r3, [r7, #15]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d052      	beq.n	80081f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800814e:	7bfb      	ldrb	r3, [r7, #15]
 8008150:	e35e      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d032      	beq.n	80081c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800815a:	4b43      	ldr	r3, [pc, #268]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a42      	ldr	r2, [pc, #264]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 8008160:	f043 0301 	orr.w	r3, r3, #1
 8008164:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008166:	f7fc f97b 	bl	8004460 <HAL_GetTick>
 800816a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800816c:	e008      	b.n	8008180 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800816e:	f7fc f977 	bl	8004460 <HAL_GetTick>
 8008172:	4602      	mov	r2, r0
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	2b02      	cmp	r3, #2
 800817a:	d901      	bls.n	8008180 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	e347      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008180:	4b39      	ldr	r3, [pc, #228]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0302 	and.w	r3, r3, #2
 8008188:	2b00      	cmp	r3, #0
 800818a:	d0f0      	beq.n	800816e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800818c:	4b36      	ldr	r3, [pc, #216]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a35      	ldr	r2, [pc, #212]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 8008192:	f043 0308 	orr.w	r3, r3, #8
 8008196:	6013      	str	r3, [r2, #0]
 8008198:	4b33      	ldr	r3, [pc, #204]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a1b      	ldr	r3, [r3, #32]
 80081a4:	4930      	ldr	r1, [pc, #192]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80081aa:	4b2f      	ldr	r3, [pc, #188]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	021b      	lsls	r3, r3, #8
 80081b8:	492b      	ldr	r1, [pc, #172]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	604b      	str	r3, [r1, #4]
 80081be:	e01a      	b.n	80081f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80081c0:	4b29      	ldr	r3, [pc, #164]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a28      	ldr	r2, [pc, #160]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 80081c6:	f023 0301 	bic.w	r3, r3, #1
 80081ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80081cc:	f7fc f948 	bl	8004460 <HAL_GetTick>
 80081d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80081d2:	e008      	b.n	80081e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80081d4:	f7fc f944 	bl	8004460 <HAL_GetTick>
 80081d8:	4602      	mov	r2, r0
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d901      	bls.n	80081e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80081e2:	2303      	movs	r3, #3
 80081e4:	e314      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80081e6:	4b20      	ldr	r3, [pc, #128]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 0302 	and.w	r3, r3, #2
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1f0      	bne.n	80081d4 <HAL_RCC_OscConfig+0x1dc>
 80081f2:	e000      	b.n	80081f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80081f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0301 	and.w	r3, r3, #1
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d073      	beq.n	80082ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	2b08      	cmp	r3, #8
 8008206:	d005      	beq.n	8008214 <HAL_RCC_OscConfig+0x21c>
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	2b0c      	cmp	r3, #12
 800820c:	d10e      	bne.n	800822c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	2b03      	cmp	r3, #3
 8008212:	d10b      	bne.n	800822c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008214:	4b14      	ldr	r3, [pc, #80]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d063      	beq.n	80082e8 <HAL_RCC_OscConfig+0x2f0>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d15f      	bne.n	80082e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e2f1      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008234:	d106      	bne.n	8008244 <HAL_RCC_OscConfig+0x24c>
 8008236:	4b0c      	ldr	r3, [pc, #48]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a0b      	ldr	r2, [pc, #44]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 800823c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008240:	6013      	str	r3, [r2, #0]
 8008242:	e025      	b.n	8008290 <HAL_RCC_OscConfig+0x298>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800824c:	d114      	bne.n	8008278 <HAL_RCC_OscConfig+0x280>
 800824e:	4b06      	ldr	r3, [pc, #24]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a05      	ldr	r2, [pc, #20]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 8008254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008258:	6013      	str	r3, [r2, #0]
 800825a:	4b03      	ldr	r3, [pc, #12]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a02      	ldr	r2, [pc, #8]	; (8008268 <HAL_RCC_OscConfig+0x270>)
 8008260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008264:	6013      	str	r3, [r2, #0]
 8008266:	e013      	b.n	8008290 <HAL_RCC_OscConfig+0x298>
 8008268:	40021000 	.word	0x40021000
 800826c:	0800f064 	.word	0x0800f064
 8008270:	20000000 	.word	0x20000000
 8008274:	20000004 	.word	0x20000004
 8008278:	4ba0      	ldr	r3, [pc, #640]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a9f      	ldr	r2, [pc, #636]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 800827e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	4b9d      	ldr	r3, [pc, #628]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a9c      	ldr	r2, [pc, #624]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 800828a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800828e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d013      	beq.n	80082c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008298:	f7fc f8e2 	bl	8004460 <HAL_GetTick>
 800829c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800829e:	e008      	b.n	80082b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082a0:	f7fc f8de 	bl	8004460 <HAL_GetTick>
 80082a4:	4602      	mov	r2, r0
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	2b64      	cmp	r3, #100	; 0x64
 80082ac:	d901      	bls.n	80082b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e2ae      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80082b2:	4b92      	ldr	r3, [pc, #584]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d0f0      	beq.n	80082a0 <HAL_RCC_OscConfig+0x2a8>
 80082be:	e014      	b.n	80082ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082c0:	f7fc f8ce 	bl	8004460 <HAL_GetTick>
 80082c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80082c6:	e008      	b.n	80082da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082c8:	f7fc f8ca 	bl	8004460 <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	2b64      	cmp	r3, #100	; 0x64
 80082d4:	d901      	bls.n	80082da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e29a      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80082da:	4b88      	ldr	r3, [pc, #544]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1f0      	bne.n	80082c8 <HAL_RCC_OscConfig+0x2d0>
 80082e6:	e000      	b.n	80082ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 0302 	and.w	r3, r3, #2
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d060      	beq.n	80083b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	2b04      	cmp	r3, #4
 80082fa:	d005      	beq.n	8008308 <HAL_RCC_OscConfig+0x310>
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	2b0c      	cmp	r3, #12
 8008300:	d119      	bne.n	8008336 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	2b02      	cmp	r3, #2
 8008306:	d116      	bne.n	8008336 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008308:	4b7c      	ldr	r3, [pc, #496]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008310:	2b00      	cmp	r3, #0
 8008312:	d005      	beq.n	8008320 <HAL_RCC_OscConfig+0x328>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d101      	bne.n	8008320 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	e277      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008320:	4b76      	ldr	r3, [pc, #472]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	061b      	lsls	r3, r3, #24
 800832e:	4973      	ldr	r1, [pc, #460]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 8008330:	4313      	orrs	r3, r2
 8008332:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008334:	e040      	b.n	80083b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d023      	beq.n	8008386 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800833e:	4b6f      	ldr	r3, [pc, #444]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a6e      	ldr	r2, [pc, #440]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 8008344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800834a:	f7fc f889 	bl	8004460 <HAL_GetTick>
 800834e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008350:	e008      	b.n	8008364 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008352:	f7fc f885 	bl	8004460 <HAL_GetTick>
 8008356:	4602      	mov	r2, r0
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	2b02      	cmp	r3, #2
 800835e:	d901      	bls.n	8008364 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008360:	2303      	movs	r3, #3
 8008362:	e255      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008364:	4b65      	ldr	r3, [pc, #404]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800836c:	2b00      	cmp	r3, #0
 800836e:	d0f0      	beq.n	8008352 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008370:	4b62      	ldr	r3, [pc, #392]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	061b      	lsls	r3, r3, #24
 800837e:	495f      	ldr	r1, [pc, #380]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 8008380:	4313      	orrs	r3, r2
 8008382:	604b      	str	r3, [r1, #4]
 8008384:	e018      	b.n	80083b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008386:	4b5d      	ldr	r3, [pc, #372]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a5c      	ldr	r2, [pc, #368]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 800838c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008392:	f7fc f865 	bl	8004460 <HAL_GetTick>
 8008396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008398:	e008      	b.n	80083ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800839a:	f7fc f861 	bl	8004460 <HAL_GetTick>
 800839e:	4602      	mov	r2, r0
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	1ad3      	subs	r3, r2, r3
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d901      	bls.n	80083ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80083a8:	2303      	movs	r3, #3
 80083aa:	e231      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80083ac:	4b53      	ldr	r3, [pc, #332]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1f0      	bne.n	800839a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0308 	and.w	r3, r3, #8
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d03c      	beq.n	800843e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d01c      	beq.n	8008406 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083cc:	4b4b      	ldr	r3, [pc, #300]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 80083ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083d2:	4a4a      	ldr	r2, [pc, #296]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 80083d4:	f043 0301 	orr.w	r3, r3, #1
 80083d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083dc:	f7fc f840 	bl	8004460 <HAL_GetTick>
 80083e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80083e2:	e008      	b.n	80083f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083e4:	f7fc f83c 	bl	8004460 <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d901      	bls.n	80083f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e20c      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80083f6:	4b41      	ldr	r3, [pc, #260]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 80083f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083fc:	f003 0302 	and.w	r3, r3, #2
 8008400:	2b00      	cmp	r3, #0
 8008402:	d0ef      	beq.n	80083e4 <HAL_RCC_OscConfig+0x3ec>
 8008404:	e01b      	b.n	800843e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008406:	4b3d      	ldr	r3, [pc, #244]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 8008408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800840c:	4a3b      	ldr	r2, [pc, #236]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 800840e:	f023 0301 	bic.w	r3, r3, #1
 8008412:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008416:	f7fc f823 	bl	8004460 <HAL_GetTick>
 800841a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800841c:	e008      	b.n	8008430 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800841e:	f7fc f81f 	bl	8004460 <HAL_GetTick>
 8008422:	4602      	mov	r2, r0
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	2b02      	cmp	r3, #2
 800842a:	d901      	bls.n	8008430 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e1ef      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008430:	4b32      	ldr	r3, [pc, #200]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 8008432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008436:	f003 0302 	and.w	r3, r3, #2
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1ef      	bne.n	800841e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 0304 	and.w	r3, r3, #4
 8008446:	2b00      	cmp	r3, #0
 8008448:	f000 80a6 	beq.w	8008598 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800844c:	2300      	movs	r3, #0
 800844e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008450:	4b2a      	ldr	r3, [pc, #168]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 8008452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10d      	bne.n	8008478 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800845c:	4b27      	ldr	r3, [pc, #156]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 800845e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008460:	4a26      	ldr	r2, [pc, #152]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 8008462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008466:	6593      	str	r3, [r2, #88]	; 0x58
 8008468:	4b24      	ldr	r3, [pc, #144]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 800846a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800846c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008470:	60bb      	str	r3, [r7, #8]
 8008472:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008474:	2301      	movs	r3, #1
 8008476:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008478:	4b21      	ldr	r3, [pc, #132]	; (8008500 <HAL_RCC_OscConfig+0x508>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008480:	2b00      	cmp	r3, #0
 8008482:	d118      	bne.n	80084b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008484:	4b1e      	ldr	r3, [pc, #120]	; (8008500 <HAL_RCC_OscConfig+0x508>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a1d      	ldr	r2, [pc, #116]	; (8008500 <HAL_RCC_OscConfig+0x508>)
 800848a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800848e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008490:	f7fb ffe6 	bl	8004460 <HAL_GetTick>
 8008494:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008496:	e008      	b.n	80084aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008498:	f7fb ffe2 	bl	8004460 <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d901      	bls.n	80084aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e1b2      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80084aa:	4b15      	ldr	r3, [pc, #84]	; (8008500 <HAL_RCC_OscConfig+0x508>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d0f0      	beq.n	8008498 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d108      	bne.n	80084d0 <HAL_RCC_OscConfig+0x4d8>
 80084be:	4b0f      	ldr	r3, [pc, #60]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 80084c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084c4:	4a0d      	ldr	r2, [pc, #52]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 80084c6:	f043 0301 	orr.w	r3, r3, #1
 80084ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80084ce:	e029      	b.n	8008524 <HAL_RCC_OscConfig+0x52c>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	2b05      	cmp	r3, #5
 80084d6:	d115      	bne.n	8008504 <HAL_RCC_OscConfig+0x50c>
 80084d8:	4b08      	ldr	r3, [pc, #32]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 80084da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084de:	4a07      	ldr	r2, [pc, #28]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 80084e0:	f043 0304 	orr.w	r3, r3, #4
 80084e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80084e8:	4b04      	ldr	r3, [pc, #16]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 80084ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ee:	4a03      	ldr	r2, [pc, #12]	; (80084fc <HAL_RCC_OscConfig+0x504>)
 80084f0:	f043 0301 	orr.w	r3, r3, #1
 80084f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80084f8:	e014      	b.n	8008524 <HAL_RCC_OscConfig+0x52c>
 80084fa:	bf00      	nop
 80084fc:	40021000 	.word	0x40021000
 8008500:	40007000 	.word	0x40007000
 8008504:	4b9a      	ldr	r3, [pc, #616]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 8008506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800850a:	4a99      	ldr	r2, [pc, #612]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 800850c:	f023 0301 	bic.w	r3, r3, #1
 8008510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008514:	4b96      	ldr	r3, [pc, #600]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 8008516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800851a:	4a95      	ldr	r2, [pc, #596]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 800851c:	f023 0304 	bic.w	r3, r3, #4
 8008520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d016      	beq.n	800855a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800852c:	f7fb ff98 	bl	8004460 <HAL_GetTick>
 8008530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008532:	e00a      	b.n	800854a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008534:	f7fb ff94 	bl	8004460 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008542:	4293      	cmp	r3, r2
 8008544:	d901      	bls.n	800854a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e162      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800854a:	4b89      	ldr	r3, [pc, #548]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 800854c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008550:	f003 0302 	and.w	r3, r3, #2
 8008554:	2b00      	cmp	r3, #0
 8008556:	d0ed      	beq.n	8008534 <HAL_RCC_OscConfig+0x53c>
 8008558:	e015      	b.n	8008586 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800855a:	f7fb ff81 	bl	8004460 <HAL_GetTick>
 800855e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008560:	e00a      	b.n	8008578 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008562:	f7fb ff7d 	bl	8004460 <HAL_GetTick>
 8008566:	4602      	mov	r2, r0
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008570:	4293      	cmp	r3, r2
 8008572:	d901      	bls.n	8008578 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	e14b      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008578:	4b7d      	ldr	r3, [pc, #500]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 800857a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800857e:	f003 0302 	and.w	r3, r3, #2
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1ed      	bne.n	8008562 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008586:	7ffb      	ldrb	r3, [r7, #31]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d105      	bne.n	8008598 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800858c:	4b78      	ldr	r3, [pc, #480]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 800858e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008590:	4a77      	ldr	r2, [pc, #476]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 8008592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008596:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 0320 	and.w	r3, r3, #32
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d03c      	beq.n	800861e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d01c      	beq.n	80085e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80085ac:	4b70      	ldr	r3, [pc, #448]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 80085ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085b2:	4a6f      	ldr	r2, [pc, #444]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 80085b4:	f043 0301 	orr.w	r3, r3, #1
 80085b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085bc:	f7fb ff50 	bl	8004460 <HAL_GetTick>
 80085c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80085c2:	e008      	b.n	80085d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80085c4:	f7fb ff4c 	bl	8004460 <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d901      	bls.n	80085d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e11c      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80085d6:	4b66      	ldr	r3, [pc, #408]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 80085d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085dc:	f003 0302 	and.w	r3, r3, #2
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d0ef      	beq.n	80085c4 <HAL_RCC_OscConfig+0x5cc>
 80085e4:	e01b      	b.n	800861e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80085e6:	4b62      	ldr	r3, [pc, #392]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 80085e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085ec:	4a60      	ldr	r2, [pc, #384]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 80085ee:	f023 0301 	bic.w	r3, r3, #1
 80085f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085f6:	f7fb ff33 	bl	8004460 <HAL_GetTick>
 80085fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80085fc:	e008      	b.n	8008610 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80085fe:	f7fb ff2f 	bl	8004460 <HAL_GetTick>
 8008602:	4602      	mov	r2, r0
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	2b02      	cmp	r3, #2
 800860a:	d901      	bls.n	8008610 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800860c:	2303      	movs	r3, #3
 800860e:	e0ff      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008610:	4b57      	ldr	r3, [pc, #348]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 8008612:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008616:	f003 0302 	and.w	r3, r3, #2
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1ef      	bne.n	80085fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 80f3 	beq.w	800880e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800862c:	2b02      	cmp	r3, #2
 800862e:	f040 80c9 	bne.w	80087c4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008632:	4b4f      	ldr	r3, [pc, #316]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f003 0203 	and.w	r2, r3, #3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008642:	429a      	cmp	r2, r3
 8008644:	d12c      	bne.n	80086a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008650:	3b01      	subs	r3, #1
 8008652:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008654:	429a      	cmp	r2, r3
 8008656:	d123      	bne.n	80086a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008662:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008664:	429a      	cmp	r2, r3
 8008666:	d11b      	bne.n	80086a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008672:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008674:	429a      	cmp	r2, r3
 8008676:	d113      	bne.n	80086a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008682:	085b      	lsrs	r3, r3, #1
 8008684:	3b01      	subs	r3, #1
 8008686:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008688:	429a      	cmp	r2, r3
 800868a:	d109      	bne.n	80086a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008696:	085b      	lsrs	r3, r3, #1
 8008698:	3b01      	subs	r3, #1
 800869a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800869c:	429a      	cmp	r2, r3
 800869e:	d06b      	beq.n	8008778 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	2b0c      	cmp	r3, #12
 80086a4:	d062      	beq.n	800876c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80086a6:	4b32      	ldr	r3, [pc, #200]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d001      	beq.n	80086b6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e0ac      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80086b6:	4b2e      	ldr	r3, [pc, #184]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a2d      	ldr	r2, [pc, #180]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 80086bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80086c2:	f7fb fecd 	bl	8004460 <HAL_GetTick>
 80086c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80086c8:	e008      	b.n	80086dc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086ca:	f7fb fec9 	bl	8004460 <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d901      	bls.n	80086dc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e099      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80086dc:	4b24      	ldr	r3, [pc, #144]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1f0      	bne.n	80086ca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086e8:	4b21      	ldr	r3, [pc, #132]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 80086ea:	68da      	ldr	r2, [r3, #12]
 80086ec:	4b21      	ldr	r3, [pc, #132]	; (8008774 <HAL_RCC_OscConfig+0x77c>)
 80086ee:	4013      	ands	r3, r2
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80086f8:	3a01      	subs	r2, #1
 80086fa:	0112      	lsls	r2, r2, #4
 80086fc:	4311      	orrs	r1, r2
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008702:	0212      	lsls	r2, r2, #8
 8008704:	4311      	orrs	r1, r2
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800870a:	0852      	lsrs	r2, r2, #1
 800870c:	3a01      	subs	r2, #1
 800870e:	0552      	lsls	r2, r2, #21
 8008710:	4311      	orrs	r1, r2
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008716:	0852      	lsrs	r2, r2, #1
 8008718:	3a01      	subs	r2, #1
 800871a:	0652      	lsls	r2, r2, #25
 800871c:	4311      	orrs	r1, r2
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008722:	06d2      	lsls	r2, r2, #27
 8008724:	430a      	orrs	r2, r1
 8008726:	4912      	ldr	r1, [pc, #72]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 8008728:	4313      	orrs	r3, r2
 800872a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800872c:	4b10      	ldr	r3, [pc, #64]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a0f      	ldr	r2, [pc, #60]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 8008732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008736:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008738:	4b0d      	ldr	r3, [pc, #52]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	4a0c      	ldr	r2, [pc, #48]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 800873e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008742:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008744:	f7fb fe8c 	bl	8004460 <HAL_GetTick>
 8008748:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800874a:	e008      	b.n	800875e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800874c:	f7fb fe88 	bl	8004460 <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	2b02      	cmp	r3, #2
 8008758:	d901      	bls.n	800875e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e058      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800875e:	4b04      	ldr	r3, [pc, #16]	; (8008770 <HAL_RCC_OscConfig+0x778>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d0f0      	beq.n	800874c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800876a:	e050      	b.n	800880e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	e04f      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
 8008770:	40021000 	.word	0x40021000
 8008774:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008778:	4b27      	ldr	r3, [pc, #156]	; (8008818 <HAL_RCC_OscConfig+0x820>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008780:	2b00      	cmp	r3, #0
 8008782:	d144      	bne.n	800880e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008784:	4b24      	ldr	r3, [pc, #144]	; (8008818 <HAL_RCC_OscConfig+0x820>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a23      	ldr	r2, [pc, #140]	; (8008818 <HAL_RCC_OscConfig+0x820>)
 800878a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800878e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008790:	4b21      	ldr	r3, [pc, #132]	; (8008818 <HAL_RCC_OscConfig+0x820>)
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	4a20      	ldr	r2, [pc, #128]	; (8008818 <HAL_RCC_OscConfig+0x820>)
 8008796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800879a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800879c:	f7fb fe60 	bl	8004460 <HAL_GetTick>
 80087a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087a2:	e008      	b.n	80087b6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087a4:	f7fb fe5c 	bl	8004460 <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d901      	bls.n	80087b6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80087b2:	2303      	movs	r3, #3
 80087b4:	e02c      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087b6:	4b18      	ldr	r3, [pc, #96]	; (8008818 <HAL_RCC_OscConfig+0x820>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d0f0      	beq.n	80087a4 <HAL_RCC_OscConfig+0x7ac>
 80087c2:	e024      	b.n	800880e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	2b0c      	cmp	r3, #12
 80087c8:	d01f      	beq.n	800880a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087ca:	4b13      	ldr	r3, [pc, #76]	; (8008818 <HAL_RCC_OscConfig+0x820>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a12      	ldr	r2, [pc, #72]	; (8008818 <HAL_RCC_OscConfig+0x820>)
 80087d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087d6:	f7fb fe43 	bl	8004460 <HAL_GetTick>
 80087da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80087dc:	e008      	b.n	80087f0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087de:	f7fb fe3f 	bl	8004460 <HAL_GetTick>
 80087e2:	4602      	mov	r2, r0
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d901      	bls.n	80087f0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e00f      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80087f0:	4b09      	ldr	r3, [pc, #36]	; (8008818 <HAL_RCC_OscConfig+0x820>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1f0      	bne.n	80087de <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80087fc:	4b06      	ldr	r3, [pc, #24]	; (8008818 <HAL_RCC_OscConfig+0x820>)
 80087fe:	68da      	ldr	r2, [r3, #12]
 8008800:	4905      	ldr	r1, [pc, #20]	; (8008818 <HAL_RCC_OscConfig+0x820>)
 8008802:	4b06      	ldr	r3, [pc, #24]	; (800881c <HAL_RCC_OscConfig+0x824>)
 8008804:	4013      	ands	r3, r2
 8008806:	60cb      	str	r3, [r1, #12]
 8008808:	e001      	b.n	800880e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e000      	b.n	8008810 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3720      	adds	r7, #32
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	40021000 	.word	0x40021000
 800881c:	feeefffc 	.word	0xfeeefffc

08008820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d101      	bne.n	8008834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	e0e7      	b.n	8008a04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008834:	4b75      	ldr	r3, [pc, #468]	; (8008a0c <HAL_RCC_ClockConfig+0x1ec>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 0307 	and.w	r3, r3, #7
 800883c:	683a      	ldr	r2, [r7, #0]
 800883e:	429a      	cmp	r2, r3
 8008840:	d910      	bls.n	8008864 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008842:	4b72      	ldr	r3, [pc, #456]	; (8008a0c <HAL_RCC_ClockConfig+0x1ec>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f023 0207 	bic.w	r2, r3, #7
 800884a:	4970      	ldr	r1, [pc, #448]	; (8008a0c <HAL_RCC_ClockConfig+0x1ec>)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	4313      	orrs	r3, r2
 8008850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008852:	4b6e      	ldr	r3, [pc, #440]	; (8008a0c <HAL_RCC_ClockConfig+0x1ec>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	429a      	cmp	r2, r3
 800885e:	d001      	beq.n	8008864 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	e0cf      	b.n	8008a04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 0302 	and.w	r3, r3, #2
 800886c:	2b00      	cmp	r3, #0
 800886e:	d010      	beq.n	8008892 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	689a      	ldr	r2, [r3, #8]
 8008874:	4b66      	ldr	r3, [pc, #408]	; (8008a10 <HAL_RCC_ClockConfig+0x1f0>)
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800887c:	429a      	cmp	r2, r3
 800887e:	d908      	bls.n	8008892 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008880:	4b63      	ldr	r3, [pc, #396]	; (8008a10 <HAL_RCC_ClockConfig+0x1f0>)
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	4960      	ldr	r1, [pc, #384]	; (8008a10 <HAL_RCC_ClockConfig+0x1f0>)
 800888e:	4313      	orrs	r3, r2
 8008890:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	2b00      	cmp	r3, #0
 800889c:	d04c      	beq.n	8008938 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d107      	bne.n	80088b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088a6:	4b5a      	ldr	r3, [pc, #360]	; (8008a10 <HAL_RCC_ClockConfig+0x1f0>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d121      	bne.n	80088f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e0a6      	b.n	8008a04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d107      	bne.n	80088ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80088be:	4b54      	ldr	r3, [pc, #336]	; (8008a10 <HAL_RCC_ClockConfig+0x1f0>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d115      	bne.n	80088f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e09a      	b.n	8008a04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d107      	bne.n	80088e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80088d6:	4b4e      	ldr	r3, [pc, #312]	; (8008a10 <HAL_RCC_ClockConfig+0x1f0>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 0302 	and.w	r3, r3, #2
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d109      	bne.n	80088f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e08e      	b.n	8008a04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80088e6:	4b4a      	ldr	r3, [pc, #296]	; (8008a10 <HAL_RCC_ClockConfig+0x1f0>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e086      	b.n	8008a04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80088f6:	4b46      	ldr	r3, [pc, #280]	; (8008a10 <HAL_RCC_ClockConfig+0x1f0>)
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f023 0203 	bic.w	r2, r3, #3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	4943      	ldr	r1, [pc, #268]	; (8008a10 <HAL_RCC_ClockConfig+0x1f0>)
 8008904:	4313      	orrs	r3, r2
 8008906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008908:	f7fb fdaa 	bl	8004460 <HAL_GetTick>
 800890c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800890e:	e00a      	b.n	8008926 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008910:	f7fb fda6 	bl	8004460 <HAL_GetTick>
 8008914:	4602      	mov	r2, r0
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	f241 3288 	movw	r2, #5000	; 0x1388
 800891e:	4293      	cmp	r3, r2
 8008920:	d901      	bls.n	8008926 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e06e      	b.n	8008a04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008926:	4b3a      	ldr	r3, [pc, #232]	; (8008a10 <HAL_RCC_ClockConfig+0x1f0>)
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	f003 020c 	and.w	r2, r3, #12
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	429a      	cmp	r2, r3
 8008936:	d1eb      	bne.n	8008910 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0302 	and.w	r3, r3, #2
 8008940:	2b00      	cmp	r3, #0
 8008942:	d010      	beq.n	8008966 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	689a      	ldr	r2, [r3, #8]
 8008948:	4b31      	ldr	r3, [pc, #196]	; (8008a10 <HAL_RCC_ClockConfig+0x1f0>)
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008950:	429a      	cmp	r2, r3
 8008952:	d208      	bcs.n	8008966 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008954:	4b2e      	ldr	r3, [pc, #184]	; (8008a10 <HAL_RCC_ClockConfig+0x1f0>)
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	492b      	ldr	r1, [pc, #172]	; (8008a10 <HAL_RCC_ClockConfig+0x1f0>)
 8008962:	4313      	orrs	r3, r2
 8008964:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008966:	4b29      	ldr	r3, [pc, #164]	; (8008a0c <HAL_RCC_ClockConfig+0x1ec>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 0307 	and.w	r3, r3, #7
 800896e:	683a      	ldr	r2, [r7, #0]
 8008970:	429a      	cmp	r2, r3
 8008972:	d210      	bcs.n	8008996 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008974:	4b25      	ldr	r3, [pc, #148]	; (8008a0c <HAL_RCC_ClockConfig+0x1ec>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f023 0207 	bic.w	r2, r3, #7
 800897c:	4923      	ldr	r1, [pc, #140]	; (8008a0c <HAL_RCC_ClockConfig+0x1ec>)
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	4313      	orrs	r3, r2
 8008982:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008984:	4b21      	ldr	r3, [pc, #132]	; (8008a0c <HAL_RCC_ClockConfig+0x1ec>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0307 	and.w	r3, r3, #7
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	429a      	cmp	r2, r3
 8008990:	d001      	beq.n	8008996 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e036      	b.n	8008a04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 0304 	and.w	r3, r3, #4
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d008      	beq.n	80089b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089a2:	4b1b      	ldr	r3, [pc, #108]	; (8008a10 <HAL_RCC_ClockConfig+0x1f0>)
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	4918      	ldr	r1, [pc, #96]	; (8008a10 <HAL_RCC_ClockConfig+0x1f0>)
 80089b0:	4313      	orrs	r3, r2
 80089b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 0308 	and.w	r3, r3, #8
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d009      	beq.n	80089d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80089c0:	4b13      	ldr	r3, [pc, #76]	; (8008a10 <HAL_RCC_ClockConfig+0x1f0>)
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	00db      	lsls	r3, r3, #3
 80089ce:	4910      	ldr	r1, [pc, #64]	; (8008a10 <HAL_RCC_ClockConfig+0x1f0>)
 80089d0:	4313      	orrs	r3, r2
 80089d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80089d4:	f000 f824 	bl	8008a20 <HAL_RCC_GetSysClockFreq>
 80089d8:	4602      	mov	r2, r0
 80089da:	4b0d      	ldr	r3, [pc, #52]	; (8008a10 <HAL_RCC_ClockConfig+0x1f0>)
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	091b      	lsrs	r3, r3, #4
 80089e0:	f003 030f 	and.w	r3, r3, #15
 80089e4:	490b      	ldr	r1, [pc, #44]	; (8008a14 <HAL_RCC_ClockConfig+0x1f4>)
 80089e6:	5ccb      	ldrb	r3, [r1, r3]
 80089e8:	f003 031f 	and.w	r3, r3, #31
 80089ec:	fa22 f303 	lsr.w	r3, r2, r3
 80089f0:	4a09      	ldr	r2, [pc, #36]	; (8008a18 <HAL_RCC_ClockConfig+0x1f8>)
 80089f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80089f4:	4b09      	ldr	r3, [pc, #36]	; (8008a1c <HAL_RCC_ClockConfig+0x1fc>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7fb fce1 	bl	80043c0 <HAL_InitTick>
 80089fe:	4603      	mov	r3, r0
 8008a00:	72fb      	strb	r3, [r7, #11]

  return status;
 8008a02:	7afb      	ldrb	r3, [r7, #11]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	40022000 	.word	0x40022000
 8008a10:	40021000 	.word	0x40021000
 8008a14:	0800f064 	.word	0x0800f064
 8008a18:	20000000 	.word	0x20000000
 8008a1c:	20000004 	.word	0x20000004

08008a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b089      	sub	sp, #36	; 0x24
 8008a24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008a26:	2300      	movs	r3, #0
 8008a28:	61fb      	str	r3, [r7, #28]
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a2e:	4b3e      	ldr	r3, [pc, #248]	; (8008b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	f003 030c 	and.w	r3, r3, #12
 8008a36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a38:	4b3b      	ldr	r3, [pc, #236]	; (8008b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	f003 0303 	and.w	r3, r3, #3
 8008a40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d005      	beq.n	8008a54 <HAL_RCC_GetSysClockFreq+0x34>
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	2b0c      	cmp	r3, #12
 8008a4c:	d121      	bne.n	8008a92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d11e      	bne.n	8008a92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008a54:	4b34      	ldr	r3, [pc, #208]	; (8008b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 0308 	and.w	r3, r3, #8
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d107      	bne.n	8008a70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008a60:	4b31      	ldr	r3, [pc, #196]	; (8008b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a66:	0a1b      	lsrs	r3, r3, #8
 8008a68:	f003 030f 	and.w	r3, r3, #15
 8008a6c:	61fb      	str	r3, [r7, #28]
 8008a6e:	e005      	b.n	8008a7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008a70:	4b2d      	ldr	r3, [pc, #180]	; (8008b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	091b      	lsrs	r3, r3, #4
 8008a76:	f003 030f 	and.w	r3, r3, #15
 8008a7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008a7c:	4a2b      	ldr	r2, [pc, #172]	; (8008b2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10d      	bne.n	8008aa8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008a90:	e00a      	b.n	8008aa8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	2b04      	cmp	r3, #4
 8008a96:	d102      	bne.n	8008a9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008a98:	4b25      	ldr	r3, [pc, #148]	; (8008b30 <HAL_RCC_GetSysClockFreq+0x110>)
 8008a9a:	61bb      	str	r3, [r7, #24]
 8008a9c:	e004      	b.n	8008aa8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	2b08      	cmp	r3, #8
 8008aa2:	d101      	bne.n	8008aa8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008aa4:	4b23      	ldr	r3, [pc, #140]	; (8008b34 <HAL_RCC_GetSysClockFreq+0x114>)
 8008aa6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	2b0c      	cmp	r3, #12
 8008aac:	d134      	bne.n	8008b18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008aae:	4b1e      	ldr	r3, [pc, #120]	; (8008b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	f003 0303 	and.w	r3, r3, #3
 8008ab6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d003      	beq.n	8008ac6 <HAL_RCC_GetSysClockFreq+0xa6>
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	2b03      	cmp	r3, #3
 8008ac2:	d003      	beq.n	8008acc <HAL_RCC_GetSysClockFreq+0xac>
 8008ac4:	e005      	b.n	8008ad2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008ac6:	4b1a      	ldr	r3, [pc, #104]	; (8008b30 <HAL_RCC_GetSysClockFreq+0x110>)
 8008ac8:	617b      	str	r3, [r7, #20]
      break;
 8008aca:	e005      	b.n	8008ad8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008acc:	4b19      	ldr	r3, [pc, #100]	; (8008b34 <HAL_RCC_GetSysClockFreq+0x114>)
 8008ace:	617b      	str	r3, [r7, #20]
      break;
 8008ad0:	e002      	b.n	8008ad8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	617b      	str	r3, [r7, #20]
      break;
 8008ad6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008ad8:	4b13      	ldr	r3, [pc, #76]	; (8008b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	091b      	lsrs	r3, r3, #4
 8008ade:	f003 0307 	and.w	r3, r3, #7
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008ae6:	4b10      	ldr	r3, [pc, #64]	; (8008b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	0a1b      	lsrs	r3, r3, #8
 8008aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	fb03 f202 	mul.w	r2, r3, r2
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008afc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008afe:	4b0a      	ldr	r3, [pc, #40]	; (8008b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	0e5b      	lsrs	r3, r3, #25
 8008b04:	f003 0303 	and.w	r3, r3, #3
 8008b08:	3301      	adds	r3, #1
 8008b0a:	005b      	lsls	r3, r3, #1
 8008b0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008b18:	69bb      	ldr	r3, [r7, #24]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3724      	adds	r7, #36	; 0x24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	40021000 	.word	0x40021000
 8008b2c:	0800f074 	.word	0x0800f074
 8008b30:	00f42400 	.word	0x00f42400
 8008b34:	007a1200 	.word	0x007a1200

08008b38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b3c:	4b03      	ldr	r3, [pc, #12]	; (8008b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	20000000 	.word	0x20000000

08008b50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008b58:	2300      	movs	r3, #0
 8008b5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008b5c:	4b2a      	ldr	r3, [pc, #168]	; (8008c08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d003      	beq.n	8008b70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008b68:	f7ff f9d2 	bl	8007f10 <HAL_PWREx_GetVoltageRange>
 8008b6c:	6178      	str	r0, [r7, #20]
 8008b6e:	e014      	b.n	8008b9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008b70:	4b25      	ldr	r3, [pc, #148]	; (8008c08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b74:	4a24      	ldr	r2, [pc, #144]	; (8008c08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b7a:	6593      	str	r3, [r2, #88]	; 0x58
 8008b7c:	4b22      	ldr	r3, [pc, #136]	; (8008c08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b84:	60fb      	str	r3, [r7, #12]
 8008b86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008b88:	f7ff f9c2 	bl	8007f10 <HAL_PWREx_GetVoltageRange>
 8008b8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008b8e:	4b1e      	ldr	r3, [pc, #120]	; (8008c08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b92:	4a1d      	ldr	r2, [pc, #116]	; (8008c08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ba0:	d10b      	bne.n	8008bba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2b80      	cmp	r3, #128	; 0x80
 8008ba6:	d919      	bls.n	8008bdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2ba0      	cmp	r3, #160	; 0xa0
 8008bac:	d902      	bls.n	8008bb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008bae:	2302      	movs	r3, #2
 8008bb0:	613b      	str	r3, [r7, #16]
 8008bb2:	e013      	b.n	8008bdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	613b      	str	r3, [r7, #16]
 8008bb8:	e010      	b.n	8008bdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2b80      	cmp	r3, #128	; 0x80
 8008bbe:	d902      	bls.n	8008bc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	613b      	str	r3, [r7, #16]
 8008bc4:	e00a      	b.n	8008bdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2b80      	cmp	r3, #128	; 0x80
 8008bca:	d102      	bne.n	8008bd2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008bcc:	2302      	movs	r3, #2
 8008bce:	613b      	str	r3, [r7, #16]
 8008bd0:	e004      	b.n	8008bdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2b70      	cmp	r3, #112	; 0x70
 8008bd6:	d101      	bne.n	8008bdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008bd8:	2301      	movs	r3, #1
 8008bda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008bdc:	4b0b      	ldr	r3, [pc, #44]	; (8008c0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f023 0207 	bic.w	r2, r3, #7
 8008be4:	4909      	ldr	r1, [pc, #36]	; (8008c0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008bec:	4b07      	ldr	r3, [pc, #28]	; (8008c0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 0307 	and.w	r3, r3, #7
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d001      	beq.n	8008bfe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e000      	b.n	8008c00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3718      	adds	r7, #24
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	40021000 	.word	0x40021000
 8008c0c:	40022000 	.word	0x40022000

08008c10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008c18:	2300      	movs	r3, #0
 8008c1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d031      	beq.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008c34:	d01a      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8008c36:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008c3a:	d814      	bhi.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d009      	beq.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008c40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c44:	d10f      	bne.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8008c46:	4b5d      	ldr	r3, [pc, #372]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	4a5c      	ldr	r2, [pc, #368]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c50:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008c52:	e00c      	b.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	3304      	adds	r3, #4
 8008c58:	2100      	movs	r1, #0
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 fa22 	bl	80090a4 <RCCEx_PLLSAI1_Config>
 8008c60:	4603      	mov	r3, r0
 8008c62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008c64:	e003      	b.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	74fb      	strb	r3, [r7, #19]
      break;
 8008c6a:	e000      	b.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8008c6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c6e:	7cfb      	ldrb	r3, [r7, #19]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10b      	bne.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c74:	4b51      	ldr	r3, [pc, #324]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c82:	494e      	ldr	r1, [pc, #312]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008c84:	4313      	orrs	r3, r2
 8008c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008c8a:	e001      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c8c:	7cfb      	ldrb	r3, [r7, #19]
 8008c8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f000 809e 	beq.w	8008dda <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008ca2:	4b46      	ldr	r3, [pc, #280]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d101      	bne.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e000      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00d      	beq.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cb8:	4b40      	ldr	r3, [pc, #256]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cbc:	4a3f      	ldr	r2, [pc, #252]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cc2:	6593      	str	r3, [r2, #88]	; 0x58
 8008cc4:	4b3d      	ldr	r3, [pc, #244]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ccc:	60bb      	str	r3, [r7, #8]
 8008cce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cd4:	4b3a      	ldr	r3, [pc, #232]	; (8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a39      	ldr	r2, [pc, #228]	; (8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ce0:	f7fb fbbe 	bl	8004460 <HAL_GetTick>
 8008ce4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008ce6:	e009      	b.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ce8:	f7fb fbba 	bl	8004460 <HAL_GetTick>
 8008cec:	4602      	mov	r2, r0
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d902      	bls.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	74fb      	strb	r3, [r7, #19]
        break;
 8008cfa:	e005      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008cfc:	4b30      	ldr	r3, [pc, #192]	; (8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d0ef      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8008d08:	7cfb      	ldrb	r3, [r7, #19]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d15a      	bne.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008d0e:	4b2b      	ldr	r3, [pc, #172]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d01e      	beq.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d24:	697a      	ldr	r2, [r7, #20]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d019      	beq.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008d2a:	4b24      	ldr	r3, [pc, #144]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d34:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d36:	4b21      	ldr	r3, [pc, #132]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d3c:	4a1f      	ldr	r2, [pc, #124]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d46:	4b1d      	ldr	r3, [pc, #116]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d4c:	4a1b      	ldr	r2, [pc, #108]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008d56:	4a19      	ldr	r2, [pc, #100]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	f003 0301 	and.w	r3, r3, #1
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d016      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d68:	f7fb fb7a 	bl	8004460 <HAL_GetTick>
 8008d6c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d6e:	e00b      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d70:	f7fb fb76 	bl	8004460 <HAL_GetTick>
 8008d74:	4602      	mov	r2, r0
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d902      	bls.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8008d82:	2303      	movs	r3, #3
 8008d84:	74fb      	strb	r3, [r7, #19]
            break;
 8008d86:	e006      	b.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d88:	4b0c      	ldr	r3, [pc, #48]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d8e:	f003 0302 	and.w	r3, r3, #2
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d0ec      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8008d96:	7cfb      	ldrb	r3, [r7, #19]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d10b      	bne.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d9c:	4b07      	ldr	r3, [pc, #28]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008da2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008daa:	4904      	ldr	r1, [pc, #16]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008dac:	4313      	orrs	r3, r2
 8008dae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008db2:	e009      	b.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008db4:	7cfb      	ldrb	r3, [r7, #19]
 8008db6:	74bb      	strb	r3, [r7, #18]
 8008db8:	e006      	b.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008dba:	bf00      	nop
 8008dbc:	40021000 	.word	0x40021000
 8008dc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dc4:	7cfb      	ldrb	r3, [r7, #19]
 8008dc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008dc8:	7c7b      	ldrb	r3, [r7, #17]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d105      	bne.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008dce:	4b8d      	ldr	r3, [pc, #564]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dd2:	4a8c      	ldr	r2, [pc, #560]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0301 	and.w	r3, r3, #1
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00a      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008de6:	4b87      	ldr	r3, [pc, #540]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dec:	f023 0203 	bic.w	r2, r3, #3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a1b      	ldr	r3, [r3, #32]
 8008df4:	4983      	ldr	r1, [pc, #524]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008df6:	4313      	orrs	r3, r2
 8008df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 0302 	and.w	r3, r3, #2
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00a      	beq.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008e08:	4b7e      	ldr	r3, [pc, #504]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e0e:	f023 020c 	bic.w	r2, r3, #12
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e16:	497b      	ldr	r1, [pc, #492]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0304 	and.w	r3, r3, #4
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00a      	beq.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008e2a:	4b76      	ldr	r3, [pc, #472]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e38:	4972      	ldr	r1, [pc, #456]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 0320 	and.w	r3, r3, #32
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00a      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e4c:	4b6d      	ldr	r3, [pc, #436]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5a:	496a      	ldr	r1, [pc, #424]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00a      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008e6e:	4b65      	ldr	r3, [pc, #404]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e7c:	4961      	ldr	r1, [pc, #388]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00a      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008e90:	4b5c      	ldr	r3, [pc, #368]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9e:	4959      	ldr	r1, [pc, #356]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00a      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008eb2:	4b54      	ldr	r3, [pc, #336]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eb8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec0:	4950      	ldr	r1, [pc, #320]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00a      	beq.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008ed4:	4b4b      	ldr	r3, [pc, #300]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eda:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee2:	4948      	ldr	r1, [pc, #288]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00a      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008ef6:	4b43      	ldr	r3, [pc, #268]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008efc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f04:	493f      	ldr	r1, [pc, #252]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008f06:	4313      	orrs	r3, r2
 8008f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d028      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008f18:	4b3a      	ldr	r3, [pc, #232]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f26:	4937      	ldr	r1, [pc, #220]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f36:	d106      	bne.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f38:	4b32      	ldr	r3, [pc, #200]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	4a31      	ldr	r2, [pc, #196]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f42:	60d3      	str	r3, [r2, #12]
 8008f44:	e011      	b.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f4e:	d10c      	bne.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	3304      	adds	r3, #4
 8008f54:	2101      	movs	r1, #1
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 f8a4 	bl	80090a4 <RCCEx_PLLSAI1_Config>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008f60:	7cfb      	ldrb	r3, [r7, #19]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d001      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8008f66:	7cfb      	ldrb	r3, [r7, #19]
 8008f68:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d028      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008f76:	4b23      	ldr	r3, [pc, #140]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f84:	491f      	ldr	r1, [pc, #124]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f94:	d106      	bne.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f96:	4b1b      	ldr	r3, [pc, #108]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	4a1a      	ldr	r2, [pc, #104]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008f9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fa0:	60d3      	str	r3, [r2, #12]
 8008fa2:	e011      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fac:	d10c      	bne.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	3304      	adds	r3, #4
 8008fb2:	2101      	movs	r1, #1
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f000 f875 	bl	80090a4 <RCCEx_PLLSAI1_Config>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008fbe:	7cfb      	ldrb	r3, [r7, #19]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8008fc4:	7cfb      	ldrb	r3, [r7, #19]
 8008fc6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d02b      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008fd4:	4b0b      	ldr	r3, [pc, #44]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fe2:	4908      	ldr	r1, [pc, #32]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ff2:	d109      	bne.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ff4:	4b03      	ldr	r3, [pc, #12]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	4a02      	ldr	r2, [pc, #8]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ffe:	60d3      	str	r3, [r2, #12]
 8009000:	e014      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8009002:	bf00      	nop
 8009004:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800900c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009010:	d10c      	bne.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	3304      	adds	r3, #4
 8009016:	2101      	movs	r1, #1
 8009018:	4618      	mov	r0, r3
 800901a:	f000 f843 	bl	80090a4 <RCCEx_PLLSAI1_Config>
 800901e:	4603      	mov	r3, r0
 8009020:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009022:	7cfb      	ldrb	r3, [r7, #19]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8009028:	7cfb      	ldrb	r3, [r7, #19]
 800902a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009034:	2b00      	cmp	r3, #0
 8009036:	d01c      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009038:	4b19      	ldr	r3, [pc, #100]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800903a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800903e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009046:	4916      	ldr	r1, [pc, #88]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009048:	4313      	orrs	r3, r2
 800904a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009052:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009056:	d10c      	bne.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	3304      	adds	r3, #4
 800905c:	2102      	movs	r1, #2
 800905e:	4618      	mov	r0, r3
 8009060:	f000 f820 	bl	80090a4 <RCCEx_PLLSAI1_Config>
 8009064:	4603      	mov	r3, r0
 8009066:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009068:	7cfb      	ldrb	r3, [r7, #19]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800906e:	7cfb      	ldrb	r3, [r7, #19]
 8009070:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00a      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800907e:	4b08      	ldr	r3, [pc, #32]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009084:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800908c:	4904      	ldr	r1, [pc, #16]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800908e:	4313      	orrs	r3, r2
 8009090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009094:	7cbb      	ldrb	r3, [r7, #18]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3718      	adds	r7, #24
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	40021000 	.word	0x40021000

080090a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80090b2:	4b74      	ldr	r3, [pc, #464]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e0>)
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	f003 0303 	and.w	r3, r3, #3
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d018      	beq.n	80090f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80090be:	4b71      	ldr	r3, [pc, #452]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e0>)
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	f003 0203 	and.w	r2, r3, #3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d10d      	bne.n	80090ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
       ||
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d009      	beq.n	80090ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80090d6:	4b6b      	ldr	r3, [pc, #428]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e0>)
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	091b      	lsrs	r3, r3, #4
 80090dc:	f003 0307 	and.w	r3, r3, #7
 80090e0:	1c5a      	adds	r2, r3, #1
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	685b      	ldr	r3, [r3, #4]
       ||
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d047      	beq.n	800917a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	73fb      	strb	r3, [r7, #15]
 80090ee:	e044      	b.n	800917a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2b03      	cmp	r3, #3
 80090f6:	d018      	beq.n	800912a <RCCEx_PLLSAI1_Config+0x86>
 80090f8:	2b03      	cmp	r3, #3
 80090fa:	d825      	bhi.n	8009148 <RCCEx_PLLSAI1_Config+0xa4>
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d002      	beq.n	8009106 <RCCEx_PLLSAI1_Config+0x62>
 8009100:	2b02      	cmp	r3, #2
 8009102:	d009      	beq.n	8009118 <RCCEx_PLLSAI1_Config+0x74>
 8009104:	e020      	b.n	8009148 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009106:	4b5f      	ldr	r3, [pc, #380]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 0302 	and.w	r3, r3, #2
 800910e:	2b00      	cmp	r3, #0
 8009110:	d11d      	bne.n	800914e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009116:	e01a      	b.n	800914e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009118:	4b5a      	ldr	r3, [pc, #360]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e0>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009120:	2b00      	cmp	r3, #0
 8009122:	d116      	bne.n	8009152 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009128:	e013      	b.n	8009152 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800912a:	4b56      	ldr	r3, [pc, #344]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e0>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10f      	bne.n	8009156 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009136:	4b53      	ldr	r3, [pc, #332]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d109      	bne.n	8009156 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009146:	e006      	b.n	8009156 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	73fb      	strb	r3, [r7, #15]
      break;
 800914c:	e004      	b.n	8009158 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800914e:	bf00      	nop
 8009150:	e002      	b.n	8009158 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009152:	bf00      	nop
 8009154:	e000      	b.n	8009158 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009156:	bf00      	nop
    }

    if(status == HAL_OK)
 8009158:	7bfb      	ldrb	r3, [r7, #15]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d10d      	bne.n	800917a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800915e:	4b49      	ldr	r3, [pc, #292]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6819      	ldr	r1, [r3, #0]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	3b01      	subs	r3, #1
 8009170:	011b      	lsls	r3, r3, #4
 8009172:	430b      	orrs	r3, r1
 8009174:	4943      	ldr	r1, [pc, #268]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009176:	4313      	orrs	r3, r2
 8009178:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800917a:	7bfb      	ldrb	r3, [r7, #15]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d17c      	bne.n	800927a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009180:	4b40      	ldr	r3, [pc, #256]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a3f      	ldr	r2, [pc, #252]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009186:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800918a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800918c:	f7fb f968 	bl	8004460 <HAL_GetTick>
 8009190:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009192:	e009      	b.n	80091a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009194:	f7fb f964 	bl	8004460 <HAL_GetTick>
 8009198:	4602      	mov	r2, r0
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	1ad3      	subs	r3, r2, r3
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d902      	bls.n	80091a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80091a2:	2303      	movs	r3, #3
 80091a4:	73fb      	strb	r3, [r7, #15]
        break;
 80091a6:	e005      	b.n	80091b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80091a8:	4b36      	ldr	r3, [pc, #216]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e0>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1ef      	bne.n	8009194 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d15f      	bne.n	800927a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d110      	bne.n	80091e2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80091c0:	4b30      	ldr	r3, [pc, #192]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e0>)
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80091c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	6892      	ldr	r2, [r2, #8]
 80091d0:	0211      	lsls	r1, r2, #8
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	68d2      	ldr	r2, [r2, #12]
 80091d6:	06d2      	lsls	r2, r2, #27
 80091d8:	430a      	orrs	r2, r1
 80091da:	492a      	ldr	r1, [pc, #168]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e0>)
 80091dc:	4313      	orrs	r3, r2
 80091de:	610b      	str	r3, [r1, #16]
 80091e0:	e027      	b.n	8009232 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d112      	bne.n	800920e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80091e8:	4b26      	ldr	r3, [pc, #152]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e0>)
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80091f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	6892      	ldr	r2, [r2, #8]
 80091f8:	0211      	lsls	r1, r2, #8
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	6912      	ldr	r2, [r2, #16]
 80091fe:	0852      	lsrs	r2, r2, #1
 8009200:	3a01      	subs	r2, #1
 8009202:	0552      	lsls	r2, r2, #21
 8009204:	430a      	orrs	r2, r1
 8009206:	491f      	ldr	r1, [pc, #124]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009208:	4313      	orrs	r3, r2
 800920a:	610b      	str	r3, [r1, #16]
 800920c:	e011      	b.n	8009232 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800920e:	4b1d      	ldr	r3, [pc, #116]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009216:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	6892      	ldr	r2, [r2, #8]
 800921e:	0211      	lsls	r1, r2, #8
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	6952      	ldr	r2, [r2, #20]
 8009224:	0852      	lsrs	r2, r2, #1
 8009226:	3a01      	subs	r2, #1
 8009228:	0652      	lsls	r2, r2, #25
 800922a:	430a      	orrs	r2, r1
 800922c:	4915      	ldr	r1, [pc, #84]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e0>)
 800922e:	4313      	orrs	r3, r2
 8009230:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009232:	4b14      	ldr	r3, [pc, #80]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a13      	ldr	r2, [pc, #76]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009238:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800923c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800923e:	f7fb f90f 	bl	8004460 <HAL_GetTick>
 8009242:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009244:	e009      	b.n	800925a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009246:	f7fb f90b 	bl	8004460 <HAL_GetTick>
 800924a:	4602      	mov	r2, r0
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	2b02      	cmp	r3, #2
 8009252:	d902      	bls.n	800925a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8009254:	2303      	movs	r3, #3
 8009256:	73fb      	strb	r3, [r7, #15]
          break;
 8009258:	e005      	b.n	8009266 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800925a:	4b0a      	ldr	r3, [pc, #40]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e0>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009262:	2b00      	cmp	r3, #0
 8009264:	d0ef      	beq.n	8009246 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8009266:	7bfb      	ldrb	r3, [r7, #15]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d106      	bne.n	800927a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800926c:	4b05      	ldr	r3, [pc, #20]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e0>)
 800926e:	691a      	ldr	r2, [r3, #16]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	699b      	ldr	r3, [r3, #24]
 8009274:	4903      	ldr	r1, [pc, #12]	; (8009284 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009276:	4313      	orrs	r3, r2
 8009278:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800927a:	7bfb      	ldrb	r3, [r7, #15]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3710      	adds	r7, #16
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	40021000 	.word	0x40021000

08009288 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d101      	bne.n	800929a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	e095      	b.n	80093c6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d108      	bne.n	80092b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092aa:	d009      	beq.n	80092c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	61da      	str	r2, [r3, #28]
 80092b2:	e005      	b.n	80092c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d106      	bne.n	80092e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f7fa fe5a 	bl	8003f94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2202      	movs	r2, #2
 80092e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009300:	d902      	bls.n	8009308 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009302:	2300      	movs	r3, #0
 8009304:	60fb      	str	r3, [r7, #12]
 8009306:	e002      	b.n	800930e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800930c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009316:	d007      	beq.n	8009328 <HAL_SPI_Init+0xa0>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009320:	d002      	beq.n	8009328 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009338:	431a      	orrs	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	f003 0302 	and.w	r3, r3, #2
 8009342:	431a      	orrs	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	695b      	ldr	r3, [r3, #20]
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	431a      	orrs	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009356:	431a      	orrs	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	69db      	ldr	r3, [r3, #28]
 800935c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009360:	431a      	orrs	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a1b      	ldr	r3, [r3, #32]
 8009366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800936a:	ea42 0103 	orr.w	r1, r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009372:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	430a      	orrs	r2, r1
 800937c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	699b      	ldr	r3, [r3, #24]
 8009382:	0c1b      	lsrs	r3, r3, #16
 8009384:	f003 0204 	and.w	r2, r3, #4
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938c:	f003 0310 	and.w	r3, r3, #16
 8009390:	431a      	orrs	r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009396:	f003 0308 	and.w	r3, r3, #8
 800939a:	431a      	orrs	r2, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80093a4:	ea42 0103 	orr.w	r1, r2, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	430a      	orrs	r2, r1
 80093b4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b088      	sub	sp, #32
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	60f8      	str	r0, [r7, #12]
 80093d6:	60b9      	str	r1, [r7, #8]
 80093d8:	603b      	str	r3, [r7, #0]
 80093da:	4613      	mov	r3, r2
 80093dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80093de:	2300      	movs	r3, #0
 80093e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d101      	bne.n	80093f0 <HAL_SPI_Transmit+0x22>
 80093ec:	2302      	movs	r3, #2
 80093ee:	e158      	b.n	80096a2 <HAL_SPI_Transmit+0x2d4>
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093f8:	f7fb f832 	bl	8004460 <HAL_GetTick>
 80093fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80093fe:	88fb      	ldrh	r3, [r7, #6]
 8009400:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009408:	b2db      	uxtb	r3, r3
 800940a:	2b01      	cmp	r3, #1
 800940c:	d002      	beq.n	8009414 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800940e:	2302      	movs	r3, #2
 8009410:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009412:	e13d      	b.n	8009690 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d002      	beq.n	8009420 <HAL_SPI_Transmit+0x52>
 800941a:	88fb      	ldrh	r3, [r7, #6]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d102      	bne.n	8009426 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009424:	e134      	b.n	8009690 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2203      	movs	r2, #3
 800942a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2200      	movs	r2, #0
 8009432:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	88fa      	ldrh	r2, [r7, #6]
 800943e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	88fa      	ldrh	r2, [r7, #6]
 8009444:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2200      	movs	r2, #0
 8009450:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2200      	movs	r2, #0
 8009458:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2200      	movs	r2, #0
 8009460:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009470:	d10f      	bne.n	8009492 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009480:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009490:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800949c:	2b40      	cmp	r3, #64	; 0x40
 800949e:	d007      	beq.n	80094b0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80094b8:	d94b      	bls.n	8009552 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d002      	beq.n	80094c8 <HAL_SPI_Transmit+0xfa>
 80094c2:	8afb      	ldrh	r3, [r7, #22]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d13e      	bne.n	8009546 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094cc:	881a      	ldrh	r2, [r3, #0]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d8:	1c9a      	adds	r2, r3, #2
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	3b01      	subs	r3, #1
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80094ec:	e02b      	b.n	8009546 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	f003 0302 	and.w	r3, r3, #2
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	d112      	bne.n	8009522 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009500:	881a      	ldrh	r2, [r3, #0]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950c:	1c9a      	adds	r2, r3, #2
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009516:	b29b      	uxth	r3, r3
 8009518:	3b01      	subs	r3, #1
 800951a:	b29a      	uxth	r2, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009520:	e011      	b.n	8009546 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009522:	f7fa ff9d 	bl	8004460 <HAL_GetTick>
 8009526:	4602      	mov	r2, r0
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	429a      	cmp	r2, r3
 8009530:	d803      	bhi.n	800953a <HAL_SPI_Transmit+0x16c>
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009538:	d102      	bne.n	8009540 <HAL_SPI_Transmit+0x172>
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d102      	bne.n	8009546 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8009540:	2303      	movs	r3, #3
 8009542:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009544:	e0a4      	b.n	8009690 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800954a:	b29b      	uxth	r3, r3
 800954c:	2b00      	cmp	r3, #0
 800954e:	d1ce      	bne.n	80094ee <HAL_SPI_Transmit+0x120>
 8009550:	e07c      	b.n	800964c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d002      	beq.n	8009560 <HAL_SPI_Transmit+0x192>
 800955a:	8afb      	ldrh	r3, [r7, #22]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d170      	bne.n	8009642 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009564:	b29b      	uxth	r3, r3
 8009566:	2b01      	cmp	r3, #1
 8009568:	d912      	bls.n	8009590 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956e:	881a      	ldrh	r2, [r3, #0]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957a:	1c9a      	adds	r2, r3, #2
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009584:	b29b      	uxth	r3, r3
 8009586:	3b02      	subs	r3, #2
 8009588:	b29a      	uxth	r2, r3
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800958e:	e058      	b.n	8009642 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	330c      	adds	r3, #12
 800959a:	7812      	ldrb	r2, [r2, #0]
 800959c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a2:	1c5a      	adds	r2, r3, #1
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	3b01      	subs	r3, #1
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80095b6:	e044      	b.n	8009642 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	f003 0302 	and.w	r3, r3, #2
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d12b      	bne.n	800961e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d912      	bls.n	80095f6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d4:	881a      	ldrh	r2, [r3, #0]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e0:	1c9a      	adds	r2, r3, #2
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	3b02      	subs	r3, #2
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095f4:	e025      	b.n	8009642 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	330c      	adds	r3, #12
 8009600:	7812      	ldrb	r2, [r2, #0]
 8009602:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009608:	1c5a      	adds	r2, r3, #1
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009612:	b29b      	uxth	r3, r3
 8009614:	3b01      	subs	r3, #1
 8009616:	b29a      	uxth	r2, r3
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800961c:	e011      	b.n	8009642 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800961e:	f7fa ff1f 	bl	8004460 <HAL_GetTick>
 8009622:	4602      	mov	r2, r0
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	683a      	ldr	r2, [r7, #0]
 800962a:	429a      	cmp	r2, r3
 800962c:	d803      	bhi.n	8009636 <HAL_SPI_Transmit+0x268>
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009634:	d102      	bne.n	800963c <HAL_SPI_Transmit+0x26e>
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d102      	bne.n	8009642 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800963c:	2303      	movs	r3, #3
 800963e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009640:	e026      	b.n	8009690 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009646:	b29b      	uxth	r3, r3
 8009648:	2b00      	cmp	r3, #0
 800964a:	d1b5      	bne.n	80095b8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800964c:	69ba      	ldr	r2, [r7, #24]
 800964e:	6839      	ldr	r1, [r7, #0]
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f000 fb5b 	bl	8009d0c <SPI_EndRxTxTransaction>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2220      	movs	r2, #32
 8009660:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d10a      	bne.n	8009680 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800966a:	2300      	movs	r3, #0
 800966c:	613b      	str	r3, [r7, #16]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	613b      	str	r3, [r7, #16]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	613b      	str	r3, [r7, #16]
 800967e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009684:	2b00      	cmp	r3, #0
 8009686:	d002      	beq.n	800968e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	77fb      	strb	r3, [r7, #31]
 800968c:	e000      	b.n	8009690 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800968e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80096a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3720      	adds	r7, #32
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b08a      	sub	sp, #40	; 0x28
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	60f8      	str	r0, [r7, #12]
 80096b2:	60b9      	str	r1, [r7, #8]
 80096b4:	607a      	str	r2, [r7, #4]
 80096b6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80096b8:	2301      	movs	r3, #1
 80096ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d101      	bne.n	80096d0 <HAL_SPI_TransmitReceive+0x26>
 80096cc:	2302      	movs	r3, #2
 80096ce:	e1fb      	b.n	8009ac8 <HAL_SPI_TransmitReceive+0x41e>
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096d8:	f7fa fec2 	bl	8004460 <HAL_GetTick>
 80096dc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80096e4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80096ec:	887b      	ldrh	r3, [r7, #2]
 80096ee:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80096f0:	887b      	ldrh	r3, [r7, #2]
 80096f2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80096f4:	7efb      	ldrb	r3, [r7, #27]
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d00e      	beq.n	8009718 <HAL_SPI_TransmitReceive+0x6e>
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009700:	d106      	bne.n	8009710 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d102      	bne.n	8009710 <HAL_SPI_TransmitReceive+0x66>
 800970a:	7efb      	ldrb	r3, [r7, #27]
 800970c:	2b04      	cmp	r3, #4
 800970e:	d003      	beq.n	8009718 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009710:	2302      	movs	r3, #2
 8009712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009716:	e1cd      	b.n	8009ab4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d005      	beq.n	800972a <HAL_SPI_TransmitReceive+0x80>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d002      	beq.n	800972a <HAL_SPI_TransmitReceive+0x80>
 8009724:	887b      	ldrh	r3, [r7, #2]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d103      	bne.n	8009732 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009730:	e1c0      	b.n	8009ab4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009738:	b2db      	uxtb	r3, r3
 800973a:	2b04      	cmp	r3, #4
 800973c:	d003      	beq.n	8009746 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2205      	movs	r2, #5
 8009742:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	887a      	ldrh	r2, [r7, #2]
 8009756:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	887a      	ldrh	r2, [r7, #2]
 800975e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	68ba      	ldr	r2, [r7, #8]
 8009766:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	887a      	ldrh	r2, [r7, #2]
 800976c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	887a      	ldrh	r2, [r7, #2]
 8009772:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009788:	d802      	bhi.n	8009790 <HAL_SPI_TransmitReceive+0xe6>
 800978a:	8a3b      	ldrh	r3, [r7, #16]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d908      	bls.n	80097a2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800979e:	605a      	str	r2, [r3, #4]
 80097a0:	e007      	b.n	80097b2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	685a      	ldr	r2, [r3, #4]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80097b0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097bc:	2b40      	cmp	r3, #64	; 0x40
 80097be:	d007      	beq.n	80097d0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097d8:	d97c      	bls.n	80098d4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d002      	beq.n	80097e8 <HAL_SPI_TransmitReceive+0x13e>
 80097e2:	8a7b      	ldrh	r3, [r7, #18]
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d169      	bne.n	80098bc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ec:	881a      	ldrh	r2, [r3, #0]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f8:	1c9a      	adds	r2, r3, #2
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009802:	b29b      	uxth	r3, r3
 8009804:	3b01      	subs	r3, #1
 8009806:	b29a      	uxth	r2, r3
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800980c:	e056      	b.n	80098bc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	f003 0302 	and.w	r3, r3, #2
 8009818:	2b02      	cmp	r3, #2
 800981a:	d11b      	bne.n	8009854 <HAL_SPI_TransmitReceive+0x1aa>
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009820:	b29b      	uxth	r3, r3
 8009822:	2b00      	cmp	r3, #0
 8009824:	d016      	beq.n	8009854 <HAL_SPI_TransmitReceive+0x1aa>
 8009826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009828:	2b01      	cmp	r3, #1
 800982a:	d113      	bne.n	8009854 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009830:	881a      	ldrh	r2, [r3, #0]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983c:	1c9a      	adds	r2, r3, #2
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009846:	b29b      	uxth	r3, r3
 8009848:	3b01      	subs	r3, #1
 800984a:	b29a      	uxth	r2, r3
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009850:	2300      	movs	r3, #0
 8009852:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	f003 0301 	and.w	r3, r3, #1
 800985e:	2b01      	cmp	r3, #1
 8009860:	d11c      	bne.n	800989c <HAL_SPI_TransmitReceive+0x1f2>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009868:	b29b      	uxth	r3, r3
 800986a:	2b00      	cmp	r3, #0
 800986c:	d016      	beq.n	800989c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	68da      	ldr	r2, [r3, #12]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009878:	b292      	uxth	r2, r2
 800987a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009880:	1c9a      	adds	r2, r3, #2
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800988c:	b29b      	uxth	r3, r3
 800988e:	3b01      	subs	r3, #1
 8009890:	b29a      	uxth	r2, r3
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009898:	2301      	movs	r3, #1
 800989a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800989c:	f7fa fde0 	bl	8004460 <HAL_GetTick>
 80098a0:	4602      	mov	r2, r0
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d807      	bhi.n	80098bc <HAL_SPI_TransmitReceive+0x212>
 80098ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b2:	d003      	beq.n	80098bc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80098b4:	2303      	movs	r3, #3
 80098b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80098ba:	e0fb      	b.n	8009ab4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1a3      	bne.n	800980e <HAL_SPI_TransmitReceive+0x164>
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d19d      	bne.n	800980e <HAL_SPI_TransmitReceive+0x164>
 80098d2:	e0df      	b.n	8009a94 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d003      	beq.n	80098e4 <HAL_SPI_TransmitReceive+0x23a>
 80098dc:	8a7b      	ldrh	r3, [r7, #18]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	f040 80cb 	bne.w	8009a7a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d912      	bls.n	8009914 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f2:	881a      	ldrh	r2, [r3, #0]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fe:	1c9a      	adds	r2, r3, #2
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009908:	b29b      	uxth	r3, r3
 800990a:	3b02      	subs	r3, #2
 800990c:	b29a      	uxth	r2, r3
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009912:	e0b2      	b.n	8009a7a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	330c      	adds	r3, #12
 800991e:	7812      	ldrb	r2, [r2, #0]
 8009920:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009926:	1c5a      	adds	r2, r3, #1
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009930:	b29b      	uxth	r3, r3
 8009932:	3b01      	subs	r3, #1
 8009934:	b29a      	uxth	r2, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800993a:	e09e      	b.n	8009a7a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	f003 0302 	and.w	r3, r3, #2
 8009946:	2b02      	cmp	r3, #2
 8009948:	d134      	bne.n	80099b4 <HAL_SPI_TransmitReceive+0x30a>
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800994e:	b29b      	uxth	r3, r3
 8009950:	2b00      	cmp	r3, #0
 8009952:	d02f      	beq.n	80099b4 <HAL_SPI_TransmitReceive+0x30a>
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	2b01      	cmp	r3, #1
 8009958:	d12c      	bne.n	80099b4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800995e:	b29b      	uxth	r3, r3
 8009960:	2b01      	cmp	r3, #1
 8009962:	d912      	bls.n	800998a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009968:	881a      	ldrh	r2, [r3, #0]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009974:	1c9a      	adds	r2, r3, #2
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800997e:	b29b      	uxth	r3, r3
 8009980:	3b02      	subs	r3, #2
 8009982:	b29a      	uxth	r2, r3
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009988:	e012      	b.n	80099b0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	330c      	adds	r3, #12
 8009994:	7812      	ldrb	r2, [r2, #0]
 8009996:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999c:	1c5a      	adds	r2, r3, #1
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	3b01      	subs	r3, #1
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80099b0:	2300      	movs	r3, #0
 80099b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	f003 0301 	and.w	r3, r3, #1
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d148      	bne.n	8009a54 <HAL_SPI_TransmitReceive+0x3aa>
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d042      	beq.n	8009a54 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d923      	bls.n	8009a22 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68da      	ldr	r2, [r3, #12]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e4:	b292      	uxth	r2, r2
 80099e6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ec:	1c9a      	adds	r2, r3, #2
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	3b02      	subs	r3, #2
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d81f      	bhi.n	8009a50 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	685a      	ldr	r2, [r3, #4]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009a1e:	605a      	str	r2, [r3, #4]
 8009a20:	e016      	b.n	8009a50 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f103 020c 	add.w	r2, r3, #12
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2e:	7812      	ldrb	r2, [r2, #0]
 8009a30:	b2d2      	uxtb	r2, r2
 8009a32:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a38:	1c5a      	adds	r2, r3, #1
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	3b01      	subs	r3, #1
 8009a48:	b29a      	uxth	r2, r3
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a50:	2301      	movs	r3, #1
 8009a52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009a54:	f7fa fd04 	bl	8004460 <HAL_GetTick>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	69fb      	ldr	r3, [r7, #28]
 8009a5c:	1ad3      	subs	r3, r2, r3
 8009a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d803      	bhi.n	8009a6c <HAL_SPI_TransmitReceive+0x3c2>
 8009a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6a:	d102      	bne.n	8009a72 <HAL_SPI_TransmitReceive+0x3c8>
 8009a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d103      	bne.n	8009a7a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009a72:	2303      	movs	r3, #3
 8009a74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009a78:	e01c      	b.n	8009ab4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f47f af5b 	bne.w	800993c <HAL_SPI_TransmitReceive+0x292>
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f47f af54 	bne.w	800993c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009a94:	69fa      	ldr	r2, [r7, #28]
 8009a96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f000 f937 	bl	8009d0c <SPI_EndRxTxTransaction>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d006      	beq.n	8009ab2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2220      	movs	r2, #32
 8009aae:	661a      	str	r2, [r3, #96]	; 0x60
 8009ab0:	e000      	b.n	8009ab4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009ab2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009ac4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3728      	adds	r7, #40	; 0x28
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b088      	sub	sp, #32
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	603b      	str	r3, [r7, #0]
 8009adc:	4613      	mov	r3, r2
 8009ade:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009ae0:	f7fa fcbe 	bl	8004460 <HAL_GetTick>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae8:	1a9b      	subs	r3, r3, r2
 8009aea:	683a      	ldr	r2, [r7, #0]
 8009aec:	4413      	add	r3, r2
 8009aee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009af0:	f7fa fcb6 	bl	8004460 <HAL_GetTick>
 8009af4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009af6:	4b39      	ldr	r3, [pc, #228]	; (8009bdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	015b      	lsls	r3, r3, #5
 8009afc:	0d1b      	lsrs	r3, r3, #20
 8009afe:	69fa      	ldr	r2, [r7, #28]
 8009b00:	fb02 f303 	mul.w	r3, r2, r3
 8009b04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b06:	e054      	b.n	8009bb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b0e:	d050      	beq.n	8009bb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b10:	f7fa fca6 	bl	8004460 <HAL_GetTick>
 8009b14:	4602      	mov	r2, r0
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	1ad3      	subs	r3, r2, r3
 8009b1a:	69fa      	ldr	r2, [r7, #28]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d902      	bls.n	8009b26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d13d      	bne.n	8009ba2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	685a      	ldr	r2, [r3, #4]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009b34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b3e:	d111      	bne.n	8009b64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b48:	d004      	beq.n	8009b54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b52:	d107      	bne.n	8009b64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b6c:	d10f      	bne.n	8009b8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b7c:	601a      	str	r2, [r3, #0]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2201      	movs	r2, #1
 8009b92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	e017      	b.n	8009bd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d101      	bne.n	8009bac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	689a      	ldr	r2, [r3, #8]
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	4013      	ands	r3, r2
 8009bbc:	68ba      	ldr	r2, [r7, #8]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	bf0c      	ite	eq
 8009bc2:	2301      	moveq	r3, #1
 8009bc4:	2300      	movne	r3, #0
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	461a      	mov	r2, r3
 8009bca:	79fb      	ldrb	r3, [r7, #7]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d19b      	bne.n	8009b08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3720      	adds	r7, #32
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	20000000 	.word	0x20000000

08009be0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b08a      	sub	sp, #40	; 0x28
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	607a      	str	r2, [r7, #4]
 8009bec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009bf2:	f7fa fc35 	bl	8004460 <HAL_GetTick>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfa:	1a9b      	subs	r3, r3, r2
 8009bfc:	683a      	ldr	r2, [r7, #0]
 8009bfe:	4413      	add	r3, r2
 8009c00:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009c02:	f7fa fc2d 	bl	8004460 <HAL_GetTick>
 8009c06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	330c      	adds	r3, #12
 8009c0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009c10:	4b3d      	ldr	r3, [pc, #244]	; (8009d08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	4613      	mov	r3, r2
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	4413      	add	r3, r2
 8009c1a:	00da      	lsls	r2, r3, #3
 8009c1c:	1ad3      	subs	r3, r2, r3
 8009c1e:	0d1b      	lsrs	r3, r3, #20
 8009c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c22:	fb02 f303 	mul.w	r3, r2, r3
 8009c26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009c28:	e060      	b.n	8009cec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009c30:	d107      	bne.n	8009c42 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d104      	bne.n	8009c42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009c40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c48:	d050      	beq.n	8009cec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009c4a:	f7fa fc09 	bl	8004460 <HAL_GetTick>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	6a3b      	ldr	r3, [r7, #32]
 8009c52:	1ad3      	subs	r3, r2, r3
 8009c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d902      	bls.n	8009c60 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d13d      	bne.n	8009cdc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	685a      	ldr	r2, [r3, #4]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009c6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c78:	d111      	bne.n	8009c9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c82:	d004      	beq.n	8009c8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c8c:	d107      	bne.n	8009c9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ca6:	d10f      	bne.n	8009cc8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009cb6:	601a      	str	r2, [r3, #0]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009cc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	e010      	b.n	8009cfe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d101      	bne.n	8009ce6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	689a      	ldr	r2, [r3, #8]
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d196      	bne.n	8009c2a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3728      	adds	r7, #40	; 0x28
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	20000000 	.word	0x20000000

08009d0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b086      	sub	sp, #24
 8009d10:	af02      	add	r7, sp, #8
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	f7ff ff5b 	bl	8009be0 <SPI_WaitFifoStateUntilTimeout>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d007      	beq.n	8009d40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d34:	f043 0220 	orr.w	r2, r3, #32
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	e027      	b.n	8009d90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	9300      	str	r3, [sp, #0]
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	2200      	movs	r2, #0
 8009d48:	2180      	movs	r1, #128	; 0x80
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	f7ff fec0 	bl	8009ad0 <SPI_WaitFlagStateUntilTimeout>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d007      	beq.n	8009d66 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d5a:	f043 0220 	orr.w	r2, r3, #32
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009d62:	2303      	movs	r3, #3
 8009d64:	e014      	b.n	8009d90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f7ff ff34 	bl	8009be0 <SPI_WaitFifoStateUntilTimeout>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d007      	beq.n	8009d8e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d82:	f043 0220 	orr.w	r2, r3, #32
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009d8a:	2303      	movs	r3, #3
 8009d8c:	e000      	b.n	8009d90 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3710      	adds	r7, #16
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d101      	bne.n	8009daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e049      	b.n	8009e3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d106      	bne.n	8009dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7fa fa82 	bl	80042c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2202      	movs	r2, #2
 8009dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	3304      	adds	r3, #4
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	4610      	mov	r0, r2
 8009dd8:	f000 f9d2 	bl	800a180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2201      	movs	r2, #1
 8009e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3708      	adds	r7, #8
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
	...

08009e48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d001      	beq.n	8009e60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e03b      	b.n	8009ed8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2202      	movs	r2, #2
 8009e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68da      	ldr	r2, [r3, #12]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f042 0201 	orr.w	r2, r2, #1
 8009e76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a19      	ldr	r2, [pc, #100]	; (8009ee4 <HAL_TIM_Base_Start_IT+0x9c>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d009      	beq.n	8009e96 <HAL_TIM_Base_Start_IT+0x4e>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e8a:	d004      	beq.n	8009e96 <HAL_TIM_Base_Start_IT+0x4e>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a15      	ldr	r2, [pc, #84]	; (8009ee8 <HAL_TIM_Base_Start_IT+0xa0>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d115      	bne.n	8009ec2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	689a      	ldr	r2, [r3, #8]
 8009e9c:	4b13      	ldr	r3, [pc, #76]	; (8009eec <HAL_TIM_Base_Start_IT+0xa4>)
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2b06      	cmp	r3, #6
 8009ea6:	d015      	beq.n	8009ed4 <HAL_TIM_Base_Start_IT+0x8c>
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009eae:	d011      	beq.n	8009ed4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f042 0201 	orr.w	r2, r2, #1
 8009ebe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ec0:	e008      	b.n	8009ed4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f042 0201 	orr.w	r2, r2, #1
 8009ed0:	601a      	str	r2, [r3, #0]
 8009ed2:	e000      	b.n	8009ed6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ed4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3714      	adds	r7, #20
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr
 8009ee4:	40012c00 	.word	0x40012c00
 8009ee8:	40014000 	.word	0x40014000
 8009eec:	00010007 	.word	0x00010007

08009ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	f003 0302 	and.w	r3, r3, #2
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	d122      	bne.n	8009f4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	f003 0302 	and.w	r3, r3, #2
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d11b      	bne.n	8009f4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f06f 0202 	mvn.w	r2, #2
 8009f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2201      	movs	r2, #1
 8009f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	699b      	ldr	r3, [r3, #24]
 8009f2a:	f003 0303 	and.w	r3, r3, #3
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d003      	beq.n	8009f3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f905 	bl	800a142 <HAL_TIM_IC_CaptureCallback>
 8009f38:	e005      	b.n	8009f46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f8f7 	bl	800a12e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 f908 	bl	800a156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	691b      	ldr	r3, [r3, #16]
 8009f52:	f003 0304 	and.w	r3, r3, #4
 8009f56:	2b04      	cmp	r3, #4
 8009f58:	d122      	bne.n	8009fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	f003 0304 	and.w	r3, r3, #4
 8009f64:	2b04      	cmp	r3, #4
 8009f66:	d11b      	bne.n	8009fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f06f 0204 	mvn.w	r2, #4
 8009f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2202      	movs	r2, #2
 8009f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	699b      	ldr	r3, [r3, #24]
 8009f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d003      	beq.n	8009f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f8db 	bl	800a142 <HAL_TIM_IC_CaptureCallback>
 8009f8c:	e005      	b.n	8009f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 f8cd 	bl	800a12e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 f8de 	bl	800a156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	f003 0308 	and.w	r3, r3, #8
 8009faa:	2b08      	cmp	r3, #8
 8009fac:	d122      	bne.n	8009ff4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	f003 0308 	and.w	r3, r3, #8
 8009fb8:	2b08      	cmp	r3, #8
 8009fba:	d11b      	bne.n	8009ff4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f06f 0208 	mvn.w	r2, #8
 8009fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2204      	movs	r2, #4
 8009fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	69db      	ldr	r3, [r3, #28]
 8009fd2:	f003 0303 	and.w	r3, r3, #3
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d003      	beq.n	8009fe2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 f8b1 	bl	800a142 <HAL_TIM_IC_CaptureCallback>
 8009fe0:	e005      	b.n	8009fee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 f8a3 	bl	800a12e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 f8b4 	bl	800a156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	f003 0310 	and.w	r3, r3, #16
 8009ffe:	2b10      	cmp	r3, #16
 800a000:	d122      	bne.n	800a048 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	f003 0310 	and.w	r3, r3, #16
 800a00c:	2b10      	cmp	r3, #16
 800a00e:	d11b      	bne.n	800a048 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f06f 0210 	mvn.w	r2, #16
 800a018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2208      	movs	r2, #8
 800a01e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	69db      	ldr	r3, [r3, #28]
 800a026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d003      	beq.n	800a036 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f887 	bl	800a142 <HAL_TIM_IC_CaptureCallback>
 800a034:	e005      	b.n	800a042 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 f879 	bl	800a12e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f000 f88a 	bl	800a156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	f003 0301 	and.w	r3, r3, #1
 800a052:	2b01      	cmp	r3, #1
 800a054:	d10e      	bne.n	800a074 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	f003 0301 	and.w	r3, r3, #1
 800a060:	2b01      	cmp	r3, #1
 800a062:	d107      	bne.n	800a074 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f06f 0201 	mvn.w	r2, #1
 800a06c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f7f9 ff04 	bl	8003e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a07e:	2b80      	cmp	r3, #128	; 0x80
 800a080:	d10e      	bne.n	800a0a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a08c:	2b80      	cmp	r3, #128	; 0x80
 800a08e:	d107      	bne.n	800a0a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f944 	bl	800a328 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0ae:	d10e      	bne.n	800a0ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0ba:	2b80      	cmp	r3, #128	; 0x80
 800a0bc:	d107      	bne.n	800a0ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a0c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 f937 	bl	800a33c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	691b      	ldr	r3, [r3, #16]
 800a0d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d8:	2b40      	cmp	r3, #64	; 0x40
 800a0da:	d10e      	bne.n	800a0fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0e6:	2b40      	cmp	r3, #64	; 0x40
 800a0e8:	d107      	bne.n	800a0fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a0f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 f838 	bl	800a16a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	f003 0320 	and.w	r3, r3, #32
 800a104:	2b20      	cmp	r3, #32
 800a106:	d10e      	bne.n	800a126 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	f003 0320 	and.w	r3, r3, #32
 800a112:	2b20      	cmp	r3, #32
 800a114:	d107      	bne.n	800a126 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f06f 0220 	mvn.w	r2, #32
 800a11e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 f8f7 	bl	800a314 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a126:	bf00      	nop
 800a128:	3708      	adds	r7, #8
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a12e:	b480      	push	{r7}
 800a130:	b083      	sub	sp, #12
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a136:	bf00      	nop
 800a138:	370c      	adds	r7, #12
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr

0800a142 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a142:	b480      	push	{r7}
 800a144:	b083      	sub	sp, #12
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a14a:	bf00      	nop
 800a14c:	370c      	adds	r7, #12
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr

0800a156 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a156:	b480      	push	{r7}
 800a158:	b083      	sub	sp, #12
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a15e:	bf00      	nop
 800a160:	370c      	adds	r7, #12
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr

0800a16a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a16a:	b480      	push	{r7}
 800a16c:	b083      	sub	sp, #12
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a172:	bf00      	nop
 800a174:	370c      	adds	r7, #12
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
	...

0800a180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a180:	b480      	push	{r7}
 800a182:	b085      	sub	sp, #20
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a2a      	ldr	r2, [pc, #168]	; (800a23c <TIM_Base_SetConfig+0xbc>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d003      	beq.n	800a1a0 <TIM_Base_SetConfig+0x20>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a19e:	d108      	bne.n	800a1b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a21      	ldr	r2, [pc, #132]	; (800a23c <TIM_Base_SetConfig+0xbc>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d00b      	beq.n	800a1d2 <TIM_Base_SetConfig+0x52>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1c0:	d007      	beq.n	800a1d2 <TIM_Base_SetConfig+0x52>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a1e      	ldr	r2, [pc, #120]	; (800a240 <TIM_Base_SetConfig+0xc0>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d003      	beq.n	800a1d2 <TIM_Base_SetConfig+0x52>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a1d      	ldr	r2, [pc, #116]	; (800a244 <TIM_Base_SetConfig+0xc4>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d108      	bne.n	800a1e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	68fa      	ldr	r2, [r7, #12]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	695b      	ldr	r3, [r3, #20]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	689a      	ldr	r2, [r3, #8]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a0c      	ldr	r2, [pc, #48]	; (800a23c <TIM_Base_SetConfig+0xbc>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d007      	beq.n	800a220 <TIM_Base_SetConfig+0xa0>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a0b      	ldr	r2, [pc, #44]	; (800a240 <TIM_Base_SetConfig+0xc0>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d003      	beq.n	800a220 <TIM_Base_SetConfig+0xa0>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a0a      	ldr	r2, [pc, #40]	; (800a244 <TIM_Base_SetConfig+0xc4>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d103      	bne.n	800a228 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	691a      	ldr	r2, [r3, #16]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	615a      	str	r2, [r3, #20]
}
 800a22e:	bf00      	nop
 800a230:	3714      	adds	r7, #20
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	40012c00 	.word	0x40012c00
 800a240:	40014000 	.word	0x40014000
 800a244:	40014400 	.word	0x40014400

0800a248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d101      	bne.n	800a260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a25c:	2302      	movs	r3, #2
 800a25e:	e04f      	b.n	800a300 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2202      	movs	r2, #2
 800a26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a21      	ldr	r2, [pc, #132]	; (800a30c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d108      	bne.n	800a29c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a290:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	4313      	orrs	r3, r2
 800a29a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	68fa      	ldr	r2, [r7, #12]
 800a2b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a14      	ldr	r2, [pc, #80]	; (800a30c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d009      	beq.n	800a2d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2c8:	d004      	beq.n	800a2d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a10      	ldr	r2, [pc, #64]	; (800a310 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d10c      	bne.n	800a2ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	68ba      	ldr	r2, [r7, #8]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68ba      	ldr	r2, [r7, #8]
 800a2ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	4618      	mov	r0, r3
 800a302:	3714      	adds	r7, #20
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr
 800a30c:	40012c00 	.word	0x40012c00
 800a310:	40014000 	.word	0x40014000

0800a314 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a31c:	bf00      	nop
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a330:	bf00      	nop
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a344:	bf00      	nop
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a350:	b084      	sub	sp, #16
 800a352:	b480      	push	{r7}
 800a354:	b083      	sub	sp, #12
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	f107 0014 	add.w	r0, r7, #20
 800a35e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	b004      	add	sp, #16
 800a370:	4770      	bx	lr

0800a372 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a372:	b480      	push	{r7}
 800a374:	b085      	sub	sp, #20
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a382:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a386:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	b29a      	uxth	r2, r3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3714      	adds	r7, #20
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b085      	sub	sp, #20
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a3a8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a3ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	43db      	mvns	r3, r3
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	4013      	ands	r3, r2
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3714      	adds	r7, #20
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr

0800a3d6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800a3d6:	b480      	push	{r7}
 800a3d8:	b083      	sub	sp, #12
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
 800a3de:	460b      	mov	r3, r1
 800a3e0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a3f0:	b084      	sub	sp, #16
 800a3f2:	b480      	push	{r7}
 800a3f4:	b083      	sub	sp, #12
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
 800a3fa:	f107 0014 	add.w	r0, r7, #20
 800a3fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2201      	movs	r2, #1
 800a406:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a422:	2300      	movs	r3, #0
}
 800a424:	4618      	mov	r0, r3
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	b004      	add	sp, #16
 800a430:	4770      	bx	lr
	...

0800a434 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a434:	b480      	push	{r7}
 800a436:	b09d      	sub	sp, #116	; 0x74
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	4413      	add	r3, r2
 800a44e:	881b      	ldrh	r3, [r3, #0]
 800a450:	b29b      	uxth	r3, r3
 800a452:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a45a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	78db      	ldrb	r3, [r3, #3]
 800a462:	2b03      	cmp	r3, #3
 800a464:	d81f      	bhi.n	800a4a6 <USB_ActivateEndpoint+0x72>
 800a466:	a201      	add	r2, pc, #4	; (adr r2, 800a46c <USB_ActivateEndpoint+0x38>)
 800a468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a46c:	0800a47d 	.word	0x0800a47d
 800a470:	0800a499 	.word	0x0800a499
 800a474:	0800a4af 	.word	0x0800a4af
 800a478:	0800a48b 	.word	0x0800a48b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a47c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a480:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a484:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a488:	e012      	b.n	800a4b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a48a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a48e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a492:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a496:	e00b      	b.n	800a4b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a498:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a49c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a4a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a4a4:	e004      	b.n	800a4b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a4ac:	e000      	b.n	800a4b0 <USB_ActivateEndpoint+0x7c>
      break;
 800a4ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	441a      	add	r2, r3
 800a4ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a4be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	4413      	add	r3, r2
 800a4dc:	881b      	ldrh	r3, [r3, #0]
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	b21b      	sxth	r3, r3
 800a4e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ea:	b21a      	sxth	r2, r3
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	b21b      	sxth	r3, r3
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	b21b      	sxth	r3, r3
 800a4f6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	441a      	add	r2, r3
 800a504:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a50c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a518:	b29b      	uxth	r3, r3
 800a51a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	7b1b      	ldrb	r3, [r3, #12]
 800a520:	2b00      	cmp	r3, #0
 800a522:	f040 816e 	bne.w	800a802 <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	785b      	ldrb	r3, [r3, #1]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f000 8084 	beq.w	800a638 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	61bb      	str	r3, [r7, #24]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	461a      	mov	r2, r3
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	4413      	add	r3, r2
 800a542:	61bb      	str	r3, [r7, #24]
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	00da      	lsls	r2, r3, #3
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	4413      	add	r3, r2
 800a54e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a552:	617b      	str	r3, [r7, #20]
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	88db      	ldrh	r3, [r3, #6]
 800a558:	085b      	lsrs	r3, r3, #1
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	005b      	lsls	r3, r3, #1
 800a55e:	b29a      	uxth	r2, r3
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	4413      	add	r3, r2
 800a56e:	881b      	ldrh	r3, [r3, #0]
 800a570:	827b      	strh	r3, [r7, #18]
 800a572:	8a7b      	ldrh	r3, [r7, #18]
 800a574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d01b      	beq.n	800a5b4 <USB_ActivateEndpoint+0x180>
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	4413      	add	r3, r2
 800a586:	881b      	ldrh	r3, [r3, #0]
 800a588:	b29b      	uxth	r3, r3
 800a58a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a58e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a592:	823b      	strh	r3, [r7, #16]
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	441a      	add	r2, r3
 800a59e:	8a3b      	ldrh	r3, [r7, #16]
 800a5a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	78db      	ldrb	r3, [r3, #3]
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d020      	beq.n	800a5fe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	4413      	add	r3, r2
 800a5c6:	881b      	ldrh	r3, [r3, #0]
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5d2:	81bb      	strh	r3, [r7, #12]
 800a5d4:	89bb      	ldrh	r3, [r7, #12]
 800a5d6:	f083 0320 	eor.w	r3, r3, #32
 800a5da:	81bb      	strh	r3, [r7, #12]
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	441a      	add	r2, r3
 800a5e6:	89bb      	ldrh	r3, [r7, #12]
 800a5e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	8013      	strh	r3, [r2, #0]
 800a5fc:	e2cb      	b.n	800ab96 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	4413      	add	r3, r2
 800a608:	881b      	ldrh	r3, [r3, #0]
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a614:	81fb      	strh	r3, [r7, #14]
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	441a      	add	r2, r3
 800a620:	89fb      	ldrh	r3, [r7, #14]
 800a622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a62a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a62e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a632:	b29b      	uxth	r3, r3
 800a634:	8013      	strh	r3, [r2, #0]
 800a636:	e2ae      	b.n	800ab96 <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	633b      	str	r3, [r7, #48]	; 0x30
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a642:	b29b      	uxth	r3, r3
 800a644:	461a      	mov	r2, r3
 800a646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a648:	4413      	add	r3, r2
 800a64a:	633b      	str	r3, [r7, #48]	; 0x30
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	00da      	lsls	r2, r3, #3
 800a652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a654:	4413      	add	r3, r2
 800a656:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a65a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	88db      	ldrh	r3, [r3, #6]
 800a660:	085b      	lsrs	r3, r3, #1
 800a662:	b29b      	uxth	r3, r3
 800a664:	005b      	lsls	r3, r3, #1
 800a666:	b29a      	uxth	r2, r3
 800a668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a676:	b29b      	uxth	r3, r3
 800a678:	461a      	mov	r2, r3
 800a67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67c:	4413      	add	r3, r2
 800a67e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	00da      	lsls	r2, r3, #3
 800a686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a688:	4413      	add	r3, r2
 800a68a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a68e:	627b      	str	r3, [r7, #36]	; 0x24
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	2b3e      	cmp	r3, #62	; 0x3e
 800a696:	d918      	bls.n	800a6ca <USB_ActivateEndpoint+0x296>
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	691b      	ldr	r3, [r3, #16]
 800a69c:	095b      	lsrs	r3, r3, #5
 800a69e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	f003 031f 	and.w	r3, r3, #31
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d102      	bne.n	800a6b2 <USB_ActivateEndpoint+0x27e>
 800a6ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	029b      	lsls	r3, r3, #10
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c6:	801a      	strh	r2, [r3, #0]
 800a6c8:	e029      	b.n	800a71e <USB_ActivateEndpoint+0x2ea>
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	691b      	ldr	r3, [r3, #16]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d112      	bne.n	800a6f8 <USB_ActivateEndpoint+0x2c4>
 800a6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d4:	881b      	ldrh	r3, [r3, #0]
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e0:	801a      	strh	r2, [r3, #0]
 800a6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e4:	881b      	ldrh	r3, [r3, #0]
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6f0:	b29a      	uxth	r2, r3
 800a6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f4:	801a      	strh	r2, [r3, #0]
 800a6f6:	e012      	b.n	800a71e <USB_ActivateEndpoint+0x2ea>
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	085b      	lsrs	r3, r3, #1
 800a6fe:	66bb      	str	r3, [r7, #104]	; 0x68
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	691b      	ldr	r3, [r3, #16]
 800a704:	f003 0301 	and.w	r3, r3, #1
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d002      	beq.n	800a712 <USB_ActivateEndpoint+0x2de>
 800a70c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a70e:	3301      	adds	r3, #1
 800a710:	66bb      	str	r3, [r7, #104]	; 0x68
 800a712:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a714:	b29b      	uxth	r3, r3
 800a716:	029b      	lsls	r3, r3, #10
 800a718:	b29a      	uxth	r2, r3
 800a71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	4413      	add	r3, r2
 800a728:	881b      	ldrh	r3, [r3, #0]
 800a72a:	847b      	strh	r3, [r7, #34]	; 0x22
 800a72c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a72e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a732:	2b00      	cmp	r3, #0
 800a734:	d01b      	beq.n	800a76e <USB_ActivateEndpoint+0x33a>
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	4413      	add	r3, r2
 800a740:	881b      	ldrh	r3, [r3, #0]
 800a742:	b29b      	uxth	r3, r3
 800a744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a74c:	843b      	strh	r3, [r7, #32]
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	441a      	add	r2, r3
 800a758:	8c3b      	ldrh	r3, [r7, #32]
 800a75a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a75e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a762:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d124      	bne.n	800a7c0 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	4413      	add	r3, r2
 800a780:	881b      	ldrh	r3, [r3, #0]
 800a782:	b29b      	uxth	r3, r3
 800a784:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a78c:	83bb      	strh	r3, [r7, #28]
 800a78e:	8bbb      	ldrh	r3, [r7, #28]
 800a790:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a794:	83bb      	strh	r3, [r7, #28]
 800a796:	8bbb      	ldrh	r3, [r7, #28]
 800a798:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a79c:	83bb      	strh	r3, [r7, #28]
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	441a      	add	r2, r3
 800a7a8:	8bbb      	ldrh	r3, [r7, #28]
 800a7aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	8013      	strh	r3, [r2, #0]
 800a7be:	e1ea      	b.n	800ab96 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	4413      	add	r3, r2
 800a7ca:	881b      	ldrh	r3, [r3, #0]
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7d6:	83fb      	strh	r3, [r7, #30]
 800a7d8:	8bfb      	ldrh	r3, [r7, #30]
 800a7da:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a7de:	83fb      	strh	r3, [r7, #30]
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	441a      	add	r2, r3
 800a7ea:	8bfb      	ldrh	r3, [r7, #30]
 800a7ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	8013      	strh	r3, [r2, #0]
 800a800:	e1c9      	b.n	800ab96 <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	78db      	ldrb	r3, [r3, #3]
 800a806:	2b02      	cmp	r3, #2
 800a808:	d11e      	bne.n	800a848 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	4413      	add	r3, r2
 800a814:	881b      	ldrh	r3, [r3, #0]
 800a816:	b29b      	uxth	r3, r3
 800a818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a81c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a820:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	441a      	add	r2, r3
 800a82e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a83a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a83e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a842:	b29b      	uxth	r3, r3
 800a844:	8013      	strh	r3, [r2, #0]
 800a846:	e01d      	b.n	800a884 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4413      	add	r3, r2
 800a852:	881b      	ldrh	r3, [r3, #0]
 800a854:	b29b      	uxth	r3, r3
 800a856:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a85a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a85e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	441a      	add	r2, r3
 800a86c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a87c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a880:	b29b      	uxth	r3, r3
 800a882:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a88e:	b29b      	uxth	r3, r3
 800a890:	461a      	mov	r2, r3
 800a892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a894:	4413      	add	r3, r2
 800a896:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	00da      	lsls	r2, r3, #3
 800a89e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8a0:	4413      	add	r3, r2
 800a8a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a8a6:	65bb      	str	r3, [r7, #88]	; 0x58
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	891b      	ldrh	r3, [r3, #8]
 800a8ac:	085b      	lsrs	r3, r3, #1
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	005b      	lsls	r3, r3, #1
 800a8b2:	b29a      	uxth	r2, r3
 800a8b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8b6:	801a      	strh	r2, [r3, #0]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	657b      	str	r3, [r7, #84]	; 0x54
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8c8:	4413      	add	r3, r2
 800a8ca:	657b      	str	r3, [r7, #84]	; 0x54
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	00da      	lsls	r2, r3, #3
 800a8d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8d4:	4413      	add	r3, r2
 800a8d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a8da:	653b      	str	r3, [r7, #80]	; 0x50
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	895b      	ldrh	r3, [r3, #10]
 800a8e0:	085b      	lsrs	r3, r3, #1
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	005b      	lsls	r3, r3, #1
 800a8e6:	b29a      	uxth	r2, r3
 800a8e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8ea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	785b      	ldrb	r3, [r3, #1]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f040 8093 	bne.w	800aa1c <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	4413      	add	r3, r2
 800a900:	881b      	ldrh	r3, [r3, #0]
 800a902:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a906:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a90a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d01b      	beq.n	800a94a <USB_ActivateEndpoint+0x516>
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4413      	add	r3, r2
 800a91c:	881b      	ldrh	r3, [r3, #0]
 800a91e:	b29b      	uxth	r3, r3
 800a920:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a928:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a92a:	687a      	ldr	r2, [r7, #4]
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	441a      	add	r2, r3
 800a934:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a93a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a93e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a946:	b29b      	uxth	r3, r3
 800a948:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	4413      	add	r3, r2
 800a954:	881b      	ldrh	r3, [r3, #0]
 800a956:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a958:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a95a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d01b      	beq.n	800a99a <USB_ActivateEndpoint+0x566>
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	4413      	add	r3, r2
 800a96c:	881b      	ldrh	r3, [r3, #0]
 800a96e:	b29b      	uxth	r3, r3
 800a970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a978:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	441a      	add	r2, r3
 800a984:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a98a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a98e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a992:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a996:	b29b      	uxth	r3, r3
 800a998:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	4413      	add	r3, r2
 800a9a4:	881b      	ldrh	r3, [r3, #0]
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a9ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9b0:	873b      	strh	r3, [r7, #56]	; 0x38
 800a9b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a9b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a9b8:	873b      	strh	r3, [r7, #56]	; 0x38
 800a9ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a9bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a9c0:	873b      	strh	r3, [r7, #56]	; 0x38
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	441a      	add	r2, r3
 800a9cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a9ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	4413      	add	r3, r2
 800a9ec:	881b      	ldrh	r3, [r3, #0]
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9f8:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	441a      	add	r2, r3
 800aa04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aa06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	8013      	strh	r3, [r2, #0]
 800aa1a:	e0bc      	b.n	800ab96 <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	4413      	add	r3, r2
 800aa26:	881b      	ldrh	r3, [r3, #0]
 800aa28:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800aa2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800aa30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d01d      	beq.n	800aa74 <USB_ActivateEndpoint+0x640>
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	4413      	add	r3, r2
 800aa42:	881b      	ldrh	r3, [r3, #0]
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa4e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	441a      	add	r2, r3
 800aa5c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800aa60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	4413      	add	r3, r2
 800aa7e:	881b      	ldrh	r3, [r3, #0]
 800aa80:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800aa84:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800aa88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d01d      	beq.n	800aacc <USB_ActivateEndpoint+0x698>
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	4413      	add	r3, r2
 800aa9a:	881b      	ldrh	r3, [r3, #0]
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aaa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaa6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	441a      	add	r2, r3
 800aab4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800aab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aabc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aac4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	78db      	ldrb	r3, [r3, #3]
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d024      	beq.n	800ab1e <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	4413      	add	r3, r2
 800aade:	881b      	ldrh	r3, [r3, #0]
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800aaee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800aaf2:	f083 0320 	eor.w	r3, r3, #32
 800aaf6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	441a      	add	r2, r3
 800ab04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ab08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	8013      	strh	r3, [r2, #0]
 800ab1c:	e01d      	b.n	800ab5a <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4413      	add	r3, r2
 800ab28:	881b      	ldrh	r3, [r3, #0]
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab34:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	441a      	add	r2, r3
 800ab42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ab46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	4413      	add	r3, r2
 800ab64:	881b      	ldrh	r3, [r3, #0]
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab70:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	441a      	add	r2, r3
 800ab7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ab82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800ab96:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3774      	adds	r7, #116	; 0x74
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop

0800aba8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b08d      	sub	sp, #52	; 0x34
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	7b1b      	ldrb	r3, [r3, #12]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	f040 808e 	bne.w	800acd8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	785b      	ldrb	r3, [r3, #1]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d044      	beq.n	800ac4e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	4413      	add	r3, r2
 800abce:	881b      	ldrh	r3, [r3, #0]
 800abd0:	81bb      	strh	r3, [r7, #12]
 800abd2:	89bb      	ldrh	r3, [r7, #12]
 800abd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d01b      	beq.n	800ac14 <USB_DeactivateEndpoint+0x6c>
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	4413      	add	r3, r2
 800abe6:	881b      	ldrh	r3, [r3, #0]
 800abe8:	b29b      	uxth	r3, r3
 800abea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abf2:	817b      	strh	r3, [r7, #10]
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	441a      	add	r2, r3
 800abfe:	897b      	ldrh	r3, [r7, #10]
 800ac00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	009b      	lsls	r3, r3, #2
 800ac1c:	4413      	add	r3, r2
 800ac1e:	881b      	ldrh	r3, [r3, #0]
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac2a:	813b      	strh	r3, [r7, #8]
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	441a      	add	r2, r3
 800ac36:	893b      	ldrh	r3, [r7, #8]
 800ac38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	8013      	strh	r3, [r2, #0]
 800ac4c:	e192      	b.n	800af74 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4413      	add	r3, r2
 800ac58:	881b      	ldrh	r3, [r3, #0]
 800ac5a:	827b      	strh	r3, [r7, #18]
 800ac5c:	8a7b      	ldrh	r3, [r7, #18]
 800ac5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d01b      	beq.n	800ac9e <USB_DeactivateEndpoint+0xf6>
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	4413      	add	r3, r2
 800ac70:	881b      	ldrh	r3, [r3, #0]
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac7c:	823b      	strh	r3, [r7, #16]
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	441a      	add	r2, r3
 800ac88:	8a3b      	ldrh	r3, [r7, #16]
 800ac8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	4413      	add	r3, r2
 800aca8:	881b      	ldrh	r3, [r3, #0]
 800acaa:	b29b      	uxth	r3, r3
 800acac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acb4:	81fb      	strh	r3, [r7, #14]
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	441a      	add	r2, r3
 800acc0:	89fb      	ldrh	r3, [r7, #14]
 800acc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	8013      	strh	r3, [r2, #0]
 800acd6:	e14d      	b.n	800af74 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	785b      	ldrb	r3, [r3, #1]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f040 80a5 	bne.w	800ae2c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	4413      	add	r3, r2
 800acec:	881b      	ldrh	r3, [r3, #0]
 800acee:	843b      	strh	r3, [r7, #32]
 800acf0:	8c3b      	ldrh	r3, [r7, #32]
 800acf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d01b      	beq.n	800ad32 <USB_DeactivateEndpoint+0x18a>
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	4413      	add	r3, r2
 800ad04:	881b      	ldrh	r3, [r3, #0]
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad10:	83fb      	strh	r3, [r7, #30]
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	441a      	add	r2, r3
 800ad1c:	8bfb      	ldrh	r3, [r7, #30]
 800ad1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	009b      	lsls	r3, r3, #2
 800ad3a:	4413      	add	r3, r2
 800ad3c:	881b      	ldrh	r3, [r3, #0]
 800ad3e:	83bb      	strh	r3, [r7, #28]
 800ad40:	8bbb      	ldrh	r3, [r7, #28]
 800ad42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d01b      	beq.n	800ad82 <USB_DeactivateEndpoint+0x1da>
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4413      	add	r3, r2
 800ad54:	881b      	ldrh	r3, [r3, #0]
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad60:	837b      	strh	r3, [r7, #26]
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	441a      	add	r2, r3
 800ad6c:	8b7b      	ldrh	r3, [r7, #26]
 800ad6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	4413      	add	r3, r2
 800ad8c:	881b      	ldrh	r3, [r3, #0]
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad98:	833b      	strh	r3, [r7, #24]
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	441a      	add	r2, r3
 800ada4:	8b3b      	ldrh	r3, [r7, #24]
 800ada6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	4413      	add	r3, r2
 800adc4:	881b      	ldrh	r3, [r3, #0]
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800adcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800add0:	82fb      	strh	r3, [r7, #22]
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	441a      	add	r2, r3
 800addc:	8afb      	ldrh	r3, [r7, #22]
 800adde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ade2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ade6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adee:	b29b      	uxth	r3, r3
 800adf0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	4413      	add	r3, r2
 800adfc:	881b      	ldrh	r3, [r3, #0]
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae08:	82bb      	strh	r3, [r7, #20]
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	441a      	add	r2, r3
 800ae14:	8abb      	ldrh	r3, [r7, #20]
 800ae16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	8013      	strh	r3, [r2, #0]
 800ae2a:	e0a3      	b.n	800af74 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	4413      	add	r3, r2
 800ae36:	881b      	ldrh	r3, [r3, #0]
 800ae38:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ae3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ae3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d01b      	beq.n	800ae7c <USB_DeactivateEndpoint+0x2d4>
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	4413      	add	r3, r2
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae5a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	441a      	add	r2, r3
 800ae66:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ae68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ae74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	4413      	add	r3, r2
 800ae86:	881b      	ldrh	r3, [r3, #0]
 800ae88:	857b      	strh	r3, [r7, #42]	; 0x2a
 800ae8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ae8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d01b      	beq.n	800aecc <USB_DeactivateEndpoint+0x324>
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	4413      	add	r3, r2
 800ae9e:	881b      	ldrh	r3, [r3, #0]
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeaa:	853b      	strh	r3, [r7, #40]	; 0x28
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	441a      	add	r2, r3
 800aeb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aeb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aec4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4413      	add	r3, r2
 800aed6:	881b      	ldrh	r3, [r3, #0]
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aee2:	84fb      	strh	r3, [r7, #38]	; 0x26
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	441a      	add	r2, r3
 800aeee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aef8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aefc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af00:	b29b      	uxth	r3, r3
 800af02:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	4413      	add	r3, r2
 800af0e:	881b      	ldrh	r3, [r3, #0]
 800af10:	b29b      	uxth	r3, r3
 800af12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af1a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	441a      	add	r2, r3
 800af26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af38:	b29b      	uxth	r3, r3
 800af3a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	4413      	add	r3, r2
 800af46:	881b      	ldrh	r3, [r3, #0]
 800af48:	b29b      	uxth	r3, r3
 800af4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af52:	847b      	strh	r3, [r7, #34]	; 0x22
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	441a      	add	r2, r3
 800af5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800af60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af70:	b29b      	uxth	r3, r3
 800af72:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800af74:	2300      	movs	r3, #0
}
 800af76:	4618      	mov	r0, r3
 800af78:	3734      	adds	r7, #52	; 0x34
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr

0800af82 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b0c2      	sub	sp, #264	; 0x108
 800af86:	af00      	add	r7, sp, #0
 800af88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af90:	6018      	str	r0, [r3, #0]
 800af92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af9a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800af9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	785b      	ldrb	r3, [r3, #1]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	f040 867b 	bne.w	800bca4 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800afae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	699a      	ldr	r2, [r3, #24]
 800afba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	691b      	ldr	r3, [r3, #16]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d908      	bls.n	800afdc <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800afca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	691b      	ldr	r3, [r3, #16]
 800afd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800afda:	e007      	b.n	800afec <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800afdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	699b      	ldr	r3, [r3, #24]
 800afe8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800afec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	7b1b      	ldrb	r3, [r3, #12]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d13a      	bne.n	800b072 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800affc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	6959      	ldr	r1, [r3, #20]
 800b008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b00c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	88da      	ldrh	r2, [r3, #6]
 800b014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b018:	b29b      	uxth	r3, r3
 800b01a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b01e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b022:	6800      	ldr	r0, [r0, #0]
 800b024:	f001 fc3e 	bl	800c8a4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b02c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	613b      	str	r3, [r7, #16]
 800b034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b038:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b042:	b29b      	uxth	r3, r3
 800b044:	461a      	mov	r2, r3
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	4413      	add	r3, r2
 800b04a:	613b      	str	r3, [r7, #16]
 800b04c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	00da      	lsls	r2, r3, #3
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	4413      	add	r3, r2
 800b05e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b062:	60fb      	str	r3, [r7, #12]
 800b064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b068:	b29a      	uxth	r2, r3
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	801a      	strh	r2, [r3, #0]
 800b06e:	f000 bde3 	b.w	800bc38 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b076:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	78db      	ldrb	r3, [r3, #3]
 800b07e:	2b02      	cmp	r3, #2
 800b080:	f040 843a 	bne.w	800b8f8 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	6a1a      	ldr	r2, [r3, #32]
 800b090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	691b      	ldr	r3, [r3, #16]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	f240 83b7 	bls.w	800b810 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b0a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	4413      	add	r3, r2
 800b0bc:	881b      	ldrh	r3, [r3, #0]
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b0cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	441a      	add	r2, r3
 800b0e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b0ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0f2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b0f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b0fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	6a1a      	ldr	r2, [r3, #32]
 800b10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b10e:	1ad2      	subs	r2, r2, r3
 800b110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b11c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b120:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b124:	681a      	ldr	r2, [r3, #0]
 800b126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b12a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	4413      	add	r3, r2
 800b136:	881b      	ldrh	r3, [r3, #0]
 800b138:	b29b      	uxth	r3, r3
 800b13a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b13e:	2b00      	cmp	r3, #0
 800b140:	f000 81b3 	beq.w	800b4aa <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b148:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	633b      	str	r3, [r7, #48]	; 0x30
 800b150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	785b      	ldrb	r3, [r3, #1]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d16d      	bne.n	800b23c <USB_EPStartXfer+0x2ba>
 800b160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b164:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b16c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b170:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	461a      	mov	r2, r3
 800b17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b180:	4413      	add	r3, r2
 800b182:	62bb      	str	r3, [r7, #40]	; 0x28
 800b184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	00da      	lsls	r2, r3, #3
 800b192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b194:	4413      	add	r3, r2
 800b196:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b19a:	627b      	str	r3, [r7, #36]	; 0x24
 800b19c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1a0:	2b3e      	cmp	r3, #62	; 0x3e
 800b1a2:	d91c      	bls.n	800b1de <USB_EPStartXfer+0x25c>
 800b1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1a8:	095b      	lsrs	r3, r3, #5
 800b1aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1b2:	f003 031f 	and.w	r3, r3, #31
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d104      	bne.n	800b1c4 <USB_EPStartXfer+0x242>
 800b1ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b1c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	029b      	lsls	r3, r3, #10
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1d6:	b29a      	uxth	r2, r3
 800b1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1da:	801a      	strh	r2, [r3, #0]
 800b1dc:	e053      	b.n	800b286 <USB_EPStartXfer+0x304>
 800b1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d112      	bne.n	800b20c <USB_EPStartXfer+0x28a>
 800b1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e8:	881b      	ldrh	r3, [r3, #0]
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b1f0:	b29a      	uxth	r2, r3
 800b1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f4:	801a      	strh	r2, [r3, #0]
 800b1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f8:	881b      	ldrh	r3, [r3, #0]
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b204:	b29a      	uxth	r2, r3
 800b206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b208:	801a      	strh	r2, [r3, #0]
 800b20a:	e03c      	b.n	800b286 <USB_EPStartXfer+0x304>
 800b20c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b210:	085b      	lsrs	r3, r3, #1
 800b212:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b21a:	f003 0301 	and.w	r3, r3, #1
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d004      	beq.n	800b22c <USB_EPStartXfer+0x2aa>
 800b222:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b226:	3301      	adds	r3, #1
 800b228:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b22c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b230:	b29b      	uxth	r3, r3
 800b232:	029b      	lsls	r3, r3, #10
 800b234:	b29a      	uxth	r2, r3
 800b236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b238:	801a      	strh	r2, [r3, #0]
 800b23a:	e024      	b.n	800b286 <USB_EPStartXfer+0x304>
 800b23c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	785b      	ldrb	r3, [r3, #1]
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d11c      	bne.n	800b286 <USB_EPStartXfer+0x304>
 800b24c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b250:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	461a      	mov	r2, r3
 800b25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b260:	4413      	add	r3, r2
 800b262:	633b      	str	r3, [r7, #48]	; 0x30
 800b264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	00da      	lsls	r2, r3, #3
 800b272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b274:	4413      	add	r3, r2
 800b276:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b27a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b27c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b280:	b29a      	uxth	r2, r3
 800b282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b284:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b28a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	895b      	ldrh	r3, [r3, #10]
 800b292:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b29a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	6959      	ldr	r1, [r3, #20]
 800b2a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b2ac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b2b0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b2b4:	6800      	ldr	r0, [r0, #0]
 800b2b6:	f001 faf5 	bl	800c8a4 <USB_WritePMA>
            ep->xfer_buff += len;
 800b2ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	695a      	ldr	r2, [r3, #20]
 800b2c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ca:	441a      	add	r2, r3
 800b2cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b2d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	6a1a      	ldr	r2, [r3, #32]
 800b2e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d90f      	bls.n	800b314 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800b2f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	6a1a      	ldr	r2, [r3, #32]
 800b300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b304:	1ad2      	subs	r2, r2, r3
 800b306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b30a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	621a      	str	r2, [r3, #32]
 800b312:	e00e      	b.n	800b332 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800b314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	6a1b      	ldr	r3, [r3, #32]
 800b320:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2200      	movs	r2, #0
 800b330:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	785b      	ldrb	r3, [r3, #1]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d16d      	bne.n	800b41e <USB_EPStartXfer+0x49c>
 800b342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b346:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	61bb      	str	r3, [r7, #24]
 800b34e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b352:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	461a      	mov	r2, r3
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	4413      	add	r3, r2
 800b364:	61bb      	str	r3, [r7, #24]
 800b366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b36a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	00da      	lsls	r2, r3, #3
 800b374:	69bb      	ldr	r3, [r7, #24]
 800b376:	4413      	add	r3, r2
 800b378:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b37c:	617b      	str	r3, [r7, #20]
 800b37e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b382:	2b3e      	cmp	r3, #62	; 0x3e
 800b384:	d91c      	bls.n	800b3c0 <USB_EPStartXfer+0x43e>
 800b386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b38a:	095b      	lsrs	r3, r3, #5
 800b38c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b394:	f003 031f 	and.w	r3, r3, #31
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d104      	bne.n	800b3a6 <USB_EPStartXfer+0x424>
 800b39c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3a0:	3b01      	subs	r3, #1
 800b3a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b3a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3aa:	b29b      	uxth	r3, r3
 800b3ac:	029b      	lsls	r3, r3, #10
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	801a      	strh	r2, [r3, #0]
 800b3be:	e059      	b.n	800b474 <USB_EPStartXfer+0x4f2>
 800b3c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d112      	bne.n	800b3ee <USB_EPStartXfer+0x46c>
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	881b      	ldrh	r3, [r3, #0]
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b3d2:	b29a      	uxth	r2, r3
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	801a      	strh	r2, [r3, #0]
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	881b      	ldrh	r3, [r3, #0]
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3e6:	b29a      	uxth	r2, r3
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	801a      	strh	r2, [r3, #0]
 800b3ec:	e042      	b.n	800b474 <USB_EPStartXfer+0x4f2>
 800b3ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3f2:	085b      	lsrs	r3, r3, #1
 800b3f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b3f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3fc:	f003 0301 	and.w	r3, r3, #1
 800b400:	2b00      	cmp	r3, #0
 800b402:	d004      	beq.n	800b40e <USB_EPStartXfer+0x48c>
 800b404:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b408:	3301      	adds	r3, #1
 800b40a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b40e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b412:	b29b      	uxth	r3, r3
 800b414:	029b      	lsls	r3, r3, #10
 800b416:	b29a      	uxth	r2, r3
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	801a      	strh	r2, [r3, #0]
 800b41c:	e02a      	b.n	800b474 <USB_EPStartXfer+0x4f2>
 800b41e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	785b      	ldrb	r3, [r3, #1]
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d122      	bne.n	800b474 <USB_EPStartXfer+0x4f2>
 800b42e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b432:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	623b      	str	r3, [r7, #32]
 800b43a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b43e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b448:	b29b      	uxth	r3, r3
 800b44a:	461a      	mov	r2, r3
 800b44c:	6a3b      	ldr	r3, [r7, #32]
 800b44e:	4413      	add	r3, r2
 800b450:	623b      	str	r3, [r7, #32]
 800b452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	00da      	lsls	r2, r3, #3
 800b460:	6a3b      	ldr	r3, [r7, #32]
 800b462:	4413      	add	r3, r2
 800b464:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b468:	61fb      	str	r3, [r7, #28]
 800b46a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b46e:	b29a      	uxth	r2, r3
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	891b      	ldrh	r3, [r3, #8]
 800b480:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	6959      	ldr	r1, [r3, #20]
 800b490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b494:	b29b      	uxth	r3, r3
 800b496:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b49a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b49e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b4a2:	6800      	ldr	r0, [r0, #0]
 800b4a4:	f001 f9fe 	bl	800c8a4 <USB_WritePMA>
 800b4a8:	e3c6      	b.n	800bc38 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b4aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	785b      	ldrb	r3, [r3, #1]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d16d      	bne.n	800b596 <USB_EPStartXfer+0x614>
 800b4ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4da:	4413      	add	r3, r2
 800b4dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	00da      	lsls	r2, r3, #3
 800b4ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4ee:	4413      	add	r3, r2
 800b4f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b4f4:	647b      	str	r3, [r7, #68]	; 0x44
 800b4f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4fa:	2b3e      	cmp	r3, #62	; 0x3e
 800b4fc:	d91c      	bls.n	800b538 <USB_EPStartXfer+0x5b6>
 800b4fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b502:	095b      	lsrs	r3, r3, #5
 800b504:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b50c:	f003 031f 	and.w	r3, r3, #31
 800b510:	2b00      	cmp	r3, #0
 800b512:	d104      	bne.n	800b51e <USB_EPStartXfer+0x59c>
 800b514:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b518:	3b01      	subs	r3, #1
 800b51a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b51e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b522:	b29b      	uxth	r3, r3
 800b524:	029b      	lsls	r3, r3, #10
 800b526:	b29b      	uxth	r3, r3
 800b528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b52c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b530:	b29a      	uxth	r2, r3
 800b532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b534:	801a      	strh	r2, [r3, #0]
 800b536:	e059      	b.n	800b5ec <USB_EPStartXfer+0x66a>
 800b538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d112      	bne.n	800b566 <USB_EPStartXfer+0x5e4>
 800b540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b542:	881b      	ldrh	r3, [r3, #0]
 800b544:	b29b      	uxth	r3, r3
 800b546:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b54a:	b29a      	uxth	r2, r3
 800b54c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b54e:	801a      	strh	r2, [r3, #0]
 800b550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b552:	881b      	ldrh	r3, [r3, #0]
 800b554:	b29b      	uxth	r3, r3
 800b556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b55a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b55e:	b29a      	uxth	r2, r3
 800b560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b562:	801a      	strh	r2, [r3, #0]
 800b564:	e042      	b.n	800b5ec <USB_EPStartXfer+0x66a>
 800b566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b56a:	085b      	lsrs	r3, r3, #1
 800b56c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b574:	f003 0301 	and.w	r3, r3, #1
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d004      	beq.n	800b586 <USB_EPStartXfer+0x604>
 800b57c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b580:	3301      	adds	r3, #1
 800b582:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b586:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	029b      	lsls	r3, r3, #10
 800b58e:	b29a      	uxth	r2, r3
 800b590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b592:	801a      	strh	r2, [r3, #0]
 800b594:	e02a      	b.n	800b5ec <USB_EPStartXfer+0x66a>
 800b596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b59a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	785b      	ldrb	r3, [r3, #1]
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d122      	bne.n	800b5ec <USB_EPStartXfer+0x66a>
 800b5a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	653b      	str	r3, [r7, #80]	; 0x50
 800b5b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5c6:	4413      	add	r3, r2
 800b5c8:	653b      	str	r3, [r7, #80]	; 0x50
 800b5ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	00da      	lsls	r2, r3, #3
 800b5d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5da:	4413      	add	r3, r2
 800b5dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b5e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5e6:	b29a      	uxth	r2, r3
 800b5e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b5ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	891b      	ldrh	r3, [r3, #8]
 800b5f8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b5fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	6959      	ldr	r1, [r3, #20]
 800b608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b612:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b616:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b61a:	6800      	ldr	r0, [r0, #0]
 800b61c:	f001 f942 	bl	800c8a4 <USB_WritePMA>
            ep->xfer_buff += len;
 800b620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	695a      	ldr	r2, [r3, #20]
 800b62c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b630:	441a      	add	r2, r3
 800b632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b63e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	6a1a      	ldr	r2, [r3, #32]
 800b64a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b64e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	691b      	ldr	r3, [r3, #16]
 800b656:	429a      	cmp	r2, r3
 800b658:	d90f      	bls.n	800b67a <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800b65a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b65e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	6a1a      	ldr	r2, [r3, #32]
 800b666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b66a:	1ad2      	subs	r2, r2, r3
 800b66c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	621a      	str	r2, [r3, #32]
 800b678:	e00e      	b.n	800b698 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800b67a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b67e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	6a1b      	ldr	r3, [r3, #32]
 800b686:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b68a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b68e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2200      	movs	r2, #0
 800b696:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b69c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	643b      	str	r3, [r7, #64]	; 0x40
 800b6a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	785b      	ldrb	r3, [r3, #1]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d16d      	bne.n	800b790 <USB_EPStartXfer+0x80e>
 800b6b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	63bb      	str	r3, [r7, #56]	; 0x38
 800b6c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d4:	4413      	add	r3, r2
 800b6d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b6d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	00da      	lsls	r2, r3, #3
 800b6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e8:	4413      	add	r3, r2
 800b6ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b6ee:	637b      	str	r3, [r7, #52]	; 0x34
 800b6f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6f4:	2b3e      	cmp	r3, #62	; 0x3e
 800b6f6:	d91c      	bls.n	800b732 <USB_EPStartXfer+0x7b0>
 800b6f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6fc:	095b      	lsrs	r3, r3, #5
 800b6fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b706:	f003 031f 	and.w	r3, r3, #31
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d104      	bne.n	800b718 <USB_EPStartXfer+0x796>
 800b70e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b712:	3b01      	subs	r3, #1
 800b714:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	029b      	lsls	r3, r3, #10
 800b720:	b29b      	uxth	r3, r3
 800b722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b72a:	b29a      	uxth	r2, r3
 800b72c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b72e:	801a      	strh	r2, [r3, #0]
 800b730:	e053      	b.n	800b7da <USB_EPStartXfer+0x858>
 800b732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b736:	2b00      	cmp	r3, #0
 800b738:	d112      	bne.n	800b760 <USB_EPStartXfer+0x7de>
 800b73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b73c:	881b      	ldrh	r3, [r3, #0]
 800b73e:	b29b      	uxth	r3, r3
 800b740:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b744:	b29a      	uxth	r2, r3
 800b746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b748:	801a      	strh	r2, [r3, #0]
 800b74a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b74c:	881b      	ldrh	r3, [r3, #0]
 800b74e:	b29b      	uxth	r3, r3
 800b750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b758:	b29a      	uxth	r2, r3
 800b75a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b75c:	801a      	strh	r2, [r3, #0]
 800b75e:	e03c      	b.n	800b7da <USB_EPStartXfer+0x858>
 800b760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b764:	085b      	lsrs	r3, r3, #1
 800b766:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b76a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b76e:	f003 0301 	and.w	r3, r3, #1
 800b772:	2b00      	cmp	r3, #0
 800b774:	d004      	beq.n	800b780 <USB_EPStartXfer+0x7fe>
 800b776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b77a:	3301      	adds	r3, #1
 800b77c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b784:	b29b      	uxth	r3, r3
 800b786:	029b      	lsls	r3, r3, #10
 800b788:	b29a      	uxth	r2, r3
 800b78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b78c:	801a      	strh	r2, [r3, #0]
 800b78e:	e024      	b.n	800b7da <USB_EPStartXfer+0x858>
 800b790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	785b      	ldrb	r3, [r3, #1]
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d11c      	bne.n	800b7da <USB_EPStartXfer+0x858>
 800b7a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7b4:	4413      	add	r3, r2
 800b7b6:	643b      	str	r3, [r7, #64]	; 0x40
 800b7b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	00da      	lsls	r2, r3, #3
 800b7c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7c8:	4413      	add	r3, r2
 800b7ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7d4:	b29a      	uxth	r2, r3
 800b7d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b7da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	895b      	ldrh	r3, [r3, #10]
 800b7e6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b7ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	6959      	ldr	r1, [r3, #20]
 800b7f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b800:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b804:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b808:	6800      	ldr	r0, [r0, #0]
 800b80a:	f001 f84b 	bl	800c8a4 <USB_WritePMA>
 800b80e:	e213      	b.n	800bc38 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	6a1b      	ldr	r3, [r3, #32]
 800b81c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b824:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b828:	681a      	ldr	r2, [r3, #0]
 800b82a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b82e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	4413      	add	r3, r2
 800b83a:	881b      	ldrh	r3, [r3, #0]
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b846:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b84a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b84e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	441a      	add	r2, r3
 800b864:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b86c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b878:	b29b      	uxth	r3, r3
 800b87a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b87c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b880:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b88c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b896:	b29b      	uxth	r3, r3
 800b898:	461a      	mov	r2, r3
 800b89a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b89c:	4413      	add	r3, r2
 800b89e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b8a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	00da      	lsls	r2, r3, #3
 800b8ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8b0:	4413      	add	r3, r2
 800b8b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b8b6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b8b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8bc:	b29a      	uxth	r2, r3
 800b8be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b8c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b8c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	891b      	ldrh	r3, [r3, #8]
 800b8ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b8d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	6959      	ldr	r1, [r3, #20]
 800b8de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b8e8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b8ec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b8f0:	6800      	ldr	r0, [r0, #0]
 800b8f2:	f000 ffd7 	bl	800c8a4 <USB_WritePMA>
 800b8f6:	e19f      	b.n	800bc38 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b8f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	6a1a      	ldr	r2, [r3, #32]
 800b904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b908:	1ad2      	subs	r2, r2, r3
 800b90a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b90e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b91a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b91e:	681a      	ldr	r2, [r3, #0]
 800b920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	4413      	add	r3, r2
 800b930:	881b      	ldrh	r3, [r3, #0]
 800b932:	b29b      	uxth	r3, r3
 800b934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f000 80bc 	beq.w	800bab6 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b93e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b942:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	673b      	str	r3, [r7, #112]	; 0x70
 800b94a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b94e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	785b      	ldrb	r3, [r3, #1]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d16d      	bne.n	800ba36 <USB_EPStartXfer+0xab4>
 800b95a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b95e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	66bb      	str	r3, [r7, #104]	; 0x68
 800b966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b96a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b974:	b29b      	uxth	r3, r3
 800b976:	461a      	mov	r2, r3
 800b978:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b97a:	4413      	add	r3, r2
 800b97c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b97e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	00da      	lsls	r2, r3, #3
 800b98c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b98e:	4413      	add	r3, r2
 800b990:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b994:	667b      	str	r3, [r7, #100]	; 0x64
 800b996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b99a:	2b3e      	cmp	r3, #62	; 0x3e
 800b99c:	d91c      	bls.n	800b9d8 <USB_EPStartXfer+0xa56>
 800b99e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a2:	095b      	lsrs	r3, r3, #5
 800b9a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b9a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ac:	f003 031f 	and.w	r3, r3, #31
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d104      	bne.n	800b9be <USB_EPStartXfer+0xa3c>
 800b9b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b9b8:	3b01      	subs	r3, #1
 800b9ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b9be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	029b      	lsls	r3, r3, #10
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9d4:	801a      	strh	r2, [r3, #0]
 800b9d6:	e053      	b.n	800ba80 <USB_EPStartXfer+0xafe>
 800b9d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d112      	bne.n	800ba06 <USB_EPStartXfer+0xa84>
 800b9e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9e2:	881b      	ldrh	r3, [r3, #0]
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b9ea:	b29a      	uxth	r2, r3
 800b9ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9ee:	801a      	strh	r2, [r3, #0]
 800b9f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9f2:	881b      	ldrh	r3, [r3, #0]
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9fe:	b29a      	uxth	r2, r3
 800ba00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba02:	801a      	strh	r2, [r3, #0]
 800ba04:	e03c      	b.n	800ba80 <USB_EPStartXfer+0xafe>
 800ba06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba0a:	085b      	lsrs	r3, r3, #1
 800ba0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ba10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba14:	f003 0301 	and.w	r3, r3, #1
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d004      	beq.n	800ba26 <USB_EPStartXfer+0xaa4>
 800ba1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ba20:	3301      	adds	r3, #1
 800ba22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ba26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	029b      	lsls	r3, r3, #10
 800ba2e:	b29a      	uxth	r2, r3
 800ba30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba32:	801a      	strh	r2, [r3, #0]
 800ba34:	e024      	b.n	800ba80 <USB_EPStartXfer+0xafe>
 800ba36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	785b      	ldrb	r3, [r3, #1]
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d11c      	bne.n	800ba80 <USB_EPStartXfer+0xafe>
 800ba46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	461a      	mov	r2, r3
 800ba58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba5a:	4413      	add	r3, r2
 800ba5c:	673b      	str	r3, [r7, #112]	; 0x70
 800ba5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	00da      	lsls	r2, r3, #3
 800ba6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba6e:	4413      	add	r3, r2
 800ba70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba74:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba7a:	b29a      	uxth	r2, r3
 800ba7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba7e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ba80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	895b      	ldrh	r3, [r3, #10]
 800ba8c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ba90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	6959      	ldr	r1, [r3, #20]
 800ba9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800baa6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800baaa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800baae:	6800      	ldr	r0, [r0, #0]
 800bab0:	f000 fef8 	bl	800c8a4 <USB_WritePMA>
 800bab4:	e0c0      	b.n	800bc38 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	785b      	ldrb	r3, [r3, #1]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d16d      	bne.n	800bba2 <USB_EPStartXfer+0xc20>
 800bac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bad6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	461a      	mov	r2, r3
 800bae4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bae6:	4413      	add	r3, r2
 800bae8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800baea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	00da      	lsls	r2, r3, #3
 800baf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bafa:	4413      	add	r3, r2
 800bafc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bb00:	67bb      	str	r3, [r7, #120]	; 0x78
 800bb02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb06:	2b3e      	cmp	r3, #62	; 0x3e
 800bb08:	d91c      	bls.n	800bb44 <USB_EPStartXfer+0xbc2>
 800bb0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb0e:	095b      	lsrs	r3, r3, #5
 800bb10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bb14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb18:	f003 031f 	and.w	r3, r3, #31
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d104      	bne.n	800bb2a <USB_EPStartXfer+0xba8>
 800bb20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bb24:	3b01      	subs	r3, #1
 800bb26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bb2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	029b      	lsls	r3, r3, #10
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb3c:	b29a      	uxth	r2, r3
 800bb3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb40:	801a      	strh	r2, [r3, #0]
 800bb42:	e05f      	b.n	800bc04 <USB_EPStartXfer+0xc82>
 800bb44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d112      	bne.n	800bb72 <USB_EPStartXfer+0xbf0>
 800bb4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb4e:	881b      	ldrh	r3, [r3, #0]
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bb56:	b29a      	uxth	r2, r3
 800bb58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb5a:	801a      	strh	r2, [r3, #0]
 800bb5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb5e:	881b      	ldrh	r3, [r3, #0]
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb6a:	b29a      	uxth	r2, r3
 800bb6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb6e:	801a      	strh	r2, [r3, #0]
 800bb70:	e048      	b.n	800bc04 <USB_EPStartXfer+0xc82>
 800bb72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb76:	085b      	lsrs	r3, r3, #1
 800bb78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bb7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb80:	f003 0301 	and.w	r3, r3, #1
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d004      	beq.n	800bb92 <USB_EPStartXfer+0xc10>
 800bb88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bb92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	029b      	lsls	r3, r3, #10
 800bb9a:	b29a      	uxth	r2, r3
 800bb9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb9e:	801a      	strh	r2, [r3, #0]
 800bba0:	e030      	b.n	800bc04 <USB_EPStartXfer+0xc82>
 800bba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	785b      	ldrb	r3, [r3, #1]
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d128      	bne.n	800bc04 <USB_EPStartXfer+0xc82>
 800bbb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bbc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bbd6:	4413      	add	r3, r2
 800bbd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bbdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	00da      	lsls	r2, r3, #3
 800bbea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bbee:	4413      	add	r3, r2
 800bbf0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bbf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bbf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbfc:	b29a      	uxth	r2, r3
 800bbfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bc02:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bc04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	891b      	ldrh	r3, [r3, #8]
 800bc10:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bc14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	6959      	ldr	r1, [r3, #20]
 800bc20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bc2a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bc2e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bc32:	6800      	ldr	r0, [r0, #0]
 800bc34:	f000 fe36 	bl	800c8a4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bc38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	4413      	add	r3, r2
 800bc52:	881b      	ldrh	r3, [r3, #0]
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc5e:	817b      	strh	r3, [r7, #10]
 800bc60:	897b      	ldrh	r3, [r7, #10]
 800bc62:	f083 0310 	eor.w	r3, r3, #16
 800bc66:	817b      	strh	r3, [r7, #10]
 800bc68:	897b      	ldrh	r3, [r7, #10]
 800bc6a:	f083 0320 	eor.w	r3, r3, #32
 800bc6e:	817b      	strh	r3, [r7, #10]
 800bc70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	441a      	add	r2, r3
 800bc8a:	897b      	ldrh	r3, [r7, #10]
 800bc8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	8013      	strh	r3, [r2, #0]
 800bca0:	f000 bc9f 	b.w	800c5e2 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	7b1b      	ldrb	r3, [r3, #12]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f040 80ae 	bne.w	800be12 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800bcb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	699a      	ldr	r2, [r3, #24]
 800bcc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	691b      	ldr	r3, [r3, #16]
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d917      	bls.n	800bd02 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800bcd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	691b      	ldr	r3, [r3, #16]
 800bcde:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800bce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bce6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	699a      	ldr	r2, [r3, #24]
 800bcee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcf2:	1ad2      	subs	r2, r2, r3
 800bcf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	619a      	str	r2, [r3, #24]
 800bd00:	e00e      	b.n	800bd20 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800bd02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	699b      	ldr	r3, [r3, #24]
 800bd0e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800bd12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bd20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bd2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	461a      	mov	r2, r3
 800bd40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd44:	4413      	add	r3, r2
 800bd46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bd4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	00da      	lsls	r2, r3, #3
 800bd58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd5c:	4413      	add	r3, r2
 800bd5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bd62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bd66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd6a:	2b3e      	cmp	r3, #62	; 0x3e
 800bd6c:	d91d      	bls.n	800bdaa <USB_EPStartXfer+0xe28>
 800bd6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd72:	095b      	lsrs	r3, r3, #5
 800bd74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bd78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd7c:	f003 031f 	and.w	r3, r3, #31
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d104      	bne.n	800bd8e <USB_EPStartXfer+0xe0c>
 800bd84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bd8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	029b      	lsls	r3, r3, #10
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bda0:	b29a      	uxth	r2, r3
 800bda2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bda6:	801a      	strh	r2, [r3, #0]
 800bda8:	e3e1      	b.n	800c56e <USB_EPStartXfer+0x15ec>
 800bdaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d116      	bne.n	800bde0 <USB_EPStartXfer+0xe5e>
 800bdb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bdb6:	881b      	ldrh	r3, [r3, #0]
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bdbe:	b29a      	uxth	r2, r3
 800bdc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bdc4:	801a      	strh	r2, [r3, #0]
 800bdc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bdca:	881b      	ldrh	r3, [r3, #0]
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bdd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bdd6:	b29a      	uxth	r2, r3
 800bdd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bddc:	801a      	strh	r2, [r3, #0]
 800bdde:	e3c6      	b.n	800c56e <USB_EPStartXfer+0x15ec>
 800bde0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bde4:	085b      	lsrs	r3, r3, #1
 800bde6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bdea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdee:	f003 0301 	and.w	r3, r3, #1
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d004      	beq.n	800be00 <USB_EPStartXfer+0xe7e>
 800bdf6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800be00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800be04:	b29b      	uxth	r3, r3
 800be06:	029b      	lsls	r3, r3, #10
 800be08:	b29a      	uxth	r2, r3
 800be0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be0e:	801a      	strh	r2, [r3, #0]
 800be10:	e3ad      	b.n	800c56e <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800be12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	78db      	ldrb	r3, [r3, #3]
 800be1e:	2b02      	cmp	r3, #2
 800be20:	f040 8200 	bne.w	800c224 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800be24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	785b      	ldrb	r3, [r3, #1]
 800be30:	2b00      	cmp	r3, #0
 800be32:	f040 8091 	bne.w	800bf58 <USB_EPStartXfer+0xfd6>
 800be36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800be44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be52:	b29b      	uxth	r3, r3
 800be54:	461a      	mov	r2, r3
 800be56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be5a:	4413      	add	r3, r2
 800be5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800be60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	00da      	lsls	r2, r3, #3
 800be6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be72:	4413      	add	r3, r2
 800be74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800be78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800be7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	691b      	ldr	r3, [r3, #16]
 800be88:	2b3e      	cmp	r3, #62	; 0x3e
 800be8a:	d925      	bls.n	800bed8 <USB_EPStartXfer+0xf56>
 800be8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	691b      	ldr	r3, [r3, #16]
 800be98:	095b      	lsrs	r3, r3, #5
 800be9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800be9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	691b      	ldr	r3, [r3, #16]
 800beaa:	f003 031f 	and.w	r3, r3, #31
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d104      	bne.n	800bebc <USB_EPStartXfer+0xf3a>
 800beb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800beb6:	3b01      	subs	r3, #1
 800beb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	029b      	lsls	r3, r3, #10
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800beca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bece:	b29a      	uxth	r2, r3
 800bed0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bed4:	801a      	strh	r2, [r3, #0]
 800bed6:	e074      	b.n	800bfc2 <USB_EPStartXfer+0x1040>
 800bed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bedc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	691b      	ldr	r3, [r3, #16]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d116      	bne.n	800bf16 <USB_EPStartXfer+0xf94>
 800bee8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800beec:	881b      	ldrh	r3, [r3, #0]
 800beee:	b29b      	uxth	r3, r3
 800bef0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800befa:	801a      	strh	r2, [r3, #0]
 800befc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bf00:	881b      	ldrh	r3, [r3, #0]
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf0c:	b29a      	uxth	r2, r3
 800bf0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bf12:	801a      	strh	r2, [r3, #0]
 800bf14:	e055      	b.n	800bfc2 <USB_EPStartXfer+0x1040>
 800bf16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	691b      	ldr	r3, [r3, #16]
 800bf22:	085b      	lsrs	r3, r3, #1
 800bf24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bf28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	691b      	ldr	r3, [r3, #16]
 800bf34:	f003 0301 	and.w	r3, r3, #1
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d004      	beq.n	800bf46 <USB_EPStartXfer+0xfc4>
 800bf3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf40:	3301      	adds	r3, #1
 800bf42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bf46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	029b      	lsls	r3, r3, #10
 800bf4e:	b29a      	uxth	r2, r3
 800bf50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bf54:	801a      	strh	r2, [r3, #0]
 800bf56:	e034      	b.n	800bfc2 <USB_EPStartXfer+0x1040>
 800bf58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	785b      	ldrb	r3, [r3, #1]
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d12c      	bne.n	800bfc2 <USB_EPStartXfer+0x1040>
 800bf68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	461a      	mov	r2, r3
 800bf88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bf8c:	4413      	add	r3, r2
 800bf8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	00da      	lsls	r2, r3, #3
 800bfa0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bfa4:	4413      	add	r3, r2
 800bfa6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bfaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bfae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	691b      	ldr	r3, [r3, #16]
 800bfba:	b29a      	uxth	r2, r3
 800bfbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bfc0:	801a      	strh	r2, [r3, #0]
 800bfc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bfd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	785b      	ldrb	r3, [r3, #1]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f040 8091 	bne.w	800c104 <USB_EPStartXfer+0x1182>
 800bfe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfe6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bff4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bffe:	b29b      	uxth	r3, r3
 800c000:	461a      	mov	r2, r3
 800c002:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c006:	4413      	add	r3, r2
 800c008:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c00c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	00da      	lsls	r2, r3, #3
 800c01a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c01e:	4413      	add	r3, r2
 800c020:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c024:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c02c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	691b      	ldr	r3, [r3, #16]
 800c034:	2b3e      	cmp	r3, #62	; 0x3e
 800c036:	d925      	bls.n	800c084 <USB_EPStartXfer+0x1102>
 800c038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c03c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	691b      	ldr	r3, [r3, #16]
 800c044:	095b      	lsrs	r3, r3, #5
 800c046:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c04a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c04e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	691b      	ldr	r3, [r3, #16]
 800c056:	f003 031f 	and.w	r3, r3, #31
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d104      	bne.n	800c068 <USB_EPStartXfer+0x10e6>
 800c05e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c062:	3b01      	subs	r3, #1
 800c064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	029b      	lsls	r3, r3, #10
 800c070:	b29b      	uxth	r3, r3
 800c072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c07a:	b29a      	uxth	r2, r3
 800c07c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c080:	801a      	strh	r2, [r3, #0]
 800c082:	e06d      	b.n	800c160 <USB_EPStartXfer+0x11de>
 800c084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	691b      	ldr	r3, [r3, #16]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d116      	bne.n	800c0c2 <USB_EPStartXfer+0x1140>
 800c094:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c098:	881b      	ldrh	r3, [r3, #0]
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c0a0:	b29a      	uxth	r2, r3
 800c0a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c0a6:	801a      	strh	r2, [r3, #0]
 800c0a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c0ac:	881b      	ldrh	r3, [r3, #0]
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0b8:	b29a      	uxth	r2, r3
 800c0ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c0be:	801a      	strh	r2, [r3, #0]
 800c0c0:	e04e      	b.n	800c160 <USB_EPStartXfer+0x11de>
 800c0c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	691b      	ldr	r3, [r3, #16]
 800c0ce:	085b      	lsrs	r3, r3, #1
 800c0d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c0d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	691b      	ldr	r3, [r3, #16]
 800c0e0:	f003 0301 	and.w	r3, r3, #1
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d004      	beq.n	800c0f2 <USB_EPStartXfer+0x1170>
 800c0e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c0f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	029b      	lsls	r3, r3, #10
 800c0fa:	b29a      	uxth	r2, r3
 800c0fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c100:	801a      	strh	r2, [r3, #0]
 800c102:	e02d      	b.n	800c160 <USB_EPStartXfer+0x11de>
 800c104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	785b      	ldrb	r3, [r3, #1]
 800c110:	2b01      	cmp	r3, #1
 800c112:	d125      	bne.n	800c160 <USB_EPStartXfer+0x11de>
 800c114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c118:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c122:	b29b      	uxth	r3, r3
 800c124:	461a      	mov	r2, r3
 800c126:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c12a:	4413      	add	r3, r2
 800c12c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	00da      	lsls	r2, r3, #3
 800c13e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c142:	4413      	add	r3, r2
 800c144:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c148:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c14c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	691b      	ldr	r3, [r3, #16]
 800c158:	b29a      	uxth	r2, r3
 800c15a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c15e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	69db      	ldr	r3, [r3, #28]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	f000 81fe 	beq.w	800c56e <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	4413      	add	r3, r2
 800c18c:	881b      	ldrh	r3, [r3, #0]
 800c18e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c192:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d005      	beq.n	800c1aa <USB_EPStartXfer+0x1228>
 800c19e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c1a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d10d      	bne.n	800c1c6 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c1aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c1ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	f040 81db 	bne.w	800c56e <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c1b8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c1bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	f040 81d4 	bne.w	800c56e <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c1c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	4413      	add	r3, r2
 800c1e0:	881b      	ldrh	r3, [r3, #0]
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1ec:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c1f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	441a      	add	r2, r3
 800c20a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c20e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c21a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c21e:	b29b      	uxth	r3, r3
 800c220:	8013      	strh	r3, [r2, #0]
 800c222:	e1a4      	b.n	800c56e <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	78db      	ldrb	r3, [r3, #3]
 800c230:	2b01      	cmp	r3, #1
 800c232:	f040 819a 	bne.w	800c56a <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c23a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	699a      	ldr	r2, [r3, #24]
 800c242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	691b      	ldr	r3, [r3, #16]
 800c24e:	429a      	cmp	r2, r3
 800c250:	d917      	bls.n	800c282 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800c252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	691b      	ldr	r3, [r3, #16]
 800c25e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	699a      	ldr	r2, [r3, #24]
 800c26e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c272:	1ad2      	subs	r2, r2, r3
 800c274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	619a      	str	r2, [r3, #24]
 800c280:	e00e      	b.n	800c2a0 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800c282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	699b      	ldr	r3, [r3, #24]
 800c28e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800c292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	2200      	movs	r2, #0
 800c29e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c2a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	785b      	ldrb	r3, [r3, #1]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d178      	bne.n	800c3a2 <USB_EPStartXfer+0x1420>
 800c2b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c2be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c2d4:	4413      	add	r3, r2
 800c2d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c2da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	00da      	lsls	r2, r3, #3
 800c2e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c2ec:	4413      	add	r3, r2
 800c2ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c2f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c2f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2fa:	2b3e      	cmp	r3, #62	; 0x3e
 800c2fc:	d91d      	bls.n	800c33a <USB_EPStartXfer+0x13b8>
 800c2fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c302:	095b      	lsrs	r3, r3, #5
 800c304:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c30c:	f003 031f 	and.w	r3, r3, #31
 800c310:	2b00      	cmp	r3, #0
 800c312:	d104      	bne.n	800c31e <USB_EPStartXfer+0x139c>
 800c314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c318:	3b01      	subs	r3, #1
 800c31a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c31e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c322:	b29b      	uxth	r3, r3
 800c324:	029b      	lsls	r3, r3, #10
 800c326:	b29b      	uxth	r3, r3
 800c328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c32c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c330:	b29a      	uxth	r2, r3
 800c332:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c336:	801a      	strh	r2, [r3, #0]
 800c338:	e064      	b.n	800c404 <USB_EPStartXfer+0x1482>
 800c33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d116      	bne.n	800c370 <USB_EPStartXfer+0x13ee>
 800c342:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c346:	881b      	ldrh	r3, [r3, #0]
 800c348:	b29b      	uxth	r3, r3
 800c34a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c34e:	b29a      	uxth	r2, r3
 800c350:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c354:	801a      	strh	r2, [r3, #0]
 800c356:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c35a:	881b      	ldrh	r3, [r3, #0]
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c366:	b29a      	uxth	r2, r3
 800c368:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c36c:	801a      	strh	r2, [r3, #0]
 800c36e:	e049      	b.n	800c404 <USB_EPStartXfer+0x1482>
 800c370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c374:	085b      	lsrs	r3, r3, #1
 800c376:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c37a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c37e:	f003 0301 	and.w	r3, r3, #1
 800c382:	2b00      	cmp	r3, #0
 800c384:	d004      	beq.n	800c390 <USB_EPStartXfer+0x140e>
 800c386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c38a:	3301      	adds	r3, #1
 800c38c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c394:	b29b      	uxth	r3, r3
 800c396:	029b      	lsls	r3, r3, #10
 800c398:	b29a      	uxth	r2, r3
 800c39a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c39e:	801a      	strh	r2, [r3, #0]
 800c3a0:	e030      	b.n	800c404 <USB_EPStartXfer+0x1482>
 800c3a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	785b      	ldrb	r3, [r3, #1]
 800c3ae:	2b01      	cmp	r3, #1
 800c3b0:	d128      	bne.n	800c404 <USB_EPStartXfer+0x1482>
 800c3b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c3c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c3d6:	4413      	add	r3, r2
 800c3d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c3dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	00da      	lsls	r2, r3, #3
 800c3ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c3ee:	4413      	add	r3, r2
 800c3f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c3f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c3f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3fc:	b29a      	uxth	r2, r3
 800c3fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c402:	801a      	strh	r2, [r3, #0]
 800c404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c408:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	785b      	ldrb	r3, [r3, #1]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d178      	bne.n	800c514 <USB_EPStartXfer+0x1592>
 800c422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c426:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c434:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c43e:	b29b      	uxth	r3, r3
 800c440:	461a      	mov	r2, r3
 800c442:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c446:	4413      	add	r3, r2
 800c448:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c44c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	00da      	lsls	r2, r3, #3
 800c45a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c45e:	4413      	add	r3, r2
 800c460:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c464:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c46c:	2b3e      	cmp	r3, #62	; 0x3e
 800c46e:	d91d      	bls.n	800c4ac <USB_EPStartXfer+0x152a>
 800c470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c474:	095b      	lsrs	r3, r3, #5
 800c476:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c47a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c47e:	f003 031f 	and.w	r3, r3, #31
 800c482:	2b00      	cmp	r3, #0
 800c484:	d104      	bne.n	800c490 <USB_EPStartXfer+0x150e>
 800c486:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c48a:	3b01      	subs	r3, #1
 800c48c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c490:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c494:	b29b      	uxth	r3, r3
 800c496:	029b      	lsls	r3, r3, #10
 800c498:	b29b      	uxth	r3, r3
 800c49a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c49e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4a2:	b29a      	uxth	r2, r3
 800c4a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c4a8:	801a      	strh	r2, [r3, #0]
 800c4aa:	e060      	b.n	800c56e <USB_EPStartXfer+0x15ec>
 800c4ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d116      	bne.n	800c4e2 <USB_EPStartXfer+0x1560>
 800c4b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c4b8:	881b      	ldrh	r3, [r3, #0]
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c4c0:	b29a      	uxth	r2, r3
 800c4c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c4c6:	801a      	strh	r2, [r3, #0]
 800c4c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c4cc:	881b      	ldrh	r3, [r3, #0]
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4d8:	b29a      	uxth	r2, r3
 800c4da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c4de:	801a      	strh	r2, [r3, #0]
 800c4e0:	e045      	b.n	800c56e <USB_EPStartXfer+0x15ec>
 800c4e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4e6:	085b      	lsrs	r3, r3, #1
 800c4e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4f0:	f003 0301 	and.w	r3, r3, #1
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d004      	beq.n	800c502 <USB_EPStartXfer+0x1580>
 800c4f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c502:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c506:	b29b      	uxth	r3, r3
 800c508:	029b      	lsls	r3, r3, #10
 800c50a:	b29a      	uxth	r2, r3
 800c50c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c510:	801a      	strh	r2, [r3, #0]
 800c512:	e02c      	b.n	800c56e <USB_EPStartXfer+0x15ec>
 800c514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	785b      	ldrb	r3, [r3, #1]
 800c520:	2b01      	cmp	r3, #1
 800c522:	d124      	bne.n	800c56e <USB_EPStartXfer+0x15ec>
 800c524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c528:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c532:	b29b      	uxth	r3, r3
 800c534:	461a      	mov	r2, r3
 800c536:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c53a:	4413      	add	r3, r2
 800c53c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	00da      	lsls	r2, r3, #3
 800c54e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c552:	4413      	add	r3, r2
 800c554:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c558:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c55c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c560:	b29a      	uxth	r2, r3
 800c562:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c566:	801a      	strh	r2, [r3, #0]
 800c568:	e001      	b.n	800c56e <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800c56a:	2301      	movs	r3, #1
 800c56c:	e03a      	b.n	800c5e4 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c572:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c576:	681a      	ldr	r2, [r3, #0]
 800c578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c57c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	4413      	add	r3, r2
 800c588:	881b      	ldrh	r3, [r3, #0]
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c594:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c598:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c59c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c5a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c5a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c5a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c5ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c5b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	441a      	add	r2, r3
 800c5ca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c5ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c5e2:	2300      	movs	r3, #0
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c5ee:	b480      	push	{r7}
 800c5f0:	b085      	sub	sp, #20
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
 800c5f6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	785b      	ldrb	r3, [r3, #1]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d020      	beq.n	800c642 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	009b      	lsls	r3, r3, #2
 800c608:	4413      	add	r3, r2
 800c60a:	881b      	ldrh	r3, [r3, #0]
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c616:	81bb      	strh	r3, [r7, #12]
 800c618:	89bb      	ldrh	r3, [r7, #12]
 800c61a:	f083 0310 	eor.w	r3, r3, #16
 800c61e:	81bb      	strh	r3, [r7, #12]
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	441a      	add	r2, r3
 800c62a:	89bb      	ldrh	r3, [r7, #12]
 800c62c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	8013      	strh	r3, [r2, #0]
 800c640:	e01f      	b.n	800c682 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	4413      	add	r3, r2
 800c64c:	881b      	ldrh	r3, [r3, #0]
 800c64e:	b29b      	uxth	r3, r3
 800c650:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c658:	81fb      	strh	r3, [r7, #14]
 800c65a:	89fb      	ldrh	r3, [r7, #14]
 800c65c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c660:	81fb      	strh	r3, [r7, #14]
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	441a      	add	r2, r3
 800c66c:	89fb      	ldrh	r3, [r7, #14]
 800c66e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c67a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c67e:	b29b      	uxth	r3, r3
 800c680:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c682:	2300      	movs	r3, #0
}
 800c684:	4618      	mov	r0, r3
 800c686:	3714      	adds	r7, #20
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr

0800c690 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c690:	b480      	push	{r7}
 800c692:	b087      	sub	sp, #28
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	7b1b      	ldrb	r3, [r3, #12]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	f040 809d 	bne.w	800c7de <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	785b      	ldrb	r3, [r3, #1]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d04c      	beq.n	800c746 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	4413      	add	r3, r2
 800c6b6:	881b      	ldrh	r3, [r3, #0]
 800c6b8:	823b      	strh	r3, [r7, #16]
 800c6ba:	8a3b      	ldrh	r3, [r7, #16]
 800c6bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d01b      	beq.n	800c6fc <USB_EPClearStall+0x6c>
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	4413      	add	r3, r2
 800c6ce:	881b      	ldrh	r3, [r3, #0]
 800c6d0:	b29b      	uxth	r3, r3
 800c6d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c6d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6da:	81fb      	strh	r3, [r7, #14]
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	441a      	add	r2, r3
 800c6e6:	89fb      	ldrh	r3, [r7, #14]
 800c6e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c6f8:	b29b      	uxth	r3, r3
 800c6fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	78db      	ldrb	r3, [r3, #3]
 800c700:	2b01      	cmp	r3, #1
 800c702:	d06c      	beq.n	800c7de <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c704:	687a      	ldr	r2, [r7, #4]
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	4413      	add	r3, r2
 800c70e:	881b      	ldrh	r3, [r3, #0]
 800c710:	b29b      	uxth	r3, r3
 800c712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c71a:	81bb      	strh	r3, [r7, #12]
 800c71c:	89bb      	ldrh	r3, [r7, #12]
 800c71e:	f083 0320 	eor.w	r3, r3, #32
 800c722:	81bb      	strh	r3, [r7, #12]
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	009b      	lsls	r3, r3, #2
 800c72c:	441a      	add	r2, r3
 800c72e:	89bb      	ldrh	r3, [r7, #12]
 800c730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c73c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c740:	b29b      	uxth	r3, r3
 800c742:	8013      	strh	r3, [r2, #0]
 800c744:	e04b      	b.n	800c7de <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	009b      	lsls	r3, r3, #2
 800c74e:	4413      	add	r3, r2
 800c750:	881b      	ldrh	r3, [r3, #0]
 800c752:	82fb      	strh	r3, [r7, #22]
 800c754:	8afb      	ldrh	r3, [r7, #22]
 800c756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d01b      	beq.n	800c796 <USB_EPClearStall+0x106>
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	009b      	lsls	r3, r3, #2
 800c766:	4413      	add	r3, r2
 800c768:	881b      	ldrh	r3, [r3, #0]
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c774:	82bb      	strh	r3, [r7, #20]
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	441a      	add	r2, r3
 800c780:	8abb      	ldrh	r3, [r7, #20]
 800c782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c78a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c78e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c792:	b29b      	uxth	r3, r3
 800c794:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	4413      	add	r3, r2
 800c7a0:	881b      	ldrh	r3, [r3, #0]
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c7a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7ac:	827b      	strh	r3, [r7, #18]
 800c7ae:	8a7b      	ldrh	r3, [r7, #18]
 800c7b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c7b4:	827b      	strh	r3, [r7, #18]
 800c7b6:	8a7b      	ldrh	r3, [r7, #18]
 800c7b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c7bc:	827b      	strh	r3, [r7, #18]
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	441a      	add	r2, r3
 800c7c8:	8a7b      	ldrh	r3, [r7, #18]
 800c7ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c7d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c7d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7da:	b29b      	uxth	r3, r3
 800c7dc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c7de:	2300      	movs	r3, #0
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	371c      	adds	r7, #28
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr

0800c7ec <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c7f8:	78fb      	ldrb	r3, [r7, #3]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d103      	bne.n	800c806 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2280      	movs	r2, #128	; 0x80
 800c802:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c806:	2300      	movs	r3, #0
}
 800c808:	4618      	mov	r0, r3
 800c80a:	370c      	adds	r7, #12
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr

0800c814 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c814:	b480      	push	{r7}
 800c816:	b083      	sub	sp, #12
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c822:	b29b      	uxth	r3, r3
 800c824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c82c:	b29a      	uxth	r2, r3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c834:	2300      	movs	r3, #0
}
 800c836:	4618      	mov	r0, r3
 800c838:	370c      	adds	r7, #12
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr

0800c842 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800c842:	b480      	push	{r7}
 800c844:	b083      	sub	sp, #12
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c850:	b29b      	uxth	r3, r3
 800c852:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800c856:	b29a      	uxth	r2, r3
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c85e:	2300      	movs	r3, #0
}
 800c860:	4618      	mov	r0, r3
 800c862:	370c      	adds	r7, #12
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr

0800c86c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b085      	sub	sp, #20
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c87e:	68fb      	ldr	r3, [r7, #12]
}
 800c880:	4618      	mov	r0, r3
 800c882:	3714      	adds	r7, #20
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr

0800c88c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b083      	sub	sp, #12
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
 800c894:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c896:	2300      	movs	r3, #0
}
 800c898:	4618      	mov	r0, r3
 800c89a:	370c      	adds	r7, #12
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr

0800c8a4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b08b      	sub	sp, #44	; 0x2c
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	4611      	mov	r1, r2
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	80fb      	strh	r3, [r7, #6]
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c8ba:	88bb      	ldrh	r3, [r7, #4]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	085b      	lsrs	r3, r3, #1
 800c8c0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c8ca:	88fa      	ldrh	r2, [r7, #6]
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	4413      	add	r3, r2
 800c8d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c8d4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c8d6:	69bb      	ldr	r3, [r7, #24]
 800c8d8:	627b      	str	r3, [r7, #36]	; 0x24
 800c8da:	e01b      	b.n	800c914 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800c8dc:	69fb      	ldr	r3, [r7, #28]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	021b      	lsls	r3, r3, #8
 800c8ea:	b21a      	sxth	r2, r3
 800c8ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	b21b      	sxth	r3, r3
 800c8f4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c8f6:	6a3b      	ldr	r3, [r7, #32]
 800c8f8:	8a7a      	ldrh	r2, [r7, #18]
 800c8fa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c8fc:	6a3b      	ldr	r3, [r7, #32]
 800c8fe:	3302      	adds	r3, #2
 800c900:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c902:	69fb      	ldr	r3, [r7, #28]
 800c904:	3301      	adds	r3, #1
 800c906:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	3301      	adds	r3, #1
 800c90c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c910:	3b01      	subs	r3, #1
 800c912:	627b      	str	r3, [r7, #36]	; 0x24
 800c914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c916:	2b00      	cmp	r3, #0
 800c918:	d1e0      	bne.n	800c8dc <USB_WritePMA+0x38>
  }
}
 800c91a:	bf00      	nop
 800c91c:	bf00      	nop
 800c91e:	372c      	adds	r7, #44	; 0x2c
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c928:	b480      	push	{r7}
 800c92a:	b08b      	sub	sp, #44	; 0x2c
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	4611      	mov	r1, r2
 800c934:	461a      	mov	r2, r3
 800c936:	460b      	mov	r3, r1
 800c938:	80fb      	strh	r3, [r7, #6]
 800c93a:	4613      	mov	r3, r2
 800c93c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c93e:	88bb      	ldrh	r3, [r7, #4]
 800c940:	085b      	lsrs	r3, r3, #1
 800c942:	b29b      	uxth	r3, r3
 800c944:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c94e:	88fa      	ldrh	r2, [r7, #6]
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	4413      	add	r3, r2
 800c954:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c958:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	627b      	str	r3, [r7, #36]	; 0x24
 800c95e:	e018      	b.n	800c992 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c960:	6a3b      	ldr	r3, [r7, #32]
 800c962:	881b      	ldrh	r3, [r3, #0]
 800c964:	b29b      	uxth	r3, r3
 800c966:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c968:	6a3b      	ldr	r3, [r7, #32]
 800c96a:	3302      	adds	r3, #2
 800c96c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	b2da      	uxtb	r2, r3
 800c972:	69fb      	ldr	r3, [r7, #28]
 800c974:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c976:	69fb      	ldr	r3, [r7, #28]
 800c978:	3301      	adds	r3, #1
 800c97a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	0a1b      	lsrs	r3, r3, #8
 800c980:	b2da      	uxtb	r2, r3
 800c982:	69fb      	ldr	r3, [r7, #28]
 800c984:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c986:	69fb      	ldr	r3, [r7, #28]
 800c988:	3301      	adds	r3, #1
 800c98a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98e:	3b01      	subs	r3, #1
 800c990:	627b      	str	r3, [r7, #36]	; 0x24
 800c992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c994:	2b00      	cmp	r3, #0
 800c996:	d1e3      	bne.n	800c960 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c998:	88bb      	ldrh	r3, [r7, #4]
 800c99a:	f003 0301 	and.w	r3, r3, #1
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d007      	beq.n	800c9b4 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800c9a4:	6a3b      	ldr	r3, [r7, #32]
 800c9a6:	881b      	ldrh	r3, [r3, #0]
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	b2da      	uxtb	r2, r3
 800c9b0:	69fb      	ldr	r3, [r7, #28]
 800c9b2:	701a      	strb	r2, [r3, #0]
  }
}
 800c9b4:	bf00      	nop
 800c9b6:	372c      	adds	r7, #44	; 0x2c
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr

0800c9c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c9cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c9d0:	f002 f960 	bl	800ec94 <USBD_static_malloc>
 800c9d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d105      	bne.n	800c9e8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c9e4:	2302      	movs	r3, #2
 800c9e6:	e066      	b.n	800cab6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	68fa      	ldr	r2, [r7, #12]
 800c9ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	7c1b      	ldrb	r3, [r3, #16]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d119      	bne.n	800ca2c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c9f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9fc:	2202      	movs	r2, #2
 800c9fe:	2181      	movs	r1, #129	; 0x81
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f001 ff7f 	bl	800e904 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2201      	movs	r2, #1
 800ca0a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ca0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca10:	2202      	movs	r2, #2
 800ca12:	2101      	movs	r1, #1
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f001 ff75 	bl	800e904 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2210      	movs	r2, #16
 800ca26:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ca2a:	e016      	b.n	800ca5a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ca2c:	2340      	movs	r3, #64	; 0x40
 800ca2e:	2202      	movs	r2, #2
 800ca30:	2181      	movs	r1, #129	; 0x81
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f001 ff66 	bl	800e904 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ca3e:	2340      	movs	r3, #64	; 0x40
 800ca40:	2202      	movs	r2, #2
 800ca42:	2101      	movs	r1, #1
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f001 ff5d 	bl	800e904 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2210      	movs	r2, #16
 800ca56:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ca5a:	2308      	movs	r3, #8
 800ca5c:	2203      	movs	r2, #3
 800ca5e:	2182      	movs	r1, #130	; 0x82
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f001 ff4f 	bl	800e904 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2201      	movs	r2, #1
 800ca6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2200      	movs	r2, #0
 800ca84:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	7c1b      	ldrb	r3, [r3, #16]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d109      	bne.n	800caa4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ca96:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca9a:	2101      	movs	r1, #1
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f002 f8ad 	bl	800ebfc <USBD_LL_PrepareReceive>
 800caa2:	e007      	b.n	800cab4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800caaa:	2340      	movs	r3, #64	; 0x40
 800caac:	2101      	movs	r1, #1
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f002 f8a4 	bl	800ebfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cab4:	2300      	movs	r3, #0
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3710      	adds	r7, #16
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b082      	sub	sp, #8
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
 800cac6:	460b      	mov	r3, r1
 800cac8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800caca:	2181      	movs	r1, #129	; 0x81
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f001 ff57 	bl	800e980 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2200      	movs	r2, #0
 800cad6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800cad8:	2101      	movs	r1, #1
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f001 ff50 	bl	800e980 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2200      	movs	r2, #0
 800cae4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800cae8:	2182      	movs	r1, #130	; 0x82
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f001 ff48 	bl	800e980 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2200      	movs	r2, #0
 800cafc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00e      	beq.n	800cb28 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f002 f8c8 	bl	800ecb0 <USBD_static_free>
    pdev->pClassData = NULL;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2200      	movs	r2, #0
 800cb24:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cb28:	2300      	movs	r3, #0
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3708      	adds	r7, #8
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
	...

0800cb34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b086      	sub	sp, #24
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb44:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cb46:	2300      	movs	r3, #0
 800cb48:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d101      	bne.n	800cb5c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800cb58:	2303      	movs	r3, #3
 800cb5a:	e0af      	b.n	800ccbc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d03f      	beq.n	800cbe8 <USBD_CDC_Setup+0xb4>
 800cb68:	2b20      	cmp	r3, #32
 800cb6a:	f040 809f 	bne.w	800ccac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	88db      	ldrh	r3, [r3, #6]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d02e      	beq.n	800cbd4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	b25b      	sxtb	r3, r3
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	da16      	bge.n	800cbae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb86:	689b      	ldr	r3, [r3, #8]
 800cb88:	683a      	ldr	r2, [r7, #0]
 800cb8a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800cb8c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cb8e:	683a      	ldr	r2, [r7, #0]
 800cb90:	88d2      	ldrh	r2, [r2, #6]
 800cb92:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	88db      	ldrh	r3, [r3, #6]
 800cb98:	2b07      	cmp	r3, #7
 800cb9a:	bf28      	it	cs
 800cb9c:	2307      	movcs	r3, #7
 800cb9e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	89fa      	ldrh	r2, [r7, #14]
 800cba4:	4619      	mov	r1, r3
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f001 faa5 	bl	800e0f6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800cbac:	e085      	b.n	800ccba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	785a      	ldrb	r2, [r3, #1]
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	88db      	ldrh	r3, [r3, #6]
 800cbbc:	b2da      	uxtb	r2, r3
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800cbc4:	6939      	ldr	r1, [r7, #16]
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	88db      	ldrh	r3, [r3, #6]
 800cbca:	461a      	mov	r2, r3
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f001 fabe 	bl	800e14e <USBD_CtlPrepareRx>
      break;
 800cbd2:	e072      	b.n	800ccba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	683a      	ldr	r2, [r7, #0]
 800cbde:	7850      	ldrb	r0, [r2, #1]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	6839      	ldr	r1, [r7, #0]
 800cbe4:	4798      	blx	r3
      break;
 800cbe6:	e068      	b.n	800ccba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	785b      	ldrb	r3, [r3, #1]
 800cbec:	2b0b      	cmp	r3, #11
 800cbee:	d852      	bhi.n	800cc96 <USBD_CDC_Setup+0x162>
 800cbf0:	a201      	add	r2, pc, #4	; (adr r2, 800cbf8 <USBD_CDC_Setup+0xc4>)
 800cbf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbf6:	bf00      	nop
 800cbf8:	0800cc29 	.word	0x0800cc29
 800cbfc:	0800cca5 	.word	0x0800cca5
 800cc00:	0800cc97 	.word	0x0800cc97
 800cc04:	0800cc97 	.word	0x0800cc97
 800cc08:	0800cc97 	.word	0x0800cc97
 800cc0c:	0800cc97 	.word	0x0800cc97
 800cc10:	0800cc97 	.word	0x0800cc97
 800cc14:	0800cc97 	.word	0x0800cc97
 800cc18:	0800cc97 	.word	0x0800cc97
 800cc1c:	0800cc97 	.word	0x0800cc97
 800cc20:	0800cc53 	.word	0x0800cc53
 800cc24:	0800cc7d 	.word	0x0800cc7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	2b03      	cmp	r3, #3
 800cc32:	d107      	bne.n	800cc44 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cc34:	f107 030a 	add.w	r3, r7, #10
 800cc38:	2202      	movs	r2, #2
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f001 fa5a 	bl	800e0f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cc42:	e032      	b.n	800ccaa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800cc44:	6839      	ldr	r1, [r7, #0]
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f001 f9e4 	bl	800e014 <USBD_CtlError>
            ret = USBD_FAIL;
 800cc4c:	2303      	movs	r3, #3
 800cc4e:	75fb      	strb	r3, [r7, #23]
          break;
 800cc50:	e02b      	b.n	800ccaa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	2b03      	cmp	r3, #3
 800cc5c:	d107      	bne.n	800cc6e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cc5e:	f107 030d 	add.w	r3, r7, #13
 800cc62:	2201      	movs	r2, #1
 800cc64:	4619      	mov	r1, r3
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f001 fa45 	bl	800e0f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cc6c:	e01d      	b.n	800ccaa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800cc6e:	6839      	ldr	r1, [r7, #0]
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f001 f9cf 	bl	800e014 <USBD_CtlError>
            ret = USBD_FAIL;
 800cc76:	2303      	movs	r3, #3
 800cc78:	75fb      	strb	r3, [r7, #23]
          break;
 800cc7a:	e016      	b.n	800ccaa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	2b03      	cmp	r3, #3
 800cc86:	d00f      	beq.n	800cca8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800cc88:	6839      	ldr	r1, [r7, #0]
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f001 f9c2 	bl	800e014 <USBD_CtlError>
            ret = USBD_FAIL;
 800cc90:	2303      	movs	r3, #3
 800cc92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cc94:	e008      	b.n	800cca8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cc96:	6839      	ldr	r1, [r7, #0]
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f001 f9bb 	bl	800e014 <USBD_CtlError>
          ret = USBD_FAIL;
 800cc9e:	2303      	movs	r3, #3
 800cca0:	75fb      	strb	r3, [r7, #23]
          break;
 800cca2:	e002      	b.n	800ccaa <USBD_CDC_Setup+0x176>
          break;
 800cca4:	bf00      	nop
 800cca6:	e008      	b.n	800ccba <USBD_CDC_Setup+0x186>
          break;
 800cca8:	bf00      	nop
      }
      break;
 800ccaa:	e006      	b.n	800ccba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800ccac:	6839      	ldr	r1, [r7, #0]
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f001 f9b0 	bl	800e014 <USBD_CtlError>
      ret = USBD_FAIL;
 800ccb4:	2303      	movs	r3, #3
 800ccb6:	75fb      	strb	r3, [r7, #23]
      break;
 800ccb8:	bf00      	nop
  }

  return (uint8_t)ret;
 800ccba:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3718      	adds	r7, #24
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	460b      	mov	r3, r1
 800ccce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ccd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d101      	bne.n	800cce6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cce2:	2303      	movs	r3, #3
 800cce4:	e04f      	b.n	800cd86 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ccec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ccee:	78fa      	ldrb	r2, [r7, #3]
 800ccf0:	6879      	ldr	r1, [r7, #4]
 800ccf2:	4613      	mov	r3, r2
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	4413      	add	r3, r2
 800ccf8:	009b      	lsls	r3, r3, #2
 800ccfa:	440b      	add	r3, r1
 800ccfc:	3318      	adds	r3, #24
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d029      	beq.n	800cd58 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800cd04:	78fa      	ldrb	r2, [r7, #3]
 800cd06:	6879      	ldr	r1, [r7, #4]
 800cd08:	4613      	mov	r3, r2
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	4413      	add	r3, r2
 800cd0e:	009b      	lsls	r3, r3, #2
 800cd10:	440b      	add	r3, r1
 800cd12:	3318      	adds	r3, #24
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	78f9      	ldrb	r1, [r7, #3]
 800cd18:	68f8      	ldr	r0, [r7, #12]
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	440b      	add	r3, r1
 800cd20:	00db      	lsls	r3, r3, #3
 800cd22:	4403      	add	r3, r0
 800cd24:	333c      	adds	r3, #60	; 0x3c
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	fbb2 f1f3 	udiv	r1, r2, r3
 800cd2c:	fb01 f303 	mul.w	r3, r1, r3
 800cd30:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d110      	bne.n	800cd58 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800cd36:	78fa      	ldrb	r2, [r7, #3]
 800cd38:	6879      	ldr	r1, [r7, #4]
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	4413      	add	r3, r2
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	440b      	add	r3, r1
 800cd44:	3318      	adds	r3, #24
 800cd46:	2200      	movs	r2, #0
 800cd48:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cd4a:	78f9      	ldrb	r1, [r7, #3]
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	2200      	movs	r2, #0
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f001 ff1b 	bl	800eb8c <USBD_LL_Transmit>
 800cd56:	e015      	b.n	800cd84 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd66:	691b      	ldr	r3, [r3, #16]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d00b      	beq.n	800cd84 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd72:	691b      	ldr	r3, [r3, #16]
 800cd74:	68ba      	ldr	r2, [r7, #8]
 800cd76:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cd7a:	68ba      	ldr	r2, [r7, #8]
 800cd7c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cd80:	78fa      	ldrb	r2, [r7, #3]
 800cd82:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cd84:	2300      	movs	r3, #0
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3710      	adds	r7, #16
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}

0800cd8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b084      	sub	sp, #16
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
 800cd96:	460b      	mov	r3, r1
 800cd98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cda0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d101      	bne.n	800cdb0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cdac:	2303      	movs	r3, #3
 800cdae:	e015      	b.n	800cddc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cdb0:	78fb      	ldrb	r3, [r7, #3]
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f001 ff59 	bl	800ec6c <USBD_LL_GetRxDataSize>
 800cdba:	4602      	mov	r2, r0
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	68fa      	ldr	r2, [r7, #12]
 800cdcc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cdd0:	68fa      	ldr	r2, [r7, #12]
 800cdd2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cdd6:	4611      	mov	r1, r2
 800cdd8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cdda:	2300      	movs	r3, #0
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3710      	adds	r7, #16
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b084      	sub	sp, #16
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cdf2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d101      	bne.n	800cdfe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800cdfa:	2303      	movs	r3, #3
 800cdfc:	e01b      	b.n	800ce36 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d015      	beq.n	800ce34 <USBD_CDC_EP0_RxReady+0x50>
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ce0e:	2bff      	cmp	r3, #255	; 0xff
 800ce10:	d010      	beq.n	800ce34 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce18:	689b      	ldr	r3, [r3, #8]
 800ce1a:	68fa      	ldr	r2, [r7, #12]
 800ce1c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ce20:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ce22:	68fa      	ldr	r2, [r7, #12]
 800ce24:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ce28:	b292      	uxth	r2, r2
 800ce2a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	22ff      	movs	r2, #255	; 0xff
 800ce30:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ce34:	2300      	movs	r3, #0
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
	...

0800ce40 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2243      	movs	r2, #67	; 0x43
 800ce4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ce4e:	4b03      	ldr	r3, [pc, #12]	; (800ce5c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	370c      	adds	r7, #12
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr
 800ce5c:	200000b4 	.word	0x200000b4

0800ce60 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b083      	sub	sp, #12
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2243      	movs	r2, #67	; 0x43
 800ce6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ce6e:	4b03      	ldr	r3, [pc, #12]	; (800ce7c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	370c      	adds	r7, #12
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr
 800ce7c:	20000070 	.word	0x20000070

0800ce80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b083      	sub	sp, #12
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2243      	movs	r2, #67	; 0x43
 800ce8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ce8e:	4b03      	ldr	r3, [pc, #12]	; (800ce9c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	370c      	adds	r7, #12
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr
 800ce9c:	200000f8 	.word	0x200000f8

0800cea0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b083      	sub	sp, #12
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	220a      	movs	r2, #10
 800ceac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ceae:	4b03      	ldr	r3, [pc, #12]	; (800cebc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	370c      	adds	r7, #12
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr
 800cebc:	2000002c 	.word	0x2000002c

0800cec0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d101      	bne.n	800ced4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ced0:	2303      	movs	r3, #3
 800ced2:	e004      	b.n	800cede <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	683a      	ldr	r2, [r7, #0]
 800ced8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800cedc:	2300      	movs	r3, #0
}
 800cede:	4618      	mov	r0, r3
 800cee0:	370c      	adds	r7, #12
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr

0800ceea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ceea:	b480      	push	{r7}
 800ceec:	b087      	sub	sp, #28
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	60f8      	str	r0, [r7, #12]
 800cef2:	60b9      	str	r1, [r7, #8]
 800cef4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cefc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d101      	bne.n	800cf08 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800cf04:	2303      	movs	r3, #3
 800cf06:	e008      	b.n	800cf1a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	68ba      	ldr	r2, [r7, #8]
 800cf0c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cf18:	2300      	movs	r3, #0
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	371c      	adds	r7, #28
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr

0800cf26 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cf26:	b480      	push	{r7}
 800cf28:	b085      	sub	sp, #20
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
 800cf2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf36:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d101      	bne.n	800cf42 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800cf3e:	2303      	movs	r3, #3
 800cf40:	e004      	b.n	800cf4c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	683a      	ldr	r2, [r7, #0]
 800cf46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cf4a:	2300      	movs	r3, #0
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3714      	adds	r7, #20
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr

0800cf58 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b084      	sub	sp, #16
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf66:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d101      	bne.n	800cf7a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cf76:	2303      	movs	r3, #3
 800cf78:	e01a      	b.n	800cfb0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d114      	bne.n	800cfae <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	2201      	movs	r2, #1
 800cf88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800cfa2:	2181      	movs	r1, #129	; 0x81
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f001 fdf1 	bl	800eb8c <USBD_LL_Transmit>

    ret = USBD_OK;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800cfae:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b084      	sub	sp, #16
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cfc6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d101      	bne.n	800cfd6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800cfd2:	2303      	movs	r3, #3
 800cfd4:	e016      	b.n	800d004 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	7c1b      	ldrb	r3, [r3, #16]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d109      	bne.n	800cff2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cfe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cfe8:	2101      	movs	r1, #1
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f001 fe06 	bl	800ebfc <USBD_LL_PrepareReceive>
 800cff0:	e007      	b.n	800d002 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cff8:	2340      	movs	r3, #64	; 0x40
 800cffa:	2101      	movs	r1, #1
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f001 fdfd 	bl	800ebfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d002:	2300      	movs	r3, #0
}
 800d004:	4618      	mov	r0, r3
 800d006:	3710      	adds	r7, #16
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b086      	sub	sp, #24
 800d010:	af00      	add	r7, sp, #0
 800d012:	60f8      	str	r0, [r7, #12]
 800d014:	60b9      	str	r1, [r7, #8]
 800d016:	4613      	mov	r3, r2
 800d018:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d101      	bne.n	800d024 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d020:	2303      	movs	r3, #3
 800d022:	e01f      	b.n	800d064 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2200      	movs	r2, #0
 800d028:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2200      	movs	r2, #0
 800d030:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2200      	movs	r2, #0
 800d038:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d003      	beq.n	800d04a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	68ba      	ldr	r2, [r7, #8]
 800d046:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2201      	movs	r2, #1
 800d04e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	79fa      	ldrb	r2, [r7, #7]
 800d056:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d058:	68f8      	ldr	r0, [r7, #12]
 800d05a:	f001 fbbf 	bl	800e7dc <USBD_LL_Init>
 800d05e:	4603      	mov	r3, r0
 800d060:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d062:	7dfb      	ldrb	r3, [r7, #23]
}
 800d064:	4618      	mov	r0, r3
 800d066:	3718      	adds	r7, #24
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}

0800d06c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b084      	sub	sp, #16
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d076:	2300      	movs	r3, #0
 800d078:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d101      	bne.n	800d084 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d080:	2303      	movs	r3, #3
 800d082:	e016      	b.n	800d0b2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	683a      	ldr	r2, [r7, #0]
 800d088:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d094:	2b00      	cmp	r3, #0
 800d096:	d00b      	beq.n	800d0b0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a0:	f107 020e 	add.w	r2, r7, #14
 800d0a4:	4610      	mov	r0, r2
 800d0a6:	4798      	blx	r3
 800d0a8:	4602      	mov	r2, r0
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d0b0:	2300      	movs	r3, #0
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3710      	adds	r7, #16
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}

0800d0ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d0ba:	b580      	push	{r7, lr}
 800d0bc:	b082      	sub	sp, #8
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f001 fbec 	bl	800e8a0 <USBD_LL_Start>
 800d0c8:	4603      	mov	r3, r0
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3708      	adds	r7, #8
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}

0800d0d2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d0d2:	b480      	push	{r7}
 800d0d4:	b083      	sub	sp, #12
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d0da:	2300      	movs	r3, #0
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	370c      	adds	r7, #12
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr

0800d0e8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d0f4:	2303      	movs	r3, #3
 800d0f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d009      	beq.n	800d116 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	78fa      	ldrb	r2, [r7, #3]
 800d10c:	4611      	mov	r1, r2
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	4798      	blx	r3
 800d112:	4603      	mov	r3, r0
 800d114:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d116:	7bfb      	ldrb	r3, [r7, #15]
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3710      	adds	r7, #16
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}

0800d120 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	460b      	mov	r3, r1
 800d12a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d132:	2b00      	cmp	r3, #0
 800d134:	d007      	beq.n	800d146 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	78fa      	ldrb	r2, [r7, #3]
 800d140:	4611      	mov	r1, r2
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	4798      	blx	r3
  }

  return USBD_OK;
 800d146:	2300      	movs	r3, #0
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3708      	adds	r7, #8
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b084      	sub	sp, #16
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d160:	6839      	ldr	r1, [r7, #0]
 800d162:	4618      	mov	r0, r3
 800d164:	f000 ff1c 	bl	800dfa0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2201      	movs	r2, #1
 800d16c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d176:	461a      	mov	r2, r3
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d184:	f003 031f 	and.w	r3, r3, #31
 800d188:	2b02      	cmp	r3, #2
 800d18a:	d01a      	beq.n	800d1c2 <USBD_LL_SetupStage+0x72>
 800d18c:	2b02      	cmp	r3, #2
 800d18e:	d822      	bhi.n	800d1d6 <USBD_LL_SetupStage+0x86>
 800d190:	2b00      	cmp	r3, #0
 800d192:	d002      	beq.n	800d19a <USBD_LL_SetupStage+0x4a>
 800d194:	2b01      	cmp	r3, #1
 800d196:	d00a      	beq.n	800d1ae <USBD_LL_SetupStage+0x5e>
 800d198:	e01d      	b.n	800d1d6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f000 f9ee 	bl	800d584 <USBD_StdDevReq>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	73fb      	strb	r3, [r7, #15]
      break;
 800d1ac:	e020      	b.n	800d1f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f000 fa52 	bl	800d660 <USBD_StdItfReq>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	73fb      	strb	r3, [r7, #15]
      break;
 800d1c0:	e016      	b.n	800d1f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f000 fa91 	bl	800d6f2 <USBD_StdEPReq>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	73fb      	strb	r3, [r7, #15]
      break;
 800d1d4:	e00c      	b.n	800d1f0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d1dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f001 fc01 	bl	800e9ec <USBD_LL_StallEP>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	73fb      	strb	r3, [r7, #15]
      break;
 800d1ee:	bf00      	nop
  }

  return ret;
 800d1f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}

0800d1fa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d1fa:	b580      	push	{r7, lr}
 800d1fc:	b086      	sub	sp, #24
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	60f8      	str	r0, [r7, #12]
 800d202:	460b      	mov	r3, r1
 800d204:	607a      	str	r2, [r7, #4]
 800d206:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d208:	7afb      	ldrb	r3, [r7, #11]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d138      	bne.n	800d280 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d214:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d21c:	2b03      	cmp	r3, #3
 800d21e:	d14a      	bne.n	800d2b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	689a      	ldr	r2, [r3, #8]
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	68db      	ldr	r3, [r3, #12]
 800d228:	429a      	cmp	r2, r3
 800d22a:	d913      	bls.n	800d254 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	689a      	ldr	r2, [r3, #8]
 800d230:	693b      	ldr	r3, [r7, #16]
 800d232:	68db      	ldr	r3, [r3, #12]
 800d234:	1ad2      	subs	r2, r2, r3
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	68da      	ldr	r2, [r3, #12]
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	689b      	ldr	r3, [r3, #8]
 800d242:	4293      	cmp	r3, r2
 800d244:	bf28      	it	cs
 800d246:	4613      	movcs	r3, r2
 800d248:	461a      	mov	r2, r3
 800d24a:	6879      	ldr	r1, [r7, #4]
 800d24c:	68f8      	ldr	r0, [r7, #12]
 800d24e:	f000 ff9b 	bl	800e188 <USBD_CtlContinueRx>
 800d252:	e030      	b.n	800d2b6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d25a:	b2db      	uxtb	r3, r3
 800d25c:	2b03      	cmp	r3, #3
 800d25e:	d10b      	bne.n	800d278 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d266:	691b      	ldr	r3, [r3, #16]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d005      	beq.n	800d278 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d272:	691b      	ldr	r3, [r3, #16]
 800d274:	68f8      	ldr	r0, [r7, #12]
 800d276:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d278:	68f8      	ldr	r0, [r7, #12]
 800d27a:	f000 ff96 	bl	800e1aa <USBD_CtlSendStatus>
 800d27e:	e01a      	b.n	800d2b6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d286:	b2db      	uxtb	r3, r3
 800d288:	2b03      	cmp	r3, #3
 800d28a:	d114      	bne.n	800d2b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d292:	699b      	ldr	r3, [r3, #24]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d00e      	beq.n	800d2b6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d29e:	699b      	ldr	r3, [r3, #24]
 800d2a0:	7afa      	ldrb	r2, [r7, #11]
 800d2a2:	4611      	mov	r1, r2
 800d2a4:	68f8      	ldr	r0, [r7, #12]
 800d2a6:	4798      	blx	r3
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d2ac:	7dfb      	ldrb	r3, [r7, #23]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d001      	beq.n	800d2b6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d2b2:	7dfb      	ldrb	r3, [r7, #23]
 800d2b4:	e000      	b.n	800d2b8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d2b6:	2300      	movs	r3, #0
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3718      	adds	r7, #24
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b086      	sub	sp, #24
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	607a      	str	r2, [r7, #4]
 800d2cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d2ce:	7afb      	ldrb	r3, [r7, #11]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d16b      	bne.n	800d3ac <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	3314      	adds	r3, #20
 800d2d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d2e0:	2b02      	cmp	r3, #2
 800d2e2:	d156      	bne.n	800d392 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	689a      	ldr	r2, [r3, #8]
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	68db      	ldr	r3, [r3, #12]
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d914      	bls.n	800d31a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	689a      	ldr	r2, [r3, #8]
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	1ad2      	subs	r2, r2, r3
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	689b      	ldr	r3, [r3, #8]
 800d302:	461a      	mov	r2, r3
 800d304:	6879      	ldr	r1, [r7, #4]
 800d306:	68f8      	ldr	r0, [r7, #12]
 800d308:	f000 ff10 	bl	800e12c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d30c:	2300      	movs	r3, #0
 800d30e:	2200      	movs	r2, #0
 800d310:	2100      	movs	r1, #0
 800d312:	68f8      	ldr	r0, [r7, #12]
 800d314:	f001 fc72 	bl	800ebfc <USBD_LL_PrepareReceive>
 800d318:	e03b      	b.n	800d392 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	68da      	ldr	r2, [r3, #12]
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	689b      	ldr	r3, [r3, #8]
 800d322:	429a      	cmp	r2, r3
 800d324:	d11c      	bne.n	800d360 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	685a      	ldr	r2, [r3, #4]
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d32e:	429a      	cmp	r2, r3
 800d330:	d316      	bcc.n	800d360 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	685a      	ldr	r2, [r3, #4]
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d20f      	bcs.n	800d360 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d340:	2200      	movs	r2, #0
 800d342:	2100      	movs	r1, #0
 800d344:	68f8      	ldr	r0, [r7, #12]
 800d346:	f000 fef1 	bl	800e12c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2200      	movs	r2, #0
 800d34e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d352:	2300      	movs	r3, #0
 800d354:	2200      	movs	r2, #0
 800d356:	2100      	movs	r1, #0
 800d358:	68f8      	ldr	r0, [r7, #12]
 800d35a:	f001 fc4f 	bl	800ebfc <USBD_LL_PrepareReceive>
 800d35e:	e018      	b.n	800d392 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d366:	b2db      	uxtb	r3, r3
 800d368:	2b03      	cmp	r3, #3
 800d36a:	d10b      	bne.n	800d384 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d372:	68db      	ldr	r3, [r3, #12]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d005      	beq.n	800d384 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	68f8      	ldr	r0, [r7, #12]
 800d382:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d384:	2180      	movs	r1, #128	; 0x80
 800d386:	68f8      	ldr	r0, [r7, #12]
 800d388:	f001 fb30 	bl	800e9ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d38c:	68f8      	ldr	r0, [r7, #12]
 800d38e:	f000 ff1f 	bl	800e1d0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d122      	bne.n	800d3e2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d39c:	68f8      	ldr	r0, [r7, #12]
 800d39e:	f7ff fe98 	bl	800d0d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d3aa:	e01a      	b.n	800d3e2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	2b03      	cmp	r3, #3
 800d3b6:	d114      	bne.n	800d3e2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3be:	695b      	ldr	r3, [r3, #20]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d00e      	beq.n	800d3e2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3ca:	695b      	ldr	r3, [r3, #20]
 800d3cc:	7afa      	ldrb	r2, [r7, #11]
 800d3ce:	4611      	mov	r1, r2
 800d3d0:	68f8      	ldr	r0, [r7, #12]
 800d3d2:	4798      	blx	r3
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d3d8:	7dfb      	ldrb	r3, [r7, #23]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d001      	beq.n	800d3e2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d3de:	7dfb      	ldrb	r3, [r7, #23]
 800d3e0:	e000      	b.n	800d3e4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d3e2:	2300      	movs	r3, #0
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3718      	adds	r7, #24
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b082      	sub	sp, #8
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2200      	movs	r2, #0
 800d400:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2200      	movs	r2, #0
 800d408:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2200      	movs	r2, #0
 800d40e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d101      	bne.n	800d420 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d41c:	2303      	movs	r3, #3
 800d41e:	e02f      	b.n	800d480 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d426:	2b00      	cmp	r3, #0
 800d428:	d00f      	beq.n	800d44a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d430:	685b      	ldr	r3, [r3, #4]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d009      	beq.n	800d44a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	6852      	ldr	r2, [r2, #4]
 800d442:	b2d2      	uxtb	r2, r2
 800d444:	4611      	mov	r1, r2
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d44a:	2340      	movs	r3, #64	; 0x40
 800d44c:	2200      	movs	r2, #0
 800d44e:	2100      	movs	r1, #0
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f001 fa57 	bl	800e904 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2201      	movs	r2, #1
 800d45a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2240      	movs	r2, #64	; 0x40
 800d462:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d466:	2340      	movs	r3, #64	; 0x40
 800d468:	2200      	movs	r2, #0
 800d46a:	2180      	movs	r1, #128	; 0x80
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f001 fa49 	bl	800e904 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2201      	movs	r2, #1
 800d476:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2240      	movs	r2, #64	; 0x40
 800d47c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d47e:	2300      	movs	r3, #0
}
 800d480:	4618      	mov	r0, r3
 800d482:	3708      	adds	r7, #8
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d488:	b480      	push	{r7}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	460b      	mov	r3, r1
 800d492:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	78fa      	ldrb	r2, [r7, #3]
 800d498:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d49a:	2300      	movs	r3, #0
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	370c      	adds	r7, #12
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr

0800d4a8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b083      	sub	sp, #12
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4b6:	b2da      	uxtb	r2, r3
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2204      	movs	r2, #4
 800d4c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d4c6:	2300      	movs	r3, #0
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	370c      	adds	r7, #12
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr

0800d4d4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b083      	sub	sp, #12
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	2b04      	cmp	r3, #4
 800d4e6:	d106      	bne.n	800d4f6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d4ee:	b2da      	uxtb	r2, r3
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d4f6:	2300      	movs	r3, #0
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	370c      	adds	r7, #12
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr

0800d504 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b082      	sub	sp, #8
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d512:	2b00      	cmp	r3, #0
 800d514:	d101      	bne.n	800d51a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d516:	2303      	movs	r3, #3
 800d518:	e012      	b.n	800d540 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d520:	b2db      	uxtb	r3, r3
 800d522:	2b03      	cmp	r3, #3
 800d524:	d10b      	bne.n	800d53e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d52c:	69db      	ldr	r3, [r3, #28]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d005      	beq.n	800d53e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d538:	69db      	ldr	r3, [r3, #28]
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d53e:	2300      	movs	r3, #0
}
 800d540:	4618      	mov	r0, r3
 800d542:	3708      	adds	r7, #8
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d548:	b480      	push	{r7}
 800d54a:	b087      	sub	sp, #28
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	3301      	adds	r3, #1
 800d55e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d566:	8a3b      	ldrh	r3, [r7, #16]
 800d568:	021b      	lsls	r3, r3, #8
 800d56a:	b21a      	sxth	r2, r3
 800d56c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d570:	4313      	orrs	r3, r2
 800d572:	b21b      	sxth	r3, r3
 800d574:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d576:	89fb      	ldrh	r3, [r7, #14]
}
 800d578:	4618      	mov	r0, r3
 800d57a:	371c      	adds	r7, #28
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b084      	sub	sp, #16
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d58e:	2300      	movs	r3, #0
 800d590:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d59a:	2b40      	cmp	r3, #64	; 0x40
 800d59c:	d005      	beq.n	800d5aa <USBD_StdDevReq+0x26>
 800d59e:	2b40      	cmp	r3, #64	; 0x40
 800d5a0:	d853      	bhi.n	800d64a <USBD_StdDevReq+0xc6>
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d00b      	beq.n	800d5be <USBD_StdDevReq+0x3a>
 800d5a6:	2b20      	cmp	r3, #32
 800d5a8:	d14f      	bne.n	800d64a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	6839      	ldr	r1, [r7, #0]
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	4798      	blx	r3
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	73fb      	strb	r3, [r7, #15]
      break;
 800d5bc:	e04a      	b.n	800d654 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	785b      	ldrb	r3, [r3, #1]
 800d5c2:	2b09      	cmp	r3, #9
 800d5c4:	d83b      	bhi.n	800d63e <USBD_StdDevReq+0xba>
 800d5c6:	a201      	add	r2, pc, #4	; (adr r2, 800d5cc <USBD_StdDevReq+0x48>)
 800d5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5cc:	0800d621 	.word	0x0800d621
 800d5d0:	0800d635 	.word	0x0800d635
 800d5d4:	0800d63f 	.word	0x0800d63f
 800d5d8:	0800d62b 	.word	0x0800d62b
 800d5dc:	0800d63f 	.word	0x0800d63f
 800d5e0:	0800d5ff 	.word	0x0800d5ff
 800d5e4:	0800d5f5 	.word	0x0800d5f5
 800d5e8:	0800d63f 	.word	0x0800d63f
 800d5ec:	0800d617 	.word	0x0800d617
 800d5f0:	0800d609 	.word	0x0800d609
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d5f4:	6839      	ldr	r1, [r7, #0]
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 f9de 	bl	800d9b8 <USBD_GetDescriptor>
          break;
 800d5fc:	e024      	b.n	800d648 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d5fe:	6839      	ldr	r1, [r7, #0]
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f000 fb43 	bl	800dc8c <USBD_SetAddress>
          break;
 800d606:	e01f      	b.n	800d648 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d608:	6839      	ldr	r1, [r7, #0]
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f000 fb82 	bl	800dd14 <USBD_SetConfig>
 800d610:	4603      	mov	r3, r0
 800d612:	73fb      	strb	r3, [r7, #15]
          break;
 800d614:	e018      	b.n	800d648 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d616:	6839      	ldr	r1, [r7, #0]
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f000 fc21 	bl	800de60 <USBD_GetConfig>
          break;
 800d61e:	e013      	b.n	800d648 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d620:	6839      	ldr	r1, [r7, #0]
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f000 fc52 	bl	800decc <USBD_GetStatus>
          break;
 800d628:	e00e      	b.n	800d648 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d62a:	6839      	ldr	r1, [r7, #0]
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f000 fc81 	bl	800df34 <USBD_SetFeature>
          break;
 800d632:	e009      	b.n	800d648 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d634:	6839      	ldr	r1, [r7, #0]
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f000 fc90 	bl	800df5c <USBD_ClrFeature>
          break;
 800d63c:	e004      	b.n	800d648 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d63e:	6839      	ldr	r1, [r7, #0]
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f000 fce7 	bl	800e014 <USBD_CtlError>
          break;
 800d646:	bf00      	nop
      }
      break;
 800d648:	e004      	b.n	800d654 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d64a:	6839      	ldr	r1, [r7, #0]
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f000 fce1 	bl	800e014 <USBD_CtlError>
      break;
 800d652:	bf00      	nop
  }

  return ret;
 800d654:	7bfb      	ldrb	r3, [r7, #15]
}
 800d656:	4618      	mov	r0, r3
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop

0800d660 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b084      	sub	sp, #16
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d66a:	2300      	movs	r3, #0
 800d66c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d676:	2b40      	cmp	r3, #64	; 0x40
 800d678:	d005      	beq.n	800d686 <USBD_StdItfReq+0x26>
 800d67a:	2b40      	cmp	r3, #64	; 0x40
 800d67c:	d82f      	bhi.n	800d6de <USBD_StdItfReq+0x7e>
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d001      	beq.n	800d686 <USBD_StdItfReq+0x26>
 800d682:	2b20      	cmp	r3, #32
 800d684:	d12b      	bne.n	800d6de <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	3b01      	subs	r3, #1
 800d690:	2b02      	cmp	r3, #2
 800d692:	d81d      	bhi.n	800d6d0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	889b      	ldrh	r3, [r3, #4]
 800d698:	b2db      	uxtb	r3, r3
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d813      	bhi.n	800d6c6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6a4:	689b      	ldr	r3, [r3, #8]
 800d6a6:	6839      	ldr	r1, [r7, #0]
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	4798      	blx	r3
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	88db      	ldrh	r3, [r3, #6]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d110      	bne.n	800d6da <USBD_StdItfReq+0x7a>
 800d6b8:	7bfb      	ldrb	r3, [r7, #15]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d10d      	bne.n	800d6da <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 fd73 	bl	800e1aa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d6c4:	e009      	b.n	800d6da <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d6c6:	6839      	ldr	r1, [r7, #0]
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f000 fca3 	bl	800e014 <USBD_CtlError>
          break;
 800d6ce:	e004      	b.n	800d6da <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d6d0:	6839      	ldr	r1, [r7, #0]
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 fc9e 	bl	800e014 <USBD_CtlError>
          break;
 800d6d8:	e000      	b.n	800d6dc <USBD_StdItfReq+0x7c>
          break;
 800d6da:	bf00      	nop
      }
      break;
 800d6dc:	e004      	b.n	800d6e8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d6de:	6839      	ldr	r1, [r7, #0]
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f000 fc97 	bl	800e014 <USBD_CtlError>
      break;
 800d6e6:	bf00      	nop
  }

  return ret;
 800d6e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3710      	adds	r7, #16
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}

0800d6f2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6f2:	b580      	push	{r7, lr}
 800d6f4:	b084      	sub	sp, #16
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	6078      	str	r0, [r7, #4]
 800d6fa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	889b      	ldrh	r3, [r3, #4]
 800d704:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d70e:	2b40      	cmp	r3, #64	; 0x40
 800d710:	d007      	beq.n	800d722 <USBD_StdEPReq+0x30>
 800d712:	2b40      	cmp	r3, #64	; 0x40
 800d714:	f200 8145 	bhi.w	800d9a2 <USBD_StdEPReq+0x2b0>
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d00c      	beq.n	800d736 <USBD_StdEPReq+0x44>
 800d71c:	2b20      	cmp	r3, #32
 800d71e:	f040 8140 	bne.w	800d9a2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d728:	689b      	ldr	r3, [r3, #8]
 800d72a:	6839      	ldr	r1, [r7, #0]
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	4798      	blx	r3
 800d730:	4603      	mov	r3, r0
 800d732:	73fb      	strb	r3, [r7, #15]
      break;
 800d734:	e13a      	b.n	800d9ac <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	785b      	ldrb	r3, [r3, #1]
 800d73a:	2b03      	cmp	r3, #3
 800d73c:	d007      	beq.n	800d74e <USBD_StdEPReq+0x5c>
 800d73e:	2b03      	cmp	r3, #3
 800d740:	f300 8129 	bgt.w	800d996 <USBD_StdEPReq+0x2a4>
 800d744:	2b00      	cmp	r3, #0
 800d746:	d07f      	beq.n	800d848 <USBD_StdEPReq+0x156>
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d03c      	beq.n	800d7c6 <USBD_StdEPReq+0xd4>
 800d74c:	e123      	b.n	800d996 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d754:	b2db      	uxtb	r3, r3
 800d756:	2b02      	cmp	r3, #2
 800d758:	d002      	beq.n	800d760 <USBD_StdEPReq+0x6e>
 800d75a:	2b03      	cmp	r3, #3
 800d75c:	d016      	beq.n	800d78c <USBD_StdEPReq+0x9a>
 800d75e:	e02c      	b.n	800d7ba <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d760:	7bbb      	ldrb	r3, [r7, #14]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d00d      	beq.n	800d782 <USBD_StdEPReq+0x90>
 800d766:	7bbb      	ldrb	r3, [r7, #14]
 800d768:	2b80      	cmp	r3, #128	; 0x80
 800d76a:	d00a      	beq.n	800d782 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d76c:	7bbb      	ldrb	r3, [r7, #14]
 800d76e:	4619      	mov	r1, r3
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f001 f93b 	bl	800e9ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d776:	2180      	movs	r1, #128	; 0x80
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f001 f937 	bl	800e9ec <USBD_LL_StallEP>
 800d77e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d780:	e020      	b.n	800d7c4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d782:	6839      	ldr	r1, [r7, #0]
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 fc45 	bl	800e014 <USBD_CtlError>
              break;
 800d78a:	e01b      	b.n	800d7c4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	885b      	ldrh	r3, [r3, #2]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d10e      	bne.n	800d7b2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d794:	7bbb      	ldrb	r3, [r7, #14]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d00b      	beq.n	800d7b2 <USBD_StdEPReq+0xc0>
 800d79a:	7bbb      	ldrb	r3, [r7, #14]
 800d79c:	2b80      	cmp	r3, #128	; 0x80
 800d79e:	d008      	beq.n	800d7b2 <USBD_StdEPReq+0xc0>
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	88db      	ldrh	r3, [r3, #6]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d104      	bne.n	800d7b2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d7a8:	7bbb      	ldrb	r3, [r7, #14]
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f001 f91d 	bl	800e9ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f000 fcf9 	bl	800e1aa <USBD_CtlSendStatus>

              break;
 800d7b8:	e004      	b.n	800d7c4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d7ba:	6839      	ldr	r1, [r7, #0]
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f000 fc29 	bl	800e014 <USBD_CtlError>
              break;
 800d7c2:	bf00      	nop
          }
          break;
 800d7c4:	e0ec      	b.n	800d9a0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7cc:	b2db      	uxtb	r3, r3
 800d7ce:	2b02      	cmp	r3, #2
 800d7d0:	d002      	beq.n	800d7d8 <USBD_StdEPReq+0xe6>
 800d7d2:	2b03      	cmp	r3, #3
 800d7d4:	d016      	beq.n	800d804 <USBD_StdEPReq+0x112>
 800d7d6:	e030      	b.n	800d83a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d7d8:	7bbb      	ldrb	r3, [r7, #14]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d00d      	beq.n	800d7fa <USBD_StdEPReq+0x108>
 800d7de:	7bbb      	ldrb	r3, [r7, #14]
 800d7e0:	2b80      	cmp	r3, #128	; 0x80
 800d7e2:	d00a      	beq.n	800d7fa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d7e4:	7bbb      	ldrb	r3, [r7, #14]
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f001 f8ff 	bl	800e9ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d7ee:	2180      	movs	r1, #128	; 0x80
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f001 f8fb 	bl	800e9ec <USBD_LL_StallEP>
 800d7f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d7f8:	e025      	b.n	800d846 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d7fa:	6839      	ldr	r1, [r7, #0]
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f000 fc09 	bl	800e014 <USBD_CtlError>
              break;
 800d802:	e020      	b.n	800d846 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	885b      	ldrh	r3, [r3, #2]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d11b      	bne.n	800d844 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d80c:	7bbb      	ldrb	r3, [r7, #14]
 800d80e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d812:	2b00      	cmp	r3, #0
 800d814:	d004      	beq.n	800d820 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d816:	7bbb      	ldrb	r3, [r7, #14]
 800d818:	4619      	mov	r1, r3
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f001 f91c 	bl	800ea58 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f000 fcc2 	bl	800e1aa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d82c:	689b      	ldr	r3, [r3, #8]
 800d82e:	6839      	ldr	r1, [r7, #0]
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	4798      	blx	r3
 800d834:	4603      	mov	r3, r0
 800d836:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d838:	e004      	b.n	800d844 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d83a:	6839      	ldr	r1, [r7, #0]
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f000 fbe9 	bl	800e014 <USBD_CtlError>
              break;
 800d842:	e000      	b.n	800d846 <USBD_StdEPReq+0x154>
              break;
 800d844:	bf00      	nop
          }
          break;
 800d846:	e0ab      	b.n	800d9a0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	2b02      	cmp	r3, #2
 800d852:	d002      	beq.n	800d85a <USBD_StdEPReq+0x168>
 800d854:	2b03      	cmp	r3, #3
 800d856:	d032      	beq.n	800d8be <USBD_StdEPReq+0x1cc>
 800d858:	e097      	b.n	800d98a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d85a:	7bbb      	ldrb	r3, [r7, #14]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d007      	beq.n	800d870 <USBD_StdEPReq+0x17e>
 800d860:	7bbb      	ldrb	r3, [r7, #14]
 800d862:	2b80      	cmp	r3, #128	; 0x80
 800d864:	d004      	beq.n	800d870 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d866:	6839      	ldr	r1, [r7, #0]
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f000 fbd3 	bl	800e014 <USBD_CtlError>
                break;
 800d86e:	e091      	b.n	800d994 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d874:	2b00      	cmp	r3, #0
 800d876:	da0b      	bge.n	800d890 <USBD_StdEPReq+0x19e>
 800d878:	7bbb      	ldrb	r3, [r7, #14]
 800d87a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d87e:	4613      	mov	r3, r2
 800d880:	009b      	lsls	r3, r3, #2
 800d882:	4413      	add	r3, r2
 800d884:	009b      	lsls	r3, r3, #2
 800d886:	3310      	adds	r3, #16
 800d888:	687a      	ldr	r2, [r7, #4]
 800d88a:	4413      	add	r3, r2
 800d88c:	3304      	adds	r3, #4
 800d88e:	e00b      	b.n	800d8a8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d890:	7bbb      	ldrb	r3, [r7, #14]
 800d892:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d896:	4613      	mov	r3, r2
 800d898:	009b      	lsls	r3, r3, #2
 800d89a:	4413      	add	r3, r2
 800d89c:	009b      	lsls	r3, r3, #2
 800d89e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d8a2:	687a      	ldr	r2, [r7, #4]
 800d8a4:	4413      	add	r3, r2
 800d8a6:	3304      	adds	r3, #4
 800d8a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	2202      	movs	r2, #2
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f000 fc1d 	bl	800e0f6 <USBD_CtlSendData>
              break;
 800d8bc:	e06a      	b.n	800d994 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d8be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	da11      	bge.n	800d8ea <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d8c6:	7bbb      	ldrb	r3, [r7, #14]
 800d8c8:	f003 020f 	and.w	r2, r3, #15
 800d8cc:	6879      	ldr	r1, [r7, #4]
 800d8ce:	4613      	mov	r3, r2
 800d8d0:	009b      	lsls	r3, r3, #2
 800d8d2:	4413      	add	r3, r2
 800d8d4:	009b      	lsls	r3, r3, #2
 800d8d6:	440b      	add	r3, r1
 800d8d8:	3324      	adds	r3, #36	; 0x24
 800d8da:	881b      	ldrh	r3, [r3, #0]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d117      	bne.n	800d910 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d8e0:	6839      	ldr	r1, [r7, #0]
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f000 fb96 	bl	800e014 <USBD_CtlError>
                  break;
 800d8e8:	e054      	b.n	800d994 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d8ea:	7bbb      	ldrb	r3, [r7, #14]
 800d8ec:	f003 020f 	and.w	r2, r3, #15
 800d8f0:	6879      	ldr	r1, [r7, #4]
 800d8f2:	4613      	mov	r3, r2
 800d8f4:	009b      	lsls	r3, r3, #2
 800d8f6:	4413      	add	r3, r2
 800d8f8:	009b      	lsls	r3, r3, #2
 800d8fa:	440b      	add	r3, r1
 800d8fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d900:	881b      	ldrh	r3, [r3, #0]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d104      	bne.n	800d910 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d906:	6839      	ldr	r1, [r7, #0]
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f000 fb83 	bl	800e014 <USBD_CtlError>
                  break;
 800d90e:	e041      	b.n	800d994 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d910:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d914:	2b00      	cmp	r3, #0
 800d916:	da0b      	bge.n	800d930 <USBD_StdEPReq+0x23e>
 800d918:	7bbb      	ldrb	r3, [r7, #14]
 800d91a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d91e:	4613      	mov	r3, r2
 800d920:	009b      	lsls	r3, r3, #2
 800d922:	4413      	add	r3, r2
 800d924:	009b      	lsls	r3, r3, #2
 800d926:	3310      	adds	r3, #16
 800d928:	687a      	ldr	r2, [r7, #4]
 800d92a:	4413      	add	r3, r2
 800d92c:	3304      	adds	r3, #4
 800d92e:	e00b      	b.n	800d948 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d930:	7bbb      	ldrb	r3, [r7, #14]
 800d932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d936:	4613      	mov	r3, r2
 800d938:	009b      	lsls	r3, r3, #2
 800d93a:	4413      	add	r3, r2
 800d93c:	009b      	lsls	r3, r3, #2
 800d93e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d942:	687a      	ldr	r2, [r7, #4]
 800d944:	4413      	add	r3, r2
 800d946:	3304      	adds	r3, #4
 800d948:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d94a:	7bbb      	ldrb	r3, [r7, #14]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d002      	beq.n	800d956 <USBD_StdEPReq+0x264>
 800d950:	7bbb      	ldrb	r3, [r7, #14]
 800d952:	2b80      	cmp	r3, #128	; 0x80
 800d954:	d103      	bne.n	800d95e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	2200      	movs	r2, #0
 800d95a:	601a      	str	r2, [r3, #0]
 800d95c:	e00e      	b.n	800d97c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d95e:	7bbb      	ldrb	r3, [r7, #14]
 800d960:	4619      	mov	r1, r3
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f001 f8ae 	bl	800eac4 <USBD_LL_IsStallEP>
 800d968:	4603      	mov	r3, r0
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d003      	beq.n	800d976 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	2201      	movs	r2, #1
 800d972:	601a      	str	r2, [r3, #0]
 800d974:	e002      	b.n	800d97c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	2200      	movs	r2, #0
 800d97a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	2202      	movs	r2, #2
 800d980:	4619      	mov	r1, r3
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f000 fbb7 	bl	800e0f6 <USBD_CtlSendData>
              break;
 800d988:	e004      	b.n	800d994 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d98a:	6839      	ldr	r1, [r7, #0]
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f000 fb41 	bl	800e014 <USBD_CtlError>
              break;
 800d992:	bf00      	nop
          }
          break;
 800d994:	e004      	b.n	800d9a0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d996:	6839      	ldr	r1, [r7, #0]
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f000 fb3b 	bl	800e014 <USBD_CtlError>
          break;
 800d99e:	bf00      	nop
      }
      break;
 800d9a0:	e004      	b.n	800d9ac <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d9a2:	6839      	ldr	r1, [r7, #0]
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f000 fb35 	bl	800e014 <USBD_CtlError>
      break;
 800d9aa:	bf00      	nop
  }

  return ret;
 800d9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3710      	adds	r7, #16
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
	...

0800d9b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b084      	sub	sp, #16
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	885b      	ldrh	r3, [r3, #2]
 800d9d2:	0a1b      	lsrs	r3, r3, #8
 800d9d4:	b29b      	uxth	r3, r3
 800d9d6:	3b01      	subs	r3, #1
 800d9d8:	2b06      	cmp	r3, #6
 800d9da:	f200 8128 	bhi.w	800dc2e <USBD_GetDescriptor+0x276>
 800d9de:	a201      	add	r2, pc, #4	; (adr r2, 800d9e4 <USBD_GetDescriptor+0x2c>)
 800d9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9e4:	0800da01 	.word	0x0800da01
 800d9e8:	0800da19 	.word	0x0800da19
 800d9ec:	0800da59 	.word	0x0800da59
 800d9f0:	0800dc2f 	.word	0x0800dc2f
 800d9f4:	0800dc2f 	.word	0x0800dc2f
 800d9f8:	0800dbcf 	.word	0x0800dbcf
 800d9fc:	0800dbfb 	.word	0x0800dbfb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	687a      	ldr	r2, [r7, #4]
 800da0a:	7c12      	ldrb	r2, [r2, #16]
 800da0c:	f107 0108 	add.w	r1, r7, #8
 800da10:	4610      	mov	r0, r2
 800da12:	4798      	blx	r3
 800da14:	60f8      	str	r0, [r7, #12]
      break;
 800da16:	e112      	b.n	800dc3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	7c1b      	ldrb	r3, [r3, #16]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d10d      	bne.n	800da3c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da28:	f107 0208 	add.w	r2, r7, #8
 800da2c:	4610      	mov	r0, r2
 800da2e:	4798      	blx	r3
 800da30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	3301      	adds	r3, #1
 800da36:	2202      	movs	r2, #2
 800da38:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800da3a:	e100      	b.n	800dc3e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da44:	f107 0208 	add.w	r2, r7, #8
 800da48:	4610      	mov	r0, r2
 800da4a:	4798      	blx	r3
 800da4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	3301      	adds	r3, #1
 800da52:	2202      	movs	r2, #2
 800da54:	701a      	strb	r2, [r3, #0]
      break;
 800da56:	e0f2      	b.n	800dc3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	885b      	ldrh	r3, [r3, #2]
 800da5c:	b2db      	uxtb	r3, r3
 800da5e:	2b05      	cmp	r3, #5
 800da60:	f200 80ac 	bhi.w	800dbbc <USBD_GetDescriptor+0x204>
 800da64:	a201      	add	r2, pc, #4	; (adr r2, 800da6c <USBD_GetDescriptor+0xb4>)
 800da66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da6a:	bf00      	nop
 800da6c:	0800da85 	.word	0x0800da85
 800da70:	0800dab9 	.word	0x0800dab9
 800da74:	0800daed 	.word	0x0800daed
 800da78:	0800db21 	.word	0x0800db21
 800da7c:	0800db55 	.word	0x0800db55
 800da80:	0800db89 	.word	0x0800db89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d00b      	beq.n	800daa8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da96:	685b      	ldr	r3, [r3, #4]
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	7c12      	ldrb	r2, [r2, #16]
 800da9c:	f107 0108 	add.w	r1, r7, #8
 800daa0:	4610      	mov	r0, r2
 800daa2:	4798      	blx	r3
 800daa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800daa6:	e091      	b.n	800dbcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800daa8:	6839      	ldr	r1, [r7, #0]
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f000 fab2 	bl	800e014 <USBD_CtlError>
            err++;
 800dab0:	7afb      	ldrb	r3, [r7, #11]
 800dab2:	3301      	adds	r3, #1
 800dab4:	72fb      	strb	r3, [r7, #11]
          break;
 800dab6:	e089      	b.n	800dbcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dabe:	689b      	ldr	r3, [r3, #8]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d00b      	beq.n	800dadc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800daca:	689b      	ldr	r3, [r3, #8]
 800dacc:	687a      	ldr	r2, [r7, #4]
 800dace:	7c12      	ldrb	r2, [r2, #16]
 800dad0:	f107 0108 	add.w	r1, r7, #8
 800dad4:	4610      	mov	r0, r2
 800dad6:	4798      	blx	r3
 800dad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dada:	e077      	b.n	800dbcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dadc:	6839      	ldr	r1, [r7, #0]
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f000 fa98 	bl	800e014 <USBD_CtlError>
            err++;
 800dae4:	7afb      	ldrb	r3, [r7, #11]
 800dae6:	3301      	adds	r3, #1
 800dae8:	72fb      	strb	r3, [r7, #11]
          break;
 800daea:	e06f      	b.n	800dbcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800daf2:	68db      	ldr	r3, [r3, #12]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d00b      	beq.n	800db10 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	687a      	ldr	r2, [r7, #4]
 800db02:	7c12      	ldrb	r2, [r2, #16]
 800db04:	f107 0108 	add.w	r1, r7, #8
 800db08:	4610      	mov	r0, r2
 800db0a:	4798      	blx	r3
 800db0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db0e:	e05d      	b.n	800dbcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800db10:	6839      	ldr	r1, [r7, #0]
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f000 fa7e 	bl	800e014 <USBD_CtlError>
            err++;
 800db18:	7afb      	ldrb	r3, [r7, #11]
 800db1a:	3301      	adds	r3, #1
 800db1c:	72fb      	strb	r3, [r7, #11]
          break;
 800db1e:	e055      	b.n	800dbcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db26:	691b      	ldr	r3, [r3, #16]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d00b      	beq.n	800db44 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db32:	691b      	ldr	r3, [r3, #16]
 800db34:	687a      	ldr	r2, [r7, #4]
 800db36:	7c12      	ldrb	r2, [r2, #16]
 800db38:	f107 0108 	add.w	r1, r7, #8
 800db3c:	4610      	mov	r0, r2
 800db3e:	4798      	blx	r3
 800db40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db42:	e043      	b.n	800dbcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800db44:	6839      	ldr	r1, [r7, #0]
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f000 fa64 	bl	800e014 <USBD_CtlError>
            err++;
 800db4c:	7afb      	ldrb	r3, [r7, #11]
 800db4e:	3301      	adds	r3, #1
 800db50:	72fb      	strb	r3, [r7, #11]
          break;
 800db52:	e03b      	b.n	800dbcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db5a:	695b      	ldr	r3, [r3, #20]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d00b      	beq.n	800db78 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db66:	695b      	ldr	r3, [r3, #20]
 800db68:	687a      	ldr	r2, [r7, #4]
 800db6a:	7c12      	ldrb	r2, [r2, #16]
 800db6c:	f107 0108 	add.w	r1, r7, #8
 800db70:	4610      	mov	r0, r2
 800db72:	4798      	blx	r3
 800db74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db76:	e029      	b.n	800dbcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800db78:	6839      	ldr	r1, [r7, #0]
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 fa4a 	bl	800e014 <USBD_CtlError>
            err++;
 800db80:	7afb      	ldrb	r3, [r7, #11]
 800db82:	3301      	adds	r3, #1
 800db84:	72fb      	strb	r3, [r7, #11]
          break;
 800db86:	e021      	b.n	800dbcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db8e:	699b      	ldr	r3, [r3, #24]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d00b      	beq.n	800dbac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db9a:	699b      	ldr	r3, [r3, #24]
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	7c12      	ldrb	r2, [r2, #16]
 800dba0:	f107 0108 	add.w	r1, r7, #8
 800dba4:	4610      	mov	r0, r2
 800dba6:	4798      	blx	r3
 800dba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbaa:	e00f      	b.n	800dbcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dbac:	6839      	ldr	r1, [r7, #0]
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f000 fa30 	bl	800e014 <USBD_CtlError>
            err++;
 800dbb4:	7afb      	ldrb	r3, [r7, #11]
 800dbb6:	3301      	adds	r3, #1
 800dbb8:	72fb      	strb	r3, [r7, #11]
          break;
 800dbba:	e007      	b.n	800dbcc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dbbc:	6839      	ldr	r1, [r7, #0]
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f000 fa28 	bl	800e014 <USBD_CtlError>
          err++;
 800dbc4:	7afb      	ldrb	r3, [r7, #11]
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800dbca:	bf00      	nop
      }
      break;
 800dbcc:	e037      	b.n	800dc3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	7c1b      	ldrb	r3, [r3, #16]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d109      	bne.n	800dbea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbde:	f107 0208 	add.w	r2, r7, #8
 800dbe2:	4610      	mov	r0, r2
 800dbe4:	4798      	blx	r3
 800dbe6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dbe8:	e029      	b.n	800dc3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800dbea:	6839      	ldr	r1, [r7, #0]
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f000 fa11 	bl	800e014 <USBD_CtlError>
        err++;
 800dbf2:	7afb      	ldrb	r3, [r7, #11]
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	72fb      	strb	r3, [r7, #11]
      break;
 800dbf8:	e021      	b.n	800dc3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	7c1b      	ldrb	r3, [r3, #16]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d10d      	bne.n	800dc1e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc0a:	f107 0208 	add.w	r2, r7, #8
 800dc0e:	4610      	mov	r0, r2
 800dc10:	4798      	blx	r3
 800dc12:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	3301      	adds	r3, #1
 800dc18:	2207      	movs	r2, #7
 800dc1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dc1c:	e00f      	b.n	800dc3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800dc1e:	6839      	ldr	r1, [r7, #0]
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f000 f9f7 	bl	800e014 <USBD_CtlError>
        err++;
 800dc26:	7afb      	ldrb	r3, [r7, #11]
 800dc28:	3301      	adds	r3, #1
 800dc2a:	72fb      	strb	r3, [r7, #11]
      break;
 800dc2c:	e007      	b.n	800dc3e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800dc2e:	6839      	ldr	r1, [r7, #0]
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f000 f9ef 	bl	800e014 <USBD_CtlError>
      err++;
 800dc36:	7afb      	ldrb	r3, [r7, #11]
 800dc38:	3301      	adds	r3, #1
 800dc3a:	72fb      	strb	r3, [r7, #11]
      break;
 800dc3c:	bf00      	nop
  }

  if (err != 0U)
 800dc3e:	7afb      	ldrb	r3, [r7, #11]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d11e      	bne.n	800dc82 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	88db      	ldrh	r3, [r3, #6]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d016      	beq.n	800dc7a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800dc4c:	893b      	ldrh	r3, [r7, #8]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00e      	beq.n	800dc70 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	88da      	ldrh	r2, [r3, #6]
 800dc56:	893b      	ldrh	r3, [r7, #8]
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	bf28      	it	cs
 800dc5c:	4613      	movcs	r3, r2
 800dc5e:	b29b      	uxth	r3, r3
 800dc60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dc62:	893b      	ldrh	r3, [r7, #8]
 800dc64:	461a      	mov	r2, r3
 800dc66:	68f9      	ldr	r1, [r7, #12]
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f000 fa44 	bl	800e0f6 <USBD_CtlSendData>
 800dc6e:	e009      	b.n	800dc84 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dc70:	6839      	ldr	r1, [r7, #0]
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f000 f9ce 	bl	800e014 <USBD_CtlError>
 800dc78:	e004      	b.n	800dc84 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 fa95 	bl	800e1aa <USBD_CtlSendStatus>
 800dc80:	e000      	b.n	800dc84 <USBD_GetDescriptor+0x2cc>
    return;
 800dc82:	bf00      	nop
  }
}
 800dc84:	3710      	adds	r7, #16
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop

0800dc8c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	889b      	ldrh	r3, [r3, #4]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d131      	bne.n	800dd02 <USBD_SetAddress+0x76>
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	88db      	ldrh	r3, [r3, #6]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d12d      	bne.n	800dd02 <USBD_SetAddress+0x76>
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	885b      	ldrh	r3, [r3, #2]
 800dcaa:	2b7f      	cmp	r3, #127	; 0x7f
 800dcac:	d829      	bhi.n	800dd02 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	885b      	ldrh	r3, [r3, #2]
 800dcb2:	b2db      	uxtb	r3, r3
 800dcb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcb8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcc0:	b2db      	uxtb	r3, r3
 800dcc2:	2b03      	cmp	r3, #3
 800dcc4:	d104      	bne.n	800dcd0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800dcc6:	6839      	ldr	r1, [r7, #0]
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f000 f9a3 	bl	800e014 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcce:	e01d      	b.n	800dd0c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	7bfa      	ldrb	r2, [r7, #15]
 800dcd4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dcd8:	7bfb      	ldrb	r3, [r7, #15]
 800dcda:	4619      	mov	r1, r3
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f000 ff1f 	bl	800eb20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f000 fa61 	bl	800e1aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dce8:	7bfb      	ldrb	r3, [r7, #15]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d004      	beq.n	800dcf8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2202      	movs	r2, #2
 800dcf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcf6:	e009      	b.n	800dd0c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd00:	e004      	b.n	800dd0c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dd02:	6839      	ldr	r1, [r7, #0]
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f000 f985 	bl	800e014 <USBD_CtlError>
  }
}
 800dd0a:	bf00      	nop
 800dd0c:	bf00      	nop
 800dd0e:	3710      	adds	r7, #16
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	885b      	ldrh	r3, [r3, #2]
 800dd26:	b2da      	uxtb	r2, r3
 800dd28:	4b4c      	ldr	r3, [pc, #304]	; (800de5c <USBD_SetConfig+0x148>)
 800dd2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dd2c:	4b4b      	ldr	r3, [pc, #300]	; (800de5c <USBD_SetConfig+0x148>)
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	2b01      	cmp	r3, #1
 800dd32:	d905      	bls.n	800dd40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dd34:	6839      	ldr	r1, [r7, #0]
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f000 f96c 	bl	800e014 <USBD_CtlError>
    return USBD_FAIL;
 800dd3c:	2303      	movs	r3, #3
 800dd3e:	e088      	b.n	800de52 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	2b02      	cmp	r3, #2
 800dd4a:	d002      	beq.n	800dd52 <USBD_SetConfig+0x3e>
 800dd4c:	2b03      	cmp	r3, #3
 800dd4e:	d025      	beq.n	800dd9c <USBD_SetConfig+0x88>
 800dd50:	e071      	b.n	800de36 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800dd52:	4b42      	ldr	r3, [pc, #264]	; (800de5c <USBD_SetConfig+0x148>)
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d01c      	beq.n	800dd94 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800dd5a:	4b40      	ldr	r3, [pc, #256]	; (800de5c <USBD_SetConfig+0x148>)
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	461a      	mov	r2, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dd64:	4b3d      	ldr	r3, [pc, #244]	; (800de5c <USBD_SetConfig+0x148>)
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	4619      	mov	r1, r3
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f7ff f9bc 	bl	800d0e8 <USBD_SetClassConfig>
 800dd70:	4603      	mov	r3, r0
 800dd72:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dd74:	7bfb      	ldrb	r3, [r7, #15]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d004      	beq.n	800dd84 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800dd7a:	6839      	ldr	r1, [r7, #0]
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f000 f949 	bl	800e014 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dd82:	e065      	b.n	800de50 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f000 fa10 	bl	800e1aa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2203      	movs	r2, #3
 800dd8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dd92:	e05d      	b.n	800de50 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f000 fa08 	bl	800e1aa <USBD_CtlSendStatus>
      break;
 800dd9a:	e059      	b.n	800de50 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dd9c:	4b2f      	ldr	r3, [pc, #188]	; (800de5c <USBD_SetConfig+0x148>)
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d112      	bne.n	800ddca <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2202      	movs	r2, #2
 800dda8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ddac:	4b2b      	ldr	r3, [pc, #172]	; (800de5c <USBD_SetConfig+0x148>)
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ddb6:	4b29      	ldr	r3, [pc, #164]	; (800de5c <USBD_SetConfig+0x148>)
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	4619      	mov	r1, r3
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f7ff f9af 	bl	800d120 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f000 f9f1 	bl	800e1aa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ddc8:	e042      	b.n	800de50 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ddca:	4b24      	ldr	r3, [pc, #144]	; (800de5c <USBD_SetConfig+0x148>)
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	461a      	mov	r2, r3
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	685b      	ldr	r3, [r3, #4]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d02a      	beq.n	800de2e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	685b      	ldr	r3, [r3, #4]
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	4619      	mov	r1, r3
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f7ff f99d 	bl	800d120 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dde6:	4b1d      	ldr	r3, [pc, #116]	; (800de5c <USBD_SetConfig+0x148>)
 800dde8:	781b      	ldrb	r3, [r3, #0]
 800ddea:	461a      	mov	r2, r3
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ddf0:	4b1a      	ldr	r3, [pc, #104]	; (800de5c <USBD_SetConfig+0x148>)
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	4619      	mov	r1, r3
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f7ff f976 	bl	800d0e8 <USBD_SetClassConfig>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800de00:	7bfb      	ldrb	r3, [r7, #15]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d00f      	beq.n	800de26 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800de06:	6839      	ldr	r1, [r7, #0]
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f000 f903 	bl	800e014 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	685b      	ldr	r3, [r3, #4]
 800de12:	b2db      	uxtb	r3, r3
 800de14:	4619      	mov	r1, r3
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f7ff f982 	bl	800d120 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2202      	movs	r2, #2
 800de20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800de24:	e014      	b.n	800de50 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f000 f9bf 	bl	800e1aa <USBD_CtlSendStatus>
      break;
 800de2c:	e010      	b.n	800de50 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f000 f9bb 	bl	800e1aa <USBD_CtlSendStatus>
      break;
 800de34:	e00c      	b.n	800de50 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800de36:	6839      	ldr	r1, [r7, #0]
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 f8eb 	bl	800e014 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800de3e:	4b07      	ldr	r3, [pc, #28]	; (800de5c <USBD_SetConfig+0x148>)
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	4619      	mov	r1, r3
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f7ff f96b 	bl	800d120 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800de4a:	2303      	movs	r3, #3
 800de4c:	73fb      	strb	r3, [r7, #15]
      break;
 800de4e:	bf00      	nop
  }

  return ret;
 800de50:	7bfb      	ldrb	r3, [r7, #15]
}
 800de52:	4618      	mov	r0, r3
 800de54:	3710      	adds	r7, #16
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	200005c4 	.word	0x200005c4

0800de60 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b082      	sub	sp, #8
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	88db      	ldrh	r3, [r3, #6]
 800de6e:	2b01      	cmp	r3, #1
 800de70:	d004      	beq.n	800de7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800de72:	6839      	ldr	r1, [r7, #0]
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f000 f8cd 	bl	800e014 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800de7a:	e023      	b.n	800dec4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de82:	b2db      	uxtb	r3, r3
 800de84:	2b02      	cmp	r3, #2
 800de86:	dc02      	bgt.n	800de8e <USBD_GetConfig+0x2e>
 800de88:	2b00      	cmp	r3, #0
 800de8a:	dc03      	bgt.n	800de94 <USBD_GetConfig+0x34>
 800de8c:	e015      	b.n	800deba <USBD_GetConfig+0x5a>
 800de8e:	2b03      	cmp	r3, #3
 800de90:	d00b      	beq.n	800deaa <USBD_GetConfig+0x4a>
 800de92:	e012      	b.n	800deba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2200      	movs	r2, #0
 800de98:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	3308      	adds	r3, #8
 800de9e:	2201      	movs	r2, #1
 800dea0:	4619      	mov	r1, r3
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f000 f927 	bl	800e0f6 <USBD_CtlSendData>
        break;
 800dea8:	e00c      	b.n	800dec4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	3304      	adds	r3, #4
 800deae:	2201      	movs	r2, #1
 800deb0:	4619      	mov	r1, r3
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f000 f91f 	bl	800e0f6 <USBD_CtlSendData>
        break;
 800deb8:	e004      	b.n	800dec4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800deba:	6839      	ldr	r1, [r7, #0]
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f000 f8a9 	bl	800e014 <USBD_CtlError>
        break;
 800dec2:	bf00      	nop
}
 800dec4:	bf00      	nop
 800dec6:	3708      	adds	r7, #8
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	3b01      	subs	r3, #1
 800dee0:	2b02      	cmp	r3, #2
 800dee2:	d81e      	bhi.n	800df22 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	88db      	ldrh	r3, [r3, #6]
 800dee8:	2b02      	cmp	r3, #2
 800deea:	d004      	beq.n	800def6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800deec:	6839      	ldr	r1, [r7, #0]
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f000 f890 	bl	800e014 <USBD_CtlError>
        break;
 800def4:	e01a      	b.n	800df2c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2201      	movs	r2, #1
 800defa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800df02:	2b00      	cmp	r3, #0
 800df04:	d005      	beq.n	800df12 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	68db      	ldr	r3, [r3, #12]
 800df0a:	f043 0202 	orr.w	r2, r3, #2
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	330c      	adds	r3, #12
 800df16:	2202      	movs	r2, #2
 800df18:	4619      	mov	r1, r3
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f000 f8eb 	bl	800e0f6 <USBD_CtlSendData>
      break;
 800df20:	e004      	b.n	800df2c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800df22:	6839      	ldr	r1, [r7, #0]
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 f875 	bl	800e014 <USBD_CtlError>
      break;
 800df2a:	bf00      	nop
  }
}
 800df2c:	bf00      	nop
 800df2e:	3708      	adds	r7, #8
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b082      	sub	sp, #8
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	885b      	ldrh	r3, [r3, #2]
 800df42:	2b01      	cmp	r3, #1
 800df44:	d106      	bne.n	800df54 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2201      	movs	r2, #1
 800df4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f000 f92b 	bl	800e1aa <USBD_CtlSendStatus>
  }
}
 800df54:	bf00      	nop
 800df56:	3708      	adds	r7, #8
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}

0800df5c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b082      	sub	sp, #8
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df6c:	b2db      	uxtb	r3, r3
 800df6e:	3b01      	subs	r3, #1
 800df70:	2b02      	cmp	r3, #2
 800df72:	d80b      	bhi.n	800df8c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	885b      	ldrh	r3, [r3, #2]
 800df78:	2b01      	cmp	r3, #1
 800df7a:	d10c      	bne.n	800df96 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2200      	movs	r2, #0
 800df80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f000 f910 	bl	800e1aa <USBD_CtlSendStatus>
      }
      break;
 800df8a:	e004      	b.n	800df96 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800df8c:	6839      	ldr	r1, [r7, #0]
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f000 f840 	bl	800e014 <USBD_CtlError>
      break;
 800df94:	e000      	b.n	800df98 <USBD_ClrFeature+0x3c>
      break;
 800df96:	bf00      	nop
  }
}
 800df98:	bf00      	nop
 800df9a:	3708      	adds	r7, #8
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	781a      	ldrb	r2, [r3, #0]
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	3301      	adds	r3, #1
 800dfba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	781a      	ldrb	r2, [r3, #0]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dfca:	68f8      	ldr	r0, [r7, #12]
 800dfcc:	f7ff fabc 	bl	800d548 <SWAPBYTE>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	3301      	adds	r3, #1
 800dfdc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dfe4:	68f8      	ldr	r0, [r7, #12]
 800dfe6:	f7ff faaf 	bl	800d548 <SWAPBYTE>
 800dfea:	4603      	mov	r3, r0
 800dfec:	461a      	mov	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	3301      	adds	r3, #1
 800dff6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	3301      	adds	r3, #1
 800dffc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dffe:	68f8      	ldr	r0, [r7, #12]
 800e000:	f7ff faa2 	bl	800d548 <SWAPBYTE>
 800e004:	4603      	mov	r3, r0
 800e006:	461a      	mov	r2, r3
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	80da      	strh	r2, [r3, #6]
}
 800e00c:	bf00      	nop
 800e00e:	3710      	adds	r7, #16
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}

0800e014 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e01e:	2180      	movs	r1, #128	; 0x80
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f000 fce3 	bl	800e9ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e026:	2100      	movs	r1, #0
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f000 fcdf 	bl	800e9ec <USBD_LL_StallEP>
}
 800e02e:	bf00      	nop
 800e030:	3708      	adds	r7, #8
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}

0800e036 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e036:	b580      	push	{r7, lr}
 800e038:	b086      	sub	sp, #24
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	60f8      	str	r0, [r7, #12]
 800e03e:	60b9      	str	r1, [r7, #8]
 800e040:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e042:	2300      	movs	r3, #0
 800e044:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d036      	beq.n	800e0ba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e050:	6938      	ldr	r0, [r7, #16]
 800e052:	f000 f836 	bl	800e0c2 <USBD_GetLen>
 800e056:	4603      	mov	r3, r0
 800e058:	3301      	adds	r3, #1
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	005b      	lsls	r3, r3, #1
 800e05e:	b29a      	uxth	r2, r3
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e064:	7dfb      	ldrb	r3, [r7, #23]
 800e066:	68ba      	ldr	r2, [r7, #8]
 800e068:	4413      	add	r3, r2
 800e06a:	687a      	ldr	r2, [r7, #4]
 800e06c:	7812      	ldrb	r2, [r2, #0]
 800e06e:	701a      	strb	r2, [r3, #0]
  idx++;
 800e070:	7dfb      	ldrb	r3, [r7, #23]
 800e072:	3301      	adds	r3, #1
 800e074:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e076:	7dfb      	ldrb	r3, [r7, #23]
 800e078:	68ba      	ldr	r2, [r7, #8]
 800e07a:	4413      	add	r3, r2
 800e07c:	2203      	movs	r2, #3
 800e07e:	701a      	strb	r2, [r3, #0]
  idx++;
 800e080:	7dfb      	ldrb	r3, [r7, #23]
 800e082:	3301      	adds	r3, #1
 800e084:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e086:	e013      	b.n	800e0b0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e088:	7dfb      	ldrb	r3, [r7, #23]
 800e08a:	68ba      	ldr	r2, [r7, #8]
 800e08c:	4413      	add	r3, r2
 800e08e:	693a      	ldr	r2, [r7, #16]
 800e090:	7812      	ldrb	r2, [r2, #0]
 800e092:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	3301      	adds	r3, #1
 800e098:	613b      	str	r3, [r7, #16]
    idx++;
 800e09a:	7dfb      	ldrb	r3, [r7, #23]
 800e09c:	3301      	adds	r3, #1
 800e09e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e0a0:	7dfb      	ldrb	r3, [r7, #23]
 800e0a2:	68ba      	ldr	r2, [r7, #8]
 800e0a4:	4413      	add	r3, r2
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	701a      	strb	r2, [r3, #0]
    idx++;
 800e0aa:	7dfb      	ldrb	r3, [r7, #23]
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d1e7      	bne.n	800e088 <USBD_GetString+0x52>
 800e0b8:	e000      	b.n	800e0bc <USBD_GetString+0x86>
    return;
 800e0ba:	bf00      	nop
  }
}
 800e0bc:	3718      	adds	r7, #24
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}

0800e0c2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e0c2:	b480      	push	{r7}
 800e0c4:	b085      	sub	sp, #20
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e0d2:	e005      	b.n	800e0e0 <USBD_GetLen+0x1e>
  {
    len++;
 800e0d4:	7bfb      	ldrb	r3, [r7, #15]
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	3301      	adds	r3, #1
 800e0de:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	781b      	ldrb	r3, [r3, #0]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d1f5      	bne.n	800e0d4 <USBD_GetLen+0x12>
  }

  return len;
 800e0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3714      	adds	r7, #20
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr

0800e0f6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e0f6:	b580      	push	{r7, lr}
 800e0f8:	b084      	sub	sp, #16
 800e0fa:	af00      	add	r7, sp, #0
 800e0fc:	60f8      	str	r0, [r7, #12]
 800e0fe:	60b9      	str	r1, [r7, #8]
 800e100:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2202      	movs	r2, #2
 800e106:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	687a      	ldr	r2, [r7, #4]
 800e10e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	687a      	ldr	r2, [r7, #4]
 800e114:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	68ba      	ldr	r2, [r7, #8]
 800e11a:	2100      	movs	r1, #0
 800e11c:	68f8      	ldr	r0, [r7, #12]
 800e11e:	f000 fd35 	bl	800eb8c <USBD_LL_Transmit>

  return USBD_OK;
 800e122:	2300      	movs	r3, #0
}
 800e124:	4618      	mov	r0, r3
 800e126:	3710      	adds	r7, #16
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}

0800e12c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b084      	sub	sp, #16
 800e130:	af00      	add	r7, sp, #0
 800e132:	60f8      	str	r0, [r7, #12]
 800e134:	60b9      	str	r1, [r7, #8]
 800e136:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	68ba      	ldr	r2, [r7, #8]
 800e13c:	2100      	movs	r1, #0
 800e13e:	68f8      	ldr	r0, [r7, #12]
 800e140:	f000 fd24 	bl	800eb8c <USBD_LL_Transmit>

  return USBD_OK;
 800e144:	2300      	movs	r3, #0
}
 800e146:	4618      	mov	r0, r3
 800e148:	3710      	adds	r7, #16
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}

0800e14e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e14e:	b580      	push	{r7, lr}
 800e150:	b084      	sub	sp, #16
 800e152:	af00      	add	r7, sp, #0
 800e154:	60f8      	str	r0, [r7, #12]
 800e156:	60b9      	str	r1, [r7, #8]
 800e158:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2203      	movs	r2, #3
 800e15e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	687a      	ldr	r2, [r7, #4]
 800e166:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	687a      	ldr	r2, [r7, #4]
 800e16e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	68ba      	ldr	r2, [r7, #8]
 800e176:	2100      	movs	r1, #0
 800e178:	68f8      	ldr	r0, [r7, #12]
 800e17a:	f000 fd3f 	bl	800ebfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e17e:	2300      	movs	r3, #0
}
 800e180:	4618      	mov	r0, r3
 800e182:	3710      	adds	r7, #16
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b084      	sub	sp, #16
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	60f8      	str	r0, [r7, #12]
 800e190:	60b9      	str	r1, [r7, #8]
 800e192:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	68ba      	ldr	r2, [r7, #8]
 800e198:	2100      	movs	r1, #0
 800e19a:	68f8      	ldr	r0, [r7, #12]
 800e19c:	f000 fd2e 	bl	800ebfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e1a0:	2300      	movs	r3, #0
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3710      	adds	r7, #16
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}

0800e1aa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e1aa:	b580      	push	{r7, lr}
 800e1ac:	b082      	sub	sp, #8
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2204      	movs	r2, #4
 800e1b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	2200      	movs	r2, #0
 800e1be:	2100      	movs	r1, #0
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f000 fce3 	bl	800eb8c <USBD_LL_Transmit>

  return USBD_OK;
 800e1c6:	2300      	movs	r3, #0
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3708      	adds	r7, #8
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2205      	movs	r2, #5
 800e1dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	2100      	movs	r1, #0
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f000 fd08 	bl	800ebfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e1ec:	2300      	movs	r3, #0
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3708      	adds	r7, #8
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}
	...

0800e1f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	4912      	ldr	r1, [pc, #72]	; (800e248 <MX_USB_DEVICE_Init+0x50>)
 800e200:	4812      	ldr	r0, [pc, #72]	; (800e24c <MX_USB_DEVICE_Init+0x54>)
 800e202:	f7fe ff03 	bl	800d00c <USBD_Init>
 800e206:	4603      	mov	r3, r0
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d001      	beq.n	800e210 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e20c:	f7f5 fe60 	bl	8003ed0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e210:	490f      	ldr	r1, [pc, #60]	; (800e250 <MX_USB_DEVICE_Init+0x58>)
 800e212:	480e      	ldr	r0, [pc, #56]	; (800e24c <MX_USB_DEVICE_Init+0x54>)
 800e214:	f7fe ff2a 	bl	800d06c <USBD_RegisterClass>
 800e218:	4603      	mov	r3, r0
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d001      	beq.n	800e222 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e21e:	f7f5 fe57 	bl	8003ed0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e222:	490c      	ldr	r1, [pc, #48]	; (800e254 <MX_USB_DEVICE_Init+0x5c>)
 800e224:	4809      	ldr	r0, [pc, #36]	; (800e24c <MX_USB_DEVICE_Init+0x54>)
 800e226:	f7fe fe4b 	bl	800cec0 <USBD_CDC_RegisterInterface>
 800e22a:	4603      	mov	r3, r0
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d001      	beq.n	800e234 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e230:	f7f5 fe4e 	bl	8003ed0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e234:	4805      	ldr	r0, [pc, #20]	; (800e24c <MX_USB_DEVICE_Init+0x54>)
 800e236:	f7fe ff40 	bl	800d0ba <USBD_Start>
 800e23a:	4603      	mov	r3, r0
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d001      	beq.n	800e244 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e240:	f7f5 fe46 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e244:	bf00      	nop
 800e246:	bd80      	pop	{r7, pc}
 800e248:	20000150 	.word	0x20000150
 800e24c:	200005c8 	.word	0x200005c8
 800e250:	20000038 	.word	0x20000038
 800e254:	2000013c 	.word	0x2000013c

0800e258 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e25c:	2200      	movs	r2, #0
 800e25e:	4905      	ldr	r1, [pc, #20]	; (800e274 <CDC_Init_FS+0x1c>)
 800e260:	4805      	ldr	r0, [pc, #20]	; (800e278 <CDC_Init_FS+0x20>)
 800e262:	f7fe fe42 	bl	800ceea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e266:	4905      	ldr	r1, [pc, #20]	; (800e27c <CDC_Init_FS+0x24>)
 800e268:	4803      	ldr	r0, [pc, #12]	; (800e278 <CDC_Init_FS+0x20>)
 800e26a:	f7fe fe5c 	bl	800cf26 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e26e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e270:	4618      	mov	r0, r3
 800e272:	bd80      	pop	{r7, pc}
 800e274:	20000994 	.word	0x20000994
 800e278:	200005c8 	.word	0x200005c8
 800e27c:	20000898 	.word	0x20000898

0800e280 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e280:	b480      	push	{r7}
 800e282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e284:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e286:	4618      	mov	r0, r3
 800e288:	46bd      	mov	sp, r7
 800e28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28e:	4770      	bx	lr

0800e290 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e290:	b480      	push	{r7}
 800e292:	b083      	sub	sp, #12
 800e294:	af00      	add	r7, sp, #0
 800e296:	4603      	mov	r3, r0
 800e298:	6039      	str	r1, [r7, #0]
 800e29a:	71fb      	strb	r3, [r7, #7]
 800e29c:	4613      	mov	r3, r2
 800e29e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e2a0:	79fb      	ldrb	r3, [r7, #7]
 800e2a2:	2b23      	cmp	r3, #35	; 0x23
 800e2a4:	d84a      	bhi.n	800e33c <CDC_Control_FS+0xac>
 800e2a6:	a201      	add	r2, pc, #4	; (adr r2, 800e2ac <CDC_Control_FS+0x1c>)
 800e2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ac:	0800e33d 	.word	0x0800e33d
 800e2b0:	0800e33d 	.word	0x0800e33d
 800e2b4:	0800e33d 	.word	0x0800e33d
 800e2b8:	0800e33d 	.word	0x0800e33d
 800e2bc:	0800e33d 	.word	0x0800e33d
 800e2c0:	0800e33d 	.word	0x0800e33d
 800e2c4:	0800e33d 	.word	0x0800e33d
 800e2c8:	0800e33d 	.word	0x0800e33d
 800e2cc:	0800e33d 	.word	0x0800e33d
 800e2d0:	0800e33d 	.word	0x0800e33d
 800e2d4:	0800e33d 	.word	0x0800e33d
 800e2d8:	0800e33d 	.word	0x0800e33d
 800e2dc:	0800e33d 	.word	0x0800e33d
 800e2e0:	0800e33d 	.word	0x0800e33d
 800e2e4:	0800e33d 	.word	0x0800e33d
 800e2e8:	0800e33d 	.word	0x0800e33d
 800e2ec:	0800e33d 	.word	0x0800e33d
 800e2f0:	0800e33d 	.word	0x0800e33d
 800e2f4:	0800e33d 	.word	0x0800e33d
 800e2f8:	0800e33d 	.word	0x0800e33d
 800e2fc:	0800e33d 	.word	0x0800e33d
 800e300:	0800e33d 	.word	0x0800e33d
 800e304:	0800e33d 	.word	0x0800e33d
 800e308:	0800e33d 	.word	0x0800e33d
 800e30c:	0800e33d 	.word	0x0800e33d
 800e310:	0800e33d 	.word	0x0800e33d
 800e314:	0800e33d 	.word	0x0800e33d
 800e318:	0800e33d 	.word	0x0800e33d
 800e31c:	0800e33d 	.word	0x0800e33d
 800e320:	0800e33d 	.word	0x0800e33d
 800e324:	0800e33d 	.word	0x0800e33d
 800e328:	0800e33d 	.word	0x0800e33d
 800e32c:	0800e33d 	.word	0x0800e33d
 800e330:	0800e33d 	.word	0x0800e33d
 800e334:	0800e33d 	.word	0x0800e33d
 800e338:	0800e33d 	.word	0x0800e33d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e33c:	bf00      	nop
  }

  return (USBD_OK);
 800e33e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e340:	4618      	mov	r0, r3
 800e342:	370c      	adds	r7, #12
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr

0800e34c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b082      	sub	sp, #8
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
 800e354:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e356:	6879      	ldr	r1, [r7, #4]
 800e358:	4808      	ldr	r0, [pc, #32]	; (800e37c <CDC_Receive_FS+0x30>)
 800e35a:	f7fe fde4 	bl	800cf26 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e35e:	4807      	ldr	r0, [pc, #28]	; (800e37c <CDC_Receive_FS+0x30>)
 800e360:	f7fe fe2a 	bl	800cfb8 <USBD_CDC_ReceivePacket>
  USB_CDC_RX_Interrupt(Buf, *Len);
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4619      	mov	r1, r3
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f7f5 fd9a 	bl	8003ea4 <USB_CDC_RX_Interrupt>
  return (USBD_OK);
 800e370:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e372:	4618      	mov	r0, r3
 800e374:	3708      	adds	r7, #8
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}
 800e37a:	bf00      	nop
 800e37c:	200005c8 	.word	0x200005c8

0800e380 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	460b      	mov	r3, r1
 800e38a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e38c:	2300      	movs	r3, #0
 800e38e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e390:	4b0d      	ldr	r3, [pc, #52]	; (800e3c8 <CDC_Transmit_FS+0x48>)
 800e392:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e396:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d001      	beq.n	800e3a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	e00b      	b.n	800e3be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e3a6:	887b      	ldrh	r3, [r7, #2]
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	6879      	ldr	r1, [r7, #4]
 800e3ac:	4806      	ldr	r0, [pc, #24]	; (800e3c8 <CDC_Transmit_FS+0x48>)
 800e3ae:	f7fe fd9c 	bl	800ceea <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e3b2:	4805      	ldr	r0, [pc, #20]	; (800e3c8 <CDC_Transmit_FS+0x48>)
 800e3b4:	f7fe fdd0 	bl	800cf58 <USBD_CDC_TransmitPacket>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3710      	adds	r7, #16
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
 800e3c6:	bf00      	nop
 800e3c8:	200005c8 	.word	0x200005c8

0800e3cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e3cc:	b480      	push	{r7}
 800e3ce:	b087      	sub	sp, #28
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	60f8      	str	r0, [r7, #12]
 800e3d4:	60b9      	str	r1, [r7, #8]
 800e3d6:	4613      	mov	r3, r2
 800e3d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e3de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	371c      	adds	r7, #28
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ec:	4770      	bx	lr
	...

0800e3f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b083      	sub	sp, #12
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	6039      	str	r1, [r7, #0]
 800e3fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	2212      	movs	r2, #18
 800e400:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e402:	4b03      	ldr	r3, [pc, #12]	; (800e410 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e404:	4618      	mov	r0, r3
 800e406:	370c      	adds	r7, #12
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr
 800e410:	2000016c 	.word	0x2000016c

0800e414 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e414:	b480      	push	{r7}
 800e416:	b083      	sub	sp, #12
 800e418:	af00      	add	r7, sp, #0
 800e41a:	4603      	mov	r3, r0
 800e41c:	6039      	str	r1, [r7, #0]
 800e41e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	2204      	movs	r2, #4
 800e424:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e426:	4b03      	ldr	r3, [pc, #12]	; (800e434 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e428:	4618      	mov	r0, r3
 800e42a:	370c      	adds	r7, #12
 800e42c:	46bd      	mov	sp, r7
 800e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e432:	4770      	bx	lr
 800e434:	20000180 	.word	0x20000180

0800e438 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b082      	sub	sp, #8
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	4603      	mov	r3, r0
 800e440:	6039      	str	r1, [r7, #0]
 800e442:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e444:	79fb      	ldrb	r3, [r7, #7]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d105      	bne.n	800e456 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e44a:	683a      	ldr	r2, [r7, #0]
 800e44c:	4907      	ldr	r1, [pc, #28]	; (800e46c <USBD_FS_ProductStrDescriptor+0x34>)
 800e44e:	4808      	ldr	r0, [pc, #32]	; (800e470 <USBD_FS_ProductStrDescriptor+0x38>)
 800e450:	f7ff fdf1 	bl	800e036 <USBD_GetString>
 800e454:	e004      	b.n	800e460 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e456:	683a      	ldr	r2, [r7, #0]
 800e458:	4904      	ldr	r1, [pc, #16]	; (800e46c <USBD_FS_ProductStrDescriptor+0x34>)
 800e45a:	4805      	ldr	r0, [pc, #20]	; (800e470 <USBD_FS_ProductStrDescriptor+0x38>)
 800e45c:	f7ff fdeb 	bl	800e036 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e460:	4b02      	ldr	r3, [pc, #8]	; (800e46c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e462:	4618      	mov	r0, r3
 800e464:	3708      	adds	r7, #8
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop
 800e46c:	20000a90 	.word	0x20000a90
 800e470:	0800efc0 	.word	0x0800efc0

0800e474 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b082      	sub	sp, #8
 800e478:	af00      	add	r7, sp, #0
 800e47a:	4603      	mov	r3, r0
 800e47c:	6039      	str	r1, [r7, #0]
 800e47e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e480:	683a      	ldr	r2, [r7, #0]
 800e482:	4904      	ldr	r1, [pc, #16]	; (800e494 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e484:	4804      	ldr	r0, [pc, #16]	; (800e498 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e486:	f7ff fdd6 	bl	800e036 <USBD_GetString>
  return USBD_StrDesc;
 800e48a:	4b02      	ldr	r3, [pc, #8]	; (800e494 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3708      	adds	r7, #8
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}
 800e494:	20000a90 	.word	0x20000a90
 800e498:	0800efd8 	.word	0x0800efd8

0800e49c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b082      	sub	sp, #8
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	6039      	str	r1, [r7, #0]
 800e4a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	221a      	movs	r2, #26
 800e4ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e4ae:	f000 f843 	bl	800e538 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e4b2:	4b02      	ldr	r3, [pc, #8]	; (800e4bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3708      	adds	r7, #8
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}
 800e4bc:	20000184 	.word	0x20000184

0800e4c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	6039      	str	r1, [r7, #0]
 800e4ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e4cc:	79fb      	ldrb	r3, [r7, #7]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d105      	bne.n	800e4de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e4d2:	683a      	ldr	r2, [r7, #0]
 800e4d4:	4907      	ldr	r1, [pc, #28]	; (800e4f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e4d6:	4808      	ldr	r0, [pc, #32]	; (800e4f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e4d8:	f7ff fdad 	bl	800e036 <USBD_GetString>
 800e4dc:	e004      	b.n	800e4e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e4de:	683a      	ldr	r2, [r7, #0]
 800e4e0:	4904      	ldr	r1, [pc, #16]	; (800e4f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e4e2:	4805      	ldr	r0, [pc, #20]	; (800e4f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e4e4:	f7ff fda7 	bl	800e036 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e4e8:	4b02      	ldr	r3, [pc, #8]	; (800e4f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	3708      	adds	r7, #8
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}
 800e4f2:	bf00      	nop
 800e4f4:	20000a90 	.word	0x20000a90
 800e4f8:	0800efec 	.word	0x0800efec

0800e4fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b082      	sub	sp, #8
 800e500:	af00      	add	r7, sp, #0
 800e502:	4603      	mov	r3, r0
 800e504:	6039      	str	r1, [r7, #0]
 800e506:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e508:	79fb      	ldrb	r3, [r7, #7]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d105      	bne.n	800e51a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e50e:	683a      	ldr	r2, [r7, #0]
 800e510:	4907      	ldr	r1, [pc, #28]	; (800e530 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e512:	4808      	ldr	r0, [pc, #32]	; (800e534 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e514:	f7ff fd8f 	bl	800e036 <USBD_GetString>
 800e518:	e004      	b.n	800e524 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e51a:	683a      	ldr	r2, [r7, #0]
 800e51c:	4904      	ldr	r1, [pc, #16]	; (800e530 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e51e:	4805      	ldr	r0, [pc, #20]	; (800e534 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e520:	f7ff fd89 	bl	800e036 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e524:	4b02      	ldr	r3, [pc, #8]	; (800e530 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e526:	4618      	mov	r0, r3
 800e528:	3708      	adds	r7, #8
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	20000a90 	.word	0x20000a90
 800e534:	0800eff8 	.word	0x0800eff8

0800e538 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b084      	sub	sp, #16
 800e53c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e53e:	4b0f      	ldr	r3, [pc, #60]	; (800e57c <Get_SerialNum+0x44>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e544:	4b0e      	ldr	r3, [pc, #56]	; (800e580 <Get_SerialNum+0x48>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e54a:	4b0e      	ldr	r3, [pc, #56]	; (800e584 <Get_SerialNum+0x4c>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e550:	68fa      	ldr	r2, [r7, #12]
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	4413      	add	r3, r2
 800e556:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d009      	beq.n	800e572 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e55e:	2208      	movs	r2, #8
 800e560:	4909      	ldr	r1, [pc, #36]	; (800e588 <Get_SerialNum+0x50>)
 800e562:	68f8      	ldr	r0, [r7, #12]
 800e564:	f000 f814 	bl	800e590 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e568:	2204      	movs	r2, #4
 800e56a:	4908      	ldr	r1, [pc, #32]	; (800e58c <Get_SerialNum+0x54>)
 800e56c:	68b8      	ldr	r0, [r7, #8]
 800e56e:	f000 f80f 	bl	800e590 <IntToUnicode>
  }
}
 800e572:	bf00      	nop
 800e574:	3710      	adds	r7, #16
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	1fff7590 	.word	0x1fff7590
 800e580:	1fff7594 	.word	0x1fff7594
 800e584:	1fff7598 	.word	0x1fff7598
 800e588:	20000186 	.word	0x20000186
 800e58c:	20000196 	.word	0x20000196

0800e590 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e590:	b480      	push	{r7}
 800e592:	b087      	sub	sp, #28
 800e594:	af00      	add	r7, sp, #0
 800e596:	60f8      	str	r0, [r7, #12]
 800e598:	60b9      	str	r1, [r7, #8]
 800e59a:	4613      	mov	r3, r2
 800e59c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	75fb      	strb	r3, [r7, #23]
 800e5a6:	e027      	b.n	800e5f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	0f1b      	lsrs	r3, r3, #28
 800e5ac:	2b09      	cmp	r3, #9
 800e5ae:	d80b      	bhi.n	800e5c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	0f1b      	lsrs	r3, r3, #28
 800e5b4:	b2da      	uxtb	r2, r3
 800e5b6:	7dfb      	ldrb	r3, [r7, #23]
 800e5b8:	005b      	lsls	r3, r3, #1
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	440b      	add	r3, r1
 800e5c0:	3230      	adds	r2, #48	; 0x30
 800e5c2:	b2d2      	uxtb	r2, r2
 800e5c4:	701a      	strb	r2, [r3, #0]
 800e5c6:	e00a      	b.n	800e5de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	0f1b      	lsrs	r3, r3, #28
 800e5cc:	b2da      	uxtb	r2, r3
 800e5ce:	7dfb      	ldrb	r3, [r7, #23]
 800e5d0:	005b      	lsls	r3, r3, #1
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	440b      	add	r3, r1
 800e5d8:	3237      	adds	r2, #55	; 0x37
 800e5da:	b2d2      	uxtb	r2, r2
 800e5dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	011b      	lsls	r3, r3, #4
 800e5e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e5e4:	7dfb      	ldrb	r3, [r7, #23]
 800e5e6:	005b      	lsls	r3, r3, #1
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	68ba      	ldr	r2, [r7, #8]
 800e5ec:	4413      	add	r3, r2
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e5f2:	7dfb      	ldrb	r3, [r7, #23]
 800e5f4:	3301      	adds	r3, #1
 800e5f6:	75fb      	strb	r3, [r7, #23]
 800e5f8:	7dfa      	ldrb	r2, [r7, #23]
 800e5fa:	79fb      	ldrb	r3, [r7, #7]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d3d3      	bcc.n	800e5a8 <IntToUnicode+0x18>
  }
}
 800e600:	bf00      	nop
 800e602:	bf00      	nop
 800e604:	371c      	adds	r7, #28
 800e606:	46bd      	mov	sp, r7
 800e608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60c:	4770      	bx	lr
	...

0800e610 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b09c      	sub	sp, #112	; 0x70
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e618:	f107 0310 	add.w	r3, r7, #16
 800e61c:	2260      	movs	r2, #96	; 0x60
 800e61e:	2100      	movs	r1, #0
 800e620:	4618      	mov	r0, r3
 800e622:	f000 fbbf 	bl	800eda4 <memset>
  if(pcdHandle->Instance==USB)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	4a15      	ldr	r2, [pc, #84]	; (800e680 <HAL_PCD_MspInit+0x70>)
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d122      	bne.n	800e676 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e630:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e634:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e636:	2300      	movs	r3, #0
 800e638:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e63a:	f107 0310 	add.w	r3, r7, #16
 800e63e:	4618      	mov	r0, r3
 800e640:	f7fa fae6 	bl	8008c10 <HAL_RCCEx_PeriphCLKConfig>
 800e644:	4603      	mov	r3, r0
 800e646:	2b00      	cmp	r3, #0
 800e648:	d001      	beq.n	800e64e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800e64a:	f7f5 fc41 	bl	8003ed0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e64e:	4b0d      	ldr	r3, [pc, #52]	; (800e684 <HAL_PCD_MspInit+0x74>)
 800e650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e652:	4a0c      	ldr	r2, [pc, #48]	; (800e684 <HAL_PCD_MspInit+0x74>)
 800e654:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e658:	6593      	str	r3, [r2, #88]	; 0x58
 800e65a:	4b0a      	ldr	r3, [pc, #40]	; (800e684 <HAL_PCD_MspInit+0x74>)
 800e65c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e65e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e662:	60fb      	str	r3, [r7, #12]
 800e664:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800e666:	2200      	movs	r2, #0
 800e668:	2100      	movs	r1, #0
 800e66a:	2043      	movs	r0, #67	; 0x43
 800e66c:	f7f6 feb7 	bl	80053de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800e670:	2043      	movs	r0, #67	; 0x43
 800e672:	f7f6 fed0 	bl	8005416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e676:	bf00      	nop
 800e678:	3770      	adds	r7, #112	; 0x70
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
 800e67e:	bf00      	nop
 800e680:	40006800 	.word	0x40006800
 800e684:	40021000 	.word	0x40021000

0800e688 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800e69c:	4619      	mov	r1, r3
 800e69e:	4610      	mov	r0, r2
 800e6a0:	f7fe fd56 	bl	800d150 <USBD_LL_SetupStage>
}
 800e6a4:	bf00      	nop
 800e6a6:	3708      	adds	r7, #8
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}

0800e6ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b082      	sub	sp, #8
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
 800e6b4:	460b      	mov	r3, r1
 800e6b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800e6be:	78fa      	ldrb	r2, [r7, #3]
 800e6c0:	6879      	ldr	r1, [r7, #4]
 800e6c2:	4613      	mov	r3, r2
 800e6c4:	009b      	lsls	r3, r3, #2
 800e6c6:	4413      	add	r3, r2
 800e6c8:	00db      	lsls	r3, r3, #3
 800e6ca:	440b      	add	r3, r1
 800e6cc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	78fb      	ldrb	r3, [r7, #3]
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	f7fe fd90 	bl	800d1fa <USBD_LL_DataOutStage>
}
 800e6da:	bf00      	nop
 800e6dc:	3708      	adds	r7, #8
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}

0800e6e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6e2:	b580      	push	{r7, lr}
 800e6e4:	b082      	sub	sp, #8
 800e6e6:	af00      	add	r7, sp, #0
 800e6e8:	6078      	str	r0, [r7, #4]
 800e6ea:	460b      	mov	r3, r1
 800e6ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800e6f4:	78fa      	ldrb	r2, [r7, #3]
 800e6f6:	6879      	ldr	r1, [r7, #4]
 800e6f8:	4613      	mov	r3, r2
 800e6fa:	009b      	lsls	r3, r3, #2
 800e6fc:	4413      	add	r3, r2
 800e6fe:	00db      	lsls	r3, r3, #3
 800e700:	440b      	add	r3, r1
 800e702:	3340      	adds	r3, #64	; 0x40
 800e704:	681a      	ldr	r2, [r3, #0]
 800e706:	78fb      	ldrb	r3, [r7, #3]
 800e708:	4619      	mov	r1, r3
 800e70a:	f7fe fdd9 	bl	800d2c0 <USBD_LL_DataInStage>
}
 800e70e:	bf00      	nop
 800e710:	3708      	adds	r7, #8
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}

0800e716 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e716:	b580      	push	{r7, lr}
 800e718:	b082      	sub	sp, #8
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e724:	4618      	mov	r0, r3
 800e726:	f7fe feed 	bl	800d504 <USBD_LL_SOF>
}
 800e72a:	bf00      	nop
 800e72c:	3708      	adds	r7, #8
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}

0800e732 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e732:	b580      	push	{r7, lr}
 800e734:	b084      	sub	sp, #16
 800e736:	af00      	add	r7, sp, #0
 800e738:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e73a:	2301      	movs	r3, #1
 800e73c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	689b      	ldr	r3, [r3, #8]
 800e742:	2b02      	cmp	r3, #2
 800e744:	d001      	beq.n	800e74a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e746:	f7f5 fbc3 	bl	8003ed0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e750:	7bfa      	ldrb	r2, [r7, #15]
 800e752:	4611      	mov	r1, r2
 800e754:	4618      	mov	r0, r3
 800e756:	f7fe fe97 	bl	800d488 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e760:	4618      	mov	r0, r3
 800e762:	f7fe fe43 	bl	800d3ec <USBD_LL_Reset>
}
 800e766:	bf00      	nop
 800e768:	3710      	adds	r7, #16
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
	...

0800e770 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b082      	sub	sp, #8
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e77e:	4618      	mov	r0, r3
 800e780:	f7fe fe92 	bl	800d4a8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	699b      	ldr	r3, [r3, #24]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d005      	beq.n	800e798 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e78c:	4b04      	ldr	r3, [pc, #16]	; (800e7a0 <HAL_PCD_SuspendCallback+0x30>)
 800e78e:	691b      	ldr	r3, [r3, #16]
 800e790:	4a03      	ldr	r2, [pc, #12]	; (800e7a0 <HAL_PCD_SuspendCallback+0x30>)
 800e792:	f043 0306 	orr.w	r3, r3, #6
 800e796:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e798:	bf00      	nop
 800e79a:	3708      	adds	r7, #8
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}
 800e7a0:	e000ed00 	.word	0xe000ed00

0800e7a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b082      	sub	sp, #8
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	699b      	ldr	r3, [r3, #24]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d007      	beq.n	800e7c4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e7b4:	4b08      	ldr	r3, [pc, #32]	; (800e7d8 <HAL_PCD_ResumeCallback+0x34>)
 800e7b6:	691b      	ldr	r3, [r3, #16]
 800e7b8:	4a07      	ldr	r2, [pc, #28]	; (800e7d8 <HAL_PCD_ResumeCallback+0x34>)
 800e7ba:	f023 0306 	bic.w	r3, r3, #6
 800e7be:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e7c0:	f000 fa80 	bl	800ecc4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f7fe fe82 	bl	800d4d4 <USBD_LL_Resume>
}
 800e7d0:	bf00      	nop
 800e7d2:	3708      	adds	r7, #8
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}
 800e7d8:	e000ed00 	.word	0xe000ed00

0800e7dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800e7e4:	f7f9 fbf8 	bl	8007fd8 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800e7e8:	4a2b      	ldr	r2, [pc, #172]	; (800e898 <USBD_LL_Init+0xbc>)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	4a29      	ldr	r2, [pc, #164]	; (800e898 <USBD_LL_Init+0xbc>)
 800e7f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800e7f8:	4b27      	ldr	r3, [pc, #156]	; (800e898 <USBD_LL_Init+0xbc>)
 800e7fa:	4a28      	ldr	r2, [pc, #160]	; (800e89c <USBD_LL_Init+0xc0>)
 800e7fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e7fe:	4b26      	ldr	r3, [pc, #152]	; (800e898 <USBD_LL_Init+0xbc>)
 800e800:	2208      	movs	r2, #8
 800e802:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e804:	4b24      	ldr	r3, [pc, #144]	; (800e898 <USBD_LL_Init+0xbc>)
 800e806:	2202      	movs	r2, #2
 800e808:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e80a:	4b23      	ldr	r3, [pc, #140]	; (800e898 <USBD_LL_Init+0xbc>)
 800e80c:	2202      	movs	r2, #2
 800e80e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e810:	4b21      	ldr	r3, [pc, #132]	; (800e898 <USBD_LL_Init+0xbc>)
 800e812:	2200      	movs	r2, #0
 800e814:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e816:	4b20      	ldr	r3, [pc, #128]	; (800e898 <USBD_LL_Init+0xbc>)
 800e818:	2200      	movs	r2, #0
 800e81a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e81c:	4b1e      	ldr	r3, [pc, #120]	; (800e898 <USBD_LL_Init+0xbc>)
 800e81e:	2200      	movs	r2, #0
 800e820:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e822:	4b1d      	ldr	r3, [pc, #116]	; (800e898 <USBD_LL_Init+0xbc>)
 800e824:	2200      	movs	r2, #0
 800e826:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e828:	481b      	ldr	r0, [pc, #108]	; (800e898 <USBD_LL_Init+0xbc>)
 800e82a:	f7f7 fdd9 	bl	80063e0 <HAL_PCD_Init>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	d001      	beq.n	800e838 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800e834:	f7f5 fb4c 	bl	8003ed0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e83e:	2318      	movs	r3, #24
 800e840:	2200      	movs	r2, #0
 800e842:	2100      	movs	r1, #0
 800e844:	f7f9 fae9 	bl	8007e1a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e84e:	2358      	movs	r3, #88	; 0x58
 800e850:	2200      	movs	r2, #0
 800e852:	2180      	movs	r1, #128	; 0x80
 800e854:	f7f9 fae1 	bl	8007e1a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e85e:	23c0      	movs	r3, #192	; 0xc0
 800e860:	2200      	movs	r2, #0
 800e862:	2181      	movs	r1, #129	; 0x81
 800e864:	f7f9 fad9 	bl	8007e1a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e86e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e872:	2200      	movs	r2, #0
 800e874:	2101      	movs	r1, #1
 800e876:	f7f9 fad0 	bl	8007e1a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e880:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e884:	2200      	movs	r2, #0
 800e886:	2182      	movs	r1, #130	; 0x82
 800e888:	f7f9 fac7 	bl	8007e1a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e88c:	2300      	movs	r3, #0
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3708      	adds	r7, #8
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	20000c90 	.word	0x20000c90
 800e89c:	40006800 	.word	0x40006800

0800e8a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b084      	sub	sp, #16
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7f7 fea9 	bl	800660e <HAL_PCD_Start>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e8c0:	7bbb      	ldrb	r3, [r7, #14]
 800e8c2:	2b03      	cmp	r3, #3
 800e8c4:	d816      	bhi.n	800e8f4 <USBD_LL_Start+0x54>
 800e8c6:	a201      	add	r2, pc, #4	; (adr r2, 800e8cc <USBD_LL_Start+0x2c>)
 800e8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8cc:	0800e8dd 	.word	0x0800e8dd
 800e8d0:	0800e8e3 	.word	0x0800e8e3
 800e8d4:	0800e8e9 	.word	0x0800e8e9
 800e8d8:	0800e8ef 	.word	0x0800e8ef
    case HAL_OK :
      usb_status = USBD_OK;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	73fb      	strb	r3, [r7, #15]
    break;
 800e8e0:	e00b      	b.n	800e8fa <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e8e2:	2303      	movs	r3, #3
 800e8e4:	73fb      	strb	r3, [r7, #15]
    break;
 800e8e6:	e008      	b.n	800e8fa <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	73fb      	strb	r3, [r7, #15]
    break;
 800e8ec:	e005      	b.n	800e8fa <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e8ee:	2303      	movs	r3, #3
 800e8f0:	73fb      	strb	r3, [r7, #15]
    break;
 800e8f2:	e002      	b.n	800e8fa <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800e8f4:	2303      	movs	r3, #3
 800e8f6:	73fb      	strb	r3, [r7, #15]
    break;
 800e8f8:	bf00      	nop
  }
  return usb_status;
 800e8fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3710      	adds	r7, #16
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}

0800e904 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b084      	sub	sp, #16
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
 800e90c:	4608      	mov	r0, r1
 800e90e:	4611      	mov	r1, r2
 800e910:	461a      	mov	r2, r3
 800e912:	4603      	mov	r3, r0
 800e914:	70fb      	strb	r3, [r7, #3]
 800e916:	460b      	mov	r3, r1
 800e918:	70bb      	strb	r3, [r7, #2]
 800e91a:	4613      	mov	r3, r2
 800e91c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e91e:	2300      	movs	r3, #0
 800e920:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e922:	2300      	movs	r3, #0
 800e924:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e92c:	78bb      	ldrb	r3, [r7, #2]
 800e92e:	883a      	ldrh	r2, [r7, #0]
 800e930:	78f9      	ldrb	r1, [r7, #3]
 800e932:	f7f7 ffda 	bl	80068ea <HAL_PCD_EP_Open>
 800e936:	4603      	mov	r3, r0
 800e938:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e93a:	7bbb      	ldrb	r3, [r7, #14]
 800e93c:	2b03      	cmp	r3, #3
 800e93e:	d817      	bhi.n	800e970 <USBD_LL_OpenEP+0x6c>
 800e940:	a201      	add	r2, pc, #4	; (adr r2, 800e948 <USBD_LL_OpenEP+0x44>)
 800e942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e946:	bf00      	nop
 800e948:	0800e959 	.word	0x0800e959
 800e94c:	0800e95f 	.word	0x0800e95f
 800e950:	0800e965 	.word	0x0800e965
 800e954:	0800e96b 	.word	0x0800e96b
    case HAL_OK :
      usb_status = USBD_OK;
 800e958:	2300      	movs	r3, #0
 800e95a:	73fb      	strb	r3, [r7, #15]
    break;
 800e95c:	e00b      	b.n	800e976 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e95e:	2303      	movs	r3, #3
 800e960:	73fb      	strb	r3, [r7, #15]
    break;
 800e962:	e008      	b.n	800e976 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e964:	2301      	movs	r3, #1
 800e966:	73fb      	strb	r3, [r7, #15]
    break;
 800e968:	e005      	b.n	800e976 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e96a:	2303      	movs	r3, #3
 800e96c:	73fb      	strb	r3, [r7, #15]
    break;
 800e96e:	e002      	b.n	800e976 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800e970:	2303      	movs	r3, #3
 800e972:	73fb      	strb	r3, [r7, #15]
    break;
 800e974:	bf00      	nop
  }
  return usb_status;
 800e976:	7bfb      	ldrb	r3, [r7, #15]
}
 800e978:	4618      	mov	r0, r3
 800e97a:	3710      	adds	r7, #16
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}

0800e980 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b084      	sub	sp, #16
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	460b      	mov	r3, r1
 800e98a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e98c:	2300      	movs	r3, #0
 800e98e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e990:	2300      	movs	r3, #0
 800e992:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e99a:	78fa      	ldrb	r2, [r7, #3]
 800e99c:	4611      	mov	r1, r2
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f7f8 f80b 	bl	80069ba <HAL_PCD_EP_Close>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e9a8:	7bbb      	ldrb	r3, [r7, #14]
 800e9aa:	2b03      	cmp	r3, #3
 800e9ac:	d816      	bhi.n	800e9dc <USBD_LL_CloseEP+0x5c>
 800e9ae:	a201      	add	r2, pc, #4	; (adr r2, 800e9b4 <USBD_LL_CloseEP+0x34>)
 800e9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9b4:	0800e9c5 	.word	0x0800e9c5
 800e9b8:	0800e9cb 	.word	0x0800e9cb
 800e9bc:	0800e9d1 	.word	0x0800e9d1
 800e9c0:	0800e9d7 	.word	0x0800e9d7
    case HAL_OK :
      usb_status = USBD_OK;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	73fb      	strb	r3, [r7, #15]
    break;
 800e9c8:	e00b      	b.n	800e9e2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e9ca:	2303      	movs	r3, #3
 800e9cc:	73fb      	strb	r3, [r7, #15]
    break;
 800e9ce:	e008      	b.n	800e9e2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	73fb      	strb	r3, [r7, #15]
    break;
 800e9d4:	e005      	b.n	800e9e2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e9d6:	2303      	movs	r3, #3
 800e9d8:	73fb      	strb	r3, [r7, #15]
    break;
 800e9da:	e002      	b.n	800e9e2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e9dc:	2303      	movs	r3, #3
 800e9de:	73fb      	strb	r3, [r7, #15]
    break;
 800e9e0:	bf00      	nop
  }
  return usb_status;
 800e9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	3710      	adds	r7, #16
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}

0800e9ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b084      	sub	sp, #16
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ea06:	78fa      	ldrb	r2, [r7, #3]
 800ea08:	4611      	mov	r1, r2
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f7f8 f8b9 	bl	8006b82 <HAL_PCD_EP_SetStall>
 800ea10:	4603      	mov	r3, r0
 800ea12:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ea14:	7bbb      	ldrb	r3, [r7, #14]
 800ea16:	2b03      	cmp	r3, #3
 800ea18:	d816      	bhi.n	800ea48 <USBD_LL_StallEP+0x5c>
 800ea1a:	a201      	add	r2, pc, #4	; (adr r2, 800ea20 <USBD_LL_StallEP+0x34>)
 800ea1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea20:	0800ea31 	.word	0x0800ea31
 800ea24:	0800ea37 	.word	0x0800ea37
 800ea28:	0800ea3d 	.word	0x0800ea3d
 800ea2c:	0800ea43 	.word	0x0800ea43
    case HAL_OK :
      usb_status = USBD_OK;
 800ea30:	2300      	movs	r3, #0
 800ea32:	73fb      	strb	r3, [r7, #15]
    break;
 800ea34:	e00b      	b.n	800ea4e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ea36:	2303      	movs	r3, #3
 800ea38:	73fb      	strb	r3, [r7, #15]
    break;
 800ea3a:	e008      	b.n	800ea4e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	73fb      	strb	r3, [r7, #15]
    break;
 800ea40:	e005      	b.n	800ea4e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ea42:	2303      	movs	r3, #3
 800ea44:	73fb      	strb	r3, [r7, #15]
    break;
 800ea46:	e002      	b.n	800ea4e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ea48:	2303      	movs	r3, #3
 800ea4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ea4c:	bf00      	nop
  }
  return usb_status;
 800ea4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	3710      	adds	r7, #16
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b084      	sub	sp, #16
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	460b      	mov	r3, r1
 800ea62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea64:	2300      	movs	r3, #0
 800ea66:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ea72:	78fa      	ldrb	r2, [r7, #3]
 800ea74:	4611      	mov	r1, r2
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7f8 f8e5 	bl	8006c46 <HAL_PCD_EP_ClrStall>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ea80:	7bbb      	ldrb	r3, [r7, #14]
 800ea82:	2b03      	cmp	r3, #3
 800ea84:	d816      	bhi.n	800eab4 <USBD_LL_ClearStallEP+0x5c>
 800ea86:	a201      	add	r2, pc, #4	; (adr r2, 800ea8c <USBD_LL_ClearStallEP+0x34>)
 800ea88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea8c:	0800ea9d 	.word	0x0800ea9d
 800ea90:	0800eaa3 	.word	0x0800eaa3
 800ea94:	0800eaa9 	.word	0x0800eaa9
 800ea98:	0800eaaf 	.word	0x0800eaaf
    case HAL_OK :
      usb_status = USBD_OK;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	73fb      	strb	r3, [r7, #15]
    break;
 800eaa0:	e00b      	b.n	800eaba <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eaa2:	2303      	movs	r3, #3
 800eaa4:	73fb      	strb	r3, [r7, #15]
    break;
 800eaa6:	e008      	b.n	800eaba <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	73fb      	strb	r3, [r7, #15]
    break;
 800eaac:	e005      	b.n	800eaba <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eaae:	2303      	movs	r3, #3
 800eab0:	73fb      	strb	r3, [r7, #15]
    break;
 800eab2:	e002      	b.n	800eaba <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800eab4:	2303      	movs	r3, #3
 800eab6:	73fb      	strb	r3, [r7, #15]
    break;
 800eab8:	bf00      	nop
  }
  return usb_status;
 800eaba:	7bfb      	ldrb	r3, [r7, #15]
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	3710      	adds	r7, #16
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}

0800eac4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eac4:	b480      	push	{r7}
 800eac6:	b085      	sub	sp, #20
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	460b      	mov	r3, r1
 800eace:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ead6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ead8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	da0c      	bge.n	800eafa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eae0:	78fb      	ldrb	r3, [r7, #3]
 800eae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eae6:	68f9      	ldr	r1, [r7, #12]
 800eae8:	1c5a      	adds	r2, r3, #1
 800eaea:	4613      	mov	r3, r2
 800eaec:	009b      	lsls	r3, r3, #2
 800eaee:	4413      	add	r3, r2
 800eaf0:	00db      	lsls	r3, r3, #3
 800eaf2:	440b      	add	r3, r1
 800eaf4:	3306      	adds	r3, #6
 800eaf6:	781b      	ldrb	r3, [r3, #0]
 800eaf8:	e00b      	b.n	800eb12 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eafa:	78fb      	ldrb	r3, [r7, #3]
 800eafc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eb00:	68f9      	ldr	r1, [r7, #12]
 800eb02:	4613      	mov	r3, r2
 800eb04:	009b      	lsls	r3, r3, #2
 800eb06:	4413      	add	r3, r2
 800eb08:	00db      	lsls	r3, r3, #3
 800eb0a:	440b      	add	r3, r1
 800eb0c:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800eb10:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	3714      	adds	r7, #20
 800eb16:	46bd      	mov	sp, r7
 800eb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1c:	4770      	bx	lr
	...

0800eb20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	460b      	mov	r3, r1
 800eb2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb30:	2300      	movs	r3, #0
 800eb32:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eb3a:	78fa      	ldrb	r2, [r7, #3]
 800eb3c:	4611      	mov	r1, r2
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7f7 feae 	bl	80068a0 <HAL_PCD_SetAddress>
 800eb44:	4603      	mov	r3, r0
 800eb46:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800eb48:	7bbb      	ldrb	r3, [r7, #14]
 800eb4a:	2b03      	cmp	r3, #3
 800eb4c:	d816      	bhi.n	800eb7c <USBD_LL_SetUSBAddress+0x5c>
 800eb4e:	a201      	add	r2, pc, #4	; (adr r2, 800eb54 <USBD_LL_SetUSBAddress+0x34>)
 800eb50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb54:	0800eb65 	.word	0x0800eb65
 800eb58:	0800eb6b 	.word	0x0800eb6b
 800eb5c:	0800eb71 	.word	0x0800eb71
 800eb60:	0800eb77 	.word	0x0800eb77
    case HAL_OK :
      usb_status = USBD_OK;
 800eb64:	2300      	movs	r3, #0
 800eb66:	73fb      	strb	r3, [r7, #15]
    break;
 800eb68:	e00b      	b.n	800eb82 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eb6a:	2303      	movs	r3, #3
 800eb6c:	73fb      	strb	r3, [r7, #15]
    break;
 800eb6e:	e008      	b.n	800eb82 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eb70:	2301      	movs	r3, #1
 800eb72:	73fb      	strb	r3, [r7, #15]
    break;
 800eb74:	e005      	b.n	800eb82 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eb76:	2303      	movs	r3, #3
 800eb78:	73fb      	strb	r3, [r7, #15]
    break;
 800eb7a:	e002      	b.n	800eb82 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800eb7c:	2303      	movs	r3, #3
 800eb7e:	73fb      	strb	r3, [r7, #15]
    break;
 800eb80:	bf00      	nop
  }
  return usb_status;
 800eb82:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3710      	adds	r7, #16
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}

0800eb8c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b086      	sub	sp, #24
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	607a      	str	r2, [r7, #4]
 800eb96:	603b      	str	r3, [r7, #0]
 800eb98:	460b      	mov	r3, r1
 800eb9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eba0:	2300      	movs	r3, #0
 800eba2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ebaa:	7af9      	ldrb	r1, [r7, #11]
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	687a      	ldr	r2, [r7, #4]
 800ebb0:	f7f7 ffa3 	bl	8006afa <HAL_PCD_EP_Transmit>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ebb8:	7dbb      	ldrb	r3, [r7, #22]
 800ebba:	2b03      	cmp	r3, #3
 800ebbc:	d816      	bhi.n	800ebec <USBD_LL_Transmit+0x60>
 800ebbe:	a201      	add	r2, pc, #4	; (adr r2, 800ebc4 <USBD_LL_Transmit+0x38>)
 800ebc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebc4:	0800ebd5 	.word	0x0800ebd5
 800ebc8:	0800ebdb 	.word	0x0800ebdb
 800ebcc:	0800ebe1 	.word	0x0800ebe1
 800ebd0:	0800ebe7 	.word	0x0800ebe7
    case HAL_OK :
      usb_status = USBD_OK;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	75fb      	strb	r3, [r7, #23]
    break;
 800ebd8:	e00b      	b.n	800ebf2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ebda:	2303      	movs	r3, #3
 800ebdc:	75fb      	strb	r3, [r7, #23]
    break;
 800ebde:	e008      	b.n	800ebf2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	75fb      	strb	r3, [r7, #23]
    break;
 800ebe4:	e005      	b.n	800ebf2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ebe6:	2303      	movs	r3, #3
 800ebe8:	75fb      	strb	r3, [r7, #23]
    break;
 800ebea:	e002      	b.n	800ebf2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800ebec:	2303      	movs	r3, #3
 800ebee:	75fb      	strb	r3, [r7, #23]
    break;
 800ebf0:	bf00      	nop
  }
  return usb_status;
 800ebf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3718      	adds	r7, #24
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}

0800ebfc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b086      	sub	sp, #24
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	60f8      	str	r0, [r7, #12]
 800ec04:	607a      	str	r2, [r7, #4]
 800ec06:	603b      	str	r3, [r7, #0]
 800ec08:	460b      	mov	r3, r1
 800ec0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec10:	2300      	movs	r3, #0
 800ec12:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ec1a:	7af9      	ldrb	r1, [r7, #11]
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	687a      	ldr	r2, [r7, #4]
 800ec20:	f7f7 ff15 	bl	8006a4e <HAL_PCD_EP_Receive>
 800ec24:	4603      	mov	r3, r0
 800ec26:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ec28:	7dbb      	ldrb	r3, [r7, #22]
 800ec2a:	2b03      	cmp	r3, #3
 800ec2c:	d816      	bhi.n	800ec5c <USBD_LL_PrepareReceive+0x60>
 800ec2e:	a201      	add	r2, pc, #4	; (adr r2, 800ec34 <USBD_LL_PrepareReceive+0x38>)
 800ec30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec34:	0800ec45 	.word	0x0800ec45
 800ec38:	0800ec4b 	.word	0x0800ec4b
 800ec3c:	0800ec51 	.word	0x0800ec51
 800ec40:	0800ec57 	.word	0x0800ec57
    case HAL_OK :
      usb_status = USBD_OK;
 800ec44:	2300      	movs	r3, #0
 800ec46:	75fb      	strb	r3, [r7, #23]
    break;
 800ec48:	e00b      	b.n	800ec62 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ec4a:	2303      	movs	r3, #3
 800ec4c:	75fb      	strb	r3, [r7, #23]
    break;
 800ec4e:	e008      	b.n	800ec62 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ec50:	2301      	movs	r3, #1
 800ec52:	75fb      	strb	r3, [r7, #23]
    break;
 800ec54:	e005      	b.n	800ec62 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ec56:	2303      	movs	r3, #3
 800ec58:	75fb      	strb	r3, [r7, #23]
    break;
 800ec5a:	e002      	b.n	800ec62 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800ec5c:	2303      	movs	r3, #3
 800ec5e:	75fb      	strb	r3, [r7, #23]
    break;
 800ec60:	bf00      	nop
  }
  return usb_status;
 800ec62:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3718      	adds	r7, #24
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b082      	sub	sp, #8
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	460b      	mov	r3, r1
 800ec76:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ec7e:	78fa      	ldrb	r2, [r7, #3]
 800ec80:	4611      	mov	r1, r2
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7f7 ff21 	bl	8006aca <HAL_PCD_EP_GetRxCount>
 800ec88:	4603      	mov	r3, r0
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3708      	adds	r7, #8
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
	...

0800ec94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b083      	sub	sp, #12
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ec9c:	4b03      	ldr	r3, [pc, #12]	; (800ecac <USBD_static_malloc+0x18>)
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	370c      	adds	r7, #12
 800eca2:	46bd      	mov	sp, r7
 800eca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca8:	4770      	bx	lr
 800ecaa:	bf00      	nop
 800ecac:	20000f8c 	.word	0x20000f8c

0800ecb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ecb0:	b480      	push	{r7}
 800ecb2:	b083      	sub	sp, #12
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]

}
 800ecb8:	bf00      	nop
 800ecba:	370c      	adds	r7, #12
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr

0800ecc4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800ecc8:	bf00      	nop
 800ecca:	46bd      	mov	sp, r7
 800eccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd0:	4770      	bx	lr

0800ecd2 <_Znwj>:
 800ecd2:	2801      	cmp	r0, #1
 800ecd4:	bf38      	it	cc
 800ecd6:	2001      	movcc	r0, #1
 800ecd8:	b510      	push	{r4, lr}
 800ecda:	4604      	mov	r4, r0
 800ecdc:	4620      	mov	r0, r4
 800ecde:	f000 f859 	bl	800ed94 <malloc>
 800ece2:	b930      	cbnz	r0, 800ecf2 <_Znwj+0x20>
 800ece4:	f000 f81c 	bl	800ed20 <_ZSt15get_new_handlerv>
 800ece8:	b908      	cbnz	r0, 800ecee <_Znwj+0x1c>
 800ecea:	f000 f821 	bl	800ed30 <abort>
 800ecee:	4780      	blx	r0
 800ecf0:	e7f4      	b.n	800ecdc <_Znwj+0xa>
 800ecf2:	bd10      	pop	{r4, pc}

0800ecf4 <__cxa_pure_virtual>:
 800ecf4:	b508      	push	{r3, lr}
 800ecf6:	f000 f80d 	bl	800ed14 <_ZSt9terminatev>

0800ecfa <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ecfa:	b508      	push	{r3, lr}
 800ecfc:	4780      	blx	r0
 800ecfe:	f000 f817 	bl	800ed30 <abort>
	...

0800ed04 <_ZSt13get_terminatev>:
 800ed04:	4b02      	ldr	r3, [pc, #8]	; (800ed10 <_ZSt13get_terminatev+0xc>)
 800ed06:	6818      	ldr	r0, [r3, #0]
 800ed08:	f3bf 8f5b 	dmb	ish
 800ed0c:	4770      	bx	lr
 800ed0e:	bf00      	nop
 800ed10:	200001a0 	.word	0x200001a0

0800ed14 <_ZSt9terminatev>:
 800ed14:	b508      	push	{r3, lr}
 800ed16:	f7ff fff5 	bl	800ed04 <_ZSt13get_terminatev>
 800ed1a:	f7ff ffee 	bl	800ecfa <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800ed20 <_ZSt15get_new_handlerv>:
 800ed20:	4b02      	ldr	r3, [pc, #8]	; (800ed2c <_ZSt15get_new_handlerv+0xc>)
 800ed22:	6818      	ldr	r0, [r3, #0]
 800ed24:	f3bf 8f5b 	dmb	ish
 800ed28:	4770      	bx	lr
 800ed2a:	bf00      	nop
 800ed2c:	200011ac 	.word	0x200011ac

0800ed30 <abort>:
 800ed30:	b508      	push	{r3, lr}
 800ed32:	2006      	movs	r0, #6
 800ed34:	f000 f90a 	bl	800ef4c <raise>
 800ed38:	2001      	movs	r0, #1
 800ed3a:	f7f5 fa07 	bl	800414c <_exit>
	...

0800ed40 <__errno>:
 800ed40:	4b01      	ldr	r3, [pc, #4]	; (800ed48 <__errno+0x8>)
 800ed42:	6818      	ldr	r0, [r3, #0]
 800ed44:	4770      	bx	lr
 800ed46:	bf00      	nop
 800ed48:	200001a4 	.word	0x200001a4

0800ed4c <__libc_init_array>:
 800ed4c:	b570      	push	{r4, r5, r6, lr}
 800ed4e:	4d0d      	ldr	r5, [pc, #52]	; (800ed84 <__libc_init_array+0x38>)
 800ed50:	4c0d      	ldr	r4, [pc, #52]	; (800ed88 <__libc_init_array+0x3c>)
 800ed52:	1b64      	subs	r4, r4, r5
 800ed54:	10a4      	asrs	r4, r4, #2
 800ed56:	2600      	movs	r6, #0
 800ed58:	42a6      	cmp	r6, r4
 800ed5a:	d109      	bne.n	800ed70 <__libc_init_array+0x24>
 800ed5c:	4d0b      	ldr	r5, [pc, #44]	; (800ed8c <__libc_init_array+0x40>)
 800ed5e:	4c0c      	ldr	r4, [pc, #48]	; (800ed90 <__libc_init_array+0x44>)
 800ed60:	f000 f91e 	bl	800efa0 <_init>
 800ed64:	1b64      	subs	r4, r4, r5
 800ed66:	10a4      	asrs	r4, r4, #2
 800ed68:	2600      	movs	r6, #0
 800ed6a:	42a6      	cmp	r6, r4
 800ed6c:	d105      	bne.n	800ed7a <__libc_init_array+0x2e>
 800ed6e:	bd70      	pop	{r4, r5, r6, pc}
 800ed70:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed74:	4798      	blx	r3
 800ed76:	3601      	adds	r6, #1
 800ed78:	e7ee      	b.n	800ed58 <__libc_init_array+0xc>
 800ed7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed7e:	4798      	blx	r3
 800ed80:	3601      	adds	r6, #1
 800ed82:	e7f2      	b.n	800ed6a <__libc_init_array+0x1e>
 800ed84:	0800f0ac 	.word	0x0800f0ac
 800ed88:	0800f0ac 	.word	0x0800f0ac
 800ed8c:	0800f0ac 	.word	0x0800f0ac
 800ed90:	0800f0b4 	.word	0x0800f0b4

0800ed94 <malloc>:
 800ed94:	4b02      	ldr	r3, [pc, #8]	; (800eda0 <malloc+0xc>)
 800ed96:	4601      	mov	r1, r0
 800ed98:	6818      	ldr	r0, [r3, #0]
 800ed9a:	f000 b82b 	b.w	800edf4 <_malloc_r>
 800ed9e:	bf00      	nop
 800eda0:	200001a4 	.word	0x200001a4

0800eda4 <memset>:
 800eda4:	4402      	add	r2, r0
 800eda6:	4603      	mov	r3, r0
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d100      	bne.n	800edae <memset+0xa>
 800edac:	4770      	bx	lr
 800edae:	f803 1b01 	strb.w	r1, [r3], #1
 800edb2:	e7f9      	b.n	800eda8 <memset+0x4>

0800edb4 <sbrk_aligned>:
 800edb4:	b570      	push	{r4, r5, r6, lr}
 800edb6:	4e0e      	ldr	r6, [pc, #56]	; (800edf0 <sbrk_aligned+0x3c>)
 800edb8:	460c      	mov	r4, r1
 800edba:	6831      	ldr	r1, [r6, #0]
 800edbc:	4605      	mov	r5, r0
 800edbe:	b911      	cbnz	r1, 800edc6 <sbrk_aligned+0x12>
 800edc0:	f000 f88c 	bl	800eedc <_sbrk_r>
 800edc4:	6030      	str	r0, [r6, #0]
 800edc6:	4621      	mov	r1, r4
 800edc8:	4628      	mov	r0, r5
 800edca:	f000 f887 	bl	800eedc <_sbrk_r>
 800edce:	1c43      	adds	r3, r0, #1
 800edd0:	d00a      	beq.n	800ede8 <sbrk_aligned+0x34>
 800edd2:	1cc4      	adds	r4, r0, #3
 800edd4:	f024 0403 	bic.w	r4, r4, #3
 800edd8:	42a0      	cmp	r0, r4
 800edda:	d007      	beq.n	800edec <sbrk_aligned+0x38>
 800eddc:	1a21      	subs	r1, r4, r0
 800edde:	4628      	mov	r0, r5
 800ede0:	f000 f87c 	bl	800eedc <_sbrk_r>
 800ede4:	3001      	adds	r0, #1
 800ede6:	d101      	bne.n	800edec <sbrk_aligned+0x38>
 800ede8:	f04f 34ff 	mov.w	r4, #4294967295
 800edec:	4620      	mov	r0, r4
 800edee:	bd70      	pop	{r4, r5, r6, pc}
 800edf0:	200011b4 	.word	0x200011b4

0800edf4 <_malloc_r>:
 800edf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edf8:	1ccd      	adds	r5, r1, #3
 800edfa:	f025 0503 	bic.w	r5, r5, #3
 800edfe:	3508      	adds	r5, #8
 800ee00:	2d0c      	cmp	r5, #12
 800ee02:	bf38      	it	cc
 800ee04:	250c      	movcc	r5, #12
 800ee06:	2d00      	cmp	r5, #0
 800ee08:	4607      	mov	r7, r0
 800ee0a:	db01      	blt.n	800ee10 <_malloc_r+0x1c>
 800ee0c:	42a9      	cmp	r1, r5
 800ee0e:	d905      	bls.n	800ee1c <_malloc_r+0x28>
 800ee10:	230c      	movs	r3, #12
 800ee12:	603b      	str	r3, [r7, #0]
 800ee14:	2600      	movs	r6, #0
 800ee16:	4630      	mov	r0, r6
 800ee18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee1c:	4e2e      	ldr	r6, [pc, #184]	; (800eed8 <_malloc_r+0xe4>)
 800ee1e:	f000 f8b1 	bl	800ef84 <__malloc_lock>
 800ee22:	6833      	ldr	r3, [r6, #0]
 800ee24:	461c      	mov	r4, r3
 800ee26:	bb34      	cbnz	r4, 800ee76 <_malloc_r+0x82>
 800ee28:	4629      	mov	r1, r5
 800ee2a:	4638      	mov	r0, r7
 800ee2c:	f7ff ffc2 	bl	800edb4 <sbrk_aligned>
 800ee30:	1c43      	adds	r3, r0, #1
 800ee32:	4604      	mov	r4, r0
 800ee34:	d14d      	bne.n	800eed2 <_malloc_r+0xde>
 800ee36:	6834      	ldr	r4, [r6, #0]
 800ee38:	4626      	mov	r6, r4
 800ee3a:	2e00      	cmp	r6, #0
 800ee3c:	d140      	bne.n	800eec0 <_malloc_r+0xcc>
 800ee3e:	6823      	ldr	r3, [r4, #0]
 800ee40:	4631      	mov	r1, r6
 800ee42:	4638      	mov	r0, r7
 800ee44:	eb04 0803 	add.w	r8, r4, r3
 800ee48:	f000 f848 	bl	800eedc <_sbrk_r>
 800ee4c:	4580      	cmp	r8, r0
 800ee4e:	d13a      	bne.n	800eec6 <_malloc_r+0xd2>
 800ee50:	6821      	ldr	r1, [r4, #0]
 800ee52:	3503      	adds	r5, #3
 800ee54:	1a6d      	subs	r5, r5, r1
 800ee56:	f025 0503 	bic.w	r5, r5, #3
 800ee5a:	3508      	adds	r5, #8
 800ee5c:	2d0c      	cmp	r5, #12
 800ee5e:	bf38      	it	cc
 800ee60:	250c      	movcc	r5, #12
 800ee62:	4629      	mov	r1, r5
 800ee64:	4638      	mov	r0, r7
 800ee66:	f7ff ffa5 	bl	800edb4 <sbrk_aligned>
 800ee6a:	3001      	adds	r0, #1
 800ee6c:	d02b      	beq.n	800eec6 <_malloc_r+0xd2>
 800ee6e:	6823      	ldr	r3, [r4, #0]
 800ee70:	442b      	add	r3, r5
 800ee72:	6023      	str	r3, [r4, #0]
 800ee74:	e00e      	b.n	800ee94 <_malloc_r+0xa0>
 800ee76:	6822      	ldr	r2, [r4, #0]
 800ee78:	1b52      	subs	r2, r2, r5
 800ee7a:	d41e      	bmi.n	800eeba <_malloc_r+0xc6>
 800ee7c:	2a0b      	cmp	r2, #11
 800ee7e:	d916      	bls.n	800eeae <_malloc_r+0xba>
 800ee80:	1961      	adds	r1, r4, r5
 800ee82:	42a3      	cmp	r3, r4
 800ee84:	6025      	str	r5, [r4, #0]
 800ee86:	bf18      	it	ne
 800ee88:	6059      	strne	r1, [r3, #4]
 800ee8a:	6863      	ldr	r3, [r4, #4]
 800ee8c:	bf08      	it	eq
 800ee8e:	6031      	streq	r1, [r6, #0]
 800ee90:	5162      	str	r2, [r4, r5]
 800ee92:	604b      	str	r3, [r1, #4]
 800ee94:	4638      	mov	r0, r7
 800ee96:	f104 060b 	add.w	r6, r4, #11
 800ee9a:	f000 f879 	bl	800ef90 <__malloc_unlock>
 800ee9e:	f026 0607 	bic.w	r6, r6, #7
 800eea2:	1d23      	adds	r3, r4, #4
 800eea4:	1af2      	subs	r2, r6, r3
 800eea6:	d0b6      	beq.n	800ee16 <_malloc_r+0x22>
 800eea8:	1b9b      	subs	r3, r3, r6
 800eeaa:	50a3      	str	r3, [r4, r2]
 800eeac:	e7b3      	b.n	800ee16 <_malloc_r+0x22>
 800eeae:	6862      	ldr	r2, [r4, #4]
 800eeb0:	42a3      	cmp	r3, r4
 800eeb2:	bf0c      	ite	eq
 800eeb4:	6032      	streq	r2, [r6, #0]
 800eeb6:	605a      	strne	r2, [r3, #4]
 800eeb8:	e7ec      	b.n	800ee94 <_malloc_r+0xa0>
 800eeba:	4623      	mov	r3, r4
 800eebc:	6864      	ldr	r4, [r4, #4]
 800eebe:	e7b2      	b.n	800ee26 <_malloc_r+0x32>
 800eec0:	4634      	mov	r4, r6
 800eec2:	6876      	ldr	r6, [r6, #4]
 800eec4:	e7b9      	b.n	800ee3a <_malloc_r+0x46>
 800eec6:	230c      	movs	r3, #12
 800eec8:	603b      	str	r3, [r7, #0]
 800eeca:	4638      	mov	r0, r7
 800eecc:	f000 f860 	bl	800ef90 <__malloc_unlock>
 800eed0:	e7a1      	b.n	800ee16 <_malloc_r+0x22>
 800eed2:	6025      	str	r5, [r4, #0]
 800eed4:	e7de      	b.n	800ee94 <_malloc_r+0xa0>
 800eed6:	bf00      	nop
 800eed8:	200011b0 	.word	0x200011b0

0800eedc <_sbrk_r>:
 800eedc:	b538      	push	{r3, r4, r5, lr}
 800eede:	4d06      	ldr	r5, [pc, #24]	; (800eef8 <_sbrk_r+0x1c>)
 800eee0:	2300      	movs	r3, #0
 800eee2:	4604      	mov	r4, r0
 800eee4:	4608      	mov	r0, r1
 800eee6:	602b      	str	r3, [r5, #0]
 800eee8:	f7f5 f93a 	bl	8004160 <_sbrk>
 800eeec:	1c43      	adds	r3, r0, #1
 800eeee:	d102      	bne.n	800eef6 <_sbrk_r+0x1a>
 800eef0:	682b      	ldr	r3, [r5, #0]
 800eef2:	b103      	cbz	r3, 800eef6 <_sbrk_r+0x1a>
 800eef4:	6023      	str	r3, [r4, #0]
 800eef6:	bd38      	pop	{r3, r4, r5, pc}
 800eef8:	200011b8 	.word	0x200011b8

0800eefc <_raise_r>:
 800eefc:	291f      	cmp	r1, #31
 800eefe:	b538      	push	{r3, r4, r5, lr}
 800ef00:	4604      	mov	r4, r0
 800ef02:	460d      	mov	r5, r1
 800ef04:	d904      	bls.n	800ef10 <_raise_r+0x14>
 800ef06:	2316      	movs	r3, #22
 800ef08:	6003      	str	r3, [r0, #0]
 800ef0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef0e:	bd38      	pop	{r3, r4, r5, pc}
 800ef10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ef12:	b112      	cbz	r2, 800ef1a <_raise_r+0x1e>
 800ef14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef18:	b94b      	cbnz	r3, 800ef2e <_raise_r+0x32>
 800ef1a:	4620      	mov	r0, r4
 800ef1c:	f000 f830 	bl	800ef80 <_getpid_r>
 800ef20:	462a      	mov	r2, r5
 800ef22:	4601      	mov	r1, r0
 800ef24:	4620      	mov	r0, r4
 800ef26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef2a:	f000 b817 	b.w	800ef5c <_kill_r>
 800ef2e:	2b01      	cmp	r3, #1
 800ef30:	d00a      	beq.n	800ef48 <_raise_r+0x4c>
 800ef32:	1c59      	adds	r1, r3, #1
 800ef34:	d103      	bne.n	800ef3e <_raise_r+0x42>
 800ef36:	2316      	movs	r3, #22
 800ef38:	6003      	str	r3, [r0, #0]
 800ef3a:	2001      	movs	r0, #1
 800ef3c:	e7e7      	b.n	800ef0e <_raise_r+0x12>
 800ef3e:	2400      	movs	r4, #0
 800ef40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef44:	4628      	mov	r0, r5
 800ef46:	4798      	blx	r3
 800ef48:	2000      	movs	r0, #0
 800ef4a:	e7e0      	b.n	800ef0e <_raise_r+0x12>

0800ef4c <raise>:
 800ef4c:	4b02      	ldr	r3, [pc, #8]	; (800ef58 <raise+0xc>)
 800ef4e:	4601      	mov	r1, r0
 800ef50:	6818      	ldr	r0, [r3, #0]
 800ef52:	f7ff bfd3 	b.w	800eefc <_raise_r>
 800ef56:	bf00      	nop
 800ef58:	200001a4 	.word	0x200001a4

0800ef5c <_kill_r>:
 800ef5c:	b538      	push	{r3, r4, r5, lr}
 800ef5e:	4d07      	ldr	r5, [pc, #28]	; (800ef7c <_kill_r+0x20>)
 800ef60:	2300      	movs	r3, #0
 800ef62:	4604      	mov	r4, r0
 800ef64:	4608      	mov	r0, r1
 800ef66:	4611      	mov	r1, r2
 800ef68:	602b      	str	r3, [r5, #0]
 800ef6a:	f7f5 f8df 	bl	800412c <_kill>
 800ef6e:	1c43      	adds	r3, r0, #1
 800ef70:	d102      	bne.n	800ef78 <_kill_r+0x1c>
 800ef72:	682b      	ldr	r3, [r5, #0]
 800ef74:	b103      	cbz	r3, 800ef78 <_kill_r+0x1c>
 800ef76:	6023      	str	r3, [r4, #0]
 800ef78:	bd38      	pop	{r3, r4, r5, pc}
 800ef7a:	bf00      	nop
 800ef7c:	200011b8 	.word	0x200011b8

0800ef80 <_getpid_r>:
 800ef80:	f7f5 b8cc 	b.w	800411c <_getpid>

0800ef84 <__malloc_lock>:
 800ef84:	4801      	ldr	r0, [pc, #4]	; (800ef8c <__malloc_lock+0x8>)
 800ef86:	f000 b809 	b.w	800ef9c <__retarget_lock_acquire_recursive>
 800ef8a:	bf00      	nop
 800ef8c:	200011bc 	.word	0x200011bc

0800ef90 <__malloc_unlock>:
 800ef90:	4801      	ldr	r0, [pc, #4]	; (800ef98 <__malloc_unlock+0x8>)
 800ef92:	f000 b804 	b.w	800ef9e <__retarget_lock_release_recursive>
 800ef96:	bf00      	nop
 800ef98:	200011bc 	.word	0x200011bc

0800ef9c <__retarget_lock_acquire_recursive>:
 800ef9c:	4770      	bx	lr

0800ef9e <__retarget_lock_release_recursive>:
 800ef9e:	4770      	bx	lr

0800efa0 <_init>:
 800efa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efa2:	bf00      	nop
 800efa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efa6:	bc08      	pop	{r3}
 800efa8:	469e      	mov	lr, r3
 800efaa:	4770      	bx	lr

0800efac <_fini>:
 800efac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efae:	bf00      	nop
 800efb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efb2:	bc08      	pop	{r3}
 800efb4:	469e      	mov	lr, r3
 800efb6:	4770      	bx	lr
