
Cobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eeb4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800f040  0800f040  0001f040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f12c  0800f12c  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800f12c  0800f12c  0001f12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f134  0800f134  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f134  0800f134  0001f134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f13c  0800f13c  0001f13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800f140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fb8  20000208  0800f348  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200011c0  0800f348  000211c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ca25  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000725a  00000000  00000000  0004cc5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021f0  00000000  00000000  00053eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e78  00000000  00000000  000560a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003013b  00000000  00000000  00057f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e3dd  00000000  00000000  0008805b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4038  00000000  00000000  000b6438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001aa470  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e6c  00000000  00000000  001aa4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000208 	.word	0x20000208
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800f028 	.word	0x0800f028

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000020c 	.word	0x2000020c
 80001c8:	0800f028 	.word	0x0800f028

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <_ZN4IComC1Ev>:
 */

#ifndef SRC_COM_ICOM_H_
#define SRC_COM_ICOM_H_

class ICom{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <_ZN4IComC1Ev+0x1c>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	0800f098 	.word	0x0800f098

080004f0 <_ZN6USBComC1EP11DriveStatusP13DriveSettingsP12DriveCommand>:
class USBCom :  public ICom, public BaseCOM
{

	public:

		USBCom(DriveStatus *driveStatus, DriveSettings *driveSettings,
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	603b      	str	r3, [r7, #0]
				DriveCommand *driveCommand) :
				BaseCOM(driveStatus, driveSettings, driveCommand)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff ffe5 	bl	80004d0 <_ZN4IComC1Ev>
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	1d18      	adds	r0, r3, #4
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	68b9      	ldr	r1, [r7, #8]
 8000510:	f000 fa3c 	bl	800098c <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <_ZN6USBComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x34>)
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	601a      	str	r2, [r3, #0]
		{
		}
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	4618      	mov	r0, r3
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	0800f0c8 	.word	0x0800f0c8

08000528 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa>:


class RFM95Com :  public ICom, public BaseCOM
{
	public:
		RFM95Com(DriveStatus *driveStatus, DriveSettings *driveSettings,
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
 8000534:	603b      	str	r3, [r7, #0]
				DriveCommand *driveCommand, RFM95_LoRa *rfm95) :
				BaseCOM(driveStatus, driveSettings, driveCommand)
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ffc9 	bl	80004d0 <_ZN4IComC1Ev>
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	1d18      	adds	r0, r3, #4
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	68b9      	ldr	r1, [r7, #8]
 8000548:	f000 fa20 	bl	800098c <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 800054c:	4a0c      	ldr	r2, [pc, #48]	; (8000580 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa+0x58>)
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	3328      	adds	r3, #40	; 0x28
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	f8c3 2003 	str.w	r2, [r3, #3]
		{
			this->rfm95 = rfm95;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	69ba      	ldr	r2, [r7, #24]
 8000562:	619a      	str	r2, [r3, #24]
			this->driveCommand = driveCommand;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	683a      	ldr	r2, [r7, #0]
 8000568:	625a      	str	r2, [r3, #36]	; 0x24
			this->driveStatus = driveStatus;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	68ba      	ldr	r2, [r7, #8]
 800056e:	621a      	str	r2, [r3, #32]
			this->driveSettings = driveSettings;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	61da      	str	r2, [r3, #28]
		}
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	4618      	mov	r0, r3
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	0800f0b8 	.word	0x0800f0b8

08000584 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand>:
#include "../IO/DO.h"

class IOCom: public ICom, public BaseCOM
{
	public:
		IOCom(DriveStatus *driveStatus, DriveSettings *driveSettings,
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af02      	add	r7, sp, #8
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	603b      	str	r3, [r7, #0]
				DriveCommand *driveCommand) :
				BaseCOM(driveStatus, driveSettings, driveCommand)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff ff9b 	bl	80004d0 <_ZN4IComC1Ev>
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	1d18      	adds	r0, r3, #4
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	68b9      	ldr	r1, [r7, #8]
 80005a4:	f000 f9f2 	bl	800098c <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 80005a8:	4a3b      	ldr	r2, [pc, #236]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f103 0018 	add.w	r0, r3, #24
 80005b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005c2:	4936      	ldr	r1, [pc, #216]	; (800069c <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x118>)
 80005c4:	f001 fe1e 	bl	8002204 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80005ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	4b32      	ldr	r3, [pc, #200]	; (80006a0 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x11c>)
 80005d6:	2204      	movs	r2, #4
 80005d8:	4931      	ldr	r1, [pc, #196]	; (80006a0 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x11c>)
 80005da:	f001 fe13 	bl	8002204 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80005e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	4b2c      	ldr	r3, [pc, #176]	; (800069c <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x118>)
 80005ec:	2280      	movs	r2, #128	; 0x80
 80005ee:	492b      	ldr	r1, [pc, #172]	; (800069c <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x118>)
 80005f0:	f001 fe08 	bl	8002204 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f103 0048 	add.w	r0, r3, #72	; 0x48
 80005fa:	2301      	movs	r3, #1
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x11c>)
 8000600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000604:	4926      	ldr	r1, [pc, #152]	; (80006a0 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x11c>)
 8000606:	f001 fdfd 	bl	8002204 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8000610:	2340      	movs	r3, #64	; 0x40
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	4b21      	ldr	r3, [pc, #132]	; (800069c <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x118>)
 8000616:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800061a:	4921      	ldr	r1, [pc, #132]	; (80006a0 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x11c>)
 800061c:	f001 fdf2 	bl	8002204 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8000626:	2302      	movs	r3, #2
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x11c>)
 800062c:	2210      	movs	r2, #16
 800062e:	491b      	ldr	r1, [pc, #108]	; (800069c <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x118>)
 8000630:	f001 fde8 	bl	8002204 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800063a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x11c>)
 8000642:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000646:	4916      	ldr	r1, [pc, #88]	; (80006a0 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x11c>)
 8000648:	f001 fddc 	bl	8002204 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8000652:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x118>)
 800065a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800065e:	490f      	ldr	r1, [pc, #60]	; (800069c <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x118>)
 8000660:	f001 fdd0 	bl	8002204 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2200      	movs	r2, #0
 8000668:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	2200      	movs	r2, #0
 8000670:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2200      	movs	r2, #0
 8000678:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	2200      	movs	r2, #0
 8000680:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
		{
			this->driveStatus = driveStatus;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	68ba      	ldr	r2, [r7, #8]
 8000688:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	4618      	mov	r0, r3
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	0800f0a8 	.word	0x0800f0a8
 800069c:	48000800 	.word	0x48000800
 80006a0:	48000400 	.word	0x48000400

080006a4 <_ZN11TaskHandlerC1Ev>:

#include "stdint.h"
#include "../AppMain/Defines.h"


class TaskHandler{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2200      	movs	r2, #0
 80006b6:	705a      	strb	r2, [r3, #1]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2200      	movs	r2, #0
 80006bc:	709a      	strb	r2, [r3, #2]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2200      	movs	r2, #0
 80006c2:	70da      	strb	r2, [r3, #3]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2200      	movs	r2, #0
 80006c8:	711a      	strb	r2, [r3, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2200      	movs	r2, #0
 80006ce:	715a      	strb	r2, [r3, #5]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2201      	movs	r2, #1
 80006d4:	719a      	strb	r2, [r3, #6]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2201      	movs	r2, #1
 80006da:	71da      	strb	r2, [r3, #7]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2201      	movs	r2, #1
 80006e0:	721a      	strb	r2, [r3, #8]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2201      	movs	r2, #1
 80006e6:	725a      	strb	r2, [r3, #9]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2201      	movs	r2, #1
 80006ec:	729a      	strb	r2, [r3, #10]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2201      	movs	r2, #1
 80006f2:	72da      	strb	r2, [r3, #11]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4618      	mov	r0, r3
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <_ZN13DriveSettingsC1Ev>:
#define SRC_SETTINGS_DRIVESETTINGS_H_

#include "stdint.h"
#include "main.h"

class DriveSettings{
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	221f      	movs	r2, #31
 800070e:	701a      	strb	r2, [r3, #0]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2200      	movs	r2, #0
 8000714:	805a      	strh	r2, [r3, #2]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2200      	movs	r2, #0
 800071a:	809a      	strh	r2, [r3, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	80da      	strh	r2, [r3, #6]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2200      	movs	r2, #0
 8000726:	811a      	strh	r2, [r3, #8]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800072e:	815a      	strh	r2, [r3, #10]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2214      	movs	r2, #20
 8000734:	819a      	strh	r2, [r3, #12]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2264      	movs	r2, #100	; 0x64
 800073a:	81da      	strh	r2, [r3, #14]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8000742:	821a      	strh	r2, [r3, #16]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800074a:	825a      	strh	r2, [r3, #18]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2232      	movs	r2, #50	; 0x32
 8000750:	829a      	strh	r2, [r3, #20]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2264      	movs	r2, #100	; 0x64
 8000756:	82da      	strh	r2, [r3, #22]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800075e:	831a      	strh	r2, [r3, #24]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2200      	movs	r2, #0
 8000764:	769a      	strb	r2, [r3, #26]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2200      	movs	r2, #0
 800076a:	839a      	strh	r2, [r3, #28]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <_ZN7AppMainC1Ev>:
#include "AppMain.h"
#include "../Tools/Delay.h"

extern TIM_HandleTypeDef htim7;

AppMain::AppMain()
 800077a:	b590      	push	{r4, r7, lr}
 800077c:	b085      	sub	sp, #20
 800077e:	af02      	add	r7, sp, #8
 8000780:	6078      	str	r0, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4618      	mov	r0, r3
 8000786:	f001 fddd 	bl	8002344 <_ZN10RFM95_LoRaC1Ev>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	3320      	adds	r3, #32
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	819a      	strh	r2, [r3, #12]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3320      	adds	r3, #32
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff81 	bl	80006a4 <_ZN11TaskHandlerC1Ev>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80007a8:	2301      	movs	r3, #1
 80007aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ae:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80007b2:	f001 fd7e 	bl	80022b2 <_ZN3LEDC1EP12GPIO_TypeDeftb>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80007bc:	2301      	movs	r3, #1
 80007be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80007c6:	f001 fd74 	bl	80022b2 <_ZN3LEDC1EP12GPIO_TypeDeftb>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3340      	adds	r3, #64	; 0x40
 80007ce:	221e      	movs	r2, #30
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f00e fb2a 	bl	800ee2c <memset>
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3340      	adds	r3, #64	; 0x40
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff90 	bl	8000702 <_ZN13DriveSettingsC1Ev>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	335e      	adds	r3, #94	; 0x5e
 80007e6:	4618      	mov	r0, r3
 80007e8:	f002 fd57 	bl	800329a <_ZN11DriveStatusC1Ev>
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3367      	adds	r3, #103	; 0x67
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 fc0f 	bl	8003014 <_ZN12DriveCommandC1Ev>
 80007f6:	2030      	movs	r0, #48	; 0x30
 80007f8:	f00e faaf 	bl	800ed5a <_Znwj>
 80007fc:	4603      	mov	r3, r0
 80007fe:	461c      	mov	r4, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f103 0067 	add.w	r0, r3, #103	; 0x67
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	4603      	mov	r3, r0
 8000818:	4620      	mov	r0, r4
 800081a:	f7ff fe85 	bl	8000528 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	675c      	str	r4, [r3, #116]	; 0x74
 8000822:	2018      	movs	r0, #24
 8000824:	f00e fa99 	bl	800ed5a <_Znwj>
 8000828:	4603      	mov	r3, r0
 800082a:	461c      	mov	r4, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3367      	adds	r3, #103	; 0x67
 800083c:	4620      	mov	r0, r4
 800083e:	f7ff fe57 	bl	80004f0 <_ZN6USBComC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	679c      	str	r4, [r3, #120]	; 0x78
 8000846:	20a8      	movs	r0, #168	; 0xa8
 8000848:	f00e fa87 	bl	800ed5a <_Znwj>
 800084c:	4603      	mov	r3, r0
 800084e:	461c      	mov	r4, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3367      	adds	r3, #103	; 0x67
 8000860:	4620      	mov	r0, r4
 8000862:	f7ff fe8f 	bl	8000584 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	67dc      	str	r4, [r3, #124]	; 0x7c
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	335e      	adds	r3, #94	; 0x5e
 800087a:	461a      	mov	r2, r3
 800087c:	f001 fad8 	bl	8001e30 <_ZN5FlashC1EP13DriveSettingsP11DriveStatus>
{

}
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4618      	mov	r0, r3
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	bd90      	pop	{r4, r7, pc}
	...

0800088c <_ZN7AppMain7StartupEv>:

void AppMain::Startup()
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	Storage.ReadFlash();
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3380      	adds	r3, #128	; 0x80
 8000898:	4618      	mov	r0, r3
 800089a:	f001 fadc 	bl	8001e56 <_ZN5Flash9ReadFlashEv>

	HAL_TIM_Base_Start_IT(&htim7);
 800089e:	480d      	ldr	r0, [pc, #52]	; (80008d4 <_ZN7AppMain7StartupEv+0x48>)
 80008a0:	f009 fb16 	bl	8009ed0 <HAL_TIM_Base_Start_IT>

	LED_Green.OFF();
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3330      	adds	r3, #48	; 0x30
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fd1d 	bl	80022e8 <_ZN3LED3OFFEv>
	LED_Red.OFF();
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3338      	adds	r3, #56	; 0x38
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 fd18 	bl	80022e8 <_ZN3LED3OFFEv>

	if (!rfm95.InitRFM())
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f002 f92e 	bl	8002b1c <_ZN10RFM95_LoRa7InitRFMEv>
	{
		//ToDo set error
	}

	Delay::DWT_Init();
 80008c0:	f002 ff1c 	bl	80036fc <_ZN5Delay8DWT_InitEv>

	Main();
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f000 f807 	bl	80008d8 <_ZN7AppMain4MainEv>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000574 	.word	0x20000574

080008d8 <_ZN7AppMain4MainEv>:

void AppMain::Main()
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

	while (1)
	{

		if (taskStatus.isErrorTask())
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3320      	adds	r3, #32
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 feb7 	bl	8003658 <_ZN11TaskHandler11isErrorTaskEv>
		{
			//ToDo implement error class
		}

		if (taskStatus.isLEDUpdateTask())
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3320      	adds	r3, #32
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 fee8 	bl	80036c4 <_ZN11TaskHandler15isLEDUpdateTaskEv>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d004      	beq.n	8000904 <_ZN7AppMain4MainEv+0x2c>
		{
			LED_Green.Toggle();
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	3330      	adds	r3, #48	; 0x30
 80008fe:	4618      	mov	r0, r3
 8000900:	f001 fd0f 	bl	8002322 <_ZN3LED6ToggleEv>
		}

		if (taskStatus.isComTask())
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3320      	adds	r3, #32
 8000908:	4618      	mov	r0, r3
 800090a:	f002 fe6f 	bl	80035ec <_ZN11TaskHandler9isComTaskEv>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d012      	beq.n	800093a <_ZN7AppMain4MainEv+0x62>
		{
			rfm95COM->Transmitt();
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2200      	movs	r2, #0
 8000922:	2100      	movs	r1, #0
 8000924:	4798      	blx	r3
			rfm95COM->Receive();
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	3304      	adds	r3, #4
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	4798      	blx	r3
		}

		if (taskStatus.isIoUpdateTask())
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3320      	adds	r3, #32
 800093e:	4618      	mov	r0, r3
 8000940:	f002 fea5 	bl	800368e <_ZN11TaskHandler14isIoUpdateTaskEv>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d012      	beq.n	8000970 <_ZN7AppMain4MainEv+0x98>
		{
			ioCOM->Receive();
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	3304      	adds	r3, #4
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	4798      	blx	r3
			ioCOM->Transmitt();
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	4798      	blx	r3
		}

		if (taskStatus.isSaveTask())
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3320      	adds	r3, #32
 8000974:	4618      	mov	r0, r3
 8000976:	f002 fe54 	bl	8003622 <_ZN11TaskHandler10isSaveTaskEv>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d0af      	beq.n	80008e0 <_ZN7AppMain4MainEv+0x8>
		{
			Storage.SaveFlash();
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3380      	adds	r3, #128	; 0x80
 8000984:	4618      	mov	r0, r3
 8000986:	f001 fafb 	bl	8001f80 <_ZN5Flash9SaveFlashEv>
		if (taskStatus.isErrorTask())
 800098a:	e7a9      	b.n	80008e0 <_ZN7AppMain4MainEv+0x8>

0800098c <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>:
#include "BaseCOM.h"
#include "../AppMain/Defines.h"
#include "../Tools/CRC8.h"
#include "../Tools/TypeConverter.h"

BaseCOM::BaseCOM(DriveStatus *driveStatus, DriveSettings *driveSettings,
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
 8000998:	603b      	str	r3, [r7, #0]
		DriveCommand *driveCommand)
{
	this->driveSettings = driveSettings;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	605a      	str	r2, [r3, #4]
	this->driveCommand = driveCommand;
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	609a      	str	r2, [r3, #8]
}
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4618      	mov	r0, r3
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
	...

080009bc <_ZN7BaseCOM11GetSettingsEh>:


uint8_t* BaseCOM::GetSettings(uint8_t addr)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	460b      	mov	r3, r1
 80009c6:	70fb      	strb	r3, [r7, #3]

	data2send[0] = 0x1F;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	221f      	movs	r2, #31
 80009cc:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f002 faa8 	bl	8002f28 <_ZNK13DriveSettings16getDeviceAddressEv>
 80009d8:	4603      	mov	r3, r0
 80009da:	461a      	mov	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_SETTINGS;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2211      	movs	r2, #17
 80009e4:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	78fa      	ldrb	r2, [r7, #3]
 80009ea:	73da      	strb	r2, [r3, #15]

	switch (addr)
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	3b10      	subs	r3, #16
 80009f0:	2b10      	cmp	r3, #16
 80009f2:	f200 80d6 	bhi.w	8000ba2 <_ZN7BaseCOM11GetSettingsEh+0x1e6>
 80009f6:	a201      	add	r2, pc, #4	; (adr r2, 80009fc <_ZN7BaseCOM11GetSettingsEh+0x40>)
 80009f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009fc:	08000a41 	.word	0x08000a41
 8000a00:	08000a5f 	.word	0x08000a5f
 8000a04:	08000a7d 	.word	0x08000a7d
 8000a08:	08000a9b 	.word	0x08000a9b
 8000a0c:	08000ab9 	.word	0x08000ab9
 8000a10:	08000ad7 	.word	0x08000ad7
 8000a14:	08000af3 	.word	0x08000af3
 8000a18:	08000b11 	.word	0x08000b11
 8000a1c:	08000b2f 	.word	0x08000b2f
 8000a20:	08000b4d 	.word	0x08000b4d
 8000a24:	08000b6b 	.word	0x08000b6b
 8000a28:	08000ba3 	.word	0x08000ba3
 8000a2c:	08000ba3 	.word	0x08000ba3
 8000a30:	08000ba3 	.word	0x08000ba3
 8000a34:	08000ba3 	.word	0x08000ba3
 8000a38:	08000ba3 	.word	0x08000ba3
 8000a3c:	08000b89 	.word	0x08000b89
	{
		case TEACH_TORQUE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getTeachTroque(), 4);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 f9d0 	bl	8002df0 <_ZNK13DriveSettings14getTeachTroqueEv>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2204      	movs	r2, #4
 8000a54:	4619      	mov	r1, r3
 8000a56:	4620      	mov	r0, r4
 8000a58:	f002 fe92 	bl	8003780 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000a5c:	e0ab      	b.n	8000bb6 <_ZN7BaseCOM11GetSettingsEh+0x1fa>
		case TEACH_SPEED_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getTeachSpeed(), 4);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f002 f99a 	bl	8002da2 <_ZNK13DriveSettings13getTeachSpeedEv>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2204      	movs	r2, #4
 8000a72:	4619      	mov	r1, r3
 8000a74:	4620      	mov	r0, r4
 8000a76:	f002 fe83 	bl	8003780 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000a7a:	e09c      	b.n	8000bb6 <_ZN7BaseCOM11GetSettingsEh+0x1fa>
		case CLAMPING_TORQUE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getClampingTorque(), 4);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a86:	4618      	mov	r0, r3
 8000a88:	f002 f8a1 	bl	8002bce <_ZNK13DriveSettings17getClampingTorqueEv>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2204      	movs	r2, #4
 8000a90:	4619      	mov	r1, r3
 8000a92:	4620      	mov	r0, r4
 8000a94:	f002 fe74 	bl	8003780 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000a98:	e08d      	b.n	8000bb6 <_ZN7BaseCOM11GetSettingsEh+0x1fa>
		case CLAMPING_SPEED_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getClampingSpeed(), 4);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f002 f86b 	bl	8002b80 <_ZNK13DriveSettings16getClampingSpeedEv>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2204      	movs	r2, #4
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4620      	mov	r0, r4
 8000ab2:	f002 fe65 	bl	8003780 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000ab6:	e07e      	b.n	8000bb6 <_ZN7BaseCOM11GetSettingsEh+0x1fa>
		case SELF_SHUTDOWN_DELAY_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getSelfShutdownDelay(), 4);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f002 f946 	bl	8002d54 <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2204      	movs	r2, #4
 8000acc:	4619      	mov	r1, r3
 8000ace:	4620      	mov	r0, r4
 8000ad0:	f002 fe56 	bl	8003780 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000ad4:	e06f      	b.n	8000bb6 <_ZN7BaseCOM11GetSettingsEh+0x1fa>
		case IN_POS_DIFF_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getInPosDiff(), 4);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f002 f89b 	bl	8002c1c <_ZNK13DriveSettings12getInPosDiffEv>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2204      	movs	r2, #4
 8000aea:	4619      	mov	r1, r3
 8000aec:	4620      	mov	r0, r4
 8000aee:	f002 fe47 	bl	8003780 <_ZN13TypeConverter12uint16ToByteEPhth>
		case OPENING_DISTANCE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOpeningDistance(), 4);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000afc:	4618      	mov	r0, r3
 8000afe:	f002 f8b4 	bl	8002c6a <_ZNK13DriveSettings18getOpeningDistanceEv>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2204      	movs	r2, #4
 8000b06:	4619      	mov	r1, r3
 8000b08:	4620      	mov	r0, r4
 8000b0a:	f002 fe39 	bl	8003780 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b0e:	e052      	b.n	8000bb6 <_ZN7BaseCOM11GetSettingsEh+0x1fa>
		case UNDERVOLTAGE_WARNING_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getUnderVoltageWarning(),4);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f002 f9b6 	bl	8002e8c <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2204      	movs	r2, #4
 8000b24:	4619      	mov	r1, r3
 8000b26:	4620      	mov	r0, r4
 8000b28:	f002 fe2a 	bl	8003780 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b2c:	e043      	b.n	8000bb6 <_ZN7BaseCOM11GetSettingsEh+0x1fa>
		case UNDERVOLTAGE_ERROR_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getUnderVoltageError(), 4);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f002 f980 	bl	8002e3e <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2204      	movs	r2, #4
 8000b42:	4619      	mov	r1, r3
 8000b44:	4620      	mov	r0, r4
 8000b46:	f002 fe1b 	bl	8003780 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b4a:	e034      	b.n	8000bb6 <_ZN7BaseCOM11GetSettingsEh+0x1fa>
		case OVER_CURRENT_WARNING_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOverCurrentWarning(), 4);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000b56:	4618      	mov	r0, r3
 8000b58:	f002 f8d5 	bl	8002d06 <_ZNK13DriveSettings21getOverCurrentWarningEv>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2204      	movs	r2, #4
 8000b60:	4619      	mov	r1, r3
 8000b62:	4620      	mov	r0, r4
 8000b64:	f002 fe0c 	bl	8003780 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b68:	e025      	b.n	8000bb6 <_ZN7BaseCOM11GetSettingsEh+0x1fa>
		case OVER_CURRENT_ERROR_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOverCurrentError(), 4);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000b74:	4618      	mov	r0, r3
 8000b76:	f002 f9b0 	bl	8002eda <_ZNK13DriveSettings19getOverCurrentErrorEv>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2204      	movs	r2, #4
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4620      	mov	r0, r4
 8000b82:	f002 fdfd 	bl	8003780 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b86:	e016      	b.n	8000bb6 <_ZN7BaseCOM11GetSettingsEh+0x1fa>
		case DEVICE_ADDRESS_ADDR:
			data2send[4] = driveSettings->getDeviceAddress();
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f002 f9cb 	bl	8002f28 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000b92:	4603      	mov	r3, r0
 8000b94:	461a      	mov	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	741a      	strb	r2, [r3, #16]
			data2send[5] = 0;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	745a      	strb	r2, [r3, #17]
			break;
 8000ba0:	e009      	b.n	8000bb6 <_ZN7BaseCOM11GetSettingsEh+0x1fa>
		default:
			data2send[0] = 0x1D;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	221d      	movs	r2, #29
 8000ba6:	731a      	strb	r2, [r3, #12]
			data2send[4] = 0;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	741a      	strb	r2, [r3, #16]
			data2send[5] = 0;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	745a      	strb	r2, [r3, #17]
			break;
 8000bb4:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	330c      	adds	r3, #12
 8000bba:	2206      	movs	r2, #6
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f000 fbd4 	bl	800136c <_ZN7BaseCOM4CRC8EPhh>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	749a      	strb	r2, [r3, #18]
	data2send[7] = 0;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	74da      	strb	r2, [r3, #19]
	return data2send;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	330c      	adds	r3, #12
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd90      	pop	{r4, r7, pc}
 8000bde:	bf00      	nop

08000be0 <_ZN7BaseCOM9GetStatusEh>:


uint8_t* BaseCOM::GetStatus(uint8_t addr)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	460b      	mov	r3, r1
 8000bea:	70fb      	strb	r3, [r7, #3]

	data2send[0] = 0x1F;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	221f      	movs	r2, #31
 8000bf0:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f002 f996 	bl	8002f28 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	461a      	mov	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_STATUS;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2213      	movs	r2, #19
 8000c08:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	78fa      	ldrb	r2, [r7, #3]
 8000c0e:	73da      	strb	r2, [r3, #15]

	switch (addr)
 8000c10:	78fb      	ldrb	r3, [r7, #3]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	2b07      	cmp	r3, #7
 8000c16:	d863      	bhi.n	8000ce0 <_ZN7BaseCOM9GetStatusEh+0x100>
 8000c18:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <_ZN7BaseCOM9GetStatusEh+0x40>)
 8000c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1e:	bf00      	nop
 8000c20:	08000c41 	.word	0x08000c41
 8000c24:	08000c55 	.word	0x08000c55
 8000c28:	08000c69 	.word	0x08000c69
 8000c2c:	08000c7d 	.word	0x08000c7d
 8000c30:	08000c91 	.word	0x08000c91
 8000c34:	08000ca5 	.word	0x08000ca5
 8000c38:	08000cb9 	.word	0x08000cb9
 8000c3c:	08000ccd 	.word	0x08000ccd
	{
		case CLOSE_ADDR:
			data2send[4] = driveStatus->isClose();
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f002 fb36 	bl	80032b6 <_ZN11DriveStatus7isCloseEv>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	741a      	strb	r2, [r3, #16]
			break;
 8000c52:	e049      	b.n	8000ce8 <_ZN7BaseCOM9GetStatusEh+0x108>
		case OPEN_ADDR:
			data2send[4] = driveStatus->isOpen();
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f002 fb4f 	bl	80032fc <_ZN11DriveStatus6isOpenEv>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	461a      	mov	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	741a      	strb	r2, [r3, #16]
			break;
 8000c66:	e03f      	b.n	8000ce8 <_ZN7BaseCOM9GetStatusEh+0x108>
		case TEACH_ADDR:
			data2send[4] = driveStatus->isTeach();
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f002 fbf4 	bl	800345a <_ZN11DriveStatus7isTeachEv>
 8000c72:	4603      	mov	r3, r0
 8000c74:	461a      	mov	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	741a      	strb	r2, [r3, #16]
			break;
 8000c7a:	e035      	b.n	8000ce8 <_ZN7BaseCOM9GetStatusEh+0x108>
		case RESET_ADDR:
			data2send[4] = driveStatus->isReset();
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f002 fba4 	bl	80033ce <_ZN11DriveStatus7isResetEv>
 8000c86:	4603      	mov	r3, r0
 8000c88:	461a      	mov	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	741a      	strb	r2, [r3, #16]
			break;
 8000c8e:	e02b      	b.n	8000ce8 <_ZN7BaseCOM9GetStatusEh+0x108>
		case ENABLE_ADDR:
			data2send[4] = driveStatus->isEnable();
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 fb77 	bl	8003388 <_ZN11DriveStatus8isEnableEv>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	741a      	strb	r2, [r3, #16]
			break;
 8000ca2:	e021      	b.n	8000ce8 <_ZN7BaseCOM9GetStatusEh+0x108>
		case DISABLE_ADDR:
			data2send[4] = driveStatus->isDisable();
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 fb4a 	bl	8003342 <_ZN11DriveStatus9isDisableEv>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	741a      	strb	r2, [r3, #16]
			break;
 8000cb6:	e017      	b.n	8000ce8 <_ZN7BaseCOM9GetStatusEh+0x108>
		case STOP_ADDR:
			data2send[4] = driveStatus->isStop();
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 fba9 	bl	8003414 <_ZN11DriveStatus6isStopEv>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	741a      	strb	r2, [r3, #16]
			break;
 8000cca:	e00d      	b.n	8000ce8 <_ZN7BaseCOM9GetStatusEh+0x108>
		case ERROR_ADDR:
			data2send[4] = driveStatus->getError();
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f002 fbe5 	bl	80034a0 <_ZN11DriveStatus8getErrorEv>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	461a      	mov	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	741a      	strb	r2, [r3, #16]
			break;
 8000cde:	e003      	b.n	8000ce8 <_ZN7BaseCOM9GetStatusEh+0x108>
		default:
			data2send[0] = 0x1D;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	221d      	movs	r2, #29
 8000ce4:	731a      	strb	r2, [r3, #12]
			break;
 8000ce6:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	330c      	adds	r3, #12
 8000cec:	2206      	movs	r2, #6
 8000cee:	4619      	mov	r1, r3
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 fb3b 	bl	800136c <_ZN7BaseCOM4CRC8EPhh>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	749a      	strb	r2, [r3, #18]
	data2send[7] = 0;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	74da      	strb	r2, [r3, #19]
	return data2send;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	330c      	adds	r3, #12
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <_ZN7BaseCOM10GetCommandEh>:


uint8_t* BaseCOM::GetCommand(uint8_t addr)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	70fb      	strb	r3, [r7, #3]
	data2send[0] = 0x1F;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	221f      	movs	r2, #31
 8000d20:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f002 f8fe 	bl	8002f28 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	461a      	mov	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_COMMAND;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2212      	movs	r2, #18
 8000d38:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	78fa      	ldrb	r2, [r7, #3]
 8000d3e:	73da      	strb	r2, [r3, #15]

	switch (addr)
 8000d40:	78fb      	ldrb	r3, [r7, #3]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	2b06      	cmp	r3, #6
 8000d46:	d857      	bhi.n	8000df8 <_ZN7BaseCOM10GetCommandEh+0xe8>
 8000d48:	a201      	add	r2, pc, #4	; (adr r2, 8000d50 <_ZN7BaseCOM10GetCommandEh+0x40>)
 8000d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4e:	bf00      	nop
 8000d50:	08000d6d 	.word	0x08000d6d
 8000d54:	08000d81 	.word	0x08000d81
 8000d58:	08000d95 	.word	0x08000d95
 8000d5c:	08000da9 	.word	0x08000da9
 8000d60:	08000dbd 	.word	0x08000dbd
 8000d64:	08000dd1 	.word	0x08000dd1
 8000d68:	08000de5 	.word	0x08000de5
	{
		case CLOSE_ADDR:
			data2send[4] = driveCommand->isClose();
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 f978 	bl	8003066 <_ZN12DriveCommand7isCloseEv>
 8000d76:	4603      	mov	r3, r0
 8000d78:	461a      	mov	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	741a      	strb	r2, [r3, #16]
			break;
 8000d7e:	e03f      	b.n	8000e00 <_ZN7BaseCOM10GetCommandEh+0xf0>
		case OPEN_ADDR:
			data2send[4] = driveCommand->isOpen();
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f002 f98e 	bl	80030a6 <_ZN12DriveCommand6isOpenEv>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	741a      	strb	r2, [r3, #16]
			break;
 8000d92:	e035      	b.n	8000e00 <_ZN7BaseCOM10GetCommandEh+0xf0>
		case TEACH_ADDR:
			data2send[4] = driveCommand->isTeach();
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f002 fa24 	bl	80031e6 <_ZN12DriveCommand7isTeachEv>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	461a      	mov	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	741a      	strb	r2, [r3, #16]
			break;
 8000da6:	e02b      	b.n	8000e00 <_ZN7BaseCOM10GetCommandEh+0xf0>
		case RESET_ADDR:
			data2send[4] = driveCommand->isReset();
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f002 f9da 	bl	8003166 <_ZN12DriveCommand7isResetEv>
 8000db2:	4603      	mov	r3, r0
 8000db4:	461a      	mov	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	741a      	strb	r2, [r3, #16]
			break;
 8000dba:	e021      	b.n	8000e00 <_ZN7BaseCOM10GetCommandEh+0xf0>
		case ENABLE_ADDR:
			data2send[4] = driveCommand->isEnable();
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f002 f9b0 	bl	8003126 <_ZN12DriveCommand8isEnableEv>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	461a      	mov	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	741a      	strb	r2, [r3, #16]
			break;
 8000dce:	e017      	b.n	8000e00 <_ZN7BaseCOM10GetCommandEh+0xf0>
		case DISABLE_ADDR:
			data2send[4] = driveCommand->isDisable();
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f002 f986 	bl	80030e6 <_ZN12DriveCommand9isDisableEv>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	461a      	mov	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	741a      	strb	r2, [r3, #16]
			break;
 8000de2:	e00d      	b.n	8000e00 <_ZN7BaseCOM10GetCommandEh+0xf0>
		case STOP_ADDR:
			data2send[4] = driveCommand->isStop();
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f002 f9dc 	bl	80031a6 <_ZN12DriveCommand6isStopEv>
 8000dee:	4603      	mov	r3, r0
 8000df0:	461a      	mov	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	741a      	strb	r2, [r3, #16]
			break;
 8000df6:	e003      	b.n	8000e00 <_ZN7BaseCOM10GetCommandEh+0xf0>
		default:
			data2send[0] = 0x1D;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	221d      	movs	r2, #29
 8000dfc:	731a      	strb	r2, [r3, #12]
			break;
 8000dfe:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	330c      	adds	r3, #12
 8000e04:	2206      	movs	r2, #6
 8000e06:	4619      	mov	r1, r3
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 faaf 	bl	800136c <_ZN7BaseCOM4CRC8EPhh>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	461a      	mov	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	749a      	strb	r2, [r3, #18]
	data2send[7] = 0;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	74da      	strb	r2, [r3, #19]
	return data2send;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	330c      	adds	r3, #12
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <_ZN7BaseCOM11SetSettingsEPh>:



void BaseCOM::SetSettings(uint8_t *data)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..5] = Payload
	//data[6] = crc

	uint16_t value = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	81fb      	strh	r3, [r7, #14]
	switch (data[3])
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	3303      	adds	r3, #3
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	3b10      	subs	r3, #16
 8000e3e:	2b45      	cmp	r3, #69	; 0x45
 8000e40:	f200 817b 	bhi.w	800113a <_ZN7BaseCOM11SetSettingsEPh+0x312>
 8000e44:	a201      	add	r2, pc, #4	; (adr r2, 8000e4c <_ZN7BaseCOM11SetSettingsEPh+0x24>)
 8000e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4a:	bf00      	nop
 8000e4c:	08000f65 	.word	0x08000f65
 8000e50:	08000f8d 	.word	0x08000f8d
 8000e54:	08000fb5 	.word	0x08000fb5
 8000e58:	08000fdd 	.word	0x08000fdd
 8000e5c:	080010a5 	.word	0x080010a5
 8000e60:	08001005 	.word	0x08001005
 8000e64:	0800102d 	.word	0x0800102d
 8000e68:	080010cd 	.word	0x080010cd
 8000e6c:	080010f5 	.word	0x080010f5
 8000e70:	08001055 	.word	0x08001055
 8000e74:	0800107d 	.word	0x0800107d
 8000e78:	0800113b 	.word	0x0800113b
 8000e7c:	0800113b 	.word	0x0800113b
 8000e80:	0800113b 	.word	0x0800113b
 8000e84:	0800113b 	.word	0x0800113b
 8000e88:	0800113b 	.word	0x0800113b
 8000e8c:	0800113b 	.word	0x0800113b
 8000e90:	0800113b 	.word	0x0800113b
 8000e94:	0800113b 	.word	0x0800113b
 8000e98:	0800113b 	.word	0x0800113b
 8000e9c:	0800113b 	.word	0x0800113b
 8000ea0:	0800113b 	.word	0x0800113b
 8000ea4:	0800113b 	.word	0x0800113b
 8000ea8:	0800113b 	.word	0x0800113b
 8000eac:	0800113b 	.word	0x0800113b
 8000eb0:	0800113b 	.word	0x0800113b
 8000eb4:	0800113b 	.word	0x0800113b
 8000eb8:	0800113b 	.word	0x0800113b
 8000ebc:	0800113b 	.word	0x0800113b
 8000ec0:	0800113b 	.word	0x0800113b
 8000ec4:	0800113b 	.word	0x0800113b
 8000ec8:	0800113b 	.word	0x0800113b
 8000ecc:	0800113b 	.word	0x0800113b
 8000ed0:	0800113b 	.word	0x0800113b
 8000ed4:	0800113b 	.word	0x0800113b
 8000ed8:	0800113b 	.word	0x0800113b
 8000edc:	0800113b 	.word	0x0800113b
 8000ee0:	0800113b 	.word	0x0800113b
 8000ee4:	0800113b 	.word	0x0800113b
 8000ee8:	0800113b 	.word	0x0800113b
 8000eec:	0800113b 	.word	0x0800113b
 8000ef0:	0800113b 	.word	0x0800113b
 8000ef4:	0800113b 	.word	0x0800113b
 8000ef8:	0800113b 	.word	0x0800113b
 8000efc:	0800113b 	.word	0x0800113b
 8000f00:	0800113b 	.word	0x0800113b
 8000f04:	0800113b 	.word	0x0800113b
 8000f08:	0800113b 	.word	0x0800113b
 8000f0c:	0800113b 	.word	0x0800113b
 8000f10:	0800113b 	.word	0x0800113b
 8000f14:	0800113b 	.word	0x0800113b
 8000f18:	0800113b 	.word	0x0800113b
 8000f1c:	0800113b 	.word	0x0800113b
 8000f20:	0800113b 	.word	0x0800113b
 8000f24:	0800113b 	.word	0x0800113b
 8000f28:	0800113b 	.word	0x0800113b
 8000f2c:	0800113b 	.word	0x0800113b
 8000f30:	0800113b 	.word	0x0800113b
 8000f34:	0800113b 	.word	0x0800113b
 8000f38:	0800113b 	.word	0x0800113b
 8000f3c:	0800113b 	.word	0x0800113b
 8000f40:	0800113b 	.word	0x0800113b
 8000f44:	0800113b 	.word	0x0800113b
 8000f48:	0800113b 	.word	0x0800113b
 8000f4c:	0800113b 	.word	0x0800113b
 8000f50:	0800113b 	.word	0x0800113b
 8000f54:	0800113b 	.word	0x0800113b
 8000f58:	0800113b 	.word	0x0800113b
 8000f5c:	0800113b 	.word	0x0800113b
 8000f60:	0800111d 	.word	0x0800111d
	{
		case TEACH_TORQUE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	3305      	adds	r3, #5
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	01db      	lsls	r3, r3, #7
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	3304      	adds	r3, #4
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b21b      	sxth	r3, r3
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	81fb      	strh	r3, [r7, #14]
			driveSettings->setTeachTroque(value);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	89fa      	ldrh	r2, [r7, #14]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 ff3f 	bl	8002e08 <_ZN13DriveSettings14setTeachTroqueEt>
			break;
 8000f8a:	e0d7      	b.n	800113c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case TEACH_SPEED_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	3305      	adds	r3, #5
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	01db      	lsls	r3, r3, #7
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	81fb      	strh	r3, [r7, #14]
			driveSettings->setTeachSpeed(value);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	89fa      	ldrh	r2, [r7, #14]
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f001 ff04 	bl	8002dba <_ZN13DriveSettings13setTeachSpeedEt>
			break;
 8000fb2:	e0c3      	b.n	800113c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case CLAMPING_TORQUE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	3305      	adds	r3, #5
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	01db      	lsls	r3, r3, #7
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	81fb      	strh	r3, [r7, #14]
			driveSettings->setClampingTorque(value);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	89fa      	ldrh	r2, [r7, #14]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 fe06 	bl	8002be6 <_ZN13DriveSettings17setClampingTorqueEt>
			break;
 8000fda:	e0af      	b.n	800113c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case CLAMPING_SPEED_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	3305      	adds	r3, #5
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	01db      	lsls	r3, r3, #7
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	81fb      	strh	r3, [r7, #14]
			driveSettings->setClampingSpeed(value);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	89fa      	ldrh	r2, [r7, #14]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f001 fdcb 	bl	8002b98 <_ZN13DriveSettings16setClampingSpeedEt>
			break;
 8001002:	e09b      	b.n	800113c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case IN_POS_DIFF_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	3305      	adds	r3, #5
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	01db      	lsls	r3, r3, #7
 800100c:	b21a      	sxth	r2, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	3304      	adds	r3, #4
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b21b      	sxth	r3, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	b21b      	sxth	r3, r3
 800101a:	81fb      	strh	r3, [r7, #14]
			driveSettings->setInPosDiff(value);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	89fa      	ldrh	r2, [r7, #14]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f001 fe05 	bl	8002c34 <_ZN13DriveSettings12setInPosDiffEt>
			break;
 800102a:	e087      	b.n	800113c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case OPENING_DISTANCE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	3305      	adds	r3, #5
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	01db      	lsls	r3, r3, #7
 8001034:	b21a      	sxth	r2, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	3304      	adds	r3, #4
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21b      	sxth	r3, r3
 8001042:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOpeningDistance(value);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	89fa      	ldrh	r2, [r7, #14]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f001 fe18 	bl	8002c82 <_ZN13DriveSettings18setOpeningDistanceEt>
			break;
 8001052:	e073      	b.n	800113c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case OVER_CURRENT_WARNING_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	3305      	adds	r3, #5
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	01db      	lsls	r3, r3, #7
 800105c:	b21a      	sxth	r2, r3
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	3304      	adds	r3, #4
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21b      	sxth	r3, r3
 800106a:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOverCurrentWarning(value);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	89fa      	ldrh	r2, [r7, #14]
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f001 fe52 	bl	8002d1e <_ZN13DriveSettings21setOverCurrentWarningEt>
			break;
 800107a:	e05f      	b.n	800113c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case OVER_CURRENT_ERROR_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	3305      	adds	r3, #5
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	01db      	lsls	r3, r3, #7
 8001084:	b21a      	sxth	r2, r3
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	3304      	adds	r3, #4
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21b      	sxth	r3, r3
 8001092:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOverCurrentError(value);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	89fa      	ldrh	r2, [r7, #14]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f001 ff28 	bl	8002ef2 <_ZN13DriveSettings19setOverCurrentErrorEt>
			break;
 80010a2:	e04b      	b.n	800113c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case SELF_SHUTDOWN_DELAY_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	3305      	adds	r3, #5
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	01db      	lsls	r3, r3, #7
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	3304      	adds	r3, #4
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	81fb      	strh	r3, [r7, #14]
			driveSettings->setSelfShutdownDelay(value);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	89fa      	ldrh	r2, [r7, #14]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f001 fe51 	bl	8002d6c <_ZN13DriveSettings20setSelfShutdownDelayEt>
			break;
 80010ca:	e037      	b.n	800113c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case UNDERVOLTAGE_WARNING_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	3305      	adds	r3, #5
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	01db      	lsls	r3, r3, #7
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	3304      	adds	r3, #4
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	81fb      	strh	r3, [r7, #14]
			driveSettings->setUnderVoltageWarning(value);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	89fa      	ldrh	r2, [r7, #14]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fed9 	bl	8002ea4 <_ZN13DriveSettings22setUnderVoltageWarningEt>
			break;
 80010f2:	e023      	b.n	800113c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case UNDERVOLTAGE_ERROR_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	3305      	adds	r3, #5
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	01db      	lsls	r3, r3, #7
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	3304      	adds	r3, #4
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b21b      	sxth	r3, r3
 8001106:	4313      	orrs	r3, r2
 8001108:	b21b      	sxth	r3, r3
 800110a:	81fb      	strh	r3, [r7, #14]
			driveSettings->setUnderVoltageError(value);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	89fa      	ldrh	r2, [r7, #14]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f001 fe9e 	bl	8002e56 <_ZN13DriveSettings20setUnderVoltageErrorEt>
			break;
 800111a:	e00f      	b.n	800113c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case SAVE_SETTINGS_ADDR:
			driveSettings->setSaveSettings(data[4] != 0);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	3304      	adds	r3, #4
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	bf14      	ite	ne
 800112a:	2301      	movne	r3, #1
 800112c:	2300      	moveq	r3, #0
 800112e:	b2db      	uxtb	r3, r3
 8001130:	4619      	mov	r1, r3
 8001132:	4610      	mov	r0, r2
 8001134:	f001 ff24 	bl	8002f80 <_ZN13DriveSettings15setSaveSettingsEb>
			break;
 8001138:	e000      	b.n	800113c <_ZN7BaseCOM11SetSettingsEPh+0x314>
		default:
			break;
 800113a:	bf00      	nop
	}
}
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <_ZN7BaseCOM9SetStatusEPh>:

void BaseCOM::SetStatus(uint8_t *data)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	switch (data[3])
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	3303      	adds	r3, #3
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	3b01      	subs	r3, #1
 8001156:	2b06      	cmp	r3, #6
 8001158:	d879      	bhi.n	800124e <_ZN7BaseCOM9SetStatusEPh+0x10a>
 800115a:	a201      	add	r2, pc, #4	; (adr r2, 8001160 <_ZN7BaseCOM9SetStatusEPh+0x1c>)
 800115c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001160:	0800117d 	.word	0x0800117d
 8001164:	0800119b 	.word	0x0800119b
 8001168:	080011b9 	.word	0x080011b9
 800116c:	080011d7 	.word	0x080011d7
 8001170:	080011f5 	.word	0x080011f5
 8001174:	08001213 	.word	0x08001213
 8001178:	08001231 	.word	0x08001231
	{
		case CLOSE_ADDR:
			driveStatus->setClose(data[4] == 0x01);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	3304      	adds	r3, #4
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b01      	cmp	r3, #1
 8001188:	bf0c      	ite	eq
 800118a:	2301      	moveq	r3, #1
 800118c:	2300      	movne	r3, #0
 800118e:	b2db      	uxtb	r3, r3
 8001190:	4619      	mov	r1, r3
 8001192:	4610      	mov	r0, r2
 8001194:	f002 f89b 	bl	80032ce <_ZN11DriveStatus8setCloseEb>
			break;
 8001198:	e05a      	b.n	8001250 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case OPEN_ADDR:
			driveStatus->setOpen(data[4] == 0x01);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	3304      	adds	r3, #4
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	bf0c      	ite	eq
 80011a8:	2301      	moveq	r3, #1
 80011aa:	2300      	movne	r3, #0
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	4619      	mov	r1, r3
 80011b0:	4610      	mov	r0, r2
 80011b2:	f002 f8af 	bl	8003314 <_ZN11DriveStatus7setOpenEb>
			break;
 80011b6:	e04b      	b.n	8001250 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case TEACH_ADDR:
			driveStatus->setTeach(data[4] == 0x01);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	3304      	adds	r3, #4
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	bf0c      	ite	eq
 80011c6:	2301      	moveq	r3, #1
 80011c8:	2300      	movne	r3, #0
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	4619      	mov	r1, r3
 80011ce:	4610      	mov	r0, r2
 80011d0:	f002 f94f 	bl	8003472 <_ZN11DriveStatus8setTeachEb>
			break;
 80011d4:	e03c      	b.n	8001250 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case RESET_ADDR:
			driveStatus->setReset(data[4] == 0x01);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	3304      	adds	r3, #4
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	bf0c      	ite	eq
 80011e4:	2301      	moveq	r3, #1
 80011e6:	2300      	movne	r3, #0
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	4619      	mov	r1, r3
 80011ec:	4610      	mov	r0, r2
 80011ee:	f002 f8fa 	bl	80033e6 <_ZN11DriveStatus8setResetEb>
			break;
 80011f2:	e02d      	b.n	8001250 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case ENABLE_ADDR:
			driveStatus->setEnable(data[4] == 0x01);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	3304      	adds	r3, #4
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	bf0c      	ite	eq
 8001202:	2301      	moveq	r3, #1
 8001204:	2300      	movne	r3, #0
 8001206:	b2db      	uxtb	r3, r3
 8001208:	4619      	mov	r1, r3
 800120a:	4610      	mov	r0, r2
 800120c:	f002 f8c8 	bl	80033a0 <_ZN11DriveStatus9setEnableEb>
			break;
 8001210:	e01e      	b.n	8001250 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case DISABLE_ADDR:
			driveStatus->setDisable(data[4] == 0x01);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	3304      	adds	r3, #4
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b01      	cmp	r3, #1
 800121e:	bf0c      	ite	eq
 8001220:	2301      	moveq	r3, #1
 8001222:	2300      	movne	r3, #0
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4619      	mov	r1, r3
 8001228:	4610      	mov	r0, r2
 800122a:	f002 f896 	bl	800335a <_ZN11DriveStatus10setDisableEb>
			break;
 800122e:	e00f      	b.n	8001250 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case STOP_ADDR:
			driveStatus->setStop(data[4] == 0x01);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	3304      	adds	r3, #4
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b01      	cmp	r3, #1
 800123c:	bf0c      	ite	eq
 800123e:	2301      	moveq	r3, #1
 8001240:	2300      	movne	r3, #0
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4619      	mov	r1, r3
 8001246:	4610      	mov	r0, r2
 8001248:	f002 f8f0 	bl	800342c <_ZN11DriveStatus7setStopEb>
			break;
 800124c:	e000      	b.n	8001250 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		default:
			break;
 800124e:	bf00      	nop
	}
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <_ZN7BaseCOM10SetCommandEPh>:

void BaseCOM::SetCommand(uint8_t *data)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	switch (data[3])
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	3303      	adds	r3, #3
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	3b01      	subs	r3, #1
 800126a:	2b06      	cmp	r3, #6
 800126c:	d879      	bhi.n	8001362 <_ZN7BaseCOM10SetCommandEPh+0x10a>
 800126e:	a201      	add	r2, pc, #4	; (adr r2, 8001274 <_ZN7BaseCOM10SetCommandEPh+0x1c>)
 8001270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001274:	08001291 	.word	0x08001291
 8001278:	080012af 	.word	0x080012af
 800127c:	080012cd 	.word	0x080012cd
 8001280:	080012eb 	.word	0x080012eb
 8001284:	08001309 	.word	0x08001309
 8001288:	08001327 	.word	0x08001327
 800128c:	08001345 	.word	0x08001345
	{
		case CLOSE_ADDR:
			driveCommand->setClose(data[4] == 0x01);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	3304      	adds	r3, #4
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b01      	cmp	r3, #1
 800129c:	bf0c      	ite	eq
 800129e:	2301      	moveq	r3, #1
 80012a0:	2300      	movne	r3, #0
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	4619      	mov	r1, r3
 80012a6:	4610      	mov	r0, r2
 80012a8:	f001 feee 	bl	8003088 <_ZN12DriveCommand8setCloseEb>
			break;
 80012ac:	e05a      	b.n	8001364 <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case OPEN_ADDR:
			driveCommand->setOpen(data[4] == 0x01);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	3304      	adds	r3, #4
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	bf0c      	ite	eq
 80012bc:	2301      	moveq	r3, #1
 80012be:	2300      	movne	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	4619      	mov	r1, r3
 80012c4:	4610      	mov	r0, r2
 80012c6:	f001 feff 	bl	80030c8 <_ZN12DriveCommand7setOpenEb>
			break;
 80012ca:	e04b      	b.n	8001364 <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case TEACH_ADDR:
			driveCommand->setTeach(data[4] == 0x01);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	3304      	adds	r3, #4
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	bf0c      	ite	eq
 80012da:	2301      	moveq	r3, #1
 80012dc:	2300      	movne	r3, #0
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4619      	mov	r1, r3
 80012e2:	4610      	mov	r0, r2
 80012e4:	f001 ff90 	bl	8003208 <_ZN12DriveCommand8setTeachEb>
			break;
 80012e8:	e03c      	b.n	8001364 <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case RESET_ADDR:
			driveCommand->setReset(data[4] == 0x01);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	3304      	adds	r3, #4
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	bf0c      	ite	eq
 80012f8:	2301      	moveq	r3, #1
 80012fa:	2300      	movne	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	4619      	mov	r1, r3
 8001300:	4610      	mov	r0, r2
 8001302:	f001 ff41 	bl	8003188 <_ZN12DriveCommand8setResetEb>
			break;
 8001306:	e02d      	b.n	8001364 <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case ENABLE_ADDR:
			driveCommand->setEnable(data[4] == 0x01);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	3304      	adds	r3, #4
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b01      	cmp	r3, #1
 8001314:	bf0c      	ite	eq
 8001316:	2301      	moveq	r3, #1
 8001318:	2300      	movne	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	4619      	mov	r1, r3
 800131e:	4610      	mov	r0, r2
 8001320:	f001 ff12 	bl	8003148 <_ZN12DriveCommand9setEnableEb>
			break;
 8001324:	e01e      	b.n	8001364 <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case DISABLE_ADDR:
			driveCommand->setDisable(data[4] == 0x01);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	3304      	adds	r3, #4
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	bf0c      	ite	eq
 8001334:	2301      	moveq	r3, #1
 8001336:	2300      	movne	r3, #0
 8001338:	b2db      	uxtb	r3, r3
 800133a:	4619      	mov	r1, r3
 800133c:	4610      	mov	r0, r2
 800133e:	f001 fee3 	bl	8003108 <_ZN12DriveCommand10setDisableEb>
			break;
 8001342:	e00f      	b.n	8001364 <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case STOP_ADDR:
			driveCommand->setStop(data[4] == 0x01);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	3304      	adds	r3, #4
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b01      	cmp	r3, #1
 8001350:	bf0c      	ite	eq
 8001352:	2301      	moveq	r3, #1
 8001354:	2300      	movne	r3, #0
 8001356:	b2db      	uxtb	r3, r3
 8001358:	4619      	mov	r1, r3
 800135a:	4610      	mov	r0, r2
 800135c:	f001 ff34 	bl	80031c8 <_ZN12DriveCommand7setStopEb>
			break;
 8001360:	e000      	b.n	8001364 <_ZN7BaseCOM10SetCommandEPh+0x10c>
		default:
			break;
 8001362:	bf00      	nop
	}
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <_ZN7BaseCOM4CRC8EPhh>:




uint8_t BaseCOM::CRC8(uint8_t *data, uint8_t length)
{
 800136c:	b480      	push	{r7}
 800136e:	b089      	sub	sp, #36	; 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	4613      	mov	r3, r2
 8001378:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0xff;
 800137a:	23ff      	movs	r3, #255	; 0xff
 800137c:	77fb      	strb	r3, [r7, #31]
	size_t i, j;
	for (i = 0; i < length; i++)
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	429a      	cmp	r2, r3
 8001388:	d222      	bcs.n	80013d0 <_ZN7BaseCOM4CRC8EPhh+0x64>
	{
		crc ^= data[i];
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	4413      	add	r3, r2
 8001390:	781a      	ldrb	r2, [r3, #0]
 8001392:	7ffb      	ldrb	r3, [r7, #31]
 8001394:	4053      	eors	r3, r2
 8001396:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	2b07      	cmp	r3, #7
 80013a0:	d812      	bhi.n	80013c8 <_ZN7BaseCOM4CRC8EPhh+0x5c>
		{
			if ((crc & 0x80) != 0)
 80013a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	da07      	bge.n	80013ba <_ZN7BaseCOM4CRC8EPhh+0x4e>
				crc = (uint8_t) ((crc << 1) ^ 0x31);
 80013aa:	7ffb      	ldrb	r3, [r7, #31]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	77fb      	strb	r3, [r7, #31]
 80013b8:	e002      	b.n	80013c0 <_ZN7BaseCOM4CRC8EPhh+0x54>
			else
				crc <<= 1;
 80013ba:	7ffb      	ldrb	r3, [r7, #31]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	3301      	adds	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	e7e9      	b.n	800139c <_ZN7BaseCOM4CRC8EPhh+0x30>
	for (i = 0; i < length; i++)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	3301      	adds	r3, #1
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	e7d8      	b.n	8001382 <_ZN7BaseCOM4CRC8EPhh+0x16>
		}
	}
	return crc;
 80013d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <_ZN5IOCom9TransmittEPhh>:
/// Set IO output pins, this function is called by the main function through the task handler
/// @param data
/// @param length
/// @return
bool IOCom::Transmitt(uint8_t *data, uint8_t length)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	60f8      	str	r0, [r7, #12]
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	4613      	mov	r3, r2
 80013ea:	71fb      	strb	r3, [r7, #7]
	// data[4..n] = Payload
	// data[5] = crc



	this->driveStatus->isEnable() == true ? Out1.Set() : Out1.Reset();
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80013f2:	4618      	mov	r0, r3
 80013f4:	f001 ffc8 	bl	8003388 <_ZN11DriveStatus8isEnableEv>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d105      	bne.n	800140a <_ZN5IOCom9TransmittEPhh+0x2c>
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	3318      	adds	r3, #24
 8001402:	4618      	mov	r0, r3
 8001404:	f000 ff19 	bl	800223a <_ZN10DigitalOut3SetEv>
 8001408:	e004      	b.n	8001414 <_ZN5IOCom9TransmittEPhh+0x36>
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	3318      	adds	r3, #24
 800140e:	4618      	mov	r0, r3
 8001410:	f000 ff31 	bl	8002276 <_ZN10DigitalOut5ResetEv>
	this->driveStatus->isOpen() == true ? Out2.Set() : Out2.Reset();
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800141a:	4618      	mov	r0, r3
 800141c:	f001 ff6e 	bl	80032fc <_ZN11DriveStatus6isOpenEv>
 8001420:	4603      	mov	r3, r0
 8001422:	2b01      	cmp	r3, #1
 8001424:	d105      	bne.n	8001432 <_ZN5IOCom9TransmittEPhh+0x54>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	3328      	adds	r3, #40	; 0x28
 800142a:	4618      	mov	r0, r3
 800142c:	f000 ff05 	bl	800223a <_ZN10DigitalOut3SetEv>
 8001430:	e004      	b.n	800143c <_ZN5IOCom9TransmittEPhh+0x5e>
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	3328      	adds	r3, #40	; 0x28
 8001436:	4618      	mov	r0, r3
 8001438:	f000 ff1d 	bl	8002276 <_ZN10DigitalOut5ResetEv>
	this->driveStatus->isClose() == true ? Out3.Set() : Out3.Reset();
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001442:	4618      	mov	r0, r3
 8001444:	f001 ff37 	bl	80032b6 <_ZN11DriveStatus7isCloseEv>
 8001448:	4603      	mov	r3, r0
 800144a:	2b01      	cmp	r3, #1
 800144c:	d105      	bne.n	800145a <_ZN5IOCom9TransmittEPhh+0x7c>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	3338      	adds	r3, #56	; 0x38
 8001452:	4618      	mov	r0, r3
 8001454:	f000 fef1 	bl	800223a <_ZN10DigitalOut3SetEv>
 8001458:	e004      	b.n	8001464 <_ZN5IOCom9TransmittEPhh+0x86>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3338      	adds	r3, #56	; 0x38
 800145e:	4618      	mov	r0, r3
 8001460:	f000 ff09 	bl	8002276 <_ZN10DigitalOut5ResetEv>
	this->driveStatus->isStop() == true ? Out4.Set() : Out4.Reset();
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800146a:	4618      	mov	r0, r3
 800146c:	f001 ffd2 	bl	8003414 <_ZN11DriveStatus6isStopEv>
 8001470:	4603      	mov	r3, r0
 8001472:	2b01      	cmp	r3, #1
 8001474:	d105      	bne.n	8001482 <_ZN5IOCom9TransmittEPhh+0xa4>
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	3348      	adds	r3, #72	; 0x48
 800147a:	4618      	mov	r0, r3
 800147c:	f000 fedd 	bl	800223a <_ZN10DigitalOut3SetEv>
 8001480:	e004      	b.n	800148c <_ZN5IOCom9TransmittEPhh+0xae>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	3348      	adds	r3, #72	; 0x48
 8001486:	4618      	mov	r0, r3
 8001488:	f000 fef5 	bl	8002276 <_ZN10DigitalOut5ResetEv>
	this->driveStatus->isTeach() == true ? Out5.Set() : Out5.Reset();
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001492:	4618      	mov	r0, r3
 8001494:	f001 ffe1 	bl	800345a <_ZN11DriveStatus7isTeachEv>
 8001498:	4603      	mov	r3, r0
 800149a:	2b01      	cmp	r3, #1
 800149c:	d105      	bne.n	80014aa <_ZN5IOCom9TransmittEPhh+0xcc>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3358      	adds	r3, #88	; 0x58
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 fec9 	bl	800223a <_ZN10DigitalOut3SetEv>
 80014a8:	e004      	b.n	80014b4 <_ZN5IOCom9TransmittEPhh+0xd6>
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3358      	adds	r3, #88	; 0x58
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 fee1 	bl	8002276 <_ZN10DigitalOut5ResetEv>

	uint8_t errorTemp = (uint8_t)this->driveStatus->getError();
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80014ba:	4618      	mov	r0, r3
 80014bc:	f001 fff0 	bl	80034a0 <_ZN11DriveStatus8getErrorEv>
 80014c0:	4603      	mov	r3, r0
 80014c2:	75fb      	strb	r3, [r7, #23]
	(bool)(errorTemp & 0x01) == true ? Out6.Set() : Out6.Reset();
 80014c4:	7dfb      	ldrb	r3, [r7, #23]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bf14      	ite	ne
 80014ce:	2301      	movne	r3, #1
 80014d0:	2300      	moveq	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d105      	bne.n	80014e4 <_ZN5IOCom9TransmittEPhh+0x106>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	3368      	adds	r3, #104	; 0x68
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 feac 	bl	800223a <_ZN10DigitalOut3SetEv>
 80014e2:	e004      	b.n	80014ee <_ZN5IOCom9TransmittEPhh+0x110>
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3368      	adds	r3, #104	; 0x68
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 fec4 	bl	8002276 <_ZN10DigitalOut5ResetEv>
	(bool)(errorTemp & 0x02) == true ? Out7.Set() : Out7.Reset();
 80014ee:	7dfb      	ldrb	r3, [r7, #23]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bf14      	ite	ne
 80014f8:	2301      	movne	r3, #1
 80014fa:	2300      	moveq	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d105      	bne.n	800150e <_ZN5IOCom9TransmittEPhh+0x130>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	3378      	adds	r3, #120	; 0x78
 8001506:	4618      	mov	r0, r3
 8001508:	f000 fe97 	bl	800223a <_ZN10DigitalOut3SetEv>
 800150c:	e004      	b.n	8001518 <_ZN5IOCom9TransmittEPhh+0x13a>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3378      	adds	r3, #120	; 0x78
 8001512:	4618      	mov	r0, r3
 8001514:	f000 feaf 	bl	8002276 <_ZN10DigitalOut5ResetEv>
	(bool)(errorTemp & 0x04) == true ? Out8.Set() : Out8.Reset();
 8001518:	7dfb      	ldrb	r3, [r7, #23]
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	2b00      	cmp	r3, #0
 8001520:	bf14      	ite	ne
 8001522:	2301      	movne	r3, #1
 8001524:	2300      	moveq	r3, #0
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b01      	cmp	r3, #1
 800152a:	d105      	bne.n	8001538 <_ZN5IOCom9TransmittEPhh+0x15a>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	3388      	adds	r3, #136	; 0x88
 8001530:	4618      	mov	r0, r3
 8001532:	f000 fe82 	bl	800223a <_ZN10DigitalOut3SetEv>
 8001536:	e004      	b.n	8001542 <_ZN5IOCom9TransmittEPhh+0x164>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	3388      	adds	r3, #136	; 0x88
 800153c:	4618      	mov	r0, r3
 800153e:	f000 fe9a 	bl	8002276 <_ZN10DigitalOut5ResetEv>

	return true;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <_ZN5IOCom7ReceiveEPhh>:
/// Read IO input pins, this function is called by the main function through the task handler
/// @param data
/// @param length
/// @return
bool IOCom::Receive(uint8_t *data, uint8_t length)
{
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	4613      	mov	r3, r2
 8001558:	71fb      	strb	r3, [r7, #7]
	configeWriteStatus = CONFIG_WRITE;
 800155a:	2102      	movs	r1, #2
 800155c:	4869      	ldr	r0, [pc, #420]	; (8001704 <_ZN5IOCom7ReceiveEPhh+0x1b8>)
 800155e:	f004 ff39 	bl	80063d4 <HAL_GPIO_ReadPin>
 8001562:	4603      	mov	r3, r0
 8001564:	2b01      	cmp	r3, #1
 8001566:	bf0c      	ite	eq
 8001568:	2301      	moveq	r3, #1
 800156a:	2300      	movne	r3, #0
 800156c:	b2da      	uxtb	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

	if (configeWriteStatus == previousConfigeWriteStatus)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8001580:	429a      	cmp	r2, r3
 8001582:	d116      	bne.n	80015b2 <_ZN5IOCom7ReceiveEPhh+0x66>
	{
		
		if (IO_TIMEOUT / IO_UPDATE_TIME >= timeoutCounter)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800158a:	2b06      	cmp	r3, #6
 800158c:	d808      	bhi.n	80015a0 <_ZN5IOCom7ReceiveEPhh+0x54>
		{
			timeoutCounter = 0;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2200      	movs	r2, #0
 8001592:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
			counter = 0;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 800159e:	e00c      	b.n	80015ba <_ZN5IOCom7ReceiveEPhh+0x6e>
		}else{
			timeoutCounter++;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80015a6:	3301      	adds	r3, #1
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 80015b0:	e003      	b.n	80015ba <_ZN5IOCom7ReceiveEPhh+0x6e>
		}
	}
	else
	{
		timeoutCounter=0;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	}

	if (configeWriteStatus && !previousConfigeWriteStatus)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 8094 	beq.w	80016ee <_ZN5IOCom7ReceiveEPhh+0x1a2>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80015cc:	f083 0301 	eor.w	r3, r3, #1
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 808b 	beq.w	80016ee <_ZN5IOCom7ReceiveEPhh+0x1a2>
	{
		// read digial config
		uint8_t data = ((uint8_t)CONFIG_ADDR_7 << 7) + (((uint8_t)CONFIG_ADDR_6) << 6) + (((uint8_t)CONFIG_ADDR_5) << 5) + (((uint8_t)CONFIG_ADDR_4) << 4) + (((uint8_t)CONFIG_ADDR_3) << 3) + (((uint8_t)CONFIG_ADDR_2) << 2) + (((uint8_t)CONFIG_ADDR_1) << 1);
 80015d8:	2104      	movs	r1, #4
 80015da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015de:	f004 fef9 	bl	80063d4 <HAL_GPIO_ReadPin>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b80      	cmp	r3, #128	; 0x80
 80015e6:	bf0c      	ite	eq
 80015e8:	2301      	moveq	r3, #1
 80015ea:	2300      	movne	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	461c      	mov	r4, r3
 80015f0:	2102      	movs	r1, #2
 80015f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f6:	f004 feed 	bl	80063d4 <HAL_GPIO_ReadPin>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <_ZN5IOCom7ReceiveEPhh+0xb8>
 8001600:	2340      	movs	r3, #64	; 0x40
 8001602:	e000      	b.n	8001606 <_ZN5IOCom7ReceiveEPhh+0xba>
 8001604:	2300      	movs	r3, #0
 8001606:	4423      	add	r3, r4
 8001608:	b2dc      	uxtb	r4, r3
 800160a:	2101      	movs	r1, #1
 800160c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001610:	f004 fee0 	bl	80063d4 <HAL_GPIO_ReadPin>
 8001614:	4603      	mov	r3, r0
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <_ZN5IOCom7ReceiveEPhh+0xd2>
 800161a:	2320      	movs	r3, #32
 800161c:	e000      	b.n	8001620 <_ZN5IOCom7ReceiveEPhh+0xd4>
 800161e:	2300      	movs	r3, #0
 8001620:	4423      	add	r3, r4
 8001622:	b2dc      	uxtb	r4, r3
 8001624:	2108      	movs	r1, #8
 8001626:	4838      	ldr	r0, [pc, #224]	; (8001708 <_ZN5IOCom7ReceiveEPhh+0x1bc>)
 8001628:	f004 fed4 	bl	80063d4 <HAL_GPIO_ReadPin>
 800162c:	4603      	mov	r3, r0
 800162e:	2b01      	cmp	r3, #1
 8001630:	d101      	bne.n	8001636 <_ZN5IOCom7ReceiveEPhh+0xea>
 8001632:	2310      	movs	r3, #16
 8001634:	e000      	b.n	8001638 <_ZN5IOCom7ReceiveEPhh+0xec>
 8001636:	2300      	movs	r3, #0
 8001638:	4423      	add	r3, r4
 800163a:	b2dc      	uxtb	r4, r3
 800163c:	2104      	movs	r1, #4
 800163e:	4832      	ldr	r0, [pc, #200]	; (8001708 <_ZN5IOCom7ReceiveEPhh+0x1bc>)
 8001640:	f004 fec8 	bl	80063d4 <HAL_GPIO_ReadPin>
 8001644:	4603      	mov	r3, r0
 8001646:	2b01      	cmp	r3, #1
 8001648:	d101      	bne.n	800164e <_ZN5IOCom7ReceiveEPhh+0x102>
 800164a:	2308      	movs	r3, #8
 800164c:	e000      	b.n	8001650 <_ZN5IOCom7ReceiveEPhh+0x104>
 800164e:	2300      	movs	r3, #0
 8001650:	4423      	add	r3, r4
 8001652:	b2dc      	uxtb	r4, r3
 8001654:	2102      	movs	r1, #2
 8001656:	482c      	ldr	r0, [pc, #176]	; (8001708 <_ZN5IOCom7ReceiveEPhh+0x1bc>)
 8001658:	f004 febc 	bl	80063d4 <HAL_GPIO_ReadPin>
 800165c:	4603      	mov	r3, r0
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <_ZN5IOCom7ReceiveEPhh+0x11a>
 8001662:	2304      	movs	r3, #4
 8001664:	e000      	b.n	8001668 <_ZN5IOCom7ReceiveEPhh+0x11c>
 8001666:	2300      	movs	r3, #0
 8001668:	4423      	add	r3, r4
 800166a:	b2dc      	uxtb	r4, r3
 800166c:	2101      	movs	r1, #1
 800166e:	4826      	ldr	r0, [pc, #152]	; (8001708 <_ZN5IOCom7ReceiveEPhh+0x1bc>)
 8001670:	f004 feb0 	bl	80063d4 <HAL_GPIO_ReadPin>
 8001674:	4603      	mov	r3, r0
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <_ZN5IOCom7ReceiveEPhh+0x132>
 800167a:	2302      	movs	r3, #2
 800167c:	e000      	b.n	8001680 <_ZN5IOCom7ReceiveEPhh+0x134>
 800167e:	2300      	movs	r3, #0
 8001680:	4423      	add	r3, r4
 8001682:	75fb      	strb	r3, [r7, #23]

		switch (counter)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800168a:	2b03      	cmp	r3, #3
 800168c:	d829      	bhi.n	80016e2 <_ZN5IOCom7ReceiveEPhh+0x196>
 800168e:	a201      	add	r2, pc, #4	; (adr r2, 8001694 <_ZN5IOCom7ReceiveEPhh+0x148>)
 8001690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001694:	080016a5 	.word	0x080016a5
 8001698:	080016ed 	.word	0x080016ed
 800169c:	080016ed 	.word	0x080016ed
 80016a0:	080016bf 	.word	0x080016bf
		{
		case 0:
			reg = data;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	7dfa      	ldrb	r2, [r7, #23]
 80016a8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
			counter++;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80016b2:	3301      	adds	r3, #1
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
		case 1:
			break;
 80016bc:	e016      	b.n	80016ec <_ZN5IOCom7ReceiveEPhh+0x1a0>
			break;
			payload |= ((uint16_t)data) << 7;
			counter++;
			break;
		case 3:
			payload |= data;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 80016c4:	7dfb      	ldrb	r3, [r7, #23]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	4313      	orrs	r3, r2
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
			counter = 0;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			CheckData();
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f000 f816 	bl	800170c <_ZN5IOCom9CheckDataEv>
			break;
 80016e0:	e005      	b.n	80016ee <_ZN5IOCom7ReceiveEPhh+0x1a2>
		default:
			counter = 0;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			break;
 80016ea:	e000      	b.n	80016ee <_ZN5IOCom7ReceiveEPhh+0x1a2>
			break;
 80016ec:	bf00      	nop
		}
	}

previousConfigeWriteStatus = configeWriteStatus;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

	return false;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	371c      	adds	r7, #28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd90      	pop	{r4, r7, pc}
 8001704:	48001c00 	.word	0x48001c00
 8001708:	48000800 	.word	0x48000800

0800170c <_ZN5IOCom9CheckDataEv>:

bool IOCom::CheckData()
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	// data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	// data[3] = reg addr (close, open, setTeach...)
	// data[4..n] = Payload
	// data[5] = crc

	uint8_t data[] =
 8001714:	f107 0308 	add.w	r3, r7, #8
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	231f      	movs	r3, #31
 8001720:	723b      	strb	r3, [r7, #8]
		{0x1F, 0x00, command, reg, (uint8_t)(payload >> 8), (uint8_t)(payload), 0x00, 0x00};
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8001728:	72bb      	strb	r3, [r7, #10]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8001730:	72fb      	strb	r3, [r7, #11]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	b29b      	uxth	r3, r3
 800173c:	b2db      	uxtb	r3, r3
 800173e:	733b      	strb	r3, [r7, #12]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8001746:	b2db      	uxtb	r3, r3
 8001748:	737b      	strb	r3, [r7, #13]

	switch (reg)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8001750:	2b03      	cmp	r3, #3
 8001752:	d018      	beq.n	8001786 <_ZN5IOCom9CheckDataEv+0x7a>
 8001754:	2b03      	cmp	r3, #3
 8001756:	dc1f      	bgt.n	8001798 <_ZN5IOCom9CheckDataEv+0x8c>
 8001758:	2b01      	cmp	r3, #1
 800175a:	d002      	beq.n	8001762 <_ZN5IOCom9CheckDataEv+0x56>
 800175c:	2b02      	cmp	r3, #2
 800175e:	d009      	beq.n	8001774 <_ZN5IOCom9CheckDataEv+0x68>
		//			break;
		//		case GET_STATUS:
		//			GetStatus(reg);
		//			break;
	default:
		break;
 8001760:	e01a      	b.n	8001798 <_ZN5IOCom9CheckDataEv+0x8c>
		SetSettings(data);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3304      	adds	r3, #4
 8001766:	f107 0208 	add.w	r2, r7, #8
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fb5b 	bl	8000e28 <_ZN7BaseCOM11SetSettingsEPh>
		break;
 8001772:	e012      	b.n	800179a <_ZN5IOCom9CheckDataEv+0x8e>
		SetCommand(data);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3304      	adds	r3, #4
 8001778:	f107 0208 	add.w	r2, r7, #8
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fd6a 	bl	8001258 <_ZN7BaseCOM10SetCommandEPh>
		break;
 8001784:	e009      	b.n	800179a <_ZN5IOCom9CheckDataEv+0x8e>
		SetStatus(data);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3304      	adds	r3, #4
 800178a:	f107 0208 	add.w	r2, r7, #8
 800178e:	4611      	mov	r1, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fcd7 	bl	8001144 <_ZN7BaseCOM9SetStatusEPh>
		break;
 8001796:	e000      	b.n	800179a <_ZN5IOCom9CheckDataEv+0x8e>
		break;
 8001798:	bf00      	nop
	}
	return true;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <_ZN8RFM95Com9TransmittEPhh>:

#include "RFM95Com.h"
#include "../AppMain/Defines.h"

bool RFM95Com::Transmitt(uint8_t *data, uint8_t length)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	4613      	mov	r3, r2
 80017b0:	71fb      	strb	r3, [r7, #7]
	uint8_t *txData;

	if (this->driveCommand->isCommandChanged() != 0)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	4618      	mov	r0, r3
 80017b8:	f001 fd3a 	bl	8003230 <_ZNK12DriveCommand16isCommandChangedEv>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	bf14      	ite	ne
 80017c2:	2301      	movne	r3, #1
 80017c4:	2300      	moveq	r3, #0
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 808d 	beq.w	80018e8 <_ZN8RFM95Com9TransmittEPhh+0x144>
	{
		uint8_t command = driveCommand->getCommandChangedReg();
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	4618      	mov	r0, r3
 80017d4:	f001 fd3d 	bl	8003252 <_ZNK12DriveCommand20getCommandChangedRegEv>
 80017d8:	4603      	mov	r3, r0
 80017da:	767b      	strb	r3, [r7, #25]

		if (command & CLOSE_CHANGE)
 80017dc:	7e7b      	ldrb	r3, [r7, #25]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00d      	beq.n	8001802 <_ZN8RFM95Com9TransmittEPhh+0x5e>
		{
			txData = this->GetCommand(CLOSE_ADDR);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2101      	movs	r1, #1
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fa8f 	bl	8000d10 <_ZN7BaseCOM10GetCommandEh>
 80017f2:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(CLOSE_CHANGE);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	2101      	movs	r1, #1
 80017fa:	4618      	mov	r0, r3
 80017fc:	f001 fd35 	bl	800326a <_ZN12DriveCommand19ResetCommandChangedEh>
 8001800:	e179      	b.n	8001af6 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & OPEN_CHANGE)
 8001802:	7e7b      	ldrb	r3, [r7, #25]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00d      	beq.n	8001828 <_ZN8RFM95Com9TransmittEPhh+0x84>
		{
			txData = this->GetCommand(OPEN_ADDR);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3304      	adds	r3, #4
 8001810:	2102      	movs	r1, #2
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fa7c 	bl	8000d10 <_ZN7BaseCOM10GetCommandEh>
 8001818:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(OPEN_CHANGE);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	2102      	movs	r1, #2
 8001820:	4618      	mov	r0, r3
 8001822:	f001 fd22 	bl	800326a <_ZN12DriveCommand19ResetCommandChangedEh>
 8001826:	e166      	b.n	8001af6 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & TEACH_CHANGE)
 8001828:	7e7b      	ldrb	r3, [r7, #25]
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00d      	beq.n	800184e <_ZN8RFM95Com9TransmittEPhh+0xaa>
		{
			txData = this->GetCommand(TEACH_ADDR);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3304      	adds	r3, #4
 8001836:	2103      	movs	r1, #3
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fa69 	bl	8000d10 <_ZN7BaseCOM10GetCommandEh>
 800183e:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(TEACH_CHANGE);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	2104      	movs	r1, #4
 8001846:	4618      	mov	r0, r3
 8001848:	f001 fd0f 	bl	800326a <_ZN12DriveCommand19ResetCommandChangedEh>
 800184c:	e153      	b.n	8001af6 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & RESET_CHANGE)
 800184e:	7e7b      	ldrb	r3, [r7, #25]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00d      	beq.n	8001874 <_ZN8RFM95Com9TransmittEPhh+0xd0>
		{
			txData = this->GetCommand(RESET_ADDR);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	3304      	adds	r3, #4
 800185c:	2104      	movs	r1, #4
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fa56 	bl	8000d10 <_ZN7BaseCOM10GetCommandEh>
 8001864:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(RESET_CHANGE);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	2108      	movs	r1, #8
 800186c:	4618      	mov	r0, r3
 800186e:	f001 fcfc 	bl	800326a <_ZN12DriveCommand19ResetCommandChangedEh>
 8001872:	e140      	b.n	8001af6 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & ENABLE_CHANGE)
 8001874:	7e7b      	ldrb	r3, [r7, #25]
 8001876:	f003 0310 	and.w	r3, r3, #16
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00d      	beq.n	800189a <_ZN8RFM95Com9TransmittEPhh+0xf6>
		{
			txData = this->GetCommand(ENABLE_ADDR);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	3304      	adds	r3, #4
 8001882:	2105      	movs	r1, #5
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fa43 	bl	8000d10 <_ZN7BaseCOM10GetCommandEh>
 800188a:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(ENABLE_CHANGE);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	2110      	movs	r1, #16
 8001892:	4618      	mov	r0, r3
 8001894:	f001 fce9 	bl	800326a <_ZN12DriveCommand19ResetCommandChangedEh>
 8001898:	e12d      	b.n	8001af6 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & DISABLE_CHANGE)
 800189a:	7e7b      	ldrb	r3, [r7, #25]
 800189c:	f003 0320 	and.w	r3, r3, #32
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00d      	beq.n	80018c0 <_ZN8RFM95Com9TransmittEPhh+0x11c>
		{
			txData = this->GetCommand(DISABLE_ADDR);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	3304      	adds	r3, #4
 80018a8:	2106      	movs	r1, #6
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fa30 	bl	8000d10 <_ZN7BaseCOM10GetCommandEh>
 80018b0:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(DISABLE_CHANGE);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	2120      	movs	r1, #32
 80018b8:	4618      	mov	r0, r3
 80018ba:	f001 fcd6 	bl	800326a <_ZN12DriveCommand19ResetCommandChangedEh>
 80018be:	e11a      	b.n	8001af6 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & STOP_CHANGE)
 80018c0:	7e7b      	ldrb	r3, [r7, #25]
 80018c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 8115 	beq.w	8001af6 <_ZN8RFM95Com9TransmittEPhh+0x352>
		{
			txData = this->GetCommand(STOP_ADDR);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	3304      	adds	r3, #4
 80018d0:	2107      	movs	r1, #7
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fa1c 	bl	8000d10 <_ZN7BaseCOM10GetCommandEh>
 80018d8:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(STOP_CHANGE);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	2140      	movs	r1, #64	; 0x40
 80018e0:	4618      	mov	r0, r3
 80018e2:	f001 fcc2 	bl	800326a <_ZN12DriveCommand19ResetCommandChangedEh>
 80018e6:	e106      	b.n	8001af6 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
	}
	else if (driveSettings->isSettingsChanged() != 0)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f001 fb56 	bl	8002f9e <_ZN13DriveSettings17isSettingsChangedEv>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	bf14      	ite	ne
 80018f8:	2301      	movne	r3, #1
 80018fa:	2300      	moveq	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 80db 	beq.w	8001aba <_ZN8RFM95Com9TransmittEPhh+0x316>
	{
		uint16_t commands = driveSettings->getSettingsChangedReg();
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	4618      	mov	r0, r3
 800190a:	f001 fb59 	bl	8002fc0 <_ZNK13DriveSettings21getSettingsChangedRegEv>
 800190e:	4603      	mov	r3, r0
 8001910:	837b      	strh	r3, [r7, #26]

		if (commands & TEACH_TORQUE_CHANGE)
 8001912:	8b7b      	ldrh	r3, [r7, #26]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00d      	beq.n	8001938 <_ZN8RFM95Com9TransmittEPhh+0x194>
		{
			txData = this->GetSettings(TEACH_TORQUE_ADDR);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3304      	adds	r3, #4
 8001920:	2110      	movs	r1, #16
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff f84a 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 8001928:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(TEACH_TORQUE_CHANGE);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	2101      	movs	r1, #1
 8001930:	4618      	mov	r0, r3
 8001932:	f001 fb51 	bl	8002fd8 <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001936:	e0de      	b.n	8001af6 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & TEACH_SPEED_CHANGE)
 8001938:	8b7b      	ldrh	r3, [r7, #26]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00d      	beq.n	800195e <_ZN8RFM95Com9TransmittEPhh+0x1ba>
		{
			txData = this->GetSettings(TEACH_SPEED_ADDR);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	3304      	adds	r3, #4
 8001946:	2111      	movs	r1, #17
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff f837 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 800194e:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(TEACH_SPEED_CHANGE);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	2102      	movs	r1, #2
 8001956:	4618      	mov	r0, r3
 8001958:	f001 fb3e 	bl	8002fd8 <_ZN13DriveSettings20ResetSettingsChangedEt>
 800195c:	e0cb      	b.n	8001af6 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & CLAMPING_TORQUE_CHANGE)
 800195e:	8b7b      	ldrh	r3, [r7, #26]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00d      	beq.n	8001984 <_ZN8RFM95Com9TransmittEPhh+0x1e0>
		{
			txData = this->GetSettings(CLAMPING_TORQUE_ADDR);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3304      	adds	r3, #4
 800196c:	2112      	movs	r1, #18
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff f824 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 8001974:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(CLAMPING_TORQUE_CHANGE);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	2104      	movs	r1, #4
 800197c:	4618      	mov	r0, r3
 800197e:	f001 fb2b 	bl	8002fd8 <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001982:	e0b8      	b.n	8001af6 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & CLAMPING_SPEED_CHANGE)
 8001984:	8b7b      	ldrh	r3, [r7, #26]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00d      	beq.n	80019aa <_ZN8RFM95Com9TransmittEPhh+0x206>
		{
			txData = this->GetSettings(CLAMPING_SPEED_ADDR);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	3304      	adds	r3, #4
 8001992:	2113      	movs	r1, #19
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff f811 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 800199a:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(CLAMPING_SPEED_CHANGE);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	2108      	movs	r1, #8
 80019a2:	4618      	mov	r0, r3
 80019a4:	f001 fb18 	bl	8002fd8 <_ZN13DriveSettings20ResetSettingsChangedEt>
 80019a8:	e0a5      	b.n	8001af6 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & SELF_SHUTDOWN_DELAY_CHANGE)
 80019aa:	8b7b      	ldrh	r3, [r7, #26]
 80019ac:	f003 0310 	and.w	r3, r3, #16
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00d      	beq.n	80019d0 <_ZN8RFM95Com9TransmittEPhh+0x22c>
		{
			txData = this->GetSettings(SELF_SHUTDOWN_DELAY_ADDR);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	3304      	adds	r3, #4
 80019b8:	2114      	movs	r1, #20
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fffe 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 80019c0:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(SELF_SHUTDOWN_DELAY_CHANGE);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	2110      	movs	r1, #16
 80019c8:	4618      	mov	r0, r3
 80019ca:	f001 fb05 	bl	8002fd8 <_ZN13DriveSettings20ResetSettingsChangedEt>
 80019ce:	e092      	b.n	8001af6 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & IN_POS_DIFF_CHANGE)
 80019d0:	8b7b      	ldrh	r3, [r7, #26]
 80019d2:	f003 0320 	and.w	r3, r3, #32
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00d      	beq.n	80019f6 <_ZN8RFM95Com9TransmittEPhh+0x252>
		{
			txData = this->GetSettings(IN_POS_DIFF_ADDR);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3304      	adds	r3, #4
 80019de:	2115      	movs	r1, #21
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe ffeb 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 80019e6:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(IN_POS_DIFF_CHANGE);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	2120      	movs	r1, #32
 80019ee:	4618      	mov	r0, r3
 80019f0:	f001 faf2 	bl	8002fd8 <_ZN13DriveSettings20ResetSettingsChangedEt>
 80019f4:	e07f      	b.n	8001af6 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & OPENING_DISTANCE_CHANGE)
 80019f6:	8b7b      	ldrh	r3, [r7, #26]
 80019f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d00d      	beq.n	8001a1c <_ZN8RFM95Com9TransmittEPhh+0x278>
		{
			txData = this->GetSettings(OPENING_DISTANCE_ADDR);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	3304      	adds	r3, #4
 8001a04:	2116      	movs	r1, #22
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe ffd8 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 8001a0c:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(OPENING_DISTANCE_CHANGE);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	2140      	movs	r1, #64	; 0x40
 8001a14:	4618      	mov	r0, r3
 8001a16:	f001 fadf 	bl	8002fd8 <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001a1a:	e06c      	b.n	8001af6 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & UNDERVOLTAGE_WARNING_CHANGE)
 8001a1c:	8b7b      	ldrh	r3, [r7, #26]
 8001a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00d      	beq.n	8001a42 <_ZN8RFM95Com9TransmittEPhh+0x29e>
		{
			txData = this->GetSettings(UNDERVOLTAGE_WARNING_ADDR);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	2117      	movs	r1, #23
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe ffc5 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 8001a32:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(UNDERVOLTAGE_WARNING_CHANGE);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	2180      	movs	r1, #128	; 0x80
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f001 facc 	bl	8002fd8 <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001a40:	e059      	b.n	8001af6 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & UNDERVOLTAGE_ERROR_CHANGE)
 8001a42:	8b7b      	ldrh	r3, [r7, #26]
 8001a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00e      	beq.n	8001a6a <_ZN8RFM95Com9TransmittEPhh+0x2c6>
		{
			txData = this->GetSettings(UNDERVOLTAGE_ERROR_ADDR);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	3304      	adds	r3, #4
 8001a50:	2118      	movs	r1, #24
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe ffb2 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 8001a58:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(UNDERVOLTAGE_ERROR_CHANGE);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a62:	4618      	mov	r0, r3
 8001a64:	f001 fab8 	bl	8002fd8 <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001a68:	e045      	b.n	8001af6 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & OVER_CURRENT_WARNING_CHANGE)
 8001a6a:	8b7b      	ldrh	r3, [r7, #26]
 8001a6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00e      	beq.n	8001a92 <_ZN8RFM95Com9TransmittEPhh+0x2ee>
		{
			txData = this->GetSettings(OVER_CURRENT_WARNING_ADDR);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	3304      	adds	r3, #4
 8001a78:	2119      	movs	r1, #25
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe ff9e 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 8001a80:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(OVER_CURRENT_WARNING_CHANGE);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f001 faa4 	bl	8002fd8 <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001a90:	e031      	b.n	8001af6 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & OVER_CURRENT_ERROR_CHANGE)
 8001a92:	8b7b      	ldrh	r3, [r7, #26]
 8001a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d02c      	beq.n	8001af6 <_ZN8RFM95Com9TransmittEPhh+0x352>
		{
			txData = this->GetSettings(OVER_CURRENT_ERROR_ADDR);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	211a      	movs	r1, #26
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe ff8a 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 8001aa8:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(OVER_CURRENT_ERROR_CHANGE);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f001 fa90 	bl	8002fd8 <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001ab8:	e01d      	b.n	8001af6 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
	}
	else
	{
		uint8_t dataTemp[] =
 8001aba:	f107 0310 	add.w	r3, r7, #16
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	f8c3 2003 	str.w	r2, [r3, #3]
 8001ac6:	231f      	movs	r3, #31
 8001ac8:	743b      	strb	r3, [r7, #16]
 8001aca:	2313      	movs	r3, #19
 8001acc:	74bb      	strb	r3, [r7, #18]
		{ 0x1F, driveSettings->getDeviceAddress(), GET_STATUS, 0x00, 0x00, 0x00,
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f001 fa28 	bl	8002f28 <_ZNK13DriveSettings16getDeviceAddressEv>
 8001ad8:	4603      	mov	r3, r0
				0x00 };
 8001ada:	747b      	strb	r3, [r7, #17]
		dataTemp[6] = CRC8(dataTemp, 6);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3304      	adds	r3, #4
 8001ae0:	f107 0110 	add.w	r1, r7, #16
 8001ae4:	2206      	movs	r2, #6
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fc40 	bl	800136c <_ZN7BaseCOM4CRC8EPhh>
 8001aec:	4603      	mov	r3, r0
 8001aee:	75bb      	strb	r3, [r7, #22]
		txData = dataTemp;
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	61fb      	str	r3, [r7, #28]
	}

	HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8001af6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afe:	f004 fc99 	bl	8006434 <HAL_GPIO_TogglePin>

	rfm95->beginPacket();
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 fd06 	bl	800251a <_ZN10RFM95_LoRa11beginPacketEi>
	rfm95->write(txData, 7);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6998      	ldr	r0, [r3, #24]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	69f9      	ldr	r1, [r7, #28]
 8001b20:	4798      	blx	r3
	rfm95->endPacket();
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 fd18 	bl	800255c <_ZN10RFM95_LoRa9endPacketEv>
	return true;
 8001b2c:	2301      	movs	r3, #1
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3720      	adds	r7, #32
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <_ZN8RFM95Com7ReceiveEPhh>:

bool RFM95Com::Receive(uint8_t *data, uint8_t length)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	4613      	mov	r3, r2
 8001b42:	71fb      	strb	r3, [r7, #7]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[5] = crc

	uint8_t packetSize = rfm95->parsePacket();
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 fd2b 	bl	80025a6 <_ZN10RFM95_LoRa11parsePacketEi>
 8001b50:	4603      	mov	r3, r0
 8001b52:	75bb      	strb	r3, [r7, #22]
	if (packetSize != 0)
 8001b54:	7dbb      	ldrb	r3, [r7, #22]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d065      	beq.n	8001c26 <_ZN8RFM95Com7ReceiveEPhh+0xf0>
	{
		uint8_t counter = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	75fb      	strb	r3, [r7, #23]
		while (rfm95->available())
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	699a      	ldr	r2, [r3, #24]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	3308      	adds	r3, #8
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4798      	blx	r3
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	bf14      	ite	ne
 8001b76:	2301      	movne	r3, #1
 8001b78:	2300      	moveq	r3, #0
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d017      	beq.n	8001bb0 <_ZN8RFM95Com7ReceiveEPhh+0x7a>
		{
			data[counter] = rfm95->read();
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	699a      	ldr	r2, [r3, #24]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	330c      	adds	r3, #12
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4798      	blx	r3
 8001b92:	4601      	mov	r1, r0
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	4413      	add	r3, r2
 8001b9a:	b2ca      	uxtb	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]
			if (counter > MAX_PACKET_2_RECEIVE)
 8001b9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ba0:	2b07      	cmp	r3, #7
 8001ba2:	d901      	bls.n	8001ba8 <_ZN8RFM95Com7ReceiveEPhh+0x72>
			{
				return false;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e03f      	b.n	8001c28 <_ZN8RFM95Com7ReceiveEPhh+0xf2>
			}
			counter++;
 8001ba8:	7dfb      	ldrb	r3, [r7, #23]
 8001baa:	3301      	adds	r3, #1
 8001bac:	75fb      	strb	r3, [r7, #23]
		while (rfm95->available())
 8001bae:	e7d6      	b.n	8001b5e <_ZN8RFM95Com7ReceiveEPhh+0x28>
		}

		//check CRC
		if (CRC8(data, 6) != data[6])
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	2206      	movs	r2, #6
 8001bb6:	68b9      	ldr	r1, [r7, #8]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fbd7 	bl	800136c <_ZN7BaseCOM4CRC8EPhh>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	3306      	adds	r3, #6
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	bf14      	ite	ne
 8001bcc:	2301      	movne	r3, #1
 8001bce:	2300      	moveq	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <_ZN8RFM95Com7ReceiveEPhh+0xa4>
		{
			//error crc error //ToDO
			return false;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e026      	b.n	8001c28 <_ZN8RFM95Com7ReceiveEPhh+0xf2>
		}

		switch (data[2])
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	3302      	adds	r3, #2
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d014      	beq.n	8001c0e <_ZN8RFM95Com7ReceiveEPhh+0xd8>
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	dc19      	bgt.n	8001c1c <_ZN8RFM95Com7ReceiveEPhh+0xe6>
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d002      	beq.n	8001bf2 <_ZN8RFM95Com7ReceiveEPhh+0xbc>
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d007      	beq.n	8001c00 <_ZN8RFM95Com7ReceiveEPhh+0xca>
 8001bf0:	e014      	b.n	8001c1c <_ZN8RFM95Com7ReceiveEPhh+0xe6>
		{
			case SEND_SETTINGS:
				this->SetSettings(data);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	68b9      	ldr	r1, [r7, #8]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff f915 	bl	8000e28 <_ZN7BaseCOM11SetSettingsEPh>
				break;
 8001bfe:	e012      	b.n	8001c26 <_ZN8RFM95Com7ReceiveEPhh+0xf0>
			case SEND_COMMAND:
				this->SetCommand(data);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	3304      	adds	r3, #4
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fb26 	bl	8001258 <_ZN7BaseCOM10SetCommandEPh>
				break;
 8001c0c:	e00b      	b.n	8001c26 <_ZN8RFM95Com7ReceiveEPhh+0xf0>
			case SEND_STATUS:
				this->SetStatus(data);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	3304      	adds	r3, #4
 8001c12:	68b9      	ldr	r1, [r7, #8]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fa95 	bl	8001144 <_ZN7BaseCOM9SetStatusEPh>
				break;
 8001c1a:	e004      	b.n	8001c26 <_ZN8RFM95Com7ReceiveEPhh+0xf0>
			default:
				//not sported command
				data[2] = 0;
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	3302      	adds	r3, #2
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
				break;
 8001c24:	bf00      	nop
		}
	}
	return true;
 8001c26:	2301      	movs	r3, #1
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <_ZN6USBCom9TransmittEPhh>:
#include "../AppMain/Defines.h"
#include "usb_device.h"
#include "usbd_cdc_if.h"

bool USBCom::Transmitt(uint8_t *data, uint8_t length)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	71fb      	strb	r3, [r7, #7]
	if (data == NULL)
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <_ZN6USBCom9TransmittEPhh+0x18>
	{
		return false;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e019      	b.n	8001c7c <_ZN6USBCom9TransmittEPhh+0x4c>
	}

	uint16_t counter = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	82fb      	strh	r3, [r7, #22]
	while (CDC_Transmit_FS((uint8_t*) data, length) != USBD_OK)
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	4619      	mov	r1, r3
 8001c52:	68b8      	ldr	r0, [r7, #8]
 8001c54:	f00c fbd8 	bl	800e408 <CDC_Transmit_FS>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	bf14      	ite	ne
 8001c5e:	2301      	movne	r3, #1
 8001c60:	2300      	moveq	r3, #0
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <_ZN6USBCom9TransmittEPhh+0x4a>
	{
		counter++;
 8001c68:	8afb      	ldrh	r3, [r7, #22]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	82fb      	strh	r3, [r7, #22]
		if (counter >= 1000)
 8001c6e:	8afb      	ldrh	r3, [r7, #22]
 8001c70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c74:	d3ea      	bcc.n	8001c4c <_ZN6USBCom9TransmittEPhh+0x1c>
		{
			//ToDo USB Error
			return false;	//Transmit failed
 8001c76:	2300      	movs	r3, #0
 8001c78:	e000      	b.n	8001c7c <_ZN6USBCom9TransmittEPhh+0x4c>
		}
	}
	return true;	//Transmit successful
 8001c7a:	2301      	movs	r3, #1
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <_ZN6USBCom7ReceiveEPhh>:

bool USBCom::Receive(uint8_t *data, uint8_t length)
{
 8001c84:	b590      	push	{r4, r7, lr}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	71fb      	strb	r3, [r7, #7]
	uint8_t data2send[] = { 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001c92:	4a66      	ldr	r2, [pc, #408]	; (8001e2c <_ZN6USBCom7ReceiveEPhh+0x1a8>)
 8001c94:	f107 0310 	add.w	r3, r7, #16
 8001c98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c9c:	6018      	str	r0, [r3, #0]
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	8019      	strh	r1, [r3, #0]
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	0c0a      	lsrs	r2, r1, #16
 8001ca6:	701a      	strb	r2, [r3, #0]
	uint8_t crc = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	75fb      	strb	r3, [r7, #23]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4+5] = Payload
	//data[6] = crc

	if (length >= 5)
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	f240 80b6 	bls.w	8001e20 <_ZN6USBCom7ReceiveEPhh+0x19c>
	{
		//calculate CRC from received data

		crc = this->CRC8(data, 6);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	2206      	movs	r2, #6
 8001cba:	68b9      	ldr	r1, [r7, #8]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fb55 	bl	800136c <_ZN7BaseCOM4CRC8EPhh>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	75fb      	strb	r3, [r7, #23]
		if (crc != data[6])
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	3306      	adds	r3, #6
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	7dfa      	ldrb	r2, [r7, #23]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d003      	beq.n	8001cda <_ZN6USBCom7ReceiveEPhh+0x56>
		{
			data[2] = 0;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
		}


		switch (data[2])
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	3302      	adds	r3, #2
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	2b12      	cmp	r3, #18
 8001ce4:	d876      	bhi.n	8001dd4 <_ZN6USBCom7ReceiveEPhh+0x150>
 8001ce6:	a201      	add	r2, pc, #4	; (adr r2, 8001cec <_ZN6USBCom7ReceiveEPhh+0x68>)
 8001ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cec:	08001d39 	.word	0x08001d39
 8001cf0:	08001d47 	.word	0x08001d47
 8001cf4:	08001d55 	.word	0x08001d55
 8001cf8:	08001dd5 	.word	0x08001dd5
 8001cfc:	08001dd5 	.word	0x08001dd5
 8001d00:	08001dd5 	.word	0x08001dd5
 8001d04:	08001dd5 	.word	0x08001dd5
 8001d08:	08001dd5 	.word	0x08001dd5
 8001d0c:	08001dd5 	.word	0x08001dd5
 8001d10:	08001dd5 	.word	0x08001dd5
 8001d14:	08001dd5 	.word	0x08001dd5
 8001d18:	08001dd5 	.word	0x08001dd5
 8001d1c:	08001dd5 	.word	0x08001dd5
 8001d20:	08001dd5 	.word	0x08001dd5
 8001d24:	08001dd5 	.word	0x08001dd5
 8001d28:	08001dd5 	.word	0x08001dd5
 8001d2c:	08001d63 	.word	0x08001d63
 8001d30:	08001d89 	.word	0x08001d89
 8001d34:	08001daf 	.word	0x08001daf
		{
			case SEND_SETTINGS:
				this->SetSettings(data);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff f872 	bl	8000e28 <_ZN7BaseCOM11SetSettingsEPh>
				break;
 8001d44:	e04b      	b.n	8001dde <_ZN6USBCom7ReceiveEPhh+0x15a>
			case SEND_COMMAND:
				this->SetCommand(data);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	68b9      	ldr	r1, [r7, #8]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fa83 	bl	8001258 <_ZN7BaseCOM10SetCommandEPh>
				break;
 8001d52:	e044      	b.n	8001dde <_ZN6USBCom7ReceiveEPhh+0x15a>
			case SEND_STATUS:
				this->SetStatus(data);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	3304      	adds	r3, #4
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff f9f2 	bl	8001144 <_ZN7BaseCOM9SetStatusEPh>
				break;
 8001d60:	e03d      	b.n	8001dde <_ZN6USBCom7ReceiveEPhh+0x15a>
			case GET_SETTINGS:
				return Transmitt(this->GetSettings(data[3]), 7);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681c      	ldr	r4, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1d1a      	adds	r2, r3, #4
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	3303      	adds	r3, #3
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	4619      	mov	r1, r3
 8001d74:	4610      	mov	r0, r2
 8001d76:	f7fe fe21 	bl	80009bc <_ZN7BaseCOM11GetSettingsEh>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	4619      	mov	r1, r3
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	47a0      	blx	r4
 8001d84:	4603      	mov	r3, r0
 8001d86:	e04c      	b.n	8001e22 <_ZN6USBCom7ReceiveEPhh+0x19e>
			case GET_COMMAND:
				return Transmitt(this->GetCommand(data[3]), 7);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681c      	ldr	r4, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1d1a      	adds	r2, r3, #4
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	3303      	adds	r3, #3
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	f7fe ffb8 	bl	8000d10 <_ZN7BaseCOM10GetCommandEh>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2207      	movs	r2, #7
 8001da4:	4619      	mov	r1, r3
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	47a0      	blx	r4
 8001daa:	4603      	mov	r3, r0
 8001dac:	e039      	b.n	8001e22 <_ZN6USBCom7ReceiveEPhh+0x19e>
			case GET_STATUS:
				return Transmitt(this->GetStatus(data[3]), 7);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681c      	ldr	r4, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1d1a      	adds	r2, r3, #4
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	3303      	adds	r3, #3
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	f7fe ff0d 	bl	8000be0 <_ZN7BaseCOM9GetStatusEh>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2207      	movs	r2, #7
 8001dca:	4619      	mov	r1, r3
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	47a0      	blx	r4
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	e026      	b.n	8001e22 <_ZN6USBCom7ReceiveEPhh+0x19e>
			default:
				//not suported command
				data[2] = 0;
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
				break;
 8001ddc:	bf00      	nop
		}

		data2send[0] = 0x1F;
 8001dde:	231f      	movs	r3, #31
 8001de0:	743b      	strb	r3, [r7, #16]
		data2send[1] = driveSettings->getDeviceAddress();
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f001 f89e 	bl	8002f28 <_ZNK13DriveSettings16getDeviceAddressEv>
 8001dec:	4603      	mov	r3, r0
 8001dee:	747b      	strb	r3, [r7, #17]
		data2send[2] = 0x01;
 8001df0:	2301      	movs	r3, #1
 8001df2:	74bb      	strb	r3, [r7, #18]
		data2send[3] = 0x01;
 8001df4:	2301      	movs	r3, #1
 8001df6:	74fb      	strb	r3, [r7, #19]
		data2send[6] = CRC8(data2send, 6);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	f107 0110 	add.w	r1, r7, #16
 8001e00:	2206      	movs	r2, #6
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fab2 	bl	800136c <_ZN7BaseCOM4CRC8EPhh>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	75bb      	strb	r3, [r7, #22]
		return Transmitt(data2send, 6);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f107 0110 	add.w	r1, r7, #16
 8001e16:	2206      	movs	r2, #6
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	4798      	blx	r3
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	e000      	b.n	8001e22 <_ZN6USBCom7ReceiveEPhh+0x19e>
	}

	return false;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	371c      	adds	r7, #28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd90      	pop	{r4, r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	0800f040 	.word	0x0800f040

08001e30 <_ZN5FlashC1EP13DriveSettingsP11DriveStatus>:
 */

#include "Flash.h"
#include "stm32l4xx_hal.h"

Flash::Flash(DriveSettings *driveSettings, DriveStatus *driveStatus)
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
{
	this->driveSettings = driveSettings;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	605a      	str	r2, [r3, #4]
}
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <_ZN5Flash9ReadFlashEv>:
 *
 * @param None
 * @return None
 */
void Flash::ReadFlash()
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < UFLASH_SIZE; i++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2b13      	cmp	r3, #19
 8001e66:	dc12      	bgt.n	8001e8e <_ZN5Flash9ReadFlashEv+0x38>
	{
		tmpFlashArray[i] = *(uint64_t*) (FLASH_STAR_PAGE_ADDR + 64 * i);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8001e6e:	f503 637e 	add.w	r3, r3, #4064	; 0xfe0
 8001e72:	019b      	lsls	r3, r3, #6
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	68f9      	ldr	r1, [r7, #12]
 8001e7c:	3101      	adds	r1, #1
 8001e7e:	00c9      	lsls	r1, r1, #3
 8001e80:	4401      	add	r1, r0
 8001e82:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < UFLASH_SIZE; i++)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	e7e9      	b.n	8001e62 <_ZN5Flash9ReadFlashEv+0xc>
	}

	driveSettings->setClampingSpeed(tmpFlashArray[0]);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e98:	b293      	uxth	r3, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	f000 fe7c 	bl	8002b98 <_ZN13DriveSettings16setClampingSpeedEt>
	driveSettings->setClampingTorque(tmpFlashArray[1]);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001eaa:	b293      	uxth	r3, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	f000 fe9a 	bl	8002be6 <_ZN13DriveSettings17setClampingTorqueEt>
	driveSettings->setTeachSpeed(tmpFlashArray[2]);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ebc:	b293      	uxth	r3, r2
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f000 ff7b 	bl	8002dba <_ZN13DriveSettings13setTeachSpeedEt>
	driveSettings->setTeachTroque(tmpFlashArray[3]);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001ece:	b293      	uxth	r3, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f000 ff99 	bl	8002e08 <_ZN13DriveSettings14setTeachTroqueEt>

	driveSettings->setOverCurrentError(tmpFlashArray[4]);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6818      	ldr	r0, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001ee0:	b293      	uxth	r3, r2
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f001 f805 	bl	8002ef2 <_ZN13DriveSettings19setOverCurrentErrorEt>
	driveSettings->setOverCurrentWarning(tmpFlashArray[5]);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001ef2:	b293      	uxth	r3, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f000 ff12 	bl	8002d1e <_ZN13DriveSettings21setOverCurrentWarningEt>
	driveSettings->setUnderVoltageError(tmpFlashArray[6]);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001f04:	b293      	uxth	r3, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	f000 ffa5 	bl	8002e56 <_ZN13DriveSettings20setUnderVoltageErrorEt>
	driveSettings->setUnderVoltageWarning(tmpFlashArray[7]);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001f16:	b293      	uxth	r3, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f000 ffc3 	bl	8002ea4 <_ZN13DriveSettings22setUnderVoltageWarningEt>

	driveSettings->setSelfShutdownDelay(tmpFlashArray[8]);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001f28:	b293      	uxth	r3, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f000 ff1e 	bl	8002d6c <_ZN13DriveSettings20setSelfShutdownDelayEt>
	driveSettings->setInPosDiff(tmpFlashArray[9]);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001f3a:	b293      	uxth	r3, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f000 fe79 	bl	8002c34 <_ZN13DriveSettings12setInPosDiffEt>
	driveSettings->setOpeningDistance(tmpFlashArray[10]);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001f4c:	b293      	uxth	r3, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f000 fe97 	bl	8002c82 <_ZN13DriveSettings18setOpeningDistanceEt>

	driveSettings->setOverCurrentTimeThreshold(tmpFlashArray[11]);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001f5e:	b293      	uxth	r3, r2
 8001f60:	4619      	mov	r1, r3
 8001f62:	f000 feb5 	bl	8002cd0 <_ZN13DriveSettings27setOverCurrentTimeThresholdEt>
	driveSettings->setDeviceAddress(tmpFlashArray[12]);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001f70:	b2d3      	uxtb	r3, r2
 8001f72:	4619      	mov	r1, r3
 8001f74:	f000 ffe4 	bl	8002f40 <_ZN13DriveSettings16setDeviceAddressEh>
}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <_ZN5Flash9SaveFlashEv>:



void Flash::SaveFlash(){
 8001f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f84:	b096      	sub	sp, #88	; 0x58
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6578      	str	r0, [r7, #84]	; 0x54
	if (this->driveSettings->isSaveSettings())
 8001f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 ffe5 	bl	8002f5e <_ZN13DriveSettings14isSaveSettingsEv>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 80c0 	beq.w	800211c <_ZN5Flash9SaveFlashEv+0x19c>
	{
		tmpFlashArray[0] = driveSettings->getClampingSpeed();
 8001f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 fded 	bl	8002b80 <_ZNK13DriveSettings16getClampingSpeedEv>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2200      	movs	r2, #0
 8001fac:	461c      	mov	r4, r3
 8001fae:	4615      	mov	r5, r2
 8001fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb2:	e9c3 4502 	strd	r4, r5, [r3, #8]
		tmpFlashArray[1] = driveSettings->getClampingTorque();
 8001fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fe07 	bl	8002bce <_ZNK13DriveSettings17getClampingTorqueEv>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	4698      	mov	r8, r3
 8001fc8:	4691      	mov	r9, r2
 8001fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fcc:	e9c3 8904 	strd	r8, r9, [r3, #16]
		tmpFlashArray[2] = driveSettings->getTeachSpeed();
 8001fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fee4 	bl	8002da2 <_ZNK13DriveSettings13getTeachSpeedEv>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2200      	movs	r2, #0
 8001fe0:	469a      	mov	sl, r3
 8001fe2:	4693      	mov	fp, r2
 8001fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe6:	e9c3 ab06 	strd	sl, fp, [r3, #24]
		tmpFlashArray[3] = driveSettings->getTeachTroque();
 8001fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 fefe 	bl	8002df0 <_ZNK13DriveSettings14getTeachTroqueEv>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ffc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002000:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8002004:	e9c3 1208 	strd	r1, r2, [r3, #32]

		tmpFlashArray[4] = driveSettings->getOverCurrentError();
 8002008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f000 ff64 	bl	8002eda <_ZNK13DriveSettings19getOverCurrentErrorEv>
 8002012:	4603      	mov	r3, r0
 8002014:	b29b      	uxth	r3, r3
 8002016:	2200      	movs	r2, #0
 8002018:	643b      	str	r3, [r7, #64]	; 0x40
 800201a:	647a      	str	r2, [r7, #68]	; 0x44
 800201c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800201e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002022:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
		tmpFlashArray[5] = driveSettings->getOverCurrentWarning();
 8002026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f000 fe6b 	bl	8002d06 <_ZNK13DriveSettings21getOverCurrentWarningEv>
 8002030:	4603      	mov	r3, r0
 8002032:	b29b      	uxth	r3, r3
 8002034:	2200      	movs	r2, #0
 8002036:	63bb      	str	r3, [r7, #56]	; 0x38
 8002038:	63fa      	str	r2, [r7, #60]	; 0x3c
 800203a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800203c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002040:	e9c3 120c 	strd	r1, r2, [r3, #48]	; 0x30
		tmpFlashArray[6] = driveSettings->getUnderVoltageError();
 8002044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f000 fef8 	bl	8002e3e <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 800204e:	4603      	mov	r3, r0
 8002050:	b29b      	uxth	r3, r3
 8002052:	2200      	movs	r2, #0
 8002054:	633b      	str	r3, [r7, #48]	; 0x30
 8002056:	637a      	str	r2, [r7, #52]	; 0x34
 8002058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800205a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800205e:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tmpFlashArray[7] = driveSettings->getUnderVoltageWarning();
 8002062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f000 ff10 	bl	8002e8c <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 800206c:	4603      	mov	r3, r0
 800206e:	b29b      	uxth	r3, r3
 8002070:	2200      	movs	r2, #0
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
 8002074:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002078:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800207c:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

		tmpFlashArray[8] = driveSettings->getSelfShutdownDelay();
 8002080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f000 fe65 	bl	8002d54 <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 800208a:	4603      	mov	r3, r0
 800208c:	b29b      	uxth	r3, r3
 800208e:	2200      	movs	r2, #0
 8002090:	623b      	str	r3, [r7, #32]
 8002092:	627a      	str	r2, [r7, #36]	; 0x24
 8002094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002096:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800209a:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
		tmpFlashArray[9] = driveSettings->getInPosDiff();
 800209e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 fdba 	bl	8002c1c <_ZNK13DriveSettings12getInPosDiffEv>
 80020a8:	4603      	mov	r3, r0
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	2200      	movs	r2, #0
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	61fa      	str	r2, [r7, #28]
 80020b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80020b8:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
		tmpFlashArray[10] = driveSettings->getOpeningDistance();
 80020bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 fdd2 	bl	8002c6a <_ZNK13DriveSettings18getOpeningDistanceEv>
 80020c6:	4603      	mov	r3, r0
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	2200      	movs	r2, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	617a      	str	r2, [r7, #20]
 80020d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80020d6:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58

		tmpFlashArray[11] = driveSettings->getOverCurrentTimeThreshold();
 80020da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 fdea 	bl	8002cb8 <_ZNK13DriveSettings27getOverCurrentTimeThresholdEv>
 80020e4:	4603      	mov	r3, r0
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2200      	movs	r2, #0
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	60fa      	str	r2, [r7, #12]
 80020ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80020f4:	e9c3 1218 	strd	r1, r2, [r3, #96]	; 0x60
		tmpFlashArray[12] = driveSettings->getDeviceAddress();
 80020f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 ff13 	bl	8002f28 <_ZNK13DriveSettings16getDeviceAddressEv>
 8002102:	4603      	mov	r3, r0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2200      	movs	r2, #0
 8002108:	603b      	str	r3, [r7, #0]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800210e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002112:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
		WriteFlash();
 8002116:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002118:	f000 f805 	bl	8002126 <_ZN5Flash10WriteFlashEv>
	}
}
 800211c:	bf00      	nop
 800211e:	3758      	adds	r7, #88	; 0x58
 8002120:	46bd      	mov	sp, r7
 8002122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002126 <_ZN5Flash10WriteFlashEv>:
 *
 * @param None
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef Flash::WriteFlash()
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b088      	sub	sp, #32
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]

	FLASH_EraseInitTypeDef EraseinitStruct;
	uint32_t sectorError = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]

	if (HAL_FLASH_Unlock() != HAL_OK)
 8002132:	f003 fdc9 	bl	8005cc8 <HAL_FLASH_Unlock>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf14      	ite	ne
 800213c:	2301      	movne	r3, #1
 800213e:	2300      	moveq	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d009      	beq.n	800215a <_ZN5Flash10WriteFlashEv+0x34>
	{
		HAL_FLASH_Lock();
 8002146:	f003 fde1 	bl	8005d0c <HAL_FLASH_Lock>
		driveStatus->setError(DriveStatus::E_FLASH_ERROR);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2101      	movs	r1, #1
 8002150:	4618      	mov	r0, r3
 8002152:	f001 f9b1 	bl	80034b8 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
		return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e050      	b.n	80021fc <_ZN5Flash10WriteFlashEv+0xd6>
	}

	EraseinitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
	EraseinitStruct.Banks = 1;
 800215e:	2301      	movs	r3, #1
 8002160:	613b      	str	r3, [r7, #16]
	EraseinitStruct.Page = UFLASH_PAGE;
 8002162:	237f      	movs	r3, #127	; 0x7f
 8002164:	617b      	str	r3, [r7, #20]
	EraseinitStruct.NbPages = UFLASH_NPAGES;
 8002166:	2301      	movs	r3, #1
 8002168:	61bb      	str	r3, [r7, #24]

	if (HAL_FLASHEx_Erase(&EraseinitStruct, &sectorError) != HAL_OK)
 800216a:	f107 0208 	add.w	r2, r7, #8
 800216e:	f107 030c 	add.w	r3, r7, #12
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f003 fe8d 	bl	8005e94 <HAL_FLASHEx_Erase>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	bf14      	ite	ne
 8002180:	2301      	movne	r3, #1
 8002182:	2300      	moveq	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d009      	beq.n	800219e <_ZN5Flash10WriteFlashEv+0x78>
	{
		HAL_FLASH_Lock();
 800218a:	f003 fdbf 	bl	8005d0c <HAL_FLASH_Lock>
		driveStatus->setError(DriveStatus::E_FLASH_ERROR);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2101      	movs	r1, #1
 8002194:	4618      	mov	r0, r3
 8002196:	f001 f98f 	bl	80034b8 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
		return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e02e      	b.n	80021fc <_ZN5Flash10WriteFlashEv+0xd6>
	}

	for (int i = 0; i < UFLASH_SIZE; i++)
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	2b13      	cmp	r3, #19
 80021a6:	dc14      	bgt.n	80021d2 <_ZN5Flash10WriteFlashEv+0xac>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
				(FLASH_STAR_PAGE_ADDR + 64 * i), tmpFlashArray[i]);
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80021ae:	f503 637e 	add.w	r3, r3, #4064	; 0xfe0
 80021b2:	019b      	lsls	r3, r3, #6
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 80021b4:	4619      	mov	r1, r3
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	3301      	adds	r3, #1
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	2000      	movs	r0, #0
 80021c6:	f003 fd13 	bl	8005bf0 <HAL_FLASH_Program>
	for (int i = 0; i < UFLASH_SIZE; i++)
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3301      	adds	r3, #1
 80021ce:	61fb      	str	r3, [r7, #28]
 80021d0:	e7e7      	b.n	80021a2 <_ZN5Flash10WriteFlashEv+0x7c>
	}

	if (HAL_FLASH_Lock() != HAL_OK)
 80021d2:	f003 fd9b 	bl	8005d0c <HAL_FLASH_Lock>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	bf14      	ite	ne
 80021dc:	2301      	movne	r3, #1
 80021de:	2300      	moveq	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d009      	beq.n	80021fa <_ZN5Flash10WriteFlashEv+0xd4>
	{
		HAL_FLASH_Lock();
 80021e6:	f003 fd91 	bl	8005d0c <HAL_FLASH_Lock>
		driveStatus->setError(DriveStatus::E_FLASH_ERROR);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2101      	movs	r1, #1
 80021f0:	4618      	mov	r0, r3
 80021f2:	f001 f961 	bl	80034b8 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
		return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <_ZN5Flash10WriteFlashEv+0xd6>
	}

	return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3720      	adds	r7, #32
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>:
 */

#include "DO.h"
#include "../Tools/Delay.h"

DigitalOut::DigitalOut(GPIO_TypeDef* GPIOx_N, uint16_t GPIO_Pin_N, GPIO_TypeDef* GPIOx_P, uint16_t GPIO_Pin_P){
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	4613      	mov	r3, r2
 8002212:	80fb      	strh	r3, [r7, #6]
	this->GPIO_Pin_N = GPIO_Pin_N;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	88fa      	ldrh	r2, [r7, #6]
 8002218:	809a      	strh	r2, [r3, #4]
	this->GPIOx_N = GPIOx_N;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	601a      	str	r2, [r3, #0]
	this->GPIO_Pin_P = GPIO_Pin_P;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8b3a      	ldrh	r2, [r7, #24]
 8002224:	819a      	strh	r2, [r3, #12]
	this->GPIOx_P = GPIOx_P;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	609a      	str	r2, [r3, #8]
}
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <_ZN10DigitalOut3SetEv>:


/*
 *
 */
void DigitalOut::Set() {
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
	//P set, N reset
	HAL_GPIO_WritePin(GPIOx_N, GPIO_Pin_N, GPIO_PIN_RESET);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6818      	ldr	r0, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	889b      	ldrh	r3, [r3, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	4619      	mov	r1, r3
 800224e:	f004 f8d9 	bl	8006404 <HAL_GPIO_WritePin>
	Delay::DWT_Delay_us(25);
 8002252:	2019      	movs	r0, #25
 8002254:	f001 fa6c 	bl	8003730 <_ZN5Delay12DWT_Delay_usEm>
	HAL_GPIO_WritePin(GPIOx_P, GPIO_Pin_P, GPIO_PIN_SET);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6898      	ldr	r0, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	899b      	ldrh	r3, [r3, #12]
 8002260:	2201      	movs	r2, #1
 8002262:	4619      	mov	r1, r3
 8002264:	f004 f8ce 	bl	8006404 <HAL_GPIO_WritePin>
	status = true;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	739a      	strb	r2, [r3, #14]
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <_ZN10DigitalOut5ResetEv>:


/*
 *
 */
void DigitalOut::Reset() {
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOx_P, GPIO_Pin_P, GPIO_PIN_RESET);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6898      	ldr	r0, [r3, #8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	899b      	ldrh	r3, [r3, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	4619      	mov	r1, r3
 800228a:	f004 f8bb 	bl	8006404 <HAL_GPIO_WritePin>
	Delay::DWT_Delay_us(25);
 800228e:	2019      	movs	r0, #25
 8002290:	f001 fa4e 	bl	8003730 <_ZN5Delay12DWT_Delay_usEm>
	HAL_GPIO_WritePin(GPIOx_N, GPIO_Pin_N, GPIO_PIN_SET);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	889b      	ldrh	r3, [r3, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	4619      	mov	r1, r3
 80022a0:	f004 f8b0 	bl	8006404 <HAL_GPIO_WritePin>
	status = false;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	739a      	strb	r2, [r3, #14]
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <_ZN3LEDC1EP12GPIO_TypeDeftb>:


#include "LED.h"


LED::LED(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool outputInverted) {
 80022b2:	b480      	push	{r7}
 80022b4:	b085      	sub	sp, #20
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	4611      	mov	r1, r2
 80022be:	461a      	mov	r2, r3
 80022c0:	460b      	mov	r3, r1
 80022c2:	80fb      	strh	r3, [r7, #6]
 80022c4:	4613      	mov	r3, r2
 80022c6:	717b      	strb	r3, [r7, #5]

	this->GPIO_Pin = GPIO_Pin;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	88fa      	ldrh	r2, [r7, #6]
 80022cc:	809a      	strh	r2, [r3, #4]
	this->GPIOx = GPIOx;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	601a      	str	r2, [r3, #0]
	this->outputInverted = outputInverted;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	797a      	ldrb	r2, [r7, #5]
 80022d8:	719a      	strb	r2, [r3, #6]
}
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <_ZN3LED3OFFEv>:
}

/*
 * LED OFF method
 */
void LED::OFF() {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
	//check if output is inverted
	if(outputInverted){
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	799b      	ldrb	r3, [r3, #6]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d008      	beq.n	800230a <_ZN3LED3OFFEv+0x22>
		//clear output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	889b      	ldrh	r3, [r3, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	4619      	mov	r1, r3
 8002304:	f004 f87e 	bl	8006404 <HAL_GPIO_WritePin>
	}else{
		//write output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
	}
}
 8002308:	e007      	b.n	800231a <_ZN3LED3OFFEv+0x32>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	889b      	ldrh	r3, [r3, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	4619      	mov	r1, r3
 8002316:	f004 f875 	bl	8006404 <HAL_GPIO_WritePin>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <_ZN3LED6ToggleEv>:

/*
 * LED Toggle method
 */
void LED::Toggle() {
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	889b      	ldrh	r3, [r3, #4]
 8002332:	4619      	mov	r1, r3
 8002334:	4610      	mov	r0, r2
 8002336:	f004 f87d 	bl	8006434 <HAL_GPIO_TogglePin>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <_ZN10RFM95_LoRaC1Ev>:
 */

#include "RFM95.h"
#include "../AppMain/AppMain.h"

RFM95_LoRa::RFM95_LoRa() :
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(0)
 800234c:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <_ZN10RFM95_LoRaC1Ev+0x34>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	611a      	str	r2, [r3, #16]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	615a      	str	r2, [r3, #20]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	619a      	str	r2, [r3, #24]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	61da      	str	r2, [r3, #28]
{

}
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	0800f0d8 	.word	0x0800f0d8

0800237c <_ZN10RFM95_LoRa9selectRFMEv>:
 * @brief RFM95 chip select
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::selectRFM(){
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_RESET);
 8002384:	2200      	movs	r2, #0
 8002386:	2108      	movs	r1, #8
 8002388:	4803      	ldr	r0, [pc, #12]	; (8002398 <_ZN10RFM95_LoRa9selectRFMEv+0x1c>)
 800238a:	f004 f83b 	bl	8006404 <HAL_GPIO_WritePin>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	48000400 	.word	0x48000400

0800239c <_ZN10RFM95_LoRa11deselectRFMEv>:
 * @brief RFM95 chip deselect
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::deselectRFM(){
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_SET);
 80023a4:	2201      	movs	r2, #1
 80023a6:	2108      	movs	r1, #8
 80023a8:	4803      	ldr	r0, [pc, #12]	; (80023b8 <_ZN10RFM95_LoRa11deselectRFMEv+0x1c>)
 80023aa:	f004 f82b 	bl	8006404 <HAL_GPIO_WritePin>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	48000400 	.word	0x48000400

080023bc <_ZN10RFM95_LoRa8resetRFMEv>:

void RFM95_LoRa::resetRFM(){
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 80023c4:	2200      	movs	r2, #0
 80023c6:	2110      	movs	r1, #16
 80023c8:	4808      	ldr	r0, [pc, #32]	; (80023ec <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 80023ca:	f004 f81b 	bl	8006404 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80023ce:	2001      	movs	r0, #1
 80023d0:	f002 f896 	bl	8004500 <HAL_Delay>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 80023d4:	2201      	movs	r2, #1
 80023d6:	2110      	movs	r1, #16
 80023d8:	4804      	ldr	r0, [pc, #16]	; (80023ec <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 80023da:	f004 f813 	bl	8006404 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80023de:	2005      	movs	r0, #5
 80023e0:	f002 f88e 	bl	8004500 <HAL_Delay>
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	48000400 	.word	0x48000400

080023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>:

bool RFM95_LoRa::writeRegister(uint8_t addr, uint8_t data){
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	70fb      	strb	r3, [r7, #3]
 80023fc:	4613      	mov	r3, r2
 80023fe:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2] = {(uint8_t)(addr | 0x80), data};
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002406:	b2db      	uxtb	r3, r3
 8002408:	733b      	strb	r3, [r7, #12]
 800240a:	78bb      	ldrb	r3, [r7, #2]
 800240c:	737b      	strb	r3, [r7, #13]
	selectRFM();
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff ffb4 	bl	800237c <_ZN10RFM95_LoRa9selectRFMEv>
	if(HAL_SPI_Transmit(&hspi3, (uint8_t*)buff, 2, 100) != HAL_OK){
 8002414:	f107 010c 	add.w	r1, r7, #12
 8002418:	2364      	movs	r3, #100	; 0x64
 800241a:	2202      	movs	r2, #2
 800241c:	480b      	ldr	r0, [pc, #44]	; (800244c <_ZN10RFM95_LoRa13writeRegisterEhh+0x5c>)
 800241e:	f007 f81a 	bl	8009456 <HAL_SPI_Transmit>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf14      	ite	ne
 8002428:	2301      	movne	r3, #1
 800242a:	2300      	moveq	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d004      	beq.n	800243c <_ZN10RFM95_LoRa13writeRegisterEhh+0x4c>
		deselectRFM();
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ffb2 	bl	800239c <_ZN10RFM95_LoRa11deselectRFMEv>
		return false;
 8002438:	2300      	movs	r3, #0
 800243a:	e003      	b.n	8002444 <_ZN10RFM95_LoRa13writeRegisterEhh+0x54>
	}
	deselectRFM();
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff ffad 	bl	800239c <_ZN10RFM95_LoRa11deselectRFMEv>
	return true;
 8002442:	2301      	movs	r3, #1
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	200004c0 	.word	0x200004c0

08002450 <_ZN10RFM95_LoRa12readRegisterEh>:

uint8_t RFM95_LoRa::readRegister(uint8_t addr){
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af02      	add	r7, sp, #8
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	70fb      	strb	r3, [r7, #3]
	uint8_t rxData[2] = {0,0};
 800245c:	2300      	movs	r3, #0
 800245e:	81bb      	strh	r3, [r7, #12]
	uint8_t txData[1] = {addr};
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	723b      	strb	r3, [r7, #8]

	selectRFM();
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ff89 	bl	800237c <_ZN10RFM95_LoRa9selectRFMEv>
	HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)txData,(uint8_t*)rxData,2,100);
 800246a:	f107 020c 	add.w	r2, r7, #12
 800246e:	f107 0108 	add.w	r1, r7, #8
 8002472:	2364      	movs	r3, #100	; 0x64
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	2302      	movs	r3, #2
 8002478:	4805      	ldr	r0, [pc, #20]	; (8002490 <_ZN10RFM95_LoRa12readRegisterEh+0x40>)
 800247a:	f007 f95a 	bl	8009732 <HAL_SPI_TransmitReceive>
	deselectRFM();
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ff8c 	bl	800239c <_ZN10RFM95_LoRa11deselectRFMEv>
	return rxData[1];
 8002484:	7b7b      	ldrb	r3, [r7, #13]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	200004c0 	.word	0x200004c0

08002494 <_ZN10RFM95_LoRa5beginEl>:


int RFM95_LoRa::begin(long frequency){
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
 resetRFM();
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff ff8c 	bl	80023bc <_ZN10RFM95_LoRa8resetRFMEv>
  // check version
  uint8_t version = readRegister(REG_VERSION);
 80024a4:	2142      	movs	r1, #66	; 0x42
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff ffd2 	bl	8002450 <_ZN10RFM95_LoRa12readRegisterEh>
 80024ac:	4603      	mov	r3, r0
 80024ae:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	2b12      	cmp	r3, #18
 80024b4:	d001      	beq.n	80024ba <_ZN10RFM95_LoRa5beginEl+0x26>
    return 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e02b      	b.n	8002512 <_ZN10RFM95_LoRa5beginEl+0x7e>
  }
  // put in sleep mode
  sleep();
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f998 	bl	80027f0 <_ZN10RFM95_LoRa5sleepEv>
  // set frequency
  setFrequency(frequency);
 80024c0:	6839      	ldr	r1, [r7, #0]
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f9de 	bl	8002884 <_ZN10RFM95_LoRa12setFrequencyEl>
  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 80024c8:	2200      	movs	r2, #0
 80024ca:	210e      	movs	r1, #14
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ff8f 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 80024d2:	2200      	movs	r2, #0
 80024d4:	210f      	movs	r1, #15
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff ff8a 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 80024dc:	210c      	movs	r1, #12
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ffb6 	bl	8002450 <_ZN10RFM95_LoRa12readRegisterEh>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f043 0303 	orr.w	r3, r3, #3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	461a      	mov	r2, r3
 80024ee:	210c      	movs	r1, #12
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ff7d 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 80024f6:	2204      	movs	r2, #4
 80024f8:	2126      	movs	r1, #38	; 0x26
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff ff78 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set output power to 17 dBm
  setTxPower(20);
 8002500:	2201      	movs	r2, #1
 8002502:	2114      	movs	r1, #20
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f980 	bl	800280a <_ZN10RFM95_LoRa10setTxPowerEii>
  // put in standby mode
  idle();
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f963 	bl	80027d6 <_ZN10RFM95_LoRa4idleEv>
  return 1;
 8002510:	2301      	movs	r3, #1
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <_ZN10RFM95_LoRa11beginPacketEi>:
  sleep();
}



int RFM95_LoRa::beginPacket(int implicitHeader){
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
  // put in standby mode
  idle();
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f956 	bl	80027d6 <_ZN10RFM95_LoRa4idleEv>

  if (implicitHeader) {
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <_ZN10RFM95_LoRa11beginPacketEi+0x1e>
    implicitHeaderMode();
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fada 	bl	8002aea <_ZN10RFM95_LoRa18implicitHeaderModeEv>
 8002536:	e002      	b.n	800253e <_ZN10RFM95_LoRa11beginPacketEi+0x24>
  } else {
    explicitHeaderMode();
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 fabe 	bl	8002aba <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // reset FIFO address and paload length
  writeRegister(REG_FIFO_ADDR_PTR, 0);
 800253e:	2200      	movs	r2, #0
 8002540:	210d      	movs	r1, #13
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ff54 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_PAYLOAD_LENGTH, 0);
 8002548:	2200      	movs	r2, #0
 800254a:	2122      	movs	r1, #34	; 0x22
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff ff4f 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 8002552:	2301      	movs	r3, #1
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <_ZN10RFM95_LoRa9endPacketEv>:



int RFM95_LoRa::endPacket(){
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  // put in TX mode
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8002564:	2283      	movs	r2, #131	; 0x83
 8002566:	2101      	movs	r1, #1
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff ff41 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // wait for TX done
  while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 800256e:	2112      	movs	r1, #18
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff ff6d 	bl	8002450 <_ZN10RFM95_LoRa12readRegisterEh>
 8002576:	4603      	mov	r3, r0
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	bf0c      	ite	eq
 8002580:	2301      	moveq	r3, #1
 8002582:	2300      	movne	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <_ZN10RFM95_LoRa9endPacketEv+0x36>
	  HAL_Delay(1);
 800258a:	2001      	movs	r0, #1
 800258c:	f001 ffb8 	bl	8004500 <HAL_Delay>
  while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 8002590:	e7ed      	b.n	800256e <_ZN10RFM95_LoRa9endPacketEv+0x12>
  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8002592:	2208      	movs	r2, #8
 8002594:	2112      	movs	r1, #18
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff ff2a 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 800259c:	2301      	movs	r3, #1
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <_ZN10RFM95_LoRa11parsePacketEi>:



int RFM95_LoRa::parsePacket(int size)

{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b084      	sub	sp, #16
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
  int packetLength = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 80025b4:	2112      	movs	r1, #18
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff ff4a 	bl	8002450 <_ZN10RFM95_LoRa12readRegisterEh>
 80025bc:	4603      	mov	r3, r0
 80025be:	60bb      	str	r3, [r7, #8]
  if (size > 0) {
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	dd0a      	ble.n	80025dc <_ZN10RFM95_LoRa11parsePacketEi+0x36>
    implicitHeaderMode();
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fa8f 	bl	8002aea <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	2122      	movs	r1, #34	; 0x22
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ff0b 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
 80025da:	e002      	b.n	80025e2 <_ZN10RFM95_LoRa11parsePacketEi+0x3c>
  } else {
    explicitHeaderMode();
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 fa6c 	bl	8002aba <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	2112      	movs	r1, #18
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff ff00 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d026      	beq.n	8002648 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b00      	cmp	r3, #0
 8002602:	d121      	bne.n	8002648 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
    // received a packet
    _packetIndex = 0;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	615a      	str	r2, [r3, #20]
    // read packet length
    if (_implicitHeaderMode) {
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d006      	beq.n	8002620 <_ZN10RFM95_LoRa11parsePacketEi+0x7a>
      packetLength = readRegister(REG_PAYLOAD_LENGTH);
 8002612:	2122      	movs	r1, #34	; 0x22
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ff1b 	bl	8002450 <_ZN10RFM95_LoRa12readRegisterEh>
 800261a:	4603      	mov	r3, r0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	e005      	b.n	800262c <_ZN10RFM95_LoRa11parsePacketEi+0x86>
    } else {
      packetLength = readRegister(REG_RX_NB_BYTES);
 8002620:	2113      	movs	r1, #19
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ff14 	bl	8002450 <_ZN10RFM95_LoRa12readRegisterEh>
 8002628:	4603      	mov	r3, r0
 800262a:	60fb      	str	r3, [r7, #12]
    }
    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 800262c:	2110      	movs	r1, #16
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff ff0e 	bl	8002450 <_ZN10RFM95_LoRa12readRegisterEh>
 8002634:	4603      	mov	r3, r0
 8002636:	461a      	mov	r2, r3
 8002638:	210d      	movs	r1, #13
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff fed8 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in standby mode
    idle();
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f8c8 	bl	80027d6 <_ZN10RFM95_LoRa4idleEv>
 8002646:	e015      	b.n	8002674 <_ZN10RFM95_LoRa11parsePacketEi+0xce>
  } else if (readRegister(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
 8002648:	2101      	movs	r1, #1
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff ff00 	bl	8002450 <_ZN10RFM95_LoRa12readRegisterEh>
 8002650:	4603      	mov	r3, r0
 8002652:	2b86      	cmp	r3, #134	; 0x86
 8002654:	bf14      	ite	ne
 8002656:	2301      	movne	r3, #1
 8002658:	2300      	moveq	r3, #0
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d009      	beq.n	8002674 <_ZN10RFM95_LoRa11parsePacketEi+0xce>
    // not currently in RX mode
    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 8002660:	2200      	movs	r2, #0
 8002662:	210d      	movs	r1, #13
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff fec3 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in single RX mode
    writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 800266a:	2286      	movs	r2, #134	; 0x86
 800266c:	2101      	movs	r1, #1
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff febe 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  return packetLength;
 8002674:	68fb      	ldr	r3, [r7, #12]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <_ZN10RFM95_LoRa5writeEh>:

float RFM95_LoRa::packetSnr(){
  return ((int8_t)readRegister(REG_PKT_SNR_VALUE)) * 0.25;
}

size_t RFM95_LoRa::write(uint8_t byte){
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	460b      	mov	r3, r1
 8002688:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	3304      	adds	r3, #4
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	1cf9      	adds	r1, r7, #3
 8002694:	2201      	movs	r2, #1
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	4798      	blx	r3
 800269a:	4603      	mov	r3, r0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <_ZN10RFM95_LoRa5writeEPKhj>:



size_t RFM95_LoRa::write(const uint8_t *buffer, size_t size){
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 80026b0:	2122      	movs	r1, #34	; 0x22
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f7ff fecc 	bl	8002450 <_ZN10RFM95_LoRa12readRegisterEh>
 80026b8:	4603      	mov	r3, r0
 80026ba:	613b      	str	r3, [r7, #16]
  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	2bff      	cmp	r3, #255	; 0xff
 80026c4:	d903      	bls.n	80026ce <_ZN10RFM95_LoRa5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80026cc:	607b      	str	r3, [r7, #4]
  }
  // write data
  for (size_t i = 0; i < size; i++) {
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d20c      	bcs.n	80026f4 <_ZN10RFM95_LoRa5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	4413      	add	r3, r2
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	2100      	movs	r1, #0
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f7ff fe82 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	3301      	adds	r3, #1
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	e7ee      	b.n	80026d2 <_ZN10RFM95_LoRa5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	2122      	movs	r1, #34	; 0x22
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f7ff fe73 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return size;
 800270a:	687b      	ldr	r3, [r7, #4]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <_ZN10RFM95_LoRa9availableEv>:


int RFM95_LoRa::available()
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 800271c:	2113      	movs	r1, #19
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff fe96 	bl	8002450 <_ZN10RFM95_LoRa12readRegisterEh>
 8002724:	4603      	mov	r3, r0
 8002726:	461a      	mov	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	1ad3      	subs	r3, r2, r3
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <_ZN10RFM95_LoRa4readEv>:



int RFM95_LoRa::read(){
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  if (!available()) {
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	3308      	adds	r3, #8
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	4798      	blx	r3
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	bf0c      	ite	eq
 8002750:	2301      	moveq	r3, #1
 8002752:	2300      	movne	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <_ZN10RFM95_LoRa4readEv+0x2a>
    return -1;
 800275a:	f04f 33ff 	mov.w	r3, #4294967295
 800275e:	e009      	b.n	8002774 <_ZN10RFM95_LoRa4readEv+0x3e>
  }
  _packetIndex++;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	615a      	str	r2, [r3, #20]
  return readRegister(REG_FIFO);
 800276a:	2100      	movs	r1, #0
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff fe6f 	bl	8002450 <_ZN10RFM95_LoRa12readRegisterEh>
 8002772:	4603      	mov	r3, r0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <_ZN10RFM95_LoRa4peekEv>:



int RFM95_LoRa::peek(){
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	3308      	adds	r3, #8
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	4798      	blx	r3
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	bf0c      	ite	eq
 8002796:	2301      	moveq	r3, #1
 8002798:	2300      	movne	r3, #0
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <_ZN10RFM95_LoRa4peekEv+0x2a>
    return -1;
 80027a0:	f04f 33ff 	mov.w	r3, #4294967295
 80027a4:	e013      	b.n	80027ce <_ZN10RFM95_LoRa4peekEv+0x52>
  }
  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 80027a6:	210d      	movs	r1, #13
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff fe51 	bl	8002450 <_ZN10RFM95_LoRa12readRegisterEh>
 80027ae:	4603      	mov	r3, r0
 80027b0:	60fb      	str	r3, [r7, #12]
  // read
  uint8_t b = readRegister(REG_FIFO);
 80027b2:	2100      	movs	r1, #0
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff fe4b 	bl	8002450 <_ZN10RFM95_LoRa12readRegisterEh>
 80027ba:	4603      	mov	r3, r0
 80027bc:	72fb      	strb	r3, [r7, #11]
  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	210d      	movs	r1, #13
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff fe12 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return b;
 80027cc:	7afb      	ldrb	r3, [r7, #11]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <_ZN10RFM95_LoRa4idleEv>:
    explicitHeaderMode();
  }
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
}

void RFM95_LoRa::idle(){
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 80027de:	2281      	movs	r2, #129	; 0x81
 80027e0:	2101      	movs	r1, #1
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff fe04 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <_ZN10RFM95_LoRa5sleepEv>:

void RFM95_LoRa::sleep(){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 80027f8:	2280      	movs	r2, #128	; 0x80
 80027fa:	2101      	movs	r1, #1
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff fdf7 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <_ZN10RFM95_LoRa10setTxPowerEii>:



void RFM95_LoRa::setTxPower(int level, int outputPin){
 800280a:	b580      	push	{r7, lr}
 800280c:	b084      	sub	sp, #16
 800280e:	af00      	add	r7, sp, #0
 8002810:	60f8      	str	r0, [r7, #12]
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d116      	bne.n	800284a <_ZN10RFM95_LoRa10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	da02      	bge.n	8002828 <_ZN10RFM95_LoRa10setTxPowerEii+0x1e>
      level = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	e004      	b.n	8002832 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
    } else if (level > 14) {
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b0e      	cmp	r3, #14
 800282c:	dd01      	ble.n	8002832 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
      level = 14;
 800282e:	230e      	movs	r3, #14
 8002830:	60bb      	str	r3, [r7, #8]
    }
    writeRegister(REG_PA_CONFIG, 0x70 | level);
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	b25b      	sxtb	r3, r3
 8002836:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800283a:	b25b      	sxtb	r3, r3
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	2109      	movs	r1, #9
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f7ff fdd4 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
    } else if (level > 17) {
      level = 17;
    }
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 8002848:	e018      	b.n	800287c <_ZN10RFM95_LoRa10setTxPowerEii+0x72>
    if (level < 2) {
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b01      	cmp	r3, #1
 800284e:	dc02      	bgt.n	8002856 <_ZN10RFM95_LoRa10setTxPowerEii+0x4c>
      level = 2;
 8002850:	2302      	movs	r3, #2
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	e004      	b.n	8002860 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
    } else if (level > 17) {
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b11      	cmp	r3, #17
 800285a:	dd01      	ble.n	8002860 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
      level = 17;
 800285c:	2311      	movs	r3, #17
 800285e:	60bb      	str	r3, [r7, #8]
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	3b02      	subs	r3, #2
 8002866:	b2db      	uxtb	r3, r3
 8002868:	b25b      	sxtb	r3, r3
 800286a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800286e:	b25b      	sxtb	r3, r3
 8002870:	b2db      	uxtb	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	2109      	movs	r1, #9
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f7ff fdba 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <_ZN10RFM95_LoRa12setFrequencyEl>:



void RFM95_LoRa::setFrequency(long frequency){
 8002884:	b5b0      	push	{r4, r5, r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	6838      	ldr	r0, [r7, #0]
 8002892:	6108      	str	r0, [r1, #16]
  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8002894:	6839      	ldr	r1, [r7, #0]
 8002896:	17c8      	asrs	r0, r1, #31
 8002898:	460a      	mov	r2, r1
 800289a:	4603      	mov	r3, r0
 800289c:	1355      	asrs	r5, r2, #13
 800289e:	04d4      	lsls	r4, r2, #19
 80028a0:	4a1a      	ldr	r2, [pc, #104]	; (800290c <_ZN10RFM95_LoRa12setFrequencyEl+0x88>)
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	4620      	mov	r0, r4
 80028a8:	4629      	mov	r1, r5
 80028aa:	f7fd fc8f 	bl	80001cc <__aeabi_uldivmod>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 80028b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	0c02      	lsrs	r2, r0, #16
 80028c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80028c8:	0c0b      	lsrs	r3, r1, #16
 80028ca:	b2d3      	uxtb	r3, r2
 80028cc:	461a      	mov	r2, r3
 80028ce:	2106      	movs	r1, #6
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff fd8d 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 80028d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	0a02      	lsrs	r2, r0, #8
 80028e4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80028e8:	0a0b      	lsrs	r3, r1, #8
 80028ea:	b2d3      	uxtb	r3, r2
 80028ec:	461a      	mov	r2, r3
 80028ee:	2107      	movs	r1, #7
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff fd7d 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 80028f6:	7a3b      	ldrb	r3, [r7, #8]
 80028f8:	461a      	mov	r2, r3
 80028fa:	2108      	movs	r1, #8
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff fd77 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002902:	bf00      	nop
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bdb0      	pop	{r4, r5, r7, pc}
 800290a:	bf00      	nop
 800290c:	01e84800 	.word	0x01e84800

08002910 <_ZN10RFM95_LoRa18setSpreadingFactorEi>:



void RFM95_LoRa::setSpreadingFactor(int sf){
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b05      	cmp	r3, #5
 800291e:	dc02      	bgt.n	8002926 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x16>
    sf = 6;
 8002920:	2306      	movs	r3, #6
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	e004      	b.n	8002930 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b0c      	cmp	r3, #12
 800292a:	dd01      	ble.n	8002930 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
    sf = 12;
 800292c:	230c      	movs	r3, #12
 800292e:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2b06      	cmp	r3, #6
 8002934:	d10a      	bne.n	800294c <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 8002936:	22c5      	movs	r2, #197	; 0xc5
 8002938:	2131      	movs	r1, #49	; 0x31
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff fd58 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 8002940:	220c      	movs	r2, #12
 8002942:	2137      	movs	r1, #55	; 0x37
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7ff fd53 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
 800294a:	e009      	b.n	8002960 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 800294c:	22c3      	movs	r2, #195	; 0xc3
 800294e:	2131      	movs	r1, #49	; 0x31
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff fd4d 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 8002956:	220a      	movs	r2, #10
 8002958:	2137      	movs	r1, #55	; 0x37
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff fd48 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 8002960:	211e      	movs	r1, #30
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff fd74 	bl	8002450 <_ZN10RFM95_LoRa12readRegisterEh>
 8002968:	4603      	mov	r3, r0
 800296a:	b25b      	sxtb	r3, r3
 800296c:	f003 030f 	and.w	r3, r3, #15
 8002970:	b25a      	sxtb	r2, r3
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	b25b      	sxtb	r3, r3
 8002978:	4313      	orrs	r3, r2
 800297a:	b25b      	sxtb	r3, r3
 800297c:	b2db      	uxtb	r3, r3
 800297e:	461a      	mov	r2, r3
 8002980:	211e      	movs	r1, #30
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff fd34 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <_ZN10RFM95_LoRa18setSignalBandwidthEl>:


void RFM95_LoRa::setSignalBandwidth(long sbw){
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  int bw;
  if (sbw <= 7.8E3) {
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	f641 6278 	movw	r2, #7800	; 0x1e78
 80029a0:	4293      	cmp	r3, r2
 80029a2:	dc02      	bgt.n	80029aa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x1a>
    bw = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	e03f      	b.n	8002a2a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 10.4E3) {
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	f642 02a0 	movw	r2, #10400	; 0x28a0
 80029b0:	4293      	cmp	r3, r2
 80029b2:	dc02      	bgt.n	80029ba <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x2a>
    bw = 1;
 80029b4:	2301      	movs	r3, #1
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	e037      	b.n	8002a2a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 15.6E3) {
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 80029c0:	4293      	cmp	r3, r2
 80029c2:	dc02      	bgt.n	80029ca <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x3a>
    bw = 2;
 80029c4:	2302      	movs	r3, #2
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	e02f      	b.n	8002a2a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 20.8E3) {
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	f245 1240 	movw	r2, #20800	; 0x5140
 80029d0:	4293      	cmp	r3, r2
 80029d2:	dc02      	bgt.n	80029da <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x4a>
    bw = 3;
 80029d4:	2303      	movs	r3, #3
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	e027      	b.n	8002a2a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 31.25E3) {
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	f647 2212 	movw	r2, #31250	; 0x7a12
 80029e0:	4293      	cmp	r3, r2
 80029e2:	dc02      	bgt.n	80029ea <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x5a>
    bw = 4;
 80029e4:	2304      	movs	r3, #4
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	e01f      	b.n	8002a2a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 41.7E3) {
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 80029f0:	4293      	cmp	r3, r2
 80029f2:	dc02      	bgt.n	80029fa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x6a>
    bw = 5;
 80029f4:	2305      	movs	r3, #5
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e017      	b.n	8002a2a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 62.5E3) {
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002a00:	4293      	cmp	r3, r2
 8002a02:	dc02      	bgt.n	8002a0a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x7a>
    bw = 6;
 8002a04:	2306      	movs	r3, #6
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	e00f      	b.n	8002a2a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 125E3) {
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	4a13      	ldr	r2, [pc, #76]	; (8002a5c <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xcc>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	dc02      	bgt.n	8002a18 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x88>
    bw = 7;
 8002a12:	2307      	movs	r3, #7
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	e008      	b.n	8002a2a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 250E3) {
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	4a11      	ldr	r2, [pc, #68]	; (8002a60 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xd0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	dc02      	bgt.n	8002a26 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x96>
    bw = 8;
 8002a20:	2308      	movs	r3, #8
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	e001      	b.n	8002a2a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 8002a26:	2309      	movs	r3, #9
 8002a28:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 8002a2a:	211d      	movs	r1, #29
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff fd0f 	bl	8002450 <_ZN10RFM95_LoRa12readRegisterEh>
 8002a32:	4603      	mov	r3, r0
 8002a34:	b25b      	sxtb	r3, r3
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	b25a      	sxtb	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	b25b      	sxtb	r3, r3
 8002a42:	4313      	orrs	r3, r2
 8002a44:	b25b      	sxtb	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	211d      	movs	r1, #29
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff fccf 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	0001e848 	.word	0x0001e848
 8002a60:	0003d090 	.word	0x0003d090

08002a64 <_ZN10RFM95_LoRa14setCodingRate4Ei>:



void RFM95_LoRa::setCodingRate4(int denominator){
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  if (denominator < 5) {
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	dc02      	bgt.n	8002a7a <_ZN10RFM95_LoRa14setCodingRate4Ei+0x16>
    denominator = 5;
 8002a74:	2305      	movs	r3, #5
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	e004      	b.n	8002a84 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
  } else if (denominator > 8) {
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	dd01      	ble.n	8002a84 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
	  denominator = 8;
 8002a80:	2308      	movs	r3, #8
 8002a82:	603b      	str	r3, [r7, #0]
  }
  int cr = denominator - 4;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	3b04      	subs	r3, #4
 8002a88:	60fb      	str	r3, [r7, #12]
  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 8002a8a:	211d      	movs	r1, #29
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff fcdf 	bl	8002450 <_ZN10RFM95_LoRa12readRegisterEh>
 8002a92:	4603      	mov	r3, r0
 8002a94:	b25b      	sxtb	r3, r3
 8002a96:	f023 030e 	bic.w	r3, r3, #14
 8002a9a:	b25a      	sxtb	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	b25b      	sxtb	r3, r3
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	b25b      	sxtb	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	211d      	movs	r1, #29
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff fc9f 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <_ZN10RFM95_LoRa18explicitHeaderModeEv>:
uint8_t RFM95_LoRa::random(){
  return readRegister(REG_RSSI_WIDEBAND);
}


void RFM95_LoRa::explicitHeaderMode(){
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8002ac8:	211d      	movs	r1, #29
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff fcc0 	bl	8002450 <_ZN10RFM95_LoRa12readRegisterEh>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	211d      	movs	r1, #29
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff fc87 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <_ZN10RFM95_LoRa18implicitHeaderModeEv>:


void RFM95_LoRa::implicitHeaderMode(){
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8002af8:	211d      	movs	r1, #29
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff fca8 	bl	8002450 <_ZN10RFM95_LoRa12readRegisterEh>
 8002b00:	4603      	mov	r3, r0
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	211d      	movs	r1, #29
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff fc6f 	bl	80023f0 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <_ZN10RFM95_LoRa7InitRFMEv>:
    writeRegister(REG_FIFO_ADDR_PTR, 0);
  }
}


bool RFM95_LoRa::InitRFM(){
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]


	setFrequency(868000000);
 8002b24:	4914      	ldr	r1, [pc, #80]	; (8002b78 <_ZN10RFM95_LoRa7InitRFMEv+0x5c>)
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7ff feac 	bl	8002884 <_ZN10RFM95_LoRa12setFrequencyEl>
	setTxPower(17, PA_OUTPUT_PA_BOOST_PIN);
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	2111      	movs	r1, #17
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff fe6a 	bl	800280a <_ZN10RFM95_LoRa10setTxPowerEii>
	setSignalBandwidth(31.25E3);
 8002b36:	f647 2112 	movw	r1, #31250	; 0x7a12
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff ff28 	bl	8002990 <_ZN10RFM95_LoRa18setSignalBandwidthEl>
	setSpreadingFactor(12);
 8002b40:	210c      	movs	r1, #12
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff fee4 	bl	8002910 <_ZN10RFM95_LoRa18setSpreadingFactorEi>
	setCodingRate4(5);
 8002b48:	2105      	movs	r1, #5
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff ff8a 	bl	8002a64 <_ZN10RFM95_LoRa14setCodingRate4Ei>
	if (!begin(866E6)) {
 8002b50:	490a      	ldr	r1, [pc, #40]	; (8002b7c <_ZN10RFM95_LoRa7InitRFMEv+0x60>)
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff fc9e 	bl	8002494 <_ZN10RFM95_LoRa5beginEl>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bf0c      	ite	eq
 8002b5e:	2301      	moveq	r3, #1
 8002b60:	2300      	movne	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <_ZN10RFM95_LoRa7InitRFMEv+0x50>
		return false;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	e000      	b.n	8002b6e <_ZN10RFM95_LoRa7InitRFMEv+0x52>
	}
	return true;
 8002b6c:	2301      	movs	r3, #1
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	33bca100 	.word	0x33bca100
 8002b7c:	339e1c80 	.word	0x339e1c80

08002b80 <_ZNK13DriveSettings16getClampingSpeedEv>:

/****************************************************************************************
 / * 	Clamping speed get/set
 ****************************************************************************************/
uint16_t DriveSettings::getClampingSpeed() const
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	return clampingSpeed;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	891b      	ldrh	r3, [r3, #8]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <_ZN13DriveSettings16setClampingSpeedEt>:

void DriveSettings::setClampingSpeed(uint16_t clampingSpeed)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	807b      	strh	r3, [r7, #2]
	if (this->clampingSpeed != clampingSpeed)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	891b      	ldrh	r3, [r3, #8]
 8002ba8:	887a      	ldrh	r2, [r7, #2]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d009      	beq.n	8002bc2 <_ZN13DriveSettings16setClampingSpeedEt+0x2a>
	{
		this->clampingSpeed = clampingSpeed;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	887a      	ldrh	r2, [r7, #2]
 8002bb2:	811a      	strh	r2, [r3, #8]
		this->settingsChangedReg |= CLAMPING_SPEED_CHANGE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	8b9b      	ldrh	r3, [r3, #28]
 8002bb8:	f043 0308 	orr.w	r3, r3, #8
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	839a      	strh	r2, [r3, #28]
	}
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <_ZNK13DriveSettings17getClampingTorqueEv>:

/****************************************************************************************
 / * 	Clamping torque get/set
 ****************************************************************************************/
uint16_t DriveSettings::getClampingTorque() const
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
	return clampingTorque;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	889b      	ldrh	r3, [r3, #4]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <_ZN13DriveSettings17setClampingTorqueEt>:

void DriveSettings::setClampingTorque(uint16_t clampingTorque)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	807b      	strh	r3, [r7, #2]
	if (this->clampingTorque != clampingTorque)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	889b      	ldrh	r3, [r3, #4]
 8002bf6:	887a      	ldrh	r2, [r7, #2]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d009      	beq.n	8002c10 <_ZN13DriveSettings17setClampingTorqueEt+0x2a>
	{
		this->clampingTorque = clampingTorque;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	887a      	ldrh	r2, [r7, #2]
 8002c00:	809a      	strh	r2, [r3, #4]
		this->settingsChangedReg |= CLAMPING_TORQUE_CHANGE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	8b9b      	ldrh	r3, [r3, #28]
 8002c06:	f043 0304 	orr.w	r3, r3, #4
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	839a      	strh	r2, [r3, #28]
	}
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <_ZNK13DriveSettings12getInPosDiffEv>:

/****************************************************************************************
 / * 	clamping position difference get/set
 ****************************************************************************************/
uint16_t DriveSettings::getInPosDiff() const
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
	return inPosDiff;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	899b      	ldrh	r3, [r3, #12]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <_ZN13DriveSettings12setInPosDiffEt>:

void DriveSettings::setInPosDiff(uint16_t inPosDiff)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	807b      	strh	r3, [r7, #2]
	if (this->inPosDiff != inPosDiff)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	899b      	ldrh	r3, [r3, #12]
 8002c44:	887a      	ldrh	r2, [r7, #2]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d009      	beq.n	8002c5e <_ZN13DriveSettings12setInPosDiffEt+0x2a>
	{
		this->inPosDiff = inPosDiff;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	887a      	ldrh	r2, [r7, #2]
 8002c4e:	819a      	strh	r2, [r3, #12]
		this->settingsChangedReg |= IN_POS_DIFF_CHANGE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	8b9b      	ldrh	r3, [r3, #28]
 8002c54:	f043 0320 	orr.w	r3, r3, #32
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	839a      	strh	r2, [r3, #28]
	}

}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <_ZNK13DriveSettings18getOpeningDistanceEv>:

/****************************************************************************************
 / * 	opening distance get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOpeningDistance() const
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
	return openingDistance;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	89db      	ldrh	r3, [r3, #14]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <_ZN13DriveSettings18setOpeningDistanceEt>:

void DriveSettings::setOpeningDistance(uint16_t openingDistance)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	807b      	strh	r3, [r7, #2]
	if (this->openingDistance != openingDistance)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	89db      	ldrh	r3, [r3, #14]
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d009      	beq.n	8002cac <_ZN13DriveSettings18setOpeningDistanceEt+0x2a>
	{
		this->openingDistance = openingDistance;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	887a      	ldrh	r2, [r7, #2]
 8002c9c:	81da      	strh	r2, [r3, #14]
		this->settingsChangedReg |= OPENING_DISTANCE_CHANGE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	8b9b      	ldrh	r3, [r3, #28]
 8002ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	839a      	strh	r2, [r3, #28]
	}
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <_ZNK13DriveSettings27getOverCurrentTimeThresholdEv>:

/****************************************************************************************
 / * 	overcurrent time threshold get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOverCurrentTimeThreshold() const
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	return overCurrentTimeThreshold;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	8b1b      	ldrh	r3, [r3, #24]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <_ZN13DriveSettings27setOverCurrentTimeThresholdEt>:

void DriveSettings::setOverCurrentTimeThreshold(
		uint16_t overCurrentTimeThreshold)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	807b      	strh	r3, [r7, #2]
	if (this->overCurrentTimeThreshold != overCurrentTimeThreshold)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	8b1b      	ldrh	r3, [r3, #24]
 8002ce0:	887a      	ldrh	r2, [r7, #2]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d009      	beq.n	8002cfa <_ZN13DriveSettings27setOverCurrentTimeThresholdEt+0x2a>
	{
		this->overCurrentTimeThreshold = overCurrentTimeThreshold;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	887a      	ldrh	r2, [r7, #2]
 8002cea:	831a      	strh	r2, [r3, #24]
		this->settingsChangedReg |= OVER_CURRENT_TIME_TH_CHANGE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	8b9b      	ldrh	r3, [r3, #28]
 8002cf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	839a      	strh	r2, [r3, #28]
	}
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <_ZNK13DriveSettings21getOverCurrentWarningEv>:

/****************************************************************************************
 / * 	overcurrent warning get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOverCurrentWarning() const
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
	return overCurrentWarning;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	8a9b      	ldrh	r3, [r3, #20]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <_ZN13DriveSettings21setOverCurrentWarningEt>:

void DriveSettings::setOverCurrentWarning(uint16_t overCurrentWarning)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	460b      	mov	r3, r1
 8002d28:	807b      	strh	r3, [r7, #2]
	if (this->overCurrentWarning != overCurrentWarning)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	8a9b      	ldrh	r3, [r3, #20]
 8002d2e:	887a      	ldrh	r2, [r7, #2]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d009      	beq.n	8002d48 <_ZN13DriveSettings21setOverCurrentWarningEt+0x2a>
	{
		this->overCurrentWarning = overCurrentWarning;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	887a      	ldrh	r2, [r7, #2]
 8002d38:	829a      	strh	r2, [r3, #20]
		this->settingsChangedReg |= OVER_CURRENT_WARNING_CHANGE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	8b9b      	ldrh	r3, [r3, #28]
 8002d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	839a      	strh	r2, [r3, #28]
	}
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <_ZNK13DriveSettings20getSelfShutdownDelayEv>:
/****************************************************************************************
 / * 	self shutdown delay get/set
 ****************************************************************************************/
uint16_t DriveSettings::getSelfShutdownDelay() const
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
	return selfShutdownDelay;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	895b      	ldrh	r3, [r3, #10]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <_ZN13DriveSettings20setSelfShutdownDelayEt>:

void DriveSettings::setSelfShutdownDelay(uint16_t selfShutdownDelay)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	807b      	strh	r3, [r7, #2]
	if (this->selfShutdownDelay != selfShutdownDelay)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	895b      	ldrh	r3, [r3, #10]
 8002d7c:	887a      	ldrh	r2, [r7, #2]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d009      	beq.n	8002d96 <_ZN13DriveSettings20setSelfShutdownDelayEt+0x2a>
	{
		this->selfShutdownDelay = selfShutdownDelay;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	887a      	ldrh	r2, [r7, #2]
 8002d86:	815a      	strh	r2, [r3, #10]
		this->settingsChangedReg |= SELF_SHUTDOWN_DELAY_CHANGE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	8b9b      	ldrh	r3, [r3, #28]
 8002d8c:	f043 0310 	orr.w	r3, r3, #16
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	839a      	strh	r2, [r3, #28]
	}
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <_ZNK13DriveSettings13getTeachSpeedEv>:

/****************************************************************************************
 / * 	teach speed get/set
 ****************************************************************************************/
uint16_t DriveSettings::getTeachSpeed() const
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
	return teachSpeed;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	88db      	ldrh	r3, [r3, #6]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <_ZN13DriveSettings13setTeachSpeedEt>:

void DriveSettings::setTeachSpeed(uint16_t teachSpeed)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	807b      	strh	r3, [r7, #2]
	if (this->teachSpeed != teachSpeed)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	88db      	ldrh	r3, [r3, #6]
 8002dca:	887a      	ldrh	r2, [r7, #2]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d009      	beq.n	8002de4 <_ZN13DriveSettings13setTeachSpeedEt+0x2a>
	{
		this->teachSpeed = teachSpeed;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	887a      	ldrh	r2, [r7, #2]
 8002dd4:	80da      	strh	r2, [r3, #6]
		this->settingsChangedReg |= TEACH_SPEED_CHANGE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	8b9b      	ldrh	r3, [r3, #28]
 8002dda:	f043 0302 	orr.w	r3, r3, #2
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	839a      	strh	r2, [r3, #28]
	}
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <_ZNK13DriveSettings14getTeachTroqueEv>:
/****************************************************************************************
 / * 	teach torque get/set
 ****************************************************************************************/
uint16_t DriveSettings::getTeachTroque() const
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
	return teachTroque;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	885b      	ldrh	r3, [r3, #2]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <_ZN13DriveSettings14setTeachTroqueEt>:

void DriveSettings::setTeachTroque(uint16_t teachTroque)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	807b      	strh	r3, [r7, #2]
	if (this->teachTroque != teachTroque)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	885b      	ldrh	r3, [r3, #2]
 8002e18:	887a      	ldrh	r2, [r7, #2]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d009      	beq.n	8002e32 <_ZN13DriveSettings14setTeachTroqueEt+0x2a>
	{
		this->teachTroque = teachTroque;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	887a      	ldrh	r2, [r7, #2]
 8002e22:	805a      	strh	r2, [r3, #2]
		this->settingsChangedReg |= TEACH_TORQUE_CHANGE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	8b9b      	ldrh	r3, [r3, #28]
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	839a      	strh	r2, [r3, #28]
	}
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <_ZNK13DriveSettings20getUnderVoltageErrorEv>:
/****************************************************************************************
 / * 	undervoltage error get/set
 ****************************************************************************************/
uint16_t DriveSettings::getUnderVoltageError() const
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
	return underVoltageError;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	8a5b      	ldrh	r3, [r3, #18]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <_ZN13DriveSettings20setUnderVoltageErrorEt>:

void DriveSettings::setUnderVoltageError(uint16_t underVoltageError)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	807b      	strh	r3, [r7, #2]
	if (this->underVoltageError != underVoltageError)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	8a5b      	ldrh	r3, [r3, #18]
 8002e66:	887a      	ldrh	r2, [r7, #2]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d009      	beq.n	8002e80 <_ZN13DriveSettings20setUnderVoltageErrorEt+0x2a>
	{
		this->underVoltageError = underVoltageError;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	887a      	ldrh	r2, [r7, #2]
 8002e70:	825a      	strh	r2, [r3, #18]
		this->settingsChangedReg |= UNDERVOLTAGE_ERROR_CHANGE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	8b9b      	ldrh	r3, [r3, #28]
 8002e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	839a      	strh	r2, [r3, #28]
	}
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <_ZNK13DriveSettings22getUnderVoltageWarningEv>:

/****************************************************************************************
 / * 	undervoltage warning get/set
 ****************************************************************************************/
uint16_t DriveSettings::getUnderVoltageWarning() const
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
	return underVoltageWarning;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	8a1b      	ldrh	r3, [r3, #16]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <_ZN13DriveSettings22setUnderVoltageWarningEt>:

void DriveSettings::setUnderVoltageWarning(uint16_t underVoltageWarning)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	807b      	strh	r3, [r7, #2]
	if (this->underVoltageWarning != underVoltageWarning)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	8a1b      	ldrh	r3, [r3, #16]
 8002eb4:	887a      	ldrh	r2, [r7, #2]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d009      	beq.n	8002ece <_ZN13DriveSettings22setUnderVoltageWarningEt+0x2a>
	{
		this->underVoltageWarning = underVoltageWarning;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	887a      	ldrh	r2, [r7, #2]
 8002ebe:	821a      	strh	r2, [r3, #16]
		this->settingsChangedReg |= UNDERVOLTAGE_WARNING_CHANGE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	8b9b      	ldrh	r3, [r3, #28]
 8002ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	839a      	strh	r2, [r3, #28]
	}
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <_ZNK13DriveSettings19getOverCurrentErrorEv>:
/****************************************************************************************
 / * 	overcurrent error get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOverCurrentError() const
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
	return overCurrentError;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	8adb      	ldrh	r3, [r3, #22]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <_ZN13DriveSettings19setOverCurrentErrorEt>:

void DriveSettings::setOverCurrentError(uint16_t overCurrentError)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	460b      	mov	r3, r1
 8002efc:	807b      	strh	r3, [r7, #2]
	if (this->overCurrentError != overCurrentError)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	8adb      	ldrh	r3, [r3, #22]
 8002f02:	887a      	ldrh	r2, [r7, #2]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d009      	beq.n	8002f1c <_ZN13DriveSettings19setOverCurrentErrorEt+0x2a>
	{
		this->overCurrentError = overCurrentError;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	887a      	ldrh	r2, [r7, #2]
 8002f0c:	82da      	strh	r2, [r3, #22]
		this->settingsChangedReg |= OVER_CURRENT_ERROR_CHANGE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	8b9b      	ldrh	r3, [r3, #28]
 8002f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	839a      	strh	r2, [r3, #28]
	}
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <_ZNK13DriveSettings16getDeviceAddressEv>:
/****************************************************************************************
 / * 	device address get/set
 ****************************************************************************************/
uint8_t DriveSettings::getDeviceAddress() const
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	return deviceAddress;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	781b      	ldrb	r3, [r3, #0]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <_ZN13DriveSettings16setDeviceAddressEh>:

void DriveSettings::setDeviceAddress(uint8_t deviceAddress = 0)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	70fb      	strb	r3, [r7, #3]
	this->deviceAddress = deviceAddress;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	701a      	strb	r2, [r3, #0]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <_ZN13DriveSettings14isSaveSettingsEv>:

/****************************************************************************************
 / * 	device address get/set
 ****************************************************************************************/
bool DriveSettings::isSaveSettings()
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
	bool saveSettingsTemp = this->saveSettings;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	7e9b      	ldrb	r3, [r3, #26]
 8002f6a:	73fb      	strb	r3, [r7, #15]
	this->saveSettings = false;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	769a      	strb	r2, [r3, #26]
	return saveSettingsTemp;
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <_ZN13DriveSettings15setSaveSettingsEb>:

void DriveSettings::setSaveSettings(bool saveSettings)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	70fb      	strb	r3, [r7, #3]
	this->saveSettings = saveSettings;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	769a      	strb	r2, [r3, #26]
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <_ZN13DriveSettings17isSettingsChangedEv>:


bool DriveSettings::isSettingsChanged()
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
	return (settingsChangedReg != 0);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	8b9b      	ldrh	r3, [r3, #28]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bf14      	ite	ne
 8002fae:	2301      	movne	r3, #1
 8002fb0:	2300      	moveq	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <_ZNK13DriveSettings21getSettingsChangedRegEv>:

uint16_t DriveSettings::getSettingsChangedReg() const
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
	return this->settingsChangedReg;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	8b9b      	ldrh	r3, [r3, #28]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <_ZN13DriveSettings20ResetSettingsChangedEt>:

void DriveSettings::ResetSettingsChanged(uint16_t bit){
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	807b      	strh	r3, [r7, #2]
	settingsChangedReg &= ~bit;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	8b9b      	ldrh	r3, [r3, #28]
 8002fe8:	b21a      	sxth	r2, r3
 8002fea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	b21b      	sxth	r3, r3
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	b21b      	sxth	r3, r3
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	839a      	strh	r2, [r3, #28]

	if(bit != 0)
 8002ffc:	887b      	ldrh	r3, [r7, #2]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <_ZN13DriveSettings20ResetSettingsChangedEt+0x30>
	{
		saveSettings = true;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	769a      	strb	r2, [r3, #26]
	}
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <_ZN12DriveCommandC1Ev>:
 *      Author: marce
 */

#include "DriveCommand.h"

DriveCommand::DriveCommand()
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	701a      	strb	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	705a      	strb	r2, [r3, #1]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	709a      	strb	r2, [r3, #2]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	70da      	strb	r2, [r3, #3]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	711a      	strb	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	715a      	strb	r2, [r3, #5]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	719a      	strb	r2, [r3, #6]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	71da      	strb	r2, [r3, #7]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	721a      	strb	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	725a      	strb	r2, [r3, #9]
{
}
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <_ZN12DriveCommand7isCloseEv>:

/****************************************************************************************
 / * 	close get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isClose()
{
 8003066:	b480      	push	{r7}
 8003068:	b085      	sub	sp, #20
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
	bool closeTemp = close;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	73fb      	strb	r3, [r7, #15]
	close = false;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
	return closeTemp;
 800307a:	7bfb      	ldrb	r3, [r7, #15]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <_ZN12DriveCommand8setCloseEb>:

void DriveCommand::setClose(bool close)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	70fb      	strb	r3, [r7, #3]
	this->close = close;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	701a      	strb	r2, [r3, #0]
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <_ZN12DriveCommand6isOpenEv>:

/****************************************************************************************
 / * 	open get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isOpen()
{
 80030a6:	b480      	push	{r7}
 80030a8:	b085      	sub	sp, #20
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
	bool openTemp = open;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	785b      	ldrb	r3, [r3, #1]
 80030b2:	73fb      	strb	r3, [r7, #15]
	open = false;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	705a      	strb	r2, [r3, #1]
	return openTemp;
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <_ZN12DriveCommand7setOpenEb>:

void DriveCommand::setOpen(bool open)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	70fb      	strb	r3, [r7, #3]
	this->open = open;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	705a      	strb	r2, [r3, #1]
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <_ZN12DriveCommand9isDisableEv>:

/****************************************************************************************
 / * 	disable get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isDisable()
{
 80030e6:	b480      	push	{r7}
 80030e8:	b085      	sub	sp, #20
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
	bool disableTemp = disable;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	799b      	ldrb	r3, [r3, #6]
 80030f2:	73fb      	strb	r3, [r7, #15]
	disable = false;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	719a      	strb	r2, [r3, #6]
	return disableTemp;
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <_ZN12DriveCommand10setDisableEb>:

void DriveCommand::setDisable(bool disable)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	70fb      	strb	r3, [r7, #3]
	this->disable = disable;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	78fa      	ldrb	r2, [r7, #3]
 8003118:	719a      	strb	r2, [r3, #6]
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <_ZN12DriveCommand8isEnableEv>:

/****************************************************************************************
 / * 	enable get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isEnable()
{
 8003126:	b480      	push	{r7}
 8003128:	b085      	sub	sp, #20
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
	bool enableTemp = enable;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	791b      	ldrb	r3, [r3, #4]
 8003132:	73fb      	strb	r3, [r7, #15]
	enable = false;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	711a      	strb	r2, [r3, #4]
	return enableTemp;
 800313a:	7bfb      	ldrb	r3, [r7, #15]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <_ZN12DriveCommand9setEnableEb>:

void DriveCommand::setEnable(bool enable)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	70fb      	strb	r3, [r7, #3]
	this->enable = enable;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	711a      	strb	r2, [r3, #4]
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <_ZN12DriveCommand7isResetEv>:

/****************************************************************************************
 / * 	reset get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isReset()
{
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
	bool resetTemp = reset;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	78db      	ldrb	r3, [r3, #3]
 8003172:	73fb      	strb	r3, [r7, #15]
	reset = false;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	70da      	strb	r2, [r3, #3]
	return resetTemp;
 800317a:	7bfb      	ldrb	r3, [r7, #15]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <_ZN12DriveCommand8setResetEb>:

void DriveCommand::setReset(bool reset)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	70fb      	strb	r3, [r7, #3]
	this->reset = reset;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	70da      	strb	r2, [r3, #3]
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <_ZN12DriveCommand6isStopEv>:

/****************************************************************************************
 * 	stop get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isStop()
{
 80031a6:	b480      	push	{r7}
 80031a8:	b085      	sub	sp, #20
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
	bool stopTemp = stop;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	795b      	ldrb	r3, [r3, #5]
 80031b2:	73fb      	strb	r3, [r7, #15]
	stop = false;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	715a      	strb	r2, [r3, #5]
	return stopTemp;
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <_ZN12DriveCommand7setStopEb>:

void DriveCommand::setStop(bool stop)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	70fb      	strb	r3, [r7, #3]
	this->stop = stop;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	715a      	strb	r2, [r3, #5]
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <_ZN12DriveCommand7isTeachEv>:

/****************************************************************************************
 * 	teach get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isTeach()
{
 80031e6:	b480      	push	{r7}
 80031e8:	b085      	sub	sp, #20
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
	bool teachTemp = teach;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	789b      	ldrb	r3, [r3, #2]
 80031f2:	73fb      	strb	r3, [r7, #15]
	teach = false;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	709a      	strb	r2, [r3, #2]
	return teachTemp;
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <_ZN12DriveCommand8setTeachEb>:

void DriveCommand::setTeach(bool teach)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	70fb      	strb	r3, [r7, #3]
	if (this->teach != teach)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	789b      	ldrb	r3, [r3, #2]
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	429a      	cmp	r2, r3
 800321c:	d002      	beq.n	8003224 <_ZN12DriveCommand8setTeachEb+0x1c>
	{
		this->teach = teach;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	709a      	strb	r2, [r3, #2]
	}

}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <_ZNK12DriveCommand16isCommandChangedEv>:
/****************************************************************************************
 * 	has commands changed get/set (read reset)
 ****************************************************************************************/

bool DriveCommand::isCommandChanged() const
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
	return (commandChangeReg != 0);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	7a5b      	ldrb	r3, [r3, #9]
 800323c:	2b00      	cmp	r3, #0
 800323e:	bf14      	ite	ne
 8003240:	2301      	movne	r3, #1
 8003242:	2300      	moveq	r3, #0
 8003244:	b2db      	uxtb	r3, r3
}
 8003246:	4618      	mov	r0, r3
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <_ZNK12DriveCommand20getCommandChangedRegEv>:

uint8_t DriveCommand::getCommandChangedReg() const
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
	return this->commandChangeReg;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	7a5b      	ldrb	r3, [r3, #9]
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <_ZN12DriveCommand19ResetCommandChangedEh>:

void DriveCommand::ResetCommandChanged(uint8_t bit)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	70fb      	strb	r3, [r7, #3]
	this->commandChangeReg &= ~bit;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	7a5b      	ldrb	r3, [r3, #9]
 800327a:	b25a      	sxtb	r2, r3
 800327c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003280:	43db      	mvns	r3, r3
 8003282:	b25b      	sxtb	r3, r3
 8003284:	4013      	ands	r3, r2
 8003286:	b25b      	sxtb	r3, r3
 8003288:	b2da      	uxtb	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	725a      	strb	r2, [r3, #9]
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <_ZN11DriveStatusC1Ev>:
 *      Author: marce
 */

#include "DriveStatus.h"

DriveStatus::DriveStatus()
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	721a      	strb	r2, [r3, #8]
{
}
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <_ZN11DriveStatus7isCloseEv>:

/****************************************************************************************
 / * 	close get/set
 ****************************************************************************************/
bool DriveStatus::isClose()
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
	return close;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	785b      	ldrb	r3, [r3, #1]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <_ZN11DriveStatus8setCloseEb>:

void DriveStatus::setClose(bool close)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	460b      	mov	r3, r1
 80032d8:	70fb      	strb	r3, [r7, #3]
	if (this->close != close)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	785b      	ldrb	r3, [r3, #1]
 80032de:	78fa      	ldrb	r2, [r7, #3]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d005      	beq.n	80032f0 <_ZN11DriveStatus8setCloseEb+0x22>
	{
		this->close = close;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	705a      	strb	r2, [r3, #1]
		statusChanged = true;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	721a      	strb	r2, [r3, #8]
	}
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <_ZN11DriveStatus6isOpenEv>:

/****************************************************************************************
 / * 	open get/set
 ****************************************************************************************/
bool DriveStatus::isOpen()
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
	return open;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	789b      	ldrb	r3, [r3, #2]
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <_ZN11DriveStatus7setOpenEb>:

void DriveStatus::setOpen(bool open)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	70fb      	strb	r3, [r7, #3]
	if (this->open != open)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	789b      	ldrb	r3, [r3, #2]
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	429a      	cmp	r2, r3
 8003328:	d005      	beq.n	8003336 <_ZN11DriveStatus7setOpenEb+0x22>
	{
		this->open = open;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	709a      	strb	r2, [r3, #2]
		statusChanged = true;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	721a      	strb	r2, [r3, #8]
	}
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <_ZN11DriveStatus9isDisableEv>:

/****************************************************************************************
 / * 	disable get/set
 ****************************************************************************************/
bool DriveStatus::isDisable()
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
	return disable;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	79db      	ldrb	r3, [r3, #7]
}
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <_ZN11DriveStatus10setDisableEb>:

void DriveStatus::setDisable(bool disable)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	460b      	mov	r3, r1
 8003364:	70fb      	strb	r3, [r7, #3]
	if (this->disable != disable)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	79db      	ldrb	r3, [r3, #7]
 800336a:	78fa      	ldrb	r2, [r7, #3]
 800336c:	429a      	cmp	r2, r3
 800336e:	d005      	beq.n	800337c <_ZN11DriveStatus10setDisableEb+0x22>
	{
		this->disable = disable;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	71da      	strb	r2, [r3, #7]
		statusChanged = true;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	721a      	strb	r2, [r3, #8]
	}
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <_ZN11DriveStatus8isEnableEv>:

/****************************************************************************************
 / * 	enable get/set
 ****************************************************************************************/
bool DriveStatus::isEnable()
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
	return enable;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	795b      	ldrb	r3, [r3, #5]
}
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <_ZN11DriveStatus9setEnableEb>:

void DriveStatus::setEnable(bool enable)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	70fb      	strb	r3, [r7, #3]
	if (this->enable != enable)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	795b      	ldrb	r3, [r3, #5]
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d005      	beq.n	80033c2 <_ZN11DriveStatus9setEnableEb+0x22>
	{
		this->enable = enable;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	715a      	strb	r2, [r3, #5]
		statusChanged = true;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	721a      	strb	r2, [r3, #8]
	}
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <_ZN11DriveStatus7isResetEv>:

/****************************************************************************************
 / * 	reset get/set
 ****************************************************************************************/
bool DriveStatus::isReset()
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
	return reset;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	791b      	ldrb	r3, [r3, #4]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <_ZN11DriveStatus8setResetEb>:

void DriveStatus::setReset(bool reset)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	460b      	mov	r3, r1
 80033f0:	70fb      	strb	r3, [r7, #3]
	if (this->reset != reset)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	791b      	ldrb	r3, [r3, #4]
 80033f6:	78fa      	ldrb	r2, [r7, #3]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d005      	beq.n	8003408 <_ZN11DriveStatus8setResetEb+0x22>
	{
		this->reset = reset;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	78fa      	ldrb	r2, [r7, #3]
 8003400:	711a      	strb	r2, [r3, #4]
		statusChanged = true;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	721a      	strb	r2, [r3, #8]
	}
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <_ZN11DriveStatus6isStopEv>:

/****************************************************************************************
 / * 	stop get/set
 /****************************************************************************************/
bool DriveStatus::isStop()
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
	return stop;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	799b      	ldrb	r3, [r3, #6]
}
 8003420:	4618      	mov	r0, r3
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <_ZN11DriveStatus7setStopEb>:

void DriveStatus::setStop(bool stop)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	70fb      	strb	r3, [r7, #3]
	if (this->stop != stop)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	799b      	ldrb	r3, [r3, #6]
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	429a      	cmp	r2, r3
 8003440:	d005      	beq.n	800344e <_ZN11DriveStatus7setStopEb+0x22>
	{
		this->stop = stop;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	78fa      	ldrb	r2, [r7, #3]
 8003446:	719a      	strb	r2, [r3, #6]
		statusChanged = true;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	721a      	strb	r2, [r3, #8]
	}
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <_ZN11DriveStatus7isTeachEv>:

/****************************************************************************************
 / * 	teach get/set
 /****************************************************************************************/
bool DriveStatus::isTeach()
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
	return teach;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	78db      	ldrb	r3, [r3, #3]
}
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <_ZN11DriveStatus8setTeachEb>:

void DriveStatus::setTeach(bool teach)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	460b      	mov	r3, r1
 800347c:	70fb      	strb	r3, [r7, #3]
	if (this->teach != teach)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	78db      	ldrb	r3, [r3, #3]
 8003482:	78fa      	ldrb	r2, [r7, #3]
 8003484:	429a      	cmp	r2, r3
 8003486:	d005      	beq.n	8003494 <_ZN11DriveStatus8setTeachEb+0x22>
	{
		this->teach = teach;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	78fa      	ldrb	r2, [r7, #3]
 800348c:	70da      	strb	r2, [r3, #3]
		statusChanged = true;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	721a      	strb	r2, [r3, #8]
	}
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <_ZN11DriveStatus8getErrorEv>:

/****************************************************************************************
 / * 	write config get/set
 ****************************************************************************************/
DriveStatus::_ERROR DriveStatus::getError()
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	return this->error;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	781b      	ldrb	r3, [r3, #0]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <_ZN11DriveStatus8setErrorENS_6_ERRORE>:

void DriveStatus::setError(_ERROR error)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	70fb      	strb	r3, [r7, #3]
	if (this->error = error)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	bf14      	ite	ne
 80034d2:	2301      	movne	r3, #1
 80034d4:	2300      	moveq	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <_ZN11DriveStatus8setErrorENS_6_ERRORE+0x2a>
	{
		statusChanged = true;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	721a      	strb	r2, [r3, #8]
	}
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <_ZN11TaskHandler11UpdateTasksEv>:

#include "TaskHandler.h"
#include "gpio.h"

//update tasks, should be called every 1ms
void TaskHandler::UpdateTasks() {
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]

	//1ms

	//2ms
	if(counter % ADC_UPDATE_TIME == 0){
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	899b      	ldrh	r3, [r3, #12]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d102      	bne.n	800350a <_ZN11TaskHandler11UpdateTasksEv+0x1a>
		adcUpdateTask = true;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	70da      	strb	r2, [r3, #3]
	}


	//15ms
	if(counter % IO_UPDATE_TIME == 0){
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	899a      	ldrh	r2, [r3, #12]
 800350e:	4b33      	ldr	r3, [pc, #204]	; (80035dc <_ZN11TaskHandler11UpdateTasksEv+0xec>)
 8003510:	fba3 1302 	umull	r1, r3, r3, r2
 8003514:	08d9      	lsrs	r1, r3, #3
 8003516:	460b      	mov	r3, r1
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	1a5b      	subs	r3, r3, r1
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	b29b      	uxth	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <_ZN11TaskHandler11UpdateTasksEv+0x3a>
		ioUpdateTask = true;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	709a      	strb	r2, [r3, #2]

	}


	//100ms
	if(counter % ERROR_UPDATE_TIME == 0){
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	899b      	ldrh	r3, [r3, #12]
 800352e:	4a2c      	ldr	r2, [pc, #176]	; (80035e0 <_ZN11TaskHandler11UpdateTasksEv+0xf0>)
 8003530:	fba2 1203 	umull	r1, r2, r2, r3
 8003534:	0952      	lsrs	r2, r2, #5
 8003536:	2164      	movs	r1, #100	; 0x64
 8003538:	fb01 f202 	mul.w	r2, r1, r2
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d102      	bne.n	800354a <_ZN11TaskHandler11UpdateTasksEv+0x5a>
		errorTask = true;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	701a      	strb	r2, [r3, #0]
	}

	//500ms
	if(counter % LED_UPDATE_TIME == 0){
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	899b      	ldrh	r3, [r3, #12]
 800354e:	4a25      	ldr	r2, [pc, #148]	; (80035e4 <_ZN11TaskHandler11UpdateTasksEv+0xf4>)
 8003550:	fba2 1203 	umull	r1, r2, r2, r3
 8003554:	0952      	lsrs	r2, r2, #5
 8003556:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800355a:	fb01 f202 	mul.w	r2, r1, r2
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d102      	bne.n	800356c <_ZN11TaskHandler11UpdateTasksEv+0x7c>
		ledUpdateTask = true;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	711a      	strb	r2, [r3, #4]
	}

	//600ms
	if(counter % COM_UPDATE_TIME == 0){
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	899b      	ldrh	r3, [r3, #12]
 8003570:	4a1d      	ldr	r2, [pc, #116]	; (80035e8 <_ZN11TaskHandler11UpdateTasksEv+0xf8>)
 8003572:	fba2 1203 	umull	r1, r2, r2, r3
 8003576:	0992      	lsrs	r2, r2, #6
 8003578:	f44f 7116 	mov.w	r1, #600	; 0x258
 800357c:	fb01 f202 	mul.w	r2, r1, r2
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d102      	bne.n	800358e <_ZN11TaskHandler11UpdateTasksEv+0x9e>
		comTask = true;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	705a      	strb	r2, [r3, #1]
	}

	//1000ms
	if(counter % SAVE_UPDATE_TIME == 0){
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	899b      	ldrh	r3, [r3, #12]
 8003592:	4a14      	ldr	r2, [pc, #80]	; (80035e4 <_ZN11TaskHandler11UpdateTasksEv+0xf4>)
 8003594:	fba2 1203 	umull	r1, r2, r2, r3
 8003598:	0992      	lsrs	r2, r2, #6
 800359a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800359e:	fb01 f202 	mul.w	r2, r1, r2
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d102      	bne.n	80035b0 <_ZN11TaskHandler11UpdateTasksEv+0xc0>
		saveTask = true;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	715a      	strb	r2, [r3, #5]
	}



	//increment counter
	if(counter > 2999){
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	899b      	ldrh	r3, [r3, #12]
 80035b4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d903      	bls.n	80035c4 <_ZN11TaskHandler11UpdateTasksEv+0xd4>
		counter = 1;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	819a      	strh	r2, [r3, #12]
	}else{
		counter++;
	}
}
 80035c2:	e005      	b.n	80035d0 <_ZN11TaskHandler11UpdateTasksEv+0xe0>
		counter++;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	899b      	ldrh	r3, [r3, #12]
 80035c8:	3301      	adds	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	819a      	strh	r2, [r3, #12]
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	88888889 	.word	0x88888889
 80035e0:	51eb851f 	.word	0x51eb851f
 80035e4:	10624dd3 	.word	0x10624dd3
 80035e8:	1b4e81b5 	.word	0x1b4e81b5

080035ec <_ZN11TaskHandler9isComTaskEv>:



bool TaskHandler::isComTask()  {
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	bool comTaskTemp = (comTask & comTaskEnable);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	785b      	ldrb	r3, [r3, #1]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	461a      	mov	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	79db      	ldrb	r3, [r3, #7]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	4013      	ands	r3, r2
 8003604:	2b00      	cmp	r3, #0
 8003606:	bf14      	ite	ne
 8003608:	2301      	movne	r3, #1
 800360a:	2300      	moveq	r3, #0
 800360c:	73fb      	strb	r3, [r7, #15]
	comTask = false;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	705a      	strb	r2, [r3, #1]
	return comTaskTemp;
 8003614:	7bfb      	ldrb	r3, [r7, #15]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <_ZN11TaskHandler10isSaveTaskEv>:

bool TaskHandler::isSaveTask(){
 8003622:	b480      	push	{r7}
 8003624:	b085      	sub	sp, #20
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
	bool saveTaskTemp = (saveTask & saveTaskEnable);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	795b      	ldrb	r3, [r3, #5]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	461a      	mov	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	7adb      	ldrb	r3, [r3, #11]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	4013      	ands	r3, r2
 800363a:	2b00      	cmp	r3, #0
 800363c:	bf14      	ite	ne
 800363e:	2301      	movne	r3, #1
 8003640:	2300      	moveq	r3, #0
 8003642:	73fb      	strb	r3, [r7, #15]
	saveTask = false;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	715a      	strb	r2, [r3, #5]
	return saveTaskTemp;
 800364a:	7bfb      	ldrb	r3, [r7, #15]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <_ZN11TaskHandler11isErrorTaskEv>:


bool TaskHandler::isErrorTask()  {
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
	bool errorTaskTemp = (errorTask & errorTaskEnable);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	461a      	mov	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	799b      	ldrb	r3, [r3, #6]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	4013      	ands	r3, r2
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf14      	ite	ne
 8003674:	2301      	movne	r3, #1
 8003676:	2300      	moveq	r3, #0
 8003678:	73fb      	strb	r3, [r7, #15]
	errorTask = false;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	701a      	strb	r2, [r3, #0]
	return errorTaskTemp;
 8003680:	7bfb      	ldrb	r3, [r7, #15]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <_ZN11TaskHandler14isIoUpdateTaskEv>:

bool TaskHandler::isIoUpdateTask()  {
 800368e:	b480      	push	{r7}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
	bool ioUpdateTaskTemp = (ioUpdateTask & ioUpdateTaskEnable);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	789b      	ldrb	r3, [r3, #2]
 800369a:	b2db      	uxtb	r3, r3
 800369c:	461a      	mov	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	7a1b      	ldrb	r3, [r3, #8]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bf14      	ite	ne
 80036aa:	2301      	movne	r3, #1
 80036ac:	2300      	moveq	r3, #0
 80036ae:	73fb      	strb	r3, [r7, #15]
	ioUpdateTask = false;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	709a      	strb	r2, [r3, #2]
	return ioUpdateTaskTemp;
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <_ZN11TaskHandler15isLEDUpdateTaskEv>:
	adcUpdateTask = false;
	return adcUpdateTaskTemp;
}


bool TaskHandler::isLEDUpdateTask(){
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
	bool ledUpdateTaskTemp = (ledUpdateTask & ledUpdateTaskEnable);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	791b      	ldrb	r3, [r3, #4]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	461a      	mov	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	7a9b      	ldrb	r3, [r3, #10]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf14      	ite	ne
 80036e0:	2301      	movne	r3, #1
 80036e2:	2300      	moveq	r3, #0
 80036e4:	73fb      	strb	r3, [r7, #15]
	ledUpdateTask = false;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	711a      	strb	r2, [r3, #4]
	return ledUpdateTaskTemp;
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <_ZN5Delay8DWT_InitEv>:


/*
 * Mikrosenkunden delay Initialisieren
 */
void Delay::DWT_Init(void) {
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003700:	4b09      	ldr	r3, [pc, #36]	; (8003728 <_ZN5Delay8DWT_InitEv+0x2c>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4a08      	ldr	r2, [pc, #32]	; (8003728 <_ZN5Delay8DWT_InitEv+0x2c>)
 8003706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800370a:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 800370c:	4b07      	ldr	r3, [pc, #28]	; (800372c <_ZN5Delay8DWT_InitEv+0x30>)
 800370e:	2200      	movs	r2, #0
 8003710:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <_ZN5Delay8DWT_InitEv+0x30>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a05      	ldr	r2, [pc, #20]	; (800372c <_ZN5Delay8DWT_InitEv+0x30>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	6013      	str	r3, [r2, #0]
}
 800371e:	bf00      	nop
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	e000edf0 	.word	0xe000edf0
 800372c:	e0001000 	.word	0xe0001000

08003730 <_ZN5Delay12DWT_Delay_usEm>:

/*
 * Mikrosenkunden delay für Push-Pull ansteuerung
 */
void Delay::DWT_Delay_us(volatile uint32_t microseconds) {
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8003738:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <_ZN5Delay12DWT_Delay_usEm+0x48>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	60fb      	str	r3, [r7, #12]
	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800373e:	f005 fa3f 	bl	8008bc0 <HAL_RCC_GetHCLKFreq>
 8003742:	4603      	mov	r3, r0
 8003744:	4a0d      	ldr	r2, [pc, #52]	; (800377c <_ZN5Delay12DWT_Delay_usEm+0x4c>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	0c9b      	lsrs	r3, r3, #18
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	607b      	str	r3, [r7, #4]
	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8003754:	4b08      	ldr	r3, [pc, #32]	; (8003778 <_ZN5Delay12DWT_Delay_usEm+0x48>)
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	1ad2      	subs	r2, r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	429a      	cmp	r2, r3
 8003760:	bf34      	ite	cc
 8003762:	2301      	movcc	r3, #1
 8003764:	2300      	movcs	r3, #0
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d000      	beq.n	800376e <_ZN5Delay12DWT_Delay_usEm+0x3e>
 800376c:	e7f2      	b.n	8003754 <_ZN5Delay12DWT_Delay_usEm+0x24>
}
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	e0001000 	.word	0xe0001000
 800377c:	431bde83 	.word	0x431bde83

08003780 <_ZN13TypeConverter12uint16ToByteEPhth>:
}




void TypeConverter::uint16ToByte(uint8_t* byteArray, uint16_t data, uint8_t offset){
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	807b      	strh	r3, [r7, #2]
 800378c:	4613      	mov	r3, r2
 800378e:	707b      	strb	r3, [r7, #1]
	byteArray[offset] = data;
 8003790:	787b      	ldrb	r3, [r7, #1]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	4413      	add	r3, r2
 8003796:	887a      	ldrh	r2, [r7, #2]
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	701a      	strb	r2, [r3, #0]
	byteArray[offset+1] = data>>8;
 800379c:	887b      	ldrh	r3, [r7, #2]
 800379e:	0a1b      	lsrs	r3, r3, #8
 80037a0:	b299      	uxth	r1, r3
 80037a2:	787b      	ldrb	r3, [r7, #1]
 80037a4:	3301      	adds	r3, #1
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	4413      	add	r3, r2
 80037aa:	b2ca      	uxtb	r2, r1
 80037ac:	701a      	strb	r2, [r3, #0]
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80037c2:	463b      	mov	r3, r7
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	611a      	str	r2, [r3, #16]
 80037d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80037d2:	4b29      	ldr	r3, [pc, #164]	; (8003878 <MX_ADC1_Init+0xbc>)
 80037d4:	4a29      	ldr	r2, [pc, #164]	; (800387c <MX_ADC1_Init+0xc0>)
 80037d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80037d8:	4b27      	ldr	r3, [pc, #156]	; (8003878 <MX_ADC1_Init+0xbc>)
 80037da:	2200      	movs	r2, #0
 80037dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80037de:	4b26      	ldr	r3, [pc, #152]	; (8003878 <MX_ADC1_Init+0xbc>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80037e4:	4b24      	ldr	r3, [pc, #144]	; (8003878 <MX_ADC1_Init+0xbc>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80037ea:	4b23      	ldr	r3, [pc, #140]	; (8003878 <MX_ADC1_Init+0xbc>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80037f0:	4b21      	ldr	r3, [pc, #132]	; (8003878 <MX_ADC1_Init+0xbc>)
 80037f2:	2204      	movs	r2, #4
 80037f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80037f6:	4b20      	ldr	r3, [pc, #128]	; (8003878 <MX_ADC1_Init+0xbc>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80037fc:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <MX_ADC1_Init+0xbc>)
 80037fe:	2200      	movs	r2, #0
 8003800:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003802:	4b1d      	ldr	r3, [pc, #116]	; (8003878 <MX_ADC1_Init+0xbc>)
 8003804:	2201      	movs	r2, #1
 8003806:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <MX_ADC1_Init+0xbc>)
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003810:	4b19      	ldr	r3, [pc, #100]	; (8003878 <MX_ADC1_Init+0xbc>)
 8003812:	2200      	movs	r2, #0
 8003814:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003816:	4b18      	ldr	r3, [pc, #96]	; (8003878 <MX_ADC1_Init+0xbc>)
 8003818:	2200      	movs	r2, #0
 800381a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800381c:	4b16      	ldr	r3, [pc, #88]	; (8003878 <MX_ADC1_Init+0xbc>)
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003824:	4b14      	ldr	r3, [pc, #80]	; (8003878 <MX_ADC1_Init+0xbc>)
 8003826:	2200      	movs	r2, #0
 8003828:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800382a:	4b13      	ldr	r3, [pc, #76]	; (8003878 <MX_ADC1_Init+0xbc>)
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003832:	4811      	ldr	r0, [pc, #68]	; (8003878 <MX_ADC1_Init+0xbc>)
 8003834:	f001 f814 	bl	8004860 <HAL_ADC_Init>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800383e:	f000 fb8b 	bl	8003f58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003842:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <MX_ADC1_Init+0xc4>)
 8003844:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003846:	2306      	movs	r3, #6
 8003848:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800384a:	2300      	movs	r3, #0
 800384c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800384e:	237f      	movs	r3, #127	; 0x7f
 8003850:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003852:	2304      	movs	r3, #4
 8003854:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800385a:	463b      	mov	r3, r7
 800385c:	4619      	mov	r1, r3
 800385e:	4806      	ldr	r0, [pc, #24]	; (8003878 <MX_ADC1_Init+0xbc>)
 8003860:	f001 f946 	bl	8004af0 <HAL_ADC_ConfigChannel>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800386a:	f000 fb75 	bl	8003f58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800386e:	bf00      	nop
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20000224 	.word	0x20000224
 800387c:	50040000 	.word	0x50040000
 8003880:	2e300800 	.word	0x2e300800

08003884 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b0a2      	sub	sp, #136	; 0x88
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800388c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	609a      	str	r2, [r3, #8]
 8003898:	60da      	str	r2, [r3, #12]
 800389a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800389c:	f107 0314 	add.w	r3, r7, #20
 80038a0:	2260      	movs	r2, #96	; 0x60
 80038a2:	2100      	movs	r1, #0
 80038a4:	4618      	mov	r0, r3
 80038a6:	f00b fac1 	bl	800ee2c <memset>
  if(adcHandle->Instance==ADC1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a3b      	ldr	r2, [pc, #236]	; (800399c <HAL_ADC_MspInit+0x118>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d16e      	bne.n	8003992 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80038b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038b8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80038ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80038be:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80038c0:	2301      	movs	r3, #1
 80038c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80038c4:	2301      	movs	r3, #1
 80038c6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80038c8:	2310      	movs	r3, #16
 80038ca:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80038cc:	2307      	movs	r3, #7
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80038d0:	2302      	movs	r3, #2
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80038d4:	2302      	movs	r3, #2
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80038d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038dc:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038de:	f107 0314 	add.w	r3, r7, #20
 80038e2:	4618      	mov	r0, r3
 80038e4:	f005 f9d8 	bl	8008c98 <HAL_RCCEx_PeriphCLKConfig>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80038ee:	f000 fb33 	bl	8003f58 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80038f2:	4b2b      	ldr	r3, [pc, #172]	; (80039a0 <HAL_ADC_MspInit+0x11c>)
 80038f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f6:	4a2a      	ldr	r2, [pc, #168]	; (80039a0 <HAL_ADC_MspInit+0x11c>)
 80038f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038fe:	4b28      	ldr	r3, [pc, #160]	; (80039a0 <HAL_ADC_MspInit+0x11c>)
 8003900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800390a:	4b25      	ldr	r3, [pc, #148]	; (80039a0 <HAL_ADC_MspInit+0x11c>)
 800390c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390e:	4a24      	ldr	r2, [pc, #144]	; (80039a0 <HAL_ADC_MspInit+0x11c>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003916:	4b22      	ldr	r3, [pc, #136]	; (80039a0 <HAL_ADC_MspInit+0x11c>)
 8003918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003922:	23c0      	movs	r3, #192	; 0xc0
 8003924:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003926:	230b      	movs	r3, #11
 8003928:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392a:	2300      	movs	r3, #0
 800392c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800392e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003932:	4619      	mov	r1, r3
 8003934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003938:	f002 fbd2 	bl	80060e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800393c:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <HAL_ADC_MspInit+0x120>)
 800393e:	4a1a      	ldr	r2, [pc, #104]	; (80039a8 <HAL_ADC_MspInit+0x124>)
 8003940:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003942:	4b18      	ldr	r3, [pc, #96]	; (80039a4 <HAL_ADC_MspInit+0x120>)
 8003944:	2200      	movs	r2, #0
 8003946:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003948:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <HAL_ADC_MspInit+0x120>)
 800394a:	2200      	movs	r2, #0
 800394c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800394e:	4b15      	ldr	r3, [pc, #84]	; (80039a4 <HAL_ADC_MspInit+0x120>)
 8003950:	2200      	movs	r2, #0
 8003952:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003954:	4b13      	ldr	r3, [pc, #76]	; (80039a4 <HAL_ADC_MspInit+0x120>)
 8003956:	2280      	movs	r2, #128	; 0x80
 8003958:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800395a:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <HAL_ADC_MspInit+0x120>)
 800395c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003960:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003962:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <HAL_ADC_MspInit+0x120>)
 8003964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003968:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800396a:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <HAL_ADC_MspInit+0x120>)
 800396c:	2200      	movs	r2, #0
 800396e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003970:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <HAL_ADC_MspInit+0x120>)
 8003972:	2200      	movs	r2, #0
 8003974:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003976:	480b      	ldr	r0, [pc, #44]	; (80039a4 <HAL_ADC_MspInit+0x120>)
 8003978:	f001 ffd2 	bl	8005920 <HAL_DMA_Init>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8003982:	f000 fae9 	bl	8003f58 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a06      	ldr	r2, [pc, #24]	; (80039a4 <HAL_ADC_MspInit+0x120>)
 800398a:	64da      	str	r2, [r3, #76]	; 0x4c
 800398c:	4a05      	ldr	r2, [pc, #20]	; (80039a4 <HAL_ADC_MspInit+0x120>)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003992:	bf00      	nop
 8003994:	3788      	adds	r7, #136	; 0x88
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	50040000 	.word	0x50040000
 80039a0:	40021000 	.word	0x40021000
 80039a4:	20000288 	.word	0x20000288
 80039a8:	40020008 	.word	0x40020008

080039ac <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80039b0:	4b0d      	ldr	r3, [pc, #52]	; (80039e8 <MX_CRC_Init+0x3c>)
 80039b2:	4a0e      	ldr	r2, [pc, #56]	; (80039ec <MX_CRC_Init+0x40>)
 80039b4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80039b6:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <MX_CRC_Init+0x3c>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <MX_CRC_Init+0x3c>)
 80039be:	2200      	movs	r2, #0
 80039c0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80039c2:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <MX_CRC_Init+0x3c>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80039c8:	4b07      	ldr	r3, [pc, #28]	; (80039e8 <MX_CRC_Init+0x3c>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80039ce:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <MX_CRC_Init+0x3c>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80039d4:	4804      	ldr	r0, [pc, #16]	; (80039e8 <MX_CRC_Init+0x3c>)
 80039d6:	f001 fd7d 	bl	80054d4 <HAL_CRC_Init>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80039e0:	f000 faba 	bl	8003f58 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80039e4:	bf00      	nop
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	200002d0 	.word	0x200002d0
 80039ec:	40023000 	.word	0x40023000

080039f0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a0a      	ldr	r2, [pc, #40]	; (8003a28 <HAL_CRC_MspInit+0x38>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d10b      	bne.n	8003a1a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003a02:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <HAL_CRC_MspInit+0x3c>)
 8003a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a06:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <HAL_CRC_MspInit+0x3c>)
 8003a08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a0c:	6493      	str	r3, [r2, #72]	; 0x48
 8003a0e:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <HAL_CRC_MspInit+0x3c>)
 8003a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003a1a:	bf00      	nop
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40023000 	.word	0x40023000
 8003a2c:	40021000 	.word	0x40021000

08003a30 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08a      	sub	sp, #40	; 0x28
 8003a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003a36:	1d3b      	adds	r3, r7, #4
 8003a38:	2224      	movs	r2, #36	; 0x24
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f00b f9f5 	bl	800ee2c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8003a42:	4b17      	ldr	r3, [pc, #92]	; (8003aa0 <MX_DAC1_Init+0x70>)
 8003a44:	4a17      	ldr	r2, [pc, #92]	; (8003aa4 <MX_DAC1_Init+0x74>)
 8003a46:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003a48:	4815      	ldr	r0, [pc, #84]	; (8003aa0 <MX_DAC1_Init+0x70>)
 8003a4a:	f001 fe2d 	bl	80056a8 <HAL_DAC_Init>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8003a54:	f000 fa80 	bl	8003f58 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003a64:	2300      	movs	r3, #0
 8003a66:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003a6c:	1d3b      	adds	r3, r7, #4
 8003a6e:	2200      	movs	r2, #0
 8003a70:	4619      	mov	r1, r3
 8003a72:	480b      	ldr	r0, [pc, #44]	; (8003aa0 <MX_DAC1_Init+0x70>)
 8003a74:	f001 fe3a 	bl	80056ec <HAL_DAC_ConfigChannel>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8003a7e:	f000 fa6b 	bl	8003f58 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003a82:	1d3b      	adds	r3, r7, #4
 8003a84:	2210      	movs	r2, #16
 8003a86:	4619      	mov	r1, r3
 8003a88:	4805      	ldr	r0, [pc, #20]	; (8003aa0 <MX_DAC1_Init+0x70>)
 8003a8a:	f001 fe2f 	bl	80056ec <HAL_DAC_ConfigChannel>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8003a94:	f000 fa60 	bl	8003f58 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003a98:	bf00      	nop
 8003a9a:	3728      	adds	r7, #40	; 0x28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	200002f4 	.word	0x200002f4
 8003aa4:	40007400 	.word	0x40007400

08003aa8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08a      	sub	sp, #40	; 0x28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab0:	f107 0314 	add.w	r3, r7, #20
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	609a      	str	r2, [r3, #8]
 8003abc:	60da      	str	r2, [r3, #12]
 8003abe:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a40      	ldr	r2, [pc, #256]	; (8003bc8 <HAL_DAC_MspInit+0x120>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d17a      	bne.n	8003bc0 <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003aca:	4b40      	ldr	r3, [pc, #256]	; (8003bcc <HAL_DAC_MspInit+0x124>)
 8003acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ace:	4a3f      	ldr	r2, [pc, #252]	; (8003bcc <HAL_DAC_MspInit+0x124>)
 8003ad0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8003ad6:	4b3d      	ldr	r3, [pc, #244]	; (8003bcc <HAL_DAC_MspInit+0x124>)
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ada:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ae2:	4b3a      	ldr	r3, [pc, #232]	; (8003bcc <HAL_DAC_MspInit+0x124>)
 8003ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae6:	4a39      	ldr	r2, [pc, #228]	; (8003bcc <HAL_DAC_MspInit+0x124>)
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003aee:	4b37      	ldr	r3, [pc, #220]	; (8003bcc <HAL_DAC_MspInit+0x124>)
 8003af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003afa:	2330      	movs	r3, #48	; 0x30
 8003afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003afe:	2303      	movs	r3, #3
 8003b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b06:	f107 0314 	add.w	r3, r7, #20
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b10:	f002 fae6 	bl	80060e0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8003b14:	4b2e      	ldr	r3, [pc, #184]	; (8003bd0 <HAL_DAC_MspInit+0x128>)
 8003b16:	4a2f      	ldr	r2, [pc, #188]	; (8003bd4 <HAL_DAC_MspInit+0x12c>)
 8003b18:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8003b1a:	4b2d      	ldr	r3, [pc, #180]	; (8003bd0 <HAL_DAC_MspInit+0x128>)
 8003b1c:	2206      	movs	r2, #6
 8003b1e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b20:	4b2b      	ldr	r3, [pc, #172]	; (8003bd0 <HAL_DAC_MspInit+0x128>)
 8003b22:	2210      	movs	r2, #16
 8003b24:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b26:	4b2a      	ldr	r3, [pc, #168]	; (8003bd0 <HAL_DAC_MspInit+0x128>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003b2c:	4b28      	ldr	r3, [pc, #160]	; (8003bd0 <HAL_DAC_MspInit+0x128>)
 8003b2e:	2280      	movs	r2, #128	; 0x80
 8003b30:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b32:	4b27      	ldr	r3, [pc, #156]	; (8003bd0 <HAL_DAC_MspInit+0x128>)
 8003b34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b38:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b3a:	4b25      	ldr	r3, [pc, #148]	; (8003bd0 <HAL_DAC_MspInit+0x128>)
 8003b3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b40:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 8003b42:	4b23      	ldr	r3, [pc, #140]	; (8003bd0 <HAL_DAC_MspInit+0x128>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003b48:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <HAL_DAC_MspInit+0x128>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8003b4e:	4820      	ldr	r0, [pc, #128]	; (8003bd0 <HAL_DAC_MspInit+0x128>)
 8003b50:	f001 fee6 	bl	8005920 <HAL_DMA_Init>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8003b5a:	f000 f9fd 	bl	8003f58 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a1b      	ldr	r2, [pc, #108]	; (8003bd0 <HAL_DAC_MspInit+0x128>)
 8003b62:	609a      	str	r2, [r3, #8]
 8003b64:	4a1a      	ldr	r2, [pc, #104]	; (8003bd0 <HAL_DAC_MspInit+0x128>)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8003b6a:	4b1b      	ldr	r3, [pc, #108]	; (8003bd8 <HAL_DAC_MspInit+0x130>)
 8003b6c:	4a1b      	ldr	r2, [pc, #108]	; (8003bdc <HAL_DAC_MspInit+0x134>)
 8003b6e:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8003b70:	4b19      	ldr	r3, [pc, #100]	; (8003bd8 <HAL_DAC_MspInit+0x130>)
 8003b72:	2205      	movs	r2, #5
 8003b74:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b76:	4b18      	ldr	r3, [pc, #96]	; (8003bd8 <HAL_DAC_MspInit+0x130>)
 8003b78:	2210      	movs	r2, #16
 8003b7a:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b7c:	4b16      	ldr	r3, [pc, #88]	; (8003bd8 <HAL_DAC_MspInit+0x130>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003b82:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <HAL_DAC_MspInit+0x130>)
 8003b84:	2280      	movs	r2, #128	; 0x80
 8003b86:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b88:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <HAL_DAC_MspInit+0x130>)
 8003b8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b8e:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b90:	4b11      	ldr	r3, [pc, #68]	; (8003bd8 <HAL_DAC_MspInit+0x130>)
 8003b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b96:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_NORMAL;
 8003b98:	4b0f      	ldr	r3, [pc, #60]	; (8003bd8 <HAL_DAC_MspInit+0x130>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003b9e:	4b0e      	ldr	r3, [pc, #56]	; (8003bd8 <HAL_DAC_MspInit+0x130>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8003ba4:	480c      	ldr	r0, [pc, #48]	; (8003bd8 <HAL_DAC_MspInit+0x130>)
 8003ba6:	f001 febb 	bl	8005920 <HAL_DMA_Init>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8003bb0:	f000 f9d2 	bl	8003f58 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a08      	ldr	r2, [pc, #32]	; (8003bd8 <HAL_DAC_MspInit+0x130>)
 8003bb8:	60da      	str	r2, [r3, #12]
 8003bba:	4a07      	ldr	r2, [pc, #28]	; (8003bd8 <HAL_DAC_MspInit+0x130>)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8003bc0:	bf00      	nop
 8003bc2:	3728      	adds	r7, #40	; 0x28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40007400 	.word	0x40007400
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	20000308 	.word	0x20000308
 8003bd4:	40020030 	.word	0x40020030
 8003bd8:	20000350 	.word	0x20000350
 8003bdc:	40020044 	.word	0x40020044

08003be0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003be6:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <MX_DMA_Init+0x58>)
 8003be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bea:	4a13      	ldr	r2, [pc, #76]	; (8003c38 <MX_DMA_Init+0x58>)
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	6493      	str	r3, [r2, #72]	; 0x48
 8003bf2:	4b11      	ldr	r3, [pc, #68]	; (8003c38 <MX_DMA_Init+0x58>)
 8003bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	607b      	str	r3, [r7, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003bfe:	2200      	movs	r2, #0
 8003c00:	2100      	movs	r1, #0
 8003c02:	200b      	movs	r0, #11
 8003c04:	f001 fc2f 	bl	8005466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003c08:	200b      	movs	r0, #11
 8003c0a:	f001 fc48 	bl	800549e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2100      	movs	r1, #0
 8003c12:	200d      	movs	r0, #13
 8003c14:	f001 fc27 	bl	8005466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003c18:	200d      	movs	r0, #13
 8003c1a:	f001 fc40 	bl	800549e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2100      	movs	r1, #0
 8003c22:	200e      	movs	r0, #14
 8003c24:	f001 fc1f 	bl	8005466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003c28:	200e      	movs	r0, #14
 8003c2a:	f001 fc38 	bl	800549e <HAL_NVIC_EnableIRQ>

}
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40021000 	.word	0x40021000

08003c3c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	; 0x28
 8003c40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c42:	f107 0314 	add.w	r3, r7, #20
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	605a      	str	r2, [r3, #4]
 8003c4c:	609a      	str	r2, [r3, #8]
 8003c4e:	60da      	str	r2, [r3, #12]
 8003c50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c52:	4b67      	ldr	r3, [pc, #412]	; (8003df0 <MX_GPIO_Init+0x1b4>)
 8003c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c56:	4a66      	ldr	r2, [pc, #408]	; (8003df0 <MX_GPIO_Init+0x1b4>)
 8003c58:	f043 0304 	orr.w	r3, r3, #4
 8003c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c5e:	4b64      	ldr	r3, [pc, #400]	; (8003df0 <MX_GPIO_Init+0x1b4>)
 8003c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	613b      	str	r3, [r7, #16]
 8003c68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c6a:	4b61      	ldr	r3, [pc, #388]	; (8003df0 <MX_GPIO_Init+0x1b4>)
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6e:	4a60      	ldr	r2, [pc, #384]	; (8003df0 <MX_GPIO_Init+0x1b4>)
 8003c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c76:	4b5e      	ldr	r3, [pc, #376]	; (8003df0 <MX_GPIO_Init+0x1b4>)
 8003c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c82:	4b5b      	ldr	r3, [pc, #364]	; (8003df0 <MX_GPIO_Init+0x1b4>)
 8003c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c86:	4a5a      	ldr	r2, [pc, #360]	; (8003df0 <MX_GPIO_Init+0x1b4>)
 8003c88:	f043 0301 	orr.w	r3, r3, #1
 8003c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c8e:	4b58      	ldr	r3, [pc, #352]	; (8003df0 <MX_GPIO_Init+0x1b4>)
 8003c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	60bb      	str	r3, [r7, #8]
 8003c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c9a:	4b55      	ldr	r3, [pc, #340]	; (8003df0 <MX_GPIO_Init+0x1b4>)
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9e:	4a54      	ldr	r2, [pc, #336]	; (8003df0 <MX_GPIO_Init+0x1b4>)
 8003ca0:	f043 0302 	orr.w	r3, r3, #2
 8003ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ca6:	4b52      	ldr	r3, [pc, #328]	; (8003df0 <MX_GPIO_Init+0x1b4>)
 8003ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	607b      	str	r3, [r7, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DI_OUT_8_P_Pin|DI_OUT_8_N_Pin|DI_OUT_6_N_Pin|DI_OUT_5_P_Pin
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f24c 31d0 	movw	r1, #50128	; 0xc3d0
 8003cb8:	484e      	ldr	r0, [pc, #312]	; (8003df4 <MX_GPIO_Init+0x1b8>)
 8003cba:	f002 fba3 	bl	8006404 <HAL_GPIO_WritePin>
                          |DI_OUT_3_N_Pin|DI_OUT_3_P_Pin|DI_OUT_1_N_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DI_OUT_4_P_Pin|DI_OUT_6_P_Pin|DI_OUT_2_N_Pin|DI_OUT_4_N_Pin
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f64e 41ff 	movw	r1, #60671	; 0xecff
 8003cc4:	484c      	ldr	r0, [pc, #304]	; (8003df8 <MX_GPIO_Init+0x1bc>)
 8003cc6:	f002 fb9d 	bl	8006404 <HAL_GPIO_WritePin>
                          |DI_OUT_2_P_Pin|DI_OUT_7_N_Pin|DI_OUT_7_P_Pin|DI_OUT_5_N_Pin
                          |RFM_NSS_Pin|RFM_RST_Pin|RFM_DI_3_Pin|RFM_DI_0_Pin
                          |RFM_DI_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DI_OUT_1_P_Pin|LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003cd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cd4:	f002 fb96 	bl	8006404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003cd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ce6:	f107 0314 	add.w	r3, r7, #20
 8003cea:	4619      	mov	r1, r3
 8003cec:	4841      	ldr	r0, [pc, #260]	; (8003df4 <MX_GPIO_Init+0x1b8>)
 8003cee:	f002 f9f7 	bl	80060e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DI_OUT_8_P_Pin|DI_OUT_8_N_Pin|DI_OUT_6_N_Pin|DI_OUT_5_P_Pin
 8003cf2:	f24c 33d0 	movw	r3, #50128	; 0xc3d0
 8003cf6:	617b      	str	r3, [r7, #20]
                          |DI_OUT_3_N_Pin|DI_OUT_3_P_Pin|DI_OUT_1_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d00:	2300      	movs	r3, #0
 8003d02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d04:	f107 0314 	add.w	r3, r7, #20
 8003d08:	4619      	mov	r1, r3
 8003d0a:	483a      	ldr	r0, [pc, #232]	; (8003df4 <MX_GPIO_Init+0x1b8>)
 8003d0c:	f002 f9e8 	bl	80060e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8003d10:	2309      	movs	r3, #9
 8003d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d14:	2303      	movs	r3, #3
 8003d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003d1c:	f107 0314 	add.w	r3, r7, #20
 8003d20:	4619      	mov	r1, r3
 8003d22:	4836      	ldr	r0, [pc, #216]	; (8003dfc <MX_GPIO_Init+0x1c0>)
 8003d24:	f002 f9dc 	bl	80060e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DI_1_Pin;
 8003d28:	2302      	movs	r3, #2
 8003d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DI_1_GPIO_Port, &GPIO_InitStruct);
 8003d34:	f107 0314 	add.w	r3, r7, #20
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4830      	ldr	r0, [pc, #192]	; (8003dfc <MX_GPIO_Init+0x1c0>)
 8003d3c:	f002 f9d0 	bl	80060e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DI_2_Pin|DI_3_Pin|DI_4_Pin|DI_5_Pin;
 8003d40:	230f      	movs	r3, #15
 8003d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d44:	2300      	movs	r3, #0
 8003d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d4c:	f107 0314 	add.w	r3, r7, #20
 8003d50:	4619      	mov	r1, r3
 8003d52:	4828      	ldr	r0, [pc, #160]	; (8003df4 <MX_GPIO_Init+0x1b8>)
 8003d54:	f002 f9c4 	bl	80060e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DI_6_Pin|DI_7_Pin|DI_8_Pin;
 8003d58:	2307      	movs	r3, #7
 8003d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d64:	f107 0314 	add.w	r3, r7, #20
 8003d68:	4619      	mov	r1, r3
 8003d6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d6e:	f002 f9b7 	bl	80060e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_15;
 8003d72:	f248 0308 	movw	r3, #32776	; 0x8008
 8003d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d80:	f107 0314 	add.w	r3, r7, #20
 8003d84:	4619      	mov	r1, r3
 8003d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d8a:	f002 f9a9 	bl	80060e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DI_OUT_4_P_Pin|DI_OUT_6_P_Pin|DI_OUT_2_N_Pin|DI_OUT_4_N_Pin
 8003d8e:	f64e 43ff 	movw	r3, #60671	; 0xecff
 8003d92:	617b      	str	r3, [r7, #20]
                          |DI_OUT_2_P_Pin|DI_OUT_7_N_Pin|DI_OUT_7_P_Pin|DI_OUT_5_N_Pin
                          |RFM_NSS_Pin|RFM_RST_Pin|RFM_DI_3_Pin|RFM_DI_0_Pin
                          |RFM_DI_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d94:	2301      	movs	r3, #1
 8003d96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003da0:	f107 0314 	add.w	r3, r7, #20
 8003da4:	4619      	mov	r1, r3
 8003da6:	4814      	ldr	r0, [pc, #80]	; (8003df8 <MX_GPIO_Init+0x1bc>)
 8003da8:	f002 f99a 	bl	80060e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 8003dac:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8003db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003db2:	2303      	movs	r3, #3
 8003db4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dba:	f107 0314 	add.w	r3, r7, #20
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	480d      	ldr	r0, [pc, #52]	; (8003df8 <MX_GPIO_Init+0x1bc>)
 8003dc2:	f002 f98d 	bl	80060e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DI_OUT_1_P_Pin|LED_R_Pin|LED_G_Pin;
 8003dc6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd8:	f107 0314 	add.w	r3, r7, #20
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003de2:	f002 f97d 	bl	80060e0 <HAL_GPIO_Init>

}
 8003de6:	bf00      	nop
 8003de8:	3728      	adds	r7, #40	; 0x28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40021000 	.word	0x40021000
 8003df4:	48000800 	.word	0x48000800
 8003df8:	48000400 	.word	0x48000400
 8003dfc:	48001c00 	.word	0x48001c00

08003e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e04:	f000 fb07 	bl	8004416 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e08:	f000 f818 	bl	8003e3c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e0c:	f7ff ff16 	bl	8003c3c <MX_GPIO_Init>
  MX_DMA_Init();
 8003e10:	f7ff fee6 	bl	8003be0 <MX_DMA_Init>
  MX_ADC1_Init();
 8003e14:	f7ff fcd2 	bl	80037bc <MX_ADC1_Init>
  MX_DAC1_Init();
 8003e18:	f7ff fe0a 	bl	8003a30 <MX_DAC1_Init>
  MX_SPI3_Init();
 8003e1c:	f000 f8c0 	bl	8003fa0 <MX_SPI3_Init>
  MX_CRC_Init();
 8003e20:	f7ff fdc4 	bl	80039ac <MX_CRC_Init>
  MX_TIM6_Init();
 8003e24:	f000 fa28 	bl	8004278 <MX_TIM6_Init>
  MX_TIM7_Init();
 8003e28:	f000 fa5c 	bl	80042e4 <MX_TIM7_Init>
  MX_USB_DEVICE_Init();
 8003e2c:	f00a fa28 	bl	800e280 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  appMain.Startup();
 8003e30:	4801      	ldr	r0, [pc, #4]	; (8003e38 <main+0x38>)
 8003e32:	f7fc fd2b 	bl	800088c <_ZN7AppMain7StartupEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003e36:	e7fe      	b.n	8003e36 <main+0x36>
 8003e38:	20000398 	.word	0x20000398

08003e3c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b096      	sub	sp, #88	; 0x58
 8003e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e42:	f107 0314 	add.w	r3, r7, #20
 8003e46:	2244      	movs	r2, #68	; 0x44
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f00a ffee 	bl	800ee2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e50:	463b      	mov	r3, r7
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	605a      	str	r2, [r3, #4]
 8003e58:	609a      	str	r2, [r3, #8]
 8003e5a:	60da      	str	r2, [r3, #12]
 8003e5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003e5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003e62:	f004 f8a7 	bl	8007fb4 <HAL_PWREx_ControlVoltageScaling>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	bf14      	ite	ne
 8003e6c:	2301      	movne	r3, #1
 8003e6e:	2300      	moveq	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8003e76:	f000 f86f 	bl	8003f58 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8003e7a:	2330      	movs	r3, #48	; 0x30
 8003e7c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003e82:	2301      	movs	r3, #1
 8003e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003e8a:	2360      	movs	r3, #96	; 0x60
 8003e8c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e8e:	2302      	movs	r3, #2
 8003e90:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003e92:	2301      	movs	r3, #1
 8003e94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003e96:	2301      	movs	r3, #1
 8003e98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8003e9a:	2324      	movs	r3, #36	; 0x24
 8003e9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003e9e:	2307      	movs	r3, #7
 8003ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003eaa:	f107 0314 	add.w	r3, r7, #20
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f004 f8e6 	bl	8008080 <HAL_RCC_OscConfig>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	bf14      	ite	ne
 8003eba:	2301      	movne	r3, #1
 8003ebc:	2300      	moveq	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8003ec4:	f000 f848 	bl	8003f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ec8:	230f      	movs	r3, #15
 8003eca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003edc:	463b      	mov	r3, r7
 8003ede:	2104      	movs	r1, #4
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f004 fce1 	bl	80088a8 <HAL_RCC_ClockConfig>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	bf14      	ite	ne
 8003eec:	2301      	movne	r3, #1
 8003eee:	2300      	moveq	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 8003ef6:	f000 f82f 	bl	8003f58 <Error_Handler>
  }
}
 8003efa:	bf00      	nop
 8003efc:	3758      	adds	r7, #88	; 0x58
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <HAL_TIM_PeriodElapsedCallback>:


/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a04      	ldr	r2, [pc, #16]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d102      	bne.n	8003f1c <HAL_TIM_PeriodElapsedCallback+0x18>
		appMain.taskStatus.UpdateTasks();
 8003f16:	4804      	ldr	r0, [pc, #16]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003f18:	f7ff faea 	bl	80034f0 <_ZN11TaskHandler11UpdateTasksEv>
	}
}
 8003f1c:	bf00      	nop
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40001400 	.word	0x40001400
 8003f28:	200003b8 	.word	0x200003b8

08003f2c <USB_CDC_RX_Interrupt>:


void USB_CDC_RX_Interrupt(uint8_t *data, uint32_t length)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
	appMain.usbCOM->Receive(data, length);
 8003f36:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <USB_CDC_RX_Interrupt+0x28>)
 8003f38:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8003f3a:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <USB_CDC_RX_Interrupt+0x28>)
 8003f3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3304      	adds	r3, #4
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	4798      	blx	r3
}
 8003f4c:	bf00      	nop
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20000398 	.word	0x20000398

08003f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f5c:	b672      	cpsid	i
}
 8003f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f60:	e7fe      	b.n	8003f60 <Error_Handler+0x8>
	...

08003f64 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d107      	bne.n	8003f84 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d102      	bne.n	8003f84 <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 8003f7e:	4803      	ldr	r0, [pc, #12]	; (8003f8c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003f80:	f7fc fbfb 	bl	800077a <_ZN7AppMainC1Ev>
}
 8003f84:	bf00      	nop
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	20000398 	.word	0x20000398

08003f90 <_GLOBAL__sub_I_appMain>:
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f98:	2001      	movs	r0, #1
 8003f9a:	f7ff ffe3 	bl	8003f64 <_Z41__static_initialization_and_destruction_0ii>
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003fa4:	4b1b      	ldr	r3, [pc, #108]	; (8004014 <MX_SPI3_Init+0x74>)
 8003fa6:	4a1c      	ldr	r2, [pc, #112]	; (8004018 <MX_SPI3_Init+0x78>)
 8003fa8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003faa:	4b1a      	ldr	r3, [pc, #104]	; (8004014 <MX_SPI3_Init+0x74>)
 8003fac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003fb0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003fb2:	4b18      	ldr	r3, [pc, #96]	; (8004014 <MX_SPI3_Init+0x74>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003fb8:	4b16      	ldr	r3, [pc, #88]	; (8004014 <MX_SPI3_Init+0x74>)
 8003fba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003fbe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fc0:	4b14      	ldr	r3, [pc, #80]	; (8004014 <MX_SPI3_Init+0x74>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fc6:	4b13      	ldr	r3, [pc, #76]	; (8004014 <MX_SPI3_Init+0x74>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003fcc:	4b11      	ldr	r3, [pc, #68]	; (8004014 <MX_SPI3_Init+0x74>)
 8003fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fd2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003fd4:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <MX_SPI3_Init+0x74>)
 8003fd6:	2218      	movs	r2, #24
 8003fd8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fda:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <MX_SPI3_Init+0x74>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fe0:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <MX_SPI3_Init+0x74>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <MX_SPI3_Init+0x74>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003fec:	4b09      	ldr	r3, [pc, #36]	; (8004014 <MX_SPI3_Init+0x74>)
 8003fee:	2207      	movs	r2, #7
 8003ff0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003ff2:	4b08      	ldr	r3, [pc, #32]	; (8004014 <MX_SPI3_Init+0x74>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003ff8:	4b06      	ldr	r3, [pc, #24]	; (8004014 <MX_SPI3_Init+0x74>)
 8003ffa:	2208      	movs	r2, #8
 8003ffc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003ffe:	4805      	ldr	r0, [pc, #20]	; (8004014 <MX_SPI3_Init+0x74>)
 8004000:	f005 f986 	bl	8009310 <HAL_SPI_Init>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800400a:	f7ff ffa5 	bl	8003f58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800400e:	bf00      	nop
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	200004c0 	.word	0x200004c0
 8004018:	40003c00 	.word	0x40003c00

0800401c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08a      	sub	sp, #40	; 0x28
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004024:	f107 0314 	add.w	r3, r7, #20
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	605a      	str	r2, [r3, #4]
 800402e:	609a      	str	r2, [r3, #8]
 8004030:	60da      	str	r2, [r3, #12]
 8004032:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a17      	ldr	r2, [pc, #92]	; (8004098 <HAL_SPI_MspInit+0x7c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d128      	bne.n	8004090 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800403e:	4b17      	ldr	r3, [pc, #92]	; (800409c <HAL_SPI_MspInit+0x80>)
 8004040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004042:	4a16      	ldr	r2, [pc, #88]	; (800409c <HAL_SPI_MspInit+0x80>)
 8004044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004048:	6593      	str	r3, [r2, #88]	; 0x58
 800404a:	4b14      	ldr	r3, [pc, #80]	; (800409c <HAL_SPI_MspInit+0x80>)
 800404c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004052:	613b      	str	r3, [r7, #16]
 8004054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004056:	4b11      	ldr	r3, [pc, #68]	; (800409c <HAL_SPI_MspInit+0x80>)
 8004058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405a:	4a10      	ldr	r2, [pc, #64]	; (800409c <HAL_SPI_MspInit+0x80>)
 800405c:	f043 0304 	orr.w	r3, r3, #4
 8004060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004062:	4b0e      	ldr	r3, [pc, #56]	; (800409c <HAL_SPI_MspInit+0x80>)
 8004064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800406e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004074:	2302      	movs	r3, #2
 8004076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004078:	2300      	movs	r3, #0
 800407a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800407c:	2303      	movs	r3, #3
 800407e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004080:	2306      	movs	r3, #6
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004084:	f107 0314 	add.w	r3, r7, #20
 8004088:	4619      	mov	r1, r3
 800408a:	4805      	ldr	r0, [pc, #20]	; (80040a0 <HAL_SPI_MspInit+0x84>)
 800408c:	f002 f828 	bl	80060e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004090:	bf00      	nop
 8004092:	3728      	adds	r7, #40	; 0x28
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40003c00 	.word	0x40003c00
 800409c:	40021000 	.word	0x40021000
 80040a0:	48000800 	.word	0x48000800

080040a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040aa:	4b0f      	ldr	r3, [pc, #60]	; (80040e8 <HAL_MspInit+0x44>)
 80040ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ae:	4a0e      	ldr	r2, [pc, #56]	; (80040e8 <HAL_MspInit+0x44>)
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	6613      	str	r3, [r2, #96]	; 0x60
 80040b6:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <HAL_MspInit+0x44>)
 80040b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	607b      	str	r3, [r7, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040c2:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <HAL_MspInit+0x44>)
 80040c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c6:	4a08      	ldr	r2, [pc, #32]	; (80040e8 <HAL_MspInit+0x44>)
 80040c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040cc:	6593      	str	r3, [r2, #88]	; 0x58
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <HAL_MspInit+0x44>)
 80040d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40021000 	.word	0x40021000

080040ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040f0:	e7fe      	b.n	80040f0 <NMI_Handler+0x4>

080040f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040f2:	b480      	push	{r7}
 80040f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040f6:	e7fe      	b.n	80040f6 <HardFault_Handler+0x4>

080040f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040fc:	e7fe      	b.n	80040fc <MemManage_Handler+0x4>

080040fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040fe:	b480      	push	{r7}
 8004100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004102:	e7fe      	b.n	8004102 <BusFault_Handler+0x4>

08004104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004108:	e7fe      	b.n	8004108 <UsageFault_Handler+0x4>

0800410a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800410a:	b480      	push	{r7}
 800410c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800410e:	bf00      	nop
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800411c:	bf00      	nop
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004126:	b480      	push	{r7}
 8004128:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800412a:	bf00      	nop
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004138:	f000 f9c2 	bl	80044c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800413c:	bf00      	nop
 800413e:	bd80      	pop	{r7, pc}

08004140 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004144:	4802      	ldr	r0, [pc, #8]	; (8004150 <DMA1_Channel1_IRQHandler+0x10>)
 8004146:	f001 fca3 	bl	8005a90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000288 	.word	0x20000288

08004154 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8004158:	4802      	ldr	r0, [pc, #8]	; (8004164 <DMA1_Channel3_IRQHandler+0x10>)
 800415a:	f001 fc99 	bl	8005a90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800415e:	bf00      	nop
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20000308 	.word	0x20000308

08004168 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 800416c:	4802      	ldr	r0, [pc, #8]	; (8004178 <DMA1_Channel4_IRQHandler+0x10>)
 800416e:	f001 fc8f 	bl	8005a90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004172:	bf00      	nop
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20000350 	.word	0x20000350

0800417c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004180:	4802      	ldr	r0, [pc, #8]	; (800418c <TIM7_IRQHandler+0x10>)
 8004182:	f005 fef9 	bl	8009f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004186:	bf00      	nop
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20000574 	.word	0x20000574

08004190 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004194:	4802      	ldr	r0, [pc, #8]	; (80041a0 <USB_IRQHandler+0x10>)
 8004196:	f002 faa0 	bl	80066da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800419a:	bf00      	nop
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000c90 	.word	0x20000c90

080041a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
	return 1;
 80041a8:	2301      	movs	r3, #1
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <_kill>:

int _kill(int pid, int sig)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80041be:	f00a fe03 	bl	800edc8 <__errno>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2216      	movs	r2, #22
 80041c6:	601a      	str	r2, [r3, #0]
	return -1;
 80041c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <_exit>:

void _exit (int status)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80041dc:	f04f 31ff 	mov.w	r1, #4294967295
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff ffe7 	bl	80041b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80041e6:	e7fe      	b.n	80041e6 <_exit+0x12>

080041e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041f0:	4a14      	ldr	r2, [pc, #80]	; (8004244 <_sbrk+0x5c>)
 80041f2:	4b15      	ldr	r3, [pc, #84]	; (8004248 <_sbrk+0x60>)
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041fc:	4b13      	ldr	r3, [pc, #76]	; (800424c <_sbrk+0x64>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d102      	bne.n	800420a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004204:	4b11      	ldr	r3, [pc, #68]	; (800424c <_sbrk+0x64>)
 8004206:	4a12      	ldr	r2, [pc, #72]	; (8004250 <_sbrk+0x68>)
 8004208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800420a:	4b10      	ldr	r3, [pc, #64]	; (800424c <_sbrk+0x64>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4413      	add	r3, r2
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	429a      	cmp	r2, r3
 8004216:	d207      	bcs.n	8004228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004218:	f00a fdd6 	bl	800edc8 <__errno>
 800421c:	4603      	mov	r3, r0
 800421e:	220c      	movs	r2, #12
 8004220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004222:	f04f 33ff 	mov.w	r3, #4294967295
 8004226:	e009      	b.n	800423c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004228:	4b08      	ldr	r3, [pc, #32]	; (800424c <_sbrk+0x64>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800422e:	4b07      	ldr	r3, [pc, #28]	; (800424c <_sbrk+0x64>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4413      	add	r3, r2
 8004236:	4a05      	ldr	r2, [pc, #20]	; (800424c <_sbrk+0x64>)
 8004238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800423a:	68fb      	ldr	r3, [r7, #12]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	20010000 	.word	0x20010000
 8004248:	00000400 	.word	0x00000400
 800424c:	20000524 	.word	0x20000524
 8004250:	200011c0 	.word	0x200011c0

08004254 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004258:	4b06      	ldr	r3, [pc, #24]	; (8004274 <SystemInit+0x20>)
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425e:	4a05      	ldr	r2, [pc, #20]	; (8004274 <SystemInit+0x20>)
 8004260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004268:	bf00      	nop
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	e000ed00 	.word	0xe000ed00

08004278 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800427e:	1d3b      	adds	r3, r7, #4
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	605a      	str	r2, [r3, #4]
 8004286:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004288:	4b14      	ldr	r3, [pc, #80]	; (80042dc <MX_TIM6_Init+0x64>)
 800428a:	4a15      	ldr	r2, [pc, #84]	; (80042e0 <MX_TIM6_Init+0x68>)
 800428c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800428e:	4b13      	ldr	r3, [pc, #76]	; (80042dc <MX_TIM6_Init+0x64>)
 8004290:	220a      	movs	r2, #10
 8004292:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004294:	4b11      	ldr	r3, [pc, #68]	; (80042dc <MX_TIM6_Init+0x64>)
 8004296:	2200      	movs	r2, #0
 8004298:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16000;
 800429a:	4b10      	ldr	r3, [pc, #64]	; (80042dc <MX_TIM6_Init+0x64>)
 800429c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80042a0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042a2:	4b0e      	ldr	r3, [pc, #56]	; (80042dc <MX_TIM6_Init+0x64>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80042a8:	480c      	ldr	r0, [pc, #48]	; (80042dc <MX_TIM6_Init+0x64>)
 80042aa:	f005 fdb9 	bl	8009e20 <HAL_TIM_Base_Init>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80042b4:	f7ff fe50 	bl	8003f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042b8:	2300      	movs	r3, #0
 80042ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80042c0:	1d3b      	adds	r3, r7, #4
 80042c2:	4619      	mov	r1, r3
 80042c4:	4805      	ldr	r0, [pc, #20]	; (80042dc <MX_TIM6_Init+0x64>)
 80042c6:	f006 f803 	bl	800a2d0 <HAL_TIMEx_MasterConfigSynchronization>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80042d0:	f7ff fe42 	bl	8003f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80042d4:	bf00      	nop
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	20000528 	.word	0x20000528
 80042e0:	40001000 	.word	0x40001000

080042e4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042ea:	1d3b      	adds	r3, r7, #4
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	605a      	str	r2, [r3, #4]
 80042f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80042f4:	4b14      	ldr	r3, [pc, #80]	; (8004348 <MX_TIM7_Init+0x64>)
 80042f6:	4a15      	ldr	r2, [pc, #84]	; (800434c <MX_TIM7_Init+0x68>)
 80042f8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10;
 80042fa:	4b13      	ldr	r3, [pc, #76]	; (8004348 <MX_TIM7_Init+0x64>)
 80042fc:	220a      	movs	r2, #10
 80042fe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004300:	4b11      	ldr	r3, [pc, #68]	; (8004348 <MX_TIM7_Init+0x64>)
 8004302:	2200      	movs	r2, #0
 8004304:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7199;
 8004306:	4b10      	ldr	r3, [pc, #64]	; (8004348 <MX_TIM7_Init+0x64>)
 8004308:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800430c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800430e:	4b0e      	ldr	r3, [pc, #56]	; (8004348 <MX_TIM7_Init+0x64>)
 8004310:	2200      	movs	r2, #0
 8004312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004314:	480c      	ldr	r0, [pc, #48]	; (8004348 <MX_TIM7_Init+0x64>)
 8004316:	f005 fd83 	bl	8009e20 <HAL_TIM_Base_Init>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004320:	f7ff fe1a 	bl	8003f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004324:	2320      	movs	r3, #32
 8004326:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004328:	2300      	movs	r3, #0
 800432a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800432c:	1d3b      	adds	r3, r7, #4
 800432e:	4619      	mov	r1, r3
 8004330:	4805      	ldr	r0, [pc, #20]	; (8004348 <MX_TIM7_Init+0x64>)
 8004332:	f005 ffcd 	bl	800a2d0 <HAL_TIMEx_MasterConfigSynchronization>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800433c:	f7ff fe0c 	bl	8003f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004340:	bf00      	nop
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	20000574 	.word	0x20000574
 800434c:	40001400 	.word	0x40001400

08004350 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a16      	ldr	r2, [pc, #88]	; (80043b8 <HAL_TIM_Base_MspInit+0x68>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d10c      	bne.n	800437c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004362:	4b16      	ldr	r3, [pc, #88]	; (80043bc <HAL_TIM_Base_MspInit+0x6c>)
 8004364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004366:	4a15      	ldr	r2, [pc, #84]	; (80043bc <HAL_TIM_Base_MspInit+0x6c>)
 8004368:	f043 0310 	orr.w	r3, r3, #16
 800436c:	6593      	str	r3, [r2, #88]	; 0x58
 800436e:	4b13      	ldr	r3, [pc, #76]	; (80043bc <HAL_TIM_Base_MspInit+0x6c>)
 8004370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800437a:	e018      	b.n	80043ae <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a0f      	ldr	r2, [pc, #60]	; (80043c0 <HAL_TIM_Base_MspInit+0x70>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d113      	bne.n	80043ae <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004386:	4b0d      	ldr	r3, [pc, #52]	; (80043bc <HAL_TIM_Base_MspInit+0x6c>)
 8004388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438a:	4a0c      	ldr	r2, [pc, #48]	; (80043bc <HAL_TIM_Base_MspInit+0x6c>)
 800438c:	f043 0320 	orr.w	r3, r3, #32
 8004390:	6593      	str	r3, [r2, #88]	; 0x58
 8004392:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <HAL_TIM_Base_MspInit+0x6c>)
 8004394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	60bb      	str	r3, [r7, #8]
 800439c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800439e:	2200      	movs	r2, #0
 80043a0:	2100      	movs	r1, #0
 80043a2:	2037      	movs	r0, #55	; 0x37
 80043a4:	f001 f85f 	bl	8005466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80043a8:	2037      	movs	r0, #55	; 0x37
 80043aa:	f001 f878 	bl	800549e <HAL_NVIC_EnableIRQ>
}
 80043ae:	bf00      	nop
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40001000 	.word	0x40001000
 80043bc:	40021000 	.word	0x40021000
 80043c0:	40001400 	.word	0x40001400

080043c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80043c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80043c8:	f7ff ff44 	bl	8004254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043cc:	480c      	ldr	r0, [pc, #48]	; (8004400 <LoopForever+0x6>)
  ldr r1, =_edata
 80043ce:	490d      	ldr	r1, [pc, #52]	; (8004404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043d0:	4a0d      	ldr	r2, [pc, #52]	; (8004408 <LoopForever+0xe>)
  movs r3, #0
 80043d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043d4:	e002      	b.n	80043dc <LoopCopyDataInit>

080043d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043da:	3304      	adds	r3, #4

080043dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043e0:	d3f9      	bcc.n	80043d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043e2:	4a0a      	ldr	r2, [pc, #40]	; (800440c <LoopForever+0x12>)
  ldr r4, =_ebss
 80043e4:	4c0a      	ldr	r4, [pc, #40]	; (8004410 <LoopForever+0x16>)
  movs r3, #0
 80043e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043e8:	e001      	b.n	80043ee <LoopFillZerobss>

080043ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043ec:	3204      	adds	r2, #4

080043ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043f0:	d3fb      	bcc.n	80043ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043f2:	f00a fcef 	bl	800edd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80043f6:	f7ff fd03 	bl	8003e00 <main>

080043fa <LoopForever>:

LoopForever:
    b LoopForever
 80043fa:	e7fe      	b.n	80043fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80043fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004404:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8004408:	0800f140 	.word	0x0800f140
  ldr r2, =_sbss
 800440c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8004410:	200011c0 	.word	0x200011c0

08004414 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004414:	e7fe      	b.n	8004414 <ADC1_IRQHandler>

08004416 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800441c:	2300      	movs	r3, #0
 800441e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004420:	2003      	movs	r0, #3
 8004422:	f001 f815 	bl	8005450 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004426:	200f      	movs	r0, #15
 8004428:	f000 f80e 	bl	8004448 <HAL_InitTick>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	71fb      	strb	r3, [r7, #7]
 8004436:	e001      	b.n	800443c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004438:	f7ff fe34 	bl	80040a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800443c:	79fb      	ldrb	r3, [r7, #7]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
	...

08004448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004454:	4b17      	ldr	r3, [pc, #92]	; (80044b4 <HAL_InitTick+0x6c>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d023      	beq.n	80044a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800445c:	4b16      	ldr	r3, [pc, #88]	; (80044b8 <HAL_InitTick+0x70>)
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <HAL_InitTick+0x6c>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	4619      	mov	r1, r3
 8004466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800446a:	fbb3 f3f1 	udiv	r3, r3, r1
 800446e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004472:	4618      	mov	r0, r3
 8004474:	f001 f821 	bl	80054ba <HAL_SYSTICK_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10f      	bne.n	800449e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b0f      	cmp	r3, #15
 8004482:	d809      	bhi.n	8004498 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004484:	2200      	movs	r2, #0
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	f04f 30ff 	mov.w	r0, #4294967295
 800448c:	f000 ffeb 	bl	8005466 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004490:	4a0a      	ldr	r2, [pc, #40]	; (80044bc <HAL_InitTick+0x74>)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	e007      	b.n	80044a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	73fb      	strb	r3, [r7, #15]
 800449c:	e004      	b.n	80044a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	73fb      	strb	r3, [r7, #15]
 80044a2:	e001      	b.n	80044a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	20000008 	.word	0x20000008
 80044b8:	20000000 	.word	0x20000000
 80044bc:	20000004 	.word	0x20000004

080044c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80044c4:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <HAL_IncTick+0x20>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <HAL_IncTick+0x24>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4413      	add	r3, r2
 80044d0:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <HAL_IncTick+0x24>)
 80044d2:	6013      	str	r3, [r2, #0]
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	20000008 	.word	0x20000008
 80044e4:	200005c0 	.word	0x200005c0

080044e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  return uwTick;
 80044ec:	4b03      	ldr	r3, [pc, #12]	; (80044fc <HAL_GetTick+0x14>)
 80044ee:	681b      	ldr	r3, [r3, #0]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	200005c0 	.word	0x200005c0

08004500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004508:	f7ff ffee 	bl	80044e8 <HAL_GetTick>
 800450c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004518:	d005      	beq.n	8004526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800451a:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <HAL_Delay+0x44>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004526:	bf00      	nop
 8004528:	f7ff ffde 	bl	80044e8 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	429a      	cmp	r2, r3
 8004536:	d8f7      	bhi.n	8004528 <HAL_Delay+0x28>
  {
  }
}
 8004538:	bf00      	nop
 800453a:	bf00      	nop
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20000008 	.word	0x20000008

08004548 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	609a      	str	r2, [r3, #8]
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	609a      	str	r2, [r3, #8]
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3360      	adds	r3, #96	; 0x60
 80045c2:	461a      	mov	r2, r3
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	4b08      	ldr	r3, [pc, #32]	; (80045f4 <LL_ADC_SetOffset+0x44>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	4313      	orrs	r3, r2
 80045e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80045e8:	bf00      	nop
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	03fff000 	.word	0x03fff000

080045f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3360      	adds	r3, #96	; 0x60
 8004606:	461a      	mov	r2, r3
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3360      	adds	r3, #96	; 0x60
 8004634:	461a      	mov	r2, r3
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	431a      	orrs	r2, r3
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800464e:	bf00      	nop
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800465a:	b480      	push	{r7}
 800465c:	b087      	sub	sp, #28
 800465e:	af00      	add	r7, sp, #0
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3330      	adds	r3, #48	; 0x30
 800466a:	461a      	mov	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	0a1b      	lsrs	r3, r3, #8
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	f003 030c 	and.w	r3, r3, #12
 8004676:	4413      	add	r3, r2
 8004678:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f003 031f 	and.w	r3, r3, #31
 8004684:	211f      	movs	r1, #31
 8004686:	fa01 f303 	lsl.w	r3, r1, r3
 800468a:	43db      	mvns	r3, r3
 800468c:	401a      	ands	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	0e9b      	lsrs	r3, r3, #26
 8004692:	f003 011f 	and.w	r1, r3, #31
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	f003 031f 	and.w	r3, r3, #31
 800469c:	fa01 f303 	lsl.w	r3, r1, r3
 80046a0:	431a      	orrs	r2, r3
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80046a6:	bf00      	nop
 80046a8:	371c      	adds	r7, #28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b087      	sub	sp, #28
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3314      	adds	r3, #20
 80046c2:	461a      	mov	r2, r3
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	0e5b      	lsrs	r3, r3, #25
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	f003 0304 	and.w	r3, r3, #4
 80046ce:	4413      	add	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	0d1b      	lsrs	r3, r3, #20
 80046da:	f003 031f 	and.w	r3, r3, #31
 80046de:	2107      	movs	r1, #7
 80046e0:	fa01 f303 	lsl.w	r3, r1, r3
 80046e4:	43db      	mvns	r3, r3
 80046e6:	401a      	ands	r2, r3
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	0d1b      	lsrs	r3, r3, #20
 80046ec:	f003 031f 	and.w	r3, r3, #31
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	fa01 f303 	lsl.w	r3, r1, r3
 80046f6:	431a      	orrs	r2, r3
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80046fc:	bf00      	nop
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004720:	43db      	mvns	r3, r3
 8004722:	401a      	ands	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f003 0318 	and.w	r3, r3, #24
 800472a:	4908      	ldr	r1, [pc, #32]	; (800474c <LL_ADC_SetChannelSingleDiff+0x44>)
 800472c:	40d9      	lsrs	r1, r3
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	400b      	ands	r3, r1
 8004732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004736:	431a      	orrs	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800473e:	bf00      	nop
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	0007ffff 	.word	0x0007ffff

08004750 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004760:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6093      	str	r3, [r2, #8]
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004788:	d101      	bne.n	800478e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80047ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80047b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047d8:	d101      	bne.n	80047de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <LL_ADC_IsEnabled+0x18>
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <LL_ADC_IsEnabled+0x1a>
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b04      	cmp	r3, #4
 8004824:	d101      	bne.n	800482a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b08      	cmp	r3, #8
 800484a:	d101      	bne.n	8004850 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
	...

08004860 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b088      	sub	sp, #32
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800486c:	2300      	movs	r3, #0
 800486e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e12c      	b.n	8004ad4 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004884:	2b00      	cmp	r3, #0
 8004886:	d109      	bne.n	800489c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7fe fffb 	bl	8003884 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff ff67 	bl	8004774 <LL_ADC_IsDeepPowerDownEnabled>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d004      	beq.n	80048b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff ff4d 	bl	8004750 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff ff82 	bl	80047c4 <LL_ADC_IsInternalRegulatorEnabled>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d115      	bne.n	80048f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff ff66 	bl	800479c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048d0:	4b82      	ldr	r3, [pc, #520]	; (8004adc <HAL_ADC_Init+0x27c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	099b      	lsrs	r3, r3, #6
 80048d6:	4a82      	ldr	r2, [pc, #520]	; (8004ae0 <HAL_ADC_Init+0x280>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	099b      	lsrs	r3, r3, #6
 80048de:	3301      	adds	r3, #1
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80048e4:	e002      	b.n	80048ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	3b01      	subs	r3, #1
 80048ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f9      	bne.n	80048e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff ff64 	bl	80047c4 <LL_ADC_IsInternalRegulatorEnabled>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10d      	bne.n	800491e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004906:	f043 0210 	orr.w	r2, r3, #16
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004912:	f043 0201 	orr.w	r2, r3, #1
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff ff75 	bl	8004812 <LL_ADC_REG_IsConversionOngoing>
 8004928:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492e:	f003 0310 	and.w	r3, r3, #16
 8004932:	2b00      	cmp	r3, #0
 8004934:	f040 80c5 	bne.w	8004ac2 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	2b00      	cmp	r3, #0
 800493c:	f040 80c1 	bne.w	8004ac2 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004944:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004948:	f043 0202 	orr.w	r2, r3, #2
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff ff49 	bl	80047ec <LL_ADC_IsEnabled>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10b      	bne.n	8004978 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004960:	4860      	ldr	r0, [pc, #384]	; (8004ae4 <HAL_ADC_Init+0x284>)
 8004962:	f7ff ff43 	bl	80047ec <LL_ADC_IsEnabled>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d105      	bne.n	8004978 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	4619      	mov	r1, r3
 8004972:	485d      	ldr	r0, [pc, #372]	; (8004ae8 <HAL_ADC_Init+0x288>)
 8004974:	f7ff fde8 	bl	8004548 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	7e5b      	ldrb	r3, [r3, #25]
 800497c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004982:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004988:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800498e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004996:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004998:	4313      	orrs	r3, r2
 800499a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d106      	bne.n	80049b4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	3b01      	subs	r3, #1
 80049ac:	045b      	lsls	r3, r3, #17
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d009      	beq.n	80049d0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	4b45      	ldr	r3, [pc, #276]	; (8004aec <HAL_ADC_Init+0x28c>)
 80049d8:	4013      	ands	r3, r2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6812      	ldr	r2, [r2, #0]
 80049de:	69b9      	ldr	r1, [r7, #24]
 80049e0:	430b      	orrs	r3, r1
 80049e2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff ff12 	bl	8004812 <LL_ADC_REG_IsConversionOngoing>
 80049ee:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff ff1f 	bl	8004838 <LL_ADC_INJ_IsConversionOngoing>
 80049fa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d13d      	bne.n	8004a7e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d13a      	bne.n	8004a7e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004a0c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a14:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a24:	f023 0302 	bic.w	r3, r3, #2
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6812      	ldr	r2, [r2, #0]
 8004a2c:	69b9      	ldr	r1, [r7, #24]
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d118      	bne.n	8004a6e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004a46:	f023 0304 	bic.w	r3, r3, #4
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a52:	4311      	orrs	r1, r2
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a58:	4311      	orrs	r1, r2
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	431a      	orrs	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0201 	orr.w	r2, r2, #1
 8004a6a:	611a      	str	r2, [r3, #16]
 8004a6c:	e007      	b.n	8004a7e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0201 	bic.w	r2, r2, #1
 8004a7c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d10c      	bne.n	8004aa0 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8c:	f023 010f 	bic.w	r1, r3, #15
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	1e5a      	subs	r2, r3, #1
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	631a      	str	r2, [r3, #48]	; 0x30
 8004a9e:	e007      	b.n	8004ab0 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 020f 	bic.w	r2, r2, #15
 8004aae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab4:	f023 0303 	bic.w	r3, r3, #3
 8004ab8:	f043 0201 	orr.w	r2, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	655a      	str	r2, [r3, #84]	; 0x54
 8004ac0:	e007      	b.n	8004ad2 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac6:	f043 0210 	orr.w	r2, r3, #16
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004ad2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3720      	adds	r7, #32
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	20000000 	.word	0x20000000
 8004ae0:	053e2d63 	.word	0x053e2d63
 8004ae4:	50040000 	.word	0x50040000
 8004ae8:	50040300 	.word	0x50040300
 8004aec:	fff0c007 	.word	0xfff0c007

08004af0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b0b6      	sub	sp, #216	; 0xd8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_ADC_ConfigChannel+0x22>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e3b9      	b.n	8005286 <HAL_ADC_ConfigChannel+0x796>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff fe77 	bl	8004812 <LL_ADC_REG_IsConversionOngoing>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f040 839e 	bne.w	8005268 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b05      	cmp	r3, #5
 8004b32:	d824      	bhi.n	8004b7e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	3b02      	subs	r3, #2
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d81b      	bhi.n	8004b76 <HAL_ADC_ConfigChannel+0x86>
 8004b3e:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <HAL_ADC_ConfigChannel+0x54>)
 8004b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b44:	08004b55 	.word	0x08004b55
 8004b48:	08004b5d 	.word	0x08004b5d
 8004b4c:	08004b65 	.word	0x08004b65
 8004b50:	08004b6d 	.word	0x08004b6d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	220c      	movs	r2, #12
 8004b58:	605a      	str	r2, [r3, #4]
          break;
 8004b5a:	e011      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2212      	movs	r2, #18
 8004b60:	605a      	str	r2, [r3, #4]
          break;
 8004b62:	e00d      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2218      	movs	r2, #24
 8004b68:	605a      	str	r2, [r3, #4]
          break;
 8004b6a:	e009      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b72:	605a      	str	r2, [r3, #4]
          break;
 8004b74:	e004      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2206      	movs	r2, #6
 8004b7a:	605a      	str	r2, [r3, #4]
          break;
 8004b7c:	e000      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004b7e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6818      	ldr	r0, [r3, #0]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	6859      	ldr	r1, [r3, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f7ff fd64 	bl	800465a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff fe3b 	bl	8004812 <LL_ADC_REG_IsConversionOngoing>
 8004b9c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff fe47 	bl	8004838 <LL_ADC_INJ_IsConversionOngoing>
 8004baa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004bae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f040 81a6 	bne.w	8004f04 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004bb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f040 81a1 	bne.w	8004f04 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	6819      	ldr	r1, [r3, #0]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f7ff fd6f 	bl	80046b2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	695a      	ldr	r2, [r3, #20]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	08db      	lsrs	r3, r3, #3
 8004be0:	f003 0303 	and.w	r3, r3, #3
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d00a      	beq.n	8004c0c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6818      	ldr	r0, [r3, #0]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	6919      	ldr	r1, [r3, #16]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c06:	f7ff fcd3 	bl	80045b0 <LL_ADC_SetOffset>
 8004c0a:	e17b      	b.n	8004f04 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2100      	movs	r1, #0
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff fcf0 	bl	80045f8 <LL_ADC_GetOffsetChannel>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10a      	bne.n	8004c38 <HAL_ADC_ConfigChannel+0x148>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2100      	movs	r1, #0
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff fce5 	bl	80045f8 <LL_ADC_GetOffsetChannel>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	0e9b      	lsrs	r3, r3, #26
 8004c32:	f003 021f 	and.w	r2, r3, #31
 8004c36:	e01e      	b.n	8004c76 <HAL_ADC_ConfigChannel+0x186>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff fcda 	bl	80045f8 <LL_ADC_GetOffsetChannel>
 8004c44:	4603      	mov	r3, r0
 8004c46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c4e:	fa93 f3a3 	rbit	r3, r3
 8004c52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004c5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8004c66:	2320      	movs	r3, #32
 8004c68:	e004      	b.n	8004c74 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004c6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c6e:	fab3 f383 	clz	r3, r3
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d105      	bne.n	8004c8e <HAL_ADC_ConfigChannel+0x19e>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	0e9b      	lsrs	r3, r3, #26
 8004c88:	f003 031f 	and.w	r3, r3, #31
 8004c8c:	e018      	b.n	8004cc0 <HAL_ADC_ConfigChannel+0x1d0>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c9a:	fa93 f3a3 	rbit	r3, r3
 8004c9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ca6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004caa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004cb2:	2320      	movs	r3, #32
 8004cb4:	e004      	b.n	8004cc0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004cb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004cba:	fab3 f383 	clz	r3, r3
 8004cbe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d106      	bne.n	8004cd2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2100      	movs	r1, #0
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff fca9 	bl	8004624 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff fc8d 	bl	80045f8 <LL_ADC_GetOffsetChannel>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <HAL_ADC_ConfigChannel+0x20e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2101      	movs	r1, #1
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff fc82 	bl	80045f8 <LL_ADC_GetOffsetChannel>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	0e9b      	lsrs	r3, r3, #26
 8004cf8:	f003 021f 	and.w	r2, r3, #31
 8004cfc:	e01e      	b.n	8004d3c <HAL_ADC_ConfigChannel+0x24c>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2101      	movs	r1, #1
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff fc77 	bl	80045f8 <LL_ADC_GetOffsetChannel>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004d14:	fa93 f3a3 	rbit	r3, r3
 8004d18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004d1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004d24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004d2c:	2320      	movs	r3, #32
 8004d2e:	e004      	b.n	8004d3a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004d30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d34:	fab3 f383 	clz	r3, r3
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d105      	bne.n	8004d54 <HAL_ADC_ConfigChannel+0x264>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	0e9b      	lsrs	r3, r3, #26
 8004d4e:	f003 031f 	and.w	r3, r3, #31
 8004d52:	e018      	b.n	8004d86 <HAL_ADC_ConfigChannel+0x296>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d60:	fa93 f3a3 	rbit	r3, r3
 8004d64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004d68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004d70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004d78:	2320      	movs	r3, #32
 8004d7a:	e004      	b.n	8004d86 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004d7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d80:	fab3 f383 	clz	r3, r3
 8004d84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d106      	bne.n	8004d98 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	2101      	movs	r1, #1
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7ff fc46 	bl	8004624 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2102      	movs	r1, #2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff fc2a 	bl	80045f8 <LL_ADC_GetOffsetChannel>
 8004da4:	4603      	mov	r3, r0
 8004da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10a      	bne.n	8004dc4 <HAL_ADC_ConfigChannel+0x2d4>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2102      	movs	r1, #2
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff fc1f 	bl	80045f8 <LL_ADC_GetOffsetChannel>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	0e9b      	lsrs	r3, r3, #26
 8004dbe:	f003 021f 	and.w	r2, r3, #31
 8004dc2:	e01e      	b.n	8004e02 <HAL_ADC_ConfigChannel+0x312>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2102      	movs	r1, #2
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7ff fc14 	bl	80045f8 <LL_ADC_GetOffsetChannel>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dda:	fa93 f3a3 	rbit	r3, r3
 8004dde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004de2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004de6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004dea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004df2:	2320      	movs	r3, #32
 8004df4:	e004      	b.n	8004e00 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004df6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004dfa:	fab3 f383 	clz	r3, r3
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d105      	bne.n	8004e1a <HAL_ADC_ConfigChannel+0x32a>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	0e9b      	lsrs	r3, r3, #26
 8004e14:	f003 031f 	and.w	r3, r3, #31
 8004e18:	e016      	b.n	8004e48 <HAL_ADC_ConfigChannel+0x358>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e26:	fa93 f3a3 	rbit	r3, r3
 8004e2a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004e2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004e32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004e3a:	2320      	movs	r3, #32
 8004e3c:	e004      	b.n	8004e48 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004e3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e42:	fab3 f383 	clz	r3, r3
 8004e46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d106      	bne.n	8004e5a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2200      	movs	r2, #0
 8004e52:	2102      	movs	r1, #2
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fbe5 	bl	8004624 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2103      	movs	r1, #3
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff fbc9 	bl	80045f8 <LL_ADC_GetOffsetChannel>
 8004e66:	4603      	mov	r3, r0
 8004e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10a      	bne.n	8004e86 <HAL_ADC_ConfigChannel+0x396>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2103      	movs	r1, #3
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff fbbe 	bl	80045f8 <LL_ADC_GetOffsetChannel>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	0e9b      	lsrs	r3, r3, #26
 8004e80:	f003 021f 	and.w	r2, r3, #31
 8004e84:	e017      	b.n	8004eb6 <HAL_ADC_ConfigChannel+0x3c6>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2103      	movs	r1, #3
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff fbb3 	bl	80045f8 <LL_ADC_GetOffsetChannel>
 8004e92:	4603      	mov	r3, r0
 8004e94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e98:	fa93 f3a3 	rbit	r3, r3
 8004e9c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ea0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004ea2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004ea8:	2320      	movs	r3, #32
 8004eaa:	e003      	b.n	8004eb4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004eac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eae:	fab3 f383 	clz	r3, r3
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d105      	bne.n	8004ece <HAL_ADC_ConfigChannel+0x3de>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	0e9b      	lsrs	r3, r3, #26
 8004ec8:	f003 031f 	and.w	r3, r3, #31
 8004ecc:	e011      	b.n	8004ef2 <HAL_ADC_ConfigChannel+0x402>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ed6:	fa93 f3a3 	rbit	r3, r3
 8004eda:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ede:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004ee6:	2320      	movs	r3, #32
 8004ee8:	e003      	b.n	8004ef2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eec:	fab3 f383 	clz	r3, r3
 8004ef0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d106      	bne.n	8004f04 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2200      	movs	r2, #0
 8004efc:	2103      	movs	r1, #3
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff fb90 	bl	8004624 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff fc6f 	bl	80047ec <LL_ADC_IsEnabled>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f040 813f 	bne.w	8005194 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	6819      	ldr	r1, [r3, #0]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	461a      	mov	r2, r3
 8004f24:	f7ff fbf0 	bl	8004708 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	4a8e      	ldr	r2, [pc, #568]	; (8005168 <HAL_ADC_ConfigChannel+0x678>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	f040 8130 	bne.w	8005194 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10b      	bne.n	8004f5c <HAL_ADC_ConfigChannel+0x46c>
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	0e9b      	lsrs	r3, r3, #26
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	f003 031f 	and.w	r3, r3, #31
 8004f50:	2b09      	cmp	r3, #9
 8004f52:	bf94      	ite	ls
 8004f54:	2301      	movls	r3, #1
 8004f56:	2300      	movhi	r3, #0
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	e019      	b.n	8004f90 <HAL_ADC_ConfigChannel+0x4a0>
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f64:	fa93 f3a3 	rbit	r3, r3
 8004f68:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004f6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f6c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004f74:	2320      	movs	r3, #32
 8004f76:	e003      	b.n	8004f80 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004f78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f7a:	fab3 f383 	clz	r3, r3
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	3301      	adds	r3, #1
 8004f82:	f003 031f 	and.w	r3, r3, #31
 8004f86:	2b09      	cmp	r3, #9
 8004f88:	bf94      	ite	ls
 8004f8a:	2301      	movls	r3, #1
 8004f8c:	2300      	movhi	r3, #0
 8004f8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d079      	beq.n	8005088 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d107      	bne.n	8004fb0 <HAL_ADC_ConfigChannel+0x4c0>
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	0e9b      	lsrs	r3, r3, #26
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	069b      	lsls	r3, r3, #26
 8004faa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fae:	e015      	b.n	8004fdc <HAL_ADC_ConfigChannel+0x4ec>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fb8:	fa93 f3a3 	rbit	r3, r3
 8004fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fc0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004fc8:	2320      	movs	r3, #32
 8004fca:	e003      	b.n	8004fd4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fce:	fab3 f383 	clz	r3, r3
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	069b      	lsls	r3, r3, #26
 8004fd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d109      	bne.n	8004ffc <HAL_ADC_ConfigChannel+0x50c>
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	0e9b      	lsrs	r3, r3, #26
 8004fee:	3301      	adds	r3, #1
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffa:	e017      	b.n	800502c <HAL_ADC_ConfigChannel+0x53c>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005004:	fa93 f3a3 	rbit	r3, r3
 8005008:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800500a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800500c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800500e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8005014:	2320      	movs	r3, #32
 8005016:	e003      	b.n	8005020 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8005018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800501a:	fab3 f383 	clz	r3, r3
 800501e:	b2db      	uxtb	r3, r3
 8005020:	3301      	adds	r3, #1
 8005022:	f003 031f 	and.w	r3, r3, #31
 8005026:	2101      	movs	r1, #1
 8005028:	fa01 f303 	lsl.w	r3, r1, r3
 800502c:	ea42 0103 	orr.w	r1, r2, r3
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10a      	bne.n	8005052 <HAL_ADC_ConfigChannel+0x562>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	0e9b      	lsrs	r3, r3, #26
 8005042:	3301      	adds	r3, #1
 8005044:	f003 021f 	and.w	r2, r3, #31
 8005048:	4613      	mov	r3, r2
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	4413      	add	r3, r2
 800504e:	051b      	lsls	r3, r3, #20
 8005050:	e018      	b.n	8005084 <HAL_ADC_ConfigChannel+0x594>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505a:	fa93 f3a3 	rbit	r3, r3
 800505e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005062:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800506a:	2320      	movs	r3, #32
 800506c:	e003      	b.n	8005076 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800506e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005070:	fab3 f383 	clz	r3, r3
 8005074:	b2db      	uxtb	r3, r3
 8005076:	3301      	adds	r3, #1
 8005078:	f003 021f 	and.w	r2, r3, #31
 800507c:	4613      	mov	r3, r2
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	4413      	add	r3, r2
 8005082:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005084:	430b      	orrs	r3, r1
 8005086:	e080      	b.n	800518a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005090:	2b00      	cmp	r3, #0
 8005092:	d107      	bne.n	80050a4 <HAL_ADC_ConfigChannel+0x5b4>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	0e9b      	lsrs	r3, r3, #26
 800509a:	3301      	adds	r3, #1
 800509c:	069b      	lsls	r3, r3, #26
 800509e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050a2:	e015      	b.n	80050d0 <HAL_ADC_ConfigChannel+0x5e0>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ac:	fa93 f3a3 	rbit	r3, r3
 80050b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80050b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80050bc:	2320      	movs	r3, #32
 80050be:	e003      	b.n	80050c8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80050c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c2:	fab3 f383 	clz	r3, r3
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	3301      	adds	r3, #1
 80050ca:	069b      	lsls	r3, r3, #26
 80050cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d109      	bne.n	80050f0 <HAL_ADC_ConfigChannel+0x600>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	0e9b      	lsrs	r3, r3, #26
 80050e2:	3301      	adds	r3, #1
 80050e4:	f003 031f 	and.w	r3, r3, #31
 80050e8:	2101      	movs	r1, #1
 80050ea:	fa01 f303 	lsl.w	r3, r1, r3
 80050ee:	e017      	b.n	8005120 <HAL_ADC_ConfigChannel+0x630>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	fa93 f3a3 	rbit	r3, r3
 80050fc:	61fb      	str	r3, [r7, #28]
  return result;
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8005108:	2320      	movs	r3, #32
 800510a:	e003      	b.n	8005114 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	fab3 f383 	clz	r3, r3
 8005112:	b2db      	uxtb	r3, r3
 8005114:	3301      	adds	r3, #1
 8005116:	f003 031f 	and.w	r3, r3, #31
 800511a:	2101      	movs	r1, #1
 800511c:	fa01 f303 	lsl.w	r3, r1, r3
 8005120:	ea42 0103 	orr.w	r1, r2, r3
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10d      	bne.n	800514c <HAL_ADC_ConfigChannel+0x65c>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	0e9b      	lsrs	r3, r3, #26
 8005136:	3301      	adds	r3, #1
 8005138:	f003 021f 	and.w	r2, r3, #31
 800513c:	4613      	mov	r3, r2
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	4413      	add	r3, r2
 8005142:	3b1e      	subs	r3, #30
 8005144:	051b      	lsls	r3, r3, #20
 8005146:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800514a:	e01d      	b.n	8005188 <HAL_ADC_ConfigChannel+0x698>
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	fa93 f3a3 	rbit	r3, r3
 8005158:	613b      	str	r3, [r7, #16]
  return result;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d103      	bne.n	800516c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8005164:	2320      	movs	r3, #32
 8005166:	e005      	b.n	8005174 <HAL_ADC_ConfigChannel+0x684>
 8005168:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	fab3 f383 	clz	r3, r3
 8005172:	b2db      	uxtb	r3, r3
 8005174:	3301      	adds	r3, #1
 8005176:	f003 021f 	and.w	r2, r3, #31
 800517a:	4613      	mov	r3, r2
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	4413      	add	r3, r2
 8005180:	3b1e      	subs	r3, #30
 8005182:	051b      	lsls	r3, r3, #20
 8005184:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005188:	430b      	orrs	r3, r1
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	6892      	ldr	r2, [r2, #8]
 800518e:	4619      	mov	r1, r3
 8005190:	f7ff fa8f 	bl	80046b2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	4b3d      	ldr	r3, [pc, #244]	; (8005290 <HAL_ADC_ConfigChannel+0x7a0>)
 800519a:	4013      	ands	r3, r2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d06c      	beq.n	800527a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051a0:	483c      	ldr	r0, [pc, #240]	; (8005294 <HAL_ADC_ConfigChannel+0x7a4>)
 80051a2:	f7ff f9f7 	bl	8004594 <LL_ADC_GetCommonPathInternalCh>
 80051a6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a3a      	ldr	r2, [pc, #232]	; (8005298 <HAL_ADC_ConfigChannel+0x7a8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d127      	bne.n	8005204 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80051b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d121      	bne.n	8005204 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a35      	ldr	r2, [pc, #212]	; (800529c <HAL_ADC_ConfigChannel+0x7ac>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d157      	bne.n	800527a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051d2:	4619      	mov	r1, r3
 80051d4:	482f      	ldr	r0, [pc, #188]	; (8005294 <HAL_ADC_ConfigChannel+0x7a4>)
 80051d6:	f7ff f9ca 	bl	800456e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80051da:	4b31      	ldr	r3, [pc, #196]	; (80052a0 <HAL_ADC_ConfigChannel+0x7b0>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	099b      	lsrs	r3, r3, #6
 80051e0:	4a30      	ldr	r2, [pc, #192]	; (80052a4 <HAL_ADC_ConfigChannel+0x7b4>)
 80051e2:	fba2 2303 	umull	r2, r3, r2, r3
 80051e6:	099b      	lsrs	r3, r3, #6
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	4613      	mov	r3, r2
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80051f4:	e002      	b.n	80051fc <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f9      	bne.n	80051f6 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005202:	e03a      	b.n	800527a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a27      	ldr	r2, [pc, #156]	; (80052a8 <HAL_ADC_ConfigChannel+0x7b8>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d113      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x746>
 800520e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10d      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a1f      	ldr	r2, [pc, #124]	; (800529c <HAL_ADC_ConfigChannel+0x7ac>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d12a      	bne.n	800527a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005224:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005228:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800522c:	4619      	mov	r1, r3
 800522e:	4819      	ldr	r0, [pc, #100]	; (8005294 <HAL_ADC_ConfigChannel+0x7a4>)
 8005230:	f7ff f99d 	bl	800456e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005234:	e021      	b.n	800527a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a1c      	ldr	r2, [pc, #112]	; (80052ac <HAL_ADC_ConfigChannel+0x7bc>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d11c      	bne.n	800527a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005240:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d116      	bne.n	800527a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a12      	ldr	r2, [pc, #72]	; (800529c <HAL_ADC_ConfigChannel+0x7ac>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d111      	bne.n	800527a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005256:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800525a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800525e:	4619      	mov	r1, r3
 8005260:	480c      	ldr	r0, [pc, #48]	; (8005294 <HAL_ADC_ConfigChannel+0x7a4>)
 8005262:	f7ff f984 	bl	800456e <LL_ADC_SetCommonPathInternalCh>
 8005266:	e008      	b.n	800527a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526c:	f043 0220 	orr.w	r2, r3, #32
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005282:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005286:	4618      	mov	r0, r3
 8005288:	37d8      	adds	r7, #216	; 0xd8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	80080000 	.word	0x80080000
 8005294:	50040300 	.word	0x50040300
 8005298:	c7520000 	.word	0xc7520000
 800529c:	50040000 	.word	0x50040000
 80052a0:	20000000 	.word	0x20000000
 80052a4:	053e2d63 	.word	0x053e2d63
 80052a8:	cb840000 	.word	0xcb840000
 80052ac:	80000001 	.word	0x80000001

080052b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052c0:	4b0c      	ldr	r3, [pc, #48]	; (80052f4 <__NVIC_SetPriorityGrouping+0x44>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80052cc:	4013      	ands	r3, r2
 80052ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80052dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052e2:	4a04      	ldr	r2, [pc, #16]	; (80052f4 <__NVIC_SetPriorityGrouping+0x44>)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	60d3      	str	r3, [r2, #12]
}
 80052e8:	bf00      	nop
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	e000ed00 	.word	0xe000ed00

080052f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052fc:	4b04      	ldr	r3, [pc, #16]	; (8005310 <__NVIC_GetPriorityGrouping+0x18>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	0a1b      	lsrs	r3, r3, #8
 8005302:	f003 0307 	and.w	r3, r3, #7
}
 8005306:	4618      	mov	r0, r3
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	e000ed00 	.word	0xe000ed00

08005314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	4603      	mov	r3, r0
 800531c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800531e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005322:	2b00      	cmp	r3, #0
 8005324:	db0b      	blt.n	800533e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	f003 021f 	and.w	r2, r3, #31
 800532c:	4907      	ldr	r1, [pc, #28]	; (800534c <__NVIC_EnableIRQ+0x38>)
 800532e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005332:	095b      	lsrs	r3, r3, #5
 8005334:	2001      	movs	r0, #1
 8005336:	fa00 f202 	lsl.w	r2, r0, r2
 800533a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	e000e100 	.word	0xe000e100

08005350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	4603      	mov	r3, r0
 8005358:	6039      	str	r1, [r7, #0]
 800535a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800535c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005360:	2b00      	cmp	r3, #0
 8005362:	db0a      	blt.n	800537a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	b2da      	uxtb	r2, r3
 8005368:	490c      	ldr	r1, [pc, #48]	; (800539c <__NVIC_SetPriority+0x4c>)
 800536a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800536e:	0112      	lsls	r2, r2, #4
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	440b      	add	r3, r1
 8005374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005378:	e00a      	b.n	8005390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	b2da      	uxtb	r2, r3
 800537e:	4908      	ldr	r1, [pc, #32]	; (80053a0 <__NVIC_SetPriority+0x50>)
 8005380:	79fb      	ldrb	r3, [r7, #7]
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	3b04      	subs	r3, #4
 8005388:	0112      	lsls	r2, r2, #4
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	440b      	add	r3, r1
 800538e:	761a      	strb	r2, [r3, #24]
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	e000e100 	.word	0xe000e100
 80053a0:	e000ed00 	.word	0xe000ed00

080053a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b089      	sub	sp, #36	; 0x24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f1c3 0307 	rsb	r3, r3, #7
 80053be:	2b04      	cmp	r3, #4
 80053c0:	bf28      	it	cs
 80053c2:	2304      	movcs	r3, #4
 80053c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	3304      	adds	r3, #4
 80053ca:	2b06      	cmp	r3, #6
 80053cc:	d902      	bls.n	80053d4 <NVIC_EncodePriority+0x30>
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	3b03      	subs	r3, #3
 80053d2:	e000      	b.n	80053d6 <NVIC_EncodePriority+0x32>
 80053d4:	2300      	movs	r3, #0
 80053d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053d8:	f04f 32ff 	mov.w	r2, #4294967295
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	fa02 f303 	lsl.w	r3, r2, r3
 80053e2:	43da      	mvns	r2, r3
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	401a      	ands	r2, r3
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053ec:	f04f 31ff 	mov.w	r1, #4294967295
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	fa01 f303 	lsl.w	r3, r1, r3
 80053f6:	43d9      	mvns	r1, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053fc:	4313      	orrs	r3, r2
         );
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3724      	adds	r7, #36	; 0x24
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
	...

0800540c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3b01      	subs	r3, #1
 8005418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800541c:	d301      	bcc.n	8005422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800541e:	2301      	movs	r3, #1
 8005420:	e00f      	b.n	8005442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005422:	4a0a      	ldr	r2, [pc, #40]	; (800544c <SysTick_Config+0x40>)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3b01      	subs	r3, #1
 8005428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800542a:	210f      	movs	r1, #15
 800542c:	f04f 30ff 	mov.w	r0, #4294967295
 8005430:	f7ff ff8e 	bl	8005350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005434:	4b05      	ldr	r3, [pc, #20]	; (800544c <SysTick_Config+0x40>)
 8005436:	2200      	movs	r2, #0
 8005438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800543a:	4b04      	ldr	r3, [pc, #16]	; (800544c <SysTick_Config+0x40>)
 800543c:	2207      	movs	r2, #7
 800543e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	e000e010 	.word	0xe000e010

08005450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7ff ff29 	bl	80052b0 <__NVIC_SetPriorityGrouping>
}
 800545e:	bf00      	nop
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b086      	sub	sp, #24
 800546a:	af00      	add	r7, sp, #0
 800546c:	4603      	mov	r3, r0
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	607a      	str	r2, [r7, #4]
 8005472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005474:	2300      	movs	r3, #0
 8005476:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005478:	f7ff ff3e 	bl	80052f8 <__NVIC_GetPriorityGrouping>
 800547c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	6978      	ldr	r0, [r7, #20]
 8005484:	f7ff ff8e 	bl	80053a4 <NVIC_EncodePriority>
 8005488:	4602      	mov	r2, r0
 800548a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800548e:	4611      	mov	r1, r2
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff ff5d 	bl	8005350 <__NVIC_SetPriority>
}
 8005496:	bf00      	nop
 8005498:	3718      	adds	r7, #24
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b082      	sub	sp, #8
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	4603      	mov	r3, r0
 80054a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7ff ff31 	bl	8005314 <__NVIC_EnableIRQ>
}
 80054b2:	bf00      	nop
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b082      	sub	sp, #8
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7ff ffa2 	bl	800540c <SysTick_Config>
 80054c8:	4603      	mov	r3, r0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
	...

080054d4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e054      	b.n	8005590 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	7f5b      	ldrb	r3, [r3, #29]
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d105      	bne.n	80054fc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7fe fa7a 	bl	80039f0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	791b      	ldrb	r3, [r3, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10c      	bne.n	8005524 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a22      	ldr	r2, [pc, #136]	; (8005598 <HAL_CRC_Init+0xc4>)
 8005510:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 0218 	bic.w	r2, r2, #24
 8005520:	609a      	str	r2, [r3, #8]
 8005522:	e00c      	b.n	800553e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6899      	ldr	r1, [r3, #8]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	461a      	mov	r2, r3
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f834 	bl	800559c <HAL_CRCEx_Polynomial_Set>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e028      	b.n	8005590 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	795b      	ldrb	r3, [r3, #5]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d105      	bne.n	8005552 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f04f 32ff 	mov.w	r2, #4294967295
 800554e:	611a      	str	r2, [r3, #16]
 8005550:	e004      	b.n	800555c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6912      	ldr	r2, [r2, #16]
 800555a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695a      	ldr	r2, [r3, #20]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699a      	ldr	r2, [r3, #24]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	04c11db7 	.word	0x04c11db7

0800559c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055a8:	2300      	movs	r3, #0
 80055aa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80055ac:	231f      	movs	r3, #31
 80055ae:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80055b0:	bf00      	nop
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1e5a      	subs	r2, r3, #1
 80055b6:	613a      	str	r2, [r7, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d009      	beq.n	80055d0 <HAL_CRCEx_Polynomial_Set+0x34>
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f003 031f 	and.w	r3, r3, #31
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	fa22 f303 	lsr.w	r3, r2, r3
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0f0      	beq.n	80055b2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b18      	cmp	r3, #24
 80055d4:	d846      	bhi.n	8005664 <HAL_CRCEx_Polynomial_Set+0xc8>
 80055d6:	a201      	add	r2, pc, #4	; (adr r2, 80055dc <HAL_CRCEx_Polynomial_Set+0x40>)
 80055d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055dc:	0800566b 	.word	0x0800566b
 80055e0:	08005665 	.word	0x08005665
 80055e4:	08005665 	.word	0x08005665
 80055e8:	08005665 	.word	0x08005665
 80055ec:	08005665 	.word	0x08005665
 80055f0:	08005665 	.word	0x08005665
 80055f4:	08005665 	.word	0x08005665
 80055f8:	08005665 	.word	0x08005665
 80055fc:	08005659 	.word	0x08005659
 8005600:	08005665 	.word	0x08005665
 8005604:	08005665 	.word	0x08005665
 8005608:	08005665 	.word	0x08005665
 800560c:	08005665 	.word	0x08005665
 8005610:	08005665 	.word	0x08005665
 8005614:	08005665 	.word	0x08005665
 8005618:	08005665 	.word	0x08005665
 800561c:	0800564d 	.word	0x0800564d
 8005620:	08005665 	.word	0x08005665
 8005624:	08005665 	.word	0x08005665
 8005628:	08005665 	.word	0x08005665
 800562c:	08005665 	.word	0x08005665
 8005630:	08005665 	.word	0x08005665
 8005634:	08005665 	.word	0x08005665
 8005638:	08005665 	.word	0x08005665
 800563c:	08005641 	.word	0x08005641
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	2b06      	cmp	r3, #6
 8005644:	d913      	bls.n	800566e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800564a:	e010      	b.n	800566e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	2b07      	cmp	r3, #7
 8005650:	d90f      	bls.n	8005672 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005656:	e00c      	b.n	8005672 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2b0f      	cmp	r3, #15
 800565c:	d90b      	bls.n	8005676 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005662:	e008      	b.n	8005676 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	75fb      	strb	r3, [r7, #23]
      break;
 8005668:	e006      	b.n	8005678 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800566a:	bf00      	nop
 800566c:	e004      	b.n	8005678 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800566e:	bf00      	nop
 8005670:	e002      	b.n	8005678 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005672:	bf00      	nop
 8005674:	e000      	b.n	8005678 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005676:	bf00      	nop
  }
  if (status == HAL_OK)
 8005678:	7dfb      	ldrb	r3, [r7, #23]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10d      	bne.n	800569a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f023 0118 	bic.w	r1, r3, #24
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	430a      	orrs	r2, r1
 8005698:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800569a:	7dfb      	ldrb	r3, [r7, #23]
}
 800569c:	4618      	mov	r0, r3
 800569e:	371c      	adds	r7, #28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e014      	b.n	80056e4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	791b      	ldrb	r3, [r3, #4]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d105      	bne.n	80056d0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7fe f9ec 	bl	8003aa8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	795b      	ldrb	r3, [r3, #5]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d101      	bne.n	8005708 <HAL_DAC_ConfigChannel+0x1c>
 8005704:	2302      	movs	r3, #2
 8005706:	e107      	b.n	8005918 <HAL_DAC_ConfigChannel+0x22c>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2201      	movs	r2, #1
 800570c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2202      	movs	r2, #2
 8005712:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b04      	cmp	r3, #4
 800571a:	d174      	bne.n	8005806 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800571c:	f7fe fee4 	bl	80044e8 <HAL_GetTick>
 8005720:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d134      	bne.n	8005792 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005728:	e011      	b.n	800574e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800572a:	f7fe fedd 	bl	80044e8 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b01      	cmp	r3, #1
 8005736:	d90a      	bls.n	800574e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f043 0208 	orr.w	r2, r3, #8
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2203      	movs	r2, #3
 8005748:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e0e4      	b.n	8005918 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e6      	bne.n	800572a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800575c:	2001      	movs	r0, #1
 800575e:	f7fe fecf 	bl	8004500 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	6992      	ldr	r2, [r2, #24]
 800576a:	641a      	str	r2, [r3, #64]	; 0x40
 800576c:	e01e      	b.n	80057ac <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800576e:	f7fe febb 	bl	80044e8 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b01      	cmp	r3, #1
 800577a:	d90a      	bls.n	8005792 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f043 0208 	orr.w	r2, r3, #8
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2203      	movs	r2, #3
 800578c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e0c2      	b.n	8005918 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005798:	2b00      	cmp	r3, #0
 800579a:	dbe8      	blt.n	800576e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800579c:	2001      	movs	r0, #1
 800579e:	f7fe feaf 	bl	8004500 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	6992      	ldr	r2, [r2, #24]
 80057aa:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80057bc:	fa01 f303 	lsl.w	r3, r1, r3
 80057c0:	43db      	mvns	r3, r3
 80057c2:	ea02 0103 	and.w	r1, r2, r3
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	69da      	ldr	r2, [r3, #28]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f003 0310 	and.w	r3, r3, #16
 80057d0:	409a      	lsls	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f003 0310 	and.w	r3, r3, #16
 80057e6:	21ff      	movs	r1, #255	; 0xff
 80057e8:	fa01 f303 	lsl.w	r3, r1, r3
 80057ec:	43db      	mvns	r3, r3
 80057ee:	ea02 0103 	and.w	r1, r2, r3
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	6a1a      	ldr	r2, [r3, #32]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f003 0310 	and.w	r3, r3, #16
 80057fc:	409a      	lsls	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d11d      	bne.n	800584a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005814:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f003 0310 	and.w	r3, r3, #16
 800581c:	221f      	movs	r2, #31
 800581e:	fa02 f303 	lsl.w	r3, r2, r3
 8005822:	43db      	mvns	r3, r3
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	4013      	ands	r3, r2
 8005828:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f003 0310 	and.w	r3, r3, #16
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	4313      	orrs	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005850:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f003 0310 	and.w	r3, r3, #16
 8005858:	2207      	movs	r2, #7
 800585a:	fa02 f303 	lsl.w	r3, r2, r3
 800585e:	43db      	mvns	r3, r3
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	4013      	ands	r3, r2
 8005864:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	431a      	orrs	r2, r3
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	4313      	orrs	r3, r2
 8005876:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f003 0310 	and.w	r3, r3, #16
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	fa02 f303 	lsl.w	r3, r2, r3
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	4313      	orrs	r3, r2
 8005888:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6819      	ldr	r1, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f003 0310 	and.w	r3, r3, #16
 800589e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80058a2:	fa02 f303 	lsl.w	r3, r2, r3
 80058a6:	43da      	mvns	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	400a      	ands	r2, r1
 80058ae:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f003 0310 	and.w	r3, r3, #16
 80058be:	f640 72fc 	movw	r2, #4092	; 0xffc
 80058c2:	fa02 f303 	lsl.w	r3, r2, r3
 80058c6:	43db      	mvns	r3, r3
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	4013      	ands	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f003 0310 	and.w	r3, r3, #16
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6819      	ldr	r1, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f003 0310 	and.w	r3, r3, #16
 80058fa:	22c0      	movs	r2, #192	; 0xc0
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	43da      	mvns	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	400a      	ands	r2, r1
 8005908:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2201      	movs	r2, #1
 800590e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3720      	adds	r7, #32
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e098      	b.n	8005a64 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	4b4d      	ldr	r3, [pc, #308]	; (8005a70 <HAL_DMA_Init+0x150>)
 800593a:	429a      	cmp	r2, r3
 800593c:	d80f      	bhi.n	800595e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	461a      	mov	r2, r3
 8005944:	4b4b      	ldr	r3, [pc, #300]	; (8005a74 <HAL_DMA_Init+0x154>)
 8005946:	4413      	add	r3, r2
 8005948:	4a4b      	ldr	r2, [pc, #300]	; (8005a78 <HAL_DMA_Init+0x158>)
 800594a:	fba2 2303 	umull	r2, r3, r2, r3
 800594e:	091b      	lsrs	r3, r3, #4
 8005950:	009a      	lsls	r2, r3, #2
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a48      	ldr	r2, [pc, #288]	; (8005a7c <HAL_DMA_Init+0x15c>)
 800595a:	641a      	str	r2, [r3, #64]	; 0x40
 800595c:	e00e      	b.n	800597c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	461a      	mov	r2, r3
 8005964:	4b46      	ldr	r3, [pc, #280]	; (8005a80 <HAL_DMA_Init+0x160>)
 8005966:	4413      	add	r3, r2
 8005968:	4a43      	ldr	r2, [pc, #268]	; (8005a78 <HAL_DMA_Init+0x158>)
 800596a:	fba2 2303 	umull	r2, r3, r2, r3
 800596e:	091b      	lsrs	r3, r3, #4
 8005970:	009a      	lsls	r2, r3, #2
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a42      	ldr	r2, [pc, #264]	; (8005a84 <HAL_DMA_Init+0x164>)
 800597a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005996:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80059a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059d6:	d039      	beq.n	8005a4c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	4a27      	ldr	r2, [pc, #156]	; (8005a7c <HAL_DMA_Init+0x15c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d11a      	bne.n	8005a18 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80059e2:	4b29      	ldr	r3, [pc, #164]	; (8005a88 <HAL_DMA_Init+0x168>)
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ea:	f003 031c 	and.w	r3, r3, #28
 80059ee:	210f      	movs	r1, #15
 80059f0:	fa01 f303 	lsl.w	r3, r1, r3
 80059f4:	43db      	mvns	r3, r3
 80059f6:	4924      	ldr	r1, [pc, #144]	; (8005a88 <HAL_DMA_Init+0x168>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80059fc:	4b22      	ldr	r3, [pc, #136]	; (8005a88 <HAL_DMA_Init+0x168>)
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6859      	ldr	r1, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a08:	f003 031c 	and.w	r3, r3, #28
 8005a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a10:	491d      	ldr	r1, [pc, #116]	; (8005a88 <HAL_DMA_Init+0x168>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	600b      	str	r3, [r1, #0]
 8005a16:	e019      	b.n	8005a4c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005a18:	4b1c      	ldr	r3, [pc, #112]	; (8005a8c <HAL_DMA_Init+0x16c>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a20:	f003 031c 	and.w	r3, r3, #28
 8005a24:	210f      	movs	r1, #15
 8005a26:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2a:	43db      	mvns	r3, r3
 8005a2c:	4917      	ldr	r1, [pc, #92]	; (8005a8c <HAL_DMA_Init+0x16c>)
 8005a2e:	4013      	ands	r3, r2
 8005a30:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005a32:	4b16      	ldr	r3, [pc, #88]	; (8005a8c <HAL_DMA_Init+0x16c>)
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6859      	ldr	r1, [r3, #4]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3e:	f003 031c 	and.w	r3, r3, #28
 8005a42:	fa01 f303 	lsl.w	r3, r1, r3
 8005a46:	4911      	ldr	r1, [pc, #68]	; (8005a8c <HAL_DMA_Init+0x16c>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	40020407 	.word	0x40020407
 8005a74:	bffdfff8 	.word	0xbffdfff8
 8005a78:	cccccccd 	.word	0xcccccccd
 8005a7c:	40020000 	.word	0x40020000
 8005a80:	bffdfbf8 	.word	0xbffdfbf8
 8005a84:	40020400 	.word	0x40020400
 8005a88:	400200a8 	.word	0x400200a8
 8005a8c:	400204a8 	.word	0x400204a8

08005a90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aac:	f003 031c 	and.w	r3, r3, #28
 8005ab0:	2204      	movs	r2, #4
 8005ab2:	409a      	lsls	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d026      	beq.n	8005b0a <HAL_DMA_IRQHandler+0x7a>
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f003 0304 	and.w	r3, r3, #4
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d021      	beq.n	8005b0a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0320 	and.w	r3, r3, #32
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d107      	bne.n	8005ae4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0204 	bic.w	r2, r2, #4
 8005ae2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae8:	f003 021c 	and.w	r2, r3, #28
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af0:	2104      	movs	r1, #4
 8005af2:	fa01 f202 	lsl.w	r2, r1, r2
 8005af6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d071      	beq.n	8005be4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005b08:	e06c      	b.n	8005be4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0e:	f003 031c 	and.w	r3, r3, #28
 8005b12:	2202      	movs	r2, #2
 8005b14:	409a      	lsls	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d02e      	beq.n	8005b7c <HAL_DMA_IRQHandler+0xec>
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d029      	beq.n	8005b7c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0320 	and.w	r3, r3, #32
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10b      	bne.n	8005b4e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 020a 	bic.w	r2, r2, #10
 8005b44:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b52:	f003 021c 	and.w	r2, r3, #28
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	2102      	movs	r1, #2
 8005b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b60:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d038      	beq.n	8005be4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005b7a:	e033      	b.n	8005be4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b80:	f003 031c 	and.w	r3, r3, #28
 8005b84:	2208      	movs	r2, #8
 8005b86:	409a      	lsls	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d02a      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x156>
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d025      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 020e 	bic.w	r2, r2, #14
 8005ba8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bae:	f003 021c 	and.w	r2, r3, #28
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8005bbc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d004      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop
}
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005c02:	4b2f      	ldr	r3, [pc, #188]	; (8005cc0 <HAL_FLASH_Program+0xd0>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d101      	bne.n	8005c0e <HAL_FLASH_Program+0x1e>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	e053      	b.n	8005cb6 <HAL_FLASH_Program+0xc6>
 8005c0e:	4b2c      	ldr	r3, [pc, #176]	; (8005cc0 <HAL_FLASH_Program+0xd0>)
 8005c10:	2201      	movs	r2, #1
 8005c12:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005c14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005c18:	f000 f888 	bl	8005d2c <FLASH_WaitForLastOperation>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005c20:	7dfb      	ldrb	r3, [r7, #23]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d143      	bne.n	8005cae <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005c26:	4b26      	ldr	r3, [pc, #152]	; (8005cc0 <HAL_FLASH_Program+0xd0>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005c2c:	4b25      	ldr	r3, [pc, #148]	; (8005cc4 <HAL_FLASH_Program+0xd4>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d009      	beq.n	8005c4c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005c38:	4b22      	ldr	r3, [pc, #136]	; (8005cc4 <HAL_FLASH_Program+0xd4>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a21      	ldr	r2, [pc, #132]	; (8005cc4 <HAL_FLASH_Program+0xd4>)
 8005c3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c42:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005c44:	4b1e      	ldr	r3, [pc, #120]	; (8005cc0 <HAL_FLASH_Program+0xd0>)
 8005c46:	2202      	movs	r2, #2
 8005c48:	771a      	strb	r2, [r3, #28]
 8005c4a:	e002      	b.n	8005c52 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005c4c:	4b1c      	ldr	r3, [pc, #112]	; (8005cc0 <HAL_FLASH_Program+0xd0>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d107      	bne.n	8005c68 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c5c:	68b8      	ldr	r0, [r7, #8]
 8005c5e:	f000 f8bd 	bl	8005ddc <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8005c62:	2301      	movs	r3, #1
 8005c64:	613b      	str	r3, [r7, #16]
 8005c66:	e010      	b.n	8005c8a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d002      	beq.n	8005c74 <HAL_FLASH_Program+0x84>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d10a      	bne.n	8005c8a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	4619      	mov	r1, r3
 8005c78:	68b8      	ldr	r0, [r7, #8]
 8005c7a:	f000 f8d5 	bl	8005e28 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d102      	bne.n	8005c8a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8005c84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005c88:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005c8a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005c8e:	f000 f84d 	bl	8005d2c <FLASH_WaitForLastOperation>
 8005c92:	4603      	mov	r3, r0
 8005c94:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d006      	beq.n	8005caa <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8005c9c:	4b09      	ldr	r3, [pc, #36]	; (8005cc4 <HAL_FLASH_Program+0xd4>)
 8005c9e:	695a      	ldr	r2, [r3, #20]
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	43db      	mvns	r3, r3
 8005ca4:	4907      	ldr	r1, [pc, #28]	; (8005cc4 <HAL_FLASH_Program+0xd4>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005caa:	f000 f9cf 	bl	800604c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005cae:	4b04      	ldr	r3, [pc, #16]	; (8005cc0 <HAL_FLASH_Program+0xd0>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	701a      	strb	r2, [r3, #0]

  return status;
 8005cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	2000000c 	.word	0x2000000c
 8005cc4:	40022000 	.word	0x40022000

08005cc8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <HAL_FLASH_Unlock+0x38>)
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	da0b      	bge.n	8005cf2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005cda:	4b09      	ldr	r3, [pc, #36]	; (8005d00 <HAL_FLASH_Unlock+0x38>)
 8005cdc:	4a09      	ldr	r2, [pc, #36]	; (8005d04 <HAL_FLASH_Unlock+0x3c>)
 8005cde:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005ce0:	4b07      	ldr	r3, [pc, #28]	; (8005d00 <HAL_FLASH_Unlock+0x38>)
 8005ce2:	4a09      	ldr	r2, [pc, #36]	; (8005d08 <HAL_FLASH_Unlock+0x40>)
 8005ce4:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005ce6:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <HAL_FLASH_Unlock+0x38>)
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	da01      	bge.n	8005cf2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	40022000 	.word	0x40022000
 8005d04:	45670123 	.word	0x45670123
 8005d08:	cdef89ab 	.word	0xcdef89ab

08005d0c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005d10:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <HAL_FLASH_Lock+0x1c>)
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	4a04      	ldr	r2, [pc, #16]	; (8005d28 <HAL_FLASH_Lock+0x1c>)
 8005d16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d1a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	40022000 	.word	0x40022000

08005d2c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8005d34:	f7fe fbd8 	bl	80044e8 <HAL_GetTick>
 8005d38:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005d3a:	e00d      	b.n	8005d58 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d42:	d009      	beq.n	8005d58 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8005d44:	f7fe fbd0 	bl	80044e8 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d801      	bhi.n	8005d58 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e036      	b.n	8005dc6 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005d58:	4b1d      	ldr	r3, [pc, #116]	; (8005dd0 <FLASH_WaitForLastOperation+0xa4>)
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1eb      	bne.n	8005d3c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8005d64:	4b1a      	ldr	r3, [pc, #104]	; (8005dd0 <FLASH_WaitForLastOperation+0xa4>)
 8005d66:	691a      	ldr	r2, [r3, #16]
 8005d68:	4b1a      	ldr	r3, [pc, #104]	; (8005dd4 <FLASH_WaitForLastOperation+0xa8>)
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d01e      	beq.n	8005db2 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8005d74:	4b18      	ldr	r3, [pc, #96]	; (8005dd8 <FLASH_WaitForLastOperation+0xac>)
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	4a16      	ldr	r2, [pc, #88]	; (8005dd8 <FLASH_WaitForLastOperation+0xac>)
 8005d7e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d007      	beq.n	8005d9a <FLASH_WaitForLastOperation+0x6e>
 8005d8a:	4b11      	ldr	r3, [pc, #68]	; (8005dd0 <FLASH_WaitForLastOperation+0xa4>)
 8005d8c:	699a      	ldr	r2, [r3, #24]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005d94:	490e      	ldr	r1, [pc, #56]	; (8005dd0 <FLASH_WaitForLastOperation+0xa4>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	618b      	str	r3, [r1, #24]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d004      	beq.n	8005dae <FLASH_WaitForLastOperation+0x82>
 8005da4:	4a0a      	ldr	r2, [pc, #40]	; (8005dd0 <FLASH_WaitForLastOperation+0xa4>)
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005dac:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e009      	b.n	8005dc6 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005db2:	4b07      	ldr	r3, [pc, #28]	; (8005dd0 <FLASH_WaitForLastOperation+0xa4>)
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005dbe:	4b04      	ldr	r3, [pc, #16]	; (8005dd0 <FLASH_WaitForLastOperation+0xa4>)
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	40022000 	.word	0x40022000
 8005dd4:	0002c3fa 	.word	0x0002c3fa
 8005dd8:	2000000c 	.word	0x2000000c

08005ddc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005de8:	4b0e      	ldr	r3, [pc, #56]	; (8005e24 <FLASH_Program_DoubleWord+0x48>)
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	4a0d      	ldr	r2, [pc, #52]	; (8005e24 <FLASH_Program_DoubleWord+0x48>)
 8005dee:	f043 0301 	orr.w	r3, r3, #1
 8005df2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005dfa:	f3bf 8f6f 	isb	sy
}
 8005dfe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8005e00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e04:	f04f 0200 	mov.w	r2, #0
 8005e08:	f04f 0300 	mov.w	r3, #0
 8005e0c:	000a      	movs	r2, r1
 8005e0e:	2300      	movs	r3, #0
 8005e10:	68f9      	ldr	r1, [r7, #12]
 8005e12:	3104      	adds	r1, #4
 8005e14:	4613      	mov	r3, r2
 8005e16:	600b      	str	r3, [r1, #0]
}
 8005e18:	bf00      	nop
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	40022000 	.word	0x40022000

08005e28 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b089      	sub	sp, #36	; 0x24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005e32:	2340      	movs	r3, #64	; 0x40
 8005e34:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005e3e:	4b14      	ldr	r3, [pc, #80]	; (8005e90 <FLASH_Program_Fast+0x68>)
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	4a13      	ldr	r2, [pc, #76]	; (8005e90 <FLASH_Program_Fast+0x68>)
 8005e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e48:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e50:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8005e52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e54:	b672      	cpsid	i
}
 8005e56:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	3304      	adds	r3, #4
 8005e64:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	3304      	adds	r3, #4
 8005e6a:	617b      	str	r3, [r7, #20]
    row_index--;
 8005e6c:	7ffb      	ldrb	r3, [r7, #31]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8005e72:	7ffb      	ldrb	r3, [r7, #31]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1ef      	bne.n	8005e58 <FLASH_Program_Fast+0x30>
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	f383 8810 	msr	PRIMASK, r3
}
 8005e82:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8005e84:	bf00      	nop
 8005e86:	3724      	adds	r7, #36	; 0x24
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	40022000 	.word	0x40022000

08005e94 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005e9e:	4b48      	ldr	r3, [pc, #288]	; (8005fc0 <HAL_FLASHEx_Erase+0x12c>)
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HAL_FLASHEx_Erase+0x16>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e085      	b.n	8005fb6 <HAL_FLASHEx_Erase+0x122>
 8005eaa:	4b45      	ldr	r3, [pc, #276]	; (8005fc0 <HAL_FLASHEx_Erase+0x12c>)
 8005eac:	2201      	movs	r2, #1
 8005eae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005eb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005eb4:	f7ff ff3a 	bl	8005d2c <FLASH_WaitForLastOperation>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d175      	bne.n	8005fae <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005ec2:	4b3f      	ldr	r3, [pc, #252]	; (8005fc0 <HAL_FLASHEx_Erase+0x12c>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005ec8:	4b3e      	ldr	r3, [pc, #248]	; (8005fc4 <HAL_FLASHEx_Erase+0x130>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d013      	beq.n	8005efc <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005ed4:	4b3b      	ldr	r3, [pc, #236]	; (8005fc4 <HAL_FLASHEx_Erase+0x130>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d009      	beq.n	8005ef4 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005ee0:	4b38      	ldr	r3, [pc, #224]	; (8005fc4 <HAL_FLASHEx_Erase+0x130>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a37      	ldr	r2, [pc, #220]	; (8005fc4 <HAL_FLASHEx_Erase+0x130>)
 8005ee6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005eea:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005eec:	4b34      	ldr	r3, [pc, #208]	; (8005fc0 <HAL_FLASHEx_Erase+0x12c>)
 8005eee:	2203      	movs	r2, #3
 8005ef0:	771a      	strb	r2, [r3, #28]
 8005ef2:	e016      	b.n	8005f22 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005ef4:	4b32      	ldr	r3, [pc, #200]	; (8005fc0 <HAL_FLASHEx_Erase+0x12c>)
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	771a      	strb	r2, [r3, #28]
 8005efa:	e012      	b.n	8005f22 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005efc:	4b31      	ldr	r3, [pc, #196]	; (8005fc4 <HAL_FLASHEx_Erase+0x130>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d009      	beq.n	8005f1c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005f08:	4b2e      	ldr	r3, [pc, #184]	; (8005fc4 <HAL_FLASHEx_Erase+0x130>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a2d      	ldr	r2, [pc, #180]	; (8005fc4 <HAL_FLASHEx_Erase+0x130>)
 8005f0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f12:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005f14:	4b2a      	ldr	r3, [pc, #168]	; (8005fc0 <HAL_FLASHEx_Erase+0x12c>)
 8005f16:	2202      	movs	r2, #2
 8005f18:	771a      	strb	r2, [r3, #28]
 8005f1a:	e002      	b.n	8005f22 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005f1c:	4b28      	ldr	r3, [pc, #160]	; (8005fc0 <HAL_FLASHEx_Erase+0x12c>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d111      	bne.n	8005f4e <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 f84a 	bl	8005fc8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005f38:	f7ff fef8 	bl	8005d2c <FLASH_WaitForLastOperation>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8005f40:	4b20      	ldr	r3, [pc, #128]	; (8005fc4 <HAL_FLASHEx_Erase+0x130>)
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	4a1f      	ldr	r2, [pc, #124]	; (8005fc4 <HAL_FLASHEx_Erase+0x130>)
 8005f46:	f023 0304 	bic.w	r3, r3, #4
 8005f4a:	6153      	str	r3, [r2, #20]
 8005f4c:	e02d      	b.n	8005faa <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	f04f 32ff 	mov.w	r2, #4294967295
 8005f54:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	60bb      	str	r3, [r7, #8]
 8005f5c:	e01d      	b.n	8005f9a <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	4619      	mov	r1, r3
 8005f64:	68b8      	ldr	r0, [r7, #8]
 8005f66:	f000 f84d 	bl	8006004 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005f6e:	f7ff fedd 	bl	8005d2c <FLASH_WaitForLastOperation>
 8005f72:	4603      	mov	r3, r0
 8005f74:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005f76:	4b13      	ldr	r3, [pc, #76]	; (8005fc4 <HAL_FLASHEx_Erase+0x130>)
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	4a12      	ldr	r2, [pc, #72]	; (8005fc4 <HAL_FLASHEx_Erase+0x130>)
 8005f7c:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8005f80:	f023 0302 	bic.w	r3, r3, #2
 8005f84:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8005f86:	7bfb      	ldrb	r3, [r7, #15]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	601a      	str	r2, [r3, #0]
          break;
 8005f92:	e00a      	b.n	8005faa <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	3301      	adds	r3, #1
 8005f98:	60bb      	str	r3, [r7, #8]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	689a      	ldr	r2, [r3, #8]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d3d9      	bcc.n	8005f5e <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005faa:	f000 f84f 	bl	800604c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005fae:	4b04      	ldr	r3, [pc, #16]	; (8005fc0 <HAL_FLASHEx_Erase+0x12c>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	701a      	strb	r2, [r3, #0]

  return status;
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	2000000c 	.word	0x2000000c
 8005fc4:	40022000 	.word	0x40022000

08005fc8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d005      	beq.n	8005fe6 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8005fda:	4b09      	ldr	r3, [pc, #36]	; (8006000 <FLASH_MassErase+0x38>)
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	4a08      	ldr	r2, [pc, #32]	; (8006000 <FLASH_MassErase+0x38>)
 8005fe0:	f043 0304 	orr.w	r3, r3, #4
 8005fe4:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005fe6:	4b06      	ldr	r3, [pc, #24]	; (8006000 <FLASH_MassErase+0x38>)
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	4a05      	ldr	r2, [pc, #20]	; (8006000 <FLASH_MassErase+0x38>)
 8005fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ff0:	6153      	str	r3, [r2, #20]
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	40022000 	.word	0x40022000

08006004 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800600e:	4b0e      	ldr	r3, [pc, #56]	; (8006048 <FLASH_PageErase+0x44>)
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	00db      	lsls	r3, r3, #3
 800601a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800601e:	490a      	ldr	r1, [pc, #40]	; (8006048 <FLASH_PageErase+0x44>)
 8006020:	4313      	orrs	r3, r2
 8006022:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006024:	4b08      	ldr	r3, [pc, #32]	; (8006048 <FLASH_PageErase+0x44>)
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	4a07      	ldr	r2, [pc, #28]	; (8006048 <FLASH_PageErase+0x44>)
 800602a:	f043 0302 	orr.w	r3, r3, #2
 800602e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006030:	4b05      	ldr	r3, [pc, #20]	; (8006048 <FLASH_PageErase+0x44>)
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	4a04      	ldr	r2, [pc, #16]	; (8006048 <FLASH_PageErase+0x44>)
 8006036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800603a:	6153      	str	r3, [r2, #20]
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	40022000 	.word	0x40022000

0800604c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8006052:	4b21      	ldr	r3, [pc, #132]	; (80060d8 <FLASH_FlushCaches+0x8c>)
 8006054:	7f1b      	ldrb	r3, [r3, #28]
 8006056:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8006058:	79fb      	ldrb	r3, [r7, #7]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d002      	beq.n	8006064 <FLASH_FlushCaches+0x18>
 800605e:	79fb      	ldrb	r3, [r7, #7]
 8006060:	2b03      	cmp	r3, #3
 8006062:	d117      	bne.n	8006094 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006064:	4b1d      	ldr	r3, [pc, #116]	; (80060dc <FLASH_FlushCaches+0x90>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a1c      	ldr	r2, [pc, #112]	; (80060dc <FLASH_FlushCaches+0x90>)
 800606a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800606e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006070:	4b1a      	ldr	r3, [pc, #104]	; (80060dc <FLASH_FlushCaches+0x90>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a19      	ldr	r2, [pc, #100]	; (80060dc <FLASH_FlushCaches+0x90>)
 8006076:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800607a:	6013      	str	r3, [r2, #0]
 800607c:	4b17      	ldr	r3, [pc, #92]	; (80060dc <FLASH_FlushCaches+0x90>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a16      	ldr	r2, [pc, #88]	; (80060dc <FLASH_FlushCaches+0x90>)
 8006082:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006086:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006088:	4b14      	ldr	r3, [pc, #80]	; (80060dc <FLASH_FlushCaches+0x90>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a13      	ldr	r2, [pc, #76]	; (80060dc <FLASH_FlushCaches+0x90>)
 800608e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006092:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8006094:	79fb      	ldrb	r3, [r7, #7]
 8006096:	2b02      	cmp	r3, #2
 8006098:	d002      	beq.n	80060a0 <FLASH_FlushCaches+0x54>
 800609a:	79fb      	ldrb	r3, [r7, #7]
 800609c:	2b03      	cmp	r3, #3
 800609e:	d111      	bne.n	80060c4 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80060a0:	4b0e      	ldr	r3, [pc, #56]	; (80060dc <FLASH_FlushCaches+0x90>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a0d      	ldr	r2, [pc, #52]	; (80060dc <FLASH_FlushCaches+0x90>)
 80060a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	4b0b      	ldr	r3, [pc, #44]	; (80060dc <FLASH_FlushCaches+0x90>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a0a      	ldr	r2, [pc, #40]	; (80060dc <FLASH_FlushCaches+0x90>)
 80060b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060b6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80060b8:	4b08      	ldr	r3, [pc, #32]	; (80060dc <FLASH_FlushCaches+0x90>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a07      	ldr	r2, [pc, #28]	; (80060dc <FLASH_FlushCaches+0x90>)
 80060be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060c2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80060c4:	4b04      	ldr	r3, [pc, #16]	; (80060d8 <FLASH_FlushCaches+0x8c>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	771a      	strb	r2, [r3, #28]
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	2000000c 	.word	0x2000000c
 80060dc:	40022000 	.word	0x40022000

080060e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80060ea:	2300      	movs	r3, #0
 80060ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060ee:	e154      	b.n	800639a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	2101      	movs	r1, #1
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	fa01 f303 	lsl.w	r3, r1, r3
 80060fc:	4013      	ands	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 8146 	beq.w	8006394 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f003 0303 	and.w	r3, r3, #3
 8006110:	2b01      	cmp	r3, #1
 8006112:	d005      	beq.n	8006120 <HAL_GPIO_Init+0x40>
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f003 0303 	and.w	r3, r3, #3
 800611c:	2b02      	cmp	r3, #2
 800611e:	d130      	bne.n	8006182 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	2203      	movs	r2, #3
 800612c:	fa02 f303 	lsl.w	r3, r2, r3
 8006130:	43db      	mvns	r3, r3
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	4013      	ands	r3, r2
 8006136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	68da      	ldr	r2, [r3, #12]
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	fa02 f303 	lsl.w	r3, r2, r3
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006156:	2201      	movs	r2, #1
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	fa02 f303 	lsl.w	r3, r2, r3
 800615e:	43db      	mvns	r3, r3
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	4013      	ands	r3, r2
 8006164:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	091b      	lsrs	r3, r3, #4
 800616c:	f003 0201 	and.w	r2, r3, #1
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	4313      	orrs	r3, r2
 800617a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f003 0303 	and.w	r3, r3, #3
 800618a:	2b03      	cmp	r3, #3
 800618c:	d017      	beq.n	80061be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	005b      	lsls	r3, r3, #1
 8006198:	2203      	movs	r2, #3
 800619a:	fa02 f303 	lsl.w	r3, r2, r3
 800619e:	43db      	mvns	r3, r3
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	4013      	ands	r3, r2
 80061a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	689a      	ldr	r2, [r3, #8]
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	fa02 f303 	lsl.w	r3, r2, r3
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f003 0303 	and.w	r3, r3, #3
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d123      	bne.n	8006212 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	08da      	lsrs	r2, r3, #3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	3208      	adds	r2, #8
 80061d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f003 0307 	and.w	r3, r3, #7
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	220f      	movs	r2, #15
 80061e2:	fa02 f303 	lsl.w	r3, r2, r3
 80061e6:	43db      	mvns	r3, r3
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	4013      	ands	r3, r2
 80061ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	691a      	ldr	r2, [r3, #16]
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f003 0307 	and.w	r3, r3, #7
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	fa02 f303 	lsl.w	r3, r2, r3
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	4313      	orrs	r3, r2
 8006202:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	08da      	lsrs	r2, r3, #3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3208      	adds	r2, #8
 800620c:	6939      	ldr	r1, [r7, #16]
 800620e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	005b      	lsls	r3, r3, #1
 800621c:	2203      	movs	r2, #3
 800621e:	fa02 f303 	lsl.w	r3, r2, r3
 8006222:	43db      	mvns	r3, r3
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	4013      	ands	r3, r2
 8006228:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f003 0203 	and.w	r2, r3, #3
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	fa02 f303 	lsl.w	r3, r2, r3
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	4313      	orrs	r3, r2
 800623e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 80a0 	beq.w	8006394 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006254:	4b58      	ldr	r3, [pc, #352]	; (80063b8 <HAL_GPIO_Init+0x2d8>)
 8006256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006258:	4a57      	ldr	r2, [pc, #348]	; (80063b8 <HAL_GPIO_Init+0x2d8>)
 800625a:	f043 0301 	orr.w	r3, r3, #1
 800625e:	6613      	str	r3, [r2, #96]	; 0x60
 8006260:	4b55      	ldr	r3, [pc, #340]	; (80063b8 <HAL_GPIO_Init+0x2d8>)
 8006262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	60bb      	str	r3, [r7, #8]
 800626a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800626c:	4a53      	ldr	r2, [pc, #332]	; (80063bc <HAL_GPIO_Init+0x2dc>)
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	089b      	lsrs	r3, r3, #2
 8006272:	3302      	adds	r3, #2
 8006274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006278:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f003 0303 	and.w	r3, r3, #3
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	220f      	movs	r2, #15
 8006284:	fa02 f303 	lsl.w	r3, r2, r3
 8006288:	43db      	mvns	r3, r3
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	4013      	ands	r3, r2
 800628e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006296:	d019      	beq.n	80062cc <HAL_GPIO_Init+0x1ec>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a49      	ldr	r2, [pc, #292]	; (80063c0 <HAL_GPIO_Init+0x2e0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d013      	beq.n	80062c8 <HAL_GPIO_Init+0x1e8>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a48      	ldr	r2, [pc, #288]	; (80063c4 <HAL_GPIO_Init+0x2e4>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00d      	beq.n	80062c4 <HAL_GPIO_Init+0x1e4>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a47      	ldr	r2, [pc, #284]	; (80063c8 <HAL_GPIO_Init+0x2e8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d007      	beq.n	80062c0 <HAL_GPIO_Init+0x1e0>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a46      	ldr	r2, [pc, #280]	; (80063cc <HAL_GPIO_Init+0x2ec>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d101      	bne.n	80062bc <HAL_GPIO_Init+0x1dc>
 80062b8:	2304      	movs	r3, #4
 80062ba:	e008      	b.n	80062ce <HAL_GPIO_Init+0x1ee>
 80062bc:	2307      	movs	r3, #7
 80062be:	e006      	b.n	80062ce <HAL_GPIO_Init+0x1ee>
 80062c0:	2303      	movs	r3, #3
 80062c2:	e004      	b.n	80062ce <HAL_GPIO_Init+0x1ee>
 80062c4:	2302      	movs	r3, #2
 80062c6:	e002      	b.n	80062ce <HAL_GPIO_Init+0x1ee>
 80062c8:	2301      	movs	r3, #1
 80062ca:	e000      	b.n	80062ce <HAL_GPIO_Init+0x1ee>
 80062cc:	2300      	movs	r3, #0
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	f002 0203 	and.w	r2, r2, #3
 80062d4:	0092      	lsls	r2, r2, #2
 80062d6:	4093      	lsls	r3, r2
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	4313      	orrs	r3, r2
 80062dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80062de:	4937      	ldr	r1, [pc, #220]	; (80063bc <HAL_GPIO_Init+0x2dc>)
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	089b      	lsrs	r3, r3, #2
 80062e4:	3302      	adds	r3, #2
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062ec:	4b38      	ldr	r3, [pc, #224]	; (80063d0 <HAL_GPIO_Init+0x2f0>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	43db      	mvns	r3, r3
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	4013      	ands	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4313      	orrs	r3, r2
 800630e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006310:	4a2f      	ldr	r2, [pc, #188]	; (80063d0 <HAL_GPIO_Init+0x2f0>)
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006316:	4b2e      	ldr	r3, [pc, #184]	; (80063d0 <HAL_GPIO_Init+0x2f0>)
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	43db      	mvns	r3, r3
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	4013      	ands	r3, r2
 8006324:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	4313      	orrs	r3, r2
 8006338:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800633a:	4a25      	ldr	r2, [pc, #148]	; (80063d0 <HAL_GPIO_Init+0x2f0>)
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006340:	4b23      	ldr	r3, [pc, #140]	; (80063d0 <HAL_GPIO_Init+0x2f0>)
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	43db      	mvns	r3, r3
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	4013      	ands	r3, r2
 800634e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4313      	orrs	r3, r2
 8006362:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006364:	4a1a      	ldr	r2, [pc, #104]	; (80063d0 <HAL_GPIO_Init+0x2f0>)
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800636a:	4b19      	ldr	r3, [pc, #100]	; (80063d0 <HAL_GPIO_Init+0x2f0>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	43db      	mvns	r3, r3
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	4013      	ands	r3, r2
 8006378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4313      	orrs	r3, r2
 800638c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800638e:	4a10      	ldr	r2, [pc, #64]	; (80063d0 <HAL_GPIO_Init+0x2f0>)
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	3301      	adds	r3, #1
 8006398:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	fa22 f303 	lsr.w	r3, r2, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f47f aea3 	bne.w	80060f0 <HAL_GPIO_Init+0x10>
  }
}
 80063aa:	bf00      	nop
 80063ac:	bf00      	nop
 80063ae:	371c      	adds	r7, #28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	40021000 	.word	0x40021000
 80063bc:	40010000 	.word	0x40010000
 80063c0:	48000400 	.word	0x48000400
 80063c4:	48000800 	.word	0x48000800
 80063c8:	48000c00 	.word	0x48000c00
 80063cc:	48001000 	.word	0x48001000
 80063d0:	40010400 	.word	0x40010400

080063d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	887b      	ldrh	r3, [r7, #2]
 80063e6:	4013      	ands	r3, r2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80063ec:	2301      	movs	r3, #1
 80063ee:	73fb      	strb	r3, [r7, #15]
 80063f0:	e001      	b.n	80063f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063f2:	2300      	movs	r3, #0
 80063f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	807b      	strh	r3, [r7, #2]
 8006410:	4613      	mov	r3, r2
 8006412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006414:	787b      	ldrb	r3, [r7, #1]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800641a:	887a      	ldrh	r2, [r7, #2]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006420:	e002      	b.n	8006428 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006422:	887a      	ldrh	r2, [r7, #2]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006446:	887a      	ldrh	r2, [r7, #2]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4013      	ands	r3, r2
 800644c:	041a      	lsls	r2, r3, #16
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	43d9      	mvns	r1, r3
 8006452:	887b      	ldrh	r3, [r7, #2]
 8006454:	400b      	ands	r3, r1
 8006456:	431a      	orrs	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	619a      	str	r2, [r3, #24]
}
 800645c:	bf00      	nop
 800645e:	3714      	adds	r7, #20
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800646a:	b08b      	sub	sp, #44	; 0x2c
 800646c:	af06      	add	r7, sp, #24
 800646e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e109      	b.n	800668e <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d106      	bne.n	8006494 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f008 f902 	bl	800e698 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2203      	movs	r2, #3
 8006498:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f003 ffc1 	bl	800a428 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	603b      	str	r3, [r7, #0]
 80064ac:	687e      	ldr	r6, [r7, #4]
 80064ae:	466d      	mov	r5, sp
 80064b0:	f106 0410 	add.w	r4, r6, #16
 80064b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80064bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80064c0:	1d33      	adds	r3, r6, #4
 80064c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064c4:	6838      	ldr	r0, [r7, #0]
 80064c6:	f003 ff87 	bl	800a3d8 <USB_CoreInit>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e0d8      	b.n	800668e <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2100      	movs	r1, #0
 80064e2:	4618      	mov	r0, r3
 80064e4:	f003 ffbb 	bl	800a45e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064e8:	2300      	movs	r3, #0
 80064ea:	73fb      	strb	r3, [r7, #15]
 80064ec:	e04d      	b.n	800658a <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80064ee:	7bfb      	ldrb	r3, [r7, #15]
 80064f0:	6879      	ldr	r1, [r7, #4]
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	4613      	mov	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	440b      	add	r3, r1
 80064fe:	3305      	adds	r3, #5
 8006500:	2201      	movs	r2, #1
 8006502:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006504:	7bfb      	ldrb	r3, [r7, #15]
 8006506:	6879      	ldr	r1, [r7, #4]
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	4613      	mov	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	00db      	lsls	r3, r3, #3
 8006512:	440b      	add	r3, r1
 8006514:	3304      	adds	r3, #4
 8006516:	7bfa      	ldrb	r2, [r7, #15]
 8006518:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800651a:	7bfa      	ldrb	r2, [r7, #15]
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	b298      	uxth	r0, r3
 8006520:	6879      	ldr	r1, [r7, #4]
 8006522:	4613      	mov	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	00db      	lsls	r3, r3, #3
 800652a:	440b      	add	r3, r1
 800652c:	333a      	adds	r3, #58	; 0x3a
 800652e:	4602      	mov	r2, r0
 8006530:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006532:	7bfb      	ldrb	r3, [r7, #15]
 8006534:	6879      	ldr	r1, [r7, #4]
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	4613      	mov	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	440b      	add	r3, r1
 8006542:	3307      	adds	r3, #7
 8006544:	2200      	movs	r2, #0
 8006546:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006548:	7bfa      	ldrb	r2, [r7, #15]
 800654a:	6879      	ldr	r1, [r7, #4]
 800654c:	4613      	mov	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	440b      	add	r3, r1
 8006556:	333c      	adds	r3, #60	; 0x3c
 8006558:	2200      	movs	r2, #0
 800655a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800655c:	7bfa      	ldrb	r2, [r7, #15]
 800655e:	6879      	ldr	r1, [r7, #4]
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	440b      	add	r3, r1
 800656a:	3340      	adds	r3, #64	; 0x40
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006570:	7bfa      	ldrb	r2, [r7, #15]
 8006572:	6879      	ldr	r1, [r7, #4]
 8006574:	4613      	mov	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	440b      	add	r3, r1
 800657e:	3344      	adds	r3, #68	; 0x44
 8006580:	2200      	movs	r2, #0
 8006582:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	3301      	adds	r3, #1
 8006588:	73fb      	strb	r3, [r7, #15]
 800658a:	7bfa      	ldrb	r2, [r7, #15]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	429a      	cmp	r2, r3
 8006592:	d3ac      	bcc.n	80064ee <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006594:	2300      	movs	r3, #0
 8006596:	73fb      	strb	r3, [r7, #15]
 8006598:	e044      	b.n	8006624 <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800659a:	7bfa      	ldrb	r2, [r7, #15]
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	4613      	mov	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	00db      	lsls	r3, r3, #3
 80065a6:	440b      	add	r3, r1
 80065a8:	f203 136d 	addw	r3, r3, #365	; 0x16d
 80065ac:	2200      	movs	r2, #0
 80065ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80065b0:	7bfa      	ldrb	r2, [r7, #15]
 80065b2:	6879      	ldr	r1, [r7, #4]
 80065b4:	4613      	mov	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	440b      	add	r3, r1
 80065be:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80065c2:	7bfa      	ldrb	r2, [r7, #15]
 80065c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80065c6:	7bfa      	ldrb	r2, [r7, #15]
 80065c8:	6879      	ldr	r1, [r7, #4]
 80065ca:	4613      	mov	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	440b      	add	r3, r1
 80065d4:	f203 136f 	addw	r3, r3, #367	; 0x16f
 80065d8:	2200      	movs	r2, #0
 80065da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80065dc:	7bfa      	ldrb	r2, [r7, #15]
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	4613      	mov	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	00db      	lsls	r3, r3, #3
 80065e8:	440b      	add	r3, r1
 80065ea:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80065ee:	2200      	movs	r2, #0
 80065f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80065f2:	7bfa      	ldrb	r2, [r7, #15]
 80065f4:	6879      	ldr	r1, [r7, #4]
 80065f6:	4613      	mov	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	440b      	add	r3, r1
 8006600:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006608:	7bfa      	ldrb	r2, [r7, #15]
 800660a:	6879      	ldr	r1, [r7, #4]
 800660c:	4613      	mov	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	440b      	add	r3, r1
 8006616:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800661a:	2200      	movs	r2, #0
 800661c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800661e:	7bfb      	ldrb	r3, [r7, #15]
 8006620:	3301      	adds	r3, #1
 8006622:	73fb      	strb	r3, [r7, #15]
 8006624:	7bfa      	ldrb	r2, [r7, #15]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	429a      	cmp	r2, r3
 800662c:	d3b5      	bcc.n	800659a <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	603b      	str	r3, [r7, #0]
 8006634:	687e      	ldr	r6, [r7, #4]
 8006636:	466d      	mov	r5, sp
 8006638:	f106 0410 	add.w	r4, r6, #16
 800663c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800663e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006640:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006644:	e885 0003 	stmia.w	r5, {r0, r1}
 8006648:	1d33      	adds	r3, r6, #4
 800664a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800664c:	6838      	ldr	r0, [r7, #0]
 800664e:	f003 ff13 	bl	800a478 <USB_DevInit>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d005      	beq.n	8006664 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e014      	b.n	800668e <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	69db      	ldr	r3, [r3, #28]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d102      	bne.n	8006682 <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 fc55 	bl	8007f2c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4618      	mov	r0, r3
 8006688:	f006 f91f 	bl	800c8ca <USB_DevDisconnect>

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006696 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b082      	sub	sp, #8
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d101      	bne.n	80066ac <HAL_PCD_Start+0x16>
 80066a8:	2302      	movs	r3, #2
 80066aa:	e012      	b.n	80066d2 <HAL_PCD_Start+0x3c>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f003 fe9e 	bl	800a3fa <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f006 f8ea 	bl	800c89c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f006 f904 	bl	800c8f4 <USB_ReadInterrupts>
 80066ec:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fb3e 	bl	8006d7a <PCD_EP_ISR_Handler>

    return;
 80066fe:	e110      	b.n	8006922 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006706:	2b00      	cmp	r3, #0
 8006708:	d013      	beq.n	8006732 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006712:	b29a      	uxth	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800671c:	b292      	uxth	r2, r2
 800671e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f008 f849 	bl	800e7ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006728:	2100      	movs	r1, #0
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f8fc 	bl	8006928 <HAL_PCD_SetAddress>

    return;
 8006730:	e0f7      	b.n	8006922 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00c      	beq.n	8006756 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006744:	b29a      	uxth	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800674e:	b292      	uxth	r2, r2
 8006750:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006754:	e0e5      	b.n	8006922 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00c      	beq.n	800677a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006768:	b29a      	uxth	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006772:	b292      	uxth	r2, r2
 8006774:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006778:	e0d3      	b.n	8006922 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d034      	beq.n	80067ee <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800678c:	b29a      	uxth	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0204 	bic.w	r2, r2, #4
 8006796:	b292      	uxth	r2, r2
 8006798:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0208 	bic.w	r2, r2, #8
 80067ae:	b292      	uxth	r2, r2
 80067b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d107      	bne.n	80067ce <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80067c6:	2100      	movs	r1, #0
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f001 fbd9 	bl	8007f80 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f008 f82c 	bl	800e82c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80067dc:	b29a      	uxth	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067e6:	b292      	uxth	r2, r2
 80067e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80067ec:	e099      	b.n	8006922 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d027      	beq.n	8006848 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006800:	b29a      	uxth	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0208 	orr.w	r2, r2, #8
 800680a:	b292      	uxth	r2, r2
 800680c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006818:	b29a      	uxth	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006822:	b292      	uxth	r2, r2
 8006824:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006830:	b29a      	uxth	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f042 0204 	orr.w	r2, r2, #4
 800683a:	b292      	uxth	r2, r2
 800683c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f007 ffd9 	bl	800e7f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006846:	e06c      	b.n	8006922 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800684e:	2b00      	cmp	r3, #0
 8006850:	d040      	beq.n	80068d4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800685a:	b29a      	uxth	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006864:	b292      	uxth	r2, r2
 8006866:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8006870:	2b00      	cmp	r3, #0
 8006872:	d12b      	bne.n	80068cc <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800687c:	b29a      	uxth	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0204 	orr.w	r2, r2, #4
 8006886:	b292      	uxth	r2, r2
 8006888:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006894:	b29a      	uxth	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f042 0208 	orr.w	r2, r2, #8
 800689e:	b292      	uxth	r2, r2
 80068a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	089b      	lsrs	r3, r3, #2
 80068b8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80068c2:	2101      	movs	r1, #1
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f001 fb5b 	bl	8007f80 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80068ca:	e02a      	b.n	8006922 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f007 ff93 	bl	800e7f8 <HAL_PCD_SuspendCallback>
    return;
 80068d2:	e026      	b.n	8006922 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00f      	beq.n	80068fe <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80068f0:	b292      	uxth	r2, r2
 80068f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f007 ff51 	bl	800e79e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80068fc:	e011      	b.n	8006922 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00c      	beq.n	8006922 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006910:	b29a      	uxth	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800691a:	b292      	uxth	r2, r2
 800691c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006920:	bf00      	nop
  }
}
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800693a:	2b01      	cmp	r3, #1
 800693c:	d101      	bne.n	8006942 <HAL_PCD_SetAddress+0x1a>
 800693e:	2302      	movs	r3, #2
 8006940:	e013      	b.n	800696a <HAL_PCD_SetAddress+0x42>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	78fa      	ldrb	r2, [r7, #3]
 800694e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	78fa      	ldrb	r2, [r7, #3]
 8006958:	4611      	mov	r1, r2
 800695a:	4618      	mov	r0, r3
 800695c:	f005 ff8a 	bl	800c874 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	4608      	mov	r0, r1
 800697c:	4611      	mov	r1, r2
 800697e:	461a      	mov	r2, r3
 8006980:	4603      	mov	r3, r0
 8006982:	70fb      	strb	r3, [r7, #3]
 8006984:	460b      	mov	r3, r1
 8006986:	803b      	strh	r3, [r7, #0]
 8006988:	4613      	mov	r3, r2
 800698a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800698c:	2300      	movs	r3, #0
 800698e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006990:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006994:	2b00      	cmp	r3, #0
 8006996:	da0f      	bge.n	80069b8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	f003 0307 	and.w	r3, r3, #7
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	4613      	mov	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	00db      	lsls	r3, r3, #3
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	4413      	add	r3, r2
 80069ac:	3304      	adds	r3, #4
 80069ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2201      	movs	r2, #1
 80069b4:	705a      	strb	r2, [r3, #1]
 80069b6:	e00f      	b.n	80069d8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069b8:	78fb      	ldrb	r3, [r7, #3]
 80069ba:	f003 0207 	and.w	r2, r3, #7
 80069be:	4613      	mov	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	00db      	lsls	r3, r3, #3
 80069c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	4413      	add	r3, r2
 80069ce:	3304      	adds	r3, #4
 80069d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80069d8:	78fb      	ldrb	r3, [r7, #3]
 80069da:	f003 0307 	and.w	r3, r3, #7
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80069e4:	883a      	ldrh	r2, [r7, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	78ba      	ldrb	r2, [r7, #2]
 80069ee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	785b      	ldrb	r3, [r3, #1]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d004      	beq.n	8006a02 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006a02:	78bb      	ldrb	r3, [r7, #2]
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d102      	bne.n	8006a0e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_PCD_EP_Open+0xaa>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e00e      	b.n	8006a3a <HAL_PCD_EP_Open+0xc8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68f9      	ldr	r1, [r7, #12]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f003 fd46 	bl	800a4bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8006a38:	7afb      	ldrb	r3, [r7, #11]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	da0f      	bge.n	8006a76 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a56:	78fb      	ldrb	r3, [r7, #3]
 8006a58:	f003 0307 	and.w	r3, r3, #7
 8006a5c:	1c5a      	adds	r2, r3, #1
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	00db      	lsls	r3, r3, #3
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	4413      	add	r3, r2
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2201      	movs	r2, #1
 8006a72:	705a      	strb	r2, [r3, #1]
 8006a74:	e00f      	b.n	8006a96 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a76:	78fb      	ldrb	r3, [r7, #3]
 8006a78:	f003 0207 	and.w	r2, r3, #7
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	00db      	lsls	r3, r3, #3
 8006a84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d101      	bne.n	8006ab0 <HAL_PCD_EP_Close+0x6e>
 8006aac:	2302      	movs	r3, #2
 8006aae:	e00e      	b.n	8006ace <HAL_PCD_EP_Close+0x8c>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68f9      	ldr	r1, [r7, #12]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f004 f8b6 	bl	800ac30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b086      	sub	sp, #24
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	607a      	str	r2, [r7, #4]
 8006ae0:	603b      	str	r3, [r7, #0]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ae6:	7afb      	ldrb	r3, [r7, #11]
 8006ae8:	f003 0207 	and.w	r2, r3, #7
 8006aec:	4613      	mov	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	4413      	add	r3, r2
 8006afc:	3304      	adds	r3, #4
 8006afe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2200      	movs	r2, #0
 8006b16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b18:	7afb      	ldrb	r3, [r7, #11]
 8006b1a:	f003 0307 	and.w	r3, r3, #7
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b24:	7afb      	ldrb	r3, [r7, #11]
 8006b26:	f003 0307 	and.w	r3, r3, #7
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d106      	bne.n	8006b3c <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6979      	ldr	r1, [r7, #20]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f004 fa68 	bl	800b00a <USB_EPStartXfer>
 8006b3a:	e005      	b.n	8006b48 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6979      	ldr	r1, [r7, #20]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f004 fa61 	bl	800b00a <USB_EPStartXfer>
  }

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3718      	adds	r7, #24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b083      	sub	sp, #12
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006b5e:	78fb      	ldrb	r3, [r7, #3]
 8006b60:	f003 0207 	and.w	r2, r3, #7
 8006b64:	6879      	ldr	r1, [r7, #4]
 8006b66:	4613      	mov	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	440b      	add	r3, r1
 8006b70:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006b74:	681b      	ldr	r3, [r3, #0]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b086      	sub	sp, #24
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	60f8      	str	r0, [r7, #12]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	603b      	str	r3, [r7, #0]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b92:	7afb      	ldrb	r3, [r7, #11]
 8006b94:	f003 0307 	and.w	r3, r3, #7
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	3304      	adds	r3, #4
 8006ba8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	683a      	ldr	r2, [r7, #0]
 8006bc2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bd0:	7afb      	ldrb	r3, [r7, #11]
 8006bd2:	f003 0307 	and.w	r3, r3, #7
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006bdc:	7afb      	ldrb	r3, [r7, #11]
 8006bde:	f003 0307 	and.w	r3, r3, #7
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d106      	bne.n	8006bf4 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6979      	ldr	r1, [r7, #20]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f004 fa0c 	bl	800b00a <USB_EPStartXfer>
 8006bf2:	e005      	b.n	8006c00 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6979      	ldr	r1, [r7, #20]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f004 fa05 	bl	800b00a <USB_EPStartXfer>
  }

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b084      	sub	sp, #16
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	460b      	mov	r3, r1
 8006c14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006c16:	78fb      	ldrb	r3, [r7, #3]
 8006c18:	f003 0207 	and.w	r2, r3, #7
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d901      	bls.n	8006c28 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e04e      	b.n	8006cc6 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	da0f      	bge.n	8006c50 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c30:	78fb      	ldrb	r3, [r7, #3]
 8006c32:	f003 0307 	and.w	r3, r3, #7
 8006c36:	1c5a      	adds	r2, r3, #1
 8006c38:	4613      	mov	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	4413      	add	r3, r2
 8006c44:	3304      	adds	r3, #4
 8006c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	705a      	strb	r2, [r3, #1]
 8006c4e:	e00d      	b.n	8006c6c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006c50:	78fa      	ldrb	r2, [r7, #3]
 8006c52:	4613      	mov	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	4413      	add	r3, r2
 8006c62:	3304      	adds	r3, #4
 8006c64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c72:	78fb      	ldrb	r3, [r7, #3]
 8006c74:	f003 0307 	and.w	r3, r3, #7
 8006c78:	b2da      	uxtb	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d101      	bne.n	8006c8c <HAL_PCD_EP_SetStall+0x82>
 8006c88:	2302      	movs	r3, #2
 8006c8a:	e01c      	b.n	8006cc6 <HAL_PCD_EP_SetStall+0xbc>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68f9      	ldr	r1, [r7, #12]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f005 fceb 	bl	800c676 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006ca0:	78fb      	ldrb	r3, [r7, #3]
 8006ca2:	f003 0307 	and.w	r3, r3, #7
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d108      	bne.n	8006cbc <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	f005 fe2c 	bl	800c914 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006cda:	78fb      	ldrb	r3, [r7, #3]
 8006cdc:	f003 020f 	and.w	r2, r3, #15
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d901      	bls.n	8006cec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e042      	b.n	8006d72 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006cec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	da0f      	bge.n	8006d14 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cf4:	78fb      	ldrb	r3, [r7, #3]
 8006cf6:	f003 0307 	and.w	r3, r3, #7
 8006cfa:	1c5a      	adds	r2, r3, #1
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	00db      	lsls	r3, r3, #3
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	4413      	add	r3, r2
 8006d08:	3304      	adds	r3, #4
 8006d0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	705a      	strb	r2, [r3, #1]
 8006d12:	e00f      	b.n	8006d34 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d14:	78fb      	ldrb	r3, [r7, #3]
 8006d16:	f003 0207 	and.w	r2, r3, #7
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	00db      	lsls	r3, r3, #3
 8006d22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	4413      	add	r3, r2
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d101      	bne.n	8006d54 <HAL_PCD_EP_ClrStall+0x86>
 8006d50:	2302      	movs	r3, #2
 8006d52:	e00e      	b.n	8006d72 <HAL_PCD_EP_ClrStall+0xa4>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68f9      	ldr	r1, [r7, #12]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f005 fcd8 	bl	800c718 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b096      	sub	sp, #88	; 0x58
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006d82:	e3a9      	b.n	80074d8 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006d8c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006d90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	f003 030f 	and.w	r3, r3, #15
 8006d9a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8006d9e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f040 8169 	bne.w	800707a <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006da8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006dac:	f003 0310 	and.w	r3, r3, #16
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d150      	bne.n	8006e56 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc4:	81fb      	strh	r3, [r7, #14]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	89fb      	ldrh	r3, [r7, #14]
 8006dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	332c      	adds	r3, #44	; 0x2c
 8006ddc:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	461a      	mov	r2, r3
 8006dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	4413      	add	r3, r2
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	6812      	ldr	r2, [r2, #0]
 8006df6:	4413      	add	r3, r2
 8006df8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e04:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e08:	695a      	ldr	r2, [r3, #20]
 8006e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	441a      	add	r2, r3
 8006e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e12:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006e14:	2100      	movs	r1, #0
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f007 fca7 	bl	800e76a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 8357 	beq.w	80074d8 <PCD_EP_ISR_Handler+0x75e>
 8006e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f040 8352 	bne.w	80074d8 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	b292      	uxth	r2, r2
 8006e48:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006e54:	e340      	b.n	80074d8 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8006e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	881b      	ldrh	r3, [r3, #0]
 8006e64:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006e68:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d032      	beq.n	8006eda <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	461a      	mov	r2, r3
 8006e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	00db      	lsls	r3, r3, #3
 8006e86:	4413      	add	r3, r2
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6812      	ldr	r2, [r2, #0]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e9a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6818      	ldr	r0, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8006ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eac:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	f005 fd7e 	bl	800c9b0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	823b      	strh	r3, [r7, #16]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	8a3a      	ldrh	r2, [r7, #16]
 8006eca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ece:	b292      	uxth	r2, r2
 8006ed0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f007 fc1c 	bl	800e710 <HAL_PCD_SetupStageCallback>
 8006ed8:	e2fe      	b.n	80074d8 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006eda:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f280 82fa 	bge.w	80074d8 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	83fb      	strh	r3, [r7, #30]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	8bfa      	ldrh	r2, [r7, #30]
 8006efa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006efe:	b292      	uxth	r2, r2
 8006f00:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	4413      	add	r3, r2
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	6812      	ldr	r2, [r2, #0]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f20:	881b      	ldrh	r3, [r3, #0]
 8006f22:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f28:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d019      	beq.n	8006f66 <PCD_EP_ISR_Handler+0x1ec>
 8006f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d015      	beq.n	8006f66 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6818      	ldr	r0, [r3, #0]
 8006f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f40:	6959      	ldr	r1, [r3, #20]
 8006f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f44:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f48:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	f005 fd30 	bl	800c9b0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f52:	695a      	ldr	r2, [r3, #20]
 8006f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f56:	69db      	ldr	r3, [r3, #28]
 8006f58:	441a      	add	r2, r3
 8006f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f5c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006f5e:	2100      	movs	r1, #0
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f007 fbe7 	bl	800e734 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006f70:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f040 82ad 	bne.w	80074d8 <PCD_EP_ISR_Handler+0x75e>
 8006f7e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006f82:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006f86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f8a:	f000 82a5 	beq.w	80074d8 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	61bb      	str	r3, [r7, #24]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	61bb      	str	r3, [r7, #24]
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fac:	617b      	str	r3, [r7, #20]
 8006fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	2b3e      	cmp	r3, #62	; 0x3e
 8006fb4:	d918      	bls.n	8006fe8 <PCD_EP_ISR_Handler+0x26e>
 8006fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	095b      	lsrs	r3, r3, #5
 8006fbc:	647b      	str	r3, [r7, #68]	; 0x44
 8006fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	f003 031f 	and.w	r3, r3, #31
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d102      	bne.n	8006fd0 <PCD_EP_ISR_Handler+0x256>
 8006fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	647b      	str	r3, [r7, #68]	; 0x44
 8006fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	029b      	lsls	r3, r3, #10
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	801a      	strh	r2, [r3, #0]
 8006fe6:	e029      	b.n	800703c <PCD_EP_ISR_Handler+0x2c2>
 8006fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d112      	bne.n	8007016 <PCD_EP_ISR_Handler+0x29c>
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	801a      	strh	r2, [r3, #0]
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	b29b      	uxth	r3, r3
 8007006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800700a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800700e:	b29a      	uxth	r2, r3
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	801a      	strh	r2, [r3, #0]
 8007014:	e012      	b.n	800703c <PCD_EP_ISR_Handler+0x2c2>
 8007016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	085b      	lsrs	r3, r3, #1
 800701c:	647b      	str	r3, [r7, #68]	; 0x44
 800701e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	2b00      	cmp	r3, #0
 8007028:	d002      	beq.n	8007030 <PCD_EP_ISR_Handler+0x2b6>
 800702a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800702c:	3301      	adds	r3, #1
 800702e:	647b      	str	r3, [r7, #68]	; 0x44
 8007030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007032:	b29b      	uxth	r3, r3
 8007034:	029b      	lsls	r3, r3, #10
 8007036:	b29a      	uxth	r2, r3
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	b29b      	uxth	r3, r3
 8007044:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800704c:	827b      	strh	r3, [r7, #18]
 800704e:	8a7b      	ldrh	r3, [r7, #18]
 8007050:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007054:	827b      	strh	r3, [r7, #18]
 8007056:	8a7b      	ldrh	r3, [r7, #18]
 8007058:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800705c:	827b      	strh	r3, [r7, #18]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	8a7b      	ldrh	r3, [r7, #18]
 8007064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800706c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007074:	b29b      	uxth	r3, r3
 8007076:	8013      	strh	r3, [r2, #0]
 8007078:	e22e      	b.n	80074d8 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800708e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8007092:	2b00      	cmp	r3, #0
 8007094:	f280 80f7 	bge.w	8007286 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	461a      	mov	r2, r3
 800709e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4413      	add	r3, r2
 80070a6:	881b      	ldrh	r3, [r3, #0]
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80070ae:	4013      	ands	r3, r2
 80070b0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	461a      	mov	r2, r3
 80070ba:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80070c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80070ca:	b292      	uxth	r2, r2
 80070cc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80070ce:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80070d2:	4613      	mov	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	00db      	lsls	r3, r3, #3
 80070da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	4413      	add	r3, r2
 80070e2:	3304      	adds	r3, #4
 80070e4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80070e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e8:	7b1b      	ldrb	r3, [r3, #12]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d123      	bne.n	8007136 <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	461a      	mov	r2, r3
 80070fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	4413      	add	r3, r2
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	6812      	ldr	r2, [r2, #0]
 8007106:	4413      	add	r3, r2
 8007108:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007112:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8007116:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800711a:	2b00      	cmp	r3, #0
 800711c:	f000 808e 	beq.w	800723c <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6818      	ldr	r0, [r3, #0]
 8007124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007126:	6959      	ldr	r1, [r3, #20]
 8007128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800712a:	88da      	ldrh	r2, [r3, #6]
 800712c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007130:	f005 fc3e 	bl	800c9b0 <USB_ReadPMA>
 8007134:	e082      	b.n	800723c <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007138:	78db      	ldrb	r3, [r3, #3]
 800713a:	2b02      	cmp	r3, #2
 800713c:	d10a      	bne.n	8007154 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800713e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007142:	461a      	mov	r2, r3
 8007144:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f9d4 	bl	80074f4 <HAL_PCD_EP_DB_Receive>
 800714c:	4603      	mov	r3, r0
 800714e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007152:	e073      	b.n	800723c <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	461a      	mov	r2, r3
 800715a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	b29b      	uxth	r3, r3
 8007166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800716a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800716e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	441a      	add	r2, r3
 8007180:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800718c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007190:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007194:	b29b      	uxth	r3, r3
 8007196:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	461a      	mov	r2, r3
 800719e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	881b      	ldrh	r3, [r3, #0]
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d022      	beq.n	80071f8 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	461a      	mov	r2, r3
 80071be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	4413      	add	r3, r2
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	6812      	ldr	r2, [r2, #0]
 80071ca:	4413      	add	r3, r2
 80071cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071d6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80071da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d02c      	beq.n	800723c <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071e8:	6959      	ldr	r1, [r3, #20]
 80071ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ec:	891a      	ldrh	r2, [r3, #8]
 80071ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80071f2:	f005 fbdd 	bl	800c9b0 <USB_ReadPMA>
 80071f6:	e021      	b.n	800723c <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007200:	b29b      	uxth	r3, r3
 8007202:	461a      	mov	r2, r3
 8007204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	00db      	lsls	r3, r3, #3
 800720a:	4413      	add	r3, r2
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	6812      	ldr	r2, [r2, #0]
 8007210:	4413      	add	r3, r2
 8007212:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007216:	881b      	ldrh	r3, [r3, #0]
 8007218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800721c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8007220:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007224:	2b00      	cmp	r3, #0
 8007226:	d009      	beq.n	800723c <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6818      	ldr	r0, [r3, #0]
 800722c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800722e:	6959      	ldr	r1, [r3, #20]
 8007230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007232:	895a      	ldrh	r2, [r3, #10]
 8007234:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007238:	f005 fbba 	bl	800c9b0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800723c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800723e:	69da      	ldr	r2, [r3, #28]
 8007240:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007244:	441a      	add	r2, r3
 8007246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007248:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800724a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800724c:	695a      	ldr	r2, [r3, #20]
 800724e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007252:	441a      	add	r2, r3
 8007254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007256:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d005      	beq.n	800726c <PCD_EP_ISR_Handler+0x4f2>
 8007260:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	429a      	cmp	r2, r3
 800726a:	d206      	bcs.n	800727a <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800726c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	4619      	mov	r1, r3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f007 fa5e 	bl	800e734 <HAL_PCD_DataOutStageCallback>
 8007278:	e005      	b.n	8007286 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007280:	4618      	mov	r0, r3
 8007282:	f003 fec2 	bl	800b00a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007286:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800728a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800728e:	2b00      	cmp	r3, #0
 8007290:	f000 8122 	beq.w	80074d8 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8007294:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	4613      	mov	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	00db      	lsls	r3, r3, #3
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	4413      	add	r3, r2
 80072a6:	3304      	adds	r3, #4
 80072a8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80072c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	461a      	mov	r2, r3
 80072ce:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	441a      	add	r2, r3
 80072d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80072da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80072e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072e8:	78db      	ldrb	r3, [r3, #3]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	f040 80a2 	bne.w	8007434 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 80072f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072f2:	2200      	movs	r2, #0
 80072f4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80072f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072f8:	7b1b      	ldrb	r3, [r3, #12]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f000 8093 	beq.w	8007426 <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007300:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007308:	2b00      	cmp	r3, #0
 800730a:	d046      	beq.n	800739a <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800730c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800730e:	785b      	ldrb	r3, [r3, #1]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d126      	bne.n	8007362 <PCD_EP_ISR_Handler+0x5e8>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	627b      	str	r3, [r7, #36]	; 0x24
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007322:	b29b      	uxth	r3, r3
 8007324:	461a      	mov	r2, r3
 8007326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007328:	4413      	add	r3, r2
 800732a:	627b      	str	r3, [r7, #36]	; 0x24
 800732c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	00da      	lsls	r2, r3, #3
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007334:	4413      	add	r3, r2
 8007336:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800733a:	623b      	str	r3, [r7, #32]
 800733c:	6a3b      	ldr	r3, [r7, #32]
 800733e:	881b      	ldrh	r3, [r3, #0]
 8007340:	b29b      	uxth	r3, r3
 8007342:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007346:	b29a      	uxth	r2, r3
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	801a      	strh	r2, [r3, #0]
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	b29b      	uxth	r3, r3
 8007352:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007356:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800735a:	b29a      	uxth	r2, r3
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	801a      	strh	r2, [r3, #0]
 8007360:	e061      	b.n	8007426 <PCD_EP_ISR_Handler+0x6ac>
 8007362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007364:	785b      	ldrb	r3, [r3, #1]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d15d      	bne.n	8007426 <PCD_EP_ISR_Handler+0x6ac>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007378:	b29b      	uxth	r3, r3
 800737a:	461a      	mov	r2, r3
 800737c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737e:	4413      	add	r3, r2
 8007380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	00da      	lsls	r2, r3, #3
 8007388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738a:	4413      	add	r3, r2
 800738c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007390:	62bb      	str	r3, [r7, #40]	; 0x28
 8007392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007394:	2200      	movs	r2, #0
 8007396:	801a      	strh	r2, [r3, #0]
 8007398:	e045      	b.n	8007426 <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073a2:	785b      	ldrb	r3, [r3, #1]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d126      	bne.n	80073f6 <PCD_EP_ISR_Handler+0x67c>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	637b      	str	r3, [r7, #52]	; 0x34
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	461a      	mov	r2, r3
 80073ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073bc:	4413      	add	r3, r2
 80073be:	637b      	str	r3, [r7, #52]	; 0x34
 80073c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	00da      	lsls	r2, r3, #3
 80073c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c8:	4413      	add	r3, r2
 80073ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073ce:	633b      	str	r3, [r7, #48]	; 0x30
 80073d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073da:	b29a      	uxth	r2, r3
 80073dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073de:	801a      	strh	r2, [r3, #0]
 80073e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f2:	801a      	strh	r2, [r3, #0]
 80073f4:	e017      	b.n	8007426 <PCD_EP_ISR_Handler+0x6ac>
 80073f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073f8:	785b      	ldrb	r3, [r3, #1]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d113      	bne.n	8007426 <PCD_EP_ISR_Handler+0x6ac>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007406:	b29b      	uxth	r3, r3
 8007408:	461a      	mov	r2, r3
 800740a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800740c:	4413      	add	r3, r2
 800740e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	00da      	lsls	r2, r3, #3
 8007416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007418:	4413      	add	r3, r2
 800741a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800741e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007422:	2200      	movs	r2, #0
 8007424:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	4619      	mov	r1, r3
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f007 f99c 	bl	800e76a <HAL_PCD_DataInStageCallback>
 8007432:	e051      	b.n	80074d8 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007434:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800743c:	2b00      	cmp	r3, #0
 800743e:	d144      	bne.n	80074ca <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007448:	b29b      	uxth	r3, r3
 800744a:	461a      	mov	r2, r3
 800744c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	00db      	lsls	r3, r3, #3
 8007452:	4413      	add	r3, r2
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	6812      	ldr	r2, [r2, #0]
 8007458:	4413      	add	r3, r2
 800745a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800745e:	881b      	ldrh	r3, [r3, #0]
 8007460:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007464:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8007468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800746a:	699a      	ldr	r2, [r3, #24]
 800746c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007470:	429a      	cmp	r2, r3
 8007472:	d907      	bls.n	8007484 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 8007474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007476:	699a      	ldr	r2, [r3, #24]
 8007478:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800747c:	1ad2      	subs	r2, r2, r3
 800747e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007480:	619a      	str	r2, [r3, #24]
 8007482:	e002      	b.n	800748a <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 8007484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007486:	2200      	movs	r2, #0
 8007488:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800748a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d106      	bne.n	80074a0 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f007 f966 	bl	800e76a <HAL_PCD_DataInStageCallback>
 800749e:	e01b      	b.n	80074d8 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80074a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074a2:	695a      	ldr	r2, [r3, #20]
 80074a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80074a8:	441a      	add	r2, r3
 80074aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074ac:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80074ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074b0:	69da      	ldr	r2, [r3, #28]
 80074b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80074b6:	441a      	add	r2, r3
 80074b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074ba:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80074c2:	4618      	mov	r0, r3
 80074c4:	f003 fda1 	bl	800b00a <USB_EPStartXfer>
 80074c8:	e006      	b.n	80074d8 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80074ca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80074ce:	461a      	mov	r2, r3
 80074d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f917 	bl	8007706 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	b21b      	sxth	r3, r3
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f6ff ac4d 	blt.w	8006d84 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3758      	adds	r7, #88	; 0x58
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b088      	sub	sp, #32
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	4613      	mov	r3, r2
 8007500:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007502:	88fb      	ldrh	r3, [r7, #6]
 8007504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d07c      	beq.n	8007606 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007514:	b29b      	uxth	r3, r3
 8007516:	461a      	mov	r2, r3
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	00db      	lsls	r3, r3, #3
 800751e:	4413      	add	r3, r2
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	6812      	ldr	r2, [r2, #0]
 8007524:	4413      	add	r3, r2
 8007526:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800752a:	881b      	ldrh	r3, [r3, #0]
 800752c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007530:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	699a      	ldr	r2, [r3, #24]
 8007536:	8b7b      	ldrh	r3, [r7, #26]
 8007538:	429a      	cmp	r2, r3
 800753a:	d306      	bcc.n	800754a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	699a      	ldr	r2, [r3, #24]
 8007540:	8b7b      	ldrh	r3, [r7, #26]
 8007542:	1ad2      	subs	r2, r2, r3
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	619a      	str	r2, [r3, #24]
 8007548:	e002      	b.n	8007550 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2200      	movs	r2, #0
 800754e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d123      	bne.n	80075a0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	461a      	mov	r2, r3
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	881b      	ldrh	r3, [r3, #0]
 8007568:	b29b      	uxth	r3, r3
 800756a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800756e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007572:	833b      	strh	r3, [r7, #24]
 8007574:	8b3b      	ldrh	r3, [r7, #24]
 8007576:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800757a:	833b      	strh	r3, [r7, #24]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	461a      	mov	r2, r3
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	441a      	add	r2, r3
 800758a:	8b3b      	ldrh	r3, [r7, #24]
 800758c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800759c:	b29b      	uxth	r3, r3
 800759e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80075a0:	88fb      	ldrh	r3, [r7, #6]
 80075a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d01f      	beq.n	80075ea <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075c4:	82fb      	strh	r3, [r7, #22]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	461a      	mov	r2, r3
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	441a      	add	r2, r3
 80075d4:	8afb      	ldrh	r3, [r7, #22]
 80075d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80075ea:	8b7b      	ldrh	r3, [r7, #26]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 8085 	beq.w	80076fc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6818      	ldr	r0, [r3, #0]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	6959      	ldr	r1, [r3, #20]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	891a      	ldrh	r2, [r3, #8]
 80075fe:	8b7b      	ldrh	r3, [r7, #26]
 8007600:	f005 f9d6 	bl	800c9b0 <USB_ReadPMA>
 8007604:	e07a      	b.n	80076fc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800760e:	b29b      	uxth	r3, r3
 8007610:	461a      	mov	r2, r3
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	4413      	add	r3, r2
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	6812      	ldr	r2, [r2, #0]
 800761e:	4413      	add	r3, r2
 8007620:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007624:	881b      	ldrh	r3, [r3, #0]
 8007626:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800762a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	699a      	ldr	r2, [r3, #24]
 8007630:	8b7b      	ldrh	r3, [r7, #26]
 8007632:	429a      	cmp	r2, r3
 8007634:	d306      	bcc.n	8007644 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	699a      	ldr	r2, [r3, #24]
 800763a:	8b7b      	ldrh	r3, [r7, #26]
 800763c:	1ad2      	subs	r2, r2, r3
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	619a      	str	r2, [r3, #24]
 8007642:	e002      	b.n	800764a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	2200      	movs	r2, #0
 8007648:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d123      	bne.n	800769a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	4413      	add	r3, r2
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	b29b      	uxth	r3, r3
 8007664:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766c:	83fb      	strh	r3, [r7, #30]
 800766e:	8bfb      	ldrh	r3, [r7, #30]
 8007670:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007674:	83fb      	strh	r3, [r7, #30]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	441a      	add	r2, r3
 8007684:	8bfb      	ldrh	r3, [r7, #30]
 8007686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800768a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800768e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007696:	b29b      	uxth	r3, r3
 8007698:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800769a:	88fb      	ldrh	r3, [r7, #6]
 800769c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d11f      	bne.n	80076e4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	461a      	mov	r2, r3
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4413      	add	r3, r2
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076be:	83bb      	strh	r3, [r7, #28]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	441a      	add	r2, r3
 80076ce:	8bbb      	ldrh	r3, [r7, #28]
 80076d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80076e4:	8b7b      	ldrh	r3, [r7, #26]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d008      	beq.n	80076fc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6818      	ldr	r0, [r3, #0]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	6959      	ldr	r1, [r3, #20]
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	895a      	ldrh	r2, [r3, #10]
 80076f6:	8b7b      	ldrh	r3, [r7, #26]
 80076f8:	f005 f95a 	bl	800c9b0 <USB_ReadPMA>
    }
  }

  return count;
 80076fc:	8b7b      	ldrh	r3, [r7, #26]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3720      	adds	r7, #32
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b0a2      	sub	sp, #136	; 0x88
 800770a:	af00      	add	r7, sp, #0
 800770c:	60f8      	str	r0, [r7, #12]
 800770e:	60b9      	str	r1, [r7, #8]
 8007710:	4613      	mov	r3, r2
 8007712:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007714:	88fb      	ldrh	r3, [r7, #6]
 8007716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800771a:	2b00      	cmp	r3, #0
 800771c:	f000 81c5 	beq.w	8007aaa <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007728:	b29b      	uxth	r3, r3
 800772a:	461a      	mov	r2, r3
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	00db      	lsls	r3, r3, #3
 8007732:	4413      	add	r3, r2
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	6812      	ldr	r2, [r2, #0]
 8007738:	4413      	add	r3, r2
 800773a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800773e:	881b      	ldrh	r3, [r3, #0]
 8007740:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007744:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	699a      	ldr	r2, [r3, #24]
 800774c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007750:	429a      	cmp	r2, r3
 8007752:	d907      	bls.n	8007764 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	699a      	ldr	r2, [r3, #24]
 8007758:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800775c:	1ad2      	subs	r2, r2, r3
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	619a      	str	r2, [r3, #24]
 8007762:	e002      	b.n	800776a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2200      	movs	r2, #0
 8007768:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	2b00      	cmp	r3, #0
 8007770:	f040 80b9 	bne.w	80078e6 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	785b      	ldrb	r3, [r3, #1]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d126      	bne.n	80077ca <HAL_PCD_EP_DB_Transmit+0xc4>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	62bb      	str	r3, [r7, #40]	; 0x28
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800778a:	b29b      	uxth	r3, r3
 800778c:	461a      	mov	r2, r3
 800778e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007790:	4413      	add	r3, r2
 8007792:	62bb      	str	r3, [r7, #40]	; 0x28
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	00da      	lsls	r2, r3, #3
 800779a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779c:	4413      	add	r3, r2
 800779e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077a2:	627b      	str	r3, [r7, #36]	; 0x24
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	801a      	strh	r2, [r3, #0]
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	801a      	strh	r2, [r3, #0]
 80077c8:	e01a      	b.n	8007800 <HAL_PCD_EP_DB_Transmit+0xfa>
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	785b      	ldrb	r3, [r3, #1]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d116      	bne.n	8007800 <HAL_PCD_EP_DB_Transmit+0xfa>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	633b      	str	r3, [r7, #48]	; 0x30
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	461a      	mov	r2, r3
 80077e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e6:	4413      	add	r3, r2
 80077e8:	633b      	str	r3, [r7, #48]	; 0x30
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	00da      	lsls	r2, r3, #3
 80077f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f2:	4413      	add	r3, r2
 80077f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fc:	2200      	movs	r2, #0
 80077fe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	623b      	str	r3, [r7, #32]
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	785b      	ldrb	r3, [r3, #1]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d126      	bne.n	800785c <HAL_PCD_EP_DB_Transmit+0x156>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	61bb      	str	r3, [r7, #24]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800781c:	b29b      	uxth	r3, r3
 800781e:	461a      	mov	r2, r3
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	4413      	add	r3, r2
 8007824:	61bb      	str	r3, [r7, #24]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	00da      	lsls	r2, r3, #3
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	4413      	add	r3, r2
 8007830:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007834:	617b      	str	r3, [r7, #20]
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	881b      	ldrh	r3, [r3, #0]
 800783a:	b29b      	uxth	r3, r3
 800783c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007840:	b29a      	uxth	r2, r3
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	801a      	strh	r2, [r3, #0]
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	b29b      	uxth	r3, r3
 800784c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007854:	b29a      	uxth	r2, r3
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	801a      	strh	r2, [r3, #0]
 800785a:	e017      	b.n	800788c <HAL_PCD_EP_DB_Transmit+0x186>
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	785b      	ldrb	r3, [r3, #1]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d113      	bne.n	800788c <HAL_PCD_EP_DB_Transmit+0x186>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800786c:	b29b      	uxth	r3, r3
 800786e:	461a      	mov	r2, r3
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	4413      	add	r3, r2
 8007874:	623b      	str	r3, [r7, #32]
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	00da      	lsls	r2, r3, #3
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	4413      	add	r3, r2
 8007880:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007884:	61fb      	str	r3, [r7, #28]
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	2200      	movs	r2, #0
 800788a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	4619      	mov	r1, r3
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f006 ff69 	bl	800e76a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007898:	88fb      	ldrh	r3, [r7, #6]
 800789a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f000 82d2 	beq.w	8007e48 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	461a      	mov	r2, r3
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078be:	827b      	strh	r3, [r7, #18]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	461a      	mov	r2, r3
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	441a      	add	r2, r3
 80078ce:	8a7b      	ldrh	r3, [r7, #18]
 80078d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	8013      	strh	r3, [r2, #0]
 80078e4:	e2b0      	b.n	8007e48 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80078e6:	88fb      	ldrh	r3, [r7, #6]
 80078e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d021      	beq.n	8007934 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	461a      	mov	r2, r3
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4413      	add	r3, r2
 80078fe:	881b      	ldrh	r3, [r3, #0]
 8007900:	b29b      	uxth	r3, r3
 8007902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800790a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	461a      	mov	r2, r3
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	441a      	add	r2, r3
 800791c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007920:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007924:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007928:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800792c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007930:	b29b      	uxth	r3, r3
 8007932:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800793a:	2b01      	cmp	r3, #1
 800793c:	f040 8284 	bne.w	8007e48 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	695a      	ldr	r2, [r3, #20]
 8007944:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007948:	441a      	add	r2, r3
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	69da      	ldr	r2, [r3, #28]
 8007952:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007956:	441a      	add	r2, r3
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	6a1a      	ldr	r2, [r3, #32]
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	429a      	cmp	r2, r3
 8007966:	d309      	bcc.n	800797c <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	6a1a      	ldr	r2, [r3, #32]
 8007972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007974:	1ad2      	subs	r2, r2, r3
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	621a      	str	r2, [r3, #32]
 800797a:	e015      	b.n	80079a8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d107      	bne.n	8007994 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8007984:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007988:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	2200      	movs	r2, #0
 800798e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007992:	e009      	b.n	80079a8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	6a1b      	ldr	r3, [r3, #32]
 80079a0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	2200      	movs	r2, #0
 80079a6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	785b      	ldrb	r3, [r3, #1]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d155      	bne.n	8007a5c <HAL_PCD_EP_DB_Transmit+0x356>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079be:	b29b      	uxth	r3, r3
 80079c0:	461a      	mov	r2, r3
 80079c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c4:	4413      	add	r3, r2
 80079c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	00da      	lsls	r2, r3, #3
 80079ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d0:	4413      	add	r3, r2
 80079d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079d6:	637b      	str	r3, [r7, #52]	; 0x34
 80079d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079da:	2b3e      	cmp	r3, #62	; 0x3e
 80079dc:	d916      	bls.n	8007a0c <HAL_PCD_EP_DB_Transmit+0x306>
 80079de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079e0:	095b      	lsrs	r3, r3, #5
 80079e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80079e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079e6:	f003 031f 	and.w	r3, r3, #31
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d102      	bne.n	80079f4 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80079ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079f0:	3b01      	subs	r3, #1
 80079f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80079f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	029b      	lsls	r3, r3, #10
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a08:	801a      	strh	r2, [r3, #0]
 8007a0a:	e043      	b.n	8007a94 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d112      	bne.n	8007a38 <HAL_PCD_EP_DB_Transmit+0x332>
 8007a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a14:	881b      	ldrh	r3, [r3, #0]
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a20:	801a      	strh	r2, [r3, #0]
 8007a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a34:	801a      	strh	r2, [r3, #0]
 8007a36:	e02d      	b.n	8007a94 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a3a:	085b      	lsrs	r3, r3, #1
 8007a3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a40:	f003 0301 	and.w	r3, r3, #1
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d002      	beq.n	8007a4e <HAL_PCD_EP_DB_Transmit+0x348>
 8007a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	029b      	lsls	r3, r3, #10
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a58:	801a      	strh	r2, [r3, #0]
 8007a5a:	e01b      	b.n	8007a94 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	785b      	ldrb	r3, [r3, #1]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d117      	bne.n	8007a94 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	643b      	str	r3, [r7, #64]	; 0x40
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	461a      	mov	r2, r3
 8007a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a78:	4413      	add	r3, r2
 8007a7a:	643b      	str	r3, [r7, #64]	; 0x40
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	00da      	lsls	r2, r3, #3
 8007a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a84:	4413      	add	r3, r2
 8007a86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a92:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6818      	ldr	r0, [r3, #0]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	6959      	ldr	r1, [r3, #20]
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	891a      	ldrh	r2, [r3, #8]
 8007aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	f004 ff42 	bl	800c92c <USB_WritePMA>
 8007aa8:	e1ce      	b.n	8007e48 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	00db      	lsls	r3, r3, #3
 8007abc:	4413      	add	r3, r2
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	6812      	ldr	r2, [r2, #0]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ac8:	881b      	ldrh	r3, [r3, #0]
 8007aca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ace:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	699a      	ldr	r2, [r3, #24]
 8007ad6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d307      	bcc.n	8007aee <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	699a      	ldr	r2, [r3, #24]
 8007ae2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ae6:	1ad2      	subs	r2, r2, r3
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	619a      	str	r2, [r3, #24]
 8007aec:	e002      	b.n	8007af4 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2200      	movs	r2, #0
 8007af2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f040 80c4 	bne.w	8007c86 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	785b      	ldrb	r3, [r3, #1]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d126      	bne.n	8007b54 <HAL_PCD_EP_DB_Transmit+0x44e>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	461a      	mov	r2, r3
 8007b18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b1a:	4413      	add	r3, r2
 8007b1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	00da      	lsls	r2, r3, #3
 8007b24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b26:	4413      	add	r3, r2
 8007b28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b2c:	667b      	str	r3, [r7, #100]	; 0x64
 8007b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b30:	881b      	ldrh	r3, [r3, #0]
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b3c:	801a      	strh	r2, [r3, #0]
 8007b3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b50:	801a      	strh	r2, [r3, #0]
 8007b52:	e01a      	b.n	8007b8a <HAL_PCD_EP_DB_Transmit+0x484>
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	785b      	ldrb	r3, [r3, #1]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d116      	bne.n	8007b8a <HAL_PCD_EP_DB_Transmit+0x484>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	673b      	str	r3, [r7, #112]	; 0x70
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b70:	4413      	add	r3, r2
 8007b72:	673b      	str	r3, [r7, #112]	; 0x70
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	00da      	lsls	r2, r3, #3
 8007b7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b86:	2200      	movs	r2, #0
 8007b88:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	785b      	ldrb	r3, [r3, #1]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d12f      	bne.n	8007bf8 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	461a      	mov	r2, r3
 8007bac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bb0:	4413      	add	r3, r2
 8007bb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	00da      	lsls	r2, r3, #3
 8007bbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007bc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007bce:	881b      	ldrh	r3, [r3, #0]
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007bdc:	801a      	strh	r2, [r3, #0]
 8007bde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007be2:	881b      	ldrh	r3, [r3, #0]
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007bf4:	801a      	strh	r2, [r3, #0]
 8007bf6:	e017      	b.n	8007c28 <HAL_PCD_EP_DB_Transmit+0x522>
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	785b      	ldrb	r3, [r3, #1]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d113      	bne.n	8007c28 <HAL_PCD_EP_DB_Transmit+0x522>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c0e:	4413      	add	r3, r2
 8007c10:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	00da      	lsls	r2, r3, #3
 8007c18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c20:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c24:	2200      	movs	r2, #0
 8007c26:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f006 fd9b 	bl	800e76a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007c34:	88fb      	ldrh	r3, [r7, #6]
 8007c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f040 8104 	bne.w	8007e48 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	461a      	mov	r2, r3
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4413      	add	r3, r2
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c5a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	461a      	mov	r2, r3
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	441a      	add	r2, r3
 8007c6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	8013      	strh	r3, [r2, #0]
 8007c84:	e0e0      	b.n	8007e48 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007c86:	88fb      	ldrh	r3, [r7, #6]
 8007c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d121      	bne.n	8007cd4 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	461a      	mov	r2, r3
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007caa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	441a      	add	r2, r3
 8007cbc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007cc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	f040 80b4 	bne.w	8007e48 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	695a      	ldr	r2, [r3, #20]
 8007ce4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ce8:	441a      	add	r2, r3
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	69da      	ldr	r2, [r3, #28]
 8007cf2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007cf6:	441a      	add	r2, r3
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	6a1a      	ldr	r2, [r3, #32]
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d309      	bcc.n	8007d1c <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	6a1a      	ldr	r2, [r3, #32]
 8007d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d14:	1ad2      	subs	r2, r2, r3
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	621a      	str	r2, [r3, #32]
 8007d1a:	e015      	b.n	8007d48 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d107      	bne.n	8007d34 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8007d24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d28:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007d32:	e009      	b.n	8007d48 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	6a1b      	ldr	r3, [r3, #32]
 8007d38:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	663b      	str	r3, [r7, #96]	; 0x60
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	785b      	ldrb	r3, [r3, #1]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d155      	bne.n	8007e02 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	461a      	mov	r2, r3
 8007d68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d6a:	4413      	add	r3, r2
 8007d6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	00da      	lsls	r2, r3, #3
 8007d74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d76:	4413      	add	r3, r2
 8007d78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d7c:	657b      	str	r3, [r7, #84]	; 0x54
 8007d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d80:	2b3e      	cmp	r3, #62	; 0x3e
 8007d82:	d916      	bls.n	8007db2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8007d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d86:	095b      	lsrs	r3, r3, #5
 8007d88:	677b      	str	r3, [r7, #116]	; 0x74
 8007d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d8c:	f003 031f 	and.w	r3, r3, #31
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d102      	bne.n	8007d9a <HAL_PCD_EP_DB_Transmit+0x694>
 8007d94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d96:	3b01      	subs	r3, #1
 8007d98:	677b      	str	r3, [r7, #116]	; 0x74
 8007d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	029b      	lsls	r3, r3, #10
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dae:	801a      	strh	r2, [r3, #0]
 8007db0:	e040      	b.n	8007e34 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d112      	bne.n	8007dde <HAL_PCD_EP_DB_Transmit+0x6d8>
 8007db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dba:	881b      	ldrh	r3, [r3, #0]
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dc6:	801a      	strh	r2, [r3, #0]
 8007dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dca:	881b      	ldrh	r3, [r3, #0]
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dda:	801a      	strh	r2, [r3, #0]
 8007ddc:	e02a      	b.n	8007e34 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007de0:	085b      	lsrs	r3, r3, #1
 8007de2:	677b      	str	r3, [r7, #116]	; 0x74
 8007de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007de6:	f003 0301 	and.w	r3, r3, #1
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d002      	beq.n	8007df4 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8007dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007df0:	3301      	adds	r3, #1
 8007df2:	677b      	str	r3, [r7, #116]	; 0x74
 8007df4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	029b      	lsls	r3, r3, #10
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dfe:	801a      	strh	r2, [r3, #0]
 8007e00:	e018      	b.n	8007e34 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	785b      	ldrb	r3, [r3, #1]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d114      	bne.n	8007e34 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	461a      	mov	r2, r3
 8007e16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e18:	4413      	add	r3, r2
 8007e1a:	663b      	str	r3, [r7, #96]	; 0x60
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	00da      	lsls	r2, r3, #3
 8007e22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e24:	4413      	add	r3, r2
 8007e26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e32:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6818      	ldr	r0, [r3, #0]
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	6959      	ldr	r1, [r3, #20]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	895a      	ldrh	r2, [r3, #10]
 8007e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	f004 fd72 	bl	800c92c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4413      	add	r3, r2
 8007e56:	881b      	ldrh	r3, [r3, #0]
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e62:	823b      	strh	r3, [r7, #16]
 8007e64:	8a3b      	ldrh	r3, [r7, #16]
 8007e66:	f083 0310 	eor.w	r3, r3, #16
 8007e6a:	823b      	strh	r3, [r7, #16]
 8007e6c:	8a3b      	ldrh	r3, [r7, #16]
 8007e6e:	f083 0320 	eor.w	r3, r3, #32
 8007e72:	823b      	strh	r3, [r7, #16]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	461a      	mov	r2, r3
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	441a      	add	r2, r3
 8007e82:	8a3b      	ldrh	r3, [r7, #16]
 8007e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3788      	adds	r7, #136	; 0x88
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b087      	sub	sp, #28
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	607b      	str	r3, [r7, #4]
 8007eac:	460b      	mov	r3, r1
 8007eae:	817b      	strh	r3, [r7, #10]
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007eb4:	897b      	ldrh	r3, [r7, #10]
 8007eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00c      	beq.n	8007eda <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ec0:	897b      	ldrh	r3, [r7, #10]
 8007ec2:	f003 0307 	and.w	r3, r3, #7
 8007ec6:	1c5a      	adds	r2, r3, #1
 8007ec8:	4613      	mov	r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4413      	add	r3, r2
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	617b      	str	r3, [r7, #20]
 8007ed8:	e00a      	b.n	8007ef0 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007eda:	897a      	ldrh	r2, [r7, #10]
 8007edc:	4613      	mov	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4413      	add	r3, r2
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	4413      	add	r3, r2
 8007eec:	3304      	adds	r3, #4
 8007eee:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007ef0:	893b      	ldrh	r3, [r7, #8]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d107      	bne.n	8007f06 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	80da      	strh	r2, [r3, #6]
 8007f04:	e00b      	b.n	8007f1e <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	0c1b      	lsrs	r3, r3, #16
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	371c      	adds	r7, #28
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	f043 0301 	orr.w	r3, r3, #1
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	f043 0302 	orr.w	r3, r3, #2
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007f9c:	4b04      	ldr	r3, [pc, #16]	; (8007fb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	40007000 	.word	0x40007000

08007fb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fc2:	d130      	bne.n	8008026 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007fc4:	4b23      	ldr	r3, [pc, #140]	; (8008054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fd0:	d038      	beq.n	8008044 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007fd2:	4b20      	ldr	r3, [pc, #128]	; (8008054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007fda:	4a1e      	ldr	r2, [pc, #120]	; (8008054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007fdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007fe0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007fe2:	4b1d      	ldr	r3, [pc, #116]	; (8008058 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2232      	movs	r2, #50	; 0x32
 8007fe8:	fb02 f303 	mul.w	r3, r2, r3
 8007fec:	4a1b      	ldr	r2, [pc, #108]	; (800805c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007fee:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff2:	0c9b      	lsrs	r3, r3, #18
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ff8:	e002      	b.n	8008000 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008000:	4b14      	ldr	r3, [pc, #80]	; (8008054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800800c:	d102      	bne.n	8008014 <HAL_PWREx_ControlVoltageScaling+0x60>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1f2      	bne.n	8007ffa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008014:	4b0f      	ldr	r3, [pc, #60]	; (8008054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008016:	695b      	ldr	r3, [r3, #20]
 8008018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800801c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008020:	d110      	bne.n	8008044 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e00f      	b.n	8008046 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008026:	4b0b      	ldr	r3, [pc, #44]	; (8008054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800802e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008032:	d007      	beq.n	8008044 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008034:	4b07      	ldr	r3, [pc, #28]	; (8008054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800803c:	4a05      	ldr	r2, [pc, #20]	; (8008054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800803e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008042:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3714      	adds	r7, #20
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	40007000 	.word	0x40007000
 8008058:	20000000 	.word	0x20000000
 800805c:	431bde83 	.word	0x431bde83

08008060 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8008060:	b480      	push	{r7}
 8008062:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8008064:	4b05      	ldr	r3, [pc, #20]	; (800807c <HAL_PWREx_EnableVddUSB+0x1c>)
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	4a04      	ldr	r2, [pc, #16]	; (800807c <HAL_PWREx_EnableVddUSB+0x1c>)
 800806a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800806e:	6053      	str	r3, [r2, #4]
}
 8008070:	bf00      	nop
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	40007000 	.word	0x40007000

08008080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b088      	sub	sp, #32
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d102      	bne.n	8008094 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	f000 bc02 	b.w	8008898 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008094:	4b96      	ldr	r3, [pc, #600]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	f003 030c 	and.w	r3, r3, #12
 800809c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800809e:	4b94      	ldr	r3, [pc, #592]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 0310 	and.w	r3, r3, #16
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 80e4 	beq.w	800827e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d007      	beq.n	80080cc <HAL_RCC_OscConfig+0x4c>
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	2b0c      	cmp	r3, #12
 80080c0:	f040 808b 	bne.w	80081da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	f040 8087 	bne.w	80081da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80080cc:	4b88      	ldr	r3, [pc, #544]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0302 	and.w	r3, r3, #2
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d005      	beq.n	80080e4 <HAL_RCC_OscConfig+0x64>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d101      	bne.n	80080e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e3d9      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a1a      	ldr	r2, [r3, #32]
 80080e8:	4b81      	ldr	r3, [pc, #516]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0308 	and.w	r3, r3, #8
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d004      	beq.n	80080fe <HAL_RCC_OscConfig+0x7e>
 80080f4:	4b7e      	ldr	r3, [pc, #504]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080fc:	e005      	b.n	800810a <HAL_RCC_OscConfig+0x8a>
 80080fe:	4b7c      	ldr	r3, [pc, #496]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 8008100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008104:	091b      	lsrs	r3, r3, #4
 8008106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800810a:	4293      	cmp	r3, r2
 800810c:	d223      	bcs.n	8008156 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	4618      	mov	r0, r3
 8008114:	f000 fd60 	bl	8008bd8 <RCC_SetFlashLatencyFromMSIRange>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d001      	beq.n	8008122 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e3ba      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008122:	4b73      	ldr	r3, [pc, #460]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a72      	ldr	r2, [pc, #456]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 8008128:	f043 0308 	orr.w	r3, r3, #8
 800812c:	6013      	str	r3, [r2, #0]
 800812e:	4b70      	ldr	r3, [pc, #448]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a1b      	ldr	r3, [r3, #32]
 800813a:	496d      	ldr	r1, [pc, #436]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 800813c:	4313      	orrs	r3, r2
 800813e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008140:	4b6b      	ldr	r3, [pc, #428]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	69db      	ldr	r3, [r3, #28]
 800814c:	021b      	lsls	r3, r3, #8
 800814e:	4968      	ldr	r1, [pc, #416]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 8008150:	4313      	orrs	r3, r2
 8008152:	604b      	str	r3, [r1, #4]
 8008154:	e025      	b.n	80081a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008156:	4b66      	ldr	r3, [pc, #408]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a65      	ldr	r2, [pc, #404]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 800815c:	f043 0308 	orr.w	r3, r3, #8
 8008160:	6013      	str	r3, [r2, #0]
 8008162:	4b63      	ldr	r3, [pc, #396]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	4960      	ldr	r1, [pc, #384]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 8008170:	4313      	orrs	r3, r2
 8008172:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008174:	4b5e      	ldr	r3, [pc, #376]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	69db      	ldr	r3, [r3, #28]
 8008180:	021b      	lsls	r3, r3, #8
 8008182:	495b      	ldr	r1, [pc, #364]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 8008184:	4313      	orrs	r3, r2
 8008186:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d109      	bne.n	80081a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	4618      	mov	r0, r3
 8008194:	f000 fd20 	bl	8008bd8 <RCC_SetFlashLatencyFromMSIRange>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e37a      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80081a2:	f000 fc81 	bl	8008aa8 <HAL_RCC_GetSysClockFreq>
 80081a6:	4602      	mov	r2, r0
 80081a8:	4b51      	ldr	r3, [pc, #324]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	091b      	lsrs	r3, r3, #4
 80081ae:	f003 030f 	and.w	r3, r3, #15
 80081b2:	4950      	ldr	r1, [pc, #320]	; (80082f4 <HAL_RCC_OscConfig+0x274>)
 80081b4:	5ccb      	ldrb	r3, [r1, r3]
 80081b6:	f003 031f 	and.w	r3, r3, #31
 80081ba:	fa22 f303 	lsr.w	r3, r2, r3
 80081be:	4a4e      	ldr	r2, [pc, #312]	; (80082f8 <HAL_RCC_OscConfig+0x278>)
 80081c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80081c2:	4b4e      	ldr	r3, [pc, #312]	; (80082fc <HAL_RCC_OscConfig+0x27c>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fc f93e 	bl	8004448 <HAL_InitTick>
 80081cc:	4603      	mov	r3, r0
 80081ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d052      	beq.n	800827c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
 80081d8:	e35e      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d032      	beq.n	8008248 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80081e2:	4b43      	ldr	r3, [pc, #268]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a42      	ldr	r2, [pc, #264]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 80081e8:	f043 0301 	orr.w	r3, r3, #1
 80081ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80081ee:	f7fc f97b 	bl	80044e8 <HAL_GetTick>
 80081f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80081f4:	e008      	b.n	8008208 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80081f6:	f7fc f977 	bl	80044e8 <HAL_GetTick>
 80081fa:	4602      	mov	r2, r0
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	2b02      	cmp	r3, #2
 8008202:	d901      	bls.n	8008208 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008204:	2303      	movs	r3, #3
 8008206:	e347      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008208:	4b39      	ldr	r3, [pc, #228]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0302 	and.w	r3, r3, #2
 8008210:	2b00      	cmp	r3, #0
 8008212:	d0f0      	beq.n	80081f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008214:	4b36      	ldr	r3, [pc, #216]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a35      	ldr	r2, [pc, #212]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 800821a:	f043 0308 	orr.w	r3, r3, #8
 800821e:	6013      	str	r3, [r2, #0]
 8008220:	4b33      	ldr	r3, [pc, #204]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a1b      	ldr	r3, [r3, #32]
 800822c:	4930      	ldr	r1, [pc, #192]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 800822e:	4313      	orrs	r3, r2
 8008230:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008232:	4b2f      	ldr	r3, [pc, #188]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	69db      	ldr	r3, [r3, #28]
 800823e:	021b      	lsls	r3, r3, #8
 8008240:	492b      	ldr	r1, [pc, #172]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 8008242:	4313      	orrs	r3, r2
 8008244:	604b      	str	r3, [r1, #4]
 8008246:	e01a      	b.n	800827e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008248:	4b29      	ldr	r3, [pc, #164]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a28      	ldr	r2, [pc, #160]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 800824e:	f023 0301 	bic.w	r3, r3, #1
 8008252:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008254:	f7fc f948 	bl	80044e8 <HAL_GetTick>
 8008258:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800825a:	e008      	b.n	800826e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800825c:	f7fc f944 	bl	80044e8 <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	2b02      	cmp	r3, #2
 8008268:	d901      	bls.n	800826e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e314      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800826e:	4b20      	ldr	r3, [pc, #128]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 0302 	and.w	r3, r3, #2
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1f0      	bne.n	800825c <HAL_RCC_OscConfig+0x1dc>
 800827a:	e000      	b.n	800827e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800827c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	2b00      	cmp	r3, #0
 8008288:	d073      	beq.n	8008372 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	2b08      	cmp	r3, #8
 800828e:	d005      	beq.n	800829c <HAL_RCC_OscConfig+0x21c>
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	2b0c      	cmp	r3, #12
 8008294:	d10e      	bne.n	80082b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	2b03      	cmp	r3, #3
 800829a:	d10b      	bne.n	80082b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800829c:	4b14      	ldr	r3, [pc, #80]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d063      	beq.n	8008370 <HAL_RCC_OscConfig+0x2f0>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d15f      	bne.n	8008370 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e2f1      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082bc:	d106      	bne.n	80082cc <HAL_RCC_OscConfig+0x24c>
 80082be:	4b0c      	ldr	r3, [pc, #48]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a0b      	ldr	r2, [pc, #44]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 80082c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082c8:	6013      	str	r3, [r2, #0]
 80082ca:	e025      	b.n	8008318 <HAL_RCC_OscConfig+0x298>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80082d4:	d114      	bne.n	8008300 <HAL_RCC_OscConfig+0x280>
 80082d6:	4b06      	ldr	r3, [pc, #24]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a05      	ldr	r2, [pc, #20]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 80082dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082e0:	6013      	str	r3, [r2, #0]
 80082e2:	4b03      	ldr	r3, [pc, #12]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a02      	ldr	r2, [pc, #8]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 80082e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082ec:	6013      	str	r3, [r2, #0]
 80082ee:	e013      	b.n	8008318 <HAL_RCC_OscConfig+0x298>
 80082f0:	40021000 	.word	0x40021000
 80082f4:	0800f0ec 	.word	0x0800f0ec
 80082f8:	20000000 	.word	0x20000000
 80082fc:	20000004 	.word	0x20000004
 8008300:	4ba0      	ldr	r3, [pc, #640]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a9f      	ldr	r2, [pc, #636]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 8008306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800830a:	6013      	str	r3, [r2, #0]
 800830c:	4b9d      	ldr	r3, [pc, #628]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a9c      	ldr	r2, [pc, #624]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 8008312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d013      	beq.n	8008348 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008320:	f7fc f8e2 	bl	80044e8 <HAL_GetTick>
 8008324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008326:	e008      	b.n	800833a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008328:	f7fc f8de 	bl	80044e8 <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	2b64      	cmp	r3, #100	; 0x64
 8008334:	d901      	bls.n	800833a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e2ae      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800833a:	4b92      	ldr	r3, [pc, #584]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d0f0      	beq.n	8008328 <HAL_RCC_OscConfig+0x2a8>
 8008346:	e014      	b.n	8008372 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008348:	f7fc f8ce 	bl	80044e8 <HAL_GetTick>
 800834c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800834e:	e008      	b.n	8008362 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008350:	f7fc f8ca 	bl	80044e8 <HAL_GetTick>
 8008354:	4602      	mov	r2, r0
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	2b64      	cmp	r3, #100	; 0x64
 800835c:	d901      	bls.n	8008362 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800835e:	2303      	movs	r3, #3
 8008360:	e29a      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008362:	4b88      	ldr	r3, [pc, #544]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1f0      	bne.n	8008350 <HAL_RCC_OscConfig+0x2d0>
 800836e:	e000      	b.n	8008372 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 0302 	and.w	r3, r3, #2
 800837a:	2b00      	cmp	r3, #0
 800837c:	d060      	beq.n	8008440 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	2b04      	cmp	r3, #4
 8008382:	d005      	beq.n	8008390 <HAL_RCC_OscConfig+0x310>
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	2b0c      	cmp	r3, #12
 8008388:	d119      	bne.n	80083be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	2b02      	cmp	r3, #2
 800838e:	d116      	bne.n	80083be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008390:	4b7c      	ldr	r3, [pc, #496]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008398:	2b00      	cmp	r3, #0
 800839a:	d005      	beq.n	80083a8 <HAL_RCC_OscConfig+0x328>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e277      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083a8:	4b76      	ldr	r3, [pc, #472]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	061b      	lsls	r3, r3, #24
 80083b6:	4973      	ldr	r1, [pc, #460]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 80083b8:	4313      	orrs	r3, r2
 80083ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083bc:	e040      	b.n	8008440 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d023      	beq.n	800840e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80083c6:	4b6f      	ldr	r3, [pc, #444]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a6e      	ldr	r2, [pc, #440]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 80083cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083d2:	f7fc f889 	bl	80044e8 <HAL_GetTick>
 80083d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80083d8:	e008      	b.n	80083ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083da:	f7fc f885 	bl	80044e8 <HAL_GetTick>
 80083de:	4602      	mov	r2, r0
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d901      	bls.n	80083ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80083e8:	2303      	movs	r3, #3
 80083ea:	e255      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80083ec:	4b65      	ldr	r3, [pc, #404]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d0f0      	beq.n	80083da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083f8:	4b62      	ldr	r3, [pc, #392]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	061b      	lsls	r3, r3, #24
 8008406:	495f      	ldr	r1, [pc, #380]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 8008408:	4313      	orrs	r3, r2
 800840a:	604b      	str	r3, [r1, #4]
 800840c:	e018      	b.n	8008440 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800840e:	4b5d      	ldr	r3, [pc, #372]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a5c      	ldr	r2, [pc, #368]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 8008414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800841a:	f7fc f865 	bl	80044e8 <HAL_GetTick>
 800841e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008420:	e008      	b.n	8008434 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008422:	f7fc f861 	bl	80044e8 <HAL_GetTick>
 8008426:	4602      	mov	r2, r0
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	2b02      	cmp	r3, #2
 800842e:	d901      	bls.n	8008434 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	e231      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008434:	4b53      	ldr	r3, [pc, #332]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1f0      	bne.n	8008422 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0308 	and.w	r3, r3, #8
 8008448:	2b00      	cmp	r3, #0
 800844a:	d03c      	beq.n	80084c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	695b      	ldr	r3, [r3, #20]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d01c      	beq.n	800848e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008454:	4b4b      	ldr	r3, [pc, #300]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 8008456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800845a:	4a4a      	ldr	r2, [pc, #296]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 800845c:	f043 0301 	orr.w	r3, r3, #1
 8008460:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008464:	f7fc f840 	bl	80044e8 <HAL_GetTick>
 8008468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800846a:	e008      	b.n	800847e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800846c:	f7fc f83c 	bl	80044e8 <HAL_GetTick>
 8008470:	4602      	mov	r2, r0
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	2b02      	cmp	r3, #2
 8008478:	d901      	bls.n	800847e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800847a:	2303      	movs	r3, #3
 800847c:	e20c      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800847e:	4b41      	ldr	r3, [pc, #260]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 8008480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008484:	f003 0302 	and.w	r3, r3, #2
 8008488:	2b00      	cmp	r3, #0
 800848a:	d0ef      	beq.n	800846c <HAL_RCC_OscConfig+0x3ec>
 800848c:	e01b      	b.n	80084c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800848e:	4b3d      	ldr	r3, [pc, #244]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 8008490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008494:	4a3b      	ldr	r2, [pc, #236]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 8008496:	f023 0301 	bic.w	r3, r3, #1
 800849a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800849e:	f7fc f823 	bl	80044e8 <HAL_GetTick>
 80084a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80084a4:	e008      	b.n	80084b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084a6:	f7fc f81f 	bl	80044e8 <HAL_GetTick>
 80084aa:	4602      	mov	r2, r0
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d901      	bls.n	80084b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e1ef      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80084b8:	4b32      	ldr	r3, [pc, #200]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 80084ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084be:	f003 0302 	and.w	r3, r3, #2
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1ef      	bne.n	80084a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0304 	and.w	r3, r3, #4
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f000 80a6 	beq.w	8008620 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80084d4:	2300      	movs	r3, #0
 80084d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80084d8:	4b2a      	ldr	r3, [pc, #168]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 80084da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10d      	bne.n	8008500 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084e4:	4b27      	ldr	r3, [pc, #156]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 80084e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e8:	4a26      	ldr	r2, [pc, #152]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 80084ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084ee:	6593      	str	r3, [r2, #88]	; 0x58
 80084f0:	4b24      	ldr	r3, [pc, #144]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 80084f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084f8:	60bb      	str	r3, [r7, #8]
 80084fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084fc:	2301      	movs	r3, #1
 80084fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008500:	4b21      	ldr	r3, [pc, #132]	; (8008588 <HAL_RCC_OscConfig+0x508>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008508:	2b00      	cmp	r3, #0
 800850a:	d118      	bne.n	800853e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800850c:	4b1e      	ldr	r3, [pc, #120]	; (8008588 <HAL_RCC_OscConfig+0x508>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a1d      	ldr	r2, [pc, #116]	; (8008588 <HAL_RCC_OscConfig+0x508>)
 8008512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008516:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008518:	f7fb ffe6 	bl	80044e8 <HAL_GetTick>
 800851c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800851e:	e008      	b.n	8008532 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008520:	f7fb ffe2 	bl	80044e8 <HAL_GetTick>
 8008524:	4602      	mov	r2, r0
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	2b02      	cmp	r3, #2
 800852c:	d901      	bls.n	8008532 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800852e:	2303      	movs	r3, #3
 8008530:	e1b2      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008532:	4b15      	ldr	r3, [pc, #84]	; (8008588 <HAL_RCC_OscConfig+0x508>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800853a:	2b00      	cmp	r3, #0
 800853c:	d0f0      	beq.n	8008520 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d108      	bne.n	8008558 <HAL_RCC_OscConfig+0x4d8>
 8008546:	4b0f      	ldr	r3, [pc, #60]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 8008548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800854c:	4a0d      	ldr	r2, [pc, #52]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 800854e:	f043 0301 	orr.w	r3, r3, #1
 8008552:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008556:	e029      	b.n	80085ac <HAL_RCC_OscConfig+0x52c>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	2b05      	cmp	r3, #5
 800855e:	d115      	bne.n	800858c <HAL_RCC_OscConfig+0x50c>
 8008560:	4b08      	ldr	r3, [pc, #32]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 8008562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008566:	4a07      	ldr	r2, [pc, #28]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 8008568:	f043 0304 	orr.w	r3, r3, #4
 800856c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008570:	4b04      	ldr	r3, [pc, #16]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 8008572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008576:	4a03      	ldr	r2, [pc, #12]	; (8008584 <HAL_RCC_OscConfig+0x504>)
 8008578:	f043 0301 	orr.w	r3, r3, #1
 800857c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008580:	e014      	b.n	80085ac <HAL_RCC_OscConfig+0x52c>
 8008582:	bf00      	nop
 8008584:	40021000 	.word	0x40021000
 8008588:	40007000 	.word	0x40007000
 800858c:	4b9a      	ldr	r3, [pc, #616]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 800858e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008592:	4a99      	ldr	r2, [pc, #612]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 8008594:	f023 0301 	bic.w	r3, r3, #1
 8008598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800859c:	4b96      	ldr	r3, [pc, #600]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 800859e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085a2:	4a95      	ldr	r2, [pc, #596]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 80085a4:	f023 0304 	bic.w	r3, r3, #4
 80085a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d016      	beq.n	80085e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085b4:	f7fb ff98 	bl	80044e8 <HAL_GetTick>
 80085b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085ba:	e00a      	b.n	80085d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085bc:	f7fb ff94 	bl	80044e8 <HAL_GetTick>
 80085c0:	4602      	mov	r2, r0
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d901      	bls.n	80085d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e162      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085d2:	4b89      	ldr	r3, [pc, #548]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 80085d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085d8:	f003 0302 	and.w	r3, r3, #2
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d0ed      	beq.n	80085bc <HAL_RCC_OscConfig+0x53c>
 80085e0:	e015      	b.n	800860e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085e2:	f7fb ff81 	bl	80044e8 <HAL_GetTick>
 80085e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80085e8:	e00a      	b.n	8008600 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085ea:	f7fb ff7d 	bl	80044e8 <HAL_GetTick>
 80085ee:	4602      	mov	r2, r0
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d901      	bls.n	8008600 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e14b      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008600:	4b7d      	ldr	r3, [pc, #500]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 8008602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008606:	f003 0302 	and.w	r3, r3, #2
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1ed      	bne.n	80085ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800860e:	7ffb      	ldrb	r3, [r7, #31]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d105      	bne.n	8008620 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008614:	4b78      	ldr	r3, [pc, #480]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 8008616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008618:	4a77      	ldr	r2, [pc, #476]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 800861a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800861e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0320 	and.w	r3, r3, #32
 8008628:	2b00      	cmp	r3, #0
 800862a:	d03c      	beq.n	80086a6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008630:	2b00      	cmp	r3, #0
 8008632:	d01c      	beq.n	800866e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008634:	4b70      	ldr	r3, [pc, #448]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 8008636:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800863a:	4a6f      	ldr	r2, [pc, #444]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 800863c:	f043 0301 	orr.w	r3, r3, #1
 8008640:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008644:	f7fb ff50 	bl	80044e8 <HAL_GetTick>
 8008648:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800864a:	e008      	b.n	800865e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800864c:	f7fb ff4c 	bl	80044e8 <HAL_GetTick>
 8008650:	4602      	mov	r2, r0
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	2b02      	cmp	r3, #2
 8008658:	d901      	bls.n	800865e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e11c      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800865e:	4b66      	ldr	r3, [pc, #408]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 8008660:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008664:	f003 0302 	and.w	r3, r3, #2
 8008668:	2b00      	cmp	r3, #0
 800866a:	d0ef      	beq.n	800864c <HAL_RCC_OscConfig+0x5cc>
 800866c:	e01b      	b.n	80086a6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800866e:	4b62      	ldr	r3, [pc, #392]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 8008670:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008674:	4a60      	ldr	r2, [pc, #384]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 8008676:	f023 0301 	bic.w	r3, r3, #1
 800867a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800867e:	f7fb ff33 	bl	80044e8 <HAL_GetTick>
 8008682:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008684:	e008      	b.n	8008698 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008686:	f7fb ff2f 	bl	80044e8 <HAL_GetTick>
 800868a:	4602      	mov	r2, r0
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	2b02      	cmp	r3, #2
 8008692:	d901      	bls.n	8008698 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	e0ff      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008698:	4b57      	ldr	r3, [pc, #348]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 800869a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800869e:	f003 0302 	and.w	r3, r3, #2
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1ef      	bne.n	8008686 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f000 80f3 	beq.w	8008896 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	f040 80c9 	bne.w	800884c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80086ba:	4b4f      	ldr	r3, [pc, #316]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	f003 0203 	and.w	r2, r3, #3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d12c      	bne.n	8008728 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d8:	3b01      	subs	r3, #1
 80086da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80086dc:	429a      	cmp	r2, r3
 80086de:	d123      	bne.n	8008728 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d11b      	bne.n	8008728 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d113      	bne.n	8008728 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800870a:	085b      	lsrs	r3, r3, #1
 800870c:	3b01      	subs	r3, #1
 800870e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008710:	429a      	cmp	r2, r3
 8008712:	d109      	bne.n	8008728 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871e:	085b      	lsrs	r3, r3, #1
 8008720:	3b01      	subs	r3, #1
 8008722:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008724:	429a      	cmp	r2, r3
 8008726:	d06b      	beq.n	8008800 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	2b0c      	cmp	r3, #12
 800872c:	d062      	beq.n	80087f4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800872e:	4b32      	ldr	r3, [pc, #200]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e0ac      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800873e:	4b2e      	ldr	r3, [pc, #184]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a2d      	ldr	r2, [pc, #180]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 8008744:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008748:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800874a:	f7fb fecd 	bl	80044e8 <HAL_GetTick>
 800874e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008750:	e008      	b.n	8008764 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008752:	f7fb fec9 	bl	80044e8 <HAL_GetTick>
 8008756:	4602      	mov	r2, r0
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	2b02      	cmp	r3, #2
 800875e:	d901      	bls.n	8008764 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8008760:	2303      	movs	r3, #3
 8008762:	e099      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008764:	4b24      	ldr	r3, [pc, #144]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1f0      	bne.n	8008752 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008770:	4b21      	ldr	r3, [pc, #132]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 8008772:	68da      	ldr	r2, [r3, #12]
 8008774:	4b21      	ldr	r3, [pc, #132]	; (80087fc <HAL_RCC_OscConfig+0x77c>)
 8008776:	4013      	ands	r3, r2
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008780:	3a01      	subs	r2, #1
 8008782:	0112      	lsls	r2, r2, #4
 8008784:	4311      	orrs	r1, r2
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800878a:	0212      	lsls	r2, r2, #8
 800878c:	4311      	orrs	r1, r2
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008792:	0852      	lsrs	r2, r2, #1
 8008794:	3a01      	subs	r2, #1
 8008796:	0552      	lsls	r2, r2, #21
 8008798:	4311      	orrs	r1, r2
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800879e:	0852      	lsrs	r2, r2, #1
 80087a0:	3a01      	subs	r2, #1
 80087a2:	0652      	lsls	r2, r2, #25
 80087a4:	4311      	orrs	r1, r2
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80087aa:	06d2      	lsls	r2, r2, #27
 80087ac:	430a      	orrs	r2, r1
 80087ae:	4912      	ldr	r1, [pc, #72]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80087b4:	4b10      	ldr	r3, [pc, #64]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a0f      	ldr	r2, [pc, #60]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 80087ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80087c0:	4b0d      	ldr	r3, [pc, #52]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	4a0c      	ldr	r2, [pc, #48]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 80087c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80087cc:	f7fb fe8c 	bl	80044e8 <HAL_GetTick>
 80087d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087d2:	e008      	b.n	80087e6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087d4:	f7fb fe88 	bl	80044e8 <HAL_GetTick>
 80087d8:	4602      	mov	r2, r0
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d901      	bls.n	80087e6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80087e2:	2303      	movs	r3, #3
 80087e4:	e058      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087e6:	4b04      	ldr	r3, [pc, #16]	; (80087f8 <HAL_RCC_OscConfig+0x778>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d0f0      	beq.n	80087d4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80087f2:	e050      	b.n	8008896 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e04f      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
 80087f8:	40021000 	.word	0x40021000
 80087fc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008800:	4b27      	ldr	r3, [pc, #156]	; (80088a0 <HAL_RCC_OscConfig+0x820>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008808:	2b00      	cmp	r3, #0
 800880a:	d144      	bne.n	8008896 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800880c:	4b24      	ldr	r3, [pc, #144]	; (80088a0 <HAL_RCC_OscConfig+0x820>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a23      	ldr	r2, [pc, #140]	; (80088a0 <HAL_RCC_OscConfig+0x820>)
 8008812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008816:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008818:	4b21      	ldr	r3, [pc, #132]	; (80088a0 <HAL_RCC_OscConfig+0x820>)
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	4a20      	ldr	r2, [pc, #128]	; (80088a0 <HAL_RCC_OscConfig+0x820>)
 800881e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008822:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008824:	f7fb fe60 	bl	80044e8 <HAL_GetTick>
 8008828:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800882a:	e008      	b.n	800883e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800882c:	f7fb fe5c 	bl	80044e8 <HAL_GetTick>
 8008830:	4602      	mov	r2, r0
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	2b02      	cmp	r3, #2
 8008838:	d901      	bls.n	800883e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e02c      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800883e:	4b18      	ldr	r3, [pc, #96]	; (80088a0 <HAL_RCC_OscConfig+0x820>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d0f0      	beq.n	800882c <HAL_RCC_OscConfig+0x7ac>
 800884a:	e024      	b.n	8008896 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	2b0c      	cmp	r3, #12
 8008850:	d01f      	beq.n	8008892 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008852:	4b13      	ldr	r3, [pc, #76]	; (80088a0 <HAL_RCC_OscConfig+0x820>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a12      	ldr	r2, [pc, #72]	; (80088a0 <HAL_RCC_OscConfig+0x820>)
 8008858:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800885c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800885e:	f7fb fe43 	bl	80044e8 <HAL_GetTick>
 8008862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008864:	e008      	b.n	8008878 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008866:	f7fb fe3f 	bl	80044e8 <HAL_GetTick>
 800886a:	4602      	mov	r2, r0
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	2b02      	cmp	r3, #2
 8008872:	d901      	bls.n	8008878 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8008874:	2303      	movs	r3, #3
 8008876:	e00f      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008878:	4b09      	ldr	r3, [pc, #36]	; (80088a0 <HAL_RCC_OscConfig+0x820>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008880:	2b00      	cmp	r3, #0
 8008882:	d1f0      	bne.n	8008866 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8008884:	4b06      	ldr	r3, [pc, #24]	; (80088a0 <HAL_RCC_OscConfig+0x820>)
 8008886:	68da      	ldr	r2, [r3, #12]
 8008888:	4905      	ldr	r1, [pc, #20]	; (80088a0 <HAL_RCC_OscConfig+0x820>)
 800888a:	4b06      	ldr	r3, [pc, #24]	; (80088a4 <HAL_RCC_OscConfig+0x824>)
 800888c:	4013      	ands	r3, r2
 800888e:	60cb      	str	r3, [r1, #12]
 8008890:	e001      	b.n	8008896 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e000      	b.n	8008898 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3720      	adds	r7, #32
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	40021000 	.word	0x40021000
 80088a4:	feeefffc 	.word	0xfeeefffc

080088a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d101      	bne.n	80088bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	e0e7      	b.n	8008a8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088bc:	4b75      	ldr	r3, [pc, #468]	; (8008a94 <HAL_RCC_ClockConfig+0x1ec>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0307 	and.w	r3, r3, #7
 80088c4:	683a      	ldr	r2, [r7, #0]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d910      	bls.n	80088ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088ca:	4b72      	ldr	r3, [pc, #456]	; (8008a94 <HAL_RCC_ClockConfig+0x1ec>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f023 0207 	bic.w	r2, r3, #7
 80088d2:	4970      	ldr	r1, [pc, #448]	; (8008a94 <HAL_RCC_ClockConfig+0x1ec>)
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088da:	4b6e      	ldr	r3, [pc, #440]	; (8008a94 <HAL_RCC_ClockConfig+0x1ec>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 0307 	and.w	r3, r3, #7
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d001      	beq.n	80088ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e0cf      	b.n	8008a8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0302 	and.w	r3, r3, #2
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d010      	beq.n	800891a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	689a      	ldr	r2, [r3, #8]
 80088fc:	4b66      	ldr	r3, [pc, #408]	; (8008a98 <HAL_RCC_ClockConfig+0x1f0>)
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008904:	429a      	cmp	r2, r3
 8008906:	d908      	bls.n	800891a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008908:	4b63      	ldr	r3, [pc, #396]	; (8008a98 <HAL_RCC_ClockConfig+0x1f0>)
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	4960      	ldr	r1, [pc, #384]	; (8008a98 <HAL_RCC_ClockConfig+0x1f0>)
 8008916:	4313      	orrs	r3, r2
 8008918:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	2b00      	cmp	r3, #0
 8008924:	d04c      	beq.n	80089c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	2b03      	cmp	r3, #3
 800892c:	d107      	bne.n	800893e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800892e:	4b5a      	ldr	r3, [pc, #360]	; (8008a98 <HAL_RCC_ClockConfig+0x1f0>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d121      	bne.n	800897e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e0a6      	b.n	8008a8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	2b02      	cmp	r3, #2
 8008944:	d107      	bne.n	8008956 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008946:	4b54      	ldr	r3, [pc, #336]	; (8008a98 <HAL_RCC_ClockConfig+0x1f0>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800894e:	2b00      	cmp	r3, #0
 8008950:	d115      	bne.n	800897e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e09a      	b.n	8008a8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d107      	bne.n	800896e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800895e:	4b4e      	ldr	r3, [pc, #312]	; (8008a98 <HAL_RCC_ClockConfig+0x1f0>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0302 	and.w	r3, r3, #2
 8008966:	2b00      	cmp	r3, #0
 8008968:	d109      	bne.n	800897e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e08e      	b.n	8008a8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800896e:	4b4a      	ldr	r3, [pc, #296]	; (8008a98 <HAL_RCC_ClockConfig+0x1f0>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008976:	2b00      	cmp	r3, #0
 8008978:	d101      	bne.n	800897e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e086      	b.n	8008a8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800897e:	4b46      	ldr	r3, [pc, #280]	; (8008a98 <HAL_RCC_ClockConfig+0x1f0>)
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f023 0203 	bic.w	r2, r3, #3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	4943      	ldr	r1, [pc, #268]	; (8008a98 <HAL_RCC_ClockConfig+0x1f0>)
 800898c:	4313      	orrs	r3, r2
 800898e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008990:	f7fb fdaa 	bl	80044e8 <HAL_GetTick>
 8008994:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008996:	e00a      	b.n	80089ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008998:	f7fb fda6 	bl	80044e8 <HAL_GetTick>
 800899c:	4602      	mov	r2, r0
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d901      	bls.n	80089ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80089aa:	2303      	movs	r3, #3
 80089ac:	e06e      	b.n	8008a8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089ae:	4b3a      	ldr	r3, [pc, #232]	; (8008a98 <HAL_RCC_ClockConfig+0x1f0>)
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	f003 020c 	and.w	r2, r3, #12
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	429a      	cmp	r2, r3
 80089be:	d1eb      	bne.n	8008998 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 0302 	and.w	r3, r3, #2
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d010      	beq.n	80089ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	689a      	ldr	r2, [r3, #8]
 80089d0:	4b31      	ldr	r3, [pc, #196]	; (8008a98 <HAL_RCC_ClockConfig+0x1f0>)
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089d8:	429a      	cmp	r2, r3
 80089da:	d208      	bcs.n	80089ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089dc:	4b2e      	ldr	r3, [pc, #184]	; (8008a98 <HAL_RCC_ClockConfig+0x1f0>)
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	492b      	ldr	r1, [pc, #172]	; (8008a98 <HAL_RCC_ClockConfig+0x1f0>)
 80089ea:	4313      	orrs	r3, r2
 80089ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089ee:	4b29      	ldr	r3, [pc, #164]	; (8008a94 <HAL_RCC_ClockConfig+0x1ec>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0307 	and.w	r3, r3, #7
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d210      	bcs.n	8008a1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089fc:	4b25      	ldr	r3, [pc, #148]	; (8008a94 <HAL_RCC_ClockConfig+0x1ec>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f023 0207 	bic.w	r2, r3, #7
 8008a04:	4923      	ldr	r1, [pc, #140]	; (8008a94 <HAL_RCC_ClockConfig+0x1ec>)
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a0c:	4b21      	ldr	r3, [pc, #132]	; (8008a94 <HAL_RCC_ClockConfig+0x1ec>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0307 	and.w	r3, r3, #7
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d001      	beq.n	8008a1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e036      	b.n	8008a8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0304 	and.w	r3, r3, #4
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d008      	beq.n	8008a3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a2a:	4b1b      	ldr	r3, [pc, #108]	; (8008a98 <HAL_RCC_ClockConfig+0x1f0>)
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	4918      	ldr	r1, [pc, #96]	; (8008a98 <HAL_RCC_ClockConfig+0x1f0>)
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0308 	and.w	r3, r3, #8
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d009      	beq.n	8008a5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a48:	4b13      	ldr	r3, [pc, #76]	; (8008a98 <HAL_RCC_ClockConfig+0x1f0>)
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	00db      	lsls	r3, r3, #3
 8008a56:	4910      	ldr	r1, [pc, #64]	; (8008a98 <HAL_RCC_ClockConfig+0x1f0>)
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008a5c:	f000 f824 	bl	8008aa8 <HAL_RCC_GetSysClockFreq>
 8008a60:	4602      	mov	r2, r0
 8008a62:	4b0d      	ldr	r3, [pc, #52]	; (8008a98 <HAL_RCC_ClockConfig+0x1f0>)
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	091b      	lsrs	r3, r3, #4
 8008a68:	f003 030f 	and.w	r3, r3, #15
 8008a6c:	490b      	ldr	r1, [pc, #44]	; (8008a9c <HAL_RCC_ClockConfig+0x1f4>)
 8008a6e:	5ccb      	ldrb	r3, [r1, r3]
 8008a70:	f003 031f 	and.w	r3, r3, #31
 8008a74:	fa22 f303 	lsr.w	r3, r2, r3
 8008a78:	4a09      	ldr	r2, [pc, #36]	; (8008aa0 <HAL_RCC_ClockConfig+0x1f8>)
 8008a7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008a7c:	4b09      	ldr	r3, [pc, #36]	; (8008aa4 <HAL_RCC_ClockConfig+0x1fc>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7fb fce1 	bl	8004448 <HAL_InitTick>
 8008a86:	4603      	mov	r3, r0
 8008a88:	72fb      	strb	r3, [r7, #11]

  return status;
 8008a8a:	7afb      	ldrb	r3, [r7, #11]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	40022000 	.word	0x40022000
 8008a98:	40021000 	.word	0x40021000
 8008a9c:	0800f0ec 	.word	0x0800f0ec
 8008aa0:	20000000 	.word	0x20000000
 8008aa4:	20000004 	.word	0x20000004

08008aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b089      	sub	sp, #36	; 0x24
 8008aac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	61fb      	str	r3, [r7, #28]
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ab6:	4b3e      	ldr	r3, [pc, #248]	; (8008bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f003 030c 	and.w	r3, r3, #12
 8008abe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ac0:	4b3b      	ldr	r3, [pc, #236]	; (8008bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	f003 0303 	and.w	r3, r3, #3
 8008ac8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d005      	beq.n	8008adc <HAL_RCC_GetSysClockFreq+0x34>
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	2b0c      	cmp	r3, #12
 8008ad4:	d121      	bne.n	8008b1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d11e      	bne.n	8008b1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008adc:	4b34      	ldr	r3, [pc, #208]	; (8008bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0308 	and.w	r3, r3, #8
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d107      	bne.n	8008af8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008ae8:	4b31      	ldr	r3, [pc, #196]	; (8008bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008aee:	0a1b      	lsrs	r3, r3, #8
 8008af0:	f003 030f 	and.w	r3, r3, #15
 8008af4:	61fb      	str	r3, [r7, #28]
 8008af6:	e005      	b.n	8008b04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008af8:	4b2d      	ldr	r3, [pc, #180]	; (8008bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	091b      	lsrs	r3, r3, #4
 8008afe:	f003 030f 	and.w	r3, r3, #15
 8008b02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008b04:	4a2b      	ldr	r2, [pc, #172]	; (8008bb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d10d      	bne.n	8008b30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008b18:	e00a      	b.n	8008b30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	2b04      	cmp	r3, #4
 8008b1e:	d102      	bne.n	8008b26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008b20:	4b25      	ldr	r3, [pc, #148]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8008b22:	61bb      	str	r3, [r7, #24]
 8008b24:	e004      	b.n	8008b30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	2b08      	cmp	r3, #8
 8008b2a:	d101      	bne.n	8008b30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008b2c:	4b23      	ldr	r3, [pc, #140]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x114>)
 8008b2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	2b0c      	cmp	r3, #12
 8008b34:	d134      	bne.n	8008ba0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008b36:	4b1e      	ldr	r3, [pc, #120]	; (8008bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	f003 0303 	and.w	r3, r3, #3
 8008b3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d003      	beq.n	8008b4e <HAL_RCC_GetSysClockFreq+0xa6>
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	2b03      	cmp	r3, #3
 8008b4a:	d003      	beq.n	8008b54 <HAL_RCC_GetSysClockFreq+0xac>
 8008b4c:	e005      	b.n	8008b5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008b4e:	4b1a      	ldr	r3, [pc, #104]	; (8008bb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8008b50:	617b      	str	r3, [r7, #20]
      break;
 8008b52:	e005      	b.n	8008b60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008b54:	4b19      	ldr	r3, [pc, #100]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x114>)
 8008b56:	617b      	str	r3, [r7, #20]
      break;
 8008b58:	e002      	b.n	8008b60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	617b      	str	r3, [r7, #20]
      break;
 8008b5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008b60:	4b13      	ldr	r3, [pc, #76]	; (8008bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	091b      	lsrs	r3, r3, #4
 8008b66:	f003 0307 	and.w	r3, r3, #7
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008b6e:	4b10      	ldr	r3, [pc, #64]	; (8008bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	0a1b      	lsrs	r3, r3, #8
 8008b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b78:	697a      	ldr	r2, [r7, #20]
 8008b7a:	fb03 f202 	mul.w	r2, r3, r2
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008b86:	4b0a      	ldr	r3, [pc, #40]	; (8008bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	0e5b      	lsrs	r3, r3, #25
 8008b8c:	f003 0303 	and.w	r3, r3, #3
 8008b90:	3301      	adds	r3, #1
 8008b92:	005b      	lsls	r3, r3, #1
 8008b94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008b96:	697a      	ldr	r2, [r7, #20]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008ba0:	69bb      	ldr	r3, [r7, #24]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3724      	adds	r7, #36	; 0x24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	40021000 	.word	0x40021000
 8008bb4:	0800f0fc 	.word	0x0800f0fc
 8008bb8:	00f42400 	.word	0x00f42400
 8008bbc:	007a1200 	.word	0x007a1200

08008bc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008bc4:	4b03      	ldr	r3, [pc, #12]	; (8008bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	20000000 	.word	0x20000000

08008bd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b086      	sub	sp, #24
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008be0:	2300      	movs	r3, #0
 8008be2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008be4:	4b2a      	ldr	r3, [pc, #168]	; (8008c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d003      	beq.n	8008bf8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008bf0:	f7ff f9d2 	bl	8007f98 <HAL_PWREx_GetVoltageRange>
 8008bf4:	6178      	str	r0, [r7, #20]
 8008bf6:	e014      	b.n	8008c22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008bf8:	4b25      	ldr	r3, [pc, #148]	; (8008c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bfc:	4a24      	ldr	r2, [pc, #144]	; (8008c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c02:	6593      	str	r3, [r2, #88]	; 0x58
 8008c04:	4b22      	ldr	r3, [pc, #136]	; (8008c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c0c:	60fb      	str	r3, [r7, #12]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008c10:	f7ff f9c2 	bl	8007f98 <HAL_PWREx_GetVoltageRange>
 8008c14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008c16:	4b1e      	ldr	r3, [pc, #120]	; (8008c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c1a:	4a1d      	ldr	r2, [pc, #116]	; (8008c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c28:	d10b      	bne.n	8008c42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2b80      	cmp	r3, #128	; 0x80
 8008c2e:	d919      	bls.n	8008c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2ba0      	cmp	r3, #160	; 0xa0
 8008c34:	d902      	bls.n	8008c3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008c36:	2302      	movs	r3, #2
 8008c38:	613b      	str	r3, [r7, #16]
 8008c3a:	e013      	b.n	8008c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	613b      	str	r3, [r7, #16]
 8008c40:	e010      	b.n	8008c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2b80      	cmp	r3, #128	; 0x80
 8008c46:	d902      	bls.n	8008c4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008c48:	2303      	movs	r3, #3
 8008c4a:	613b      	str	r3, [r7, #16]
 8008c4c:	e00a      	b.n	8008c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b80      	cmp	r3, #128	; 0x80
 8008c52:	d102      	bne.n	8008c5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008c54:	2302      	movs	r3, #2
 8008c56:	613b      	str	r3, [r7, #16]
 8008c58:	e004      	b.n	8008c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b70      	cmp	r3, #112	; 0x70
 8008c5e:	d101      	bne.n	8008c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008c60:	2301      	movs	r3, #1
 8008c62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008c64:	4b0b      	ldr	r3, [pc, #44]	; (8008c94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f023 0207 	bic.w	r2, r3, #7
 8008c6c:	4909      	ldr	r1, [pc, #36]	; (8008c94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008c74:	4b07      	ldr	r3, [pc, #28]	; (8008c94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 0307 	and.w	r3, r3, #7
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d001      	beq.n	8008c86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e000      	b.n	8008c88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3718      	adds	r7, #24
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	40021000 	.word	0x40021000
 8008c94:	40022000 	.word	0x40022000

08008c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b086      	sub	sp, #24
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d031      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008cbc:	d01a      	beq.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8008cbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008cc2:	d814      	bhi.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d009      	beq.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008cc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ccc:	d10f      	bne.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8008cce:	4b5d      	ldr	r3, [pc, #372]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	4a5c      	ldr	r2, [pc, #368]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cd8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008cda:	e00c      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	3304      	adds	r3, #4
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f000 fa22 	bl	800912c <RCCEx_PLLSAI1_Config>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008cec:	e003      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	74fb      	strb	r3, [r7, #19]
      break;
 8008cf2:	e000      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8008cf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cf6:	7cfb      	ldrb	r3, [r7, #19]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10b      	bne.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008cfc:	4b51      	ldr	r3, [pc, #324]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d0a:	494e      	ldr	r1, [pc, #312]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008d12:	e001      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d14:	7cfb      	ldrb	r3, [r7, #19]
 8008d16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 809e 	beq.w	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d26:	2300      	movs	r3, #0
 8008d28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008d2a:	4b46      	ldr	r3, [pc, #280]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d101      	bne.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8008d36:	2301      	movs	r3, #1
 8008d38:	e000      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00d      	beq.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d40:	4b40      	ldr	r3, [pc, #256]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d44:	4a3f      	ldr	r2, [pc, #252]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8008d4c:	4b3d      	ldr	r3, [pc, #244]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d54:	60bb      	str	r3, [r7, #8]
 8008d56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d5c:	4b3a      	ldr	r3, [pc, #232]	; (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a39      	ldr	r2, [pc, #228]	; (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d68:	f7fb fbbe 	bl	80044e8 <HAL_GetTick>
 8008d6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008d6e:	e009      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d70:	f7fb fbba 	bl	80044e8 <HAL_GetTick>
 8008d74:	4602      	mov	r2, r0
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d902      	bls.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	74fb      	strb	r3, [r7, #19]
        break;
 8008d82:	e005      	b.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008d84:	4b30      	ldr	r3, [pc, #192]	; (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d0ef      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8008d90:	7cfb      	ldrb	r3, [r7, #19]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d15a      	bne.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008d96:	4b2b      	ldr	r3, [pc, #172]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008da0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d01e      	beq.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dac:	697a      	ldr	r2, [r7, #20]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d019      	beq.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008db2:	4b24      	ldr	r3, [pc, #144]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dbc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008dbe:	4b21      	ldr	r3, [pc, #132]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dc4:	4a1f      	ldr	r2, [pc, #124]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008dce:	4b1d      	ldr	r3, [pc, #116]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dd4:	4a1b      	ldr	r2, [pc, #108]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008dde:	4a19      	ldr	r2, [pc, #100]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f003 0301 	and.w	r3, r3, #1
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d016      	beq.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008df0:	f7fb fb7a 	bl	80044e8 <HAL_GetTick>
 8008df4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008df6:	e00b      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008df8:	f7fb fb76 	bl	80044e8 <HAL_GetTick>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d902      	bls.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	74fb      	strb	r3, [r7, #19]
            break;
 8008e0e:	e006      	b.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e10:	4b0c      	ldr	r3, [pc, #48]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e16:	f003 0302 	and.w	r3, r3, #2
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d0ec      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8008e1e:	7cfb      	ldrb	r3, [r7, #19]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10b      	bne.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e24:	4b07      	ldr	r3, [pc, #28]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e32:	4904      	ldr	r1, [pc, #16]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008e34:	4313      	orrs	r3, r2
 8008e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008e3a:	e009      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008e3c:	7cfb      	ldrb	r3, [r7, #19]
 8008e3e:	74bb      	strb	r3, [r7, #18]
 8008e40:	e006      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008e42:	bf00      	nop
 8008e44:	40021000 	.word	0x40021000
 8008e48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e4c:	7cfb      	ldrb	r3, [r7, #19]
 8008e4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008e50:	7c7b      	ldrb	r3, [r7, #17]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d105      	bne.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e56:	4b8d      	ldr	r3, [pc, #564]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e5a:	4a8c      	ldr	r2, [pc, #560]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00a      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008e6e:	4b87      	ldr	r3, [pc, #540]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e74:	f023 0203 	bic.w	r2, r3, #3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6a1b      	ldr	r3, [r3, #32]
 8008e7c:	4983      	ldr	r1, [pc, #524]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 0302 	and.w	r3, r3, #2
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00a      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008e90:	4b7e      	ldr	r3, [pc, #504]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e96:	f023 020c 	bic.w	r2, r3, #12
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9e:	497b      	ldr	r1, [pc, #492]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 0304 	and.w	r3, r3, #4
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00a      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008eb2:	4b76      	ldr	r3, [pc, #472]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eb8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec0:	4972      	ldr	r1, [pc, #456]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 0320 	and.w	r3, r3, #32
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00a      	beq.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ed4:	4b6d      	ldr	r3, [pc, #436]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee2:	496a      	ldr	r1, [pc, #424]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00a      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ef6:	4b65      	ldr	r3, [pc, #404]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008efc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f04:	4961      	ldr	r1, [pc, #388]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008f06:	4313      	orrs	r3, r2
 8008f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00a      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008f18:	4b5c      	ldr	r3, [pc, #368]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f26:	4959      	ldr	r1, [pc, #356]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00a      	beq.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008f3a:	4b54      	ldr	r3, [pc, #336]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f48:	4950      	ldr	r1, [pc, #320]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00a      	beq.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008f5c:	4b4b      	ldr	r3, [pc, #300]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f6a:	4948      	ldr	r1, [pc, #288]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00a      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008f7e:	4b43      	ldr	r3, [pc, #268]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8c:	493f      	ldr	r1, [pc, #252]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d028      	beq.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008fa0:	4b3a      	ldr	r3, [pc, #232]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fae:	4937      	ldr	r1, [pc, #220]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fbe:	d106      	bne.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008fc0:	4b32      	ldr	r3, [pc, #200]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	4a31      	ldr	r2, [pc, #196]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008fc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fca:	60d3      	str	r3, [r2, #12]
 8008fcc:	e011      	b.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fd6:	d10c      	bne.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	3304      	adds	r3, #4
 8008fdc:	2101      	movs	r1, #1
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 f8a4 	bl	800912c <RCCEx_PLLSAI1_Config>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008fe8:	7cfb      	ldrb	r3, [r7, #19]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d001      	beq.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8008fee:	7cfb      	ldrb	r3, [r7, #19]
 8008ff0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d028      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008ffe:	4b23      	ldr	r3, [pc, #140]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009004:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800900c:	491f      	ldr	r1, [pc, #124]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800900e:	4313      	orrs	r3, r2
 8009010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009018:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800901c:	d106      	bne.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800901e:	4b1b      	ldr	r3, [pc, #108]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	4a1a      	ldr	r2, [pc, #104]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009024:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009028:	60d3      	str	r3, [r2, #12]
 800902a:	e011      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009030:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009034:	d10c      	bne.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	3304      	adds	r3, #4
 800903a:	2101      	movs	r1, #1
 800903c:	4618      	mov	r0, r3
 800903e:	f000 f875 	bl	800912c <RCCEx_PLLSAI1_Config>
 8009042:	4603      	mov	r3, r0
 8009044:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009046:	7cfb      	ldrb	r3, [r7, #19]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d001      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800904c:	7cfb      	ldrb	r3, [r7, #19]
 800904e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d02b      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800905c:	4b0b      	ldr	r3, [pc, #44]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800905e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009062:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800906a:	4908      	ldr	r1, [pc, #32]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800906c:	4313      	orrs	r3, r2
 800906e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009076:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800907a:	d109      	bne.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800907c:	4b03      	ldr	r3, [pc, #12]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	4a02      	ldr	r2, [pc, #8]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8009082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009086:	60d3      	str	r3, [r2, #12]
 8009088:	e014      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800908a:	bf00      	nop
 800908c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009094:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009098:	d10c      	bne.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	3304      	adds	r3, #4
 800909e:	2101      	movs	r1, #1
 80090a0:	4618      	mov	r0, r3
 80090a2:	f000 f843 	bl	800912c <RCCEx_PLLSAI1_Config>
 80090a6:	4603      	mov	r3, r0
 80090a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80090aa:	7cfb      	ldrb	r3, [r7, #19]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80090b0:	7cfb      	ldrb	r3, [r7, #19]
 80090b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d01c      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80090c0:	4b19      	ldr	r3, [pc, #100]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80090c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ce:	4916      	ldr	r1, [pc, #88]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80090d0:	4313      	orrs	r3, r2
 80090d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090de:	d10c      	bne.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	3304      	adds	r3, #4
 80090e4:	2102      	movs	r1, #2
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 f820 	bl	800912c <RCCEx_PLLSAI1_Config>
 80090ec:	4603      	mov	r3, r0
 80090ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80090f0:	7cfb      	ldrb	r3, [r7, #19]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d001      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80090f6:	7cfb      	ldrb	r3, [r7, #19]
 80090f8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00a      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009106:	4b08      	ldr	r3, [pc, #32]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800910c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009114:	4904      	ldr	r1, [pc, #16]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009116:	4313      	orrs	r3, r2
 8009118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800911c:	7cbb      	ldrb	r3, [r7, #18]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3718      	adds	r7, #24
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	40021000 	.word	0x40021000

0800912c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009136:	2300      	movs	r3, #0
 8009138:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800913a:	4b74      	ldr	r3, [pc, #464]	; (800930c <RCCEx_PLLSAI1_Config+0x1e0>)
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	f003 0303 	and.w	r3, r3, #3
 8009142:	2b00      	cmp	r3, #0
 8009144:	d018      	beq.n	8009178 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009146:	4b71      	ldr	r3, [pc, #452]	; (800930c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	f003 0203 	and.w	r2, r3, #3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	429a      	cmp	r2, r3
 8009154:	d10d      	bne.n	8009172 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
       ||
 800915a:	2b00      	cmp	r3, #0
 800915c:	d009      	beq.n	8009172 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800915e:	4b6b      	ldr	r3, [pc, #428]	; (800930c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	091b      	lsrs	r3, r3, #4
 8009164:	f003 0307 	and.w	r3, r3, #7
 8009168:	1c5a      	adds	r2, r3, #1
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
       ||
 800916e:	429a      	cmp	r2, r3
 8009170:	d047      	beq.n	8009202 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	73fb      	strb	r3, [r7, #15]
 8009176:	e044      	b.n	8009202 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2b03      	cmp	r3, #3
 800917e:	d018      	beq.n	80091b2 <RCCEx_PLLSAI1_Config+0x86>
 8009180:	2b03      	cmp	r3, #3
 8009182:	d825      	bhi.n	80091d0 <RCCEx_PLLSAI1_Config+0xa4>
 8009184:	2b01      	cmp	r3, #1
 8009186:	d002      	beq.n	800918e <RCCEx_PLLSAI1_Config+0x62>
 8009188:	2b02      	cmp	r3, #2
 800918a:	d009      	beq.n	80091a0 <RCCEx_PLLSAI1_Config+0x74>
 800918c:	e020      	b.n	80091d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800918e:	4b5f      	ldr	r3, [pc, #380]	; (800930c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 0302 	and.w	r3, r3, #2
 8009196:	2b00      	cmp	r3, #0
 8009198:	d11d      	bne.n	80091d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800919e:	e01a      	b.n	80091d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80091a0:	4b5a      	ldr	r3, [pc, #360]	; (800930c <RCCEx_PLLSAI1_Config+0x1e0>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d116      	bne.n	80091da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80091b0:	e013      	b.n	80091da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80091b2:	4b56      	ldr	r3, [pc, #344]	; (800930c <RCCEx_PLLSAI1_Config+0x1e0>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d10f      	bne.n	80091de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80091be:	4b53      	ldr	r3, [pc, #332]	; (800930c <RCCEx_PLLSAI1_Config+0x1e0>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d109      	bne.n	80091de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80091ce:	e006      	b.n	80091de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	73fb      	strb	r3, [r7, #15]
      break;
 80091d4:	e004      	b.n	80091e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80091d6:	bf00      	nop
 80091d8:	e002      	b.n	80091e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80091da:	bf00      	nop
 80091dc:	e000      	b.n	80091e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80091de:	bf00      	nop
    }

    if(status == HAL_OK)
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10d      	bne.n	8009202 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80091e6:	4b49      	ldr	r3, [pc, #292]	; (800930c <RCCEx_PLLSAI1_Config+0x1e0>)
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6819      	ldr	r1, [r3, #0]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	3b01      	subs	r3, #1
 80091f8:	011b      	lsls	r3, r3, #4
 80091fa:	430b      	orrs	r3, r1
 80091fc:	4943      	ldr	r1, [pc, #268]	; (800930c <RCCEx_PLLSAI1_Config+0x1e0>)
 80091fe:	4313      	orrs	r3, r2
 8009200:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009202:	7bfb      	ldrb	r3, [r7, #15]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d17c      	bne.n	8009302 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009208:	4b40      	ldr	r3, [pc, #256]	; (800930c <RCCEx_PLLSAI1_Config+0x1e0>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a3f      	ldr	r2, [pc, #252]	; (800930c <RCCEx_PLLSAI1_Config+0x1e0>)
 800920e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009212:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009214:	f7fb f968 	bl	80044e8 <HAL_GetTick>
 8009218:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800921a:	e009      	b.n	8009230 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800921c:	f7fb f964 	bl	80044e8 <HAL_GetTick>
 8009220:	4602      	mov	r2, r0
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	2b02      	cmp	r3, #2
 8009228:	d902      	bls.n	8009230 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800922a:	2303      	movs	r3, #3
 800922c:	73fb      	strb	r3, [r7, #15]
        break;
 800922e:	e005      	b.n	800923c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009230:	4b36      	ldr	r3, [pc, #216]	; (800930c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d1ef      	bne.n	800921c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800923c:	7bfb      	ldrb	r3, [r7, #15]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d15f      	bne.n	8009302 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d110      	bne.n	800926a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009248:	4b30      	ldr	r3, [pc, #192]	; (800930c <RCCEx_PLLSAI1_Config+0x1e0>)
 800924a:	691b      	ldr	r3, [r3, #16]
 800924c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8009250:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	6892      	ldr	r2, [r2, #8]
 8009258:	0211      	lsls	r1, r2, #8
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	68d2      	ldr	r2, [r2, #12]
 800925e:	06d2      	lsls	r2, r2, #27
 8009260:	430a      	orrs	r2, r1
 8009262:	492a      	ldr	r1, [pc, #168]	; (800930c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009264:	4313      	orrs	r3, r2
 8009266:	610b      	str	r3, [r1, #16]
 8009268:	e027      	b.n	80092ba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d112      	bne.n	8009296 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009270:	4b26      	ldr	r3, [pc, #152]	; (800930c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009278:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	6892      	ldr	r2, [r2, #8]
 8009280:	0211      	lsls	r1, r2, #8
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	6912      	ldr	r2, [r2, #16]
 8009286:	0852      	lsrs	r2, r2, #1
 8009288:	3a01      	subs	r2, #1
 800928a:	0552      	lsls	r2, r2, #21
 800928c:	430a      	orrs	r2, r1
 800928e:	491f      	ldr	r1, [pc, #124]	; (800930c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009290:	4313      	orrs	r3, r2
 8009292:	610b      	str	r3, [r1, #16]
 8009294:	e011      	b.n	80092ba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009296:	4b1d      	ldr	r3, [pc, #116]	; (800930c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800929e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	6892      	ldr	r2, [r2, #8]
 80092a6:	0211      	lsls	r1, r2, #8
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	6952      	ldr	r2, [r2, #20]
 80092ac:	0852      	lsrs	r2, r2, #1
 80092ae:	3a01      	subs	r2, #1
 80092b0:	0652      	lsls	r2, r2, #25
 80092b2:	430a      	orrs	r2, r1
 80092b4:	4915      	ldr	r1, [pc, #84]	; (800930c <RCCEx_PLLSAI1_Config+0x1e0>)
 80092b6:	4313      	orrs	r3, r2
 80092b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80092ba:	4b14      	ldr	r3, [pc, #80]	; (800930c <RCCEx_PLLSAI1_Config+0x1e0>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a13      	ldr	r2, [pc, #76]	; (800930c <RCCEx_PLLSAI1_Config+0x1e0>)
 80092c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80092c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092c6:	f7fb f90f 	bl	80044e8 <HAL_GetTick>
 80092ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80092cc:	e009      	b.n	80092e2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80092ce:	f7fb f90b 	bl	80044e8 <HAL_GetTick>
 80092d2:	4602      	mov	r2, r0
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d902      	bls.n	80092e2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	73fb      	strb	r3, [r7, #15]
          break;
 80092e0:	e005      	b.n	80092ee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80092e2:	4b0a      	ldr	r3, [pc, #40]	; (800930c <RCCEx_PLLSAI1_Config+0x1e0>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d0ef      	beq.n	80092ce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80092ee:	7bfb      	ldrb	r3, [r7, #15]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d106      	bne.n	8009302 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80092f4:	4b05      	ldr	r3, [pc, #20]	; (800930c <RCCEx_PLLSAI1_Config+0x1e0>)
 80092f6:	691a      	ldr	r2, [r3, #16]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	699b      	ldr	r3, [r3, #24]
 80092fc:	4903      	ldr	r1, [pc, #12]	; (800930c <RCCEx_PLLSAI1_Config+0x1e0>)
 80092fe:	4313      	orrs	r3, r2
 8009300:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009302:	7bfb      	ldrb	r3, [r7, #15]
}
 8009304:	4618      	mov	r0, r3
 8009306:	3710      	adds	r7, #16
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	40021000 	.word	0x40021000

08009310 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d101      	bne.n	8009322 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e095      	b.n	800944e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009326:	2b00      	cmp	r3, #0
 8009328:	d108      	bne.n	800933c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009332:	d009      	beq.n	8009348 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	61da      	str	r2, [r3, #28]
 800933a:	e005      	b.n	8009348 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009354:	b2db      	uxtb	r3, r3
 8009356:	2b00      	cmp	r3, #0
 8009358:	d106      	bne.n	8009368 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f7fa fe5a 	bl	800401c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2202      	movs	r2, #2
 800936c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800937e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009388:	d902      	bls.n	8009390 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800938a:	2300      	movs	r3, #0
 800938c:	60fb      	str	r3, [r7, #12]
 800938e:	e002      	b.n	8009396 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009394:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800939e:	d007      	beq.n	80093b0 <HAL_SPI_Init+0xa0>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80093a8:	d002      	beq.n	80093b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80093c0:	431a      	orrs	r2, r3
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	f003 0302 	and.w	r3, r3, #2
 80093ca:	431a      	orrs	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	695b      	ldr	r3, [r3, #20]
 80093d0:	f003 0301 	and.w	r3, r3, #1
 80093d4:	431a      	orrs	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093de:	431a      	orrs	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	69db      	ldr	r3, [r3, #28]
 80093e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093e8:	431a      	orrs	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a1b      	ldr	r3, [r3, #32]
 80093ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f2:	ea42 0103 	orr.w	r1, r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	430a      	orrs	r2, r1
 8009404:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	0c1b      	lsrs	r3, r3, #16
 800940c:	f003 0204 	and.w	r2, r3, #4
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009414:	f003 0310 	and.w	r3, r3, #16
 8009418:	431a      	orrs	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800941e:	f003 0308 	and.w	r3, r3, #8
 8009422:	431a      	orrs	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800942c:	ea42 0103 	orr.w	r1, r2, r3
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b088      	sub	sp, #32
 800945a:	af00      	add	r7, sp, #0
 800945c:	60f8      	str	r0, [r7, #12]
 800945e:	60b9      	str	r1, [r7, #8]
 8009460:	603b      	str	r3, [r7, #0]
 8009462:	4613      	mov	r3, r2
 8009464:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009470:	2b01      	cmp	r3, #1
 8009472:	d101      	bne.n	8009478 <HAL_SPI_Transmit+0x22>
 8009474:	2302      	movs	r3, #2
 8009476:	e158      	b.n	800972a <HAL_SPI_Transmit+0x2d4>
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009480:	f7fb f832 	bl	80044e8 <HAL_GetTick>
 8009484:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009486:	88fb      	ldrh	r3, [r7, #6]
 8009488:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009490:	b2db      	uxtb	r3, r3
 8009492:	2b01      	cmp	r3, #1
 8009494:	d002      	beq.n	800949c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009496:	2302      	movs	r3, #2
 8009498:	77fb      	strb	r3, [r7, #31]
    goto error;
 800949a:	e13d      	b.n	8009718 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d002      	beq.n	80094a8 <HAL_SPI_Transmit+0x52>
 80094a2:	88fb      	ldrh	r3, [r7, #6]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d102      	bne.n	80094ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80094ac:	e134      	b.n	8009718 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2203      	movs	r2, #3
 80094b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2200      	movs	r2, #0
 80094ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	88fa      	ldrh	r2, [r7, #6]
 80094c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	88fa      	ldrh	r2, [r7, #6]
 80094cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2200      	movs	r2, #0
 80094e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094f8:	d10f      	bne.n	800951a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009508:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009518:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009524:	2b40      	cmp	r3, #64	; 0x40
 8009526:	d007      	beq.n	8009538 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009536:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009540:	d94b      	bls.n	80095da <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d002      	beq.n	8009550 <HAL_SPI_Transmit+0xfa>
 800954a:	8afb      	ldrh	r3, [r7, #22]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d13e      	bne.n	80095ce <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009554:	881a      	ldrh	r2, [r3, #0]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009560:	1c9a      	adds	r2, r3, #2
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800956a:	b29b      	uxth	r3, r3
 800956c:	3b01      	subs	r3, #1
 800956e:	b29a      	uxth	r2, r3
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009574:	e02b      	b.n	80095ce <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	f003 0302 	and.w	r3, r3, #2
 8009580:	2b02      	cmp	r3, #2
 8009582:	d112      	bne.n	80095aa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009588:	881a      	ldrh	r2, [r3, #0]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009594:	1c9a      	adds	r2, r3, #2
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800959e:	b29b      	uxth	r3, r3
 80095a0:	3b01      	subs	r3, #1
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095a8:	e011      	b.n	80095ce <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095aa:	f7fa ff9d 	bl	80044e8 <HAL_GetTick>
 80095ae:	4602      	mov	r2, r0
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	683a      	ldr	r2, [r7, #0]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d803      	bhi.n	80095c2 <HAL_SPI_Transmit+0x16c>
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c0:	d102      	bne.n	80095c8 <HAL_SPI_Transmit+0x172>
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d102      	bne.n	80095ce <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80095c8:	2303      	movs	r3, #3
 80095ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80095cc:	e0a4      	b.n	8009718 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d1ce      	bne.n	8009576 <HAL_SPI_Transmit+0x120>
 80095d8:	e07c      	b.n	80096d4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d002      	beq.n	80095e8 <HAL_SPI_Transmit+0x192>
 80095e2:	8afb      	ldrh	r3, [r7, #22]
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d170      	bne.n	80096ca <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d912      	bls.n	8009618 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f6:	881a      	ldrh	r2, [r3, #0]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	1c9a      	adds	r2, r3, #2
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800960c:	b29b      	uxth	r3, r3
 800960e:	3b02      	subs	r3, #2
 8009610:	b29a      	uxth	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009616:	e058      	b.n	80096ca <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	330c      	adds	r3, #12
 8009622:	7812      	ldrb	r2, [r2, #0]
 8009624:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800962a:	1c5a      	adds	r2, r3, #1
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009634:	b29b      	uxth	r3, r3
 8009636:	3b01      	subs	r3, #1
 8009638:	b29a      	uxth	r2, r3
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800963e:	e044      	b.n	80096ca <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	f003 0302 	and.w	r3, r3, #2
 800964a:	2b02      	cmp	r3, #2
 800964c:	d12b      	bne.n	80096a6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009652:	b29b      	uxth	r3, r3
 8009654:	2b01      	cmp	r3, #1
 8009656:	d912      	bls.n	800967e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800965c:	881a      	ldrh	r2, [r3, #0]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009668:	1c9a      	adds	r2, r3, #2
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009672:	b29b      	uxth	r3, r3
 8009674:	3b02      	subs	r3, #2
 8009676:	b29a      	uxth	r2, r3
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800967c:	e025      	b.n	80096ca <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	330c      	adds	r3, #12
 8009688:	7812      	ldrb	r2, [r2, #0]
 800968a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009690:	1c5a      	adds	r2, r3, #1
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800969a:	b29b      	uxth	r3, r3
 800969c:	3b01      	subs	r3, #1
 800969e:	b29a      	uxth	r2, r3
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80096a4:	e011      	b.n	80096ca <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096a6:	f7fa ff1f 	bl	80044e8 <HAL_GetTick>
 80096aa:	4602      	mov	r2, r0
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	683a      	ldr	r2, [r7, #0]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d803      	bhi.n	80096be <HAL_SPI_Transmit+0x268>
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096bc:	d102      	bne.n	80096c4 <HAL_SPI_Transmit+0x26e>
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d102      	bne.n	80096ca <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80096c4:	2303      	movs	r3, #3
 80096c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80096c8:	e026      	b.n	8009718 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1b5      	bne.n	8009640 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80096d4:	69ba      	ldr	r2, [r7, #24]
 80096d6:	6839      	ldr	r1, [r7, #0]
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f000 fb5b 	bl	8009d94 <SPI_EndRxTxTransaction>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d002      	beq.n	80096ea <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2220      	movs	r2, #32
 80096e8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10a      	bne.n	8009708 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096f2:	2300      	movs	r3, #0
 80096f4:	613b      	str	r3, [r7, #16]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	613b      	str	r3, [r7, #16]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	613b      	str	r3, [r7, #16]
 8009706:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800970c:	2b00      	cmp	r3, #0
 800970e:	d002      	beq.n	8009716 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	77fb      	strb	r3, [r7, #31]
 8009714:	e000      	b.n	8009718 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8009716:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009728:	7ffb      	ldrb	r3, [r7, #31]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3720      	adds	r7, #32
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b08a      	sub	sp, #40	; 0x28
 8009736:	af00      	add	r7, sp, #0
 8009738:	60f8      	str	r0, [r7, #12]
 800973a:	60b9      	str	r1, [r7, #8]
 800973c:	607a      	str	r2, [r7, #4]
 800973e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009740:	2301      	movs	r3, #1
 8009742:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009744:	2300      	movs	r3, #0
 8009746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009750:	2b01      	cmp	r3, #1
 8009752:	d101      	bne.n	8009758 <HAL_SPI_TransmitReceive+0x26>
 8009754:	2302      	movs	r3, #2
 8009756:	e1fb      	b.n	8009b50 <HAL_SPI_TransmitReceive+0x41e>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009760:	f7fa fec2 	bl	80044e8 <HAL_GetTick>
 8009764:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800976c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009774:	887b      	ldrh	r3, [r7, #2]
 8009776:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009778:	887b      	ldrh	r3, [r7, #2]
 800977a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800977c:	7efb      	ldrb	r3, [r7, #27]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d00e      	beq.n	80097a0 <HAL_SPI_TransmitReceive+0x6e>
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009788:	d106      	bne.n	8009798 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d102      	bne.n	8009798 <HAL_SPI_TransmitReceive+0x66>
 8009792:	7efb      	ldrb	r3, [r7, #27]
 8009794:	2b04      	cmp	r3, #4
 8009796:	d003      	beq.n	80097a0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009798:	2302      	movs	r3, #2
 800979a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800979e:	e1cd      	b.n	8009b3c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d005      	beq.n	80097b2 <HAL_SPI_TransmitReceive+0x80>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d002      	beq.n	80097b2 <HAL_SPI_TransmitReceive+0x80>
 80097ac:	887b      	ldrh	r3, [r7, #2]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d103      	bne.n	80097ba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80097b8:	e1c0      	b.n	8009b3c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	2b04      	cmp	r3, #4
 80097c4:	d003      	beq.n	80097ce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2205      	movs	r2, #5
 80097ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2200      	movs	r2, #0
 80097d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	887a      	ldrh	r2, [r7, #2]
 80097de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	887a      	ldrh	r2, [r7, #2]
 80097e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	68ba      	ldr	r2, [r7, #8]
 80097ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	887a      	ldrh	r2, [r7, #2]
 80097f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	887a      	ldrh	r2, [r7, #2]
 80097fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2200      	movs	r2, #0
 8009806:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009810:	d802      	bhi.n	8009818 <HAL_SPI_TransmitReceive+0xe6>
 8009812:	8a3b      	ldrh	r3, [r7, #16]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d908      	bls.n	800982a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	685a      	ldr	r2, [r3, #4]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009826:	605a      	str	r2, [r3, #4]
 8009828:	e007      	b.n	800983a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	685a      	ldr	r2, [r3, #4]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009838:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009844:	2b40      	cmp	r3, #64	; 0x40
 8009846:	d007      	beq.n	8009858 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009856:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	68db      	ldr	r3, [r3, #12]
 800985c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009860:	d97c      	bls.n	800995c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d002      	beq.n	8009870 <HAL_SPI_TransmitReceive+0x13e>
 800986a:	8a7b      	ldrh	r3, [r7, #18]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d169      	bne.n	8009944 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009874:	881a      	ldrh	r2, [r3, #0]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009880:	1c9a      	adds	r2, r3, #2
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800988a:	b29b      	uxth	r3, r3
 800988c:	3b01      	subs	r3, #1
 800988e:	b29a      	uxth	r2, r3
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009894:	e056      	b.n	8009944 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	f003 0302 	and.w	r3, r3, #2
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	d11b      	bne.n	80098dc <HAL_SPI_TransmitReceive+0x1aa>
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d016      	beq.n	80098dc <HAL_SPI_TransmitReceive+0x1aa>
 80098ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d113      	bne.n	80098dc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b8:	881a      	ldrh	r2, [r3, #0]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c4:	1c9a      	adds	r2, r3, #2
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	3b01      	subs	r3, #1
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80098d8:	2300      	movs	r3, #0
 80098da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	f003 0301 	and.w	r3, r3, #1
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d11c      	bne.n	8009924 <HAL_SPI_TransmitReceive+0x1f2>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d016      	beq.n	8009924 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68da      	ldr	r2, [r3, #12]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009900:	b292      	uxth	r2, r2
 8009902:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009908:	1c9a      	adds	r2, r3, #2
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009914:	b29b      	uxth	r3, r3
 8009916:	3b01      	subs	r3, #1
 8009918:	b29a      	uxth	r2, r3
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009920:	2301      	movs	r3, #1
 8009922:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009924:	f7fa fde0 	bl	80044e8 <HAL_GetTick>
 8009928:	4602      	mov	r2, r0
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	1ad3      	subs	r3, r2, r3
 800992e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009930:	429a      	cmp	r2, r3
 8009932:	d807      	bhi.n	8009944 <HAL_SPI_TransmitReceive+0x212>
 8009934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800993a:	d003      	beq.n	8009944 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800993c:	2303      	movs	r3, #3
 800993e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009942:	e0fb      	b.n	8009b3c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009948:	b29b      	uxth	r3, r3
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1a3      	bne.n	8009896 <HAL_SPI_TransmitReceive+0x164>
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009954:	b29b      	uxth	r3, r3
 8009956:	2b00      	cmp	r3, #0
 8009958:	d19d      	bne.n	8009896 <HAL_SPI_TransmitReceive+0x164>
 800995a:	e0df      	b.n	8009b1c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d003      	beq.n	800996c <HAL_SPI_TransmitReceive+0x23a>
 8009964:	8a7b      	ldrh	r3, [r7, #18]
 8009966:	2b01      	cmp	r3, #1
 8009968:	f040 80cb 	bne.w	8009b02 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009970:	b29b      	uxth	r3, r3
 8009972:	2b01      	cmp	r3, #1
 8009974:	d912      	bls.n	800999c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800997a:	881a      	ldrh	r2, [r3, #0]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009986:	1c9a      	adds	r2, r3, #2
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009990:	b29b      	uxth	r3, r3
 8009992:	3b02      	subs	r3, #2
 8009994:	b29a      	uxth	r2, r3
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	87da      	strh	r2, [r3, #62]	; 0x3e
 800999a:	e0b2      	b.n	8009b02 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	330c      	adds	r3, #12
 80099a6:	7812      	ldrb	r2, [r2, #0]
 80099a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ae:	1c5a      	adds	r2, r3, #1
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	3b01      	subs	r3, #1
 80099bc:	b29a      	uxth	r2, r3
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099c2:	e09e      	b.n	8009b02 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	f003 0302 	and.w	r3, r3, #2
 80099ce:	2b02      	cmp	r3, #2
 80099d0:	d134      	bne.n	8009a3c <HAL_SPI_TransmitReceive+0x30a>
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d02f      	beq.n	8009a3c <HAL_SPI_TransmitReceive+0x30a>
 80099dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d12c      	bne.n	8009a3c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d912      	bls.n	8009a12 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f0:	881a      	ldrh	r2, [r3, #0]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fc:	1c9a      	adds	r2, r3, #2
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	3b02      	subs	r3, #2
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009a10:	e012      	b.n	8009a38 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	330c      	adds	r3, #12
 8009a1c:	7812      	ldrb	r2, [r2, #0]
 8009a1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a24:	1c5a      	adds	r2, r3, #1
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	3b01      	subs	r3, #1
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	f003 0301 	and.w	r3, r3, #1
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d148      	bne.n	8009adc <HAL_SPI_TransmitReceive+0x3aa>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d042      	beq.n	8009adc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d923      	bls.n	8009aaa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	68da      	ldr	r2, [r3, #12]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6c:	b292      	uxth	r2, r2
 8009a6e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a74:	1c9a      	adds	r2, r3, #2
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	3b02      	subs	r3, #2
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d81f      	bhi.n	8009ad8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	685a      	ldr	r2, [r3, #4]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009aa6:	605a      	str	r2, [r3, #4]
 8009aa8:	e016      	b.n	8009ad8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f103 020c 	add.w	r2, r3, #12
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab6:	7812      	ldrb	r2, [r2, #0]
 8009ab8:	b2d2      	uxtb	r2, r2
 8009aba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac0:	1c5a      	adds	r2, r3, #1
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009adc:	f7fa fd04 	bl	80044e8 <HAL_GetTick>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	1ad3      	subs	r3, r2, r3
 8009ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d803      	bhi.n	8009af4 <HAL_SPI_TransmitReceive+0x3c2>
 8009aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af2:	d102      	bne.n	8009afa <HAL_SPI_TransmitReceive+0x3c8>
 8009af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d103      	bne.n	8009b02 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009afa:	2303      	movs	r3, #3
 8009afc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009b00:	e01c      	b.n	8009b3c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f47f af5b 	bne.w	80099c4 <HAL_SPI_TransmitReceive+0x292>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f47f af54 	bne.w	80099c4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009b1c:	69fa      	ldr	r2, [r7, #28]
 8009b1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f000 f937 	bl	8009d94 <SPI_EndRxTxTransaction>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d006      	beq.n	8009b3a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2220      	movs	r2, #32
 8009b36:	661a      	str	r2, [r3, #96]	; 0x60
 8009b38:	e000      	b.n	8009b3c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009b3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009b4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3728      	adds	r7, #40	; 0x28
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b088      	sub	sp, #32
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	603b      	str	r3, [r7, #0]
 8009b64:	4613      	mov	r3, r2
 8009b66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009b68:	f7fa fcbe 	bl	80044e8 <HAL_GetTick>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b70:	1a9b      	subs	r3, r3, r2
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	4413      	add	r3, r2
 8009b76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009b78:	f7fa fcb6 	bl	80044e8 <HAL_GetTick>
 8009b7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009b7e:	4b39      	ldr	r3, [pc, #228]	; (8009c64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	015b      	lsls	r3, r3, #5
 8009b84:	0d1b      	lsrs	r3, r3, #20
 8009b86:	69fa      	ldr	r2, [r7, #28]
 8009b88:	fb02 f303 	mul.w	r3, r2, r3
 8009b8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b8e:	e054      	b.n	8009c3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b96:	d050      	beq.n	8009c3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b98:	f7fa fca6 	bl	80044e8 <HAL_GetTick>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	69fa      	ldr	r2, [r7, #28]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d902      	bls.n	8009bae <SPI_WaitFlagStateUntilTimeout+0x56>
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d13d      	bne.n	8009c2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	685a      	ldr	r2, [r3, #4]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009bbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bc6:	d111      	bne.n	8009bec <SPI_WaitFlagStateUntilTimeout+0x94>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bd0:	d004      	beq.n	8009bdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bda:	d107      	bne.n	8009bec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bf4:	d10f      	bne.n	8009c16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c04:	601a      	str	r2, [r3, #0]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009c26:	2303      	movs	r3, #3
 8009c28:	e017      	b.n	8009c5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d101      	bne.n	8009c34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009c30:	2300      	movs	r3, #0
 8009c32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	3b01      	subs	r3, #1
 8009c38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	689a      	ldr	r2, [r3, #8]
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	4013      	ands	r3, r2
 8009c44:	68ba      	ldr	r2, [r7, #8]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	bf0c      	ite	eq
 8009c4a:	2301      	moveq	r3, #1
 8009c4c:	2300      	movne	r3, #0
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	461a      	mov	r2, r3
 8009c52:	79fb      	ldrb	r3, [r7, #7]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d19b      	bne.n	8009b90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3720      	adds	r7, #32
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	20000000 	.word	0x20000000

08009c68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b08a      	sub	sp, #40	; 0x28
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	607a      	str	r2, [r7, #4]
 8009c74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009c76:	2300      	movs	r3, #0
 8009c78:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009c7a:	f7fa fc35 	bl	80044e8 <HAL_GetTick>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c82:	1a9b      	subs	r3, r3, r2
 8009c84:	683a      	ldr	r2, [r7, #0]
 8009c86:	4413      	add	r3, r2
 8009c88:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009c8a:	f7fa fc2d 	bl	80044e8 <HAL_GetTick>
 8009c8e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	330c      	adds	r3, #12
 8009c96:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009c98:	4b3d      	ldr	r3, [pc, #244]	; (8009d90 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4413      	add	r3, r2
 8009ca2:	00da      	lsls	r2, r3, #3
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	0d1b      	lsrs	r3, r3, #20
 8009ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009caa:	fb02 f303 	mul.w	r3, r2, r3
 8009cae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009cb0:	e060      	b.n	8009d74 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009cb8:	d107      	bne.n	8009cca <SPI_WaitFifoStateUntilTimeout+0x62>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d104      	bne.n	8009cca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009cc8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd0:	d050      	beq.n	8009d74 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009cd2:	f7fa fc09 	bl	80044e8 <HAL_GetTick>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	6a3b      	ldr	r3, [r7, #32]
 8009cda:	1ad3      	subs	r3, r2, r3
 8009cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d902      	bls.n	8009ce8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d13d      	bne.n	8009d64 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	685a      	ldr	r2, [r3, #4]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009cf6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d00:	d111      	bne.n	8009d26 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d0a:	d004      	beq.n	8009d16 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d14:	d107      	bne.n	8009d26 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d2e:	d10f      	bne.n	8009d50 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d3e:	601a      	str	r2, [r3, #0]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2201      	movs	r2, #1
 8009d54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009d60:	2303      	movs	r3, #3
 8009d62:	e010      	b.n	8009d86 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d101      	bne.n	8009d6e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	3b01      	subs	r3, #1
 8009d72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	689a      	ldr	r2, [r3, #8]
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d196      	bne.n	8009cb2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3728      	adds	r7, #40	; 0x28
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	20000000 	.word	0x20000000

08009d94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b086      	sub	sp, #24
 8009d98:	af02      	add	r7, sp, #8
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	2200      	movs	r2, #0
 8009da8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f7ff ff5b 	bl	8009c68 <SPI_WaitFifoStateUntilTimeout>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d007      	beq.n	8009dc8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dbc:	f043 0220 	orr.w	r2, r3, #32
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	e027      	b.n	8009e18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	2180      	movs	r1, #128	; 0x80
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f7ff fec0 	bl	8009b58 <SPI_WaitFlagStateUntilTimeout>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d007      	beq.n	8009dee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009de2:	f043 0220 	orr.w	r2, r3, #32
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009dea:	2303      	movs	r3, #3
 8009dec:	e014      	b.n	8009e18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f7ff ff34 	bl	8009c68 <SPI_WaitFifoStateUntilTimeout>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d007      	beq.n	8009e16 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e0a:	f043 0220 	orr.w	r2, r3, #32
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009e12:	2303      	movs	r3, #3
 8009e14:	e000      	b.n	8009e18 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d101      	bne.n	8009e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e049      	b.n	8009ec6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d106      	bne.n	8009e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f7fa fa82 	bl	8004350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2202      	movs	r2, #2
 8009e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	3304      	adds	r3, #4
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	4610      	mov	r0, r2
 8009e60:	f000 f9d2 	bl	800a208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
	...

08009ed0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b085      	sub	sp, #20
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d001      	beq.n	8009ee8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e03b      	b.n	8009f60 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2202      	movs	r2, #2
 8009eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	68da      	ldr	r2, [r3, #12]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f042 0201 	orr.w	r2, r2, #1
 8009efe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a19      	ldr	r2, [pc, #100]	; (8009f6c <HAL_TIM_Base_Start_IT+0x9c>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d009      	beq.n	8009f1e <HAL_TIM_Base_Start_IT+0x4e>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f12:	d004      	beq.n	8009f1e <HAL_TIM_Base_Start_IT+0x4e>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a15      	ldr	r2, [pc, #84]	; (8009f70 <HAL_TIM_Base_Start_IT+0xa0>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d115      	bne.n	8009f4a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	689a      	ldr	r2, [r3, #8]
 8009f24:	4b13      	ldr	r3, [pc, #76]	; (8009f74 <HAL_TIM_Base_Start_IT+0xa4>)
 8009f26:	4013      	ands	r3, r2
 8009f28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2b06      	cmp	r3, #6
 8009f2e:	d015      	beq.n	8009f5c <HAL_TIM_Base_Start_IT+0x8c>
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f36:	d011      	beq.n	8009f5c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f042 0201 	orr.w	r2, r2, #1
 8009f46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f48:	e008      	b.n	8009f5c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f042 0201 	orr.w	r2, r2, #1
 8009f58:	601a      	str	r2, [r3, #0]
 8009f5a:	e000      	b.n	8009f5e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f5e:	2300      	movs	r3, #0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3714      	adds	r7, #20
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr
 8009f6c:	40012c00 	.word	0x40012c00
 8009f70:	40014000 	.word	0x40014000
 8009f74:	00010007 	.word	0x00010007

08009f78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	f003 0302 	and.w	r3, r3, #2
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	d122      	bne.n	8009fd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	f003 0302 	and.w	r3, r3, #2
 8009f98:	2b02      	cmp	r3, #2
 8009f9a:	d11b      	bne.n	8009fd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f06f 0202 	mvn.w	r2, #2
 8009fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	699b      	ldr	r3, [r3, #24]
 8009fb2:	f003 0303 	and.w	r3, r3, #3
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d003      	beq.n	8009fc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f905 	bl	800a1ca <HAL_TIM_IC_CaptureCallback>
 8009fc0:	e005      	b.n	8009fce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f8f7 	bl	800a1b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 f908 	bl	800a1de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	691b      	ldr	r3, [r3, #16]
 8009fda:	f003 0304 	and.w	r3, r3, #4
 8009fde:	2b04      	cmp	r3, #4
 8009fe0:	d122      	bne.n	800a028 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	f003 0304 	and.w	r3, r3, #4
 8009fec:	2b04      	cmp	r3, #4
 8009fee:	d11b      	bne.n	800a028 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f06f 0204 	mvn.w	r2, #4
 8009ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2202      	movs	r2, #2
 8009ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	699b      	ldr	r3, [r3, #24]
 800a006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d003      	beq.n	800a016 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f8db 	bl	800a1ca <HAL_TIM_IC_CaptureCallback>
 800a014:	e005      	b.n	800a022 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 f8cd 	bl	800a1b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 f8de 	bl	800a1de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	f003 0308 	and.w	r3, r3, #8
 800a032:	2b08      	cmp	r3, #8
 800a034:	d122      	bne.n	800a07c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	f003 0308 	and.w	r3, r3, #8
 800a040:	2b08      	cmp	r3, #8
 800a042:	d11b      	bne.n	800a07c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f06f 0208 	mvn.w	r2, #8
 800a04c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2204      	movs	r2, #4
 800a052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	69db      	ldr	r3, [r3, #28]
 800a05a:	f003 0303 	and.w	r3, r3, #3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d003      	beq.n	800a06a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f8b1 	bl	800a1ca <HAL_TIM_IC_CaptureCallback>
 800a068:	e005      	b.n	800a076 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 f8a3 	bl	800a1b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f8b4 	bl	800a1de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	f003 0310 	and.w	r3, r3, #16
 800a086:	2b10      	cmp	r3, #16
 800a088:	d122      	bne.n	800a0d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	f003 0310 	and.w	r3, r3, #16
 800a094:	2b10      	cmp	r3, #16
 800a096:	d11b      	bne.n	800a0d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f06f 0210 	mvn.w	r2, #16
 800a0a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2208      	movs	r2, #8
 800a0a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	69db      	ldr	r3, [r3, #28]
 800a0ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d003      	beq.n	800a0be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 f887 	bl	800a1ca <HAL_TIM_IC_CaptureCallback>
 800a0bc:	e005      	b.n	800a0ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f879 	bl	800a1b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 f88a 	bl	800a1de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	f003 0301 	and.w	r3, r3, #1
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d10e      	bne.n	800a0fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	f003 0301 	and.w	r3, r3, #1
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d107      	bne.n	800a0fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f06f 0201 	mvn.w	r2, #1
 800a0f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f7f9 ff04 	bl	8003f04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a106:	2b80      	cmp	r3, #128	; 0x80
 800a108:	d10e      	bne.n	800a128 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a114:	2b80      	cmp	r3, #128	; 0x80
 800a116:	d107      	bne.n	800a128 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f944 	bl	800a3b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a136:	d10e      	bne.n	800a156 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a142:	2b80      	cmp	r3, #128	; 0x80
 800a144:	d107      	bne.n	800a156 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a14e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 f937 	bl	800a3c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a160:	2b40      	cmp	r3, #64	; 0x40
 800a162:	d10e      	bne.n	800a182 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a16e:	2b40      	cmp	r3, #64	; 0x40
 800a170:	d107      	bne.n	800a182 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a17a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 f838 	bl	800a1f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	f003 0320 	and.w	r3, r3, #32
 800a18c:	2b20      	cmp	r3, #32
 800a18e:	d10e      	bne.n	800a1ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	f003 0320 	and.w	r3, r3, #32
 800a19a:	2b20      	cmp	r3, #32
 800a19c:	d107      	bne.n	800a1ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f06f 0220 	mvn.w	r2, #32
 800a1a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f8f7 	bl	800a39c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a1ae:	bf00      	nop
 800a1b0:	3708      	adds	r7, #8
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a1b6:	b480      	push	{r7}
 800a1b8:	b083      	sub	sp, #12
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a1be:	bf00      	nop
 800a1c0:	370c      	adds	r7, #12
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr

0800a1ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a1ca:	b480      	push	{r7}
 800a1cc:	b083      	sub	sp, #12
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a1d2:	bf00      	nop
 800a1d4:	370c      	adds	r7, #12
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr

0800a1de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a1de:	b480      	push	{r7}
 800a1e0:	b083      	sub	sp, #12
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a1e6:	bf00      	nop
 800a1e8:	370c      	adds	r7, #12
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr

0800a1f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a1f2:	b480      	push	{r7}
 800a1f4:	b083      	sub	sp, #12
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1fa:	bf00      	nop
 800a1fc:	370c      	adds	r7, #12
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr
	...

0800a208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a208:	b480      	push	{r7}
 800a20a:	b085      	sub	sp, #20
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a2a      	ldr	r2, [pc, #168]	; (800a2c4 <TIM_Base_SetConfig+0xbc>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d003      	beq.n	800a228 <TIM_Base_SetConfig+0x20>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a226:	d108      	bne.n	800a23a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a22e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	4313      	orrs	r3, r2
 800a238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4a21      	ldr	r2, [pc, #132]	; (800a2c4 <TIM_Base_SetConfig+0xbc>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d00b      	beq.n	800a25a <TIM_Base_SetConfig+0x52>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a248:	d007      	beq.n	800a25a <TIM_Base_SetConfig+0x52>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4a1e      	ldr	r2, [pc, #120]	; (800a2c8 <TIM_Base_SetConfig+0xc0>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d003      	beq.n	800a25a <TIM_Base_SetConfig+0x52>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	4a1d      	ldr	r2, [pc, #116]	; (800a2cc <TIM_Base_SetConfig+0xc4>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d108      	bne.n	800a26c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	4313      	orrs	r3, r2
 800a26a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	695b      	ldr	r3, [r3, #20]
 800a276:	4313      	orrs	r3, r2
 800a278:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	689a      	ldr	r2, [r3, #8]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	4a0c      	ldr	r2, [pc, #48]	; (800a2c4 <TIM_Base_SetConfig+0xbc>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d007      	beq.n	800a2a8 <TIM_Base_SetConfig+0xa0>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	4a0b      	ldr	r2, [pc, #44]	; (800a2c8 <TIM_Base_SetConfig+0xc0>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d003      	beq.n	800a2a8 <TIM_Base_SetConfig+0xa0>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a0a      	ldr	r2, [pc, #40]	; (800a2cc <TIM_Base_SetConfig+0xc4>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d103      	bne.n	800a2b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	691a      	ldr	r2, [r3, #16]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	615a      	str	r2, [r3, #20]
}
 800a2b6:	bf00      	nop
 800a2b8:	3714      	adds	r7, #20
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	40012c00 	.word	0x40012c00
 800a2c8:	40014000 	.word	0x40014000
 800a2cc:	40014400 	.word	0x40014400

0800a2d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d101      	bne.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a2e4:	2302      	movs	r3, #2
 800a2e6:	e04f      	b.n	800a388 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2202      	movs	r2, #2
 800a2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a21      	ldr	r2, [pc, #132]	; (800a394 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d108      	bne.n	800a324 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a318:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	4313      	orrs	r3, r2
 800a322:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a32a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	4313      	orrs	r3, r2
 800a334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a14      	ldr	r2, [pc, #80]	; (800a394 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d009      	beq.n	800a35c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a350:	d004      	beq.n	800a35c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a10      	ldr	r2, [pc, #64]	; (800a398 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d10c      	bne.n	800a376 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a362:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	68ba      	ldr	r2, [r7, #8]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	68ba      	ldr	r2, [r7, #8]
 800a374:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2201      	movs	r2, #1
 800a37a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2200      	movs	r2, #0
 800a382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a386:	2300      	movs	r3, #0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3714      	adds	r7, #20
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	40012c00 	.word	0x40012c00
 800a398:	40014000 	.word	0x40014000

0800a39c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a3a4:	bf00      	nop
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a3cc:	bf00      	nop
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a3d8:	b084      	sub	sp, #16
 800a3da:	b480      	push	{r7}
 800a3dc:	b083      	sub	sp, #12
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
 800a3e2:	f107 0014 	add.w	r0, r7, #20
 800a3e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	370c      	adds	r7, #12
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	b004      	add	sp, #16
 800a3f8:	4770      	bx	lr

0800a3fa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b085      	sub	sp, #20
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a40a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a40e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	b29a      	uxth	r2, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a430:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a434:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a43c:	b29a      	uxth	r2, r3
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	b29b      	uxth	r3, r3
 800a442:	43db      	mvns	r3, r3
 800a444:	b29b      	uxth	r3, r3
 800a446:	4013      	ands	r3, r2
 800a448:	b29a      	uxth	r2, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a450:	2300      	movs	r3, #0
}
 800a452:	4618      	mov	r0, r3
 800a454:	3714      	adds	r7, #20
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr

0800a45e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800a45e:	b480      	push	{r7}
 800a460:	b083      	sub	sp, #12
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
 800a466:	460b      	mov	r3, r1
 800a468:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a478:	b084      	sub	sp, #16
 800a47a:	b480      	push	{r7}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	f107 0014 	add.w	r0, r7, #20
 800a486:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2201      	movs	r2, #1
 800a48e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	b004      	add	sp, #16
 800a4b8:	4770      	bx	lr
	...

0800a4bc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b09d      	sub	sp, #116	; 0x74
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4413      	add	r3, r2
 800a4d6:	881b      	ldrh	r3, [r3, #0]
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a4de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4e2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	78db      	ldrb	r3, [r3, #3]
 800a4ea:	2b03      	cmp	r3, #3
 800a4ec:	d81f      	bhi.n	800a52e <USB_ActivateEndpoint+0x72>
 800a4ee:	a201      	add	r2, pc, #4	; (adr r2, 800a4f4 <USB_ActivateEndpoint+0x38>)
 800a4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f4:	0800a505 	.word	0x0800a505
 800a4f8:	0800a521 	.word	0x0800a521
 800a4fc:	0800a537 	.word	0x0800a537
 800a500:	0800a513 	.word	0x0800a513
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a504:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a508:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a50c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a510:	e012      	b.n	800a538 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a512:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a516:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a51a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a51e:	e00b      	b.n	800a538 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a520:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a524:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a528:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a52c:	e004      	b.n	800a538 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a52e:	2301      	movs	r3, #1
 800a530:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a534:	e000      	b.n	800a538 <USB_ActivateEndpoint+0x7c>
      break;
 800a536:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	441a      	add	r2, r3
 800a542:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a54a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a54e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a556:	b29b      	uxth	r3, r3
 800a558:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	4413      	add	r3, r2
 800a564:	881b      	ldrh	r3, [r3, #0]
 800a566:	b29b      	uxth	r3, r3
 800a568:	b21b      	sxth	r3, r3
 800a56a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a56e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a572:	b21a      	sxth	r2, r3
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	b21b      	sxth	r3, r3
 800a57a:	4313      	orrs	r3, r2
 800a57c:	b21b      	sxth	r3, r3
 800a57e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	441a      	add	r2, r3
 800a58c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a59c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5a0:	b29b      	uxth	r3, r3
 800a5a2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	7b1b      	ldrb	r3, [r3, #12]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	f040 816e 	bne.w	800a88a <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	785b      	ldrb	r3, [r3, #1]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f000 8084 	beq.w	800a6c0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	61bb      	str	r3, [r7, #24]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	61bb      	str	r3, [r7, #24]
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	00da      	lsls	r2, r3, #3
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5da:	617b      	str	r3, [r7, #20]
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	88db      	ldrh	r3, [r3, #6]
 800a5e0:	085b      	lsrs	r3, r3, #1
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	005b      	lsls	r3, r3, #1
 800a5e6:	b29a      	uxth	r2, r3
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	4413      	add	r3, r2
 800a5f6:	881b      	ldrh	r3, [r3, #0]
 800a5f8:	827b      	strh	r3, [r7, #18]
 800a5fa:	8a7b      	ldrh	r3, [r7, #18]
 800a5fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a600:	2b00      	cmp	r3, #0
 800a602:	d01b      	beq.n	800a63c <USB_ActivateEndpoint+0x180>
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	4413      	add	r3, r2
 800a60e:	881b      	ldrh	r3, [r3, #0]
 800a610:	b29b      	uxth	r3, r3
 800a612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a61a:	823b      	strh	r3, [r7, #16]
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	441a      	add	r2, r3
 800a626:	8a3b      	ldrh	r3, [r7, #16]
 800a628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a62c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a634:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a638:	b29b      	uxth	r3, r3
 800a63a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	78db      	ldrb	r3, [r3, #3]
 800a640:	2b01      	cmp	r3, #1
 800a642:	d020      	beq.n	800a686 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	4413      	add	r3, r2
 800a64e:	881b      	ldrh	r3, [r3, #0]
 800a650:	b29b      	uxth	r3, r3
 800a652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a65a:	81bb      	strh	r3, [r7, #12]
 800a65c:	89bb      	ldrh	r3, [r7, #12]
 800a65e:	f083 0320 	eor.w	r3, r3, #32
 800a662:	81bb      	strh	r3, [r7, #12]
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	441a      	add	r2, r3
 800a66e:	89bb      	ldrh	r3, [r7, #12]
 800a670:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a674:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a67c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a680:	b29b      	uxth	r3, r3
 800a682:	8013      	strh	r3, [r2, #0]
 800a684:	e2cb      	b.n	800ac1e <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	4413      	add	r3, r2
 800a690:	881b      	ldrh	r3, [r3, #0]
 800a692:	b29b      	uxth	r3, r3
 800a694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a69c:	81fb      	strh	r3, [r7, #14]
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	441a      	add	r2, r3
 800a6a8:	89fb      	ldrh	r3, [r7, #14]
 800a6aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	8013      	strh	r3, [r2, #0]
 800a6be:	e2ae      	b.n	800ac1e <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	633b      	str	r3, [r7, #48]	; 0x30
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d0:	4413      	add	r3, r2
 800a6d2:	633b      	str	r3, [r7, #48]	; 0x30
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	00da      	lsls	r2, r3, #3
 800a6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6dc:	4413      	add	r3, r2
 800a6de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	88db      	ldrh	r3, [r3, #6]
 800a6e8:	085b      	lsrs	r3, r3, #1
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	005b      	lsls	r3, r3, #1
 800a6ee:	b29a      	uxth	r2, r3
 800a6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	461a      	mov	r2, r3
 800a702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a704:	4413      	add	r3, r2
 800a706:	62bb      	str	r3, [r7, #40]	; 0x28
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	00da      	lsls	r2, r3, #3
 800a70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a710:	4413      	add	r3, r2
 800a712:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a716:	627b      	str	r3, [r7, #36]	; 0x24
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	691b      	ldr	r3, [r3, #16]
 800a71c:	2b3e      	cmp	r3, #62	; 0x3e
 800a71e:	d918      	bls.n	800a752 <USB_ActivateEndpoint+0x296>
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	691b      	ldr	r3, [r3, #16]
 800a724:	095b      	lsrs	r3, r3, #5
 800a726:	66bb      	str	r3, [r7, #104]	; 0x68
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	f003 031f 	and.w	r3, r3, #31
 800a730:	2b00      	cmp	r3, #0
 800a732:	d102      	bne.n	800a73a <USB_ActivateEndpoint+0x27e>
 800a734:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a736:	3b01      	subs	r3, #1
 800a738:	66bb      	str	r3, [r7, #104]	; 0x68
 800a73a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	029b      	lsls	r3, r3, #10
 800a740:	b29b      	uxth	r3, r3
 800a742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a74a:	b29a      	uxth	r2, r3
 800a74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74e:	801a      	strh	r2, [r3, #0]
 800a750:	e029      	b.n	800a7a6 <USB_ActivateEndpoint+0x2ea>
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	691b      	ldr	r3, [r3, #16]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d112      	bne.n	800a780 <USB_ActivateEndpoint+0x2c4>
 800a75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75c:	881b      	ldrh	r3, [r3, #0]
 800a75e:	b29b      	uxth	r3, r3
 800a760:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a764:	b29a      	uxth	r2, r3
 800a766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a768:	801a      	strh	r2, [r3, #0]
 800a76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76c:	881b      	ldrh	r3, [r3, #0]
 800a76e:	b29b      	uxth	r3, r3
 800a770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a778:	b29a      	uxth	r2, r3
 800a77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77c:	801a      	strh	r2, [r3, #0]
 800a77e:	e012      	b.n	800a7a6 <USB_ActivateEndpoint+0x2ea>
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	085b      	lsrs	r3, r3, #1
 800a786:	66bb      	str	r3, [r7, #104]	; 0x68
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	691b      	ldr	r3, [r3, #16]
 800a78c:	f003 0301 	and.w	r3, r3, #1
 800a790:	2b00      	cmp	r3, #0
 800a792:	d002      	beq.n	800a79a <USB_ActivateEndpoint+0x2de>
 800a794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a796:	3301      	adds	r3, #1
 800a798:	66bb      	str	r3, [r7, #104]	; 0x68
 800a79a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	029b      	lsls	r3, r3, #10
 800a7a0:	b29a      	uxth	r2, r3
 800a7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	4413      	add	r3, r2
 800a7b0:	881b      	ldrh	r3, [r3, #0]
 800a7b2:	847b      	strh	r3, [r7, #34]	; 0x22
 800a7b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a7b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d01b      	beq.n	800a7f6 <USB_ActivateEndpoint+0x33a>
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	4413      	add	r3, r2
 800a7c8:	881b      	ldrh	r3, [r3, #0]
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7d4:	843b      	strh	r3, [r7, #32]
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	441a      	add	r2, r3
 800a7e0:	8c3b      	ldrh	r3, [r7, #32]
 800a7e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a7ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d124      	bne.n	800a848 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	4413      	add	r3, r2
 800a808:	881b      	ldrh	r3, [r3, #0]
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a814:	83bb      	strh	r3, [r7, #28]
 800a816:	8bbb      	ldrh	r3, [r7, #28]
 800a818:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a81c:	83bb      	strh	r3, [r7, #28]
 800a81e:	8bbb      	ldrh	r3, [r7, #28]
 800a820:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a824:	83bb      	strh	r3, [r7, #28]
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	441a      	add	r2, r3
 800a830:	8bbb      	ldrh	r3, [r7, #28]
 800a832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a83a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a83e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a842:	b29b      	uxth	r3, r3
 800a844:	8013      	strh	r3, [r2, #0]
 800a846:	e1ea      	b.n	800ac1e <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4413      	add	r3, r2
 800a852:	881b      	ldrh	r3, [r3, #0]
 800a854:	b29b      	uxth	r3, r3
 800a856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a85a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a85e:	83fb      	strh	r3, [r7, #30]
 800a860:	8bfb      	ldrh	r3, [r7, #30]
 800a862:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a866:	83fb      	strh	r3, [r7, #30]
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	441a      	add	r2, r3
 800a872:	8bfb      	ldrh	r3, [r7, #30]
 800a874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a87c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a884:	b29b      	uxth	r3, r3
 800a886:	8013      	strh	r3, [r2, #0]
 800a888:	e1c9      	b.n	800ac1e <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	78db      	ldrb	r3, [r3, #3]
 800a88e:	2b02      	cmp	r3, #2
 800a890:	d11e      	bne.n	800a8d0 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	4413      	add	r3, r2
 800a89c:	881b      	ldrh	r3, [r3, #0]
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8a8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	441a      	add	r2, r3
 800a8b6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a8ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8c2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a8c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	8013      	strh	r3, [r2, #0]
 800a8ce:	e01d      	b.n	800a90c <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	4413      	add	r3, r2
 800a8da:	881b      	ldrh	r3, [r3, #0]
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a8e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8e6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	441a      	add	r2, r3
 800a8f4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a8f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a908:	b29b      	uxth	r3, r3
 800a90a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a916:	b29b      	uxth	r3, r3
 800a918:	461a      	mov	r2, r3
 800a91a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a91c:	4413      	add	r3, r2
 800a91e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	00da      	lsls	r2, r3, #3
 800a926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a928:	4413      	add	r3, r2
 800a92a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a92e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	891b      	ldrh	r3, [r3, #8]
 800a934:	085b      	lsrs	r3, r3, #1
 800a936:	b29b      	uxth	r3, r3
 800a938:	005b      	lsls	r3, r3, #1
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a93e:	801a      	strh	r2, [r3, #0]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	657b      	str	r3, [r7, #84]	; 0x54
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	461a      	mov	r2, r3
 800a94e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a950:	4413      	add	r3, r2
 800a952:	657b      	str	r3, [r7, #84]	; 0x54
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	00da      	lsls	r2, r3, #3
 800a95a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a95c:	4413      	add	r3, r2
 800a95e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a962:	653b      	str	r3, [r7, #80]	; 0x50
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	895b      	ldrh	r3, [r3, #10]
 800a968:	085b      	lsrs	r3, r3, #1
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	005b      	lsls	r3, r3, #1
 800a96e:	b29a      	uxth	r2, r3
 800a970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a972:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	785b      	ldrb	r3, [r3, #1]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f040 8093 	bne.w	800aaa4 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	4413      	add	r3, r2
 800a988:	881b      	ldrh	r3, [r3, #0]
 800a98a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a98e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a996:	2b00      	cmp	r3, #0
 800a998:	d01b      	beq.n	800a9d2 <USB_ActivateEndpoint+0x516>
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	4413      	add	r3, r2
 800a9a4:	881b      	ldrh	r3, [r3, #0]
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	441a      	add	r2, r3
 800a9bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a9be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a9ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	4413      	add	r3, r2
 800a9dc:	881b      	ldrh	r3, [r3, #0]
 800a9de:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a9e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a9e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d01b      	beq.n	800aa22 <USB_ActivateEndpoint+0x566>
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	4413      	add	r3, r2
 800a9f4:	881b      	ldrh	r3, [r3, #0]
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa00:	877b      	strh	r3, [r7, #58]	; 0x3a
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	441a      	add	r2, r3
 800aa0c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aa0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	4413      	add	r3, r2
 800aa2c:	881b      	ldrh	r3, [r3, #0]
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa38:	873b      	strh	r3, [r7, #56]	; 0x38
 800aa3a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aa3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aa40:	873b      	strh	r3, [r7, #56]	; 0x38
 800aa42:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aa44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aa48:	873b      	strh	r3, [r7, #56]	; 0x38
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	441a      	add	r2, r3
 800aa54:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aa56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	4413      	add	r3, r2
 800aa74:	881b      	ldrh	r3, [r3, #0]
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa80:	86fb      	strh	r3, [r7, #54]	; 0x36
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	441a      	add	r2, r3
 800aa8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aa8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	8013      	strh	r3, [r2, #0]
 800aaa2:	e0bc      	b.n	800ac1e <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	4413      	add	r3, r2
 800aaae:	881b      	ldrh	r3, [r3, #0]
 800aab0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800aab4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800aab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d01d      	beq.n	800aafc <USB_ActivateEndpoint+0x640>
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	4413      	add	r3, r2
 800aaca:	881b      	ldrh	r3, [r3, #0]
 800aacc:	b29b      	uxth	r3, r3
 800aace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aad6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	441a      	add	r2, r3
 800aae4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800aae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aaf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	4413      	add	r3, r2
 800ab06:	881b      	ldrh	r3, [r3, #0]
 800ab08:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ab0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ab10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d01d      	beq.n	800ab54 <USB_ActivateEndpoint+0x698>
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	4413      	add	r3, r2
 800ab22:	881b      	ldrh	r3, [r3, #0]
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab2e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	441a      	add	r2, r3
 800ab3c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ab40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	78db      	ldrb	r3, [r3, #3]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d024      	beq.n	800aba6 <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	4413      	add	r3, r2
 800ab66:	881b      	ldrh	r3, [r3, #0]
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab72:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ab76:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ab7a:	f083 0320 	eor.w	r3, r3, #32
 800ab7e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	441a      	add	r2, r3
 800ab8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ab90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	8013      	strh	r3, [r2, #0]
 800aba4:	e01d      	b.n	800abe2 <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4413      	add	r3, r2
 800abb0:	881b      	ldrh	r3, [r3, #0]
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abbc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	441a      	add	r2, r3
 800abca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800abce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abde:	b29b      	uxth	r3, r3
 800abe0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	4413      	add	r3, r2
 800abec:	881b      	ldrh	r3, [r3, #0]
 800abee:	b29b      	uxth	r3, r3
 800abf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abf8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	441a      	add	r2, r3
 800ac06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ac0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800ac1e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3774      	adds	r7, #116	; 0x74
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop

0800ac30 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b08d      	sub	sp, #52	; 0x34
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	7b1b      	ldrb	r3, [r3, #12]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	f040 808e 	bne.w	800ad60 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	785b      	ldrb	r3, [r3, #1]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d044      	beq.n	800acd6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	4413      	add	r3, r2
 800ac56:	881b      	ldrh	r3, [r3, #0]
 800ac58:	81bb      	strh	r3, [r7, #12]
 800ac5a:	89bb      	ldrh	r3, [r7, #12]
 800ac5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d01b      	beq.n	800ac9c <USB_DeactivateEndpoint+0x6c>
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4413      	add	r3, r2
 800ac6e:	881b      	ldrh	r3, [r3, #0]
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac7a:	817b      	strh	r3, [r7, #10]
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	441a      	add	r2, r3
 800ac86:	897b      	ldrh	r3, [r7, #10]
 800ac88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	4413      	add	r3, r2
 800aca6:	881b      	ldrh	r3, [r3, #0]
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acb2:	813b      	strh	r3, [r7, #8]
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	441a      	add	r2, r3
 800acbe:	893b      	ldrh	r3, [r7, #8]
 800acc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800accc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	8013      	strh	r3, [r2, #0]
 800acd4:	e192      	b.n	800affc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	4413      	add	r3, r2
 800ace0:	881b      	ldrh	r3, [r3, #0]
 800ace2:	827b      	strh	r3, [r7, #18]
 800ace4:	8a7b      	ldrh	r3, [r7, #18]
 800ace6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acea:	2b00      	cmp	r3, #0
 800acec:	d01b      	beq.n	800ad26 <USB_DeactivateEndpoint+0xf6>
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	4413      	add	r3, r2
 800acf8:	881b      	ldrh	r3, [r3, #0]
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad04:	823b      	strh	r3, [r7, #16]
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	441a      	add	r2, r3
 800ad10:	8a3b      	ldrh	r3, [r7, #16]
 800ad12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	4413      	add	r3, r2
 800ad30:	881b      	ldrh	r3, [r3, #0]
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad3c:	81fb      	strh	r3, [r7, #14]
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	441a      	add	r2, r3
 800ad48:	89fb      	ldrh	r3, [r7, #14]
 800ad4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	8013      	strh	r3, [r2, #0]
 800ad5e:	e14d      	b.n	800affc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	785b      	ldrb	r3, [r3, #1]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f040 80a5 	bne.w	800aeb4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	4413      	add	r3, r2
 800ad74:	881b      	ldrh	r3, [r3, #0]
 800ad76:	843b      	strh	r3, [r7, #32]
 800ad78:	8c3b      	ldrh	r3, [r7, #32]
 800ad7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d01b      	beq.n	800adba <USB_DeactivateEndpoint+0x18a>
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	4413      	add	r3, r2
 800ad8c:	881b      	ldrh	r3, [r3, #0]
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad98:	83fb      	strh	r3, [r7, #30]
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	441a      	add	r2, r3
 800ada4:	8bfb      	ldrh	r3, [r7, #30]
 800ada6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800adb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	4413      	add	r3, r2
 800adc4:	881b      	ldrh	r3, [r3, #0]
 800adc6:	83bb      	strh	r3, [r7, #28]
 800adc8:	8bbb      	ldrh	r3, [r7, #28]
 800adca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adce:	2b00      	cmp	r3, #0
 800add0:	d01b      	beq.n	800ae0a <USB_DeactivateEndpoint+0x1da>
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	4413      	add	r3, r2
 800addc:	881b      	ldrh	r3, [r3, #0]
 800adde:	b29b      	uxth	r3, r3
 800ade0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ade4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ade8:	837b      	strh	r3, [r7, #26]
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	441a      	add	r2, r3
 800adf4:	8b7b      	ldrh	r3, [r7, #26]
 800adf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	4413      	add	r3, r2
 800ae14:	881b      	ldrh	r3, [r3, #0]
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae20:	833b      	strh	r3, [r7, #24]
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	441a      	add	r2, r3
 800ae2c:	8b3b      	ldrh	r3, [r7, #24]
 800ae2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	4413      	add	r3, r2
 800ae4c:	881b      	ldrh	r3, [r3, #0]
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae58:	82fb      	strh	r3, [r7, #22]
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	441a      	add	r2, r3
 800ae64:	8afb      	ldrh	r3, [r7, #22]
 800ae66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	4413      	add	r3, r2
 800ae84:	881b      	ldrh	r3, [r3, #0]
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae90:	82bb      	strh	r3, [r7, #20]
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	441a      	add	r2, r3
 800ae9c:	8abb      	ldrh	r3, [r7, #20]
 800ae9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aeaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	8013      	strh	r3, [r2, #0]
 800aeb2:	e0a3      	b.n	800affc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4413      	add	r3, r2
 800aebe:	881b      	ldrh	r3, [r3, #0]
 800aec0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800aec2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d01b      	beq.n	800af04 <USB_DeactivateEndpoint+0x2d4>
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4413      	add	r3, r2
 800aed6:	881b      	ldrh	r3, [r3, #0]
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aee2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	441a      	add	r2, r3
 800aeee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aef8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aefc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af00:	b29b      	uxth	r3, r3
 800af02:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	4413      	add	r3, r2
 800af0e:	881b      	ldrh	r3, [r3, #0]
 800af10:	857b      	strh	r3, [r7, #42]	; 0x2a
 800af12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800af14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d01b      	beq.n	800af54 <USB_DeactivateEndpoint+0x324>
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	4413      	add	r3, r2
 800af26:	881b      	ldrh	r3, [r3, #0]
 800af28:	b29b      	uxth	r3, r3
 800af2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af32:	853b      	strh	r3, [r7, #40]	; 0x28
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	441a      	add	r2, r3
 800af3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800af50:	b29b      	uxth	r3, r3
 800af52:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	4413      	add	r3, r2
 800af5e:	881b      	ldrh	r3, [r3, #0]
 800af60:	b29b      	uxth	r3, r3
 800af62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af6a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	441a      	add	r2, r3
 800af76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af88:	b29b      	uxth	r3, r3
 800af8a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	4413      	add	r3, r2
 800af96:	881b      	ldrh	r3, [r3, #0]
 800af98:	b29b      	uxth	r3, r3
 800af9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afa2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	441a      	add	r2, r3
 800afae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	4413      	add	r3, r2
 800afce:	881b      	ldrh	r3, [r3, #0]
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afda:	847b      	strh	r3, [r7, #34]	; 0x22
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	441a      	add	r2, r3
 800afe6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800afe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aff8:	b29b      	uxth	r3, r3
 800affa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	3734      	adds	r7, #52	; 0x34
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr

0800b00a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b0c2      	sub	sp, #264	; 0x108
 800b00e:	af00      	add	r7, sp, #0
 800b010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b014:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b018:	6018      	str	r0, [r3, #0]
 800b01a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b01e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b022:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	785b      	ldrb	r3, [r3, #1]
 800b030:	2b01      	cmp	r3, #1
 800b032:	f040 867b 	bne.w	800bd2c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b03a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	699a      	ldr	r2, [r3, #24]
 800b042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b046:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	691b      	ldr	r3, [r3, #16]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d908      	bls.n	800b064 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	691b      	ldr	r3, [r3, #16]
 800b05e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b062:	e007      	b.n	800b074 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	699b      	ldr	r3, [r3, #24]
 800b070:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	7b1b      	ldrb	r3, [r3, #12]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d13a      	bne.n	800b0fa <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	6959      	ldr	r1, [r3, #20]
 800b090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	88da      	ldrh	r2, [r3, #6]
 800b09c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b0a6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b0aa:	6800      	ldr	r0, [r0, #0]
 800b0ac:	f001 fc3e 	bl	800c92c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b0b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	613b      	str	r3, [r7, #16]
 800b0bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	613b      	str	r3, [r7, #16]
 800b0d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	00da      	lsls	r2, r3, #3
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b0ea:	60fb      	str	r3, [r7, #12]
 800b0ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0f0:	b29a      	uxth	r2, r3
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	801a      	strh	r2, [r3, #0]
 800b0f6:	f000 bde3 	b.w	800bcc0 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b0fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	78db      	ldrb	r3, [r3, #3]
 800b106:	2b02      	cmp	r3, #2
 800b108:	f040 843a 	bne.w	800b980 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b10c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	6a1a      	ldr	r2, [r3, #32]
 800b118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b11c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	691b      	ldr	r3, [r3, #16]
 800b124:	429a      	cmp	r2, r3
 800b126:	f240 83b7 	bls.w	800b898 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b12a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b12e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	4413      	add	r3, r2
 800b144:	881b      	ldrh	r3, [r3, #0]
 800b146:	b29b      	uxth	r3, r3
 800b148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b14c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b150:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b158:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b15c:	681a      	ldr	r2, [r3, #0]
 800b15e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	441a      	add	r2, r3
 800b16e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b17a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b17e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b182:	b29b      	uxth	r3, r3
 800b184:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b18a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	6a1a      	ldr	r2, [r3, #32]
 800b192:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b196:	1ad2      	subs	r2, r2, r3
 800b198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b19c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b1a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	4413      	add	r3, r2
 800b1be:	881b      	ldrh	r3, [r3, #0]
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f000 81b3 	beq.w	800b532 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b1cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	633b      	str	r3, [r7, #48]	; 0x30
 800b1d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	785b      	ldrb	r3, [r3, #1]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d16d      	bne.n	800b2c4 <USB_EPStartXfer+0x2ba>
 800b1e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b202:	b29b      	uxth	r3, r3
 800b204:	461a      	mov	r2, r3
 800b206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b208:	4413      	add	r3, r2
 800b20a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b20c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	00da      	lsls	r2, r3, #3
 800b21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21c:	4413      	add	r3, r2
 800b21e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b222:	627b      	str	r3, [r7, #36]	; 0x24
 800b224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b228:	2b3e      	cmp	r3, #62	; 0x3e
 800b22a:	d91c      	bls.n	800b266 <USB_EPStartXfer+0x25c>
 800b22c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b230:	095b      	lsrs	r3, r3, #5
 800b232:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b23a:	f003 031f 	and.w	r3, r3, #31
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d104      	bne.n	800b24c <USB_EPStartXfer+0x242>
 800b242:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b246:	3b01      	subs	r3, #1
 800b248:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b24c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b250:	b29b      	uxth	r3, r3
 800b252:	029b      	lsls	r3, r3, #10
 800b254:	b29b      	uxth	r3, r3
 800b256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b25a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b25e:	b29a      	uxth	r2, r3
 800b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b262:	801a      	strh	r2, [r3, #0]
 800b264:	e053      	b.n	800b30e <USB_EPStartXfer+0x304>
 800b266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d112      	bne.n	800b294 <USB_EPStartXfer+0x28a>
 800b26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b270:	881b      	ldrh	r3, [r3, #0]
 800b272:	b29b      	uxth	r3, r3
 800b274:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b278:	b29a      	uxth	r2, r3
 800b27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27c:	801a      	strh	r2, [r3, #0]
 800b27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b280:	881b      	ldrh	r3, [r3, #0]
 800b282:	b29b      	uxth	r3, r3
 800b284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b28c:	b29a      	uxth	r2, r3
 800b28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b290:	801a      	strh	r2, [r3, #0]
 800b292:	e03c      	b.n	800b30e <USB_EPStartXfer+0x304>
 800b294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b298:	085b      	lsrs	r3, r3, #1
 800b29a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b29e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2a2:	f003 0301 	and.w	r3, r3, #1
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d004      	beq.n	800b2b4 <USB_EPStartXfer+0x2aa>
 800b2aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b2b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	029b      	lsls	r3, r3, #10
 800b2bc:	b29a      	uxth	r2, r3
 800b2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c0:	801a      	strh	r2, [r3, #0]
 800b2c2:	e024      	b.n	800b30e <USB_EPStartXfer+0x304>
 800b2c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	785b      	ldrb	r3, [r3, #1]
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d11c      	bne.n	800b30e <USB_EPStartXfer+0x304>
 800b2d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e8:	4413      	add	r3, r2
 800b2ea:	633b      	str	r3, [r7, #48]	; 0x30
 800b2ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	00da      	lsls	r2, r3, #3
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fc:	4413      	add	r3, r2
 800b2fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b302:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b308:	b29a      	uxth	r2, r3
 800b30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b30c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b30e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	895b      	ldrh	r3, [r3, #10]
 800b31a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b31e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	6959      	ldr	r1, [r3, #20]
 800b32a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b32e:	b29b      	uxth	r3, r3
 800b330:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b334:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b338:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b33c:	6800      	ldr	r0, [r0, #0]
 800b33e:	f001 faf5 	bl	800c92c <USB_WritePMA>
            ep->xfer_buff += len;
 800b342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	695a      	ldr	r2, [r3, #20]
 800b34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b352:	441a      	add	r2, r3
 800b354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	6a1a      	ldr	r2, [r3, #32]
 800b36c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d90f      	bls.n	800b39c <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800b37c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	6a1a      	ldr	r2, [r3, #32]
 800b388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b38c:	1ad2      	subs	r2, r2, r3
 800b38e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	621a      	str	r2, [r3, #32]
 800b39a:	e00e      	b.n	800b3ba <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800b39c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	6a1b      	ldr	r3, [r3, #32]
 800b3a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b3ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b3ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	785b      	ldrb	r3, [r3, #1]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d16d      	bne.n	800b4a6 <USB_EPStartXfer+0x49c>
 800b3ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	61bb      	str	r3, [r7, #24]
 800b3d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	61bb      	str	r3, [r7, #24]
 800b3ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	00da      	lsls	r2, r3, #3
 800b3fc:	69bb      	ldr	r3, [r7, #24]
 800b3fe:	4413      	add	r3, r2
 800b400:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b404:	617b      	str	r3, [r7, #20]
 800b406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b40a:	2b3e      	cmp	r3, #62	; 0x3e
 800b40c:	d91c      	bls.n	800b448 <USB_EPStartXfer+0x43e>
 800b40e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b412:	095b      	lsrs	r3, r3, #5
 800b414:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b41c:	f003 031f 	and.w	r3, r3, #31
 800b420:	2b00      	cmp	r3, #0
 800b422:	d104      	bne.n	800b42e <USB_EPStartXfer+0x424>
 800b424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b428:	3b01      	subs	r3, #1
 800b42a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b42e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b432:	b29b      	uxth	r3, r3
 800b434:	029b      	lsls	r3, r3, #10
 800b436:	b29b      	uxth	r3, r3
 800b438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b43c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b440:	b29a      	uxth	r2, r3
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	801a      	strh	r2, [r3, #0]
 800b446:	e059      	b.n	800b4fc <USB_EPStartXfer+0x4f2>
 800b448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d112      	bne.n	800b476 <USB_EPStartXfer+0x46c>
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	881b      	ldrh	r3, [r3, #0]
 800b454:	b29b      	uxth	r3, r3
 800b456:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b45a:	b29a      	uxth	r2, r3
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	801a      	strh	r2, [r3, #0]
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	881b      	ldrh	r3, [r3, #0]
 800b464:	b29b      	uxth	r3, r3
 800b466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b46a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b46e:	b29a      	uxth	r2, r3
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	801a      	strh	r2, [r3, #0]
 800b474:	e042      	b.n	800b4fc <USB_EPStartXfer+0x4f2>
 800b476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b47a:	085b      	lsrs	r3, r3, #1
 800b47c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b484:	f003 0301 	and.w	r3, r3, #1
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d004      	beq.n	800b496 <USB_EPStartXfer+0x48c>
 800b48c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b490:	3301      	adds	r3, #1
 800b492:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b49a:	b29b      	uxth	r3, r3
 800b49c:	029b      	lsls	r3, r3, #10
 800b49e:	b29a      	uxth	r2, r3
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	801a      	strh	r2, [r3, #0]
 800b4a4:	e02a      	b.n	800b4fc <USB_EPStartXfer+0x4f2>
 800b4a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	785b      	ldrb	r3, [r3, #1]
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d122      	bne.n	800b4fc <USB_EPStartXfer+0x4f2>
 800b4b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	623b      	str	r3, [r7, #32]
 800b4c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	6a3b      	ldr	r3, [r7, #32]
 800b4d6:	4413      	add	r3, r2
 800b4d8:	623b      	str	r3, [r7, #32]
 800b4da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	00da      	lsls	r2, r3, #3
 800b4e8:	6a3b      	ldr	r3, [r7, #32]
 800b4ea:	4413      	add	r3, r2
 800b4ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b4f0:	61fb      	str	r3, [r7, #28]
 800b4f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	69fb      	ldr	r3, [r7, #28]
 800b4fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b4fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	891b      	ldrh	r3, [r3, #8]
 800b508:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b50c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	6959      	ldr	r1, [r3, #20]
 800b518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b522:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b526:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b52a:	6800      	ldr	r0, [r0, #0]
 800b52c:	f001 f9fe 	bl	800c92c <USB_WritePMA>
 800b530:	e3c6      	b.n	800bcc0 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	785b      	ldrb	r3, [r3, #1]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d16d      	bne.n	800b61e <USB_EPStartXfer+0x614>
 800b542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b546:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b54e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b552:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	461a      	mov	r2, r3
 800b560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b562:	4413      	add	r3, r2
 800b564:	64bb      	str	r3, [r7, #72]	; 0x48
 800b566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b56a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	00da      	lsls	r2, r3, #3
 800b574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b576:	4413      	add	r3, r2
 800b578:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b57c:	647b      	str	r3, [r7, #68]	; 0x44
 800b57e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b582:	2b3e      	cmp	r3, #62	; 0x3e
 800b584:	d91c      	bls.n	800b5c0 <USB_EPStartXfer+0x5b6>
 800b586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b58a:	095b      	lsrs	r3, r3, #5
 800b58c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b594:	f003 031f 	and.w	r3, r3, #31
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d104      	bne.n	800b5a6 <USB_EPStartXfer+0x59c>
 800b59c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b5a0:	3b01      	subs	r3, #1
 800b5a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b5a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	029b      	lsls	r3, r3, #10
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5b8:	b29a      	uxth	r2, r3
 800b5ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5bc:	801a      	strh	r2, [r3, #0]
 800b5be:	e059      	b.n	800b674 <USB_EPStartXfer+0x66a>
 800b5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d112      	bne.n	800b5ee <USB_EPStartXfer+0x5e4>
 800b5c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5ca:	881b      	ldrh	r3, [r3, #0]
 800b5cc:	b29b      	uxth	r3, r3
 800b5ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b5d2:	b29a      	uxth	r2, r3
 800b5d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5d6:	801a      	strh	r2, [r3, #0]
 800b5d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5da:	881b      	ldrh	r3, [r3, #0]
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5e6:	b29a      	uxth	r2, r3
 800b5e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5ea:	801a      	strh	r2, [r3, #0]
 800b5ec:	e042      	b.n	800b674 <USB_EPStartXfer+0x66a>
 800b5ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f2:	085b      	lsrs	r3, r3, #1
 800b5f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b5f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5fc:	f003 0301 	and.w	r3, r3, #1
 800b600:	2b00      	cmp	r3, #0
 800b602:	d004      	beq.n	800b60e <USB_EPStartXfer+0x604>
 800b604:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b608:	3301      	adds	r3, #1
 800b60a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b60e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b612:	b29b      	uxth	r3, r3
 800b614:	029b      	lsls	r3, r3, #10
 800b616:	b29a      	uxth	r2, r3
 800b618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b61a:	801a      	strh	r2, [r3, #0]
 800b61c:	e02a      	b.n	800b674 <USB_EPStartXfer+0x66a>
 800b61e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	785b      	ldrb	r3, [r3, #1]
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d122      	bne.n	800b674 <USB_EPStartXfer+0x66a>
 800b62e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	653b      	str	r3, [r7, #80]	; 0x50
 800b63a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b63e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b648:	b29b      	uxth	r3, r3
 800b64a:	461a      	mov	r2, r3
 800b64c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b64e:	4413      	add	r3, r2
 800b650:	653b      	str	r3, [r7, #80]	; 0x50
 800b652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	00da      	lsls	r2, r3, #3
 800b660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b662:	4413      	add	r3, r2
 800b664:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b668:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b66a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b66e:	b29a      	uxth	r2, r3
 800b670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b672:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	891b      	ldrh	r3, [r3, #8]
 800b680:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	6959      	ldr	r1, [r3, #20]
 800b690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b694:	b29b      	uxth	r3, r3
 800b696:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b69a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b69e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b6a2:	6800      	ldr	r0, [r0, #0]
 800b6a4:	f001 f942 	bl	800c92c <USB_WritePMA>
            ep->xfer_buff += len;
 800b6a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	695a      	ldr	r2, [r3, #20]
 800b6b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6b8:	441a      	add	r2, r3
 800b6ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b6c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	6a1a      	ldr	r2, [r3, #32]
 800b6d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	691b      	ldr	r3, [r3, #16]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d90f      	bls.n	800b702 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800b6e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	6a1a      	ldr	r2, [r3, #32]
 800b6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6f2:	1ad2      	subs	r2, r2, r3
 800b6f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	621a      	str	r2, [r3, #32]
 800b700:	e00e      	b.n	800b720 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800b702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	6a1b      	ldr	r3, [r3, #32]
 800b70e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2200      	movs	r2, #0
 800b71e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b724:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	643b      	str	r3, [r7, #64]	; 0x40
 800b72c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	785b      	ldrb	r3, [r3, #1]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d16d      	bne.n	800b818 <USB_EPStartXfer+0x80e>
 800b73c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b740:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	63bb      	str	r3, [r7, #56]	; 0x38
 800b748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b74c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b756:	b29b      	uxth	r3, r3
 800b758:	461a      	mov	r2, r3
 800b75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b75c:	4413      	add	r3, r2
 800b75e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	00da      	lsls	r2, r3, #3
 800b76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b770:	4413      	add	r3, r2
 800b772:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b776:	637b      	str	r3, [r7, #52]	; 0x34
 800b778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b77c:	2b3e      	cmp	r3, #62	; 0x3e
 800b77e:	d91c      	bls.n	800b7ba <USB_EPStartXfer+0x7b0>
 800b780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b784:	095b      	lsrs	r3, r3, #5
 800b786:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b78a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b78e:	f003 031f 	and.w	r3, r3, #31
 800b792:	2b00      	cmp	r3, #0
 800b794:	d104      	bne.n	800b7a0 <USB_EPStartXfer+0x796>
 800b796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b79a:	3b01      	subs	r3, #1
 800b79c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b7a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	029b      	lsls	r3, r3, #10
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7b2:	b29a      	uxth	r2, r3
 800b7b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7b6:	801a      	strh	r2, [r3, #0]
 800b7b8:	e053      	b.n	800b862 <USB_EPStartXfer+0x858>
 800b7ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d112      	bne.n	800b7e8 <USB_EPStartXfer+0x7de>
 800b7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7c4:	881b      	ldrh	r3, [r3, #0]
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b7cc:	b29a      	uxth	r2, r3
 800b7ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7d0:	801a      	strh	r2, [r3, #0]
 800b7d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7d4:	881b      	ldrh	r3, [r3, #0]
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7e0:	b29a      	uxth	r2, r3
 800b7e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7e4:	801a      	strh	r2, [r3, #0]
 800b7e6:	e03c      	b.n	800b862 <USB_EPStartXfer+0x858>
 800b7e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ec:	085b      	lsrs	r3, r3, #1
 800b7ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b7f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f6:	f003 0301 	and.w	r3, r3, #1
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d004      	beq.n	800b808 <USB_EPStartXfer+0x7fe>
 800b7fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b802:	3301      	adds	r3, #1
 800b804:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	029b      	lsls	r3, r3, #10
 800b810:	b29a      	uxth	r2, r3
 800b812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b814:	801a      	strh	r2, [r3, #0]
 800b816:	e024      	b.n	800b862 <USB_EPStartXfer+0x858>
 800b818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b81c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	785b      	ldrb	r3, [r3, #1]
 800b824:	2b01      	cmp	r3, #1
 800b826:	d11c      	bne.n	800b862 <USB_EPStartXfer+0x858>
 800b828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b82c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b836:	b29b      	uxth	r3, r3
 800b838:	461a      	mov	r2, r3
 800b83a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b83c:	4413      	add	r3, r2
 800b83e:	643b      	str	r3, [r7, #64]	; 0x40
 800b840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	00da      	lsls	r2, r3, #3
 800b84e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b850:	4413      	add	r3, r2
 800b852:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b856:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b860:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	895b      	ldrh	r3, [r3, #10]
 800b86e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	6959      	ldr	r1, [r3, #20]
 800b87e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b882:	b29b      	uxth	r3, r3
 800b884:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b888:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b88c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b890:	6800      	ldr	r0, [r0, #0]
 800b892:	f001 f84b 	bl	800c92c <USB_WritePMA>
 800b896:	e213      	b.n	800bcc0 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b89c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	6a1b      	ldr	r3, [r3, #32]
 800b8a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b8a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	4413      	add	r3, r2
 800b8c2:	881b      	ldrh	r3, [r3, #0]
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b8ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8ce:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b8d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	441a      	add	r2, r3
 800b8ec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b8f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b900:	b29b      	uxth	r3, r3
 800b902:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b908:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b914:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b91e:	b29b      	uxth	r3, r3
 800b920:	461a      	mov	r2, r3
 800b922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b924:	4413      	add	r3, r2
 800b926:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b92c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	00da      	lsls	r2, r3, #3
 800b936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b938:	4413      	add	r3, r2
 800b93a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b93e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b944:	b29a      	uxth	r2, r3
 800b946:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b948:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b94a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b94e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	891b      	ldrh	r3, [r3, #8]
 800b956:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b95a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b95e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	6959      	ldr	r1, [r3, #20]
 800b966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b970:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b974:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b978:	6800      	ldr	r0, [r0, #0]
 800b97a:	f000 ffd7 	bl	800c92c <USB_WritePMA>
 800b97e:	e19f      	b.n	800bcc0 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	6a1a      	ldr	r2, [r3, #32]
 800b98c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b990:	1ad2      	subs	r2, r2, r3
 800b992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b99e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9a6:	681a      	ldr	r2, [r3, #0]
 800b9a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	009b      	lsls	r3, r3, #2
 800b9b6:	4413      	add	r3, r2
 800b9b8:	881b      	ldrh	r3, [r3, #0]
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f000 80bc 	beq.w	800bb3e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b9c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	673b      	str	r3, [r7, #112]	; 0x70
 800b9d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	785b      	ldrb	r3, [r3, #1]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d16d      	bne.n	800babe <USB_EPStartXfer+0xab4>
 800b9e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	66bb      	str	r3, [r7, #104]	; 0x68
 800b9ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	461a      	mov	r2, r3
 800ba00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba02:	4413      	add	r3, r2
 800ba04:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	00da      	lsls	r2, r3, #3
 800ba14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba16:	4413      	add	r3, r2
 800ba18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba1c:	667b      	str	r3, [r7, #100]	; 0x64
 800ba1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba22:	2b3e      	cmp	r3, #62	; 0x3e
 800ba24:	d91c      	bls.n	800ba60 <USB_EPStartXfer+0xa56>
 800ba26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba2a:	095b      	lsrs	r3, r3, #5
 800ba2c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ba30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba34:	f003 031f 	and.w	r3, r3, #31
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d104      	bne.n	800ba46 <USB_EPStartXfer+0xa3c>
 800ba3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ba40:	3b01      	subs	r3, #1
 800ba42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ba46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	029b      	lsls	r3, r3, #10
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba58:	b29a      	uxth	r2, r3
 800ba5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba5c:	801a      	strh	r2, [r3, #0]
 800ba5e:	e053      	b.n	800bb08 <USB_EPStartXfer+0xafe>
 800ba60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d112      	bne.n	800ba8e <USB_EPStartXfer+0xa84>
 800ba68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba6a:	881b      	ldrh	r3, [r3, #0]
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ba72:	b29a      	uxth	r2, r3
 800ba74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba76:	801a      	strh	r2, [r3, #0]
 800ba78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba7a:	881b      	ldrh	r3, [r3, #0]
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba86:	b29a      	uxth	r2, r3
 800ba88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba8a:	801a      	strh	r2, [r3, #0]
 800ba8c:	e03c      	b.n	800bb08 <USB_EPStartXfer+0xafe>
 800ba8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba92:	085b      	lsrs	r3, r3, #1
 800ba94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ba98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba9c:	f003 0301 	and.w	r3, r3, #1
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d004      	beq.n	800baae <USB_EPStartXfer+0xaa4>
 800baa4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800baa8:	3301      	adds	r3, #1
 800baaa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800baae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bab2:	b29b      	uxth	r3, r3
 800bab4:	029b      	lsls	r3, r3, #10
 800bab6:	b29a      	uxth	r2, r3
 800bab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800baba:	801a      	strh	r2, [r3, #0]
 800babc:	e024      	b.n	800bb08 <USB_EPStartXfer+0xafe>
 800babe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	785b      	ldrb	r3, [r3, #1]
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d11c      	bne.n	800bb08 <USB_EPStartXfer+0xafe>
 800bace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bad2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800badc:	b29b      	uxth	r3, r3
 800bade:	461a      	mov	r2, r3
 800bae0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bae2:	4413      	add	r3, r2
 800bae4:	673b      	str	r3, [r7, #112]	; 0x70
 800bae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	00da      	lsls	r2, r3, #3
 800baf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800baf6:	4413      	add	r3, r2
 800baf8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bafc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bafe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb02:	b29a      	uxth	r2, r3
 800bb04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bb08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	895b      	ldrh	r3, [r3, #10]
 800bb14:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	6959      	ldr	r1, [r3, #20]
 800bb24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bb2e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bb32:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bb36:	6800      	ldr	r0, [r0, #0]
 800bb38:	f000 fef8 	bl	800c92c <USB_WritePMA>
 800bb3c:	e0c0      	b.n	800bcc0 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bb3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	785b      	ldrb	r3, [r3, #1]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d16d      	bne.n	800bc2a <USB_EPStartXfer+0xc20>
 800bb4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bb5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bb6e:	4413      	add	r3, r2
 800bb70:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bb72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	00da      	lsls	r2, r3, #3
 800bb80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bb82:	4413      	add	r3, r2
 800bb84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bb88:	67bb      	str	r3, [r7, #120]	; 0x78
 800bb8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb8e:	2b3e      	cmp	r3, #62	; 0x3e
 800bb90:	d91c      	bls.n	800bbcc <USB_EPStartXfer+0xbc2>
 800bb92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb96:	095b      	lsrs	r3, r3, #5
 800bb98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bb9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bba0:	f003 031f 	and.w	r3, r3, #31
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d104      	bne.n	800bbb2 <USB_EPStartXfer+0xba8>
 800bba8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bbac:	3b01      	subs	r3, #1
 800bbae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bbb2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	029b      	lsls	r3, r3, #10
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbc4:	b29a      	uxth	r2, r3
 800bbc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbc8:	801a      	strh	r2, [r3, #0]
 800bbca:	e05f      	b.n	800bc8c <USB_EPStartXfer+0xc82>
 800bbcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d112      	bne.n	800bbfa <USB_EPStartXfer+0xbf0>
 800bbd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbd6:	881b      	ldrh	r3, [r3, #0]
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bbde:	b29a      	uxth	r2, r3
 800bbe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbe2:	801a      	strh	r2, [r3, #0]
 800bbe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbe6:	881b      	ldrh	r3, [r3, #0]
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbf6:	801a      	strh	r2, [r3, #0]
 800bbf8:	e048      	b.n	800bc8c <USB_EPStartXfer+0xc82>
 800bbfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbfe:	085b      	lsrs	r3, r3, #1
 800bc00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bc04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc08:	f003 0301 	and.w	r3, r3, #1
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d004      	beq.n	800bc1a <USB_EPStartXfer+0xc10>
 800bc10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bc14:	3301      	adds	r3, #1
 800bc16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bc1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	029b      	lsls	r3, r3, #10
 800bc22:	b29a      	uxth	r2, r3
 800bc24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc26:	801a      	strh	r2, [r3, #0]
 800bc28:	e030      	b.n	800bc8c <USB_EPStartXfer+0xc82>
 800bc2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	785b      	ldrb	r3, [r3, #1]
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	d128      	bne.n	800bc8c <USB_EPStartXfer+0xc82>
 800bc3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bc48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	461a      	mov	r2, r3
 800bc5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc5e:	4413      	add	r3, r2
 800bc60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bc64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	00da      	lsls	r2, r3, #3
 800bc72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc76:	4413      	add	r3, r2
 800bc78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bc7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bc80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc84:	b29a      	uxth	r2, r3
 800bc86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bc8a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bc8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	891b      	ldrh	r3, [r3, #8]
 800bc98:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bc9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	6959      	ldr	r1, [r3, #20]
 800bca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bcb2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bcb6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bcba:	6800      	ldr	r0, [r0, #0]
 800bcbc:	f000 fe36 	bl	800c92c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bcc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	009b      	lsls	r3, r3, #2
 800bcd8:	4413      	add	r3, r2
 800bcda:	881b      	ldrh	r3, [r3, #0]
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bce6:	817b      	strh	r3, [r7, #10]
 800bce8:	897b      	ldrh	r3, [r7, #10]
 800bcea:	f083 0310 	eor.w	r3, r3, #16
 800bcee:	817b      	strh	r3, [r7, #10]
 800bcf0:	897b      	ldrh	r3, [r7, #10]
 800bcf2:	f083 0320 	eor.w	r3, r3, #32
 800bcf6:	817b      	strh	r3, [r7, #10]
 800bcf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd00:	681a      	ldr	r2, [r3, #0]
 800bd02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	441a      	add	r2, r3
 800bd12:	897b      	ldrh	r3, [r7, #10]
 800bd14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	8013      	strh	r3, [r2, #0]
 800bd28:	f000 bc9f 	b.w	800c66a <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bd2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	7b1b      	ldrb	r3, [r3, #12]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	f040 80ae 	bne.w	800be9a <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800bd3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	699a      	ldr	r2, [r3, #24]
 800bd4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	691b      	ldr	r3, [r3, #16]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d917      	bls.n	800bd8a <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800bd5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800bd6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	699a      	ldr	r2, [r3, #24]
 800bd76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd7a:	1ad2      	subs	r2, r2, r3
 800bd7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	619a      	str	r2, [r3, #24]
 800bd88:	e00e      	b.n	800bda8 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800bd8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	699b      	ldr	r3, [r3, #24]
 800bd96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800bd9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	2200      	movs	r2, #0
 800bda6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bda8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bdb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bdcc:	4413      	add	r3, r2
 800bdce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bdd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	00da      	lsls	r2, r3, #3
 800bde0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bde4:	4413      	add	r3, r2
 800bde6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bdea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bdee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdf2:	2b3e      	cmp	r3, #62	; 0x3e
 800bdf4:	d91d      	bls.n	800be32 <USB_EPStartXfer+0xe28>
 800bdf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdfa:	095b      	lsrs	r3, r3, #5
 800bdfc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800be00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be04:	f003 031f 	and.w	r3, r3, #31
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d104      	bne.n	800be16 <USB_EPStartXfer+0xe0c>
 800be0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800be10:	3b01      	subs	r3, #1
 800be12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800be16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	029b      	lsls	r3, r3, #10
 800be1e:	b29b      	uxth	r3, r3
 800be20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be28:	b29a      	uxth	r2, r3
 800be2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be2e:	801a      	strh	r2, [r3, #0]
 800be30:	e3e1      	b.n	800c5f6 <USB_EPStartXfer+0x15ec>
 800be32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be36:	2b00      	cmp	r3, #0
 800be38:	d116      	bne.n	800be68 <USB_EPStartXfer+0xe5e>
 800be3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be3e:	881b      	ldrh	r3, [r3, #0]
 800be40:	b29b      	uxth	r3, r3
 800be42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800be46:	b29a      	uxth	r2, r3
 800be48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be4c:	801a      	strh	r2, [r3, #0]
 800be4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be52:	881b      	ldrh	r3, [r3, #0]
 800be54:	b29b      	uxth	r3, r3
 800be56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be5e:	b29a      	uxth	r2, r3
 800be60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be64:	801a      	strh	r2, [r3, #0]
 800be66:	e3c6      	b.n	800c5f6 <USB_EPStartXfer+0x15ec>
 800be68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be6c:	085b      	lsrs	r3, r3, #1
 800be6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800be72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be76:	f003 0301 	and.w	r3, r3, #1
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d004      	beq.n	800be88 <USB_EPStartXfer+0xe7e>
 800be7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800be82:	3301      	adds	r3, #1
 800be84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800be88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	029b      	lsls	r3, r3, #10
 800be90:	b29a      	uxth	r2, r3
 800be92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be96:	801a      	strh	r2, [r3, #0]
 800be98:	e3ad      	b.n	800c5f6 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800be9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	78db      	ldrb	r3, [r3, #3]
 800bea6:	2b02      	cmp	r3, #2
 800bea8:	f040 8200 	bne.w	800c2ac <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800beac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800beb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	785b      	ldrb	r3, [r3, #1]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	f040 8091 	bne.w	800bfe0 <USB_EPStartXfer+0xfd6>
 800bebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bec2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800becc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bed0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800beda:	b29b      	uxth	r3, r3
 800bedc:	461a      	mov	r2, r3
 800bede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bee2:	4413      	add	r3, r2
 800bee4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800beec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	00da      	lsls	r2, r3, #3
 800bef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800befa:	4413      	add	r3, r2
 800befc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bf00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bf04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	691b      	ldr	r3, [r3, #16]
 800bf10:	2b3e      	cmp	r3, #62	; 0x3e
 800bf12:	d925      	bls.n	800bf60 <USB_EPStartXfer+0xf56>
 800bf14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	691b      	ldr	r3, [r3, #16]
 800bf20:	095b      	lsrs	r3, r3, #5
 800bf22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bf26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	691b      	ldr	r3, [r3, #16]
 800bf32:	f003 031f 	and.w	r3, r3, #31
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d104      	bne.n	800bf44 <USB_EPStartXfer+0xf3a>
 800bf3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf3e:	3b01      	subs	r3, #1
 800bf40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bf44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf48:	b29b      	uxth	r3, r3
 800bf4a:	029b      	lsls	r3, r3, #10
 800bf4c:	b29b      	uxth	r3, r3
 800bf4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf56:	b29a      	uxth	r2, r3
 800bf58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bf5c:	801a      	strh	r2, [r3, #0]
 800bf5e:	e074      	b.n	800c04a <USB_EPStartXfer+0x1040>
 800bf60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	691b      	ldr	r3, [r3, #16]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d116      	bne.n	800bf9e <USB_EPStartXfer+0xf94>
 800bf70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bf74:	881b      	ldrh	r3, [r3, #0]
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bf7c:	b29a      	uxth	r2, r3
 800bf7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bf82:	801a      	strh	r2, [r3, #0]
 800bf84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bf88:	881b      	ldrh	r3, [r3, #0]
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf94:	b29a      	uxth	r2, r3
 800bf96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bf9a:	801a      	strh	r2, [r3, #0]
 800bf9c:	e055      	b.n	800c04a <USB_EPStartXfer+0x1040>
 800bf9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	691b      	ldr	r3, [r3, #16]
 800bfaa:	085b      	lsrs	r3, r3, #1
 800bfac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bfb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	691b      	ldr	r3, [r3, #16]
 800bfbc:	f003 0301 	and.w	r3, r3, #1
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d004      	beq.n	800bfce <USB_EPStartXfer+0xfc4>
 800bfc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfc8:	3301      	adds	r3, #1
 800bfca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bfce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	029b      	lsls	r3, r3, #10
 800bfd6:	b29a      	uxth	r2, r3
 800bfd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bfdc:	801a      	strh	r2, [r3, #0]
 800bfde:	e034      	b.n	800c04a <USB_EPStartXfer+0x1040>
 800bfe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	785b      	ldrb	r3, [r3, #1]
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d12c      	bne.n	800c04a <USB_EPStartXfer+0x1040>
 800bff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bff4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c002:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	461a      	mov	r2, r3
 800c010:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c014:	4413      	add	r3, r2
 800c016:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c01a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c01e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	00da      	lsls	r2, r3, #3
 800c028:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c02c:	4413      	add	r3, r2
 800c02e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c032:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c03a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	691b      	ldr	r3, [r3, #16]
 800c042:	b29a      	uxth	r2, r3
 800c044:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c048:	801a      	strh	r2, [r3, #0]
 800c04a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c04e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c05c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	785b      	ldrb	r3, [r3, #1]
 800c064:	2b00      	cmp	r3, #0
 800c066:	f040 8091 	bne.w	800c18c <USB_EPStartXfer+0x1182>
 800c06a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c06e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c07c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c086:	b29b      	uxth	r3, r3
 800c088:	461a      	mov	r2, r3
 800c08a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c08e:	4413      	add	r3, r2
 800c090:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	00da      	lsls	r2, r3, #3
 800c0a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c0a6:	4413      	add	r3, r2
 800c0a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c0ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c0b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	691b      	ldr	r3, [r3, #16]
 800c0bc:	2b3e      	cmp	r3, #62	; 0x3e
 800c0be:	d925      	bls.n	800c10c <USB_EPStartXfer+0x1102>
 800c0c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	691b      	ldr	r3, [r3, #16]
 800c0cc:	095b      	lsrs	r3, r3, #5
 800c0ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c0d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	691b      	ldr	r3, [r3, #16]
 800c0de:	f003 031f 	and.w	r3, r3, #31
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d104      	bne.n	800c0f0 <USB_EPStartXfer+0x10e6>
 800c0e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0ea:	3b01      	subs	r3, #1
 800c0ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c0f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	029b      	lsls	r3, r3, #10
 800c0f8:	b29b      	uxth	r3, r3
 800c0fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c102:	b29a      	uxth	r2, r3
 800c104:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c108:	801a      	strh	r2, [r3, #0]
 800c10a:	e06d      	b.n	800c1e8 <USB_EPStartXfer+0x11de>
 800c10c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	691b      	ldr	r3, [r3, #16]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d116      	bne.n	800c14a <USB_EPStartXfer+0x1140>
 800c11c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c120:	881b      	ldrh	r3, [r3, #0]
 800c122:	b29b      	uxth	r3, r3
 800c124:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c128:	b29a      	uxth	r2, r3
 800c12a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c12e:	801a      	strh	r2, [r3, #0]
 800c130:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c134:	881b      	ldrh	r3, [r3, #0]
 800c136:	b29b      	uxth	r3, r3
 800c138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c13c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c140:	b29a      	uxth	r2, r3
 800c142:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c146:	801a      	strh	r2, [r3, #0]
 800c148:	e04e      	b.n	800c1e8 <USB_EPStartXfer+0x11de>
 800c14a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c14e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	691b      	ldr	r3, [r3, #16]
 800c156:	085b      	lsrs	r3, r3, #1
 800c158:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c15c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	691b      	ldr	r3, [r3, #16]
 800c168:	f003 0301 	and.w	r3, r3, #1
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d004      	beq.n	800c17a <USB_EPStartXfer+0x1170>
 800c170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c174:	3301      	adds	r3, #1
 800c176:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c17a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c17e:	b29b      	uxth	r3, r3
 800c180:	029b      	lsls	r3, r3, #10
 800c182:	b29a      	uxth	r2, r3
 800c184:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c188:	801a      	strh	r2, [r3, #0]
 800c18a:	e02d      	b.n	800c1e8 <USB_EPStartXfer+0x11de>
 800c18c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c190:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	785b      	ldrb	r3, [r3, #1]
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d125      	bne.n	800c1e8 <USB_EPStartXfer+0x11de>
 800c19c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c1b2:	4413      	add	r3, r2
 800c1b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c1b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	00da      	lsls	r2, r3, #3
 800c1c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c1ca:	4413      	add	r3, r2
 800c1cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c1d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c1d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	691b      	ldr	r3, [r3, #16]
 800c1e0:	b29a      	uxth	r2, r3
 800c1e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c1e6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c1e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	69db      	ldr	r3, [r3, #28]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	f000 81fe 	beq.w	800c5f6 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c1fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	4413      	add	r3, r2
 800c214:	881b      	ldrh	r3, [r3, #0]
 800c216:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c21a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c21e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c222:	2b00      	cmp	r3, #0
 800c224:	d005      	beq.n	800c232 <USB_EPStartXfer+0x1228>
 800c226:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c22a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d10d      	bne.n	800c24e <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c232:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f040 81db 	bne.w	800c5f6 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c240:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f040 81d4 	bne.w	800c5f6 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c24e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c25c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	4413      	add	r3, r2
 800c268:	881b      	ldrh	r3, [r3, #0]
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c274:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c27c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c280:	681a      	ldr	r2, [r3, #0]
 800c282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	441a      	add	r2, r3
 800c292:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c29a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c29e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	8013      	strh	r3, [r2, #0]
 800c2aa:	e1a4      	b.n	800c5f6 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c2ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	78db      	ldrb	r3, [r3, #3]
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	f040 819a 	bne.w	800c5f2 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c2be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	699a      	ldr	r2, [r3, #24]
 800c2ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	691b      	ldr	r3, [r3, #16]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d917      	bls.n	800c30a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800c2da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	691b      	ldr	r3, [r3, #16]
 800c2e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c2ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	699a      	ldr	r2, [r3, #24]
 800c2f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2fa:	1ad2      	subs	r2, r2, r3
 800c2fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	619a      	str	r2, [r3, #24]
 800c308:	e00e      	b.n	800c328 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800c30a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c30e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	699b      	ldr	r3, [r3, #24]
 800c316:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800c31a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c31e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	2200      	movs	r2, #0
 800c326:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c32c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	785b      	ldrb	r3, [r3, #1]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d178      	bne.n	800c42a <USB_EPStartXfer+0x1420>
 800c338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c33c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c34a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c354:	b29b      	uxth	r3, r3
 800c356:	461a      	mov	r2, r3
 800c358:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c35c:	4413      	add	r3, r2
 800c35e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	00da      	lsls	r2, r3, #3
 800c370:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c374:	4413      	add	r3, r2
 800c376:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c37a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c37e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c382:	2b3e      	cmp	r3, #62	; 0x3e
 800c384:	d91d      	bls.n	800c3c2 <USB_EPStartXfer+0x13b8>
 800c386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c38a:	095b      	lsrs	r3, r3, #5
 800c38c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c394:	f003 031f 	and.w	r3, r3, #31
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d104      	bne.n	800c3a6 <USB_EPStartXfer+0x139c>
 800c39c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3a0:	3b01      	subs	r3, #1
 800c3a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c3a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3aa:	b29b      	uxth	r3, r3
 800c3ac:	029b      	lsls	r3, r3, #10
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3b8:	b29a      	uxth	r2, r3
 800c3ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c3be:	801a      	strh	r2, [r3, #0]
 800c3c0:	e064      	b.n	800c48c <USB_EPStartXfer+0x1482>
 800c3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d116      	bne.n	800c3f8 <USB_EPStartXfer+0x13ee>
 800c3ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c3ce:	881b      	ldrh	r3, [r3, #0]
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c3d6:	b29a      	uxth	r2, r3
 800c3d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c3dc:	801a      	strh	r2, [r3, #0]
 800c3de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c3e2:	881b      	ldrh	r3, [r3, #0]
 800c3e4:	b29b      	uxth	r3, r3
 800c3e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3ee:	b29a      	uxth	r2, r3
 800c3f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c3f4:	801a      	strh	r2, [r3, #0]
 800c3f6:	e049      	b.n	800c48c <USB_EPStartXfer+0x1482>
 800c3f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3fc:	085b      	lsrs	r3, r3, #1
 800c3fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c406:	f003 0301 	and.w	r3, r3, #1
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d004      	beq.n	800c418 <USB_EPStartXfer+0x140e>
 800c40e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c412:	3301      	adds	r3, #1
 800c414:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	029b      	lsls	r3, r3, #10
 800c420:	b29a      	uxth	r2, r3
 800c422:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c426:	801a      	strh	r2, [r3, #0]
 800c428:	e030      	b.n	800c48c <USB_EPStartXfer+0x1482>
 800c42a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c42e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	785b      	ldrb	r3, [r3, #1]
 800c436:	2b01      	cmp	r3, #1
 800c438:	d128      	bne.n	800c48c <USB_EPStartXfer+0x1482>
 800c43a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c43e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c44c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c456:	b29b      	uxth	r3, r3
 800c458:	461a      	mov	r2, r3
 800c45a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c45e:	4413      	add	r3, r2
 800c460:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	00da      	lsls	r2, r3, #3
 800c472:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c476:	4413      	add	r3, r2
 800c478:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c47c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c484:	b29a      	uxth	r2, r3
 800c486:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c48a:	801a      	strh	r2, [r3, #0]
 800c48c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c490:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c49a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c49e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	785b      	ldrb	r3, [r3, #1]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d178      	bne.n	800c59c <USB_EPStartXfer+0x1592>
 800c4aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c4b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c4ce:	4413      	add	r3, r2
 800c4d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c4d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	00da      	lsls	r2, r3, #3
 800c4e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c4e6:	4413      	add	r3, r2
 800c4e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c4ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c4f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4f4:	2b3e      	cmp	r3, #62	; 0x3e
 800c4f6:	d91d      	bls.n	800c534 <USB_EPStartXfer+0x152a>
 800c4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4fc:	095b      	lsrs	r3, r3, #5
 800c4fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c506:	f003 031f 	and.w	r3, r3, #31
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d104      	bne.n	800c518 <USB_EPStartXfer+0x150e>
 800c50e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c512:	3b01      	subs	r3, #1
 800c514:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c518:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	029b      	lsls	r3, r3, #10
 800c520:	b29b      	uxth	r3, r3
 800c522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c52a:	b29a      	uxth	r2, r3
 800c52c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c530:	801a      	strh	r2, [r3, #0]
 800c532:	e060      	b.n	800c5f6 <USB_EPStartXfer+0x15ec>
 800c534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d116      	bne.n	800c56a <USB_EPStartXfer+0x1560>
 800c53c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c540:	881b      	ldrh	r3, [r3, #0]
 800c542:	b29b      	uxth	r3, r3
 800c544:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c548:	b29a      	uxth	r2, r3
 800c54a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c54e:	801a      	strh	r2, [r3, #0]
 800c550:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c554:	881b      	ldrh	r3, [r3, #0]
 800c556:	b29b      	uxth	r3, r3
 800c558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c55c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c560:	b29a      	uxth	r2, r3
 800c562:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c566:	801a      	strh	r2, [r3, #0]
 800c568:	e045      	b.n	800c5f6 <USB_EPStartXfer+0x15ec>
 800c56a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c56e:	085b      	lsrs	r3, r3, #1
 800c570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c578:	f003 0301 	and.w	r3, r3, #1
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d004      	beq.n	800c58a <USB_EPStartXfer+0x1580>
 800c580:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c584:	3301      	adds	r3, #1
 800c586:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c58a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c58e:	b29b      	uxth	r3, r3
 800c590:	029b      	lsls	r3, r3, #10
 800c592:	b29a      	uxth	r2, r3
 800c594:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c598:	801a      	strh	r2, [r3, #0]
 800c59a:	e02c      	b.n	800c5f6 <USB_EPStartXfer+0x15ec>
 800c59c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	785b      	ldrb	r3, [r3, #1]
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d124      	bne.n	800c5f6 <USB_EPStartXfer+0x15ec>
 800c5ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	461a      	mov	r2, r3
 800c5be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c5c2:	4413      	add	r3, r2
 800c5c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c5c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	00da      	lsls	r2, r3, #3
 800c5d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c5da:	4413      	add	r3, r2
 800c5dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c5e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c5e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5e8:	b29a      	uxth	r2, r3
 800c5ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c5ee:	801a      	strh	r2, [r3, #0]
 800c5f0:	e001      	b.n	800c5f6 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	e03a      	b.n	800c66c <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c5f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	009b      	lsls	r3, r3, #2
 800c60e:	4413      	add	r3, r2
 800c610:	881b      	ldrh	r3, [r3, #0]
 800c612:	b29b      	uxth	r3, r3
 800c614:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c61c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c620:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c624:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c628:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c62c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c630:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c634:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c63c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	441a      	add	r2, r3
 800c652:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c65a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c65e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c666:	b29b      	uxth	r3, r3
 800c668:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c676:	b480      	push	{r7}
 800c678:	b085      	sub	sp, #20
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
 800c67e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	785b      	ldrb	r3, [r3, #1]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d020      	beq.n	800c6ca <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	4413      	add	r3, r2
 800c692:	881b      	ldrh	r3, [r3, #0]
 800c694:	b29b      	uxth	r3, r3
 800c696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c69a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c69e:	81bb      	strh	r3, [r7, #12]
 800c6a0:	89bb      	ldrh	r3, [r7, #12]
 800c6a2:	f083 0310 	eor.w	r3, r3, #16
 800c6a6:	81bb      	strh	r3, [r7, #12]
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	009b      	lsls	r3, r3, #2
 800c6b0:	441a      	add	r2, r3
 800c6b2:	89bb      	ldrh	r3, [r7, #12]
 800c6b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	8013      	strh	r3, [r2, #0]
 800c6c8:	e01f      	b.n	800c70a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	4413      	add	r3, r2
 800c6d4:	881b      	ldrh	r3, [r3, #0]
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c6dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6e0:	81fb      	strh	r3, [r7, #14]
 800c6e2:	89fb      	ldrh	r3, [r7, #14]
 800c6e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c6e8:	81fb      	strh	r3, [r7, #14]
 800c6ea:	687a      	ldr	r2, [r7, #4]
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	009b      	lsls	r3, r3, #2
 800c6f2:	441a      	add	r2, r3
 800c6f4:	89fb      	ldrh	r3, [r7, #14]
 800c6f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c706:	b29b      	uxth	r3, r3
 800c708:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c70a:	2300      	movs	r3, #0
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3714      	adds	r7, #20
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr

0800c718 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c718:	b480      	push	{r7}
 800c71a:	b087      	sub	sp, #28
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	7b1b      	ldrb	r3, [r3, #12]
 800c726:	2b00      	cmp	r3, #0
 800c728:	f040 809d 	bne.w	800c866 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	785b      	ldrb	r3, [r3, #1]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d04c      	beq.n	800c7ce <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	4413      	add	r3, r2
 800c73e:	881b      	ldrh	r3, [r3, #0]
 800c740:	823b      	strh	r3, [r7, #16]
 800c742:	8a3b      	ldrh	r3, [r7, #16]
 800c744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d01b      	beq.n	800c784 <USB_EPClearStall+0x6c>
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	009b      	lsls	r3, r3, #2
 800c754:	4413      	add	r3, r2
 800c756:	881b      	ldrh	r3, [r3, #0]
 800c758:	b29b      	uxth	r3, r3
 800c75a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c75e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c762:	81fb      	strh	r3, [r7, #14]
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	009b      	lsls	r3, r3, #2
 800c76c:	441a      	add	r2, r3
 800c76e:	89fb      	ldrh	r3, [r7, #14]
 800c770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c77c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c780:	b29b      	uxth	r3, r3
 800c782:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	78db      	ldrb	r3, [r3, #3]
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d06c      	beq.n	800c866 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	4413      	add	r3, r2
 800c796:	881b      	ldrh	r3, [r3, #0]
 800c798:	b29b      	uxth	r3, r3
 800c79a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c79e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7a2:	81bb      	strh	r3, [r7, #12]
 800c7a4:	89bb      	ldrh	r3, [r7, #12]
 800c7a6:	f083 0320 	eor.w	r3, r3, #32
 800c7aa:	81bb      	strh	r3, [r7, #12]
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	009b      	lsls	r3, r3, #2
 800c7b4:	441a      	add	r2, r3
 800c7b6:	89bb      	ldrh	r3, [r7, #12]
 800c7b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c7c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c7c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	8013      	strh	r3, [r2, #0]
 800c7cc:	e04b      	b.n	800c866 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	4413      	add	r3, r2
 800c7d8:	881b      	ldrh	r3, [r3, #0]
 800c7da:	82fb      	strh	r3, [r7, #22]
 800c7dc:	8afb      	ldrh	r3, [r7, #22]
 800c7de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d01b      	beq.n	800c81e <USB_EPClearStall+0x106>
 800c7e6:	687a      	ldr	r2, [r7, #4]
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	781b      	ldrb	r3, [r3, #0]
 800c7ec:	009b      	lsls	r3, r3, #2
 800c7ee:	4413      	add	r3, r2
 800c7f0:	881b      	ldrh	r3, [r3, #0]
 800c7f2:	b29b      	uxth	r3, r3
 800c7f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7fc:	82bb      	strh	r3, [r7, #20]
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	441a      	add	r2, r3
 800c808:	8abb      	ldrh	r3, [r7, #20]
 800c80a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c80e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c812:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c81a:	b29b      	uxth	r3, r3
 800c81c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c81e:	687a      	ldr	r2, [r7, #4]
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	4413      	add	r3, r2
 800c828:	881b      	ldrh	r3, [r3, #0]
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c834:	827b      	strh	r3, [r7, #18]
 800c836:	8a7b      	ldrh	r3, [r7, #18]
 800c838:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c83c:	827b      	strh	r3, [r7, #18]
 800c83e:	8a7b      	ldrh	r3, [r7, #18]
 800c840:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c844:	827b      	strh	r3, [r7, #18]
 800c846:	687a      	ldr	r2, [r7, #4]
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	009b      	lsls	r3, r3, #2
 800c84e:	441a      	add	r2, r3
 800c850:	8a7b      	ldrh	r3, [r7, #18]
 800c852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c856:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c85a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c85e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c862:	b29b      	uxth	r3, r3
 800c864:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	371c      	adds	r7, #28
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr

0800c874 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	460b      	mov	r3, r1
 800c87e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c880:	78fb      	ldrb	r3, [r7, #3]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d103      	bne.n	800c88e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2280      	movs	r2, #128	; 0x80
 800c88a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c88e:	2300      	movs	r3, #0
}
 800c890:	4618      	mov	r0, r3
 800c892:	370c      	adds	r7, #12
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8b4:	b29a      	uxth	r2, r3
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c8bc:	2300      	movs	r3, #0
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	370c      	adds	r7, #12
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr

0800c8ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800c8ca:	b480      	push	{r7}
 800c8cc:	b083      	sub	sp, #12
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800c8de:	b29a      	uxth	r2, r3
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c8e6:	2300      	movs	r3, #0
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	370c      	adds	r7, #12
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr

0800c8f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b085      	sub	sp, #20
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c902:	b29b      	uxth	r3, r3
 800c904:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c906:	68fb      	ldr	r3, [r7, #12]
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3714      	adds	r7, #20
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr

0800c914 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800c914:	b480      	push	{r7}
 800c916:	b083      	sub	sp, #12
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c91e:	2300      	movs	r3, #0
}
 800c920:	4618      	mov	r0, r3
 800c922:	370c      	adds	r7, #12
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr

0800c92c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b08b      	sub	sp, #44	; 0x2c
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	4611      	mov	r1, r2
 800c938:	461a      	mov	r2, r3
 800c93a:	460b      	mov	r3, r1
 800c93c:	80fb      	strh	r3, [r7, #6]
 800c93e:	4613      	mov	r3, r2
 800c940:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c942:	88bb      	ldrh	r3, [r7, #4]
 800c944:	3301      	adds	r3, #1
 800c946:	085b      	lsrs	r3, r3, #1
 800c948:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c952:	88fa      	ldrh	r2, [r7, #6]
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	4413      	add	r3, r2
 800c958:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c95c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	627b      	str	r3, [r7, #36]	; 0x24
 800c962:	e01b      	b.n	800c99c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800c964:	69fb      	ldr	r3, [r7, #28]
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c96a:	69fb      	ldr	r3, [r7, #28]
 800c96c:	3301      	adds	r3, #1
 800c96e:	781b      	ldrb	r3, [r3, #0]
 800c970:	021b      	lsls	r3, r3, #8
 800c972:	b21a      	sxth	r2, r3
 800c974:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c978:	4313      	orrs	r3, r2
 800c97a:	b21b      	sxth	r3, r3
 800c97c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c97e:	6a3b      	ldr	r3, [r7, #32]
 800c980:	8a7a      	ldrh	r2, [r7, #18]
 800c982:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c984:	6a3b      	ldr	r3, [r7, #32]
 800c986:	3302      	adds	r3, #2
 800c988:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c98a:	69fb      	ldr	r3, [r7, #28]
 800c98c:	3301      	adds	r3, #1
 800c98e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c990:	69fb      	ldr	r3, [r7, #28]
 800c992:	3301      	adds	r3, #1
 800c994:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c998:	3b01      	subs	r3, #1
 800c99a:	627b      	str	r3, [r7, #36]	; 0x24
 800c99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d1e0      	bne.n	800c964 <USB_WritePMA+0x38>
  }
}
 800c9a2:	bf00      	nop
 800c9a4:	bf00      	nop
 800c9a6:	372c      	adds	r7, #44	; 0x2c
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b08b      	sub	sp, #44	; 0x2c
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	4611      	mov	r1, r2
 800c9bc:	461a      	mov	r2, r3
 800c9be:	460b      	mov	r3, r1
 800c9c0:	80fb      	strh	r3, [r7, #6]
 800c9c2:	4613      	mov	r3, r2
 800c9c4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c9c6:	88bb      	ldrh	r3, [r7, #4]
 800c9c8:	085b      	lsrs	r3, r3, #1
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c9d6:	88fa      	ldrh	r2, [r7, #6]
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	4413      	add	r3, r2
 800c9dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c9e0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c9e2:	69bb      	ldr	r3, [r7, #24]
 800c9e4:	627b      	str	r3, [r7, #36]	; 0x24
 800c9e6:	e018      	b.n	800ca1a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c9e8:	6a3b      	ldr	r3, [r7, #32]
 800c9ea:	881b      	ldrh	r3, [r3, #0]
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c9f0:	6a3b      	ldr	r3, [r7, #32]
 800c9f2:	3302      	adds	r3, #2
 800c9f4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	b2da      	uxtb	r2, r3
 800c9fa:	69fb      	ldr	r3, [r7, #28]
 800c9fc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c9fe:	69fb      	ldr	r3, [r7, #28]
 800ca00:	3301      	adds	r3, #1
 800ca02:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	0a1b      	lsrs	r3, r3, #8
 800ca08:	b2da      	uxtb	r2, r3
 800ca0a:	69fb      	ldr	r3, [r7, #28]
 800ca0c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ca0e:	69fb      	ldr	r3, [r7, #28]
 800ca10:	3301      	adds	r3, #1
 800ca12:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ca14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca16:	3b01      	subs	r3, #1
 800ca18:	627b      	str	r3, [r7, #36]	; 0x24
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d1e3      	bne.n	800c9e8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ca20:	88bb      	ldrh	r3, [r7, #4]
 800ca22:	f003 0301 	and.w	r3, r3, #1
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d007      	beq.n	800ca3c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ca2c:	6a3b      	ldr	r3, [r7, #32]
 800ca2e:	881b      	ldrh	r3, [r3, #0]
 800ca30:	b29b      	uxth	r3, r3
 800ca32:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	b2da      	uxtb	r2, r3
 800ca38:	69fb      	ldr	r3, [r7, #28]
 800ca3a:	701a      	strb	r2, [r3, #0]
  }
}
 800ca3c:	bf00      	nop
 800ca3e:	372c      	adds	r7, #44	; 0x2c
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	460b      	mov	r3, r1
 800ca52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ca54:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ca58:	f002 f960 	bl	800ed1c <USBD_static_malloc>
 800ca5c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d105      	bne.n	800ca70 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2200      	movs	r2, #0
 800ca68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ca6c:	2302      	movs	r3, #2
 800ca6e:	e066      	b.n	800cb3e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	68fa      	ldr	r2, [r7, #12]
 800ca74:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	7c1b      	ldrb	r3, [r3, #16]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d119      	bne.n	800cab4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ca80:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca84:	2202      	movs	r2, #2
 800ca86:	2181      	movs	r1, #129	; 0x81
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f001 ff7f 	bl	800e98c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2201      	movs	r2, #1
 800ca92:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ca94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca98:	2202      	movs	r2, #2
 800ca9a:	2101      	movs	r1, #1
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f001 ff75 	bl	800e98c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2201      	movs	r2, #1
 800caa6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2210      	movs	r2, #16
 800caae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800cab2:	e016      	b.n	800cae2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cab4:	2340      	movs	r3, #64	; 0x40
 800cab6:	2202      	movs	r2, #2
 800cab8:	2181      	movs	r1, #129	; 0x81
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f001 ff66 	bl	800e98c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2201      	movs	r2, #1
 800cac4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cac6:	2340      	movs	r3, #64	; 0x40
 800cac8:	2202      	movs	r2, #2
 800caca:	2101      	movs	r1, #1
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f001 ff5d 	bl	800e98c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2201      	movs	r2, #1
 800cad6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2210      	movs	r2, #16
 800cade:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cae2:	2308      	movs	r3, #8
 800cae4:	2203      	movs	r2, #3
 800cae6:	2182      	movs	r1, #130	; 0x82
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f001 ff4f 	bl	800e98c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2201      	movs	r2, #1
 800caf2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2200      	movs	r2, #0
 800cb04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	7c1b      	ldrb	r3, [r3, #16]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d109      	bne.n	800cb2c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cb1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb22:	2101      	movs	r1, #1
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f002 f8ad 	bl	800ec84 <USBD_LL_PrepareReceive>
 800cb2a:	e007      	b.n	800cb3c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cb32:	2340      	movs	r3, #64	; 0x40
 800cb34:	2101      	movs	r1, #1
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f002 f8a4 	bl	800ec84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cb3c:	2300      	movs	r3, #0
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3710      	adds	r7, #16
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}

0800cb46 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cb46:	b580      	push	{r7, lr}
 800cb48:	b082      	sub	sp, #8
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	6078      	str	r0, [r7, #4]
 800cb4e:	460b      	mov	r3, r1
 800cb50:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800cb52:	2181      	movs	r1, #129	; 0x81
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f001 ff57 	bl	800ea08 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800cb60:	2101      	movs	r1, #1
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f001 ff50 	bl	800ea08 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800cb70:	2182      	movs	r1, #130	; 0x82
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f001 ff48 	bl	800ea08 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2200      	movs	r2, #0
 800cb84:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d00e      	beq.n	800cbb0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cba2:	4618      	mov	r0, r3
 800cba4:	f002 f8c8 	bl	800ed38 <USBD_static_free>
    pdev->pClassData = NULL;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cbb0:	2300      	movs	r3, #0
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3708      	adds	r7, #8
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
	...

0800cbbc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b086      	sub	sp, #24
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cbcc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d101      	bne.n	800cbe4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800cbe0:	2303      	movs	r3, #3
 800cbe2:	e0af      	b.n	800cd44 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	781b      	ldrb	r3, [r3, #0]
 800cbe8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d03f      	beq.n	800cc70 <USBD_CDC_Setup+0xb4>
 800cbf0:	2b20      	cmp	r3, #32
 800cbf2:	f040 809f 	bne.w	800cd34 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	88db      	ldrh	r3, [r3, #6]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d02e      	beq.n	800cc5c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	b25b      	sxtb	r3, r3
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	da16      	bge.n	800cc36 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc0e:	689b      	ldr	r3, [r3, #8]
 800cc10:	683a      	ldr	r2, [r7, #0]
 800cc12:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800cc14:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cc16:	683a      	ldr	r2, [r7, #0]
 800cc18:	88d2      	ldrh	r2, [r2, #6]
 800cc1a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	88db      	ldrh	r3, [r3, #6]
 800cc20:	2b07      	cmp	r3, #7
 800cc22:	bf28      	it	cs
 800cc24:	2307      	movcs	r3, #7
 800cc26:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	89fa      	ldrh	r2, [r7, #14]
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f001 faa5 	bl	800e17e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800cc34:	e085      	b.n	800cd42 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	785a      	ldrb	r2, [r3, #1]
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	88db      	ldrh	r3, [r3, #6]
 800cc44:	b2da      	uxtb	r2, r3
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800cc4c:	6939      	ldr	r1, [r7, #16]
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	88db      	ldrh	r3, [r3, #6]
 800cc52:	461a      	mov	r2, r3
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f001 fabe 	bl	800e1d6 <USBD_CtlPrepareRx>
      break;
 800cc5a:	e072      	b.n	800cd42 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	683a      	ldr	r2, [r7, #0]
 800cc66:	7850      	ldrb	r0, [r2, #1]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	6839      	ldr	r1, [r7, #0]
 800cc6c:	4798      	blx	r3
      break;
 800cc6e:	e068      	b.n	800cd42 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	785b      	ldrb	r3, [r3, #1]
 800cc74:	2b0b      	cmp	r3, #11
 800cc76:	d852      	bhi.n	800cd1e <USBD_CDC_Setup+0x162>
 800cc78:	a201      	add	r2, pc, #4	; (adr r2, 800cc80 <USBD_CDC_Setup+0xc4>)
 800cc7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc7e:	bf00      	nop
 800cc80:	0800ccb1 	.word	0x0800ccb1
 800cc84:	0800cd2d 	.word	0x0800cd2d
 800cc88:	0800cd1f 	.word	0x0800cd1f
 800cc8c:	0800cd1f 	.word	0x0800cd1f
 800cc90:	0800cd1f 	.word	0x0800cd1f
 800cc94:	0800cd1f 	.word	0x0800cd1f
 800cc98:	0800cd1f 	.word	0x0800cd1f
 800cc9c:	0800cd1f 	.word	0x0800cd1f
 800cca0:	0800cd1f 	.word	0x0800cd1f
 800cca4:	0800cd1f 	.word	0x0800cd1f
 800cca8:	0800ccdb 	.word	0x0800ccdb
 800ccac:	0800cd05 	.word	0x0800cd05
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	2b03      	cmp	r3, #3
 800ccba:	d107      	bne.n	800cccc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ccbc:	f107 030a 	add.w	r3, r7, #10
 800ccc0:	2202      	movs	r2, #2
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f001 fa5a 	bl	800e17e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ccca:	e032      	b.n	800cd32 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800cccc:	6839      	ldr	r1, [r7, #0]
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f001 f9e4 	bl	800e09c <USBD_CtlError>
            ret = USBD_FAIL;
 800ccd4:	2303      	movs	r3, #3
 800ccd6:	75fb      	strb	r3, [r7, #23]
          break;
 800ccd8:	e02b      	b.n	800cd32 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	2b03      	cmp	r3, #3
 800cce4:	d107      	bne.n	800ccf6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cce6:	f107 030d 	add.w	r3, r7, #13
 800ccea:	2201      	movs	r2, #1
 800ccec:	4619      	mov	r1, r3
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f001 fa45 	bl	800e17e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ccf4:	e01d      	b.n	800cd32 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ccf6:	6839      	ldr	r1, [r7, #0]
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f001 f9cf 	bl	800e09c <USBD_CtlError>
            ret = USBD_FAIL;
 800ccfe:	2303      	movs	r3, #3
 800cd00:	75fb      	strb	r3, [r7, #23]
          break;
 800cd02:	e016      	b.n	800cd32 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	2b03      	cmp	r3, #3
 800cd0e:	d00f      	beq.n	800cd30 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800cd10:	6839      	ldr	r1, [r7, #0]
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f001 f9c2 	bl	800e09c <USBD_CtlError>
            ret = USBD_FAIL;
 800cd18:	2303      	movs	r3, #3
 800cd1a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cd1c:	e008      	b.n	800cd30 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cd1e:	6839      	ldr	r1, [r7, #0]
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f001 f9bb 	bl	800e09c <USBD_CtlError>
          ret = USBD_FAIL;
 800cd26:	2303      	movs	r3, #3
 800cd28:	75fb      	strb	r3, [r7, #23]
          break;
 800cd2a:	e002      	b.n	800cd32 <USBD_CDC_Setup+0x176>
          break;
 800cd2c:	bf00      	nop
 800cd2e:	e008      	b.n	800cd42 <USBD_CDC_Setup+0x186>
          break;
 800cd30:	bf00      	nop
      }
      break;
 800cd32:	e006      	b.n	800cd42 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800cd34:	6839      	ldr	r1, [r7, #0]
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f001 f9b0 	bl	800e09c <USBD_CtlError>
      ret = USBD_FAIL;
 800cd3c:	2303      	movs	r3, #3
 800cd3e:	75fb      	strb	r3, [r7, #23]
      break;
 800cd40:	bf00      	nop
  }

  return (uint8_t)ret;
 800cd42:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3718      	adds	r7, #24
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	460b      	mov	r3, r1
 800cd56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d101      	bne.n	800cd6e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cd6a:	2303      	movs	r3, #3
 800cd6c:	e04f      	b.n	800ce0e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd74:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cd76:	78fa      	ldrb	r2, [r7, #3]
 800cd78:	6879      	ldr	r1, [r7, #4]
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	4413      	add	r3, r2
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	440b      	add	r3, r1
 800cd84:	3318      	adds	r3, #24
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d029      	beq.n	800cde0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800cd8c:	78fa      	ldrb	r2, [r7, #3]
 800cd8e:	6879      	ldr	r1, [r7, #4]
 800cd90:	4613      	mov	r3, r2
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	4413      	add	r3, r2
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	440b      	add	r3, r1
 800cd9a:	3318      	adds	r3, #24
 800cd9c:	681a      	ldr	r2, [r3, #0]
 800cd9e:	78f9      	ldrb	r1, [r7, #3]
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	460b      	mov	r3, r1
 800cda4:	009b      	lsls	r3, r3, #2
 800cda6:	440b      	add	r3, r1
 800cda8:	00db      	lsls	r3, r3, #3
 800cdaa:	4403      	add	r3, r0
 800cdac:	333c      	adds	r3, #60	; 0x3c
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	fbb2 f1f3 	udiv	r1, r2, r3
 800cdb4:	fb01 f303 	mul.w	r3, r1, r3
 800cdb8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d110      	bne.n	800cde0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800cdbe:	78fa      	ldrb	r2, [r7, #3]
 800cdc0:	6879      	ldr	r1, [r7, #4]
 800cdc2:	4613      	mov	r3, r2
 800cdc4:	009b      	lsls	r3, r3, #2
 800cdc6:	4413      	add	r3, r2
 800cdc8:	009b      	lsls	r3, r3, #2
 800cdca:	440b      	add	r3, r1
 800cdcc:	3318      	adds	r3, #24
 800cdce:	2200      	movs	r2, #0
 800cdd0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cdd2:	78f9      	ldrb	r1, [r7, #3]
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f001 ff1b 	bl	800ec14 <USBD_LL_Transmit>
 800cdde:	e015      	b.n	800ce0c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	2200      	movs	r2, #0
 800cde4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cdee:	691b      	ldr	r3, [r3, #16]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d00b      	beq.n	800ce0c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cdfa:	691b      	ldr	r3, [r3, #16]
 800cdfc:	68ba      	ldr	r2, [r7, #8]
 800cdfe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ce02:	68ba      	ldr	r2, [r7, #8]
 800ce04:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ce08:	78fa      	ldrb	r2, [r7, #3]
 800ce0a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ce0c:	2300      	movs	r3, #0
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3710      	adds	r7, #16
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}

0800ce16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b084      	sub	sp, #16
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
 800ce1e:	460b      	mov	r3, r1
 800ce20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce28:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d101      	bne.n	800ce38 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ce34:	2303      	movs	r3, #3
 800ce36:	e015      	b.n	800ce64 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ce38:	78fb      	ldrb	r3, [r7, #3]
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f001 ff59 	bl	800ecf4 <USBD_LL_GetRxDataSize>
 800ce42:	4602      	mov	r2, r0
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce50:	68db      	ldr	r3, [r3, #12]
 800ce52:	68fa      	ldr	r2, [r7, #12]
 800ce54:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ce58:	68fa      	ldr	r2, [r7, #12]
 800ce5a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ce5e:	4611      	mov	r1, r2
 800ce60:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ce62:	2300      	movs	r3, #0
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3710      	adds	r7, #16
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b084      	sub	sp, #16
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce7a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d101      	bne.n	800ce86 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ce82:	2303      	movs	r3, #3
 800ce84:	e01b      	b.n	800cebe <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d015      	beq.n	800cebc <USBD_CDC_EP0_RxReady+0x50>
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ce96:	2bff      	cmp	r3, #255	; 0xff
 800ce98:	d010      	beq.n	800cebc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cea0:	689b      	ldr	r3, [r3, #8]
 800cea2:	68fa      	ldr	r2, [r7, #12]
 800cea4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800cea8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ceaa:	68fa      	ldr	r2, [r7, #12]
 800ceac:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ceb0:	b292      	uxth	r2, r2
 800ceb2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	22ff      	movs	r2, #255	; 0xff
 800ceb8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800cebc:	2300      	movs	r3, #0
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3710      	adds	r7, #16
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
	...

0800cec8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b083      	sub	sp, #12
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2243      	movs	r2, #67	; 0x43
 800ced4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ced6:	4b03      	ldr	r3, [pc, #12]	; (800cee4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	370c      	adds	r7, #12
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	4770      	bx	lr
 800cee4:	200000b4 	.word	0x200000b4

0800cee8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b083      	sub	sp, #12
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2243      	movs	r2, #67	; 0x43
 800cef4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800cef6:	4b03      	ldr	r3, [pc, #12]	; (800cf04 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	370c      	adds	r7, #12
 800cefc:	46bd      	mov	sp, r7
 800cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf02:	4770      	bx	lr
 800cf04:	20000070 	.word	0x20000070

0800cf08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b083      	sub	sp, #12
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2243      	movs	r2, #67	; 0x43
 800cf14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800cf16:	4b03      	ldr	r3, [pc, #12]	; (800cf24 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	370c      	adds	r7, #12
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr
 800cf24:	200000f8 	.word	0x200000f8

0800cf28 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b083      	sub	sp, #12
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	220a      	movs	r2, #10
 800cf34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cf36:	4b03      	ldr	r3, [pc, #12]	; (800cf44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	370c      	adds	r7, #12
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr
 800cf44:	2000002c 	.word	0x2000002c

0800cf48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b083      	sub	sp, #12
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d101      	bne.n	800cf5c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cf58:	2303      	movs	r3, #3
 800cf5a:	e004      	b.n	800cf66 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	683a      	ldr	r2, [r7, #0]
 800cf60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800cf64:	2300      	movs	r3, #0
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	370c      	adds	r7, #12
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr

0800cf72 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cf72:	b480      	push	{r7}
 800cf74:	b087      	sub	sp, #28
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	60f8      	str	r0, [r7, #12]
 800cf7a:	60b9      	str	r1, [r7, #8]
 800cf7c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf84:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d101      	bne.n	800cf90 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800cf8c:	2303      	movs	r3, #3
 800cf8e:	e008      	b.n	800cfa2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	68ba      	ldr	r2, [r7, #8]
 800cf94:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cfa0:	2300      	movs	r3, #0
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	371c      	adds	r7, #28
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr

0800cfae <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cfae:	b480      	push	{r7}
 800cfb0:	b085      	sub	sp, #20
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	6078      	str	r0, [r7, #4]
 800cfb6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cfbe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d101      	bne.n	800cfca <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800cfc6:	2303      	movs	r3, #3
 800cfc8:	e004      	b.n	800cfd4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	683a      	ldr	r2, [r7, #0]
 800cfce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cfd2:	2300      	movs	r3, #0
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3714      	adds	r7, #20
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr

0800cfe0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cfee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800cff0:	2301      	movs	r3, #1
 800cff2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d101      	bne.n	800d002 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cffe:	2303      	movs	r3, #3
 800d000:	e01a      	b.n	800d038 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d114      	bne.n	800d036 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	2201      	movs	r2, #1
 800d010:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d02a:	2181      	movs	r1, #129	; 0x81
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f001 fdf1 	bl	800ec14 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d032:	2300      	movs	r3, #0
 800d034:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d036:	7bfb      	ldrb	r3, [r7, #15]
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3710      	adds	r7, #16
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d04e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d056:	2b00      	cmp	r3, #0
 800d058:	d101      	bne.n	800d05e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d05a:	2303      	movs	r3, #3
 800d05c:	e016      	b.n	800d08c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	7c1b      	ldrb	r3, [r3, #16]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d109      	bne.n	800d07a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d06c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d070:	2101      	movs	r1, #1
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f001 fe06 	bl	800ec84 <USBD_LL_PrepareReceive>
 800d078:	e007      	b.n	800d08a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d080:	2340      	movs	r3, #64	; 0x40
 800d082:	2101      	movs	r1, #1
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f001 fdfd 	bl	800ec84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d08a:	2300      	movs	r3, #0
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3710      	adds	r7, #16
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b086      	sub	sp, #24
 800d098:	af00      	add	r7, sp, #0
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	4613      	mov	r3, r2
 800d0a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d101      	bne.n	800d0ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d0a8:	2303      	movs	r3, #3
 800d0aa:	e01f      	b.n	800d0ec <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d003      	beq.n	800d0d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	68ba      	ldr	r2, [r7, #8]
 800d0ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2201      	movs	r2, #1
 800d0d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	79fa      	ldrb	r2, [r7, #7]
 800d0de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d0e0:	68f8      	ldr	r0, [r7, #12]
 800d0e2:	f001 fbbf 	bl	800e864 <USBD_LL_Init>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d0ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3718      	adds	r7, #24
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b084      	sub	sp, #16
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d0fe:	2300      	movs	r3, #0
 800d100:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d101      	bne.n	800d10c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d108:	2303      	movs	r3, #3
 800d10a:	e016      	b.n	800d13a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	683a      	ldr	r2, [r7, #0]
 800d110:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d00b      	beq.n	800d138 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d128:	f107 020e 	add.w	r2, r7, #14
 800d12c:	4610      	mov	r0, r2
 800d12e:	4798      	blx	r3
 800d130:	4602      	mov	r2, r0
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d138:	2300      	movs	r3, #0
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3710      	adds	r7, #16
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}

0800d142 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d142:	b580      	push	{r7, lr}
 800d144:	b082      	sub	sp, #8
 800d146:	af00      	add	r7, sp, #0
 800d148:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f001 fbec 	bl	800e928 <USBD_LL_Start>
 800d150:	4603      	mov	r3, r0
}
 800d152:	4618      	mov	r0, r3
 800d154:	3708      	adds	r7, #8
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}

0800d15a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d15a:	b480      	push	{r7}
 800d15c:	b083      	sub	sp, #12
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d162:	2300      	movs	r3, #0
}
 800d164:	4618      	mov	r0, r3
 800d166:	370c      	adds	r7, #12
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr

0800d170 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	460b      	mov	r3, r1
 800d17a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d17c:	2303      	movs	r3, #3
 800d17e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d186:	2b00      	cmp	r3, #0
 800d188:	d009      	beq.n	800d19e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	78fa      	ldrb	r2, [r7, #3]
 800d194:	4611      	mov	r1, r2
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	4798      	blx	r3
 800d19a:	4603      	mov	r3, r0
 800d19c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d19e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3710      	adds	r7, #16
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d007      	beq.n	800d1ce <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	78fa      	ldrb	r2, [r7, #3]
 800d1c8:	4611      	mov	r1, r2
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	4798      	blx	r3
  }

  return USBD_OK;
 800d1ce:	2300      	movs	r3, #0
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3708      	adds	r7, #8
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d1e8:	6839      	ldr	r1, [r7, #0]
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f000 ff1c 	bl	800e028 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d1fe:	461a      	mov	r2, r3
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d20c:	f003 031f 	and.w	r3, r3, #31
 800d210:	2b02      	cmp	r3, #2
 800d212:	d01a      	beq.n	800d24a <USBD_LL_SetupStage+0x72>
 800d214:	2b02      	cmp	r3, #2
 800d216:	d822      	bhi.n	800d25e <USBD_LL_SetupStage+0x86>
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d002      	beq.n	800d222 <USBD_LL_SetupStage+0x4a>
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	d00a      	beq.n	800d236 <USBD_LL_SetupStage+0x5e>
 800d220:	e01d      	b.n	800d25e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d228:	4619      	mov	r1, r3
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 f9ee 	bl	800d60c <USBD_StdDevReq>
 800d230:	4603      	mov	r3, r0
 800d232:	73fb      	strb	r3, [r7, #15]
      break;
 800d234:	e020      	b.n	800d278 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d23c:	4619      	mov	r1, r3
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 fa52 	bl	800d6e8 <USBD_StdItfReq>
 800d244:	4603      	mov	r3, r0
 800d246:	73fb      	strb	r3, [r7, #15]
      break;
 800d248:	e016      	b.n	800d278 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d250:	4619      	mov	r1, r3
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f000 fa91 	bl	800d77a <USBD_StdEPReq>
 800d258:	4603      	mov	r3, r0
 800d25a:	73fb      	strb	r3, [r7, #15]
      break;
 800d25c:	e00c      	b.n	800d278 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d264:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	4619      	mov	r1, r3
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f001 fc01 	bl	800ea74 <USBD_LL_StallEP>
 800d272:	4603      	mov	r3, r0
 800d274:	73fb      	strb	r3, [r7, #15]
      break;
 800d276:	bf00      	nop
  }

  return ret;
 800d278:	7bfb      	ldrb	r3, [r7, #15]
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3710      	adds	r7, #16
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}

0800d282 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d282:	b580      	push	{r7, lr}
 800d284:	b086      	sub	sp, #24
 800d286:	af00      	add	r7, sp, #0
 800d288:	60f8      	str	r0, [r7, #12]
 800d28a:	460b      	mov	r3, r1
 800d28c:	607a      	str	r2, [r7, #4]
 800d28e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d290:	7afb      	ldrb	r3, [r7, #11]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d138      	bne.n	800d308 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d29c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d2a4:	2b03      	cmp	r3, #3
 800d2a6:	d14a      	bne.n	800d33e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	689a      	ldr	r2, [r3, #8]
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d913      	bls.n	800d2dc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	689a      	ldr	r2, [r3, #8]
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	68db      	ldr	r3, [r3, #12]
 800d2bc:	1ad2      	subs	r2, r2, r3
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	68da      	ldr	r2, [r3, #12]
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	689b      	ldr	r3, [r3, #8]
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	bf28      	it	cs
 800d2ce:	4613      	movcs	r3, r2
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	6879      	ldr	r1, [r7, #4]
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	f000 ff9b 	bl	800e210 <USBD_CtlContinueRx>
 800d2da:	e030      	b.n	800d33e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	2b03      	cmp	r3, #3
 800d2e6:	d10b      	bne.n	800d300 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2ee:	691b      	ldr	r3, [r3, #16]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d005      	beq.n	800d300 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2fa:	691b      	ldr	r3, [r3, #16]
 800d2fc:	68f8      	ldr	r0, [r7, #12]
 800d2fe:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d300:	68f8      	ldr	r0, [r7, #12]
 800d302:	f000 ff96 	bl	800e232 <USBD_CtlSendStatus>
 800d306:	e01a      	b.n	800d33e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d30e:	b2db      	uxtb	r3, r3
 800d310:	2b03      	cmp	r3, #3
 800d312:	d114      	bne.n	800d33e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d31a:	699b      	ldr	r3, [r3, #24]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d00e      	beq.n	800d33e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d326:	699b      	ldr	r3, [r3, #24]
 800d328:	7afa      	ldrb	r2, [r7, #11]
 800d32a:	4611      	mov	r1, r2
 800d32c:	68f8      	ldr	r0, [r7, #12]
 800d32e:	4798      	blx	r3
 800d330:	4603      	mov	r3, r0
 800d332:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d334:	7dfb      	ldrb	r3, [r7, #23]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d001      	beq.n	800d33e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d33a:	7dfb      	ldrb	r3, [r7, #23]
 800d33c:	e000      	b.n	800d340 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d33e:	2300      	movs	r3, #0
}
 800d340:	4618      	mov	r0, r3
 800d342:	3718      	adds	r7, #24
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}

0800d348 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b086      	sub	sp, #24
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	460b      	mov	r3, r1
 800d352:	607a      	str	r2, [r7, #4]
 800d354:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d356:	7afb      	ldrb	r3, [r7, #11]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d16b      	bne.n	800d434 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	3314      	adds	r3, #20
 800d360:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d368:	2b02      	cmp	r3, #2
 800d36a:	d156      	bne.n	800d41a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	689a      	ldr	r2, [r3, #8]
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	68db      	ldr	r3, [r3, #12]
 800d374:	429a      	cmp	r2, r3
 800d376:	d914      	bls.n	800d3a2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	689a      	ldr	r2, [r3, #8]
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	1ad2      	subs	r2, r2, r3
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	689b      	ldr	r3, [r3, #8]
 800d38a:	461a      	mov	r2, r3
 800d38c:	6879      	ldr	r1, [r7, #4]
 800d38e:	68f8      	ldr	r0, [r7, #12]
 800d390:	f000 ff10 	bl	800e1b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d394:	2300      	movs	r3, #0
 800d396:	2200      	movs	r2, #0
 800d398:	2100      	movs	r1, #0
 800d39a:	68f8      	ldr	r0, [r7, #12]
 800d39c:	f001 fc72 	bl	800ec84 <USBD_LL_PrepareReceive>
 800d3a0:	e03b      	b.n	800d41a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	68da      	ldr	r2, [r3, #12]
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	689b      	ldr	r3, [r3, #8]
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d11c      	bne.n	800d3e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	685a      	ldr	r2, [r3, #4]
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d316      	bcc.n	800d3e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	685a      	ldr	r2, [r3, #4]
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d20f      	bcs.n	800d3e8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	2100      	movs	r1, #0
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f000 fef1 	bl	800e1b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d3da:	2300      	movs	r3, #0
 800d3dc:	2200      	movs	r2, #0
 800d3de:	2100      	movs	r1, #0
 800d3e0:	68f8      	ldr	r0, [r7, #12]
 800d3e2:	f001 fc4f 	bl	800ec84 <USBD_LL_PrepareReceive>
 800d3e6:	e018      	b.n	800d41a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	2b03      	cmp	r3, #3
 800d3f2:	d10b      	bne.n	800d40c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3fa:	68db      	ldr	r3, [r3, #12]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d005      	beq.n	800d40c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d406:	68db      	ldr	r3, [r3, #12]
 800d408:	68f8      	ldr	r0, [r7, #12]
 800d40a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d40c:	2180      	movs	r1, #128	; 0x80
 800d40e:	68f8      	ldr	r0, [r7, #12]
 800d410:	f001 fb30 	bl	800ea74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d414:	68f8      	ldr	r0, [r7, #12]
 800d416:	f000 ff1f 	bl	800e258 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d420:	2b01      	cmp	r3, #1
 800d422:	d122      	bne.n	800d46a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d424:	68f8      	ldr	r0, [r7, #12]
 800d426:	f7ff fe98 	bl	800d15a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2200      	movs	r2, #0
 800d42e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d432:	e01a      	b.n	800d46a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	2b03      	cmp	r3, #3
 800d43e:	d114      	bne.n	800d46a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d446:	695b      	ldr	r3, [r3, #20]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d00e      	beq.n	800d46a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d452:	695b      	ldr	r3, [r3, #20]
 800d454:	7afa      	ldrb	r2, [r7, #11]
 800d456:	4611      	mov	r1, r2
 800d458:	68f8      	ldr	r0, [r7, #12]
 800d45a:	4798      	blx	r3
 800d45c:	4603      	mov	r3, r0
 800d45e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d460:	7dfb      	ldrb	r3, [r7, #23]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d001      	beq.n	800d46a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d466:	7dfb      	ldrb	r3, [r7, #23]
 800d468:	e000      	b.n	800d46c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d46a:	2300      	movs	r3, #0
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3718      	adds	r7, #24
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b082      	sub	sp, #8
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2201      	movs	r2, #1
 800d480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2200      	movs	r2, #0
 800d488:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2200      	movs	r2, #0
 800d490:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2200      	movs	r2, #0
 800d496:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d101      	bne.n	800d4a8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d4a4:	2303      	movs	r3, #3
 800d4a6:	e02f      	b.n	800d508 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d00f      	beq.n	800d4d2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d009      	beq.n	800d4d2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	687a      	ldr	r2, [r7, #4]
 800d4c8:	6852      	ldr	r2, [r2, #4]
 800d4ca:	b2d2      	uxtb	r2, r2
 800d4cc:	4611      	mov	r1, r2
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d4d2:	2340      	movs	r3, #64	; 0x40
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	2100      	movs	r1, #0
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f001 fa57 	bl	800e98c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2240      	movs	r2, #64	; 0x40
 800d4ea:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d4ee:	2340      	movs	r3, #64	; 0x40
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	2180      	movs	r1, #128	; 0x80
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f001 fa49 	bl	800e98c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2201      	movs	r2, #1
 800d4fe:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2240      	movs	r2, #64	; 0x40
 800d504:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d506:	2300      	movs	r3, #0
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3708      	adds	r7, #8
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d510:	b480      	push	{r7}
 800d512:	b083      	sub	sp, #12
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	460b      	mov	r3, r1
 800d51a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	78fa      	ldrb	r2, [r7, #3]
 800d520:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d522:	2300      	movs	r3, #0
}
 800d524:	4618      	mov	r0, r3
 800d526:	370c      	adds	r7, #12
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d53e:	b2da      	uxtb	r2, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2204      	movs	r2, #4
 800d54a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d54e:	2300      	movs	r3, #0
}
 800d550:	4618      	mov	r0, r3
 800d552:	370c      	adds	r7, #12
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr

0800d55c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b083      	sub	sp, #12
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	2b04      	cmp	r3, #4
 800d56e:	d106      	bne.n	800d57e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d576:	b2da      	uxtb	r2, r3
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d57e:	2300      	movs	r3, #0
}
 800d580:	4618      	mov	r0, r3
 800d582:	370c      	adds	r7, #12
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr

0800d58c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b082      	sub	sp, #8
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d101      	bne.n	800d5a2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d59e:	2303      	movs	r3, #3
 800d5a0:	e012      	b.n	800d5c8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	2b03      	cmp	r3, #3
 800d5ac:	d10b      	bne.n	800d5c6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5b4:	69db      	ldr	r3, [r3, #28]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d005      	beq.n	800d5c6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5c0:	69db      	ldr	r3, [r3, #28]
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d5c6:	2300      	movs	r3, #0
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3708      	adds	r7, #8
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}

0800d5d0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b087      	sub	sp, #28
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d5ee:	8a3b      	ldrh	r3, [r7, #16]
 800d5f0:	021b      	lsls	r3, r3, #8
 800d5f2:	b21a      	sxth	r2, r3
 800d5f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d5f8:	4313      	orrs	r3, r2
 800d5fa:	b21b      	sxth	r3, r3
 800d5fc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d5fe:	89fb      	ldrh	r3, [r7, #14]
}
 800d600:	4618      	mov	r0, r3
 800d602:	371c      	adds	r7, #28
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr

0800d60c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d616:	2300      	movs	r3, #0
 800d618:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d622:	2b40      	cmp	r3, #64	; 0x40
 800d624:	d005      	beq.n	800d632 <USBD_StdDevReq+0x26>
 800d626:	2b40      	cmp	r3, #64	; 0x40
 800d628:	d853      	bhi.n	800d6d2 <USBD_StdDevReq+0xc6>
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d00b      	beq.n	800d646 <USBD_StdDevReq+0x3a>
 800d62e:	2b20      	cmp	r3, #32
 800d630:	d14f      	bne.n	800d6d2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d638:	689b      	ldr	r3, [r3, #8]
 800d63a:	6839      	ldr	r1, [r7, #0]
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	4798      	blx	r3
 800d640:	4603      	mov	r3, r0
 800d642:	73fb      	strb	r3, [r7, #15]
      break;
 800d644:	e04a      	b.n	800d6dc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	785b      	ldrb	r3, [r3, #1]
 800d64a:	2b09      	cmp	r3, #9
 800d64c:	d83b      	bhi.n	800d6c6 <USBD_StdDevReq+0xba>
 800d64e:	a201      	add	r2, pc, #4	; (adr r2, 800d654 <USBD_StdDevReq+0x48>)
 800d650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d654:	0800d6a9 	.word	0x0800d6a9
 800d658:	0800d6bd 	.word	0x0800d6bd
 800d65c:	0800d6c7 	.word	0x0800d6c7
 800d660:	0800d6b3 	.word	0x0800d6b3
 800d664:	0800d6c7 	.word	0x0800d6c7
 800d668:	0800d687 	.word	0x0800d687
 800d66c:	0800d67d 	.word	0x0800d67d
 800d670:	0800d6c7 	.word	0x0800d6c7
 800d674:	0800d69f 	.word	0x0800d69f
 800d678:	0800d691 	.word	0x0800d691
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d67c:	6839      	ldr	r1, [r7, #0]
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 f9de 	bl	800da40 <USBD_GetDescriptor>
          break;
 800d684:	e024      	b.n	800d6d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d686:	6839      	ldr	r1, [r7, #0]
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f000 fb43 	bl	800dd14 <USBD_SetAddress>
          break;
 800d68e:	e01f      	b.n	800d6d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d690:	6839      	ldr	r1, [r7, #0]
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f000 fb82 	bl	800dd9c <USBD_SetConfig>
 800d698:	4603      	mov	r3, r0
 800d69a:	73fb      	strb	r3, [r7, #15]
          break;
 800d69c:	e018      	b.n	800d6d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d69e:	6839      	ldr	r1, [r7, #0]
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f000 fc21 	bl	800dee8 <USBD_GetConfig>
          break;
 800d6a6:	e013      	b.n	800d6d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d6a8:	6839      	ldr	r1, [r7, #0]
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f000 fc52 	bl	800df54 <USBD_GetStatus>
          break;
 800d6b0:	e00e      	b.n	800d6d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d6b2:	6839      	ldr	r1, [r7, #0]
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f000 fc81 	bl	800dfbc <USBD_SetFeature>
          break;
 800d6ba:	e009      	b.n	800d6d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d6bc:	6839      	ldr	r1, [r7, #0]
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 fc90 	bl	800dfe4 <USBD_ClrFeature>
          break;
 800d6c4:	e004      	b.n	800d6d0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d6c6:	6839      	ldr	r1, [r7, #0]
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f000 fce7 	bl	800e09c <USBD_CtlError>
          break;
 800d6ce:	bf00      	nop
      }
      break;
 800d6d0:	e004      	b.n	800d6dc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d6d2:	6839      	ldr	r1, [r7, #0]
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f000 fce1 	bl	800e09c <USBD_CtlError>
      break;
 800d6da:	bf00      	nop
  }

  return ret;
 800d6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3710      	adds	r7, #16
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
 800d6e6:	bf00      	nop

0800d6e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b084      	sub	sp, #16
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d6fe:	2b40      	cmp	r3, #64	; 0x40
 800d700:	d005      	beq.n	800d70e <USBD_StdItfReq+0x26>
 800d702:	2b40      	cmp	r3, #64	; 0x40
 800d704:	d82f      	bhi.n	800d766 <USBD_StdItfReq+0x7e>
 800d706:	2b00      	cmp	r3, #0
 800d708:	d001      	beq.n	800d70e <USBD_StdItfReq+0x26>
 800d70a:	2b20      	cmp	r3, #32
 800d70c:	d12b      	bne.n	800d766 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d714:	b2db      	uxtb	r3, r3
 800d716:	3b01      	subs	r3, #1
 800d718:	2b02      	cmp	r3, #2
 800d71a:	d81d      	bhi.n	800d758 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	889b      	ldrh	r3, [r3, #4]
 800d720:	b2db      	uxtb	r3, r3
 800d722:	2b01      	cmp	r3, #1
 800d724:	d813      	bhi.n	800d74e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d72c:	689b      	ldr	r3, [r3, #8]
 800d72e:	6839      	ldr	r1, [r7, #0]
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	4798      	blx	r3
 800d734:	4603      	mov	r3, r0
 800d736:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	88db      	ldrh	r3, [r3, #6]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d110      	bne.n	800d762 <USBD_StdItfReq+0x7a>
 800d740:	7bfb      	ldrb	r3, [r7, #15]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d10d      	bne.n	800d762 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f000 fd73 	bl	800e232 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d74c:	e009      	b.n	800d762 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d74e:	6839      	ldr	r1, [r7, #0]
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f000 fca3 	bl	800e09c <USBD_CtlError>
          break;
 800d756:	e004      	b.n	800d762 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d758:	6839      	ldr	r1, [r7, #0]
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 fc9e 	bl	800e09c <USBD_CtlError>
          break;
 800d760:	e000      	b.n	800d764 <USBD_StdItfReq+0x7c>
          break;
 800d762:	bf00      	nop
      }
      break;
 800d764:	e004      	b.n	800d770 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d766:	6839      	ldr	r1, [r7, #0]
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f000 fc97 	bl	800e09c <USBD_CtlError>
      break;
 800d76e:	bf00      	nop
  }

  return ret;
 800d770:	7bfb      	ldrb	r3, [r7, #15]
}
 800d772:	4618      	mov	r0, r3
 800d774:	3710      	adds	r7, #16
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}

0800d77a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b084      	sub	sp, #16
 800d77e:	af00      	add	r7, sp, #0
 800d780:	6078      	str	r0, [r7, #4]
 800d782:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d784:	2300      	movs	r3, #0
 800d786:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	889b      	ldrh	r3, [r3, #4]
 800d78c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d796:	2b40      	cmp	r3, #64	; 0x40
 800d798:	d007      	beq.n	800d7aa <USBD_StdEPReq+0x30>
 800d79a:	2b40      	cmp	r3, #64	; 0x40
 800d79c:	f200 8145 	bhi.w	800da2a <USBD_StdEPReq+0x2b0>
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d00c      	beq.n	800d7be <USBD_StdEPReq+0x44>
 800d7a4:	2b20      	cmp	r3, #32
 800d7a6:	f040 8140 	bne.w	800da2a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7b0:	689b      	ldr	r3, [r3, #8]
 800d7b2:	6839      	ldr	r1, [r7, #0]
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	4798      	blx	r3
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	73fb      	strb	r3, [r7, #15]
      break;
 800d7bc:	e13a      	b.n	800da34 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	785b      	ldrb	r3, [r3, #1]
 800d7c2:	2b03      	cmp	r3, #3
 800d7c4:	d007      	beq.n	800d7d6 <USBD_StdEPReq+0x5c>
 800d7c6:	2b03      	cmp	r3, #3
 800d7c8:	f300 8129 	bgt.w	800da1e <USBD_StdEPReq+0x2a4>
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d07f      	beq.n	800d8d0 <USBD_StdEPReq+0x156>
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d03c      	beq.n	800d84e <USBD_StdEPReq+0xd4>
 800d7d4:	e123      	b.n	800da1e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7dc:	b2db      	uxtb	r3, r3
 800d7de:	2b02      	cmp	r3, #2
 800d7e0:	d002      	beq.n	800d7e8 <USBD_StdEPReq+0x6e>
 800d7e2:	2b03      	cmp	r3, #3
 800d7e4:	d016      	beq.n	800d814 <USBD_StdEPReq+0x9a>
 800d7e6:	e02c      	b.n	800d842 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d7e8:	7bbb      	ldrb	r3, [r7, #14]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d00d      	beq.n	800d80a <USBD_StdEPReq+0x90>
 800d7ee:	7bbb      	ldrb	r3, [r7, #14]
 800d7f0:	2b80      	cmp	r3, #128	; 0x80
 800d7f2:	d00a      	beq.n	800d80a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d7f4:	7bbb      	ldrb	r3, [r7, #14]
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f001 f93b 	bl	800ea74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d7fe:	2180      	movs	r1, #128	; 0x80
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f001 f937 	bl	800ea74 <USBD_LL_StallEP>
 800d806:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d808:	e020      	b.n	800d84c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d80a:	6839      	ldr	r1, [r7, #0]
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f000 fc45 	bl	800e09c <USBD_CtlError>
              break;
 800d812:	e01b      	b.n	800d84c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	885b      	ldrh	r3, [r3, #2]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d10e      	bne.n	800d83a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d81c:	7bbb      	ldrb	r3, [r7, #14]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d00b      	beq.n	800d83a <USBD_StdEPReq+0xc0>
 800d822:	7bbb      	ldrb	r3, [r7, #14]
 800d824:	2b80      	cmp	r3, #128	; 0x80
 800d826:	d008      	beq.n	800d83a <USBD_StdEPReq+0xc0>
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	88db      	ldrh	r3, [r3, #6]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d104      	bne.n	800d83a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d830:	7bbb      	ldrb	r3, [r7, #14]
 800d832:	4619      	mov	r1, r3
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f001 f91d 	bl	800ea74 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 fcf9 	bl	800e232 <USBD_CtlSendStatus>

              break;
 800d840:	e004      	b.n	800d84c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d842:	6839      	ldr	r1, [r7, #0]
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f000 fc29 	bl	800e09c <USBD_CtlError>
              break;
 800d84a:	bf00      	nop
          }
          break;
 800d84c:	e0ec      	b.n	800da28 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d854:	b2db      	uxtb	r3, r3
 800d856:	2b02      	cmp	r3, #2
 800d858:	d002      	beq.n	800d860 <USBD_StdEPReq+0xe6>
 800d85a:	2b03      	cmp	r3, #3
 800d85c:	d016      	beq.n	800d88c <USBD_StdEPReq+0x112>
 800d85e:	e030      	b.n	800d8c2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d860:	7bbb      	ldrb	r3, [r7, #14]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d00d      	beq.n	800d882 <USBD_StdEPReq+0x108>
 800d866:	7bbb      	ldrb	r3, [r7, #14]
 800d868:	2b80      	cmp	r3, #128	; 0x80
 800d86a:	d00a      	beq.n	800d882 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d86c:	7bbb      	ldrb	r3, [r7, #14]
 800d86e:	4619      	mov	r1, r3
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f001 f8ff 	bl	800ea74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d876:	2180      	movs	r1, #128	; 0x80
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f001 f8fb 	bl	800ea74 <USBD_LL_StallEP>
 800d87e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d880:	e025      	b.n	800d8ce <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d882:	6839      	ldr	r1, [r7, #0]
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 fc09 	bl	800e09c <USBD_CtlError>
              break;
 800d88a:	e020      	b.n	800d8ce <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	885b      	ldrh	r3, [r3, #2]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d11b      	bne.n	800d8cc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d894:	7bbb      	ldrb	r3, [r7, #14]
 800d896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d004      	beq.n	800d8a8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d89e:	7bbb      	ldrb	r3, [r7, #14]
 800d8a0:	4619      	mov	r1, r3
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f001 f91c 	bl	800eae0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 fcc2 	bl	800e232 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8b4:	689b      	ldr	r3, [r3, #8]
 800d8b6:	6839      	ldr	r1, [r7, #0]
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	4798      	blx	r3
 800d8bc:	4603      	mov	r3, r0
 800d8be:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d8c0:	e004      	b.n	800d8cc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d8c2:	6839      	ldr	r1, [r7, #0]
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f000 fbe9 	bl	800e09c <USBD_CtlError>
              break;
 800d8ca:	e000      	b.n	800d8ce <USBD_StdEPReq+0x154>
              break;
 800d8cc:	bf00      	nop
          }
          break;
 800d8ce:	e0ab      	b.n	800da28 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	2b02      	cmp	r3, #2
 800d8da:	d002      	beq.n	800d8e2 <USBD_StdEPReq+0x168>
 800d8dc:	2b03      	cmp	r3, #3
 800d8de:	d032      	beq.n	800d946 <USBD_StdEPReq+0x1cc>
 800d8e0:	e097      	b.n	800da12 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d8e2:	7bbb      	ldrb	r3, [r7, #14]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d007      	beq.n	800d8f8 <USBD_StdEPReq+0x17e>
 800d8e8:	7bbb      	ldrb	r3, [r7, #14]
 800d8ea:	2b80      	cmp	r3, #128	; 0x80
 800d8ec:	d004      	beq.n	800d8f8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d8ee:	6839      	ldr	r1, [r7, #0]
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f000 fbd3 	bl	800e09c <USBD_CtlError>
                break;
 800d8f6:	e091      	b.n	800da1c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d8f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	da0b      	bge.n	800d918 <USBD_StdEPReq+0x19e>
 800d900:	7bbb      	ldrb	r3, [r7, #14]
 800d902:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d906:	4613      	mov	r3, r2
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	4413      	add	r3, r2
 800d90c:	009b      	lsls	r3, r3, #2
 800d90e:	3310      	adds	r3, #16
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	4413      	add	r3, r2
 800d914:	3304      	adds	r3, #4
 800d916:	e00b      	b.n	800d930 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d918:	7bbb      	ldrb	r3, [r7, #14]
 800d91a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d91e:	4613      	mov	r3, r2
 800d920:	009b      	lsls	r3, r3, #2
 800d922:	4413      	add	r3, r2
 800d924:	009b      	lsls	r3, r3, #2
 800d926:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d92a:	687a      	ldr	r2, [r7, #4]
 800d92c:	4413      	add	r3, r2
 800d92e:	3304      	adds	r3, #4
 800d930:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	2200      	movs	r2, #0
 800d936:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	2202      	movs	r2, #2
 800d93c:	4619      	mov	r1, r3
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f000 fc1d 	bl	800e17e <USBD_CtlSendData>
              break;
 800d944:	e06a      	b.n	800da1c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d946:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	da11      	bge.n	800d972 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d94e:	7bbb      	ldrb	r3, [r7, #14]
 800d950:	f003 020f 	and.w	r2, r3, #15
 800d954:	6879      	ldr	r1, [r7, #4]
 800d956:	4613      	mov	r3, r2
 800d958:	009b      	lsls	r3, r3, #2
 800d95a:	4413      	add	r3, r2
 800d95c:	009b      	lsls	r3, r3, #2
 800d95e:	440b      	add	r3, r1
 800d960:	3324      	adds	r3, #36	; 0x24
 800d962:	881b      	ldrh	r3, [r3, #0]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d117      	bne.n	800d998 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d968:	6839      	ldr	r1, [r7, #0]
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f000 fb96 	bl	800e09c <USBD_CtlError>
                  break;
 800d970:	e054      	b.n	800da1c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d972:	7bbb      	ldrb	r3, [r7, #14]
 800d974:	f003 020f 	and.w	r2, r3, #15
 800d978:	6879      	ldr	r1, [r7, #4]
 800d97a:	4613      	mov	r3, r2
 800d97c:	009b      	lsls	r3, r3, #2
 800d97e:	4413      	add	r3, r2
 800d980:	009b      	lsls	r3, r3, #2
 800d982:	440b      	add	r3, r1
 800d984:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d988:	881b      	ldrh	r3, [r3, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d104      	bne.n	800d998 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d98e:	6839      	ldr	r1, [r7, #0]
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f000 fb83 	bl	800e09c <USBD_CtlError>
                  break;
 800d996:	e041      	b.n	800da1c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d998:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	da0b      	bge.n	800d9b8 <USBD_StdEPReq+0x23e>
 800d9a0:	7bbb      	ldrb	r3, [r7, #14]
 800d9a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d9a6:	4613      	mov	r3, r2
 800d9a8:	009b      	lsls	r3, r3, #2
 800d9aa:	4413      	add	r3, r2
 800d9ac:	009b      	lsls	r3, r3, #2
 800d9ae:	3310      	adds	r3, #16
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	4413      	add	r3, r2
 800d9b4:	3304      	adds	r3, #4
 800d9b6:	e00b      	b.n	800d9d0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d9b8:	7bbb      	ldrb	r3, [r7, #14]
 800d9ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d9be:	4613      	mov	r3, r2
 800d9c0:	009b      	lsls	r3, r3, #2
 800d9c2:	4413      	add	r3, r2
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d9ca:	687a      	ldr	r2, [r7, #4]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	3304      	adds	r3, #4
 800d9d0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d9d2:	7bbb      	ldrb	r3, [r7, #14]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d002      	beq.n	800d9de <USBD_StdEPReq+0x264>
 800d9d8:	7bbb      	ldrb	r3, [r7, #14]
 800d9da:	2b80      	cmp	r3, #128	; 0x80
 800d9dc:	d103      	bne.n	800d9e6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	601a      	str	r2, [r3, #0]
 800d9e4:	e00e      	b.n	800da04 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d9e6:	7bbb      	ldrb	r3, [r7, #14]
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f001 f8ae 	bl	800eb4c <USBD_LL_IsStallEP>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d003      	beq.n	800d9fe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	2201      	movs	r2, #1
 800d9fa:	601a      	str	r2, [r3, #0]
 800d9fc:	e002      	b.n	800da04 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	2200      	movs	r2, #0
 800da02:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	2202      	movs	r2, #2
 800da08:	4619      	mov	r1, r3
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f000 fbb7 	bl	800e17e <USBD_CtlSendData>
              break;
 800da10:	e004      	b.n	800da1c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800da12:	6839      	ldr	r1, [r7, #0]
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f000 fb41 	bl	800e09c <USBD_CtlError>
              break;
 800da1a:	bf00      	nop
          }
          break;
 800da1c:	e004      	b.n	800da28 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800da1e:	6839      	ldr	r1, [r7, #0]
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f000 fb3b 	bl	800e09c <USBD_CtlError>
          break;
 800da26:	bf00      	nop
      }
      break;
 800da28:	e004      	b.n	800da34 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800da2a:	6839      	ldr	r1, [r7, #0]
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f000 fb35 	bl	800e09c <USBD_CtlError>
      break;
 800da32:	bf00      	nop
  }

  return ret;
 800da34:	7bfb      	ldrb	r3, [r7, #15]
}
 800da36:	4618      	mov	r0, r3
 800da38:	3710      	adds	r7, #16
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
	...

0800da40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800da4a:	2300      	movs	r3, #0
 800da4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800da4e:	2300      	movs	r3, #0
 800da50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800da52:	2300      	movs	r3, #0
 800da54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	885b      	ldrh	r3, [r3, #2]
 800da5a:	0a1b      	lsrs	r3, r3, #8
 800da5c:	b29b      	uxth	r3, r3
 800da5e:	3b01      	subs	r3, #1
 800da60:	2b06      	cmp	r3, #6
 800da62:	f200 8128 	bhi.w	800dcb6 <USBD_GetDescriptor+0x276>
 800da66:	a201      	add	r2, pc, #4	; (adr r2, 800da6c <USBD_GetDescriptor+0x2c>)
 800da68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da6c:	0800da89 	.word	0x0800da89
 800da70:	0800daa1 	.word	0x0800daa1
 800da74:	0800dae1 	.word	0x0800dae1
 800da78:	0800dcb7 	.word	0x0800dcb7
 800da7c:	0800dcb7 	.word	0x0800dcb7
 800da80:	0800dc57 	.word	0x0800dc57
 800da84:	0800dc83 	.word	0x0800dc83
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	687a      	ldr	r2, [r7, #4]
 800da92:	7c12      	ldrb	r2, [r2, #16]
 800da94:	f107 0108 	add.w	r1, r7, #8
 800da98:	4610      	mov	r0, r2
 800da9a:	4798      	blx	r3
 800da9c:	60f8      	str	r0, [r7, #12]
      break;
 800da9e:	e112      	b.n	800dcc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	7c1b      	ldrb	r3, [r3, #16]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d10d      	bne.n	800dac4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dab0:	f107 0208 	add.w	r2, r7, #8
 800dab4:	4610      	mov	r0, r2
 800dab6:	4798      	blx	r3
 800dab8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	3301      	adds	r3, #1
 800dabe:	2202      	movs	r2, #2
 800dac0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dac2:	e100      	b.n	800dcc6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dacc:	f107 0208 	add.w	r2, r7, #8
 800dad0:	4610      	mov	r0, r2
 800dad2:	4798      	blx	r3
 800dad4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	3301      	adds	r3, #1
 800dada:	2202      	movs	r2, #2
 800dadc:	701a      	strb	r2, [r3, #0]
      break;
 800dade:	e0f2      	b.n	800dcc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	885b      	ldrh	r3, [r3, #2]
 800dae4:	b2db      	uxtb	r3, r3
 800dae6:	2b05      	cmp	r3, #5
 800dae8:	f200 80ac 	bhi.w	800dc44 <USBD_GetDescriptor+0x204>
 800daec:	a201      	add	r2, pc, #4	; (adr r2, 800daf4 <USBD_GetDescriptor+0xb4>)
 800daee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daf2:	bf00      	nop
 800daf4:	0800db0d 	.word	0x0800db0d
 800daf8:	0800db41 	.word	0x0800db41
 800dafc:	0800db75 	.word	0x0800db75
 800db00:	0800dba9 	.word	0x0800dba9
 800db04:	0800dbdd 	.word	0x0800dbdd
 800db08:	0800dc11 	.word	0x0800dc11
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d00b      	beq.n	800db30 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	687a      	ldr	r2, [r7, #4]
 800db22:	7c12      	ldrb	r2, [r2, #16]
 800db24:	f107 0108 	add.w	r1, r7, #8
 800db28:	4610      	mov	r0, r2
 800db2a:	4798      	blx	r3
 800db2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db2e:	e091      	b.n	800dc54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800db30:	6839      	ldr	r1, [r7, #0]
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f000 fab2 	bl	800e09c <USBD_CtlError>
            err++;
 800db38:	7afb      	ldrb	r3, [r7, #11]
 800db3a:	3301      	adds	r3, #1
 800db3c:	72fb      	strb	r3, [r7, #11]
          break;
 800db3e:	e089      	b.n	800dc54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db46:	689b      	ldr	r3, [r3, #8]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d00b      	beq.n	800db64 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db52:	689b      	ldr	r3, [r3, #8]
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	7c12      	ldrb	r2, [r2, #16]
 800db58:	f107 0108 	add.w	r1, r7, #8
 800db5c:	4610      	mov	r0, r2
 800db5e:	4798      	blx	r3
 800db60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db62:	e077      	b.n	800dc54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800db64:	6839      	ldr	r1, [r7, #0]
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 fa98 	bl	800e09c <USBD_CtlError>
            err++;
 800db6c:	7afb      	ldrb	r3, [r7, #11]
 800db6e:	3301      	adds	r3, #1
 800db70:	72fb      	strb	r3, [r7, #11]
          break;
 800db72:	e06f      	b.n	800dc54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db7a:	68db      	ldr	r3, [r3, #12]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d00b      	beq.n	800db98 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db86:	68db      	ldr	r3, [r3, #12]
 800db88:	687a      	ldr	r2, [r7, #4]
 800db8a:	7c12      	ldrb	r2, [r2, #16]
 800db8c:	f107 0108 	add.w	r1, r7, #8
 800db90:	4610      	mov	r0, r2
 800db92:	4798      	blx	r3
 800db94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db96:	e05d      	b.n	800dc54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800db98:	6839      	ldr	r1, [r7, #0]
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f000 fa7e 	bl	800e09c <USBD_CtlError>
            err++;
 800dba0:	7afb      	ldrb	r3, [r7, #11]
 800dba2:	3301      	adds	r3, #1
 800dba4:	72fb      	strb	r3, [r7, #11]
          break;
 800dba6:	e055      	b.n	800dc54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbae:	691b      	ldr	r3, [r3, #16]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d00b      	beq.n	800dbcc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbba:	691b      	ldr	r3, [r3, #16]
 800dbbc:	687a      	ldr	r2, [r7, #4]
 800dbbe:	7c12      	ldrb	r2, [r2, #16]
 800dbc0:	f107 0108 	add.w	r1, r7, #8
 800dbc4:	4610      	mov	r0, r2
 800dbc6:	4798      	blx	r3
 800dbc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbca:	e043      	b.n	800dc54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dbcc:	6839      	ldr	r1, [r7, #0]
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f000 fa64 	bl	800e09c <USBD_CtlError>
            err++;
 800dbd4:	7afb      	ldrb	r3, [r7, #11]
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	72fb      	strb	r3, [r7, #11]
          break;
 800dbda:	e03b      	b.n	800dc54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbe2:	695b      	ldr	r3, [r3, #20]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d00b      	beq.n	800dc00 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbee:	695b      	ldr	r3, [r3, #20]
 800dbf0:	687a      	ldr	r2, [r7, #4]
 800dbf2:	7c12      	ldrb	r2, [r2, #16]
 800dbf4:	f107 0108 	add.w	r1, r7, #8
 800dbf8:	4610      	mov	r0, r2
 800dbfa:	4798      	blx	r3
 800dbfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbfe:	e029      	b.n	800dc54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dc00:	6839      	ldr	r1, [r7, #0]
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 fa4a 	bl	800e09c <USBD_CtlError>
            err++;
 800dc08:	7afb      	ldrb	r3, [r7, #11]
 800dc0a:	3301      	adds	r3, #1
 800dc0c:	72fb      	strb	r3, [r7, #11]
          break;
 800dc0e:	e021      	b.n	800dc54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc16:	699b      	ldr	r3, [r3, #24]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d00b      	beq.n	800dc34 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc22:	699b      	ldr	r3, [r3, #24]
 800dc24:	687a      	ldr	r2, [r7, #4]
 800dc26:	7c12      	ldrb	r2, [r2, #16]
 800dc28:	f107 0108 	add.w	r1, r7, #8
 800dc2c:	4610      	mov	r0, r2
 800dc2e:	4798      	blx	r3
 800dc30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc32:	e00f      	b.n	800dc54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dc34:	6839      	ldr	r1, [r7, #0]
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f000 fa30 	bl	800e09c <USBD_CtlError>
            err++;
 800dc3c:	7afb      	ldrb	r3, [r7, #11]
 800dc3e:	3301      	adds	r3, #1
 800dc40:	72fb      	strb	r3, [r7, #11]
          break;
 800dc42:	e007      	b.n	800dc54 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dc44:	6839      	ldr	r1, [r7, #0]
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f000 fa28 	bl	800e09c <USBD_CtlError>
          err++;
 800dc4c:	7afb      	ldrb	r3, [r7, #11]
 800dc4e:	3301      	adds	r3, #1
 800dc50:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800dc52:	bf00      	nop
      }
      break;
 800dc54:	e037      	b.n	800dcc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	7c1b      	ldrb	r3, [r3, #16]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d109      	bne.n	800dc72 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc66:	f107 0208 	add.w	r2, r7, #8
 800dc6a:	4610      	mov	r0, r2
 800dc6c:	4798      	blx	r3
 800dc6e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dc70:	e029      	b.n	800dcc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800dc72:	6839      	ldr	r1, [r7, #0]
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f000 fa11 	bl	800e09c <USBD_CtlError>
        err++;
 800dc7a:	7afb      	ldrb	r3, [r7, #11]
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	72fb      	strb	r3, [r7, #11]
      break;
 800dc80:	e021      	b.n	800dcc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	7c1b      	ldrb	r3, [r3, #16]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d10d      	bne.n	800dca6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc92:	f107 0208 	add.w	r2, r7, #8
 800dc96:	4610      	mov	r0, r2
 800dc98:	4798      	blx	r3
 800dc9a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	3301      	adds	r3, #1
 800dca0:	2207      	movs	r2, #7
 800dca2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dca4:	e00f      	b.n	800dcc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800dca6:	6839      	ldr	r1, [r7, #0]
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f000 f9f7 	bl	800e09c <USBD_CtlError>
        err++;
 800dcae:	7afb      	ldrb	r3, [r7, #11]
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	72fb      	strb	r3, [r7, #11]
      break;
 800dcb4:	e007      	b.n	800dcc6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800dcb6:	6839      	ldr	r1, [r7, #0]
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f000 f9ef 	bl	800e09c <USBD_CtlError>
      err++;
 800dcbe:	7afb      	ldrb	r3, [r7, #11]
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	72fb      	strb	r3, [r7, #11]
      break;
 800dcc4:	bf00      	nop
  }

  if (err != 0U)
 800dcc6:	7afb      	ldrb	r3, [r7, #11]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d11e      	bne.n	800dd0a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	88db      	ldrh	r3, [r3, #6]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d016      	beq.n	800dd02 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800dcd4:	893b      	ldrh	r3, [r7, #8]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d00e      	beq.n	800dcf8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	88da      	ldrh	r2, [r3, #6]
 800dcde:	893b      	ldrh	r3, [r7, #8]
 800dce0:	4293      	cmp	r3, r2
 800dce2:	bf28      	it	cs
 800dce4:	4613      	movcs	r3, r2
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dcea:	893b      	ldrh	r3, [r7, #8]
 800dcec:	461a      	mov	r2, r3
 800dcee:	68f9      	ldr	r1, [r7, #12]
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f000 fa44 	bl	800e17e <USBD_CtlSendData>
 800dcf6:	e009      	b.n	800dd0c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dcf8:	6839      	ldr	r1, [r7, #0]
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f000 f9ce 	bl	800e09c <USBD_CtlError>
 800dd00:	e004      	b.n	800dd0c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f000 fa95 	bl	800e232 <USBD_CtlSendStatus>
 800dd08:	e000      	b.n	800dd0c <USBD_GetDescriptor+0x2cc>
    return;
 800dd0a:	bf00      	nop
  }
}
 800dd0c:	3710      	adds	r7, #16
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop

0800dd14 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	889b      	ldrh	r3, [r3, #4]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d131      	bne.n	800dd8a <USBD_SetAddress+0x76>
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	88db      	ldrh	r3, [r3, #6]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d12d      	bne.n	800dd8a <USBD_SetAddress+0x76>
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	885b      	ldrh	r3, [r3, #2]
 800dd32:	2b7f      	cmp	r3, #127	; 0x7f
 800dd34:	d829      	bhi.n	800dd8a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	885b      	ldrh	r3, [r3, #2]
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd48:	b2db      	uxtb	r3, r3
 800dd4a:	2b03      	cmp	r3, #3
 800dd4c:	d104      	bne.n	800dd58 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800dd4e:	6839      	ldr	r1, [r7, #0]
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f000 f9a3 	bl	800e09c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd56:	e01d      	b.n	800dd94 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	7bfa      	ldrb	r2, [r7, #15]
 800dd5c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dd60:	7bfb      	ldrb	r3, [r7, #15]
 800dd62:	4619      	mov	r1, r3
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f000 ff1f 	bl	800eba8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f000 fa61 	bl	800e232 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dd70:	7bfb      	ldrb	r3, [r7, #15]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d004      	beq.n	800dd80 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2202      	movs	r2, #2
 800dd7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd7e:	e009      	b.n	800dd94 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2201      	movs	r2, #1
 800dd84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd88:	e004      	b.n	800dd94 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dd8a:	6839      	ldr	r1, [r7, #0]
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f000 f985 	bl	800e09c <USBD_CtlError>
  }
}
 800dd92:	bf00      	nop
 800dd94:	bf00      	nop
 800dd96:	3710      	adds	r7, #16
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b084      	sub	sp, #16
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dda6:	2300      	movs	r3, #0
 800dda8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	885b      	ldrh	r3, [r3, #2]
 800ddae:	b2da      	uxtb	r2, r3
 800ddb0:	4b4c      	ldr	r3, [pc, #304]	; (800dee4 <USBD_SetConfig+0x148>)
 800ddb2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ddb4:	4b4b      	ldr	r3, [pc, #300]	; (800dee4 <USBD_SetConfig+0x148>)
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	2b01      	cmp	r3, #1
 800ddba:	d905      	bls.n	800ddc8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ddbc:	6839      	ldr	r1, [r7, #0]
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f000 f96c 	bl	800e09c <USBD_CtlError>
    return USBD_FAIL;
 800ddc4:	2303      	movs	r3, #3
 800ddc6:	e088      	b.n	800deda <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddce:	b2db      	uxtb	r3, r3
 800ddd0:	2b02      	cmp	r3, #2
 800ddd2:	d002      	beq.n	800ddda <USBD_SetConfig+0x3e>
 800ddd4:	2b03      	cmp	r3, #3
 800ddd6:	d025      	beq.n	800de24 <USBD_SetConfig+0x88>
 800ddd8:	e071      	b.n	800debe <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ddda:	4b42      	ldr	r3, [pc, #264]	; (800dee4 <USBD_SetConfig+0x148>)
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d01c      	beq.n	800de1c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800dde2:	4b40      	ldr	r3, [pc, #256]	; (800dee4 <USBD_SetConfig+0x148>)
 800dde4:	781b      	ldrb	r3, [r3, #0]
 800dde6:	461a      	mov	r2, r3
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ddec:	4b3d      	ldr	r3, [pc, #244]	; (800dee4 <USBD_SetConfig+0x148>)
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f7ff f9bc 	bl	800d170 <USBD_SetClassConfig>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ddfc:	7bfb      	ldrb	r3, [r7, #15]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d004      	beq.n	800de0c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800de02:	6839      	ldr	r1, [r7, #0]
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f000 f949 	bl	800e09c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800de0a:	e065      	b.n	800ded8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 fa10 	bl	800e232 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2203      	movs	r2, #3
 800de16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800de1a:	e05d      	b.n	800ded8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f000 fa08 	bl	800e232 <USBD_CtlSendStatus>
      break;
 800de22:	e059      	b.n	800ded8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800de24:	4b2f      	ldr	r3, [pc, #188]	; (800dee4 <USBD_SetConfig+0x148>)
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d112      	bne.n	800de52 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2202      	movs	r2, #2
 800de30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800de34:	4b2b      	ldr	r3, [pc, #172]	; (800dee4 <USBD_SetConfig+0x148>)
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	461a      	mov	r2, r3
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800de3e:	4b29      	ldr	r3, [pc, #164]	; (800dee4 <USBD_SetConfig+0x148>)
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	4619      	mov	r1, r3
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f7ff f9af 	bl	800d1a8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 f9f1 	bl	800e232 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800de50:	e042      	b.n	800ded8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800de52:	4b24      	ldr	r3, [pc, #144]	; (800dee4 <USBD_SetConfig+0x148>)
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	461a      	mov	r2, r3
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d02a      	beq.n	800deb6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	685b      	ldr	r3, [r3, #4]
 800de64:	b2db      	uxtb	r3, r3
 800de66:	4619      	mov	r1, r3
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f7ff f99d 	bl	800d1a8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800de6e:	4b1d      	ldr	r3, [pc, #116]	; (800dee4 <USBD_SetConfig+0x148>)
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	461a      	mov	r2, r3
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800de78:	4b1a      	ldr	r3, [pc, #104]	; (800dee4 <USBD_SetConfig+0x148>)
 800de7a:	781b      	ldrb	r3, [r3, #0]
 800de7c:	4619      	mov	r1, r3
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f7ff f976 	bl	800d170 <USBD_SetClassConfig>
 800de84:	4603      	mov	r3, r0
 800de86:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800de88:	7bfb      	ldrb	r3, [r7, #15]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d00f      	beq.n	800deae <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800de8e:	6839      	ldr	r1, [r7, #0]
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f000 f903 	bl	800e09c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	b2db      	uxtb	r3, r3
 800de9c:	4619      	mov	r1, r3
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f7ff f982 	bl	800d1a8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2202      	movs	r2, #2
 800dea8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800deac:	e014      	b.n	800ded8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f000 f9bf 	bl	800e232 <USBD_CtlSendStatus>
      break;
 800deb4:	e010      	b.n	800ded8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f000 f9bb 	bl	800e232 <USBD_CtlSendStatus>
      break;
 800debc:	e00c      	b.n	800ded8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800debe:	6839      	ldr	r1, [r7, #0]
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f000 f8eb 	bl	800e09c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dec6:	4b07      	ldr	r3, [pc, #28]	; (800dee4 <USBD_SetConfig+0x148>)
 800dec8:	781b      	ldrb	r3, [r3, #0]
 800deca:	4619      	mov	r1, r3
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f7ff f96b 	bl	800d1a8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ded2:	2303      	movs	r3, #3
 800ded4:	73fb      	strb	r3, [r7, #15]
      break;
 800ded6:	bf00      	nop
  }

  return ret;
 800ded8:	7bfb      	ldrb	r3, [r7, #15]
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3710      	adds	r7, #16
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	200005c4 	.word	0x200005c4

0800dee8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b082      	sub	sp, #8
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	88db      	ldrh	r3, [r3, #6]
 800def6:	2b01      	cmp	r3, #1
 800def8:	d004      	beq.n	800df04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800defa:	6839      	ldr	r1, [r7, #0]
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f000 f8cd 	bl	800e09c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800df02:	e023      	b.n	800df4c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	2b02      	cmp	r3, #2
 800df0e:	dc02      	bgt.n	800df16 <USBD_GetConfig+0x2e>
 800df10:	2b00      	cmp	r3, #0
 800df12:	dc03      	bgt.n	800df1c <USBD_GetConfig+0x34>
 800df14:	e015      	b.n	800df42 <USBD_GetConfig+0x5a>
 800df16:	2b03      	cmp	r3, #3
 800df18:	d00b      	beq.n	800df32 <USBD_GetConfig+0x4a>
 800df1a:	e012      	b.n	800df42 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2200      	movs	r2, #0
 800df20:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	3308      	adds	r3, #8
 800df26:	2201      	movs	r2, #1
 800df28:	4619      	mov	r1, r3
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f000 f927 	bl	800e17e <USBD_CtlSendData>
        break;
 800df30:	e00c      	b.n	800df4c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	3304      	adds	r3, #4
 800df36:	2201      	movs	r2, #1
 800df38:	4619      	mov	r1, r3
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f000 f91f 	bl	800e17e <USBD_CtlSendData>
        break;
 800df40:	e004      	b.n	800df4c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800df42:	6839      	ldr	r1, [r7, #0]
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f000 f8a9 	bl	800e09c <USBD_CtlError>
        break;
 800df4a:	bf00      	nop
}
 800df4c:	bf00      	nop
 800df4e:	3708      	adds	r7, #8
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}

0800df54 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b082      	sub	sp, #8
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df64:	b2db      	uxtb	r3, r3
 800df66:	3b01      	subs	r3, #1
 800df68:	2b02      	cmp	r3, #2
 800df6a:	d81e      	bhi.n	800dfaa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	88db      	ldrh	r3, [r3, #6]
 800df70:	2b02      	cmp	r3, #2
 800df72:	d004      	beq.n	800df7e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800df74:	6839      	ldr	r1, [r7, #0]
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f000 f890 	bl	800e09c <USBD_CtlError>
        break;
 800df7c:	e01a      	b.n	800dfb4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2201      	movs	r2, #1
 800df82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d005      	beq.n	800df9a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	68db      	ldr	r3, [r3, #12]
 800df92:	f043 0202 	orr.w	r2, r3, #2
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	330c      	adds	r3, #12
 800df9e:	2202      	movs	r2, #2
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f000 f8eb 	bl	800e17e <USBD_CtlSendData>
      break;
 800dfa8:	e004      	b.n	800dfb4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dfaa:	6839      	ldr	r1, [r7, #0]
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f000 f875 	bl	800e09c <USBD_CtlError>
      break;
 800dfb2:	bf00      	nop
  }
}
 800dfb4:	bf00      	nop
 800dfb6:	3708      	adds	r7, #8
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b082      	sub	sp, #8
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	885b      	ldrh	r3, [r3, #2]
 800dfca:	2b01      	cmp	r3, #1
 800dfcc:	d106      	bne.n	800dfdc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f000 f92b 	bl	800e232 <USBD_CtlSendStatus>
  }
}
 800dfdc:	bf00      	nop
 800dfde:	3708      	adds	r7, #8
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b082      	sub	sp, #8
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dff4:	b2db      	uxtb	r3, r3
 800dff6:	3b01      	subs	r3, #1
 800dff8:	2b02      	cmp	r3, #2
 800dffa:	d80b      	bhi.n	800e014 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	885b      	ldrh	r3, [r3, #2]
 800e000:	2b01      	cmp	r3, #1
 800e002:	d10c      	bne.n	800e01e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2200      	movs	r2, #0
 800e008:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f000 f910 	bl	800e232 <USBD_CtlSendStatus>
      }
      break;
 800e012:	e004      	b.n	800e01e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e014:	6839      	ldr	r1, [r7, #0]
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 f840 	bl	800e09c <USBD_CtlError>
      break;
 800e01c:	e000      	b.n	800e020 <USBD_ClrFeature+0x3c>
      break;
 800e01e:	bf00      	nop
  }
}
 800e020:	bf00      	nop
 800e022:	3708      	adds	r7, #8
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b084      	sub	sp, #16
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	781a      	ldrb	r2, [r3, #0]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	3301      	adds	r3, #1
 800e042:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	781a      	ldrb	r2, [r3, #0]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	3301      	adds	r3, #1
 800e050:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e052:	68f8      	ldr	r0, [r7, #12]
 800e054:	f7ff fabc 	bl	800d5d0 <SWAPBYTE>
 800e058:	4603      	mov	r3, r0
 800e05a:	461a      	mov	r2, r3
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	3301      	adds	r3, #1
 800e064:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	3301      	adds	r3, #1
 800e06a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e06c:	68f8      	ldr	r0, [r7, #12]
 800e06e:	f7ff faaf 	bl	800d5d0 <SWAPBYTE>
 800e072:	4603      	mov	r3, r0
 800e074:	461a      	mov	r2, r3
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	3301      	adds	r3, #1
 800e07e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	3301      	adds	r3, #1
 800e084:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e086:	68f8      	ldr	r0, [r7, #12]
 800e088:	f7ff faa2 	bl	800d5d0 <SWAPBYTE>
 800e08c:	4603      	mov	r3, r0
 800e08e:	461a      	mov	r2, r3
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	80da      	strh	r2, [r3, #6]
}
 800e094:	bf00      	nop
 800e096:	3710      	adds	r7, #16
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b082      	sub	sp, #8
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e0a6:	2180      	movs	r1, #128	; 0x80
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f000 fce3 	bl	800ea74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e0ae:	2100      	movs	r1, #0
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f000 fcdf 	bl	800ea74 <USBD_LL_StallEP>
}
 800e0b6:	bf00      	nop
 800e0b8:	3708      	adds	r7, #8
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}

0800e0be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e0be:	b580      	push	{r7, lr}
 800e0c0:	b086      	sub	sp, #24
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	60f8      	str	r0, [r7, #12]
 800e0c6:	60b9      	str	r1, [r7, #8]
 800e0c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d036      	beq.n	800e142 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e0d8:	6938      	ldr	r0, [r7, #16]
 800e0da:	f000 f836 	bl	800e14a <USBD_GetLen>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	3301      	adds	r3, #1
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	005b      	lsls	r3, r3, #1
 800e0e6:	b29a      	uxth	r2, r3
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e0ec:	7dfb      	ldrb	r3, [r7, #23]
 800e0ee:	68ba      	ldr	r2, [r7, #8]
 800e0f0:	4413      	add	r3, r2
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	7812      	ldrb	r2, [r2, #0]
 800e0f6:	701a      	strb	r2, [r3, #0]
  idx++;
 800e0f8:	7dfb      	ldrb	r3, [r7, #23]
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e0fe:	7dfb      	ldrb	r3, [r7, #23]
 800e100:	68ba      	ldr	r2, [r7, #8]
 800e102:	4413      	add	r3, r2
 800e104:	2203      	movs	r2, #3
 800e106:	701a      	strb	r2, [r3, #0]
  idx++;
 800e108:	7dfb      	ldrb	r3, [r7, #23]
 800e10a:	3301      	adds	r3, #1
 800e10c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e10e:	e013      	b.n	800e138 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e110:	7dfb      	ldrb	r3, [r7, #23]
 800e112:	68ba      	ldr	r2, [r7, #8]
 800e114:	4413      	add	r3, r2
 800e116:	693a      	ldr	r2, [r7, #16]
 800e118:	7812      	ldrb	r2, [r2, #0]
 800e11a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	3301      	adds	r3, #1
 800e120:	613b      	str	r3, [r7, #16]
    idx++;
 800e122:	7dfb      	ldrb	r3, [r7, #23]
 800e124:	3301      	adds	r3, #1
 800e126:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e128:	7dfb      	ldrb	r3, [r7, #23]
 800e12a:	68ba      	ldr	r2, [r7, #8]
 800e12c:	4413      	add	r3, r2
 800e12e:	2200      	movs	r2, #0
 800e130:	701a      	strb	r2, [r3, #0]
    idx++;
 800e132:	7dfb      	ldrb	r3, [r7, #23]
 800e134:	3301      	adds	r3, #1
 800e136:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	781b      	ldrb	r3, [r3, #0]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d1e7      	bne.n	800e110 <USBD_GetString+0x52>
 800e140:	e000      	b.n	800e144 <USBD_GetString+0x86>
    return;
 800e142:	bf00      	nop
  }
}
 800e144:	3718      	adds	r7, #24
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}

0800e14a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e14a:	b480      	push	{r7}
 800e14c:	b085      	sub	sp, #20
 800e14e:	af00      	add	r7, sp, #0
 800e150:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e152:	2300      	movs	r3, #0
 800e154:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e15a:	e005      	b.n	800e168 <USBD_GetLen+0x1e>
  {
    len++;
 800e15c:	7bfb      	ldrb	r3, [r7, #15]
 800e15e:	3301      	adds	r3, #1
 800e160:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	3301      	adds	r3, #1
 800e166:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	781b      	ldrb	r3, [r3, #0]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d1f5      	bne.n	800e15c <USBD_GetLen+0x12>
  }

  return len;
 800e170:	7bfb      	ldrb	r3, [r7, #15]
}
 800e172:	4618      	mov	r0, r3
 800e174:	3714      	adds	r7, #20
 800e176:	46bd      	mov	sp, r7
 800e178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17c:	4770      	bx	lr

0800e17e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e17e:	b580      	push	{r7, lr}
 800e180:	b084      	sub	sp, #16
 800e182:	af00      	add	r7, sp, #0
 800e184:	60f8      	str	r0, [r7, #12]
 800e186:	60b9      	str	r1, [r7, #8]
 800e188:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2202      	movs	r2, #2
 800e18e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	687a      	ldr	r2, [r7, #4]
 800e196:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	687a      	ldr	r2, [r7, #4]
 800e19c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	68ba      	ldr	r2, [r7, #8]
 800e1a2:	2100      	movs	r1, #0
 800e1a4:	68f8      	ldr	r0, [r7, #12]
 800e1a6:	f000 fd35 	bl	800ec14 <USBD_LL_Transmit>

  return USBD_OK;
 800e1aa:	2300      	movs	r3, #0
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3710      	adds	r7, #16
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}

0800e1b4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b084      	sub	sp, #16
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	60b9      	str	r1, [r7, #8]
 800e1be:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	68ba      	ldr	r2, [r7, #8]
 800e1c4:	2100      	movs	r1, #0
 800e1c6:	68f8      	ldr	r0, [r7, #12]
 800e1c8:	f000 fd24 	bl	800ec14 <USBD_LL_Transmit>

  return USBD_OK;
 800e1cc:	2300      	movs	r3, #0
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3710      	adds	r7, #16
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}

0800e1d6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e1d6:	b580      	push	{r7, lr}
 800e1d8:	b084      	sub	sp, #16
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	60f8      	str	r0, [r7, #12]
 800e1de:	60b9      	str	r1, [r7, #8]
 800e1e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2203      	movs	r2, #3
 800e1e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	687a      	ldr	r2, [r7, #4]
 800e1ee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	687a      	ldr	r2, [r7, #4]
 800e1f6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	68ba      	ldr	r2, [r7, #8]
 800e1fe:	2100      	movs	r1, #0
 800e200:	68f8      	ldr	r0, [r7, #12]
 800e202:	f000 fd3f 	bl	800ec84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e206:	2300      	movs	r3, #0
}
 800e208:	4618      	mov	r0, r3
 800e20a:	3710      	adds	r7, #16
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b084      	sub	sp, #16
 800e214:	af00      	add	r7, sp, #0
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	60b9      	str	r1, [r7, #8]
 800e21a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	68ba      	ldr	r2, [r7, #8]
 800e220:	2100      	movs	r1, #0
 800e222:	68f8      	ldr	r0, [r7, #12]
 800e224:	f000 fd2e 	bl	800ec84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e228:	2300      	movs	r3, #0
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3710      	adds	r7, #16
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}

0800e232 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e232:	b580      	push	{r7, lr}
 800e234:	b082      	sub	sp, #8
 800e236:	af00      	add	r7, sp, #0
 800e238:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2204      	movs	r2, #4
 800e23e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e242:	2300      	movs	r3, #0
 800e244:	2200      	movs	r2, #0
 800e246:	2100      	movs	r1, #0
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f000 fce3 	bl	800ec14 <USBD_LL_Transmit>

  return USBD_OK;
 800e24e:	2300      	movs	r3, #0
}
 800e250:	4618      	mov	r0, r3
 800e252:	3708      	adds	r7, #8
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2205      	movs	r2, #5
 800e264:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e268:	2300      	movs	r3, #0
 800e26a:	2200      	movs	r2, #0
 800e26c:	2100      	movs	r1, #0
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 fd08 	bl	800ec84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e274:	2300      	movs	r3, #0
}
 800e276:	4618      	mov	r0, r3
 800e278:	3708      	adds	r7, #8
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
	...

0800e280 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e284:	2200      	movs	r2, #0
 800e286:	4912      	ldr	r1, [pc, #72]	; (800e2d0 <MX_USB_DEVICE_Init+0x50>)
 800e288:	4812      	ldr	r0, [pc, #72]	; (800e2d4 <MX_USB_DEVICE_Init+0x54>)
 800e28a:	f7fe ff03 	bl	800d094 <USBD_Init>
 800e28e:	4603      	mov	r3, r0
 800e290:	2b00      	cmp	r3, #0
 800e292:	d001      	beq.n	800e298 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e294:	f7f5 fe60 	bl	8003f58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e298:	490f      	ldr	r1, [pc, #60]	; (800e2d8 <MX_USB_DEVICE_Init+0x58>)
 800e29a:	480e      	ldr	r0, [pc, #56]	; (800e2d4 <MX_USB_DEVICE_Init+0x54>)
 800e29c:	f7fe ff2a 	bl	800d0f4 <USBD_RegisterClass>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d001      	beq.n	800e2aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e2a6:	f7f5 fe57 	bl	8003f58 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e2aa:	490c      	ldr	r1, [pc, #48]	; (800e2dc <MX_USB_DEVICE_Init+0x5c>)
 800e2ac:	4809      	ldr	r0, [pc, #36]	; (800e2d4 <MX_USB_DEVICE_Init+0x54>)
 800e2ae:	f7fe fe4b 	bl	800cf48 <USBD_CDC_RegisterInterface>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d001      	beq.n	800e2bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e2b8:	f7f5 fe4e 	bl	8003f58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e2bc:	4805      	ldr	r0, [pc, #20]	; (800e2d4 <MX_USB_DEVICE_Init+0x54>)
 800e2be:	f7fe ff40 	bl	800d142 <USBD_Start>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d001      	beq.n	800e2cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e2c8:	f7f5 fe46 	bl	8003f58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e2cc:	bf00      	nop
 800e2ce:	bd80      	pop	{r7, pc}
 800e2d0:	20000150 	.word	0x20000150
 800e2d4:	200005c8 	.word	0x200005c8
 800e2d8:	20000038 	.word	0x20000038
 800e2dc:	2000013c 	.word	0x2000013c

0800e2e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	4905      	ldr	r1, [pc, #20]	; (800e2fc <CDC_Init_FS+0x1c>)
 800e2e8:	4805      	ldr	r0, [pc, #20]	; (800e300 <CDC_Init_FS+0x20>)
 800e2ea:	f7fe fe42 	bl	800cf72 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e2ee:	4905      	ldr	r1, [pc, #20]	; (800e304 <CDC_Init_FS+0x24>)
 800e2f0:	4803      	ldr	r0, [pc, #12]	; (800e300 <CDC_Init_FS+0x20>)
 800e2f2:	f7fe fe5c 	bl	800cfae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e2f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	20000994 	.word	0x20000994
 800e300:	200005c8 	.word	0x200005c8
 800e304:	20000898 	.word	0x20000898

0800e308 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e308:	b480      	push	{r7}
 800e30a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e30c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e30e:	4618      	mov	r0, r3
 800e310:	46bd      	mov	sp, r7
 800e312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e316:	4770      	bx	lr

0800e318 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e318:	b480      	push	{r7}
 800e31a:	b083      	sub	sp, #12
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	4603      	mov	r3, r0
 800e320:	6039      	str	r1, [r7, #0]
 800e322:	71fb      	strb	r3, [r7, #7]
 800e324:	4613      	mov	r3, r2
 800e326:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e328:	79fb      	ldrb	r3, [r7, #7]
 800e32a:	2b23      	cmp	r3, #35	; 0x23
 800e32c:	d84a      	bhi.n	800e3c4 <CDC_Control_FS+0xac>
 800e32e:	a201      	add	r2, pc, #4	; (adr r2, 800e334 <CDC_Control_FS+0x1c>)
 800e330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e334:	0800e3c5 	.word	0x0800e3c5
 800e338:	0800e3c5 	.word	0x0800e3c5
 800e33c:	0800e3c5 	.word	0x0800e3c5
 800e340:	0800e3c5 	.word	0x0800e3c5
 800e344:	0800e3c5 	.word	0x0800e3c5
 800e348:	0800e3c5 	.word	0x0800e3c5
 800e34c:	0800e3c5 	.word	0x0800e3c5
 800e350:	0800e3c5 	.word	0x0800e3c5
 800e354:	0800e3c5 	.word	0x0800e3c5
 800e358:	0800e3c5 	.word	0x0800e3c5
 800e35c:	0800e3c5 	.word	0x0800e3c5
 800e360:	0800e3c5 	.word	0x0800e3c5
 800e364:	0800e3c5 	.word	0x0800e3c5
 800e368:	0800e3c5 	.word	0x0800e3c5
 800e36c:	0800e3c5 	.word	0x0800e3c5
 800e370:	0800e3c5 	.word	0x0800e3c5
 800e374:	0800e3c5 	.word	0x0800e3c5
 800e378:	0800e3c5 	.word	0x0800e3c5
 800e37c:	0800e3c5 	.word	0x0800e3c5
 800e380:	0800e3c5 	.word	0x0800e3c5
 800e384:	0800e3c5 	.word	0x0800e3c5
 800e388:	0800e3c5 	.word	0x0800e3c5
 800e38c:	0800e3c5 	.word	0x0800e3c5
 800e390:	0800e3c5 	.word	0x0800e3c5
 800e394:	0800e3c5 	.word	0x0800e3c5
 800e398:	0800e3c5 	.word	0x0800e3c5
 800e39c:	0800e3c5 	.word	0x0800e3c5
 800e3a0:	0800e3c5 	.word	0x0800e3c5
 800e3a4:	0800e3c5 	.word	0x0800e3c5
 800e3a8:	0800e3c5 	.word	0x0800e3c5
 800e3ac:	0800e3c5 	.word	0x0800e3c5
 800e3b0:	0800e3c5 	.word	0x0800e3c5
 800e3b4:	0800e3c5 	.word	0x0800e3c5
 800e3b8:	0800e3c5 	.word	0x0800e3c5
 800e3bc:	0800e3c5 	.word	0x0800e3c5
 800e3c0:	0800e3c5 	.word	0x0800e3c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e3c4:	bf00      	nop
  }

  return (USBD_OK);
 800e3c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	370c      	adds	r7, #12
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr

0800e3d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b082      	sub	sp, #8
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e3de:	6879      	ldr	r1, [r7, #4]
 800e3e0:	4808      	ldr	r0, [pc, #32]	; (800e404 <CDC_Receive_FS+0x30>)
 800e3e2:	f7fe fde4 	bl	800cfae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e3e6:	4807      	ldr	r0, [pc, #28]	; (800e404 <CDC_Receive_FS+0x30>)
 800e3e8:	f7fe fe2a 	bl	800d040 <USBD_CDC_ReceivePacket>
  USB_CDC_RX_Interrupt(Buf, *Len);
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f7f5 fd9a 	bl	8003f2c <USB_CDC_RX_Interrupt>
  return (USBD_OK);
 800e3f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3708      	adds	r7, #8
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	200005c8 	.word	0x200005c8

0800e408 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b084      	sub	sp, #16
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	460b      	mov	r3, r1
 800e412:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e414:	2300      	movs	r3, #0
 800e416:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e418:	4b0d      	ldr	r3, [pc, #52]	; (800e450 <CDC_Transmit_FS+0x48>)
 800e41a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e41e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e426:	2b00      	cmp	r3, #0
 800e428:	d001      	beq.n	800e42e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e42a:	2301      	movs	r3, #1
 800e42c:	e00b      	b.n	800e446 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e42e:	887b      	ldrh	r3, [r7, #2]
 800e430:	461a      	mov	r2, r3
 800e432:	6879      	ldr	r1, [r7, #4]
 800e434:	4806      	ldr	r0, [pc, #24]	; (800e450 <CDC_Transmit_FS+0x48>)
 800e436:	f7fe fd9c 	bl	800cf72 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e43a:	4805      	ldr	r0, [pc, #20]	; (800e450 <CDC_Transmit_FS+0x48>)
 800e43c:	f7fe fdd0 	bl	800cfe0 <USBD_CDC_TransmitPacket>
 800e440:	4603      	mov	r3, r0
 800e442:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e444:	7bfb      	ldrb	r3, [r7, #15]
}
 800e446:	4618      	mov	r0, r3
 800e448:	3710      	adds	r7, #16
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	200005c8 	.word	0x200005c8

0800e454 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e454:	b480      	push	{r7}
 800e456:	b087      	sub	sp, #28
 800e458:	af00      	add	r7, sp, #0
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	60b9      	str	r1, [r7, #8]
 800e45e:	4613      	mov	r3, r2
 800e460:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e462:	2300      	movs	r3, #0
 800e464:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e466:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	371c      	adds	r7, #28
 800e46e:	46bd      	mov	sp, r7
 800e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e474:	4770      	bx	lr
	...

0800e478 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e478:	b480      	push	{r7}
 800e47a:	b083      	sub	sp, #12
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	4603      	mov	r3, r0
 800e480:	6039      	str	r1, [r7, #0]
 800e482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	2212      	movs	r2, #18
 800e488:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e48a:	4b03      	ldr	r3, [pc, #12]	; (800e498 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	370c      	adds	r7, #12
 800e490:	46bd      	mov	sp, r7
 800e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e496:	4770      	bx	lr
 800e498:	2000016c 	.word	0x2000016c

0800e49c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e49c:	b480      	push	{r7}
 800e49e:	b083      	sub	sp, #12
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	6039      	str	r1, [r7, #0]
 800e4a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	2204      	movs	r2, #4
 800e4ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e4ae:	4b03      	ldr	r3, [pc, #12]	; (800e4bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	370c      	adds	r7, #12
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr
 800e4bc:	20000180 	.word	0x20000180

0800e4c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	6039      	str	r1, [r7, #0]
 800e4ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e4cc:	79fb      	ldrb	r3, [r7, #7]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d105      	bne.n	800e4de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e4d2:	683a      	ldr	r2, [r7, #0]
 800e4d4:	4907      	ldr	r1, [pc, #28]	; (800e4f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800e4d6:	4808      	ldr	r0, [pc, #32]	; (800e4f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800e4d8:	f7ff fdf1 	bl	800e0be <USBD_GetString>
 800e4dc:	e004      	b.n	800e4e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e4de:	683a      	ldr	r2, [r7, #0]
 800e4e0:	4904      	ldr	r1, [pc, #16]	; (800e4f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800e4e2:	4805      	ldr	r0, [pc, #20]	; (800e4f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800e4e4:	f7ff fdeb 	bl	800e0be <USBD_GetString>
  }
  return USBD_StrDesc;
 800e4e8:	4b02      	ldr	r3, [pc, #8]	; (800e4f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	3708      	adds	r7, #8
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}
 800e4f2:	bf00      	nop
 800e4f4:	20000a90 	.word	0x20000a90
 800e4f8:	0800f048 	.word	0x0800f048

0800e4fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b082      	sub	sp, #8
 800e500:	af00      	add	r7, sp, #0
 800e502:	4603      	mov	r3, r0
 800e504:	6039      	str	r1, [r7, #0]
 800e506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e508:	683a      	ldr	r2, [r7, #0]
 800e50a:	4904      	ldr	r1, [pc, #16]	; (800e51c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e50c:	4804      	ldr	r0, [pc, #16]	; (800e520 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e50e:	f7ff fdd6 	bl	800e0be <USBD_GetString>
  return USBD_StrDesc;
 800e512:	4b02      	ldr	r3, [pc, #8]	; (800e51c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e514:	4618      	mov	r0, r3
 800e516:	3708      	adds	r7, #8
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	20000a90 	.word	0x20000a90
 800e520:	0800f060 	.word	0x0800f060

0800e524 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b082      	sub	sp, #8
 800e528:	af00      	add	r7, sp, #0
 800e52a:	4603      	mov	r3, r0
 800e52c:	6039      	str	r1, [r7, #0]
 800e52e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	221a      	movs	r2, #26
 800e534:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e536:	f000 f843 	bl	800e5c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e53a:	4b02      	ldr	r3, [pc, #8]	; (800e544 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	3708      	adds	r7, #8
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}
 800e544:	20000184 	.word	0x20000184

0800e548 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b082      	sub	sp, #8
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	4603      	mov	r3, r0
 800e550:	6039      	str	r1, [r7, #0]
 800e552:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e554:	79fb      	ldrb	r3, [r7, #7]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d105      	bne.n	800e566 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e55a:	683a      	ldr	r2, [r7, #0]
 800e55c:	4907      	ldr	r1, [pc, #28]	; (800e57c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e55e:	4808      	ldr	r0, [pc, #32]	; (800e580 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e560:	f7ff fdad 	bl	800e0be <USBD_GetString>
 800e564:	e004      	b.n	800e570 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e566:	683a      	ldr	r2, [r7, #0]
 800e568:	4904      	ldr	r1, [pc, #16]	; (800e57c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e56a:	4805      	ldr	r0, [pc, #20]	; (800e580 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e56c:	f7ff fda7 	bl	800e0be <USBD_GetString>
  }
  return USBD_StrDesc;
 800e570:	4b02      	ldr	r3, [pc, #8]	; (800e57c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e572:	4618      	mov	r0, r3
 800e574:	3708      	adds	r7, #8
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	20000a90 	.word	0x20000a90
 800e580:	0800f074 	.word	0x0800f074

0800e584 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b082      	sub	sp, #8
 800e588:	af00      	add	r7, sp, #0
 800e58a:	4603      	mov	r3, r0
 800e58c:	6039      	str	r1, [r7, #0]
 800e58e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e590:	79fb      	ldrb	r3, [r7, #7]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d105      	bne.n	800e5a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e596:	683a      	ldr	r2, [r7, #0]
 800e598:	4907      	ldr	r1, [pc, #28]	; (800e5b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e59a:	4808      	ldr	r0, [pc, #32]	; (800e5bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e59c:	f7ff fd8f 	bl	800e0be <USBD_GetString>
 800e5a0:	e004      	b.n	800e5ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e5a2:	683a      	ldr	r2, [r7, #0]
 800e5a4:	4904      	ldr	r1, [pc, #16]	; (800e5b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e5a6:	4805      	ldr	r0, [pc, #20]	; (800e5bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e5a8:	f7ff fd89 	bl	800e0be <USBD_GetString>
  }
  return USBD_StrDesc;
 800e5ac:	4b02      	ldr	r3, [pc, #8]	; (800e5b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3708      	adds	r7, #8
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	20000a90 	.word	0x20000a90
 800e5bc:	0800f080 	.word	0x0800f080

0800e5c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b084      	sub	sp, #16
 800e5c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e5c6:	4b0f      	ldr	r3, [pc, #60]	; (800e604 <Get_SerialNum+0x44>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e5cc:	4b0e      	ldr	r3, [pc, #56]	; (800e608 <Get_SerialNum+0x48>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e5d2:	4b0e      	ldr	r3, [pc, #56]	; (800e60c <Get_SerialNum+0x4c>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e5d8:	68fa      	ldr	r2, [r7, #12]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	4413      	add	r3, r2
 800e5de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d009      	beq.n	800e5fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e5e6:	2208      	movs	r2, #8
 800e5e8:	4909      	ldr	r1, [pc, #36]	; (800e610 <Get_SerialNum+0x50>)
 800e5ea:	68f8      	ldr	r0, [r7, #12]
 800e5ec:	f000 f814 	bl	800e618 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e5f0:	2204      	movs	r2, #4
 800e5f2:	4908      	ldr	r1, [pc, #32]	; (800e614 <Get_SerialNum+0x54>)
 800e5f4:	68b8      	ldr	r0, [r7, #8]
 800e5f6:	f000 f80f 	bl	800e618 <IntToUnicode>
  }
}
 800e5fa:	bf00      	nop
 800e5fc:	3710      	adds	r7, #16
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop
 800e604:	1fff7590 	.word	0x1fff7590
 800e608:	1fff7594 	.word	0x1fff7594
 800e60c:	1fff7598 	.word	0x1fff7598
 800e610:	20000186 	.word	0x20000186
 800e614:	20000196 	.word	0x20000196

0800e618 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e618:	b480      	push	{r7}
 800e61a:	b087      	sub	sp, #28
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	60f8      	str	r0, [r7, #12]
 800e620:	60b9      	str	r1, [r7, #8]
 800e622:	4613      	mov	r3, r2
 800e624:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e626:	2300      	movs	r3, #0
 800e628:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e62a:	2300      	movs	r3, #0
 800e62c:	75fb      	strb	r3, [r7, #23]
 800e62e:	e027      	b.n	800e680 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	0f1b      	lsrs	r3, r3, #28
 800e634:	2b09      	cmp	r3, #9
 800e636:	d80b      	bhi.n	800e650 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	0f1b      	lsrs	r3, r3, #28
 800e63c:	b2da      	uxtb	r2, r3
 800e63e:	7dfb      	ldrb	r3, [r7, #23]
 800e640:	005b      	lsls	r3, r3, #1
 800e642:	4619      	mov	r1, r3
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	440b      	add	r3, r1
 800e648:	3230      	adds	r2, #48	; 0x30
 800e64a:	b2d2      	uxtb	r2, r2
 800e64c:	701a      	strb	r2, [r3, #0]
 800e64e:	e00a      	b.n	800e666 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	0f1b      	lsrs	r3, r3, #28
 800e654:	b2da      	uxtb	r2, r3
 800e656:	7dfb      	ldrb	r3, [r7, #23]
 800e658:	005b      	lsls	r3, r3, #1
 800e65a:	4619      	mov	r1, r3
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	440b      	add	r3, r1
 800e660:	3237      	adds	r2, #55	; 0x37
 800e662:	b2d2      	uxtb	r2, r2
 800e664:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	011b      	lsls	r3, r3, #4
 800e66a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e66c:	7dfb      	ldrb	r3, [r7, #23]
 800e66e:	005b      	lsls	r3, r3, #1
 800e670:	3301      	adds	r3, #1
 800e672:	68ba      	ldr	r2, [r7, #8]
 800e674:	4413      	add	r3, r2
 800e676:	2200      	movs	r2, #0
 800e678:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e67a:	7dfb      	ldrb	r3, [r7, #23]
 800e67c:	3301      	adds	r3, #1
 800e67e:	75fb      	strb	r3, [r7, #23]
 800e680:	7dfa      	ldrb	r2, [r7, #23]
 800e682:	79fb      	ldrb	r3, [r7, #7]
 800e684:	429a      	cmp	r2, r3
 800e686:	d3d3      	bcc.n	800e630 <IntToUnicode+0x18>
  }
}
 800e688:	bf00      	nop
 800e68a:	bf00      	nop
 800e68c:	371c      	adds	r7, #28
 800e68e:	46bd      	mov	sp, r7
 800e690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e694:	4770      	bx	lr
	...

0800e698 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b09c      	sub	sp, #112	; 0x70
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e6a0:	f107 0310 	add.w	r3, r7, #16
 800e6a4:	2260      	movs	r2, #96	; 0x60
 800e6a6:	2100      	movs	r1, #0
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f000 fbbf 	bl	800ee2c <memset>
  if(pcdHandle->Instance==USB)
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	4a15      	ldr	r2, [pc, #84]	; (800e708 <HAL_PCD_MspInit+0x70>)
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d122      	bne.n	800e6fe <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e6b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e6bc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e6c2:	f107 0310 	add.w	r3, r7, #16
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7fa fae6 	bl	8008c98 <HAL_RCCEx_PeriphCLKConfig>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d001      	beq.n	800e6d6 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800e6d2:	f7f5 fc41 	bl	8003f58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e6d6:	4b0d      	ldr	r3, [pc, #52]	; (800e70c <HAL_PCD_MspInit+0x74>)
 800e6d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6da:	4a0c      	ldr	r2, [pc, #48]	; (800e70c <HAL_PCD_MspInit+0x74>)
 800e6dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e6e0:	6593      	str	r3, [r2, #88]	; 0x58
 800e6e2:	4b0a      	ldr	r3, [pc, #40]	; (800e70c <HAL_PCD_MspInit+0x74>)
 800e6e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e6ea:	60fb      	str	r3, [r7, #12]
 800e6ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	2100      	movs	r1, #0
 800e6f2:	2043      	movs	r0, #67	; 0x43
 800e6f4:	f7f6 feb7 	bl	8005466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800e6f8:	2043      	movs	r0, #67	; 0x43
 800e6fa:	f7f6 fed0 	bl	800549e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e6fe:	bf00      	nop
 800e700:	3770      	adds	r7, #112	; 0x70
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	40006800 	.word	0x40006800
 800e70c:	40021000 	.word	0x40021000

0800e710 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b082      	sub	sp, #8
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800e724:	4619      	mov	r1, r3
 800e726:	4610      	mov	r0, r2
 800e728:	f7fe fd56 	bl	800d1d8 <USBD_LL_SetupStage>
}
 800e72c:	bf00      	nop
 800e72e:	3708      	adds	r7, #8
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b082      	sub	sp, #8
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	460b      	mov	r3, r1
 800e73e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800e746:	78fa      	ldrb	r2, [r7, #3]
 800e748:	6879      	ldr	r1, [r7, #4]
 800e74a:	4613      	mov	r3, r2
 800e74c:	009b      	lsls	r3, r3, #2
 800e74e:	4413      	add	r3, r2
 800e750:	00db      	lsls	r3, r3, #3
 800e752:	440b      	add	r3, r1
 800e754:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800e758:	681a      	ldr	r2, [r3, #0]
 800e75a:	78fb      	ldrb	r3, [r7, #3]
 800e75c:	4619      	mov	r1, r3
 800e75e:	f7fe fd90 	bl	800d282 <USBD_LL_DataOutStage>
}
 800e762:	bf00      	nop
 800e764:	3708      	adds	r7, #8
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}

0800e76a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e76a:	b580      	push	{r7, lr}
 800e76c:	b082      	sub	sp, #8
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
 800e772:	460b      	mov	r3, r1
 800e774:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800e77c:	78fa      	ldrb	r2, [r7, #3]
 800e77e:	6879      	ldr	r1, [r7, #4]
 800e780:	4613      	mov	r3, r2
 800e782:	009b      	lsls	r3, r3, #2
 800e784:	4413      	add	r3, r2
 800e786:	00db      	lsls	r3, r3, #3
 800e788:	440b      	add	r3, r1
 800e78a:	3340      	adds	r3, #64	; 0x40
 800e78c:	681a      	ldr	r2, [r3, #0]
 800e78e:	78fb      	ldrb	r3, [r7, #3]
 800e790:	4619      	mov	r1, r3
 800e792:	f7fe fdd9 	bl	800d348 <USBD_LL_DataInStage>
}
 800e796:	bf00      	nop
 800e798:	3708      	adds	r7, #8
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}

0800e79e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e79e:	b580      	push	{r7, lr}
 800e7a0:	b082      	sub	sp, #8
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7fe feed 	bl	800d58c <USBD_LL_SOF>
}
 800e7b2:	bf00      	nop
 800e7b4:	3708      	adds	r7, #8
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}

0800e7ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7ba:	b580      	push	{r7, lr}
 800e7bc:	b084      	sub	sp, #16
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	689b      	ldr	r3, [r3, #8]
 800e7ca:	2b02      	cmp	r3, #2
 800e7cc:	d001      	beq.n	800e7d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e7ce:	f7f5 fbc3 	bl	8003f58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e7d8:	7bfa      	ldrb	r2, [r7, #15]
 800e7da:	4611      	mov	r1, r2
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f7fe fe97 	bl	800d510 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7fe fe43 	bl	800d474 <USBD_LL_Reset>
}
 800e7ee:	bf00      	nop
 800e7f0:	3710      	adds	r7, #16
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}
	...

0800e7f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b082      	sub	sp, #8
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e806:	4618      	mov	r0, r3
 800e808:	f7fe fe92 	bl	800d530 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	699b      	ldr	r3, [r3, #24]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d005      	beq.n	800e820 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e814:	4b04      	ldr	r3, [pc, #16]	; (800e828 <HAL_PCD_SuspendCallback+0x30>)
 800e816:	691b      	ldr	r3, [r3, #16]
 800e818:	4a03      	ldr	r2, [pc, #12]	; (800e828 <HAL_PCD_SuspendCallback+0x30>)
 800e81a:	f043 0306 	orr.w	r3, r3, #6
 800e81e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e820:	bf00      	nop
 800e822:	3708      	adds	r7, #8
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}
 800e828:	e000ed00 	.word	0xe000ed00

0800e82c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	699b      	ldr	r3, [r3, #24]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d007      	beq.n	800e84c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e83c:	4b08      	ldr	r3, [pc, #32]	; (800e860 <HAL_PCD_ResumeCallback+0x34>)
 800e83e:	691b      	ldr	r3, [r3, #16]
 800e840:	4a07      	ldr	r2, [pc, #28]	; (800e860 <HAL_PCD_ResumeCallback+0x34>)
 800e842:	f023 0306 	bic.w	r3, r3, #6
 800e846:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e848:	f000 fa80 	bl	800ed4c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e852:	4618      	mov	r0, r3
 800e854:	f7fe fe82 	bl	800d55c <USBD_LL_Resume>
}
 800e858:	bf00      	nop
 800e85a:	3708      	adds	r7, #8
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}
 800e860:	e000ed00 	.word	0xe000ed00

0800e864 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b082      	sub	sp, #8
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800e86c:	f7f9 fbf8 	bl	8008060 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800e870:	4a2b      	ldr	r2, [pc, #172]	; (800e920 <USBD_LL_Init+0xbc>)
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	4a29      	ldr	r2, [pc, #164]	; (800e920 <USBD_LL_Init+0xbc>)
 800e87c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800e880:	4b27      	ldr	r3, [pc, #156]	; (800e920 <USBD_LL_Init+0xbc>)
 800e882:	4a28      	ldr	r2, [pc, #160]	; (800e924 <USBD_LL_Init+0xc0>)
 800e884:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e886:	4b26      	ldr	r3, [pc, #152]	; (800e920 <USBD_LL_Init+0xbc>)
 800e888:	2208      	movs	r2, #8
 800e88a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e88c:	4b24      	ldr	r3, [pc, #144]	; (800e920 <USBD_LL_Init+0xbc>)
 800e88e:	2202      	movs	r2, #2
 800e890:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e892:	4b23      	ldr	r3, [pc, #140]	; (800e920 <USBD_LL_Init+0xbc>)
 800e894:	2202      	movs	r2, #2
 800e896:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e898:	4b21      	ldr	r3, [pc, #132]	; (800e920 <USBD_LL_Init+0xbc>)
 800e89a:	2200      	movs	r2, #0
 800e89c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e89e:	4b20      	ldr	r3, [pc, #128]	; (800e920 <USBD_LL_Init+0xbc>)
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e8a4:	4b1e      	ldr	r3, [pc, #120]	; (800e920 <USBD_LL_Init+0xbc>)
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e8aa:	4b1d      	ldr	r3, [pc, #116]	; (800e920 <USBD_LL_Init+0xbc>)
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e8b0:	481b      	ldr	r0, [pc, #108]	; (800e920 <USBD_LL_Init+0xbc>)
 800e8b2:	f7f7 fdd9 	bl	8006468 <HAL_PCD_Init>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d001      	beq.n	800e8c0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800e8bc:	f7f5 fb4c 	bl	8003f58 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e8c6:	2318      	movs	r3, #24
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	2100      	movs	r1, #0
 800e8cc:	f7f9 fae9 	bl	8007ea2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e8d6:	2358      	movs	r3, #88	; 0x58
 800e8d8:	2200      	movs	r2, #0
 800e8da:	2180      	movs	r1, #128	; 0x80
 800e8dc:	f7f9 fae1 	bl	8007ea2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e8e6:	23c0      	movs	r3, #192	; 0xc0
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	2181      	movs	r1, #129	; 0x81
 800e8ec:	f7f9 fad9 	bl	8007ea2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e8f6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	2101      	movs	r1, #1
 800e8fe:	f7f9 fad0 	bl	8007ea2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e908:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e90c:	2200      	movs	r2, #0
 800e90e:	2182      	movs	r1, #130	; 0x82
 800e910:	f7f9 fac7 	bl	8007ea2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e914:	2300      	movs	r3, #0
}
 800e916:	4618      	mov	r0, r3
 800e918:	3708      	adds	r7, #8
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	20000c90 	.word	0x20000c90
 800e924:	40006800 	.word	0x40006800

0800e928 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b084      	sub	sp, #16
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e930:	2300      	movs	r3, #0
 800e932:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e934:	2300      	movs	r3, #0
 800e936:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e93e:	4618      	mov	r0, r3
 800e940:	f7f7 fea9 	bl	8006696 <HAL_PCD_Start>
 800e944:	4603      	mov	r3, r0
 800e946:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e948:	7bbb      	ldrb	r3, [r7, #14]
 800e94a:	2b03      	cmp	r3, #3
 800e94c:	d816      	bhi.n	800e97c <USBD_LL_Start+0x54>
 800e94e:	a201      	add	r2, pc, #4	; (adr r2, 800e954 <USBD_LL_Start+0x2c>)
 800e950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e954:	0800e965 	.word	0x0800e965
 800e958:	0800e96b 	.word	0x0800e96b
 800e95c:	0800e971 	.word	0x0800e971
 800e960:	0800e977 	.word	0x0800e977
    case HAL_OK :
      usb_status = USBD_OK;
 800e964:	2300      	movs	r3, #0
 800e966:	73fb      	strb	r3, [r7, #15]
    break;
 800e968:	e00b      	b.n	800e982 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e96a:	2303      	movs	r3, #3
 800e96c:	73fb      	strb	r3, [r7, #15]
    break;
 800e96e:	e008      	b.n	800e982 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e970:	2301      	movs	r3, #1
 800e972:	73fb      	strb	r3, [r7, #15]
    break;
 800e974:	e005      	b.n	800e982 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e976:	2303      	movs	r3, #3
 800e978:	73fb      	strb	r3, [r7, #15]
    break;
 800e97a:	e002      	b.n	800e982 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800e97c:	2303      	movs	r3, #3
 800e97e:	73fb      	strb	r3, [r7, #15]
    break;
 800e980:	bf00      	nop
  }
  return usb_status;
 800e982:	7bfb      	ldrb	r3, [r7, #15]
}
 800e984:	4618      	mov	r0, r3
 800e986:	3710      	adds	r7, #16
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}

0800e98c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	4608      	mov	r0, r1
 800e996:	4611      	mov	r1, r2
 800e998:	461a      	mov	r2, r3
 800e99a:	4603      	mov	r3, r0
 800e99c:	70fb      	strb	r3, [r7, #3]
 800e99e:	460b      	mov	r3, r1
 800e9a0:	70bb      	strb	r3, [r7, #2]
 800e9a2:	4613      	mov	r3, r2
 800e9a4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e9b4:	78bb      	ldrb	r3, [r7, #2]
 800e9b6:	883a      	ldrh	r2, [r7, #0]
 800e9b8:	78f9      	ldrb	r1, [r7, #3]
 800e9ba:	f7f7 ffda 	bl	8006972 <HAL_PCD_EP_Open>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e9c2:	7bbb      	ldrb	r3, [r7, #14]
 800e9c4:	2b03      	cmp	r3, #3
 800e9c6:	d817      	bhi.n	800e9f8 <USBD_LL_OpenEP+0x6c>
 800e9c8:	a201      	add	r2, pc, #4	; (adr r2, 800e9d0 <USBD_LL_OpenEP+0x44>)
 800e9ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9ce:	bf00      	nop
 800e9d0:	0800e9e1 	.word	0x0800e9e1
 800e9d4:	0800e9e7 	.word	0x0800e9e7
 800e9d8:	0800e9ed 	.word	0x0800e9ed
 800e9dc:	0800e9f3 	.word	0x0800e9f3
    case HAL_OK :
      usb_status = USBD_OK;
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	73fb      	strb	r3, [r7, #15]
    break;
 800e9e4:	e00b      	b.n	800e9fe <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e9e6:	2303      	movs	r3, #3
 800e9e8:	73fb      	strb	r3, [r7, #15]
    break;
 800e9ea:	e008      	b.n	800e9fe <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	73fb      	strb	r3, [r7, #15]
    break;
 800e9f0:	e005      	b.n	800e9fe <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e9f2:	2303      	movs	r3, #3
 800e9f4:	73fb      	strb	r3, [r7, #15]
    break;
 800e9f6:	e002      	b.n	800e9fe <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800e9f8:	2303      	movs	r3, #3
 800e9fa:	73fb      	strb	r3, [r7, #15]
    break;
 800e9fc:	bf00      	nop
  }
  return usb_status;
 800e9fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3710      	adds	r7, #16
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b084      	sub	sp, #16
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	460b      	mov	r3, r1
 800ea12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea14:	2300      	movs	r3, #0
 800ea16:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ea22:	78fa      	ldrb	r2, [r7, #3]
 800ea24:	4611      	mov	r1, r2
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7f8 f80b 	bl	8006a42 <HAL_PCD_EP_Close>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ea30:	7bbb      	ldrb	r3, [r7, #14]
 800ea32:	2b03      	cmp	r3, #3
 800ea34:	d816      	bhi.n	800ea64 <USBD_LL_CloseEP+0x5c>
 800ea36:	a201      	add	r2, pc, #4	; (adr r2, 800ea3c <USBD_LL_CloseEP+0x34>)
 800ea38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea3c:	0800ea4d 	.word	0x0800ea4d
 800ea40:	0800ea53 	.word	0x0800ea53
 800ea44:	0800ea59 	.word	0x0800ea59
 800ea48:	0800ea5f 	.word	0x0800ea5f
    case HAL_OK :
      usb_status = USBD_OK;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ea50:	e00b      	b.n	800ea6a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ea52:	2303      	movs	r3, #3
 800ea54:	73fb      	strb	r3, [r7, #15]
    break;
 800ea56:	e008      	b.n	800ea6a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ea58:	2301      	movs	r3, #1
 800ea5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ea5c:	e005      	b.n	800ea6a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ea5e:	2303      	movs	r3, #3
 800ea60:	73fb      	strb	r3, [r7, #15]
    break;
 800ea62:	e002      	b.n	800ea6a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ea64:	2303      	movs	r3, #3
 800ea66:	73fb      	strb	r3, [r7, #15]
    break;
 800ea68:	bf00      	nop
  }
  return usb_status;
 800ea6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3710      	adds	r7, #16
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b084      	sub	sp, #16
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea80:	2300      	movs	r3, #0
 800ea82:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea84:	2300      	movs	r3, #0
 800ea86:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ea8e:	78fa      	ldrb	r2, [r7, #3]
 800ea90:	4611      	mov	r1, r2
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7f8 f8b9 	bl	8006c0a <HAL_PCD_EP_SetStall>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ea9c:	7bbb      	ldrb	r3, [r7, #14]
 800ea9e:	2b03      	cmp	r3, #3
 800eaa0:	d816      	bhi.n	800ead0 <USBD_LL_StallEP+0x5c>
 800eaa2:	a201      	add	r2, pc, #4	; (adr r2, 800eaa8 <USBD_LL_StallEP+0x34>)
 800eaa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaa8:	0800eab9 	.word	0x0800eab9
 800eaac:	0800eabf 	.word	0x0800eabf
 800eab0:	0800eac5 	.word	0x0800eac5
 800eab4:	0800eacb 	.word	0x0800eacb
    case HAL_OK :
      usb_status = USBD_OK;
 800eab8:	2300      	movs	r3, #0
 800eaba:	73fb      	strb	r3, [r7, #15]
    break;
 800eabc:	e00b      	b.n	800ead6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eabe:	2303      	movs	r3, #3
 800eac0:	73fb      	strb	r3, [r7, #15]
    break;
 800eac2:	e008      	b.n	800ead6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eac4:	2301      	movs	r3, #1
 800eac6:	73fb      	strb	r3, [r7, #15]
    break;
 800eac8:	e005      	b.n	800ead6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eaca:	2303      	movs	r3, #3
 800eacc:	73fb      	strb	r3, [r7, #15]
    break;
 800eace:	e002      	b.n	800ead6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ead0:	2303      	movs	r3, #3
 800ead2:	73fb      	strb	r3, [r7, #15]
    break;
 800ead4:	bf00      	nop
  }
  return usb_status;
 800ead6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3710      	adds	r7, #16
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b084      	sub	sp, #16
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	460b      	mov	r3, r1
 800eaea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaec:	2300      	movs	r3, #0
 800eaee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eafa:	78fa      	ldrb	r2, [r7, #3]
 800eafc:	4611      	mov	r1, r2
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7f8 f8e5 	bl	8006cce <HAL_PCD_EP_ClrStall>
 800eb04:	4603      	mov	r3, r0
 800eb06:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800eb08:	7bbb      	ldrb	r3, [r7, #14]
 800eb0a:	2b03      	cmp	r3, #3
 800eb0c:	d816      	bhi.n	800eb3c <USBD_LL_ClearStallEP+0x5c>
 800eb0e:	a201      	add	r2, pc, #4	; (adr r2, 800eb14 <USBD_LL_ClearStallEP+0x34>)
 800eb10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb14:	0800eb25 	.word	0x0800eb25
 800eb18:	0800eb2b 	.word	0x0800eb2b
 800eb1c:	0800eb31 	.word	0x0800eb31
 800eb20:	0800eb37 	.word	0x0800eb37
    case HAL_OK :
      usb_status = USBD_OK;
 800eb24:	2300      	movs	r3, #0
 800eb26:	73fb      	strb	r3, [r7, #15]
    break;
 800eb28:	e00b      	b.n	800eb42 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eb2a:	2303      	movs	r3, #3
 800eb2c:	73fb      	strb	r3, [r7, #15]
    break;
 800eb2e:	e008      	b.n	800eb42 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eb30:	2301      	movs	r3, #1
 800eb32:	73fb      	strb	r3, [r7, #15]
    break;
 800eb34:	e005      	b.n	800eb42 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eb36:	2303      	movs	r3, #3
 800eb38:	73fb      	strb	r3, [r7, #15]
    break;
 800eb3a:	e002      	b.n	800eb42 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800eb3c:	2303      	movs	r3, #3
 800eb3e:	73fb      	strb	r3, [r7, #15]
    break;
 800eb40:	bf00      	nop
  }
  return usb_status;
 800eb42:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3710      	adds	r7, #16
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b085      	sub	sp, #20
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	460b      	mov	r3, r1
 800eb56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eb5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800eb60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	da0c      	bge.n	800eb82 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eb68:	78fb      	ldrb	r3, [r7, #3]
 800eb6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb6e:	68f9      	ldr	r1, [r7, #12]
 800eb70:	1c5a      	adds	r2, r3, #1
 800eb72:	4613      	mov	r3, r2
 800eb74:	009b      	lsls	r3, r3, #2
 800eb76:	4413      	add	r3, r2
 800eb78:	00db      	lsls	r3, r3, #3
 800eb7a:	440b      	add	r3, r1
 800eb7c:	3306      	adds	r3, #6
 800eb7e:	781b      	ldrb	r3, [r3, #0]
 800eb80:	e00b      	b.n	800eb9a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eb82:	78fb      	ldrb	r3, [r7, #3]
 800eb84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eb88:	68f9      	ldr	r1, [r7, #12]
 800eb8a:	4613      	mov	r3, r2
 800eb8c:	009b      	lsls	r3, r3, #2
 800eb8e:	4413      	add	r3, r2
 800eb90:	00db      	lsls	r3, r3, #3
 800eb92:	440b      	add	r3, r1
 800eb94:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800eb98:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3714      	adds	r7, #20
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba4:	4770      	bx	lr
	...

0800eba8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b084      	sub	sp, #16
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ebc2:	78fa      	ldrb	r2, [r7, #3]
 800ebc4:	4611      	mov	r1, r2
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7f7 feae 	bl	8006928 <HAL_PCD_SetAddress>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ebd0:	7bbb      	ldrb	r3, [r7, #14]
 800ebd2:	2b03      	cmp	r3, #3
 800ebd4:	d816      	bhi.n	800ec04 <USBD_LL_SetUSBAddress+0x5c>
 800ebd6:	a201      	add	r2, pc, #4	; (adr r2, 800ebdc <USBD_LL_SetUSBAddress+0x34>)
 800ebd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebdc:	0800ebed 	.word	0x0800ebed
 800ebe0:	0800ebf3 	.word	0x0800ebf3
 800ebe4:	0800ebf9 	.word	0x0800ebf9
 800ebe8:	0800ebff 	.word	0x0800ebff
    case HAL_OK :
      usb_status = USBD_OK;
 800ebec:	2300      	movs	r3, #0
 800ebee:	73fb      	strb	r3, [r7, #15]
    break;
 800ebf0:	e00b      	b.n	800ec0a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ebf2:	2303      	movs	r3, #3
 800ebf4:	73fb      	strb	r3, [r7, #15]
    break;
 800ebf6:	e008      	b.n	800ec0a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	73fb      	strb	r3, [r7, #15]
    break;
 800ebfc:	e005      	b.n	800ec0a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ebfe:	2303      	movs	r3, #3
 800ec00:	73fb      	strb	r3, [r7, #15]
    break;
 800ec02:	e002      	b.n	800ec0a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800ec04:	2303      	movs	r3, #3
 800ec06:	73fb      	strb	r3, [r7, #15]
    break;
 800ec08:	bf00      	nop
  }
  return usb_status;
 800ec0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3710      	adds	r7, #16
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b086      	sub	sp, #24
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	60f8      	str	r0, [r7, #12]
 800ec1c:	607a      	str	r2, [r7, #4]
 800ec1e:	603b      	str	r3, [r7, #0]
 800ec20:	460b      	mov	r3, r1
 800ec22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec24:	2300      	movs	r3, #0
 800ec26:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ec32:	7af9      	ldrb	r1, [r7, #11]
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	687a      	ldr	r2, [r7, #4]
 800ec38:	f7f7 ffa3 	bl	8006b82 <HAL_PCD_EP_Transmit>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ec40:	7dbb      	ldrb	r3, [r7, #22]
 800ec42:	2b03      	cmp	r3, #3
 800ec44:	d816      	bhi.n	800ec74 <USBD_LL_Transmit+0x60>
 800ec46:	a201      	add	r2, pc, #4	; (adr r2, 800ec4c <USBD_LL_Transmit+0x38>)
 800ec48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec4c:	0800ec5d 	.word	0x0800ec5d
 800ec50:	0800ec63 	.word	0x0800ec63
 800ec54:	0800ec69 	.word	0x0800ec69
 800ec58:	0800ec6f 	.word	0x0800ec6f
    case HAL_OK :
      usb_status = USBD_OK;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	75fb      	strb	r3, [r7, #23]
    break;
 800ec60:	e00b      	b.n	800ec7a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ec62:	2303      	movs	r3, #3
 800ec64:	75fb      	strb	r3, [r7, #23]
    break;
 800ec66:	e008      	b.n	800ec7a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ec68:	2301      	movs	r3, #1
 800ec6a:	75fb      	strb	r3, [r7, #23]
    break;
 800ec6c:	e005      	b.n	800ec7a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ec6e:	2303      	movs	r3, #3
 800ec70:	75fb      	strb	r3, [r7, #23]
    break;
 800ec72:	e002      	b.n	800ec7a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800ec74:	2303      	movs	r3, #3
 800ec76:	75fb      	strb	r3, [r7, #23]
    break;
 800ec78:	bf00      	nop
  }
  return usb_status;
 800ec7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3718      	adds	r7, #24
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}

0800ec84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b086      	sub	sp, #24
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	60f8      	str	r0, [r7, #12]
 800ec8c:	607a      	str	r2, [r7, #4]
 800ec8e:	603b      	str	r3, [r7, #0]
 800ec90:	460b      	mov	r3, r1
 800ec92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec94:	2300      	movs	r3, #0
 800ec96:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eca2:	7af9      	ldrb	r1, [r7, #11]
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	687a      	ldr	r2, [r7, #4]
 800eca8:	f7f7 ff15 	bl	8006ad6 <HAL_PCD_EP_Receive>
 800ecac:	4603      	mov	r3, r0
 800ecae:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ecb0:	7dbb      	ldrb	r3, [r7, #22]
 800ecb2:	2b03      	cmp	r3, #3
 800ecb4:	d816      	bhi.n	800ece4 <USBD_LL_PrepareReceive+0x60>
 800ecb6:	a201      	add	r2, pc, #4	; (adr r2, 800ecbc <USBD_LL_PrepareReceive+0x38>)
 800ecb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecbc:	0800eccd 	.word	0x0800eccd
 800ecc0:	0800ecd3 	.word	0x0800ecd3
 800ecc4:	0800ecd9 	.word	0x0800ecd9
 800ecc8:	0800ecdf 	.word	0x0800ecdf
    case HAL_OK :
      usb_status = USBD_OK;
 800eccc:	2300      	movs	r3, #0
 800ecce:	75fb      	strb	r3, [r7, #23]
    break;
 800ecd0:	e00b      	b.n	800ecea <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ecd2:	2303      	movs	r3, #3
 800ecd4:	75fb      	strb	r3, [r7, #23]
    break;
 800ecd6:	e008      	b.n	800ecea <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ecd8:	2301      	movs	r3, #1
 800ecda:	75fb      	strb	r3, [r7, #23]
    break;
 800ecdc:	e005      	b.n	800ecea <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ecde:	2303      	movs	r3, #3
 800ece0:	75fb      	strb	r3, [r7, #23]
    break;
 800ece2:	e002      	b.n	800ecea <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800ece4:	2303      	movs	r3, #3
 800ece6:	75fb      	strb	r3, [r7, #23]
    break;
 800ece8:	bf00      	nop
  }
  return usb_status;
 800ecea:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3718      	adds	r7, #24
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}

0800ecf4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b082      	sub	sp, #8
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	460b      	mov	r3, r1
 800ecfe:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed06:	78fa      	ldrb	r2, [r7, #3]
 800ed08:	4611      	mov	r1, r2
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7f7 ff21 	bl	8006b52 <HAL_PCD_EP_GetRxCount>
 800ed10:	4603      	mov	r3, r0
}
 800ed12:	4618      	mov	r0, r3
 800ed14:	3708      	adds	r7, #8
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
	...

0800ed1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b083      	sub	sp, #12
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ed24:	4b03      	ldr	r3, [pc, #12]	; (800ed34 <USBD_static_malloc+0x18>)
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	370c      	adds	r7, #12
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed30:	4770      	bx	lr
 800ed32:	bf00      	nop
 800ed34:	20000f8c 	.word	0x20000f8c

0800ed38 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ed38:	b480      	push	{r7}
 800ed3a:	b083      	sub	sp, #12
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]

}
 800ed40:	bf00      	nop
 800ed42:	370c      	adds	r7, #12
 800ed44:	46bd      	mov	sp, r7
 800ed46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4a:	4770      	bx	lr

0800ed4c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800ed50:	bf00      	nop
 800ed52:	46bd      	mov	sp, r7
 800ed54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed58:	4770      	bx	lr

0800ed5a <_Znwj>:
 800ed5a:	2801      	cmp	r0, #1
 800ed5c:	bf38      	it	cc
 800ed5e:	2001      	movcc	r0, #1
 800ed60:	b510      	push	{r4, lr}
 800ed62:	4604      	mov	r4, r0
 800ed64:	4620      	mov	r0, r4
 800ed66:	f000 f859 	bl	800ee1c <malloc>
 800ed6a:	b930      	cbnz	r0, 800ed7a <_Znwj+0x20>
 800ed6c:	f000 f81c 	bl	800eda8 <_ZSt15get_new_handlerv>
 800ed70:	b908      	cbnz	r0, 800ed76 <_Znwj+0x1c>
 800ed72:	f000 f821 	bl	800edb8 <abort>
 800ed76:	4780      	blx	r0
 800ed78:	e7f4      	b.n	800ed64 <_Znwj+0xa>
 800ed7a:	bd10      	pop	{r4, pc}

0800ed7c <__cxa_pure_virtual>:
 800ed7c:	b508      	push	{r3, lr}
 800ed7e:	f000 f80d 	bl	800ed9c <_ZSt9terminatev>

0800ed82 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ed82:	b508      	push	{r3, lr}
 800ed84:	4780      	blx	r0
 800ed86:	f000 f817 	bl	800edb8 <abort>
	...

0800ed8c <_ZSt13get_terminatev>:
 800ed8c:	4b02      	ldr	r3, [pc, #8]	; (800ed98 <_ZSt13get_terminatev+0xc>)
 800ed8e:	6818      	ldr	r0, [r3, #0]
 800ed90:	f3bf 8f5b 	dmb	ish
 800ed94:	4770      	bx	lr
 800ed96:	bf00      	nop
 800ed98:	200001a0 	.word	0x200001a0

0800ed9c <_ZSt9terminatev>:
 800ed9c:	b508      	push	{r3, lr}
 800ed9e:	f7ff fff5 	bl	800ed8c <_ZSt13get_terminatev>
 800eda2:	f7ff ffee 	bl	800ed82 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800eda8 <_ZSt15get_new_handlerv>:
 800eda8:	4b02      	ldr	r3, [pc, #8]	; (800edb4 <_ZSt15get_new_handlerv+0xc>)
 800edaa:	6818      	ldr	r0, [r3, #0]
 800edac:	f3bf 8f5b 	dmb	ish
 800edb0:	4770      	bx	lr
 800edb2:	bf00      	nop
 800edb4:	200011ac 	.word	0x200011ac

0800edb8 <abort>:
 800edb8:	b508      	push	{r3, lr}
 800edba:	2006      	movs	r0, #6
 800edbc:	f000 f90a 	bl	800efd4 <raise>
 800edc0:	2001      	movs	r0, #1
 800edc2:	f7f5 fa07 	bl	80041d4 <_exit>
	...

0800edc8 <__errno>:
 800edc8:	4b01      	ldr	r3, [pc, #4]	; (800edd0 <__errno+0x8>)
 800edca:	6818      	ldr	r0, [r3, #0]
 800edcc:	4770      	bx	lr
 800edce:	bf00      	nop
 800edd0:	200001a4 	.word	0x200001a4

0800edd4 <__libc_init_array>:
 800edd4:	b570      	push	{r4, r5, r6, lr}
 800edd6:	4d0d      	ldr	r5, [pc, #52]	; (800ee0c <__libc_init_array+0x38>)
 800edd8:	4c0d      	ldr	r4, [pc, #52]	; (800ee10 <__libc_init_array+0x3c>)
 800edda:	1b64      	subs	r4, r4, r5
 800eddc:	10a4      	asrs	r4, r4, #2
 800edde:	2600      	movs	r6, #0
 800ede0:	42a6      	cmp	r6, r4
 800ede2:	d109      	bne.n	800edf8 <__libc_init_array+0x24>
 800ede4:	4d0b      	ldr	r5, [pc, #44]	; (800ee14 <__libc_init_array+0x40>)
 800ede6:	4c0c      	ldr	r4, [pc, #48]	; (800ee18 <__libc_init_array+0x44>)
 800ede8:	f000 f91e 	bl	800f028 <_init>
 800edec:	1b64      	subs	r4, r4, r5
 800edee:	10a4      	asrs	r4, r4, #2
 800edf0:	2600      	movs	r6, #0
 800edf2:	42a6      	cmp	r6, r4
 800edf4:	d105      	bne.n	800ee02 <__libc_init_array+0x2e>
 800edf6:	bd70      	pop	{r4, r5, r6, pc}
 800edf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800edfc:	4798      	blx	r3
 800edfe:	3601      	adds	r6, #1
 800ee00:	e7ee      	b.n	800ede0 <__libc_init_array+0xc>
 800ee02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee06:	4798      	blx	r3
 800ee08:	3601      	adds	r6, #1
 800ee0a:	e7f2      	b.n	800edf2 <__libc_init_array+0x1e>
 800ee0c:	0800f134 	.word	0x0800f134
 800ee10:	0800f134 	.word	0x0800f134
 800ee14:	0800f134 	.word	0x0800f134
 800ee18:	0800f13c 	.word	0x0800f13c

0800ee1c <malloc>:
 800ee1c:	4b02      	ldr	r3, [pc, #8]	; (800ee28 <malloc+0xc>)
 800ee1e:	4601      	mov	r1, r0
 800ee20:	6818      	ldr	r0, [r3, #0]
 800ee22:	f000 b82b 	b.w	800ee7c <_malloc_r>
 800ee26:	bf00      	nop
 800ee28:	200001a4 	.word	0x200001a4

0800ee2c <memset>:
 800ee2c:	4402      	add	r2, r0
 800ee2e:	4603      	mov	r3, r0
 800ee30:	4293      	cmp	r3, r2
 800ee32:	d100      	bne.n	800ee36 <memset+0xa>
 800ee34:	4770      	bx	lr
 800ee36:	f803 1b01 	strb.w	r1, [r3], #1
 800ee3a:	e7f9      	b.n	800ee30 <memset+0x4>

0800ee3c <sbrk_aligned>:
 800ee3c:	b570      	push	{r4, r5, r6, lr}
 800ee3e:	4e0e      	ldr	r6, [pc, #56]	; (800ee78 <sbrk_aligned+0x3c>)
 800ee40:	460c      	mov	r4, r1
 800ee42:	6831      	ldr	r1, [r6, #0]
 800ee44:	4605      	mov	r5, r0
 800ee46:	b911      	cbnz	r1, 800ee4e <sbrk_aligned+0x12>
 800ee48:	f000 f88c 	bl	800ef64 <_sbrk_r>
 800ee4c:	6030      	str	r0, [r6, #0]
 800ee4e:	4621      	mov	r1, r4
 800ee50:	4628      	mov	r0, r5
 800ee52:	f000 f887 	bl	800ef64 <_sbrk_r>
 800ee56:	1c43      	adds	r3, r0, #1
 800ee58:	d00a      	beq.n	800ee70 <sbrk_aligned+0x34>
 800ee5a:	1cc4      	adds	r4, r0, #3
 800ee5c:	f024 0403 	bic.w	r4, r4, #3
 800ee60:	42a0      	cmp	r0, r4
 800ee62:	d007      	beq.n	800ee74 <sbrk_aligned+0x38>
 800ee64:	1a21      	subs	r1, r4, r0
 800ee66:	4628      	mov	r0, r5
 800ee68:	f000 f87c 	bl	800ef64 <_sbrk_r>
 800ee6c:	3001      	adds	r0, #1
 800ee6e:	d101      	bne.n	800ee74 <sbrk_aligned+0x38>
 800ee70:	f04f 34ff 	mov.w	r4, #4294967295
 800ee74:	4620      	mov	r0, r4
 800ee76:	bd70      	pop	{r4, r5, r6, pc}
 800ee78:	200011b4 	.word	0x200011b4

0800ee7c <_malloc_r>:
 800ee7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee80:	1ccd      	adds	r5, r1, #3
 800ee82:	f025 0503 	bic.w	r5, r5, #3
 800ee86:	3508      	adds	r5, #8
 800ee88:	2d0c      	cmp	r5, #12
 800ee8a:	bf38      	it	cc
 800ee8c:	250c      	movcc	r5, #12
 800ee8e:	2d00      	cmp	r5, #0
 800ee90:	4607      	mov	r7, r0
 800ee92:	db01      	blt.n	800ee98 <_malloc_r+0x1c>
 800ee94:	42a9      	cmp	r1, r5
 800ee96:	d905      	bls.n	800eea4 <_malloc_r+0x28>
 800ee98:	230c      	movs	r3, #12
 800ee9a:	603b      	str	r3, [r7, #0]
 800ee9c:	2600      	movs	r6, #0
 800ee9e:	4630      	mov	r0, r6
 800eea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eea4:	4e2e      	ldr	r6, [pc, #184]	; (800ef60 <_malloc_r+0xe4>)
 800eea6:	f000 f8b1 	bl	800f00c <__malloc_lock>
 800eeaa:	6833      	ldr	r3, [r6, #0]
 800eeac:	461c      	mov	r4, r3
 800eeae:	bb34      	cbnz	r4, 800eefe <_malloc_r+0x82>
 800eeb0:	4629      	mov	r1, r5
 800eeb2:	4638      	mov	r0, r7
 800eeb4:	f7ff ffc2 	bl	800ee3c <sbrk_aligned>
 800eeb8:	1c43      	adds	r3, r0, #1
 800eeba:	4604      	mov	r4, r0
 800eebc:	d14d      	bne.n	800ef5a <_malloc_r+0xde>
 800eebe:	6834      	ldr	r4, [r6, #0]
 800eec0:	4626      	mov	r6, r4
 800eec2:	2e00      	cmp	r6, #0
 800eec4:	d140      	bne.n	800ef48 <_malloc_r+0xcc>
 800eec6:	6823      	ldr	r3, [r4, #0]
 800eec8:	4631      	mov	r1, r6
 800eeca:	4638      	mov	r0, r7
 800eecc:	eb04 0803 	add.w	r8, r4, r3
 800eed0:	f000 f848 	bl	800ef64 <_sbrk_r>
 800eed4:	4580      	cmp	r8, r0
 800eed6:	d13a      	bne.n	800ef4e <_malloc_r+0xd2>
 800eed8:	6821      	ldr	r1, [r4, #0]
 800eeda:	3503      	adds	r5, #3
 800eedc:	1a6d      	subs	r5, r5, r1
 800eede:	f025 0503 	bic.w	r5, r5, #3
 800eee2:	3508      	adds	r5, #8
 800eee4:	2d0c      	cmp	r5, #12
 800eee6:	bf38      	it	cc
 800eee8:	250c      	movcc	r5, #12
 800eeea:	4629      	mov	r1, r5
 800eeec:	4638      	mov	r0, r7
 800eeee:	f7ff ffa5 	bl	800ee3c <sbrk_aligned>
 800eef2:	3001      	adds	r0, #1
 800eef4:	d02b      	beq.n	800ef4e <_malloc_r+0xd2>
 800eef6:	6823      	ldr	r3, [r4, #0]
 800eef8:	442b      	add	r3, r5
 800eefa:	6023      	str	r3, [r4, #0]
 800eefc:	e00e      	b.n	800ef1c <_malloc_r+0xa0>
 800eefe:	6822      	ldr	r2, [r4, #0]
 800ef00:	1b52      	subs	r2, r2, r5
 800ef02:	d41e      	bmi.n	800ef42 <_malloc_r+0xc6>
 800ef04:	2a0b      	cmp	r2, #11
 800ef06:	d916      	bls.n	800ef36 <_malloc_r+0xba>
 800ef08:	1961      	adds	r1, r4, r5
 800ef0a:	42a3      	cmp	r3, r4
 800ef0c:	6025      	str	r5, [r4, #0]
 800ef0e:	bf18      	it	ne
 800ef10:	6059      	strne	r1, [r3, #4]
 800ef12:	6863      	ldr	r3, [r4, #4]
 800ef14:	bf08      	it	eq
 800ef16:	6031      	streq	r1, [r6, #0]
 800ef18:	5162      	str	r2, [r4, r5]
 800ef1a:	604b      	str	r3, [r1, #4]
 800ef1c:	4638      	mov	r0, r7
 800ef1e:	f104 060b 	add.w	r6, r4, #11
 800ef22:	f000 f879 	bl	800f018 <__malloc_unlock>
 800ef26:	f026 0607 	bic.w	r6, r6, #7
 800ef2a:	1d23      	adds	r3, r4, #4
 800ef2c:	1af2      	subs	r2, r6, r3
 800ef2e:	d0b6      	beq.n	800ee9e <_malloc_r+0x22>
 800ef30:	1b9b      	subs	r3, r3, r6
 800ef32:	50a3      	str	r3, [r4, r2]
 800ef34:	e7b3      	b.n	800ee9e <_malloc_r+0x22>
 800ef36:	6862      	ldr	r2, [r4, #4]
 800ef38:	42a3      	cmp	r3, r4
 800ef3a:	bf0c      	ite	eq
 800ef3c:	6032      	streq	r2, [r6, #0]
 800ef3e:	605a      	strne	r2, [r3, #4]
 800ef40:	e7ec      	b.n	800ef1c <_malloc_r+0xa0>
 800ef42:	4623      	mov	r3, r4
 800ef44:	6864      	ldr	r4, [r4, #4]
 800ef46:	e7b2      	b.n	800eeae <_malloc_r+0x32>
 800ef48:	4634      	mov	r4, r6
 800ef4a:	6876      	ldr	r6, [r6, #4]
 800ef4c:	e7b9      	b.n	800eec2 <_malloc_r+0x46>
 800ef4e:	230c      	movs	r3, #12
 800ef50:	603b      	str	r3, [r7, #0]
 800ef52:	4638      	mov	r0, r7
 800ef54:	f000 f860 	bl	800f018 <__malloc_unlock>
 800ef58:	e7a1      	b.n	800ee9e <_malloc_r+0x22>
 800ef5a:	6025      	str	r5, [r4, #0]
 800ef5c:	e7de      	b.n	800ef1c <_malloc_r+0xa0>
 800ef5e:	bf00      	nop
 800ef60:	200011b0 	.word	0x200011b0

0800ef64 <_sbrk_r>:
 800ef64:	b538      	push	{r3, r4, r5, lr}
 800ef66:	4d06      	ldr	r5, [pc, #24]	; (800ef80 <_sbrk_r+0x1c>)
 800ef68:	2300      	movs	r3, #0
 800ef6a:	4604      	mov	r4, r0
 800ef6c:	4608      	mov	r0, r1
 800ef6e:	602b      	str	r3, [r5, #0]
 800ef70:	f7f5 f93a 	bl	80041e8 <_sbrk>
 800ef74:	1c43      	adds	r3, r0, #1
 800ef76:	d102      	bne.n	800ef7e <_sbrk_r+0x1a>
 800ef78:	682b      	ldr	r3, [r5, #0]
 800ef7a:	b103      	cbz	r3, 800ef7e <_sbrk_r+0x1a>
 800ef7c:	6023      	str	r3, [r4, #0]
 800ef7e:	bd38      	pop	{r3, r4, r5, pc}
 800ef80:	200011b8 	.word	0x200011b8

0800ef84 <_raise_r>:
 800ef84:	291f      	cmp	r1, #31
 800ef86:	b538      	push	{r3, r4, r5, lr}
 800ef88:	4604      	mov	r4, r0
 800ef8a:	460d      	mov	r5, r1
 800ef8c:	d904      	bls.n	800ef98 <_raise_r+0x14>
 800ef8e:	2316      	movs	r3, #22
 800ef90:	6003      	str	r3, [r0, #0]
 800ef92:	f04f 30ff 	mov.w	r0, #4294967295
 800ef96:	bd38      	pop	{r3, r4, r5, pc}
 800ef98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ef9a:	b112      	cbz	r2, 800efa2 <_raise_r+0x1e>
 800ef9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800efa0:	b94b      	cbnz	r3, 800efb6 <_raise_r+0x32>
 800efa2:	4620      	mov	r0, r4
 800efa4:	f000 f830 	bl	800f008 <_getpid_r>
 800efa8:	462a      	mov	r2, r5
 800efaa:	4601      	mov	r1, r0
 800efac:	4620      	mov	r0, r4
 800efae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efb2:	f000 b817 	b.w	800efe4 <_kill_r>
 800efb6:	2b01      	cmp	r3, #1
 800efb8:	d00a      	beq.n	800efd0 <_raise_r+0x4c>
 800efba:	1c59      	adds	r1, r3, #1
 800efbc:	d103      	bne.n	800efc6 <_raise_r+0x42>
 800efbe:	2316      	movs	r3, #22
 800efc0:	6003      	str	r3, [r0, #0]
 800efc2:	2001      	movs	r0, #1
 800efc4:	e7e7      	b.n	800ef96 <_raise_r+0x12>
 800efc6:	2400      	movs	r4, #0
 800efc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800efcc:	4628      	mov	r0, r5
 800efce:	4798      	blx	r3
 800efd0:	2000      	movs	r0, #0
 800efd2:	e7e0      	b.n	800ef96 <_raise_r+0x12>

0800efd4 <raise>:
 800efd4:	4b02      	ldr	r3, [pc, #8]	; (800efe0 <raise+0xc>)
 800efd6:	4601      	mov	r1, r0
 800efd8:	6818      	ldr	r0, [r3, #0]
 800efda:	f7ff bfd3 	b.w	800ef84 <_raise_r>
 800efde:	bf00      	nop
 800efe0:	200001a4 	.word	0x200001a4

0800efe4 <_kill_r>:
 800efe4:	b538      	push	{r3, r4, r5, lr}
 800efe6:	4d07      	ldr	r5, [pc, #28]	; (800f004 <_kill_r+0x20>)
 800efe8:	2300      	movs	r3, #0
 800efea:	4604      	mov	r4, r0
 800efec:	4608      	mov	r0, r1
 800efee:	4611      	mov	r1, r2
 800eff0:	602b      	str	r3, [r5, #0]
 800eff2:	f7f5 f8df 	bl	80041b4 <_kill>
 800eff6:	1c43      	adds	r3, r0, #1
 800eff8:	d102      	bne.n	800f000 <_kill_r+0x1c>
 800effa:	682b      	ldr	r3, [r5, #0]
 800effc:	b103      	cbz	r3, 800f000 <_kill_r+0x1c>
 800effe:	6023      	str	r3, [r4, #0]
 800f000:	bd38      	pop	{r3, r4, r5, pc}
 800f002:	bf00      	nop
 800f004:	200011b8 	.word	0x200011b8

0800f008 <_getpid_r>:
 800f008:	f7f5 b8cc 	b.w	80041a4 <_getpid>

0800f00c <__malloc_lock>:
 800f00c:	4801      	ldr	r0, [pc, #4]	; (800f014 <__malloc_lock+0x8>)
 800f00e:	f000 b809 	b.w	800f024 <__retarget_lock_acquire_recursive>
 800f012:	bf00      	nop
 800f014:	200011bc 	.word	0x200011bc

0800f018 <__malloc_unlock>:
 800f018:	4801      	ldr	r0, [pc, #4]	; (800f020 <__malloc_unlock+0x8>)
 800f01a:	f000 b804 	b.w	800f026 <__retarget_lock_release_recursive>
 800f01e:	bf00      	nop
 800f020:	200011bc 	.word	0x200011bc

0800f024 <__retarget_lock_acquire_recursive>:
 800f024:	4770      	bx	lr

0800f026 <__retarget_lock_release_recursive>:
 800f026:	4770      	bx	lr

0800f028 <_init>:
 800f028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f02a:	bf00      	nop
 800f02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f02e:	bc08      	pop	{r3}
 800f030:	469e      	mov	lr, r3
 800f032:	4770      	bx	lr

0800f034 <_fini>:
 800f034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f036:	bf00      	nop
 800f038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f03a:	bc08      	pop	{r3}
 800f03c:	469e      	mov	lr, r3
 800f03e:	4770      	bx	lr
