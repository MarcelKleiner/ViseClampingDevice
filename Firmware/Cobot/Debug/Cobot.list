
Cobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a174  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800a300  0800a300  0001a300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a388  0800a388  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800a388  0800a388  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a388  0800a388  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a388  0800a388  0001a388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a38c  0800a38c  0001a38c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800a390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001404  20000190  0800a520  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001594  0800a520  00021594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c9de  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047ad  00000000  00000000  0003cb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  00041350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001708  00000000  00000000  00042ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029322  00000000  00000000  000443a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021677  00000000  00000000  0006d6ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eca86  00000000  00000000  0008ed41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017b7c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067ac  00000000  00000000  0017b818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000190 	.word	0x20000190
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800a2e8 	.word	0x0800a2e8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000194 	.word	0x20000194
 80001c8:	0800a2e8 	.word	0x0800a2e8

080001cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b086      	sub	sp, #24
 80001d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001d2:	463b      	mov	r3, r7
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
 80001de:	611a      	str	r2, [r3, #16]
 80001e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001e2:	4b29      	ldr	r3, [pc, #164]	; (8000288 <MX_ADC1_Init+0xbc>)
 80001e4:	4a29      	ldr	r2, [pc, #164]	; (800028c <MX_ADC1_Init+0xc0>)
 80001e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001e8:	4b27      	ldr	r3, [pc, #156]	; (8000288 <MX_ADC1_Init+0xbc>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001ee:	4b26      	ldr	r3, [pc, #152]	; (8000288 <MX_ADC1_Init+0xbc>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001f4:	4b24      	ldr	r3, [pc, #144]	; (8000288 <MX_ADC1_Init+0xbc>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001fa:	4b23      	ldr	r3, [pc, #140]	; (8000288 <MX_ADC1_Init+0xbc>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000200:	4b21      	ldr	r3, [pc, #132]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000202:	2204      	movs	r2, #4
 8000204:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000206:	4b20      	ldr	r3, [pc, #128]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000208:	2200      	movs	r2, #0
 800020a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800020c:	4b1e      	ldr	r3, [pc, #120]	; (8000288 <MX_ADC1_Init+0xbc>)
 800020e:	2200      	movs	r2, #0
 8000210:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000212:	4b1d      	ldr	r3, [pc, #116]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000214:	2201      	movs	r2, #1
 8000216:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000218:	4b1b      	ldr	r3, [pc, #108]	; (8000288 <MX_ADC1_Init+0xbc>)
 800021a:	2200      	movs	r2, #0
 800021c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000220:	4b19      	ldr	r3, [pc, #100]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000222:	2200      	movs	r2, #0
 8000224:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000226:	4b18      	ldr	r3, [pc, #96]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000228:	2200      	movs	r2, #0
 800022a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800022c:	4b16      	ldr	r3, [pc, #88]	; (8000288 <MX_ADC1_Init+0xbc>)
 800022e:	2200      	movs	r2, #0
 8000230:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000234:	4b14      	ldr	r3, [pc, #80]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000236:	2200      	movs	r2, #0
 8000238:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800023a:	4b13      	ldr	r3, [pc, #76]	; (8000288 <MX_ADC1_Init+0xbc>)
 800023c:	2200      	movs	r2, #0
 800023e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000242:	4811      	ldr	r0, [pc, #68]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000244:	f000 ff0a 	bl	800105c <HAL_ADC_Init>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800024e:	f000 fb52 	bl	80008f6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000252:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <MX_ADC1_Init+0xc4>)
 8000254:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000256:	2306      	movs	r3, #6
 8000258:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800025a:	2300      	movs	r3, #0
 800025c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800025e:	237f      	movs	r3, #127	; 0x7f
 8000260:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000262:	2304      	movs	r3, #4
 8000264:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000266:	2300      	movs	r3, #0
 8000268:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800026a:	463b      	mov	r3, r7
 800026c:	4619      	mov	r1, r3
 800026e:	4806      	ldr	r0, [pc, #24]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000270:	f001 f83c 	bl	80012ec <HAL_ADC_ConfigChannel>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800027a:	f000 fb3c 	bl	80008f6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800027e:	bf00      	nop
 8000280:	3718      	adds	r7, #24
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	200001ac 	.word	0x200001ac
 800028c:	50040000 	.word	0x50040000
 8000290:	2e300800 	.word	0x2e300800

08000294 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b08a      	sub	sp, #40	; 0x28
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029c:	f107 0314 	add.w	r3, r7, #20
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
 80002a8:	60da      	str	r2, [r3, #12]
 80002aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a2b      	ldr	r2, [pc, #172]	; (8000360 <HAL_ADC_MspInit+0xcc>)
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d14f      	bne.n	8000356 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80002b6:	4b2b      	ldr	r3, [pc, #172]	; (8000364 <HAL_ADC_MspInit+0xd0>)
 80002b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ba:	4a2a      	ldr	r2, [pc, #168]	; (8000364 <HAL_ADC_MspInit+0xd0>)
 80002bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002c2:	4b28      	ldr	r3, [pc, #160]	; (8000364 <HAL_ADC_MspInit+0xd0>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002ca:	613b      	str	r3, [r7, #16]
 80002cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ce:	4b25      	ldr	r3, [pc, #148]	; (8000364 <HAL_ADC_MspInit+0xd0>)
 80002d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d2:	4a24      	ldr	r2, [pc, #144]	; (8000364 <HAL_ADC_MspInit+0xd0>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002da:	4b22      	ldr	r3, [pc, #136]	; (8000364 <HAL_ADC_MspInit+0xd0>)
 80002dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002de:	f003 0301 	and.w	r3, r3, #1
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80002e6:	23c0      	movs	r3, #192	; 0xc0
 80002e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80002ea:	230b      	movs	r3, #11
 80002ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ee:	2300      	movs	r3, #0
 80002f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002f2:	f107 0314 	add.w	r3, r7, #20
 80002f6:	4619      	mov	r1, r3
 80002f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fc:	f002 f876 	bl	80023ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000300:	4b19      	ldr	r3, [pc, #100]	; (8000368 <HAL_ADC_MspInit+0xd4>)
 8000302:	4a1a      	ldr	r2, [pc, #104]	; (800036c <HAL_ADC_MspInit+0xd8>)
 8000304:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000306:	4b18      	ldr	r3, [pc, #96]	; (8000368 <HAL_ADC_MspInit+0xd4>)
 8000308:	2200      	movs	r2, #0
 800030a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800030c:	4b16      	ldr	r3, [pc, #88]	; (8000368 <HAL_ADC_MspInit+0xd4>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000312:	4b15      	ldr	r3, [pc, #84]	; (8000368 <HAL_ADC_MspInit+0xd4>)
 8000314:	2200      	movs	r2, #0
 8000316:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000318:	4b13      	ldr	r3, [pc, #76]	; (8000368 <HAL_ADC_MspInit+0xd4>)
 800031a:	2280      	movs	r2, #128	; 0x80
 800031c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800031e:	4b12      	ldr	r3, [pc, #72]	; (8000368 <HAL_ADC_MspInit+0xd4>)
 8000320:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000324:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000326:	4b10      	ldr	r3, [pc, #64]	; (8000368 <HAL_ADC_MspInit+0xd4>)
 8000328:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800032c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <HAL_ADC_MspInit+0xd4>)
 8000330:	2200      	movs	r2, #0
 8000332:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000334:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <HAL_ADC_MspInit+0xd4>)
 8000336:	2200      	movs	r2, #0
 8000338:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800033a:	480b      	ldr	r0, [pc, #44]	; (8000368 <HAL_ADC_MspInit+0xd4>)
 800033c:	f001 feee 	bl	800211c <HAL_DMA_Init>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000346:	f000 fad6 	bl	80008f6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a06      	ldr	r2, [pc, #24]	; (8000368 <HAL_ADC_MspInit+0xd4>)
 800034e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000350:	4a05      	ldr	r2, [pc, #20]	; (8000368 <HAL_ADC_MspInit+0xd4>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000356:	bf00      	nop
 8000358:	3728      	adds	r7, #40	; 0x28
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	50040000 	.word	0x50040000
 8000364:	40021000 	.word	0x40021000
 8000368:	20000210 	.word	0x20000210
 800036c:	40020008 	.word	0x40020008

08000370 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000374:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <MX_CRC_Init+0x3c>)
 8000376:	4a0e      	ldr	r2, [pc, #56]	; (80003b0 <MX_CRC_Init+0x40>)
 8000378:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <MX_CRC_Init+0x3c>)
 800037c:	2200      	movs	r2, #0
 800037e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000380:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <MX_CRC_Init+0x3c>)
 8000382:	2200      	movs	r2, #0
 8000384:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000386:	4b09      	ldr	r3, [pc, #36]	; (80003ac <MX_CRC_Init+0x3c>)
 8000388:	2200      	movs	r2, #0
 800038a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800038c:	4b07      	ldr	r3, [pc, #28]	; (80003ac <MX_CRC_Init+0x3c>)
 800038e:	2200      	movs	r2, #0
 8000390:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000392:	4b06      	ldr	r3, [pc, #24]	; (80003ac <MX_CRC_Init+0x3c>)
 8000394:	2201      	movs	r2, #1
 8000396:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000398:	4804      	ldr	r0, [pc, #16]	; (80003ac <MX_CRC_Init+0x3c>)
 800039a:	f001 fc99 	bl	8001cd0 <HAL_CRC_Init>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80003a4:	f000 faa7 	bl	80008f6 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000258 	.word	0x20000258
 80003b0:	40023000 	.word	0x40023000

080003b4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a0a      	ldr	r2, [pc, #40]	; (80003ec <HAL_CRC_MspInit+0x38>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d10b      	bne.n	80003de <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80003c6:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <HAL_CRC_MspInit+0x3c>)
 80003c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003ca:	4a09      	ldr	r2, [pc, #36]	; (80003f0 <HAL_CRC_MspInit+0x3c>)
 80003cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003d0:	6493      	str	r3, [r2, #72]	; 0x48
 80003d2:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <HAL_CRC_MspInit+0x3c>)
 80003d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80003de:	bf00      	nop
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40023000 	.word	0x40023000
 80003f0:	40021000 	.word	0x40021000

080003f4 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b08a      	sub	sp, #40	; 0x28
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2224      	movs	r2, #36	; 0x24
 80003fe:	2100      	movs	r1, #0
 8000400:	4618      	mov	r0, r3
 8000402:	f009 ff69 	bl	800a2d8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000406:	4b17      	ldr	r3, [pc, #92]	; (8000464 <MX_DAC1_Init+0x70>)
 8000408:	4a17      	ldr	r2, [pc, #92]	; (8000468 <MX_DAC1_Init+0x74>)
 800040a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800040c:	4815      	ldr	r0, [pc, #84]	; (8000464 <MX_DAC1_Init+0x70>)
 800040e:	f001 fd49 	bl	8001ea4 <HAL_DAC_Init>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000418:	f000 fa6d 	bl	80008f6 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800041c:	2300      	movs	r3, #0
 800041e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000420:	2300      	movs	r3, #0
 8000422:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000424:	2300      	movs	r3, #0
 8000426:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000428:	2300      	movs	r3, #0
 800042a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800042c:	2300      	movs	r3, #0
 800042e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2200      	movs	r2, #0
 8000434:	4619      	mov	r1, r3
 8000436:	480b      	ldr	r0, [pc, #44]	; (8000464 <MX_DAC1_Init+0x70>)
 8000438:	f001 fd56 	bl	8001ee8 <HAL_DAC_ConfigChannel>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000442:	f000 fa58 	bl	80008f6 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	2210      	movs	r2, #16
 800044a:	4619      	mov	r1, r3
 800044c:	4805      	ldr	r0, [pc, #20]	; (8000464 <MX_DAC1_Init+0x70>)
 800044e:	f001 fd4b 	bl	8001ee8 <HAL_DAC_ConfigChannel>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000458:	f000 fa4d 	bl	80008f6 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800045c:	bf00      	nop
 800045e:	3728      	adds	r7, #40	; 0x28
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	2000027c 	.word	0x2000027c
 8000468:	40007400 	.word	0x40007400

0800046c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08a      	sub	sp, #40	; 0x28
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
 8000482:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a40      	ldr	r2, [pc, #256]	; (800058c <HAL_DAC_MspInit+0x120>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d17a      	bne.n	8000584 <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800048e:	4b40      	ldr	r3, [pc, #256]	; (8000590 <HAL_DAC_MspInit+0x124>)
 8000490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000492:	4a3f      	ldr	r2, [pc, #252]	; (8000590 <HAL_DAC_MspInit+0x124>)
 8000494:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000498:	6593      	str	r3, [r2, #88]	; 0x58
 800049a:	4b3d      	ldr	r3, [pc, #244]	; (8000590 <HAL_DAC_MspInit+0x124>)
 800049c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800049e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80004a2:	613b      	str	r3, [r7, #16]
 80004a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a6:	4b3a      	ldr	r3, [pc, #232]	; (8000590 <HAL_DAC_MspInit+0x124>)
 80004a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004aa:	4a39      	ldr	r2, [pc, #228]	; (8000590 <HAL_DAC_MspInit+0x124>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b2:	4b37      	ldr	r3, [pc, #220]	; (8000590 <HAL_DAC_MspInit+0x124>)
 80004b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80004be:	2330      	movs	r3, #48	; 0x30
 80004c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004c2:	2303      	movs	r3, #3
 80004c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	4619      	mov	r1, r3
 80004d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d4:	f001 ff8a 	bl	80023ec <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80004d8:	4b2e      	ldr	r3, [pc, #184]	; (8000594 <HAL_DAC_MspInit+0x128>)
 80004da:	4a2f      	ldr	r2, [pc, #188]	; (8000598 <HAL_DAC_MspInit+0x12c>)
 80004dc:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80004de:	4b2d      	ldr	r3, [pc, #180]	; (8000594 <HAL_DAC_MspInit+0x128>)
 80004e0:	2206      	movs	r2, #6
 80004e2:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004e4:	4b2b      	ldr	r3, [pc, #172]	; (8000594 <HAL_DAC_MspInit+0x128>)
 80004e6:	2210      	movs	r2, #16
 80004e8:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80004ea:	4b2a      	ldr	r3, [pc, #168]	; (8000594 <HAL_DAC_MspInit+0x128>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80004f0:	4b28      	ldr	r3, [pc, #160]	; (8000594 <HAL_DAC_MspInit+0x128>)
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80004f6:	4b27      	ldr	r3, [pc, #156]	; (8000594 <HAL_DAC_MspInit+0x128>)
 80004f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004fc:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80004fe:	4b25      	ldr	r3, [pc, #148]	; (8000594 <HAL_DAC_MspInit+0x128>)
 8000500:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000504:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 8000506:	4b23      	ldr	r3, [pc, #140]	; (8000594 <HAL_DAC_MspInit+0x128>)
 8000508:	2200      	movs	r2, #0
 800050a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800050c:	4b21      	ldr	r3, [pc, #132]	; (8000594 <HAL_DAC_MspInit+0x128>)
 800050e:	2200      	movs	r2, #0
 8000510:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000512:	4820      	ldr	r0, [pc, #128]	; (8000594 <HAL_DAC_MspInit+0x128>)
 8000514:	f001 fe02 	bl	800211c <HAL_DMA_Init>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800051e:	f000 f9ea 	bl	80008f6 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4a1b      	ldr	r2, [pc, #108]	; (8000594 <HAL_DAC_MspInit+0x128>)
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	4a1a      	ldr	r2, [pc, #104]	; (8000594 <HAL_DAC_MspInit+0x128>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 800052e:	4b1b      	ldr	r3, [pc, #108]	; (800059c <HAL_DAC_MspInit+0x130>)
 8000530:	4a1b      	ldr	r2, [pc, #108]	; (80005a0 <HAL_DAC_MspInit+0x134>)
 8000532:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <HAL_DAC_MspInit+0x130>)
 8000536:	2205      	movs	r2, #5
 8000538:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800053a:	4b18      	ldr	r3, [pc, #96]	; (800059c <HAL_DAC_MspInit+0x130>)
 800053c:	2210      	movs	r2, #16
 800053e:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000540:	4b16      	ldr	r3, [pc, #88]	; (800059c <HAL_DAC_MspInit+0x130>)
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <HAL_DAC_MspInit+0x130>)
 8000548:	2280      	movs	r2, #128	; 0x80
 800054a:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <HAL_DAC_MspInit+0x130>)
 800054e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000552:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000554:	4b11      	ldr	r3, [pc, #68]	; (800059c <HAL_DAC_MspInit+0x130>)
 8000556:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800055a:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_NORMAL;
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <HAL_DAC_MspInit+0x130>)
 800055e:	2200      	movs	r2, #0
 8000560:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000562:	4b0e      	ldr	r3, [pc, #56]	; (800059c <HAL_DAC_MspInit+0x130>)
 8000564:	2200      	movs	r2, #0
 8000566:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8000568:	480c      	ldr	r0, [pc, #48]	; (800059c <HAL_DAC_MspInit+0x130>)
 800056a:	f001 fdd7 	bl	800211c <HAL_DMA_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8000574:	f000 f9bf 	bl	80008f6 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a08      	ldr	r2, [pc, #32]	; (800059c <HAL_DAC_MspInit+0x130>)
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	; (800059c <HAL_DAC_MspInit+0x130>)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000584:	bf00      	nop
 8000586:	3728      	adds	r7, #40	; 0x28
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40007400 	.word	0x40007400
 8000590:	40021000 	.word	0x40021000
 8000594:	20000290 	.word	0x20000290
 8000598:	40020030 	.word	0x40020030
 800059c:	200002d8 	.word	0x200002d8
 80005a0:	40020044 	.word	0x40020044

080005a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <MX_DMA_Init+0x58>)
 80005ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005ae:	4a13      	ldr	r2, [pc, #76]	; (80005fc <MX_DMA_Init+0x58>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6493      	str	r3, [r2, #72]	; 0x48
 80005b6:	4b11      	ldr	r3, [pc, #68]	; (80005fc <MX_DMA_Init+0x58>)
 80005b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	200b      	movs	r0, #11
 80005c8:	f001 fb4b 	bl	8001c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005cc:	200b      	movs	r0, #11
 80005ce:	f001 fb64 	bl	8001c9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	200d      	movs	r0, #13
 80005d8:	f001 fb43 	bl	8001c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80005dc:	200d      	movs	r0, #13
 80005de:	f001 fb5c 	bl	8001c9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2100      	movs	r1, #0
 80005e6:	200e      	movs	r0, #14
 80005e8:	f001 fb3b 	bl	8001c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80005ec:	200e      	movs	r0, #14
 80005ee:	f001 fb54 	bl	8001c9a <HAL_NVIC_EnableIRQ>

}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40021000 	.word	0x40021000

08000600 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08a      	sub	sp, #40	; 0x28
 8000604:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	4b67      	ldr	r3, [pc, #412]	; (80007b4 <MX_GPIO_Init+0x1b4>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	4a66      	ldr	r2, [pc, #408]	; (80007b4 <MX_GPIO_Init+0x1b4>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000622:	4b64      	ldr	r3, [pc, #400]	; (80007b4 <MX_GPIO_Init+0x1b4>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062e:	4b61      	ldr	r3, [pc, #388]	; (80007b4 <MX_GPIO_Init+0x1b4>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	4a60      	ldr	r2, [pc, #384]	; (80007b4 <MX_GPIO_Init+0x1b4>)
 8000634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063a:	4b5e      	ldr	r3, [pc, #376]	; (80007b4 <MX_GPIO_Init+0x1b4>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b5b      	ldr	r3, [pc, #364]	; (80007b4 <MX_GPIO_Init+0x1b4>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	4a5a      	ldr	r2, [pc, #360]	; (80007b4 <MX_GPIO_Init+0x1b4>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000652:	4b58      	ldr	r3, [pc, #352]	; (80007b4 <MX_GPIO_Init+0x1b4>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	4b55      	ldr	r3, [pc, #340]	; (80007b4 <MX_GPIO_Init+0x1b4>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	4a54      	ldr	r2, [pc, #336]	; (80007b4 <MX_GPIO_Init+0x1b4>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066a:	4b52      	ldr	r3, [pc, #328]	; (80007b4 <MX_GPIO_Init+0x1b4>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DI_OUT_8_P_Pin|DI_OUT_8_N_Pin|DI_OUT_6_N_Pin|DI_OUT_5_P_Pin
 8000676:	2200      	movs	r2, #0
 8000678:	f24c 31d0 	movw	r1, #50128	; 0xc3d0
 800067c:	484e      	ldr	r0, [pc, #312]	; (80007b8 <MX_GPIO_Init+0x1b8>)
 800067e:	f002 f82f 	bl	80026e0 <HAL_GPIO_WritePin>
                          |DI_OUT_3_N_Pin|DI_OUT_3_P_Pin|DI_OUT_1_N_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DI_OUT_4_P_Pin|DI_OUT_6_P_Pin|DI_OUT_2_N_Pin|DI_OUT_4_N_Pin
 8000682:	2200      	movs	r2, #0
 8000684:	f64e 41ff 	movw	r1, #60671	; 0xecff
 8000688:	484c      	ldr	r0, [pc, #304]	; (80007bc <MX_GPIO_Init+0x1bc>)
 800068a:	f002 f829 	bl	80026e0 <HAL_GPIO_WritePin>
                          |DI_OUT_2_P_Pin|DI_OUT_7_N_Pin|DI_OUT_7_P_Pin|DI_OUT_5_N_Pin
                          |RFM_NSS_Pin|RFM_RST_Pin|RFM_DI_3_Pin|RFM_DI_0_Pin
                          |RFM_DI_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DI_OUT_1_P_GPIO_Port, DI_OUT_1_P_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000698:	f002 f822 	bl	80026e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800069c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a2:	2303      	movs	r3, #3
 80006a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	4841      	ldr	r0, [pc, #260]	; (80007b8 <MX_GPIO_Init+0x1b8>)
 80006b2:	f001 fe9b 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DI_OUT_8_P_Pin|DI_OUT_8_N_Pin|DI_OUT_6_N_Pin|DI_OUT_5_P_Pin
 80006b6:	f24c 33d0 	movw	r3, #50128	; 0xc3d0
 80006ba:	617b      	str	r3, [r7, #20]
                          |DI_OUT_3_N_Pin|DI_OUT_3_P_Pin|DI_OUT_1_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	2301      	movs	r3, #1
 80006be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	2300      	movs	r3, #0
 80006c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4619      	mov	r1, r3
 80006ce:	483a      	ldr	r0, [pc, #232]	; (80007b8 <MX_GPIO_Init+0x1b8>)
 80006d0:	f001 fe8c 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80006d4:	2309      	movs	r3, #9
 80006d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d8:	2303      	movs	r3, #3
 80006da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	4836      	ldr	r0, [pc, #216]	; (80007c0 <MX_GPIO_Init+0x1c0>)
 80006e8:	f001 fe80 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DI_1_Pin;
 80006ec:	2302      	movs	r3, #2
 80006ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DI_1_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	4830      	ldr	r0, [pc, #192]	; (80007c0 <MX_GPIO_Init+0x1c0>)
 8000700:	f001 fe74 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DI_2_Pin|DI_3_Pin|DI_4_Pin|DI_5_Pin;
 8000704:	230f      	movs	r3, #15
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	4619      	mov	r1, r3
 8000716:	4828      	ldr	r0, [pc, #160]	; (80007b8 <MX_GPIO_Init+0x1b8>)
 8000718:	f001 fe68 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = DI_6_Pin|DI_7_Pin|DI_8_Pin|LED_R_Pin
 800071c:	f240 6307 	movw	r3, #1543	; 0x607
 8000720:	617b      	str	r3, [r7, #20]
                          |LED_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000722:	2300      	movs	r3, #0
 8000724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000734:	f001 fe5a 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_15;
 8000738:	f248 0308 	movw	r3, #32776	; 0x8008
 800073c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073e:	2303      	movs	r3, #3
 8000740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	4619      	mov	r1, r3
 800074c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000750:	f001 fe4c 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DI_OUT_4_P_Pin|DI_OUT_6_P_Pin|DI_OUT_2_N_Pin|DI_OUT_4_N_Pin
 8000754:	f64e 43ff 	movw	r3, #60671	; 0xecff
 8000758:	617b      	str	r3, [r7, #20]
                          |DI_OUT_2_P_Pin|DI_OUT_7_N_Pin|DI_OUT_7_P_Pin|DI_OUT_5_N_Pin
                          |RFM_NSS_Pin|RFM_RST_Pin|RFM_DI_3_Pin|RFM_DI_0_Pin
                          |RFM_DI_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	4813      	ldr	r0, [pc, #76]	; (80007bc <MX_GPIO_Init+0x1bc>)
 800076e:	f001 fe3d 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 8000772:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000778:	2303      	movs	r3, #3
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	480d      	ldr	r0, [pc, #52]	; (80007bc <MX_GPIO_Init+0x1bc>)
 8000788:	f001 fe30 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DI_OUT_1_P_Pin;
 800078c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DI_OUT_1_P_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4619      	mov	r1, r3
 80007a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a8:	f001 fe20 	bl	80023ec <HAL_GPIO_Init>

}
 80007ac:	bf00      	nop
 80007ae:	3728      	adds	r7, #40	; 0x28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40021000 	.word	0x40021000
 80007b8:	48000800 	.word	0x48000800
 80007bc:	48000400 	.word	0x48000400
 80007c0:	48001c00 	.word	0x48001c00

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c8:	f000 fa23 	bl	8000c12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007cc:	f000 f813 	bl	80007f6 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007d0:	f000 f863 	bl	800089a <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d4:	f7ff ff14 	bl	8000600 <MX_GPIO_Init>
  MX_DMA_Init();
 80007d8:	f7ff fee4 	bl	80005a4 <MX_DMA_Init>
  MX_ADC1_Init();
 80007dc:	f7ff fcf6 	bl	80001cc <MX_ADC1_Init>
  MX_DAC1_Init();
 80007e0:	f7ff fe08 	bl	80003f4 <MX_DAC1_Init>
  MX_SPI3_Init();
 80007e4:	f000 f88c 	bl	8000900 <MX_SPI3_Init>
  MX_USB_DEVICE_Init();
 80007e8:	f008 ffe0 	bl	80097ac <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 80007ec:	f7ff fdc0 	bl	8000370 <MX_CRC_Init>
  MX_TIM6_Init();
 80007f0:	f000 f990 	bl	8000b14 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <main+0x30>

080007f6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b096      	sub	sp, #88	; 0x58
 80007fa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2244      	movs	r2, #68	; 0x44
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f009 fd67 	bl	800a2d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080a:	463b      	mov	r3, r7
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000818:	f44f 7000 	mov.w	r0, #512	; 0x200
 800081c:	f003 fd12 	bl	8004244 <HAL_PWREx_ControlVoltageScaling>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000826:	f000 f866 	bl	80008f6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800082a:	2310      	movs	r3, #16
 800082c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800082e:	2301      	movs	r3, #1
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000836:	2360      	movs	r3, #96	; 0x60
 8000838:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800083e:	2301      	movs	r3, #1
 8000840:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000842:	2301      	movs	r3, #1
 8000844:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000846:	2328      	movs	r3, #40	; 0x28
 8000848:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800084a:	2307      	movs	r3, #7
 800084c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800084e:	2302      	movs	r3, #2
 8000850:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000852:	2302      	movs	r3, #2
 8000854:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4618      	mov	r0, r3
 800085c:	f003 fd58 	bl	8004310 <HAL_RCC_OscConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000866:	f000 f846 	bl	80008f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	230f      	movs	r3, #15
 800086c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086e:	2303      	movs	r3, #3
 8000870:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800087e:	463b      	mov	r3, r7
 8000880:	2104      	movs	r1, #4
 8000882:	4618      	mov	r0, r3
 8000884:	f004 f958 	bl	8004b38 <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800088e:	f000 f832 	bl	80008f6 <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3758      	adds	r7, #88	; 0x58
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b098      	sub	sp, #96	; 0x60
 800089e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a0:	463b      	mov	r3, r7
 80008a2:	2260      	movs	r2, #96	; 0x60
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f009 fd16 	bl	800a2d8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80008ac:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80008b0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008b6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80008b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80008bc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80008be:	2301      	movs	r3, #1
 80008c0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008c2:	2301      	movs	r3, #1
 80008c4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80008c6:	2318      	movs	r3, #24
 80008c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80008ca:	2307      	movs	r3, #7
 80008cc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80008d6:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80008da:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008dc:	463b      	mov	r3, r7
 80008de:	4618      	mov	r0, r3
 80008e0:	f004 fb16 	bl	8004f10 <HAL_RCCEx_PeriphCLKConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80008ea:	f000 f804 	bl	80008f6 <Error_Handler>
  }
}
 80008ee:	bf00      	nop
 80008f0:	3760      	adds	r7, #96	; 0x60
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fa:	b672      	cpsid	i
}
 80008fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fe:	e7fe      	b.n	80008fe <Error_Handler+0x8>

08000900 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <MX_SPI3_Init+0x74>)
 8000906:	4a1c      	ldr	r2, [pc, #112]	; (8000978 <MX_SPI3_Init+0x78>)
 8000908:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_SPI3_Init+0x74>)
 800090c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000910:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000912:	4b18      	ldr	r3, [pc, #96]	; (8000974 <MX_SPI3_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000918:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_SPI3_Init+0x74>)
 800091a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800091e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_SPI3_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_SPI3_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_SPI3_Init+0x74>)
 800092e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000932:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_SPI3_Init+0x74>)
 8000936:	2218      	movs	r2, #24
 8000938:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_SPI3_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_SPI3_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_SPI3_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_SPI3_Init+0x74>)
 800094e:	2207      	movs	r2, #7
 8000950:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_SPI3_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_SPI3_Init+0x74>)
 800095a:	2208      	movs	r2, #8
 800095c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_SPI3_Init+0x74>)
 8000960:	f004 fe12 	bl	8005588 <HAL_SPI_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800096a:	f7ff ffc4 	bl	80008f6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000320 	.word	0x20000320
 8000978:	40003c00 	.word	0x40003c00

0800097c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <HAL_SPI_MspInit+0x7c>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d128      	bne.n	80009f0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <HAL_SPI_MspInit+0x80>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a2:	4a16      	ldr	r2, [pc, #88]	; (80009fc <HAL_SPI_MspInit+0x80>)
 80009a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009a8:	6593      	str	r3, [r2, #88]	; 0x58
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <HAL_SPI_MspInit+0x80>)
 80009ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_SPI_MspInit+0x80>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	4a10      	ldr	r2, [pc, #64]	; (80009fc <HAL_SPI_MspInit+0x80>)
 80009bc:	f043 0304 	orr.w	r3, r3, #4
 80009c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_SPI_MspInit+0x80>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	f003 0304 	and.w	r3, r3, #4
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80009ce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009e0:	2306      	movs	r3, #6
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <HAL_SPI_MspInit+0x84>)
 80009ec:	f001 fcfe 	bl	80023ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009f0:	bf00      	nop
 80009f2:	3728      	adds	r7, #40	; 0x28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40003c00 	.word	0x40003c00
 80009fc:	40021000 	.word	0x40021000
 8000a00:	48000800 	.word	0x48000800

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <HAL_MspInit+0x44>)
 8000a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <HAL_MspInit+0x44>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6613      	str	r3, [r2, #96]	; 0x60
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_MspInit+0x44>)
 8000a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_MspInit+0x44>)
 8000a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a26:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <HAL_MspInit+0x44>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_MspInit+0x44>)
 8000a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <NMI_Handler+0x4>

08000a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <HardFault_Handler+0x4>

08000a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <MemManage_Handler+0x4>

08000a5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <BusFault_Handler+0x4>

08000a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <UsageFault_Handler+0x4>

08000a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a98:	f000 f910 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <DMA1_Channel1_IRQHandler+0x10>)
 8000aa6:	f001 fbf1 	bl	800228c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000210 	.word	0x20000210

08000ab4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <DMA1_Channel3_IRQHandler+0x10>)
 8000aba:	f001 fbe7 	bl	800228c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000290 	.word	0x20000290

08000ac8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <DMA1_Channel4_IRQHandler+0x10>)
 8000ace:	f001 fbdd 	bl	800228c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200002d8 	.word	0x200002d8

08000adc <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <USB_IRQHandler+0x10>)
 8000ae2:	f001 ff4e 	bl	8002982 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20001078 	.word	0x20001078

08000af0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <SystemInit+0x20>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afa:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <SystemInit+0x20>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_TIM6_Init+0x64>)
 8000b26:	4a15      	ldr	r2, [pc, #84]	; (8000b7c <MX_TIM6_Init+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <MX_TIM6_Init+0x64>)
 8000b2c:	220a      	movs	r2, #10
 8000b2e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_TIM6_Init+0x64>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16000;
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <MX_TIM6_Init+0x64>)
 8000b38:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000b3c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_TIM6_Init+0x64>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <MX_TIM6_Init+0x64>)
 8000b46:	f004 fdc2 	bl	80056ce <HAL_TIM_Base_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000b50:	f7ff fed1 	bl	80008f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b54:	2300      	movs	r3, #0
 8000b56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_TIM6_Init+0x64>)
 8000b62:	f004 fe6f 	bl	8005844 <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000b6c:	f7ff fec3 	bl	80008f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000384 	.word	0x20000384
 8000b7c:	40001000 	.word	0x40001000

08000b80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <HAL_TIM_Base_MspInit+0x38>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d10b      	bne.n	8000baa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <HAL_TIM_Base_MspInit+0x3c>)
 8000b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b96:	4a09      	ldr	r2, [pc, #36]	; (8000bbc <HAL_TIM_Base_MspInit+0x3c>)
 8000b98:	f043 0310 	orr.w	r3, r3, #16
 8000b9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b9e:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <HAL_TIM_Base_MspInit+0x3c>)
 8000ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba2:	f003 0310 	and.w	r3, r3, #16
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40001000 	.word	0x40001000
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc4:	f7ff ff94 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc8:	480c      	ldr	r0, [pc, #48]	; (8000bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000bca:	490d      	ldr	r1, [pc, #52]	; (8000c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <LoopForever+0xe>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be0:	4c0a      	ldr	r4, [pc, #40]	; (8000c0c <LoopForever+0x16>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bee:	f009 fb4f 	bl	800a290 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf2:	f7ff fde7 	bl	80007c4 <main>

08000bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf6:	e7fe      	b.n	8000bf6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8000c04:	0800a390 	.word	0x0800a390
  ldr r2, =_sbss
 8000c08:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000c0c:	20001594 	.word	0x20001594

08000c10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_IRQHandler>

08000c12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f001 f815 	bl	8001c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c22:	200f      	movs	r0, #15
 8000c24:	f000 f80e 	bl	8000c44 <HAL_InitTick>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d002      	beq.n	8000c34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	71fb      	strb	r3, [r7, #7]
 8000c32:	e001      	b.n	8000c38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c34:	f7ff fee6 	bl	8000a04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <HAL_InitTick+0x6c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d023      	beq.n	8000ca0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <HAL_InitTick+0x70>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <HAL_InitTick+0x6c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 f821 	bl	8001cb6 <HAL_SYSTICK_Config>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d10f      	bne.n	8000c9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b0f      	cmp	r3, #15
 8000c7e:	d809      	bhi.n	8000c94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c80:	2200      	movs	r2, #0
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f000 ffeb 	bl	8001c62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <HAL_InitTick+0x74>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	e007      	b.n	8000ca4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	73fb      	strb	r3, [r7, #15]
 8000c98:	e004      	b.n	8000ca4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	73fb      	strb	r3, [r7, #15]
 8000c9e:	e001      	b.n	8000ca4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	20000004 	.word	0x20000004

08000cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	200003d0 	.word	0x200003d0

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <HAL_GetTick+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	200003d0 	.word	0x200003d0

08000cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d04:	f7ff ffee 	bl	8000ce4 <HAL_GetTick>
 8000d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d14:	d005      	beq.n	8000d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_Delay+0x44>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4413      	add	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d22:	bf00      	nop
 8000d24:	f7ff ffde 	bl	8000ce4 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d8f7      	bhi.n	8000d24 <HAL_Delay+0x28>
  {
  }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008

08000d44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	431a      	orrs	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	609a      	str	r2, [r3, #8]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b087      	sub	sp, #28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	3360      	adds	r3, #96	; 0x60
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	4413      	add	r3, r2
 8000dc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <LL_ADC_SetOffset+0x44>)
 8000dce:	4013      	ands	r3, r2
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000dd6:	683a      	ldr	r2, [r7, #0]
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000de4:	bf00      	nop
 8000de6:	371c      	adds	r7, #28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	03fff000 	.word	0x03fff000

08000df4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3360      	adds	r3, #96	; 0x60
 8000e02:	461a      	mov	r2, r3
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	4413      	add	r3, r2
 8000e0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b087      	sub	sp, #28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	3360      	adds	r3, #96	; 0x60
 8000e30:	461a      	mov	r2, r3
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	431a      	orrs	r2, r3
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e4a:	bf00      	nop
 8000e4c:	371c      	adds	r7, #28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b087      	sub	sp, #28
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	3330      	adds	r3, #48	; 0x30
 8000e66:	461a      	mov	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	0a1b      	lsrs	r3, r3, #8
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	f003 030c 	and.w	r3, r3, #12
 8000e72:	4413      	add	r3, r2
 8000e74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	f003 031f 	and.w	r3, r3, #31
 8000e80:	211f      	movs	r1, #31
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	401a      	ands	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	0e9b      	lsrs	r3, r3, #26
 8000e8e:	f003 011f 	and.w	r1, r3, #31
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	f003 031f 	and.w	r3, r3, #31
 8000e98:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ea2:	bf00      	nop
 8000ea4:	371c      	adds	r7, #28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b087      	sub	sp, #28
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	60f8      	str	r0, [r7, #12]
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3314      	adds	r3, #20
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	0e5b      	lsrs	r3, r3, #25
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	4413      	add	r3, r2
 8000ecc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	0d1b      	lsrs	r3, r3, #20
 8000ed6:	f003 031f 	and.w	r3, r3, #31
 8000eda:	2107      	movs	r1, #7
 8000edc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	0d1b      	lsrs	r3, r3, #20
 8000ee8:	f003 031f 	and.w	r3, r3, #31
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ef8:	bf00      	nop
 8000efa:	371c      	adds	r7, #28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	401a      	ands	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f003 0318 	and.w	r3, r3, #24
 8000f26:	4908      	ldr	r1, [pc, #32]	; (8000f48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f28:	40d9      	lsrs	r1, r3
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	400b      	ands	r3, r1
 8000f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f32:	431a      	orrs	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	0007ffff 	.word	0x0007ffff

08000f4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	6093      	str	r3, [r2, #8]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f84:	d101      	bne.n	8000f8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000fa8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000fd4:	d101      	bne.n	8000fda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e000      	b.n	8000fdc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d101      	bne.n	8001000 <LL_ADC_IsEnabled+0x18>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e000      	b.n	8001002 <LL_ADC_IsEnabled+0x1a>
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	2b04      	cmp	r3, #4
 8001020:	d101      	bne.n	8001026 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 0308 	and.w	r3, r3, #8
 8001044:	2b08      	cmp	r3, #8
 8001046:	d101      	bne.n	800104c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001064:	2300      	movs	r3, #0
 8001066:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e12c      	b.n	80012d0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001080:	2b00      	cmp	r3, #0
 8001082:	d109      	bne.n	8001098 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff f905 	bl	8000294 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff67 	bl	8000f70 <LL_ADC_IsDeepPowerDownEnabled>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d004      	beq.n	80010b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff4d 	bl	8000f4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff82 	bl	8000fc0 <LL_ADC_IsInternalRegulatorEnabled>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d115      	bne.n	80010ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ff66 	bl	8000f98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010cc:	4b82      	ldr	r3, [pc, #520]	; (80012d8 <HAL_ADC_Init+0x27c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	099b      	lsrs	r3, r3, #6
 80010d2:	4a82      	ldr	r2, [pc, #520]	; (80012dc <HAL_ADC_Init+0x280>)
 80010d4:	fba2 2303 	umull	r2, r3, r2, r3
 80010d8:	099b      	lsrs	r3, r3, #6
 80010da:	3301      	adds	r3, #1
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010e0:	e002      	b.n	80010e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f9      	bne.n	80010e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff64 	bl	8000fc0 <LL_ADC_IsInternalRegulatorEnabled>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10d      	bne.n	800111a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001102:	f043 0210 	orr.w	r2, r3, #16
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	f043 0201 	orr.w	r2, r3, #1
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff75 	bl	800100e <LL_ADC_REG_IsConversionOngoing>
 8001124:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	2b00      	cmp	r3, #0
 8001130:	f040 80c5 	bne.w	80012be <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	2b00      	cmp	r3, #0
 8001138:	f040 80c1 	bne.w	80012be <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001140:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001144:	f043 0202 	orr.w	r2, r3, #2
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff49 	bl	8000fe8 <LL_ADC_IsEnabled>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10b      	bne.n	8001174 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800115c:	4860      	ldr	r0, [pc, #384]	; (80012e0 <HAL_ADC_Init+0x284>)
 800115e:	f7ff ff43 	bl	8000fe8 <LL_ADC_IsEnabled>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d105      	bne.n	8001174 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4619      	mov	r1, r3
 800116e:	485d      	ldr	r0, [pc, #372]	; (80012e4 <HAL_ADC_Init+0x288>)
 8001170:	f7ff fde8 	bl	8000d44 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7e5b      	ldrb	r3, [r3, #25]
 8001178:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800117e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001184:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800118a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001192:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d106      	bne.n	80011b0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	3b01      	subs	r3, #1
 80011a8:	045b      	lsls	r3, r3, #17
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d009      	beq.n	80011cc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011bc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	4b45      	ldr	r3, [pc, #276]	; (80012e8 <HAL_ADC_Init+0x28c>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	69b9      	ldr	r1, [r7, #24]
 80011dc:	430b      	orrs	r3, r1
 80011de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff12 	bl	800100e <LL_ADC_REG_IsConversionOngoing>
 80011ea:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff1f 	bl	8001034 <LL_ADC_INJ_IsConversionOngoing>
 80011f6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d13d      	bne.n	800127a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d13a      	bne.n	800127a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001208:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001210:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001220:	f023 0302 	bic.w	r3, r3, #2
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	69b9      	ldr	r1, [r7, #24]
 800122a:	430b      	orrs	r3, r1
 800122c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001234:	2b01      	cmp	r3, #1
 8001236:	d118      	bne.n	800126a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001242:	f023 0304 	bic.w	r3, r3, #4
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800124e:	4311      	orrs	r1, r2
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001254:	4311      	orrs	r1, r2
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800125a:	430a      	orrs	r2, r1
 800125c:	431a      	orrs	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0201 	orr.w	r2, r2, #1
 8001266:	611a      	str	r2, [r3, #16]
 8001268:	e007      	b.n	800127a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0201 	bic.w	r2, r2, #1
 8001278:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d10c      	bne.n	800129c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	f023 010f 	bic.w	r1, r3, #15
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	1e5a      	subs	r2, r3, #1
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	430a      	orrs	r2, r1
 8001298:	631a      	str	r2, [r3, #48]	; 0x30
 800129a:	e007      	b.n	80012ac <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 020f 	bic.w	r2, r2, #15
 80012aa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b0:	f023 0303 	bic.w	r3, r3, #3
 80012b4:	f043 0201 	orr.w	r2, r3, #1
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	655a      	str	r2, [r3, #84]	; 0x54
 80012bc:	e007      	b.n	80012ce <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c2:	f043 0210 	orr.w	r2, r3, #16
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80012ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000000 	.word	0x20000000
 80012dc:	053e2d63 	.word	0x053e2d63
 80012e0:	50040000 	.word	0x50040000
 80012e4:	50040300 	.word	0x50040300
 80012e8:	fff0c007 	.word	0xfff0c007

080012ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b0b6      	sub	sp, #216	; 0xd8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <HAL_ADC_ConfigChannel+0x22>
 800130a:	2302      	movs	r3, #2
 800130c:	e3b9      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x796>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fe77 	bl	800100e <LL_ADC_REG_IsConversionOngoing>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	f040 839e 	bne.w	8001a64 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b05      	cmp	r3, #5
 800132e:	d824      	bhi.n	800137a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	3b02      	subs	r3, #2
 8001336:	2b03      	cmp	r3, #3
 8001338:	d81b      	bhi.n	8001372 <HAL_ADC_ConfigChannel+0x86>
 800133a:	a201      	add	r2, pc, #4	; (adr r2, 8001340 <HAL_ADC_ConfigChannel+0x54>)
 800133c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001340:	08001351 	.word	0x08001351
 8001344:	08001359 	.word	0x08001359
 8001348:	08001361 	.word	0x08001361
 800134c:	08001369 	.word	0x08001369
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	220c      	movs	r2, #12
 8001354:	605a      	str	r2, [r3, #4]
          break;
 8001356:	e011      	b.n	800137c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	2212      	movs	r2, #18
 800135c:	605a      	str	r2, [r3, #4]
          break;
 800135e:	e00d      	b.n	800137c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	2218      	movs	r2, #24
 8001364:	605a      	str	r2, [r3, #4]
          break;
 8001366:	e009      	b.n	800137c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800136e:	605a      	str	r2, [r3, #4]
          break;
 8001370:	e004      	b.n	800137c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	2206      	movs	r2, #6
 8001376:	605a      	str	r2, [r3, #4]
          break;
 8001378:	e000      	b.n	800137c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800137a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	6859      	ldr	r1, [r3, #4]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	f7ff fd64 	bl	8000e56 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fe3b 	bl	800100e <LL_ADC_REG_IsConversionOngoing>
 8001398:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fe47 	bl	8001034 <LL_ADC_INJ_IsConversionOngoing>
 80013a6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f040 81a6 	bne.w	8001700 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f040 81a1 	bne.w	8001700 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6818      	ldr	r0, [r3, #0]
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	6819      	ldr	r1, [r3, #0]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	461a      	mov	r2, r3
 80013cc:	f7ff fd6f 	bl	8000eae <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	695a      	ldr	r2, [r3, #20]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	08db      	lsrs	r3, r3, #3
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d00a      	beq.n	8001408 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6818      	ldr	r0, [r3, #0]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	6919      	ldr	r1, [r3, #16]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001402:	f7ff fcd3 	bl	8000dac <LL_ADC_SetOffset>
 8001406:	e17b      	b.n	8001700 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fcf0 	bl	8000df4 <LL_ADC_GetOffsetChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10a      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x148>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fce5 	bl	8000df4 <LL_ADC_GetOffsetChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	0e9b      	lsrs	r3, r3, #26
 800142e:	f003 021f 	and.w	r2, r3, #31
 8001432:	e01e      	b.n	8001472 <HAL_ADC_ConfigChannel+0x186>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fcda 	bl	8000df4 <LL_ADC_GetOffsetChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001446:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800144a:	fa93 f3a3 	rbit	r3, r3
 800144e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001456:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800145a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001462:	2320      	movs	r3, #32
 8001464:	e004      	b.n	8001470 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001466:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800146a:	fab3 f383 	clz	r3, r3
 800146e:	b2db      	uxtb	r3, r3
 8001470:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800147a:	2b00      	cmp	r3, #0
 800147c:	d105      	bne.n	800148a <HAL_ADC_ConfigChannel+0x19e>
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	0e9b      	lsrs	r3, r3, #26
 8001484:	f003 031f 	and.w	r3, r3, #31
 8001488:	e018      	b.n	80014bc <HAL_ADC_ConfigChannel+0x1d0>
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001492:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001496:	fa93 f3a3 	rbit	r3, r3
 800149a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800149e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80014a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80014ae:	2320      	movs	r3, #32
 80014b0:	e004      	b.n	80014bc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80014b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80014b6:	fab3 f383 	clz	r3, r3
 80014ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80014bc:	429a      	cmp	r2, r3
 80014be:	d106      	bne.n	80014ce <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2200      	movs	r2, #0
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fca9 	bl	8000e20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2101      	movs	r1, #1
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fc8d 	bl	8000df4 <LL_ADC_GetOffsetChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d10a      	bne.n	80014fa <HAL_ADC_ConfigChannel+0x20e>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2101      	movs	r1, #1
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fc82 	bl	8000df4 <LL_ADC_GetOffsetChannel>
 80014f0:	4603      	mov	r3, r0
 80014f2:	0e9b      	lsrs	r3, r3, #26
 80014f4:	f003 021f 	and.w	r2, r3, #31
 80014f8:	e01e      	b.n	8001538 <HAL_ADC_ConfigChannel+0x24c>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2101      	movs	r1, #1
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fc77 	bl	8000df4 <LL_ADC_GetOffsetChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001510:	fa93 f3a3 	rbit	r3, r3
 8001514:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001518:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800151c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001520:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001528:	2320      	movs	r3, #32
 800152a:	e004      	b.n	8001536 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800152c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001530:	fab3 f383 	clz	r3, r3
 8001534:	b2db      	uxtb	r3, r3
 8001536:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001540:	2b00      	cmp	r3, #0
 8001542:	d105      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x264>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	0e9b      	lsrs	r3, r3, #26
 800154a:	f003 031f 	and.w	r3, r3, #31
 800154e:	e018      	b.n	8001582 <HAL_ADC_ConfigChannel+0x296>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001558:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800155c:	fa93 f3a3 	rbit	r3, r3
 8001560:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001564:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001568:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800156c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001574:	2320      	movs	r3, #32
 8001576:	e004      	b.n	8001582 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001578:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800157c:	fab3 f383 	clz	r3, r3
 8001580:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001582:	429a      	cmp	r2, r3
 8001584:	d106      	bne.n	8001594 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2200      	movs	r2, #0
 800158c:	2101      	movs	r1, #1
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fc46 	bl	8000e20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2102      	movs	r1, #2
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fc2a 	bl	8000df4 <LL_ADC_GetOffsetChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10a      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x2d4>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2102      	movs	r1, #2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fc1f 	bl	8000df4 <LL_ADC_GetOffsetChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	0e9b      	lsrs	r3, r3, #26
 80015ba:	f003 021f 	and.w	r2, r3, #31
 80015be:	e01e      	b.n	80015fe <HAL_ADC_ConfigChannel+0x312>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2102      	movs	r1, #2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fc14 	bl	8000df4 <LL_ADC_GetOffsetChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015d6:	fa93 f3a3 	rbit	r3, r3
 80015da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80015de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80015e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80015ee:	2320      	movs	r3, #32
 80015f0:	e004      	b.n	80015fc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80015f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015f6:	fab3 f383 	clz	r3, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001606:	2b00      	cmp	r3, #0
 8001608:	d105      	bne.n	8001616 <HAL_ADC_ConfigChannel+0x32a>
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	0e9b      	lsrs	r3, r3, #26
 8001610:	f003 031f 	and.w	r3, r3, #31
 8001614:	e016      	b.n	8001644 <HAL_ADC_ConfigChannel+0x358>
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001622:	fa93 f3a3 	rbit	r3, r3
 8001626:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001628:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800162a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800162e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001636:	2320      	movs	r3, #32
 8001638:	e004      	b.n	8001644 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800163a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800163e:	fab3 f383 	clz	r3, r3
 8001642:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001644:	429a      	cmp	r2, r3
 8001646:	d106      	bne.n	8001656 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2200      	movs	r2, #0
 800164e:	2102      	movs	r1, #2
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fbe5 	bl	8000e20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2103      	movs	r1, #3
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fbc9 	bl	8000df4 <LL_ADC_GetOffsetChannel>
 8001662:	4603      	mov	r3, r0
 8001664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10a      	bne.n	8001682 <HAL_ADC_ConfigChannel+0x396>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2103      	movs	r1, #3
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fbbe 	bl	8000df4 <LL_ADC_GetOffsetChannel>
 8001678:	4603      	mov	r3, r0
 800167a:	0e9b      	lsrs	r3, r3, #26
 800167c:	f003 021f 	and.w	r2, r3, #31
 8001680:	e017      	b.n	80016b2 <HAL_ADC_ConfigChannel+0x3c6>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2103      	movs	r1, #3
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fbb3 	bl	8000df4 <LL_ADC_GetOffsetChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001694:	fa93 f3a3 	rbit	r3, r3
 8001698:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800169a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800169c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800169e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80016a4:	2320      	movs	r3, #32
 80016a6:	e003      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80016a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016aa:	fab3 f383 	clz	r3, r3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d105      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x3de>
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	0e9b      	lsrs	r3, r3, #26
 80016c4:	f003 031f 	and.w	r3, r3, #31
 80016c8:	e011      	b.n	80016ee <HAL_ADC_ConfigChannel+0x402>
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016d2:	fa93 f3a3 	rbit	r3, r3
 80016d6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80016d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016da:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80016dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80016e2:	2320      	movs	r3, #32
 80016e4:	e003      	b.n	80016ee <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80016e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016e8:	fab3 f383 	clz	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d106      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2200      	movs	r2, #0
 80016f8:	2103      	movs	r1, #3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fb90 	bl	8000e20 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fc6f 	bl	8000fe8 <LL_ADC_IsEnabled>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	f040 813f 	bne.w	8001990 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6818      	ldr	r0, [r3, #0]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	6819      	ldr	r1, [r3, #0]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	461a      	mov	r2, r3
 8001720:	f7ff fbf0 	bl	8000f04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	4a8e      	ldr	r2, [pc, #568]	; (8001964 <HAL_ADC_ConfigChannel+0x678>)
 800172a:	4293      	cmp	r3, r2
 800172c:	f040 8130 	bne.w	8001990 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800173c:	2b00      	cmp	r3, #0
 800173e:	d10b      	bne.n	8001758 <HAL_ADC_ConfigChannel+0x46c>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	0e9b      	lsrs	r3, r3, #26
 8001746:	3301      	adds	r3, #1
 8001748:	f003 031f 	and.w	r3, r3, #31
 800174c:	2b09      	cmp	r3, #9
 800174e:	bf94      	ite	ls
 8001750:	2301      	movls	r3, #1
 8001752:	2300      	movhi	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	e019      	b.n	800178c <HAL_ADC_ConfigChannel+0x4a0>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001760:	fa93 f3a3 	rbit	r3, r3
 8001764:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001766:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001768:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800176a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001770:	2320      	movs	r3, #32
 8001772:	e003      	b.n	800177c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001774:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001776:	fab3 f383 	clz	r3, r3
 800177a:	b2db      	uxtb	r3, r3
 800177c:	3301      	adds	r3, #1
 800177e:	f003 031f 	and.w	r3, r3, #31
 8001782:	2b09      	cmp	r3, #9
 8001784:	bf94      	ite	ls
 8001786:	2301      	movls	r3, #1
 8001788:	2300      	movhi	r3, #0
 800178a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800178c:	2b00      	cmp	r3, #0
 800178e:	d079      	beq.n	8001884 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001798:	2b00      	cmp	r3, #0
 800179a:	d107      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x4c0>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	0e9b      	lsrs	r3, r3, #26
 80017a2:	3301      	adds	r3, #1
 80017a4:	069b      	lsls	r3, r3, #26
 80017a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017aa:	e015      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x4ec>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017b4:	fa93 f3a3 	rbit	r3, r3
 80017b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80017ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80017be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80017c4:	2320      	movs	r3, #32
 80017c6:	e003      	b.n	80017d0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80017c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ca:	fab3 f383 	clz	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	3301      	adds	r3, #1
 80017d2:	069b      	lsls	r3, r3, #26
 80017d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d109      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x50c>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	0e9b      	lsrs	r3, r3, #26
 80017ea:	3301      	adds	r3, #1
 80017ec:	f003 031f 	and.w	r3, r3, #31
 80017f0:	2101      	movs	r1, #1
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	e017      	b.n	8001828 <HAL_ADC_ConfigChannel+0x53c>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001800:	fa93 f3a3 	rbit	r3, r3
 8001804:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001808:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800180a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001810:	2320      	movs	r3, #32
 8001812:	e003      	b.n	800181c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001816:	fab3 f383 	clz	r3, r3
 800181a:	b2db      	uxtb	r3, r3
 800181c:	3301      	adds	r3, #1
 800181e:	f003 031f 	and.w	r3, r3, #31
 8001822:	2101      	movs	r1, #1
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	ea42 0103 	orr.w	r1, r2, r3
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10a      	bne.n	800184e <HAL_ADC_ConfigChannel+0x562>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	0e9b      	lsrs	r3, r3, #26
 800183e:	3301      	adds	r3, #1
 8001840:	f003 021f 	and.w	r2, r3, #31
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	051b      	lsls	r3, r3, #20
 800184c:	e018      	b.n	8001880 <HAL_ADC_ConfigChannel+0x594>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001856:	fa93 f3a3 	rbit	r3, r3
 800185a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800185c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800185e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001866:	2320      	movs	r3, #32
 8001868:	e003      	b.n	8001872 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800186a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	3301      	adds	r3, #1
 8001874:	f003 021f 	and.w	r2, r3, #31
 8001878:	4613      	mov	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001880:	430b      	orrs	r3, r1
 8001882:	e080      	b.n	8001986 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800188c:	2b00      	cmp	r3, #0
 800188e:	d107      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x5b4>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	0e9b      	lsrs	r3, r3, #26
 8001896:	3301      	adds	r3, #1
 8001898:	069b      	lsls	r3, r3, #26
 800189a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800189e:	e015      	b.n	80018cc <HAL_ADC_ConfigChannel+0x5e0>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a8:	fa93 f3a3 	rbit	r3, r3
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80018ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80018b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80018b8:	2320      	movs	r3, #32
 80018ba:	e003      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80018bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018be:	fab3 f383 	clz	r3, r3
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	3301      	adds	r3, #1
 80018c6:	069b      	lsls	r3, r3, #26
 80018c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d109      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x600>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	0e9b      	lsrs	r3, r3, #26
 80018de:	3301      	adds	r3, #1
 80018e0:	f003 031f 	and.w	r3, r3, #31
 80018e4:	2101      	movs	r1, #1
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	e017      	b.n	800191c <HAL_ADC_ConfigChannel+0x630>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	61fb      	str	r3, [r7, #28]
  return result;
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001904:	2320      	movs	r3, #32
 8001906:	e003      	b.n	8001910 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	fab3 f383 	clz	r3, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	3301      	adds	r3, #1
 8001912:	f003 031f 	and.w	r3, r3, #31
 8001916:	2101      	movs	r1, #1
 8001918:	fa01 f303 	lsl.w	r3, r1, r3
 800191c:	ea42 0103 	orr.w	r1, r2, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10d      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x65c>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	0e9b      	lsrs	r3, r3, #26
 8001932:	3301      	adds	r3, #1
 8001934:	f003 021f 	and.w	r2, r3, #31
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	3b1e      	subs	r3, #30
 8001940:	051b      	lsls	r3, r3, #20
 8001942:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001946:	e01d      	b.n	8001984 <HAL_ADC_ConfigChannel+0x698>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	fa93 f3a3 	rbit	r3, r3
 8001954:	613b      	str	r3, [r7, #16]
  return result;
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d103      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001960:	2320      	movs	r3, #32
 8001962:	e005      	b.n	8001970 <HAL_ADC_ConfigChannel+0x684>
 8001964:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	fab3 f383 	clz	r3, r3
 800196e:	b2db      	uxtb	r3, r3
 8001970:	3301      	adds	r3, #1
 8001972:	f003 021f 	and.w	r2, r3, #31
 8001976:	4613      	mov	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4413      	add	r3, r2
 800197c:	3b1e      	subs	r3, #30
 800197e:	051b      	lsls	r3, r3, #20
 8001980:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001984:	430b      	orrs	r3, r1
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	6892      	ldr	r2, [r2, #8]
 800198a:	4619      	mov	r1, r3
 800198c:	f7ff fa8f 	bl	8000eae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b3d      	ldr	r3, [pc, #244]	; (8001a8c <HAL_ADC_ConfigChannel+0x7a0>)
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d06c      	beq.n	8001a76 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800199c:	483c      	ldr	r0, [pc, #240]	; (8001a90 <HAL_ADC_ConfigChannel+0x7a4>)
 800199e:	f7ff f9f7 	bl	8000d90 <LL_ADC_GetCommonPathInternalCh>
 80019a2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a3a      	ldr	r2, [pc, #232]	; (8001a94 <HAL_ADC_ConfigChannel+0x7a8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d127      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80019b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d121      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a35      	ldr	r2, [pc, #212]	; (8001a98 <HAL_ADC_ConfigChannel+0x7ac>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d157      	bne.n	8001a76 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019ce:	4619      	mov	r1, r3
 80019d0:	482f      	ldr	r0, [pc, #188]	; (8001a90 <HAL_ADC_ConfigChannel+0x7a4>)
 80019d2:	f7ff f9ca 	bl	8000d6a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019d6:	4b31      	ldr	r3, [pc, #196]	; (8001a9c <HAL_ADC_ConfigChannel+0x7b0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	099b      	lsrs	r3, r3, #6
 80019dc:	4a30      	ldr	r2, [pc, #192]	; (8001aa0 <HAL_ADC_ConfigChannel+0x7b4>)
 80019de:	fba2 2303 	umull	r2, r3, r2, r3
 80019e2:	099b      	lsrs	r3, r3, #6
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019f0:	e002      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f9      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019fe:	e03a      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a27      	ldr	r2, [pc, #156]	; (8001aa4 <HAL_ADC_ConfigChannel+0x7b8>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d113      	bne.n	8001a32 <HAL_ADC_ConfigChannel+0x746>
 8001a0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10d      	bne.n	8001a32 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a1f      	ldr	r2, [pc, #124]	; (8001a98 <HAL_ADC_ConfigChannel+0x7ac>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d12a      	bne.n	8001a76 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4819      	ldr	r0, [pc, #100]	; (8001a90 <HAL_ADC_ConfigChannel+0x7a4>)
 8001a2c:	f7ff f99d 	bl	8000d6a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a30:	e021      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d11c      	bne.n	8001a76 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d116      	bne.n	8001a76 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <HAL_ADC_ConfigChannel+0x7ac>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d111      	bne.n	8001a76 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480c      	ldr	r0, [pc, #48]	; (8001a90 <HAL_ADC_ConfigChannel+0x7a4>)
 8001a5e:	f7ff f984 	bl	8000d6a <LL_ADC_SetCommonPathInternalCh>
 8001a62:	e008      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a68:	f043 0220 	orr.w	r2, r3, #32
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001a7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	37d8      	adds	r7, #216	; 0xd8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	80080000 	.word	0x80080000
 8001a90:	50040300 	.word	0x50040300
 8001a94:	c7520000 	.word	0xc7520000
 8001a98:	50040000 	.word	0x50040000
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	053e2d63 	.word	0x053e2d63
 8001aa4:	cb840000 	.word	0xcb840000
 8001aa8:	80000001 	.word	0x80000001

08001aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ade:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	60d3      	str	r3, [r2, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <__NVIC_GetPriorityGrouping+0x18>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	f003 0307 	and.w	r3, r3, #7
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	db0b      	blt.n	8001b3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	f003 021f 	and.w	r2, r3, #31
 8001b28:	4907      	ldr	r1, [pc, #28]	; (8001b48 <__NVIC_EnableIRQ+0x38>)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	095b      	lsrs	r3, r3, #5
 8001b30:	2001      	movs	r0, #1
 8001b32:	fa00 f202 	lsl.w	r2, r0, r2
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000e100 	.word	0xe000e100

08001b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	db0a      	blt.n	8001b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	490c      	ldr	r1, [pc, #48]	; (8001b98 <__NVIC_SetPriority+0x4c>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	0112      	lsls	r2, r2, #4
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b74:	e00a      	b.n	8001b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4908      	ldr	r1, [pc, #32]	; (8001b9c <__NVIC_SetPriority+0x50>)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	3b04      	subs	r3, #4
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	440b      	add	r3, r1
 8001b8a:	761a      	strb	r2, [r3, #24]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000e100 	.word	0xe000e100
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f1c3 0307 	rsb	r3, r3, #7
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	bf28      	it	cs
 8001bbe:	2304      	movcs	r3, #4
 8001bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d902      	bls.n	8001bd0 <NVIC_EncodePriority+0x30>
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3b03      	subs	r3, #3
 8001bce:	e000      	b.n	8001bd2 <NVIC_EncodePriority+0x32>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	401a      	ands	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	43d9      	mvns	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	4313      	orrs	r3, r2
         );
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3724      	adds	r7, #36	; 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c18:	d301      	bcc.n	8001c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e00f      	b.n	8001c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <SysTick_Config+0x40>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c26:	210f      	movs	r1, #15
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	f7ff ff8e 	bl	8001b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <SysTick_Config+0x40>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c36:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <SysTick_Config+0x40>)
 8001c38:	2207      	movs	r2, #7
 8001c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	e000e010 	.word	0xe000e010

08001c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ff29 	bl	8001aac <__NVIC_SetPriorityGrouping>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c74:	f7ff ff3e 	bl	8001af4 <__NVIC_GetPriorityGrouping>
 8001c78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	68b9      	ldr	r1, [r7, #8]
 8001c7e:	6978      	ldr	r0, [r7, #20]
 8001c80:	f7ff ff8e 	bl	8001ba0 <NVIC_EncodePriority>
 8001c84:	4602      	mov	r2, r0
 8001c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff5d 	bl	8001b4c <__NVIC_SetPriority>
}
 8001c92:	bf00      	nop
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff31 	bl	8001b10 <__NVIC_EnableIRQ>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ffa2 	bl	8001c08 <SysTick_Config>
 8001cc4:	4603      	mov	r3, r0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e054      	b.n	8001d8c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	7f5b      	ldrb	r3, [r3, #29]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d105      	bne.n	8001cf8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7fe fb5e 	bl	80003b4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	791b      	ldrb	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10c      	bne.n	8001d20 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a22      	ldr	r2, [pc, #136]	; (8001d94 <HAL_CRC_Init+0xc4>)
 8001d0c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0218 	bic.w	r2, r2, #24
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	e00c      	b.n	8001d3a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6899      	ldr	r1, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f834 	bl	8001d98 <HAL_CRCEx_Polynomial_Set>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e028      	b.n	8001d8c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	795b      	ldrb	r3, [r3, #5]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d105      	bne.n	8001d4e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4a:	611a      	str	r2, [r3, #16]
 8001d4c:	e004      	b.n	8001d58 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6912      	ldr	r2, [r2, #16]
 8001d56:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699a      	ldr	r2, [r3, #24]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	04c11db7 	.word	0x04c11db7

08001d98 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001da8:	231f      	movs	r3, #31
 8001daa:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001dac:	bf00      	nop
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1e5a      	subs	r2, r3, #1
 8001db2:	613a      	str	r2, [r7, #16]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d009      	beq.n	8001dcc <HAL_CRCEx_Polynomial_Set+0x34>
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	f003 031f 	and.w	r3, r3, #31
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b18      	cmp	r3, #24
 8001dd0:	d846      	bhi.n	8001e60 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001dd2:	a201      	add	r2, pc, #4	; (adr r2, 8001dd8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd8:	08001e67 	.word	0x08001e67
 8001ddc:	08001e61 	.word	0x08001e61
 8001de0:	08001e61 	.word	0x08001e61
 8001de4:	08001e61 	.word	0x08001e61
 8001de8:	08001e61 	.word	0x08001e61
 8001dec:	08001e61 	.word	0x08001e61
 8001df0:	08001e61 	.word	0x08001e61
 8001df4:	08001e61 	.word	0x08001e61
 8001df8:	08001e55 	.word	0x08001e55
 8001dfc:	08001e61 	.word	0x08001e61
 8001e00:	08001e61 	.word	0x08001e61
 8001e04:	08001e61 	.word	0x08001e61
 8001e08:	08001e61 	.word	0x08001e61
 8001e0c:	08001e61 	.word	0x08001e61
 8001e10:	08001e61 	.word	0x08001e61
 8001e14:	08001e61 	.word	0x08001e61
 8001e18:	08001e49 	.word	0x08001e49
 8001e1c:	08001e61 	.word	0x08001e61
 8001e20:	08001e61 	.word	0x08001e61
 8001e24:	08001e61 	.word	0x08001e61
 8001e28:	08001e61 	.word	0x08001e61
 8001e2c:	08001e61 	.word	0x08001e61
 8001e30:	08001e61 	.word	0x08001e61
 8001e34:	08001e61 	.word	0x08001e61
 8001e38:	08001e3d 	.word	0x08001e3d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d913      	bls.n	8001e6a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001e46:	e010      	b.n	8001e6a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	2b07      	cmp	r3, #7
 8001e4c:	d90f      	bls.n	8001e6e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001e52:	e00c      	b.n	8001e6e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	2b0f      	cmp	r3, #15
 8001e58:	d90b      	bls.n	8001e72 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001e5e:	e008      	b.n	8001e72 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	75fb      	strb	r3, [r7, #23]
      break;
 8001e64:	e006      	b.n	8001e74 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001e66:	bf00      	nop
 8001e68:	e004      	b.n	8001e74 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001e6a:	bf00      	nop
 8001e6c:	e002      	b.n	8001e74 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001e6e:	bf00      	nop
 8001e70:	e000      	b.n	8001e74 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001e72:	bf00      	nop
  }
  if (status == HAL_OK)
 8001e74:	7dfb      	ldrb	r3, [r7, #23]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10d      	bne.n	8001e96 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f023 0118 	bic.w	r1, r3, #24
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	371c      	adds	r7, #28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e014      	b.n	8001ee0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	791b      	ldrb	r3, [r3, #4]
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d105      	bne.n	8001ecc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe fad0 	bl	800046c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	795b      	ldrb	r3, [r3, #5]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_DAC_ConfigChannel+0x1c>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e107      	b.n	8002114 <HAL_DAC_ConfigChannel+0x22c>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2201      	movs	r2, #1
 8001f08:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d174      	bne.n	8002002 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001f18:	f7fe fee4 	bl	8000ce4 <HAL_GetTick>
 8001f1c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d134      	bne.n	8001f8e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001f24:	e011      	b.n	8001f4a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001f26:	f7fe fedd 	bl	8000ce4 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d90a      	bls.n	8001f4a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	f043 0208 	orr.w	r2, r3, #8
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2203      	movs	r2, #3
 8001f44:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e0e4      	b.n	8002114 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1e6      	bne.n	8001f26 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001f58:	2001      	movs	r0, #1
 8001f5a:	f7fe fecf 	bl	8000cfc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	6992      	ldr	r2, [r2, #24]
 8001f66:	641a      	str	r2, [r3, #64]	; 0x40
 8001f68:	e01e      	b.n	8001fa8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001f6a:	f7fe febb 	bl	8000ce4 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d90a      	bls.n	8001f8e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	f043 0208 	orr.w	r2, r3, #8
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2203      	movs	r2, #3
 8001f88:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e0c2      	b.n	8002114 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	dbe8      	blt.n	8001f6a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001f98:	2001      	movs	r0, #1
 8001f9a:	f7fe feaf 	bl	8000cfc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	6992      	ldr	r2, [r2, #24]
 8001fa6:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	ea02 0103 	and.w	r1, r2, r3
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	69da      	ldr	r2, [r3, #28]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	21ff      	movs	r1, #255	; 0xff
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	ea02 0103 	and.w	r1, r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	6a1a      	ldr	r2, [r3, #32]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d11d      	bne.n	8002046 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002010:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	221f      	movs	r2, #31
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	2207      	movs	r2, #7
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	431a      	orrs	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6819      	ldr	r1, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43da      	mvns	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	400a      	ands	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	f640 72fc 	movw	r2, #4092	; 0xffc
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6819      	ldr	r1, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	22c0      	movs	r2, #192	; 0xc0
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43da      	mvns	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	400a      	ands	r2, r1
 8002104:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2201      	movs	r2, #1
 800210a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e098      	b.n	8002260 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	4b4d      	ldr	r3, [pc, #308]	; (800226c <HAL_DMA_Init+0x150>)
 8002136:	429a      	cmp	r2, r3
 8002138:	d80f      	bhi.n	800215a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	4b4b      	ldr	r3, [pc, #300]	; (8002270 <HAL_DMA_Init+0x154>)
 8002142:	4413      	add	r3, r2
 8002144:	4a4b      	ldr	r2, [pc, #300]	; (8002274 <HAL_DMA_Init+0x158>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	009a      	lsls	r2, r3, #2
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a48      	ldr	r2, [pc, #288]	; (8002278 <HAL_DMA_Init+0x15c>)
 8002156:	641a      	str	r2, [r3, #64]	; 0x40
 8002158:	e00e      	b.n	8002178 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	4b46      	ldr	r3, [pc, #280]	; (800227c <HAL_DMA_Init+0x160>)
 8002162:	4413      	add	r3, r2
 8002164:	4a43      	ldr	r2, [pc, #268]	; (8002274 <HAL_DMA_Init+0x158>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	091b      	lsrs	r3, r3, #4
 800216c:	009a      	lsls	r2, r3, #2
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a42      	ldr	r2, [pc, #264]	; (8002280 <HAL_DMA_Init+0x164>)
 8002176:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800218e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002192:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800219c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	4313      	orrs	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021d2:	d039      	beq.n	8002248 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	4a27      	ldr	r2, [pc, #156]	; (8002278 <HAL_DMA_Init+0x15c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d11a      	bne.n	8002214 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80021de:	4b29      	ldr	r3, [pc, #164]	; (8002284 <HAL_DMA_Init+0x168>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	f003 031c 	and.w	r3, r3, #28
 80021ea:	210f      	movs	r1, #15
 80021ec:	fa01 f303 	lsl.w	r3, r1, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	4924      	ldr	r1, [pc, #144]	; (8002284 <HAL_DMA_Init+0x168>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80021f8:	4b22      	ldr	r3, [pc, #136]	; (8002284 <HAL_DMA_Init+0x168>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6859      	ldr	r1, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	f003 031c 	and.w	r3, r3, #28
 8002208:	fa01 f303 	lsl.w	r3, r1, r3
 800220c:	491d      	ldr	r1, [pc, #116]	; (8002284 <HAL_DMA_Init+0x168>)
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
 8002212:	e019      	b.n	8002248 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002214:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <HAL_DMA_Init+0x16c>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221c:	f003 031c 	and.w	r3, r3, #28
 8002220:	210f      	movs	r1, #15
 8002222:	fa01 f303 	lsl.w	r3, r1, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	4917      	ldr	r1, [pc, #92]	; (8002288 <HAL_DMA_Init+0x16c>)
 800222a:	4013      	ands	r3, r2
 800222c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800222e:	4b16      	ldr	r3, [pc, #88]	; (8002288 <HAL_DMA_Init+0x16c>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6859      	ldr	r1, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	f003 031c 	and.w	r3, r3, #28
 800223e:	fa01 f303 	lsl.w	r3, r1, r3
 8002242:	4911      	ldr	r1, [pc, #68]	; (8002288 <HAL_DMA_Init+0x16c>)
 8002244:	4313      	orrs	r3, r2
 8002246:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	40020407 	.word	0x40020407
 8002270:	bffdfff8 	.word	0xbffdfff8
 8002274:	cccccccd 	.word	0xcccccccd
 8002278:	40020000 	.word	0x40020000
 800227c:	bffdfbf8 	.word	0xbffdfbf8
 8002280:	40020400 	.word	0x40020400
 8002284:	400200a8 	.word	0x400200a8
 8002288:	400204a8 	.word	0x400204a8

0800228c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a8:	f003 031c 	and.w	r3, r3, #28
 80022ac:	2204      	movs	r2, #4
 80022ae:	409a      	lsls	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d026      	beq.n	8002306 <HAL_DMA_IRQHandler+0x7a>
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d021      	beq.n	8002306 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0320 	and.w	r3, r3, #32
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d107      	bne.n	80022e0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0204 	bic.w	r2, r2, #4
 80022de:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e4:	f003 021c 	and.w	r2, r3, #28
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	2104      	movs	r1, #4
 80022ee:	fa01 f202 	lsl.w	r2, r1, r2
 80022f2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d071      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002304:	e06c      	b.n	80023e0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	f003 031c 	and.w	r3, r3, #28
 800230e:	2202      	movs	r2, #2
 8002310:	409a      	lsls	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4013      	ands	r3, r2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d02e      	beq.n	8002378 <HAL_DMA_IRQHandler+0xec>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d029      	beq.n	8002378 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10b      	bne.n	800234a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 020a 	bic.w	r2, r2, #10
 8002340:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	f003 021c 	and.w	r2, r3, #28
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	2102      	movs	r1, #2
 8002358:	fa01 f202 	lsl.w	r2, r1, r2
 800235c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236a:	2b00      	cmp	r3, #0
 800236c:	d038      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002376:	e033      	b.n	80023e0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	f003 031c 	and.w	r3, r3, #28
 8002380:	2208      	movs	r2, #8
 8002382:	409a      	lsls	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4013      	ands	r3, r2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d02a      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x156>
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d025      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 020e 	bic.w	r2, r2, #14
 80023a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	f003 021c 	and.w	r2, r3, #28
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	2101      	movs	r1, #1
 80023b4:	fa01 f202 	lsl.w	r2, r1, r2
 80023b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d004      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
}
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023fa:	e154      	b.n	80026a6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2101      	movs	r1, #1
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	fa01 f303 	lsl.w	r3, r1, r3
 8002408:	4013      	ands	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8146 	beq.w	80026a0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	2b01      	cmp	r3, #1
 800241e:	d005      	beq.n	800242c <HAL_GPIO_Init+0x40>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d130      	bne.n	800248e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	2203      	movs	r2, #3
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002462:	2201      	movs	r2, #1
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	091b      	lsrs	r3, r3, #4
 8002478:	f003 0201 	and.w	r2, r3, #1
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b03      	cmp	r3, #3
 8002498:	d017      	beq.n	80024ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	2203      	movs	r2, #3
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d123      	bne.n	800251e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	08da      	lsrs	r2, r3, #3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3208      	adds	r2, #8
 80024de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	220f      	movs	r2, #15
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	08da      	lsrs	r2, r3, #3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3208      	adds	r2, #8
 8002518:	6939      	ldr	r1, [r7, #16]
 800251a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	2203      	movs	r2, #3
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0203 	and.w	r2, r3, #3
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 80a0 	beq.w	80026a0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002560:	4b58      	ldr	r3, [pc, #352]	; (80026c4 <HAL_GPIO_Init+0x2d8>)
 8002562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002564:	4a57      	ldr	r2, [pc, #348]	; (80026c4 <HAL_GPIO_Init+0x2d8>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	6613      	str	r3, [r2, #96]	; 0x60
 800256c:	4b55      	ldr	r3, [pc, #340]	; (80026c4 <HAL_GPIO_Init+0x2d8>)
 800256e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002578:	4a53      	ldr	r2, [pc, #332]	; (80026c8 <HAL_GPIO_Init+0x2dc>)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	089b      	lsrs	r3, r3, #2
 800257e:	3302      	adds	r3, #2
 8002580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002584:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	220f      	movs	r2, #15
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025a2:	d019      	beq.n	80025d8 <HAL_GPIO_Init+0x1ec>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a49      	ldr	r2, [pc, #292]	; (80026cc <HAL_GPIO_Init+0x2e0>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d013      	beq.n	80025d4 <HAL_GPIO_Init+0x1e8>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a48      	ldr	r2, [pc, #288]	; (80026d0 <HAL_GPIO_Init+0x2e4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d00d      	beq.n	80025d0 <HAL_GPIO_Init+0x1e4>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a47      	ldr	r2, [pc, #284]	; (80026d4 <HAL_GPIO_Init+0x2e8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d007      	beq.n	80025cc <HAL_GPIO_Init+0x1e0>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a46      	ldr	r2, [pc, #280]	; (80026d8 <HAL_GPIO_Init+0x2ec>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d101      	bne.n	80025c8 <HAL_GPIO_Init+0x1dc>
 80025c4:	2304      	movs	r3, #4
 80025c6:	e008      	b.n	80025da <HAL_GPIO_Init+0x1ee>
 80025c8:	2307      	movs	r3, #7
 80025ca:	e006      	b.n	80025da <HAL_GPIO_Init+0x1ee>
 80025cc:	2303      	movs	r3, #3
 80025ce:	e004      	b.n	80025da <HAL_GPIO_Init+0x1ee>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e002      	b.n	80025da <HAL_GPIO_Init+0x1ee>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <HAL_GPIO_Init+0x1ee>
 80025d8:	2300      	movs	r3, #0
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	f002 0203 	and.w	r2, r2, #3
 80025e0:	0092      	lsls	r2, r2, #2
 80025e2:	4093      	lsls	r3, r2
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025ea:	4937      	ldr	r1, [pc, #220]	; (80026c8 <HAL_GPIO_Init+0x2dc>)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	089b      	lsrs	r3, r3, #2
 80025f0:	3302      	adds	r3, #2
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025f8:	4b38      	ldr	r3, [pc, #224]	; (80026dc <HAL_GPIO_Init+0x2f0>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	43db      	mvns	r3, r3
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	4013      	ands	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800261c:	4a2f      	ldr	r2, [pc, #188]	; (80026dc <HAL_GPIO_Init+0x2f0>)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002622:	4b2e      	ldr	r3, [pc, #184]	; (80026dc <HAL_GPIO_Init+0x2f0>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	43db      	mvns	r3, r3
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4013      	ands	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002646:	4a25      	ldr	r2, [pc, #148]	; (80026dc <HAL_GPIO_Init+0x2f0>)
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800264c:	4b23      	ldr	r3, [pc, #140]	; (80026dc <HAL_GPIO_Init+0x2f0>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	43db      	mvns	r3, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002670:	4a1a      	ldr	r2, [pc, #104]	; (80026dc <HAL_GPIO_Init+0x2f0>)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002676:	4b19      	ldr	r3, [pc, #100]	; (80026dc <HAL_GPIO_Init+0x2f0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	43db      	mvns	r3, r3
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800269a:	4a10      	ldr	r2, [pc, #64]	; (80026dc <HAL_GPIO_Init+0x2f0>)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	3301      	adds	r3, #1
 80026a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f47f aea3 	bne.w	80023fc <HAL_GPIO_Init+0x10>
  }
}
 80026b6:	bf00      	nop
 80026b8:	bf00      	nop
 80026ba:	371c      	adds	r7, #28
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40010000 	.word	0x40010000
 80026cc:	48000400 	.word	0x48000400
 80026d0:	48000800 	.word	0x48000800
 80026d4:	48000c00 	.word	0x48000c00
 80026d8:	48001000 	.word	0x48001000
 80026dc:	40010400 	.word	0x40010400

080026e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	807b      	strh	r3, [r7, #2]
 80026ec:	4613      	mov	r3, r2
 80026ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f0:	787b      	ldrb	r3, [r7, #1]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026f6:	887a      	ldrh	r2, [r7, #2]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026fc:	e002      	b.n	8002704 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026fe:	887a      	ldrh	r2, [r7, #2]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	b08b      	sub	sp, #44	; 0x2c
 8002714:	af06      	add	r7, sp, #24
 8002716:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e109      	b.n	8002936 <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f007 fa2a 	bl	8009b90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2203      	movs	r2, #3
 8002740:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f003 f909 	bl	8005960 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	687e      	ldr	r6, [r7, #4]
 8002756:	466d      	mov	r5, sp
 8002758:	f106 0410 	add.w	r4, r6, #16
 800275c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800275e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002760:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002764:	e885 0003 	stmia.w	r5, {r0, r1}
 8002768:	1d33      	adds	r3, r6, #4
 800276a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800276c:	6838      	ldr	r0, [r7, #0]
 800276e:	f003 f8cf 	bl	8005910 <USB_CoreInit>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0d8      	b.n	8002936 <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2100      	movs	r1, #0
 800278a:	4618      	mov	r0, r3
 800278c:	f003 f903 	bl	8005996 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002790:	2300      	movs	r3, #0
 8002792:	73fb      	strb	r3, [r7, #15]
 8002794:	e04d      	b.n	8002832 <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	440b      	add	r3, r1
 80027a6:	3305      	adds	r3, #5
 80027a8:	2201      	movs	r2, #1
 80027aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	440b      	add	r3, r1
 80027bc:	3304      	adds	r3, #4
 80027be:	7bfa      	ldrb	r2, [r7, #15]
 80027c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027c2:	7bfa      	ldrb	r2, [r7, #15]
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	b298      	uxth	r0, r3
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	440b      	add	r3, r1
 80027d4:	333a      	adds	r3, #58	; 0x3a
 80027d6:	4602      	mov	r2, r0
 80027d8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	440b      	add	r3, r1
 80027ea:	3307      	adds	r3, #7
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027f0:	7bfa      	ldrb	r2, [r7, #15]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	440b      	add	r3, r1
 80027fe:	333c      	adds	r3, #60	; 0x3c
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002804:	7bfa      	ldrb	r2, [r7, #15]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	440b      	add	r3, r1
 8002812:	3340      	adds	r3, #64	; 0x40
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002818:	7bfa      	ldrb	r2, [r7, #15]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	440b      	add	r3, r1
 8002826:	3344      	adds	r3, #68	; 0x44
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	3301      	adds	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
 8002832:	7bfa      	ldrb	r2, [r7, #15]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	429a      	cmp	r2, r3
 800283a:	d3ac      	bcc.n	8002796 <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800283c:	2300      	movs	r3, #0
 800283e:	73fb      	strb	r3, [r7, #15]
 8002840:	e044      	b.n	80028cc <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002842:	7bfa      	ldrb	r2, [r7, #15]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	440b      	add	r3, r1
 8002850:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002858:	7bfa      	ldrb	r2, [r7, #15]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	440b      	add	r3, r1
 8002866:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800286a:	7bfa      	ldrb	r2, [r7, #15]
 800286c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800286e:	7bfa      	ldrb	r2, [r7, #15]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	440b      	add	r3, r1
 800287c:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002884:	7bfa      	ldrb	r2, [r7, #15]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	440b      	add	r3, r1
 8002892:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800289a:	7bfa      	ldrb	r2, [r7, #15]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	440b      	add	r3, r1
 80028a8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028b0:	7bfa      	ldrb	r2, [r7, #15]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	440b      	add	r3, r1
 80028be:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	3301      	adds	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d3b5      	bcc.n	8002842 <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	687e      	ldr	r6, [r7, #4]
 80028de:	466d      	mov	r5, sp
 80028e0:	f106 0410 	add.w	r4, r6, #16
 80028e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80028f0:	1d33      	adds	r3, r6, #4
 80028f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f4:	6838      	ldr	r0, [r7, #0]
 80028f6:	f003 f85b 	bl	80059b0 <USB_DevInit>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e014      	b.n	8002936 <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d102      	bne.n	800292a <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f001 fc55 	bl	80041d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f005 fa67 	bl	8007e02 <USB_DevDisconnect>

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800293e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_PCD_Start+0x16>
 8002950:	2302      	movs	r3, #2
 8002952:	e012      	b.n	800297a <HAL_PCD_Start+0x3c>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f002 ffe6 	bl	8005932 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f005 fa32 	bl	8007dd4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f005 fa4c 	bl	8007e2c <USB_ReadInterrupts>
 8002994:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fb3e 	bl	8003022 <PCD_EP_ISR_Handler>

    return;
 80029a6:	e110      	b.n	8002bca <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d013      	beq.n	80029da <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c4:	b292      	uxth	r2, r2
 80029c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f007 f95b 	bl	8009c86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80029d0:	2100      	movs	r1, #0
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f8fc 	bl	8002bd0 <HAL_PCD_SetAddress>

    return;
 80029d8:	e0f7      	b.n	8002bca <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00c      	beq.n	80029fe <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029f6:	b292      	uxth	r2, r2
 80029f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80029fc:	e0e5      	b.n	8002bca <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00c      	beq.n	8002a22 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a1a:	b292      	uxth	r2, r2
 8002a1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002a20:	e0d3      	b.n	8002bca <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d034      	beq.n	8002a96 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0204 	bic.w	r2, r2, #4
 8002a3e:	b292      	uxth	r2, r2
 8002a40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0208 	bic.w	r2, r2, #8
 8002a56:	b292      	uxth	r2, r2
 8002a58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d107      	bne.n	8002a76 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a6e:	2100      	movs	r1, #0
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f007 fbb9 	bl	800a1e8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f007 f93e 	bl	8009cf8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a8e:	b292      	uxth	r2, r2
 8002a90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002a94:	e099      	b.n	8002bca <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d027      	beq.n	8002af0 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0208 	orr.w	r2, r2, #8
 8002ab2:	b292      	uxth	r2, r2
 8002ab4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aca:	b292      	uxth	r2, r2
 8002acc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0204 	orr.w	r2, r2, #4
 8002ae2:	b292      	uxth	r2, r2
 8002ae4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f007 f8eb 	bl	8009cc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002aee:	e06c      	b.n	8002bca <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d040      	beq.n	8002b7c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b0c:	b292      	uxth	r2, r2
 8002b0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d12b      	bne.n	8002b74 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0204 	orr.w	r2, r2, #4
 8002b2e:	b292      	uxth	r2, r2
 8002b30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0208 	orr.w	r2, r2, #8
 8002b46:	b292      	uxth	r2, r2
 8002b48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	089b      	lsrs	r3, r3, #2
 8002b60:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f007 fb3b 	bl	800a1e8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002b72:	e02a      	b.n	8002bca <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f007 f8a5 	bl	8009cc4 <HAL_PCD_SuspendCallback>
    return;
 8002b7a:	e026      	b.n	8002bca <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00f      	beq.n	8002ba6 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b98:	b292      	uxth	r2, r2
 8002b9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f007 f863 	bl	8009c6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002ba4:	e011      	b.n	8002bca <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00c      	beq.n	8002bca <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bc2:	b292      	uxth	r2, r2
 8002bc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002bc8:	bf00      	nop
  }
}
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_PCD_SetAddress+0x1a>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e013      	b.n	8002c12 <HAL_PCD_SetAddress+0x42>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	4611      	mov	r1, r2
 8002c02:	4618      	mov	r0, r3
 8002c04:	f005 f8d2 	bl	8007dac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	4608      	mov	r0, r1
 8002c24:	4611      	mov	r1, r2
 8002c26:	461a      	mov	r2, r3
 8002c28:	4603      	mov	r3, r0
 8002c2a:	70fb      	strb	r3, [r7, #3]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	803b      	strh	r3, [r7, #0]
 8002c30:	4613      	mov	r3, r2
 8002c32:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	da0f      	bge.n	8002c60 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c40:	78fb      	ldrb	r3, [r7, #3]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	4413      	add	r3, r2
 8002c54:	3304      	adds	r3, #4
 8002c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	705a      	strb	r2, [r3, #1]
 8002c5e:	e00f      	b.n	8002c80 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	f003 0207 	and.w	r2, r3, #7
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	3304      	adds	r3, #4
 8002c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c8c:	883a      	ldrh	r2, [r7, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	78ba      	ldrb	r2, [r7, #2]
 8002c96:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	785b      	ldrb	r3, [r3, #1]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d004      	beq.n	8002caa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002caa:	78bb      	ldrb	r3, [r7, #2]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d102      	bne.n	8002cb6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_PCD_EP_Open+0xaa>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e00e      	b.n	8002ce2 <HAL_PCD_EP_Open+0xc8>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68f9      	ldr	r1, [r7, #12]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f002 fe8e 	bl	80059f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8002ce0:	7afb      	ldrb	r3, [r7, #11]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	da0f      	bge.n	8002d1e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	4413      	add	r3, r2
 8002d12:	3304      	adds	r3, #4
 8002d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	705a      	strb	r2, [r3, #1]
 8002d1c:	e00f      	b.n	8002d3e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d1e:	78fb      	ldrb	r3, [r7, #3]
 8002d20:	f003 0207 	and.w	r2, r3, #7
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	4413      	add	r3, r2
 8002d34:	3304      	adds	r3, #4
 8002d36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_PCD_EP_Close+0x6e>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e00e      	b.n	8002d76 <HAL_PCD_EP_Close+0x8c>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68f9      	ldr	r1, [r7, #12]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f003 f9fe 	bl	8006168 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b086      	sub	sp, #24
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d8e:	7afb      	ldrb	r3, [r7, #11]
 8002d90:	f003 0207 	and.w	r2, r3, #7
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	4413      	add	r3, r2
 8002da4:	3304      	adds	r3, #4
 8002da6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2200      	movs	r2, #0
 8002db8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dc0:	7afb      	ldrb	r3, [r7, #11]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dcc:	7afb      	ldrb	r3, [r7, #11]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6979      	ldr	r1, [r7, #20]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f003 fbb0 	bl	8006542 <USB_EPStartXfer>
 8002de2:	e005      	b.n	8002df0 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6979      	ldr	r1, [r7, #20]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f003 fba9 	bl	8006542 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	460b      	mov	r3, r1
 8002e04:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	f003 0207 	and.w	r2, r3, #7
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	440b      	add	r3, r1
 8002e18:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002e1c:	681b      	ldr	r3, [r3, #0]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b086      	sub	sp, #24
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
 8002e36:	460b      	mov	r3, r1
 8002e38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e3a:	7afb      	ldrb	r3, [r7, #11]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3304      	adds	r3, #4
 8002e50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2201      	movs	r2, #1
 8002e76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e78:	7afb      	ldrb	r3, [r7, #11]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e84:	7afb      	ldrb	r3, [r7, #11]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6979      	ldr	r1, [r7, #20]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f003 fb54 	bl	8006542 <USB_EPStartXfer>
 8002e9a:	e005      	b.n	8002ea8 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6979      	ldr	r1, [r7, #20]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f003 fb4d 	bl	8006542 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ebe:	78fb      	ldrb	r3, [r7, #3]
 8002ec0:	f003 0207 	and.w	r2, r3, #7
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d901      	bls.n	8002ed0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e04e      	b.n	8002f6e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ed0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	da0f      	bge.n	8002ef8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed8:	78fb      	ldrb	r3, [r7, #3]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	4413      	add	r3, r2
 8002eec:	3304      	adds	r3, #4
 8002eee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	705a      	strb	r2, [r3, #1]
 8002ef6:	e00d      	b.n	8002f14 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2201      	movs	r2, #1
 8002f18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_PCD_EP_SetStall+0x82>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e01c      	b.n	8002f6e <HAL_PCD_EP_SetStall+0xbc>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68f9      	ldr	r1, [r7, #12]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f004 fe33 	bl	8007bae <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d108      	bne.n	8002f64 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4610      	mov	r0, r2
 8002f60:	f004 ff74 	bl	8007e4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	f003 020f 	and.w	r2, r3, #15
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d901      	bls.n	8002f94 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e042      	b.n	800301a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	da0f      	bge.n	8002fbc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f9c:	78fb      	ldrb	r3, [r7, #3]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	4413      	add	r3, r2
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	705a      	strb	r2, [r3, #1]
 8002fba:	e00f      	b.n	8002fdc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	f003 0207 	and.w	r2, r3, #7
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fe2:	78fb      	ldrb	r3, [r7, #3]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_PCD_EP_ClrStall+0x86>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e00e      	b.n	800301a <HAL_PCD_EP_ClrStall+0xa4>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68f9      	ldr	r1, [r7, #12]
 800300a:	4618      	mov	r0, r3
 800300c:	f004 fe20 	bl	8007c50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b096      	sub	sp, #88	; 0x58
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800302a:	e3a9      	b.n	8003780 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003034:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003038:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8003046:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800304a:	2b00      	cmp	r3, #0
 800304c:	f040 8169 	bne.w	8003322 <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003050:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	2b00      	cmp	r3, #0
 800305a:	d150      	bne.n	80030fe <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306c:	81fb      	strh	r3, [r7, #14]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	89fb      	ldrh	r3, [r7, #14]
 8003074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800307c:	b29b      	uxth	r3, r3
 800307e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	332c      	adds	r3, #44	; 0x2c
 8003084:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800308e:	b29b      	uxth	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6812      	ldr	r2, [r2, #0]
 800309e:	4413      	add	r3, r2
 80030a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80030ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b0:	695a      	ldr	r2, [r3, #20]
 80030b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	441a      	add	r2, r3
 80030b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ba:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80030bc:	2100      	movs	r1, #0
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f006 fdb9 	bl	8009c36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 8357 	beq.w	8003780 <PCD_EP_ISR_Handler+0x75e>
 80030d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f040 8352 	bne.w	8003780 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	b292      	uxth	r2, r2
 80030f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80030fc:	e340      	b.n	8003780 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003104:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003110:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003114:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003118:	2b00      	cmp	r3, #0
 800311a:	d032      	beq.n	8003182 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003124:	b29b      	uxth	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4413      	add	r3, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6812      	ldr	r2, [r2, #0]
 8003134:	4413      	add	r3, r2
 8003136:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003142:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 800314e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003150:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003154:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003156:	b29b      	uxth	r3, r3
 8003158:	f004 fec6 	bl	8007ee8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	b29a      	uxth	r2, r3
 8003164:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003168:	4013      	ands	r3, r2
 800316a:	823b      	strh	r3, [r7, #16]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	8a3a      	ldrh	r2, [r7, #16]
 8003172:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003176:	b292      	uxth	r2, r2
 8003178:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f006 fd2e 	bl	8009bdc <HAL_PCD_SetupStageCallback>
 8003180:	e2fe      	b.n	8003780 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003182:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8003186:	2b00      	cmp	r3, #0
 8003188:	f280 82fa 	bge.w	8003780 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	b29a      	uxth	r2, r3
 8003194:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003198:	4013      	ands	r3, r2
 800319a:	83fb      	strh	r3, [r7, #30]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	8bfa      	ldrh	r2, [r7, #30]
 80031a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031a6:	b292      	uxth	r2, r2
 80031a8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6812      	ldr	r2, [r2, #0]
 80031c2:	4413      	add	r3, r2
 80031c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80031d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d019      	beq.n	800320e <PCD_EP_ISR_Handler+0x1ec>
 80031da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d015      	beq.n	800320e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6818      	ldr	r0, [r3, #0]
 80031e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031e8:	6959      	ldr	r1, [r3, #20]
 80031ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ec:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80031ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	f004 fe78 	bl	8007ee8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80031f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031fa:	695a      	ldr	r2, [r3, #20]
 80031fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	441a      	add	r2, r3
 8003202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003204:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003206:	2100      	movs	r1, #0
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f006 fcf9 	bl	8009c00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003218:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800321c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003220:	2b00      	cmp	r3, #0
 8003222:	f040 82ad 	bne.w	8003780 <PCD_EP_ISR_Handler+0x75e>
 8003226:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800322a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800322e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003232:	f000 82a5 	beq.w	8003780 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	61bb      	str	r3, [r7, #24]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003244:	b29b      	uxth	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	4413      	add	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	2b3e      	cmp	r3, #62	; 0x3e
 800325c:	d918      	bls.n	8003290 <PCD_EP_ISR_Handler+0x26e>
 800325e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	647b      	str	r3, [r7, #68]	; 0x44
 8003266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f003 031f 	and.w	r3, r3, #31
 800326e:	2b00      	cmp	r3, #0
 8003270:	d102      	bne.n	8003278 <PCD_EP_ISR_Handler+0x256>
 8003272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003274:	3b01      	subs	r3, #1
 8003276:	647b      	str	r3, [r7, #68]	; 0x44
 8003278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800327a:	b29b      	uxth	r3, r3
 800327c:	029b      	lsls	r3, r3, #10
 800327e:	b29b      	uxth	r3, r3
 8003280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003288:	b29a      	uxth	r2, r3
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	801a      	strh	r2, [r3, #0]
 800328e:	e029      	b.n	80032e4 <PCD_EP_ISR_Handler+0x2c2>
 8003290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d112      	bne.n	80032be <PCD_EP_ISR_Handler+0x29c>
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	b29b      	uxth	r3, r3
 800329e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	801a      	strh	r2, [r3, #0]
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	801a      	strh	r2, [r3, #0]
 80032bc:	e012      	b.n	80032e4 <PCD_EP_ISR_Handler+0x2c2>
 80032be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	085b      	lsrs	r3, r3, #1
 80032c4:	647b      	str	r3, [r7, #68]	; 0x44
 80032c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <PCD_EP_ISR_Handler+0x2b6>
 80032d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032d4:	3301      	adds	r3, #1
 80032d6:	647b      	str	r3, [r7, #68]	; 0x44
 80032d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032da:	b29b      	uxth	r3, r3
 80032dc:	029b      	lsls	r3, r3, #10
 80032de:	b29a      	uxth	r2, r3
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f4:	827b      	strh	r3, [r7, #18]
 80032f6:	8a7b      	ldrh	r3, [r7, #18]
 80032f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80032fc:	827b      	strh	r3, [r7, #18]
 80032fe:	8a7b      	ldrh	r3, [r7, #18]
 8003300:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003304:	827b      	strh	r3, [r7, #18]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	8a7b      	ldrh	r3, [r7, #18]
 800330c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800331c:	b29b      	uxth	r3, r3
 800331e:	8013      	strh	r3, [r2, #0]
 8003320:	e22e      	b.n	8003780 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003336:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800333a:	2b00      	cmp	r3, #0
 800333c:	f280 80f7 	bge.w	800352e <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	b29a      	uxth	r2, r3
 8003352:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003356:	4013      	ands	r3, r2
 8003358:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800336e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003372:	b292      	uxth	r2, r2
 8003374:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003376:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	4413      	add	r3, r2
 800338a:	3304      	adds	r3, #4
 800338c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800338e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003390:	7b1b      	ldrb	r3, [r3, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d123      	bne.n	80033de <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800339e:	b29b      	uxth	r3, r3
 80033a0:	461a      	mov	r2, r3
 80033a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4413      	add	r3, r2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6812      	ldr	r2, [r2, #0]
 80033ae:	4413      	add	r3, r2
 80033b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033ba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80033be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 808e 	beq.w	80034e4 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ce:	6959      	ldr	r1, [r3, #20]
 80033d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d2:	88da      	ldrh	r2, [r3, #6]
 80033d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033d8:	f004 fd86 	bl	8007ee8 <USB_ReadPMA>
 80033dc:	e082      	b.n	80034e4 <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80033de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033e0:	78db      	ldrb	r3, [r3, #3]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d10a      	bne.n	80033fc <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80033e6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80033ea:	461a      	mov	r2, r3
 80033ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f9d4 	bl	800379c <HAL_PCD_EP_DB_Receive>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80033fa:	e073      	b.n	80034e4 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	b29b      	uxth	r3, r3
 800340e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003416:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	441a      	add	r2, r3
 8003428:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800342c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003430:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003438:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800343c:	b29b      	uxth	r3, r3
 800343e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	b29b      	uxth	r3, r3
 8003452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d022      	beq.n	80034a0 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003462:	b29b      	uxth	r3, r3
 8003464:	461a      	mov	r2, r3
 8003466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4413      	add	r3, r2
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6812      	ldr	r2, [r2, #0]
 8003472:	4413      	add	r3, r2
 8003474:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800347e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003482:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003486:	2b00      	cmp	r3, #0
 8003488:	d02c      	beq.n	80034e4 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003490:	6959      	ldr	r1, [r3, #20]
 8003492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003494:	891a      	ldrh	r2, [r3, #8]
 8003496:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800349a:	f004 fd25 	bl	8007ee8 <USB_ReadPMA>
 800349e:	e021      	b.n	80034e4 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	461a      	mov	r2, r3
 80034ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	4413      	add	r3, r2
 80034ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034c4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80034c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d009      	beq.n	80034e4 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034d6:	6959      	ldr	r1, [r3, #20]
 80034d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034da:	895a      	ldrh	r2, [r3, #10]
 80034dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80034e0:	f004 fd02 	bl	8007ee8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80034e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034e6:	69da      	ldr	r2, [r3, #28]
 80034e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80034ec:	441a      	add	r2, r3
 80034ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80034f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034f4:	695a      	ldr	r2, [r3, #20]
 80034f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80034fa:	441a      	add	r2, r3
 80034fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034fe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <PCD_EP_ISR_Handler+0x4f2>
 8003508:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800350c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	429a      	cmp	r2, r3
 8003512:	d206      	bcs.n	8003522 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	4619      	mov	r1, r3
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f006 fb70 	bl	8009c00 <HAL_PCD_DataOutStageCallback>
 8003520:	e005      	b.n	800352e <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003528:	4618      	mov	r0, r3
 800352a:	f003 f80a 	bl	8006542 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800352e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 8122 	beq.w	8003780 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 800353c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	4413      	add	r3, r2
 800354e:	3304      	adds	r3, #4
 8003550:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	b29b      	uxth	r3, r3
 8003564:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	441a      	add	r2, r3
 800357e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800358a:	b29b      	uxth	r3, r3
 800358c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800358e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003590:	78db      	ldrb	r3, [r3, #3]
 8003592:	2b01      	cmp	r3, #1
 8003594:	f040 80a2 	bne.w	80036dc <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8003598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800359a:	2200      	movs	r2, #0
 800359c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800359e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035a0:	7b1b      	ldrb	r3, [r3, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 8093 	beq.w	80036ce <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80035a8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80035ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d046      	beq.n	8003642 <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b6:	785b      	ldrb	r3, [r3, #1]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d126      	bne.n	800360a <PCD_EP_ISR_Handler+0x5e8>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	4413      	add	r3, r2
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
 80035d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	00da      	lsls	r2, r3, #3
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	4413      	add	r3, r2
 80035de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035e2:	623b      	str	r3, [r7, #32]
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	801a      	strh	r2, [r3, #0]
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003602:	b29a      	uxth	r2, r3
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	801a      	strh	r2, [r3, #0]
 8003608:	e061      	b.n	80036ce <PCD_EP_ISR_Handler+0x6ac>
 800360a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800360c:	785b      	ldrb	r3, [r3, #1]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d15d      	bne.n	80036ce <PCD_EP_ISR_Handler+0x6ac>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003620:	b29b      	uxth	r3, r3
 8003622:	461a      	mov	r2, r3
 8003624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003626:	4413      	add	r3, r2
 8003628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800362a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	00da      	lsls	r2, r3, #3
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003632:	4413      	add	r3, r2
 8003634:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003638:	62bb      	str	r3, [r7, #40]	; 0x28
 800363a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363c:	2200      	movs	r2, #0
 800363e:	801a      	strh	r2, [r3, #0]
 8003640:	e045      	b.n	80036ce <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800364a:	785b      	ldrb	r3, [r3, #1]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d126      	bne.n	800369e <PCD_EP_ISR_Handler+0x67c>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	637b      	str	r3, [r7, #52]	; 0x34
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800365e:	b29b      	uxth	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003664:	4413      	add	r3, r2
 8003666:	637b      	str	r3, [r7, #52]	; 0x34
 8003668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	00da      	lsls	r2, r3, #3
 800366e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003670:	4413      	add	r3, r2
 8003672:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003676:	633b      	str	r3, [r7, #48]	; 0x30
 8003678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	b29b      	uxth	r3, r3
 800367e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003682:	b29a      	uxth	r2, r3
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	801a      	strh	r2, [r3, #0]
 8003688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	b29b      	uxth	r3, r3
 800368e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003696:	b29a      	uxth	r2, r3
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	801a      	strh	r2, [r3, #0]
 800369c:	e017      	b.n	80036ce <PCD_EP_ISR_Handler+0x6ac>
 800369e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a0:	785b      	ldrb	r3, [r3, #1]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d113      	bne.n	80036ce <PCD_EP_ISR_Handler+0x6ac>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	461a      	mov	r2, r3
 80036b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b4:	4413      	add	r3, r2
 80036b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	00da      	lsls	r2, r3, #3
 80036be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c0:	4413      	add	r3, r2
 80036c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80036c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ca:	2200      	movs	r2, #0
 80036cc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	4619      	mov	r1, r3
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f006 faae 	bl	8009c36 <HAL_PCD_DataInStageCallback>
 80036da:	e051      	b.n	8003780 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80036dc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80036e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d144      	bne.n	8003772 <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	4413      	add	r3, r2
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	4413      	add	r3, r2
 8003702:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800370c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003712:	699a      	ldr	r2, [r3, #24]
 8003714:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003718:	429a      	cmp	r2, r3
 800371a:	d907      	bls.n	800372c <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 800371c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800371e:	699a      	ldr	r2, [r3, #24]
 8003720:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003724:	1ad2      	subs	r2, r2, r3
 8003726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003728:	619a      	str	r2, [r3, #24]
 800372a:	e002      	b.n	8003732 <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 800372c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800372e:	2200      	movs	r2, #0
 8003730:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800373a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	4619      	mov	r1, r3
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f006 fa78 	bl	8009c36 <HAL_PCD_DataInStageCallback>
 8003746:	e01b      	b.n	8003780 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003750:	441a      	add	r2, r3
 8003752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003754:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003758:	69da      	ldr	r2, [r3, #28]
 800375a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800375e:	441a      	add	r2, r3
 8003760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003762:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800376a:	4618      	mov	r0, r3
 800376c:	f002 fee9 	bl	8006542 <USB_EPStartXfer>
 8003770:	e006      	b.n	8003780 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003772:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003776:	461a      	mov	r2, r3
 8003778:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f917 	bl	80039ae <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003788:	b29b      	uxth	r3, r3
 800378a:	b21b      	sxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	f6ff ac4d 	blt.w	800302c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3758      	adds	r7, #88	; 0x58
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b088      	sub	sp, #32
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	4613      	mov	r3, r2
 80037a8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d07c      	beq.n	80038ae <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037bc:	b29b      	uxth	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4413      	add	r3, r2
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	4413      	add	r3, r2
 80037ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037d8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	8b7b      	ldrh	r3, [r7, #26]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d306      	bcc.n	80037f2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	699a      	ldr	r2, [r3, #24]
 80037e8:	8b7b      	ldrh	r3, [r7, #26]
 80037ea:	1ad2      	subs	r2, r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	619a      	str	r2, [r3, #24]
 80037f0:	e002      	b.n	80037f8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2200      	movs	r2, #0
 80037f6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d123      	bne.n	8003848 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	b29b      	uxth	r3, r3
 8003812:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381a:	833b      	strh	r3, [r7, #24]
 800381c:	8b3b      	ldrh	r3, [r7, #24]
 800381e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003822:	833b      	strh	r3, [r7, #24]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	461a      	mov	r2, r3
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	441a      	add	r2, r3
 8003832:	8b3b      	ldrh	r3, [r7, #24]
 8003834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800383c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003844:	b29b      	uxth	r3, r3
 8003846:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d01f      	beq.n	8003892 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	b29b      	uxth	r3, r3
 8003864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386c:	82fb      	strh	r3, [r7, #22]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	441a      	add	r2, r3
 800387c:	8afb      	ldrh	r3, [r7, #22]
 800387e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800388a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800388e:	b29b      	uxth	r3, r3
 8003890:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003892:	8b7b      	ldrh	r3, [r7, #26]
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 8085 	beq.w	80039a4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	6959      	ldr	r1, [r3, #20]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	891a      	ldrh	r2, [r3, #8]
 80038a6:	8b7b      	ldrh	r3, [r7, #26]
 80038a8:	f004 fb1e 	bl	8007ee8 <USB_ReadPMA>
 80038ac:	e07a      	b.n	80039a4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	461a      	mov	r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	4413      	add	r3, r2
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	6812      	ldr	r2, [r2, #0]
 80038c6:	4413      	add	r3, r2
 80038c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038d2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	699a      	ldr	r2, [r3, #24]
 80038d8:	8b7b      	ldrh	r3, [r7, #26]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d306      	bcc.n	80038ec <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	699a      	ldr	r2, [r3, #24]
 80038e2:	8b7b      	ldrh	r3, [r7, #26]
 80038e4:	1ad2      	subs	r2, r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	619a      	str	r2, [r3, #24]
 80038ea:	e002      	b.n	80038f2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2200      	movs	r2, #0
 80038f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d123      	bne.n	8003942 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	b29b      	uxth	r3, r3
 800390c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003914:	83fb      	strh	r3, [r7, #30]
 8003916:	8bfb      	ldrh	r3, [r7, #30]
 8003918:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800391c:	83fb      	strh	r3, [r7, #30]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	461a      	mov	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	441a      	add	r2, r3
 800392c:	8bfb      	ldrh	r3, [r7, #30]
 800392e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800393a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800393e:	b29b      	uxth	r3, r3
 8003940:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003942:	88fb      	ldrh	r3, [r7, #6]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b00      	cmp	r3, #0
 800394a:	d11f      	bne.n	800398c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	b29b      	uxth	r3, r3
 800395e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003966:	83bb      	strh	r3, [r7, #28]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	461a      	mov	r2, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	441a      	add	r2, r3
 8003976:	8bbb      	ldrh	r3, [r7, #28]
 8003978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800397c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003984:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003988:	b29b      	uxth	r3, r3
 800398a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800398c:	8b7b      	ldrh	r3, [r7, #26]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d008      	beq.n	80039a4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	6959      	ldr	r1, [r3, #20]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	895a      	ldrh	r2, [r3, #10]
 800399e:	8b7b      	ldrh	r3, [r7, #26]
 80039a0:	f004 faa2 	bl	8007ee8 <USB_ReadPMA>
    }
  }

  return count;
 80039a4:	8b7b      	ldrh	r3, [r7, #26]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b0a2      	sub	sp, #136	; 0x88
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	4613      	mov	r3, r2
 80039ba:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039bc:	88fb      	ldrh	r3, [r7, #6]
 80039be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 81c5 	beq.w	8003d52 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	461a      	mov	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4413      	add	r3, r2
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	6812      	ldr	r2, [r2, #0]
 80039e0:	4413      	add	r3, r2
 80039e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	699a      	ldr	r2, [r3, #24]
 80039f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d907      	bls.n	8003a0c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	699a      	ldr	r2, [r3, #24]
 8003a00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a04:	1ad2      	subs	r2, r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	619a      	str	r2, [r3, #24]
 8003a0a:	e002      	b.n	8003a12 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f040 80b9 	bne.w	8003b8e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	785b      	ldrb	r3, [r3, #1]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d126      	bne.n	8003a72 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	461a      	mov	r2, r3
 8003a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a38:	4413      	add	r3, r2
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	00da      	lsls	r2, r3, #3
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a44:	4413      	add	r3, r2
 8003a46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	801a      	strh	r2, [r3, #0]
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	801a      	strh	r2, [r3, #0]
 8003a70:	e01a      	b.n	8003aa8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	785b      	ldrb	r3, [r3, #1]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d116      	bne.n	8003aa8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	633b      	str	r3, [r7, #48]	; 0x30
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8e:	4413      	add	r3, r2
 8003a90:	633b      	str	r3, [r7, #48]	; 0x30
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	00da      	lsls	r2, r3, #3
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	623b      	str	r3, [r7, #32]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	785b      	ldrb	r3, [r3, #1]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d126      	bne.n	8003b04 <HAL_PCD_EP_DB_Transmit+0x156>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	61bb      	str	r3, [r7, #24]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	4413      	add	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	00da      	lsls	r2, r3, #3
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	801a      	strh	r2, [r3, #0]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	801a      	strh	r2, [r3, #0]
 8003b02:	e017      	b.n	8003b34 <HAL_PCD_EP_DB_Transmit+0x186>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	785b      	ldrb	r3, [r3, #1]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d113      	bne.n	8003b34 <HAL_PCD_EP_DB_Transmit+0x186>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	623b      	str	r3, [r7, #32]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	00da      	lsls	r2, r3, #3
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	4413      	add	r3, r2
 8003b28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b2c:	61fb      	str	r3, [r7, #28]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	2200      	movs	r2, #0
 8003b32:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f006 f87b 	bl	8009c36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b40:	88fb      	ldrh	r3, [r7, #6]
 8003b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 82d2 	beq.w	80040f0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b66:	827b      	strh	r3, [r7, #18]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	441a      	add	r2, r3
 8003b76:	8a7b      	ldrh	r3, [r7, #18]
 8003b78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	8013      	strh	r3, [r2, #0]
 8003b8c:	e2b0      	b.n	80040f0 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b8e:	88fb      	ldrh	r3, [r7, #6]
 8003b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d021      	beq.n	8003bdc <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	441a      	add	r2, r3
 8003bc4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	f040 8284 	bne.w	80040f0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	695a      	ldr	r2, [r3, #20]
 8003bec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bf0:	441a      	add	r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	69da      	ldr	r2, [r3, #28]
 8003bfa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bfe:	441a      	add	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	6a1a      	ldr	r2, [r3, #32]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d309      	bcc.n	8003c24 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	6a1a      	ldr	r2, [r3, #32]
 8003c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c1c:	1ad2      	subs	r2, r2, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	621a      	str	r2, [r3, #32]
 8003c22:	e015      	b.n	8003c50 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d107      	bne.n	8003c3c <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8003c2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c30:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003c3a:	e009      	b.n	8003c50 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	785b      	ldrb	r3, [r3, #1]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d155      	bne.n	8003d04 <HAL_PCD_EP_DB_Transmit+0x356>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	461a      	mov	r2, r3
 8003c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6c:	4413      	add	r3, r2
 8003c6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	00da      	lsls	r2, r3, #3
 8003c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c78:	4413      	add	r3, r2
 8003c7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c82:	2b3e      	cmp	r3, #62	; 0x3e
 8003c84:	d916      	bls.n	8003cb4 <HAL_PCD_EP_DB_Transmit+0x306>
 8003c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c88:	095b      	lsrs	r3, r3, #5
 8003c8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c8e:	f003 031f 	and.w	r3, r3, #31
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d102      	bne.n	8003c9c <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	029b      	lsls	r3, r3, #10
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb0:	801a      	strh	r2, [r3, #0]
 8003cb2:	e043      	b.n	8003d3c <HAL_PCD_EP_DB_Transmit+0x38e>
 8003cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d112      	bne.n	8003ce0 <HAL_PCD_EP_DB_Transmit+0x332>
 8003cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc8:	801a      	strh	r2, [r3, #0]
 8003cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cdc:	801a      	strh	r2, [r3, #0]
 8003cde:	e02d      	b.n	8003d3c <HAL_PCD_EP_DB_Transmit+0x38e>
 8003ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ce2:	085b      	lsrs	r3, r3, #1
 8003ce4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <HAL_PCD_EP_DB_Transmit+0x348>
 8003cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	029b      	lsls	r3, r3, #10
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d00:	801a      	strh	r2, [r3, #0]
 8003d02:	e01b      	b.n	8003d3c <HAL_PCD_EP_DB_Transmit+0x38e>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	785b      	ldrb	r3, [r3, #1]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d117      	bne.n	8003d3c <HAL_PCD_EP_DB_Transmit+0x38e>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	643b      	str	r3, [r7, #64]	; 0x40
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d20:	4413      	add	r3, r2
 8003d22:	643b      	str	r3, [r7, #64]	; 0x40
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	00da      	lsls	r2, r3, #3
 8003d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6818      	ldr	r0, [r3, #0]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	6959      	ldr	r1, [r3, #20]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	891a      	ldrh	r2, [r3, #8]
 8003d48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	f004 f88a 	bl	8007e64 <USB_WritePMA>
 8003d50:	e1ce      	b.n	80040f0 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4413      	add	r3, r2
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	6812      	ldr	r2, [r2, #0]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d76:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d307      	bcc.n	8003d96 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d8e:	1ad2      	subs	r2, r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	619a      	str	r2, [r3, #24]
 8003d94:	e002      	b.n	8003d9c <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f040 80c4 	bne.w	8003f2e <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	785b      	ldrb	r3, [r3, #1]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d126      	bne.n	8003dfc <HAL_PCD_EP_DB_Transmit+0x44e>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dc2:	4413      	add	r3, r2
 8003dc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	00da      	lsls	r2, r3, #3
 8003dcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dce:	4413      	add	r3, r2
 8003dd0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003dd4:	667b      	str	r3, [r7, #100]	; 0x64
 8003dd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003de4:	801a      	strh	r2, [r3, #0]
 8003de6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003df8:	801a      	strh	r2, [r3, #0]
 8003dfa:	e01a      	b.n	8003e32 <HAL_PCD_EP_DB_Transmit+0x484>
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	785b      	ldrb	r3, [r3, #1]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d116      	bne.n	8003e32 <HAL_PCD_EP_DB_Transmit+0x484>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	673b      	str	r3, [r7, #112]	; 0x70
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e18:	4413      	add	r3, r2
 8003e1a:	673b      	str	r3, [r7, #112]	; 0x70
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	00da      	lsls	r2, r3, #3
 8003e22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e24:	4413      	add	r3, r2
 8003e26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2e:	2200      	movs	r2, #0
 8003e30:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	785b      	ldrb	r3, [r3, #1]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d12f      	bne.n	8003ea0 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e58:	4413      	add	r3, r2
 8003e5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	00da      	lsls	r2, r3, #3
 8003e64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e68:	4413      	add	r3, r2
 8003e6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e84:	801a      	strh	r2, [r3, #0]
 8003e86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e9c:	801a      	strh	r2, [r3, #0]
 8003e9e:	e017      	b.n	8003ed0 <HAL_PCD_EP_DB_Transmit+0x522>
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	785b      	ldrb	r3, [r3, #1]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d113      	bne.n	8003ed0 <HAL_PCD_EP_DB_Transmit+0x522>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003eb6:	4413      	add	r3, r2
 8003eb8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	00da      	lsls	r2, r3, #3
 8003ec0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ec8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003eca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ecc:	2200      	movs	r2, #0
 8003ece:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f005 fead 	bl	8009c36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003edc:	88fb      	ldrh	r3, [r7, #6]
 8003ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f040 8104 	bne.w	80040f0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	461a      	mov	r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f02:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	441a      	add	r2, r3
 8003f14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	8013      	strh	r3, [r2, #0]
 8003f2c:	e0e0      	b.n	80040f0 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d121      	bne.n	8003f7c <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f52:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	441a      	add	r2, r3
 8003f64:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	f040 80b4 	bne.w	80040f0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	695a      	ldr	r2, [r3, #20]
 8003f8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f90:	441a      	add	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	69da      	ldr	r2, [r3, #28]
 8003f9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f9e:	441a      	add	r2, r3
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	6a1a      	ldr	r2, [r3, #32]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d309      	bcc.n	8003fc4 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	6a1a      	ldr	r2, [r3, #32]
 8003fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fbc:	1ad2      	subs	r2, r2, r3
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	621a      	str	r2, [r3, #32]
 8003fc2:	e015      	b.n	8003ff0 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d107      	bne.n	8003fdc <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003fcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fd0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003fda:	e009      	b.n	8003ff0 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	785b      	ldrb	r3, [r3, #1]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d155      	bne.n	80040aa <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	65bb      	str	r3, [r7, #88]	; 0x58
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800400c:	b29b      	uxth	r3, r3
 800400e:	461a      	mov	r2, r3
 8004010:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004012:	4413      	add	r3, r2
 8004014:	65bb      	str	r3, [r7, #88]	; 0x58
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	00da      	lsls	r2, r3, #3
 800401c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800401e:	4413      	add	r3, r2
 8004020:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004024:	657b      	str	r3, [r7, #84]	; 0x54
 8004026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004028:	2b3e      	cmp	r3, #62	; 0x3e
 800402a:	d916      	bls.n	800405a <HAL_PCD_EP_DB_Transmit+0x6ac>
 800402c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	677b      	str	r3, [r7, #116]	; 0x74
 8004032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	2b00      	cmp	r3, #0
 800403a:	d102      	bne.n	8004042 <HAL_PCD_EP_DB_Transmit+0x694>
 800403c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800403e:	3b01      	subs	r3, #1
 8004040:	677b      	str	r3, [r7, #116]	; 0x74
 8004042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004044:	b29b      	uxth	r3, r3
 8004046:	029b      	lsls	r3, r3, #10
 8004048:	b29b      	uxth	r3, r3
 800404a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800404e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004052:	b29a      	uxth	r2, r3
 8004054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004056:	801a      	strh	r2, [r3, #0]
 8004058:	e040      	b.n	80040dc <HAL_PCD_EP_DB_Transmit+0x72e>
 800405a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800405c:	2b00      	cmp	r3, #0
 800405e:	d112      	bne.n	8004086 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8004060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	b29b      	uxth	r3, r3
 8004066:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800406a:	b29a      	uxth	r2, r3
 800406c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800406e:	801a      	strh	r2, [r3, #0]
 8004070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	b29b      	uxth	r3, r3
 8004076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800407a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800407e:	b29a      	uxth	r2, r3
 8004080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004082:	801a      	strh	r2, [r3, #0]
 8004084:	e02a      	b.n	80040dc <HAL_PCD_EP_DB_Transmit+0x72e>
 8004086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004088:	085b      	lsrs	r3, r3, #1
 800408a:	677b      	str	r3, [r7, #116]	; 0x74
 800408c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <HAL_PCD_EP_DB_Transmit+0x6ee>
 8004096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004098:	3301      	adds	r3, #1
 800409a:	677b      	str	r3, [r7, #116]	; 0x74
 800409c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800409e:	b29b      	uxth	r3, r3
 80040a0:	029b      	lsls	r3, r3, #10
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040a6:	801a      	strh	r2, [r3, #0]
 80040a8:	e018      	b.n	80040dc <HAL_PCD_EP_DB_Transmit+0x72e>
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	785b      	ldrb	r3, [r3, #1]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d114      	bne.n	80040dc <HAL_PCD_EP_DB_Transmit+0x72e>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	461a      	mov	r2, r3
 80040be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040c0:	4413      	add	r3, r2
 80040c2:	663b      	str	r3, [r7, #96]	; 0x60
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	00da      	lsls	r2, r3, #3
 80040ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040cc:	4413      	add	r3, r2
 80040ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80040d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040da:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6818      	ldr	r0, [r3, #0]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	6959      	ldr	r1, [r3, #20]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	895a      	ldrh	r2, [r3, #10]
 80040e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	f003 feba 	bl	8007e64 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	461a      	mov	r2, r3
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	b29b      	uxth	r3, r3
 8004102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800410a:	823b      	strh	r3, [r7, #16]
 800410c:	8a3b      	ldrh	r3, [r7, #16]
 800410e:	f083 0310 	eor.w	r3, r3, #16
 8004112:	823b      	strh	r3, [r7, #16]
 8004114:	8a3b      	ldrh	r3, [r7, #16]
 8004116:	f083 0320 	eor.w	r3, r3, #32
 800411a:	823b      	strh	r3, [r7, #16]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	441a      	add	r2, r3
 800412a:	8a3b      	ldrh	r3, [r7, #16]
 800412c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800413c:	b29b      	uxth	r3, r3
 800413e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3788      	adds	r7, #136	; 0x88
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800414a:	b480      	push	{r7}
 800414c:	b087      	sub	sp, #28
 800414e:	af00      	add	r7, sp, #0
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	607b      	str	r3, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	817b      	strh	r3, [r7, #10]
 8004158:	4613      	mov	r3, r2
 800415a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800415c:	897b      	ldrh	r3, [r7, #10]
 800415e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00c      	beq.n	8004182 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004168:	897b      	ldrh	r3, [r7, #10]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4413      	add	r3, r2
 800417c:	3304      	adds	r3, #4
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	e00a      	b.n	8004198 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004182:	897a      	ldrh	r2, [r7, #10]
 8004184:	4613      	mov	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4413      	add	r3, r2
 8004194:	3304      	adds	r3, #4
 8004196:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004198:	893b      	ldrh	r3, [r7, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d107      	bne.n	80041ae <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2200      	movs	r2, #0
 80041a2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	80da      	strh	r2, [r3, #6]
 80041ac:	e00b      	b.n	80041c6 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2201      	movs	r2, #1
 80041b2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	0c1b      	lsrs	r3, r3, #16
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	f043 0301 	orr.w	r3, r3, #1
 80041fe:	b29a      	uxth	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800420c:	b29b      	uxth	r3, r3
 800420e:	f043 0302 	orr.w	r3, r3, #2
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800422c:	4b04      	ldr	r3, [pc, #16]	; (8004240 <HAL_PWREx_GetVoltageRange+0x18>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004234:	4618      	mov	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40007000 	.word	0x40007000

08004244 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004252:	d130      	bne.n	80042b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004254:	4b23      	ldr	r3, [pc, #140]	; (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800425c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004260:	d038      	beq.n	80042d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004262:	4b20      	ldr	r3, [pc, #128]	; (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800426a:	4a1e      	ldr	r2, [pc, #120]	; (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800426c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004270:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004272:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2232      	movs	r2, #50	; 0x32
 8004278:	fb02 f303 	mul.w	r3, r2, r3
 800427c:	4a1b      	ldr	r2, [pc, #108]	; (80042ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	0c9b      	lsrs	r3, r3, #18
 8004284:	3301      	adds	r3, #1
 8004286:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004288:	e002      	b.n	8004290 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3b01      	subs	r3, #1
 800428e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004290:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429c:	d102      	bne.n	80042a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1f2      	bne.n	800428a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042a4:	4b0f      	ldr	r3, [pc, #60]	; (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b0:	d110      	bne.n	80042d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e00f      	b.n	80042d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80042b6:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c2:	d007      	beq.n	80042d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042c4:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042cc:	4a05      	ldr	r2, [pc, #20]	; (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40007000 	.word	0x40007000
 80042e8:	20000000 	.word	0x20000000
 80042ec:	431bde83 	.word	0x431bde83

080042f0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <HAL_PWREx_EnableVddUSB+0x1c>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	4a04      	ldr	r2, [pc, #16]	; (800430c <HAL_PWREx_EnableVddUSB+0x1c>)
 80042fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042fe:	6053      	str	r3, [r2, #4]
}
 8004300:	bf00      	nop
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40007000 	.word	0x40007000

08004310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d102      	bne.n	8004324 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	f000 bc02 	b.w	8004b28 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004324:	4b96      	ldr	r3, [pc, #600]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 030c 	and.w	r3, r3, #12
 800432c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800432e:	4b94      	ldr	r3, [pc, #592]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0310 	and.w	r3, r3, #16
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80e4 	beq.w	800450e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d007      	beq.n	800435c <HAL_RCC_OscConfig+0x4c>
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	2b0c      	cmp	r3, #12
 8004350:	f040 808b 	bne.w	800446a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	2b01      	cmp	r3, #1
 8004358:	f040 8087 	bne.w	800446a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800435c:	4b88      	ldr	r3, [pc, #544]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_RCC_OscConfig+0x64>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e3d9      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1a      	ldr	r2, [r3, #32]
 8004378:	4b81      	ldr	r3, [pc, #516]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	d004      	beq.n	800438e <HAL_RCC_OscConfig+0x7e>
 8004384:	4b7e      	ldr	r3, [pc, #504]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800438c:	e005      	b.n	800439a <HAL_RCC_OscConfig+0x8a>
 800438e:	4b7c      	ldr	r3, [pc, #496]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 8004390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004394:	091b      	lsrs	r3, r3, #4
 8004396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800439a:	4293      	cmp	r3, r2
 800439c:	d223      	bcs.n	80043e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fd54 	bl	8004e50 <RCC_SetFlashLatencyFromMSIRange>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e3ba      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043b2:	4b73      	ldr	r3, [pc, #460]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a72      	ldr	r2, [pc, #456]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 80043b8:	f043 0308 	orr.w	r3, r3, #8
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	4b70      	ldr	r3, [pc, #448]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	496d      	ldr	r1, [pc, #436]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043d0:	4b6b      	ldr	r3, [pc, #428]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	021b      	lsls	r3, r3, #8
 80043de:	4968      	ldr	r1, [pc, #416]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	604b      	str	r3, [r1, #4]
 80043e4:	e025      	b.n	8004432 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043e6:	4b66      	ldr	r3, [pc, #408]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a65      	ldr	r2, [pc, #404]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 80043ec:	f043 0308 	orr.w	r3, r3, #8
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	4b63      	ldr	r3, [pc, #396]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	4960      	ldr	r1, [pc, #384]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 8004400:	4313      	orrs	r3, r2
 8004402:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004404:	4b5e      	ldr	r3, [pc, #376]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	021b      	lsls	r3, r3, #8
 8004412:	495b      	ldr	r1, [pc, #364]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 8004414:	4313      	orrs	r3, r2
 8004416:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d109      	bne.n	8004432 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fd14 	bl	8004e50 <RCC_SetFlashLatencyFromMSIRange>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e37a      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004432:	f000 fc81 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 8004436:	4602      	mov	r2, r0
 8004438:	4b51      	ldr	r3, [pc, #324]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	091b      	lsrs	r3, r3, #4
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	4950      	ldr	r1, [pc, #320]	; (8004584 <HAL_RCC_OscConfig+0x274>)
 8004444:	5ccb      	ldrb	r3, [r1, r3]
 8004446:	f003 031f 	and.w	r3, r3, #31
 800444a:	fa22 f303 	lsr.w	r3, r2, r3
 800444e:	4a4e      	ldr	r2, [pc, #312]	; (8004588 <HAL_RCC_OscConfig+0x278>)
 8004450:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004452:	4b4e      	ldr	r3, [pc, #312]	; (800458c <HAL_RCC_OscConfig+0x27c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fc fbf4 	bl	8000c44 <HAL_InitTick>
 800445c:	4603      	mov	r3, r0
 800445e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004460:	7bfb      	ldrb	r3, [r7, #15]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d052      	beq.n	800450c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004466:	7bfb      	ldrb	r3, [r7, #15]
 8004468:	e35e      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d032      	beq.n	80044d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004472:	4b43      	ldr	r3, [pc, #268]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a42      	ldr	r2, [pc, #264]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800447e:	f7fc fc31 	bl	8000ce4 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004486:	f7fc fc2d 	bl	8000ce4 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e347      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004498:	4b39      	ldr	r3, [pc, #228]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044a4:	4b36      	ldr	r3, [pc, #216]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a35      	ldr	r2, [pc, #212]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 80044aa:	f043 0308 	orr.w	r3, r3, #8
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	4b33      	ldr	r3, [pc, #204]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	4930      	ldr	r1, [pc, #192]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044c2:	4b2f      	ldr	r3, [pc, #188]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	021b      	lsls	r3, r3, #8
 80044d0:	492b      	ldr	r1, [pc, #172]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	604b      	str	r3, [r1, #4]
 80044d6:	e01a      	b.n	800450e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044d8:	4b29      	ldr	r3, [pc, #164]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a28      	ldr	r2, [pc, #160]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044e4:	f7fc fbfe 	bl	8000ce4 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044ec:	f7fc fbfa 	bl	8000ce4 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e314      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044fe:	4b20      	ldr	r3, [pc, #128]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0x1dc>
 800450a:	e000      	b.n	800450e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800450c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d073      	beq.n	8004602 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b08      	cmp	r3, #8
 800451e:	d005      	beq.n	800452c <HAL_RCC_OscConfig+0x21c>
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	2b0c      	cmp	r3, #12
 8004524:	d10e      	bne.n	8004544 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2b03      	cmp	r3, #3
 800452a:	d10b      	bne.n	8004544 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800452c:	4b14      	ldr	r3, [pc, #80]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d063      	beq.n	8004600 <HAL_RCC_OscConfig+0x2f0>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d15f      	bne.n	8004600 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e2f1      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800454c:	d106      	bne.n	800455c <HAL_RCC_OscConfig+0x24c>
 800454e:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a0b      	ldr	r2, [pc, #44]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 8004554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	e025      	b.n	80045a8 <HAL_RCC_OscConfig+0x298>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004564:	d114      	bne.n	8004590 <HAL_RCC_OscConfig+0x280>
 8004566:	4b06      	ldr	r3, [pc, #24]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a05      	ldr	r2, [pc, #20]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 800456c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	4b03      	ldr	r3, [pc, #12]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a02      	ldr	r2, [pc, #8]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 8004578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	e013      	b.n	80045a8 <HAL_RCC_OscConfig+0x298>
 8004580:	40021000 	.word	0x40021000
 8004584:	0800a348 	.word	0x0800a348
 8004588:	20000000 	.word	0x20000000
 800458c:	20000004 	.word	0x20000004
 8004590:	4ba0      	ldr	r3, [pc, #640]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a9f      	ldr	r2, [pc, #636]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 8004596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	4b9d      	ldr	r3, [pc, #628]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a9c      	ldr	r2, [pc, #624]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 80045a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d013      	beq.n	80045d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b0:	f7fc fb98 	bl	8000ce4 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b8:	f7fc fb94 	bl	8000ce4 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b64      	cmp	r3, #100	; 0x64
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e2ae      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045ca:	4b92      	ldr	r3, [pc, #584]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f0      	beq.n	80045b8 <HAL_RCC_OscConfig+0x2a8>
 80045d6:	e014      	b.n	8004602 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d8:	f7fc fb84 	bl	8000ce4 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e0:	f7fc fb80 	bl	8000ce4 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b64      	cmp	r3, #100	; 0x64
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e29a      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045f2:	4b88      	ldr	r3, [pc, #544]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f0      	bne.n	80045e0 <HAL_RCC_OscConfig+0x2d0>
 80045fe:	e000      	b.n	8004602 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d060      	beq.n	80046d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2b04      	cmp	r3, #4
 8004612:	d005      	beq.n	8004620 <HAL_RCC_OscConfig+0x310>
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	2b0c      	cmp	r3, #12
 8004618:	d119      	bne.n	800464e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2b02      	cmp	r3, #2
 800461e:	d116      	bne.n	800464e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004620:	4b7c      	ldr	r3, [pc, #496]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <HAL_RCC_OscConfig+0x328>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e277      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004638:	4b76      	ldr	r3, [pc, #472]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	061b      	lsls	r3, r3, #24
 8004646:	4973      	ldr	r1, [pc, #460]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 8004648:	4313      	orrs	r3, r2
 800464a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800464c:	e040      	b.n	80046d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d023      	beq.n	800469e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004656:	4b6f      	ldr	r3, [pc, #444]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a6e      	ldr	r2, [pc, #440]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 800465c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004662:	f7fc fb3f 	bl	8000ce4 <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800466a:	f7fc fb3b 	bl	8000ce4 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e255      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800467c:	4b65      	ldr	r3, [pc, #404]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0f0      	beq.n	800466a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004688:	4b62      	ldr	r3, [pc, #392]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	061b      	lsls	r3, r3, #24
 8004696:	495f      	ldr	r1, [pc, #380]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 8004698:	4313      	orrs	r3, r2
 800469a:	604b      	str	r3, [r1, #4]
 800469c:	e018      	b.n	80046d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800469e:	4b5d      	ldr	r3, [pc, #372]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a5c      	ldr	r2, [pc, #368]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 80046a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046aa:	f7fc fb1b 	bl	8000ce4 <HAL_GetTick>
 80046ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046b2:	f7fc fb17 	bl	8000ce4 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e231      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046c4:	4b53      	ldr	r3, [pc, #332]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1f0      	bne.n	80046b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d03c      	beq.n	8004756 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d01c      	beq.n	800471e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046e4:	4b4b      	ldr	r3, [pc, #300]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 80046e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ea:	4a4a      	ldr	r2, [pc, #296]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f4:	f7fc faf6 	bl	8000ce4 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046fc:	f7fc faf2 	bl	8000ce4 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e20c      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800470e:	4b41      	ldr	r3, [pc, #260]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 8004710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0ef      	beq.n	80046fc <HAL_RCC_OscConfig+0x3ec>
 800471c:	e01b      	b.n	8004756 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800471e:	4b3d      	ldr	r3, [pc, #244]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 8004720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004724:	4a3b      	ldr	r2, [pc, #236]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 8004726:	f023 0301 	bic.w	r3, r3, #1
 800472a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472e:	f7fc fad9 	bl	8000ce4 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004736:	f7fc fad5 	bl	8000ce4 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e1ef      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004748:	4b32      	ldr	r3, [pc, #200]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 800474a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1ef      	bne.n	8004736 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 80a6 	beq.w	80048b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004764:	2300      	movs	r3, #0
 8004766:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004768:	4b2a      	ldr	r3, [pc, #168]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 800476a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10d      	bne.n	8004790 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004774:	4b27      	ldr	r3, [pc, #156]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 8004776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004778:	4a26      	ldr	r2, [pc, #152]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 800477a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800477e:	6593      	str	r3, [r2, #88]	; 0x58
 8004780:	4b24      	ldr	r3, [pc, #144]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 8004782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004788:	60bb      	str	r3, [r7, #8]
 800478a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800478c:	2301      	movs	r3, #1
 800478e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004790:	4b21      	ldr	r3, [pc, #132]	; (8004818 <HAL_RCC_OscConfig+0x508>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004798:	2b00      	cmp	r3, #0
 800479a:	d118      	bne.n	80047ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800479c:	4b1e      	ldr	r3, [pc, #120]	; (8004818 <HAL_RCC_OscConfig+0x508>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a1d      	ldr	r2, [pc, #116]	; (8004818 <HAL_RCC_OscConfig+0x508>)
 80047a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047a8:	f7fc fa9c 	bl	8000ce4 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b0:	f7fc fa98 	bl	8000ce4 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e1b2      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047c2:	4b15      	ldr	r3, [pc, #84]	; (8004818 <HAL_RCC_OscConfig+0x508>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d108      	bne.n	80047e8 <HAL_RCC_OscConfig+0x4d8>
 80047d6:	4b0f      	ldr	r3, [pc, #60]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 80047d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047dc:	4a0d      	ldr	r2, [pc, #52]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 80047de:	f043 0301 	orr.w	r3, r3, #1
 80047e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047e6:	e029      	b.n	800483c <HAL_RCC_OscConfig+0x52c>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b05      	cmp	r3, #5
 80047ee:	d115      	bne.n	800481c <HAL_RCC_OscConfig+0x50c>
 80047f0:	4b08      	ldr	r3, [pc, #32]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f6:	4a07      	ldr	r2, [pc, #28]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 80047f8:	f043 0304 	orr.w	r3, r3, #4
 80047fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004800:	4b04      	ldr	r3, [pc, #16]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004806:	4a03      	ldr	r2, [pc, #12]	; (8004814 <HAL_RCC_OscConfig+0x504>)
 8004808:	f043 0301 	orr.w	r3, r3, #1
 800480c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004810:	e014      	b.n	800483c <HAL_RCC_OscConfig+0x52c>
 8004812:	bf00      	nop
 8004814:	40021000 	.word	0x40021000
 8004818:	40007000 	.word	0x40007000
 800481c:	4b9a      	ldr	r3, [pc, #616]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004822:	4a99      	ldr	r2, [pc, #612]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 8004824:	f023 0301 	bic.w	r3, r3, #1
 8004828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800482c:	4b96      	ldr	r3, [pc, #600]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004832:	4a95      	ldr	r2, [pc, #596]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 8004834:	f023 0304 	bic.w	r3, r3, #4
 8004838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d016      	beq.n	8004872 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004844:	f7fc fa4e 	bl	8000ce4 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800484a:	e00a      	b.n	8004862 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800484c:	f7fc fa4a 	bl	8000ce4 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	f241 3288 	movw	r2, #5000	; 0x1388
 800485a:	4293      	cmp	r3, r2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e162      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004862:	4b89      	ldr	r3, [pc, #548]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 8004864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0ed      	beq.n	800484c <HAL_RCC_OscConfig+0x53c>
 8004870:	e015      	b.n	800489e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004872:	f7fc fa37 	bl	8000ce4 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004878:	e00a      	b.n	8004890 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800487a:	f7fc fa33 	bl	8000ce4 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	f241 3288 	movw	r2, #5000	; 0x1388
 8004888:	4293      	cmp	r3, r2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e14b      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004890:	4b7d      	ldr	r3, [pc, #500]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1ed      	bne.n	800487a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800489e:	7ffb      	ldrb	r3, [r7, #31]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d105      	bne.n	80048b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a4:	4b78      	ldr	r3, [pc, #480]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 80048a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a8:	4a77      	ldr	r2, [pc, #476]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 80048aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0320 	and.w	r3, r3, #32
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d03c      	beq.n	8004936 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d01c      	beq.n	80048fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048c4:	4b70      	ldr	r3, [pc, #448]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 80048c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048ca:	4a6f      	ldr	r2, [pc, #444]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 80048cc:	f043 0301 	orr.w	r3, r3, #1
 80048d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d4:	f7fc fa06 	bl	8000ce4 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048dc:	f7fc fa02 	bl	8000ce4 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e11c      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048ee:	4b66      	ldr	r3, [pc, #408]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 80048f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0ef      	beq.n	80048dc <HAL_RCC_OscConfig+0x5cc>
 80048fc:	e01b      	b.n	8004936 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048fe:	4b62      	ldr	r3, [pc, #392]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 8004900:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004904:	4a60      	ldr	r2, [pc, #384]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 8004906:	f023 0301 	bic.w	r3, r3, #1
 800490a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490e:	f7fc f9e9 	bl	8000ce4 <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004914:	e008      	b.n	8004928 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004916:	f7fc f9e5 	bl	8000ce4 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e0ff      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004928:	4b57      	ldr	r3, [pc, #348]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 800492a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1ef      	bne.n	8004916 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 80f3 	beq.w	8004b26 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004944:	2b02      	cmp	r3, #2
 8004946:	f040 80c9 	bne.w	8004adc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800494a:	4b4f      	ldr	r3, [pc, #316]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f003 0203 	and.w	r2, r3, #3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	429a      	cmp	r2, r3
 800495c:	d12c      	bne.n	80049b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	3b01      	subs	r3, #1
 800496a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800496c:	429a      	cmp	r2, r3
 800496e:	d123      	bne.n	80049b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800497c:	429a      	cmp	r2, r3
 800497e:	d11b      	bne.n	80049b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800498c:	429a      	cmp	r2, r3
 800498e:	d113      	bne.n	80049b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499a:	085b      	lsrs	r3, r3, #1
 800499c:	3b01      	subs	r3, #1
 800499e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d109      	bne.n	80049b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	085b      	lsrs	r3, r3, #1
 80049b0:	3b01      	subs	r3, #1
 80049b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d06b      	beq.n	8004a90 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	2b0c      	cmp	r3, #12
 80049bc:	d062      	beq.n	8004a84 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80049be:	4b32      	ldr	r3, [pc, #200]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e0ac      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049ce:	4b2e      	ldr	r3, [pc, #184]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a2d      	ldr	r2, [pc, #180]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 80049d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049da:	f7fc f983 	bl	8000ce4 <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e2:	f7fc f97f 	bl	8000ce4 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e099      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049f4:	4b24      	ldr	r3, [pc, #144]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1f0      	bne.n	80049e2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a00:	4b21      	ldr	r3, [pc, #132]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	4b21      	ldr	r3, [pc, #132]	; (8004a8c <HAL_RCC_OscConfig+0x77c>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a10:	3a01      	subs	r2, #1
 8004a12:	0112      	lsls	r2, r2, #4
 8004a14:	4311      	orrs	r1, r2
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a1a:	0212      	lsls	r2, r2, #8
 8004a1c:	4311      	orrs	r1, r2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a22:	0852      	lsrs	r2, r2, #1
 8004a24:	3a01      	subs	r2, #1
 8004a26:	0552      	lsls	r2, r2, #21
 8004a28:	4311      	orrs	r1, r2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a2e:	0852      	lsrs	r2, r2, #1
 8004a30:	3a01      	subs	r2, #1
 8004a32:	0652      	lsls	r2, r2, #25
 8004a34:	4311      	orrs	r1, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a3a:	06d2      	lsls	r2, r2, #27
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	4912      	ldr	r1, [pc, #72]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a44:	4b10      	ldr	r3, [pc, #64]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a0f      	ldr	r2, [pc, #60]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 8004a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a50:	4b0d      	ldr	r3, [pc, #52]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	4a0c      	ldr	r2, [pc, #48]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 8004a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a5c:	f7fc f942 	bl	8000ce4 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a64:	f7fc f93e 	bl	8000ce4 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e058      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a76:	4b04      	ldr	r3, [pc, #16]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0f0      	beq.n	8004a64 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a82:	e050      	b.n	8004b26 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e04f      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a90:	4b27      	ldr	r3, [pc, #156]	; (8004b30 <HAL_RCC_OscConfig+0x820>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d144      	bne.n	8004b26 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a9c:	4b24      	ldr	r3, [pc, #144]	; (8004b30 <HAL_RCC_OscConfig+0x820>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a23      	ldr	r2, [pc, #140]	; (8004b30 <HAL_RCC_OscConfig+0x820>)
 8004aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aa6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004aa8:	4b21      	ldr	r3, [pc, #132]	; (8004b30 <HAL_RCC_OscConfig+0x820>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4a20      	ldr	r2, [pc, #128]	; (8004b30 <HAL_RCC_OscConfig+0x820>)
 8004aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ab2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ab4:	f7fc f916 	bl	8000ce4 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004abc:	f7fc f912 	bl	8000ce4 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e02c      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ace:	4b18      	ldr	r3, [pc, #96]	; (8004b30 <HAL_RCC_OscConfig+0x820>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCC_OscConfig+0x7ac>
 8004ada:	e024      	b.n	8004b26 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2b0c      	cmp	r3, #12
 8004ae0:	d01f      	beq.n	8004b22 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ae2:	4b13      	ldr	r3, [pc, #76]	; (8004b30 <HAL_RCC_OscConfig+0x820>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a12      	ldr	r2, [pc, #72]	; (8004b30 <HAL_RCC_OscConfig+0x820>)
 8004ae8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aee:	f7fc f8f9 	bl	8000ce4 <HAL_GetTick>
 8004af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004af4:	e008      	b.n	8004b08 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af6:	f7fc f8f5 	bl	8000ce4 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d901      	bls.n	8004b08 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e00f      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b08:	4b09      	ldr	r3, [pc, #36]	; (8004b30 <HAL_RCC_OscConfig+0x820>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1f0      	bne.n	8004af6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004b14:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <HAL_RCC_OscConfig+0x820>)
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	4905      	ldr	r1, [pc, #20]	; (8004b30 <HAL_RCC_OscConfig+0x820>)
 8004b1a:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <HAL_RCC_OscConfig+0x824>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	60cb      	str	r3, [r1, #12]
 8004b20:	e001      	b.n	8004b26 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3720      	adds	r7, #32
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40021000 	.word	0x40021000
 8004b34:	feeefffc 	.word	0xfeeefffc

08004b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e0e7      	b.n	8004d1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b4c:	4b75      	ldr	r3, [pc, #468]	; (8004d24 <HAL_RCC_ClockConfig+0x1ec>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d910      	bls.n	8004b7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5a:	4b72      	ldr	r3, [pc, #456]	; (8004d24 <HAL_RCC_ClockConfig+0x1ec>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f023 0207 	bic.w	r2, r3, #7
 8004b62:	4970      	ldr	r1, [pc, #448]	; (8004d24 <HAL_RCC_ClockConfig+0x1ec>)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6a:	4b6e      	ldr	r3, [pc, #440]	; (8004d24 <HAL_RCC_ClockConfig+0x1ec>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d001      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e0cf      	b.n	8004d1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d010      	beq.n	8004baa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	4b66      	ldr	r3, [pc, #408]	; (8004d28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d908      	bls.n	8004baa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b98:	4b63      	ldr	r3, [pc, #396]	; (8004d28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	4960      	ldr	r1, [pc, #384]	; (8004d28 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d04c      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d107      	bne.n	8004bce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bbe:	4b5a      	ldr	r3, [pc, #360]	; (8004d28 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d121      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e0a6      	b.n	8004d1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d107      	bne.n	8004be6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bd6:	4b54      	ldr	r3, [pc, #336]	; (8004d28 <HAL_RCC_ClockConfig+0x1f0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d115      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e09a      	b.n	8004d1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d107      	bne.n	8004bfe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bee:	4b4e      	ldr	r3, [pc, #312]	; (8004d28 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d109      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e08e      	b.n	8004d1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bfe:	4b4a      	ldr	r3, [pc, #296]	; (8004d28 <HAL_RCC_ClockConfig+0x1f0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e086      	b.n	8004d1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c0e:	4b46      	ldr	r3, [pc, #280]	; (8004d28 <HAL_RCC_ClockConfig+0x1f0>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f023 0203 	bic.w	r2, r3, #3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	4943      	ldr	r1, [pc, #268]	; (8004d28 <HAL_RCC_ClockConfig+0x1f0>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c20:	f7fc f860 	bl	8000ce4 <HAL_GetTick>
 8004c24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c26:	e00a      	b.n	8004c3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c28:	f7fc f85c 	bl	8000ce4 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e06e      	b.n	8004d1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3e:	4b3a      	ldr	r3, [pc, #232]	; (8004d28 <HAL_RCC_ClockConfig+0x1f0>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 020c 	and.w	r2, r3, #12
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d1eb      	bne.n	8004c28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d010      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	4b31      	ldr	r3, [pc, #196]	; (8004d28 <HAL_RCC_ClockConfig+0x1f0>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d208      	bcs.n	8004c7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c6c:	4b2e      	ldr	r3, [pc, #184]	; (8004d28 <HAL_RCC_ClockConfig+0x1f0>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	492b      	ldr	r1, [pc, #172]	; (8004d28 <HAL_RCC_ClockConfig+0x1f0>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c7e:	4b29      	ldr	r3, [pc, #164]	; (8004d24 <HAL_RCC_ClockConfig+0x1ec>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d210      	bcs.n	8004cae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8c:	4b25      	ldr	r3, [pc, #148]	; (8004d24 <HAL_RCC_ClockConfig+0x1ec>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f023 0207 	bic.w	r2, r3, #7
 8004c94:	4923      	ldr	r1, [pc, #140]	; (8004d24 <HAL_RCC_ClockConfig+0x1ec>)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9c:	4b21      	ldr	r3, [pc, #132]	; (8004d24 <HAL_RCC_ClockConfig+0x1ec>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d001      	beq.n	8004cae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e036      	b.n	8004d1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d008      	beq.n	8004ccc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cba:	4b1b      	ldr	r3, [pc, #108]	; (8004d28 <HAL_RCC_ClockConfig+0x1f0>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	4918      	ldr	r1, [pc, #96]	; (8004d28 <HAL_RCC_ClockConfig+0x1f0>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0308 	and.w	r3, r3, #8
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d009      	beq.n	8004cec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cd8:	4b13      	ldr	r3, [pc, #76]	; (8004d28 <HAL_RCC_ClockConfig+0x1f0>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	4910      	ldr	r1, [pc, #64]	; (8004d28 <HAL_RCC_ClockConfig+0x1f0>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cec:	f000 f824 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	4b0d      	ldr	r3, [pc, #52]	; (8004d28 <HAL_RCC_ClockConfig+0x1f0>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	091b      	lsrs	r3, r3, #4
 8004cf8:	f003 030f 	and.w	r3, r3, #15
 8004cfc:	490b      	ldr	r1, [pc, #44]	; (8004d2c <HAL_RCC_ClockConfig+0x1f4>)
 8004cfe:	5ccb      	ldrb	r3, [r1, r3]
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	fa22 f303 	lsr.w	r3, r2, r3
 8004d08:	4a09      	ldr	r2, [pc, #36]	; (8004d30 <HAL_RCC_ClockConfig+0x1f8>)
 8004d0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d0c:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <HAL_RCC_ClockConfig+0x1fc>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fb ff97 	bl	8000c44 <HAL_InitTick>
 8004d16:	4603      	mov	r3, r0
 8004d18:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d1a:	7afb      	ldrb	r3, [r7, #11]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40022000 	.word	0x40022000
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	0800a348 	.word	0x0800a348
 8004d30:	20000000 	.word	0x20000000
 8004d34:	20000004 	.word	0x20000004

08004d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b089      	sub	sp, #36	; 0x24
 8004d3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61fb      	str	r3, [r7, #28]
 8004d42:	2300      	movs	r3, #0
 8004d44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d46:	4b3e      	ldr	r3, [pc, #248]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 030c 	and.w	r3, r3, #12
 8004d4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d50:	4b3b      	ldr	r3, [pc, #236]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f003 0303 	and.w	r3, r3, #3
 8004d58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d005      	beq.n	8004d6c <HAL_RCC_GetSysClockFreq+0x34>
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2b0c      	cmp	r3, #12
 8004d64:	d121      	bne.n	8004daa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d11e      	bne.n	8004daa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d6c:	4b34      	ldr	r3, [pc, #208]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0308 	and.w	r3, r3, #8
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d107      	bne.n	8004d88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d78:	4b31      	ldr	r3, [pc, #196]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d7e:	0a1b      	lsrs	r3, r3, #8
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	61fb      	str	r3, [r7, #28]
 8004d86:	e005      	b.n	8004d94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d88:	4b2d      	ldr	r3, [pc, #180]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	091b      	lsrs	r3, r3, #4
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d94:	4a2b      	ldr	r2, [pc, #172]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10d      	bne.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004da8:	e00a      	b.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	d102      	bne.n	8004db6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004db0:	4b25      	ldr	r3, [pc, #148]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x110>)
 8004db2:	61bb      	str	r3, [r7, #24]
 8004db4:	e004      	b.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d101      	bne.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dbc:	4b23      	ldr	r3, [pc, #140]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x114>)
 8004dbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	2b0c      	cmp	r3, #12
 8004dc4:	d134      	bne.n	8004e30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dc6:	4b1e      	ldr	r3, [pc, #120]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d003      	beq.n	8004dde <HAL_RCC_GetSysClockFreq+0xa6>
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2b03      	cmp	r3, #3
 8004dda:	d003      	beq.n	8004de4 <HAL_RCC_GetSysClockFreq+0xac>
 8004ddc:	e005      	b.n	8004dea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004dde:	4b1a      	ldr	r3, [pc, #104]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x110>)
 8004de0:	617b      	str	r3, [r7, #20]
      break;
 8004de2:	e005      	b.n	8004df0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004de4:	4b19      	ldr	r3, [pc, #100]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x114>)
 8004de6:	617b      	str	r3, [r7, #20]
      break;
 8004de8:	e002      	b.n	8004df0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	617b      	str	r3, [r7, #20]
      break;
 8004dee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004df0:	4b13      	ldr	r3, [pc, #76]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	091b      	lsrs	r3, r3, #4
 8004df6:	f003 0307 	and.w	r3, r3, #7
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004dfe:	4b10      	ldr	r3, [pc, #64]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	0a1b      	lsrs	r3, r3, #8
 8004e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	fb03 f202 	mul.w	r2, r3, r2
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e16:	4b0a      	ldr	r3, [pc, #40]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	0e5b      	lsrs	r3, r3, #25
 8004e1c:	f003 0303 	and.w	r3, r3, #3
 8004e20:	3301      	adds	r3, #1
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e30:	69bb      	ldr	r3, [r7, #24]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3724      	adds	r7, #36	; 0x24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40021000 	.word	0x40021000
 8004e44:	0800a358 	.word	0x0800a358
 8004e48:	00f42400 	.word	0x00f42400
 8004e4c:	007a1200 	.word	0x007a1200

08004e50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e58:	2300      	movs	r3, #0
 8004e5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e5c:	4b2a      	ldr	r3, [pc, #168]	; (8004f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e68:	f7ff f9de 	bl	8004228 <HAL_PWREx_GetVoltageRange>
 8004e6c:	6178      	str	r0, [r7, #20]
 8004e6e:	e014      	b.n	8004e9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e70:	4b25      	ldr	r3, [pc, #148]	; (8004f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e74:	4a24      	ldr	r2, [pc, #144]	; (8004f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7a:	6593      	str	r3, [r2, #88]	; 0x58
 8004e7c:	4b22      	ldr	r3, [pc, #136]	; (8004f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e88:	f7ff f9ce 	bl	8004228 <HAL_PWREx_GetVoltageRange>
 8004e8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e8e:	4b1e      	ldr	r3, [pc, #120]	; (8004f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e92:	4a1d      	ldr	r2, [pc, #116]	; (8004f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ea0:	d10b      	bne.n	8004eba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b80      	cmp	r3, #128	; 0x80
 8004ea6:	d919      	bls.n	8004edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2ba0      	cmp	r3, #160	; 0xa0
 8004eac:	d902      	bls.n	8004eb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004eae:	2302      	movs	r3, #2
 8004eb0:	613b      	str	r3, [r7, #16]
 8004eb2:	e013      	b.n	8004edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	613b      	str	r3, [r7, #16]
 8004eb8:	e010      	b.n	8004edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b80      	cmp	r3, #128	; 0x80
 8004ebe:	d902      	bls.n	8004ec6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	613b      	str	r3, [r7, #16]
 8004ec4:	e00a      	b.n	8004edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b80      	cmp	r3, #128	; 0x80
 8004eca:	d102      	bne.n	8004ed2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ecc:	2302      	movs	r3, #2
 8004ece:	613b      	str	r3, [r7, #16]
 8004ed0:	e004      	b.n	8004edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b70      	cmp	r3, #112	; 0x70
 8004ed6:	d101      	bne.n	8004edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ed8:	2301      	movs	r3, #1
 8004eda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004edc:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f023 0207 	bic.w	r2, r3, #7
 8004ee4:	4909      	ldr	r1, [pc, #36]	; (8004f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004eec:	4b07      	ldr	r3, [pc, #28]	; (8004f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d001      	beq.n	8004efe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	40022000 	.word	0x40022000

08004f10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f18:	2300      	movs	r3, #0
 8004f1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d031      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f34:	d01a      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004f36:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f3a:	d814      	bhi.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d009      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f44:	d10f      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004f46:	4b5d      	ldr	r3, [pc, #372]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	4a5c      	ldr	r2, [pc, #368]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f50:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f52:	e00c      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3304      	adds	r3, #4
 8004f58:	2100      	movs	r1, #0
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fa22 	bl	80053a4 <RCCEx_PLLSAI1_Config>
 8004f60:	4603      	mov	r3, r0
 8004f62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f64:	e003      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	74fb      	strb	r3, [r7, #19]
      break;
 8004f6a:	e000      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f6e:	7cfb      	ldrb	r3, [r7, #19]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10b      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f74:	4b51      	ldr	r3, [pc, #324]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f82:	494e      	ldr	r1, [pc, #312]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f8a:	e001      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f8c:	7cfb      	ldrb	r3, [r7, #19]
 8004f8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 809e 	beq.w	80050da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fa2:	4b46      	ldr	r3, [pc, #280]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00d      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fb8:	4b40      	ldr	r3, [pc, #256]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbc:	4a3f      	ldr	r2, [pc, #252]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8004fc4:	4b3d      	ldr	r3, [pc, #244]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fcc:	60bb      	str	r3, [r7, #8]
 8004fce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fd4:	4b3a      	ldr	r3, [pc, #232]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a39      	ldr	r2, [pc, #228]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fe0:	f7fb fe80 	bl	8000ce4 <HAL_GetTick>
 8004fe4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fe6:	e009      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe8:	f7fb fe7c 	bl	8000ce4 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d902      	bls.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	74fb      	strb	r3, [r7, #19]
        break;
 8004ffa:	e005      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ffc:	4b30      	ldr	r3, [pc, #192]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0ef      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005008:	7cfb      	ldrb	r3, [r7, #19]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d15a      	bne.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800500e:	4b2b      	ldr	r3, [pc, #172]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005014:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005018:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01e      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	429a      	cmp	r2, r3
 8005028:	d019      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800502a:	4b24      	ldr	r3, [pc, #144]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005034:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005036:	4b21      	ldr	r3, [pc, #132]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503c:	4a1f      	ldr	r2, [pc, #124]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800503e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005046:	4b1d      	ldr	r3, [pc, #116]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504c:	4a1b      	ldr	r2, [pc, #108]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800504e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005052:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005056:	4a19      	ldr	r2, [pc, #100]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d016      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005068:	f7fb fe3c 	bl	8000ce4 <HAL_GetTick>
 800506c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800506e:	e00b      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005070:	f7fb fe38 	bl	8000ce4 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	f241 3288 	movw	r2, #5000	; 0x1388
 800507e:	4293      	cmp	r3, r2
 8005080:	d902      	bls.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	74fb      	strb	r3, [r7, #19]
            break;
 8005086:	e006      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005088:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800508a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0ec      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005096:	7cfb      	ldrb	r3, [r7, #19]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10b      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800509c:	4b07      	ldr	r3, [pc, #28]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800509e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050aa:	4904      	ldr	r1, [pc, #16]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050b2:	e009      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050b4:	7cfb      	ldrb	r3, [r7, #19]
 80050b6:	74bb      	strb	r3, [r7, #18]
 80050b8:	e006      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80050ba:	bf00      	nop
 80050bc:	40021000 	.word	0x40021000
 80050c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c4:	7cfb      	ldrb	r3, [r7, #19]
 80050c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050c8:	7c7b      	ldrb	r3, [r7, #17]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d105      	bne.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ce:	4b8d      	ldr	r3, [pc, #564]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d2:	4a8c      	ldr	r2, [pc, #560]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050e6:	4b87      	ldr	r3, [pc, #540]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ec:	f023 0203 	bic.w	r2, r3, #3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	4983      	ldr	r1, [pc, #524]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005108:	4b7e      	ldr	r3, [pc, #504]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800510a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510e:	f023 020c 	bic.w	r2, r3, #12
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	497b      	ldr	r1, [pc, #492]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005118:	4313      	orrs	r3, r2
 800511a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0304 	and.w	r3, r3, #4
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800512a:	4b76      	ldr	r3, [pc, #472]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800512c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005130:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005138:	4972      	ldr	r1, [pc, #456]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00a      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800514c:	4b6d      	ldr	r3, [pc, #436]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005152:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515a:	496a      	ldr	r1, [pc, #424]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800515c:	4313      	orrs	r3, r2
 800515e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800516e:	4b65      	ldr	r3, [pc, #404]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005174:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517c:	4961      	ldr	r1, [pc, #388]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800517e:	4313      	orrs	r3, r2
 8005180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00a      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005190:	4b5c      	ldr	r3, [pc, #368]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005196:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	4959      	ldr	r1, [pc, #356]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051b2:	4b54      	ldr	r3, [pc, #336]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80051b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c0:	4950      	ldr	r1, [pc, #320]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051d4:	4b4b      	ldr	r3, [pc, #300]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80051d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e2:	4948      	ldr	r1, [pc, #288]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051f6:	4b43      	ldr	r3, [pc, #268]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80051f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	493f      	ldr	r1, [pc, #252]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d028      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005218:	4b3a      	ldr	r3, [pc, #232]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005226:	4937      	ldr	r1, [pc, #220]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005232:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005236:	d106      	bne.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005238:	4b32      	ldr	r3, [pc, #200]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	4a31      	ldr	r2, [pc, #196]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800523e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005242:	60d3      	str	r3, [r2, #12]
 8005244:	e011      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800524a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800524e:	d10c      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3304      	adds	r3, #4
 8005254:	2101      	movs	r1, #1
 8005256:	4618      	mov	r0, r3
 8005258:	f000 f8a4 	bl	80053a4 <RCCEx_PLLSAI1_Config>
 800525c:	4603      	mov	r3, r0
 800525e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005260:	7cfb      	ldrb	r3, [r7, #19]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8005266:	7cfb      	ldrb	r3, [r7, #19]
 8005268:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d028      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005276:	4b23      	ldr	r3, [pc, #140]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005284:	491f      	ldr	r1, [pc, #124]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005286:	4313      	orrs	r3, r2
 8005288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005290:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005294:	d106      	bne.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005296:	4b1b      	ldr	r3, [pc, #108]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	4a1a      	ldr	r2, [pc, #104]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800529c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052a0:	60d3      	str	r3, [r2, #12]
 80052a2:	e011      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052ac:	d10c      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3304      	adds	r3, #4
 80052b2:	2101      	movs	r1, #1
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 f875 	bl	80053a4 <RCCEx_PLLSAI1_Config>
 80052ba:	4603      	mov	r3, r0
 80052bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052be:	7cfb      	ldrb	r3, [r7, #19]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80052c4:	7cfb      	ldrb	r3, [r7, #19]
 80052c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d02b      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052d4:	4b0b      	ldr	r3, [pc, #44]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80052d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e2:	4908      	ldr	r1, [pc, #32]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052f2:	d109      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052f4:	4b03      	ldr	r3, [pc, #12]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4a02      	ldr	r2, [pc, #8]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80052fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052fe:	60d3      	str	r3, [r2, #12]
 8005300:	e014      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005302:	bf00      	nop
 8005304:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800530c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005310:	d10c      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	3304      	adds	r3, #4
 8005316:	2101      	movs	r1, #1
 8005318:	4618      	mov	r0, r3
 800531a:	f000 f843 	bl	80053a4 <RCCEx_PLLSAI1_Config>
 800531e:	4603      	mov	r3, r0
 8005320:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005322:	7cfb      	ldrb	r3, [r7, #19]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8005328:	7cfb      	ldrb	r3, [r7, #19]
 800532a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d01c      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005338:	4b19      	ldr	r3, [pc, #100]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800533a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005346:	4916      	ldr	r1, [pc, #88]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005348:	4313      	orrs	r3, r2
 800534a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005352:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005356:	d10c      	bne.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3304      	adds	r3, #4
 800535c:	2102      	movs	r1, #2
 800535e:	4618      	mov	r0, r3
 8005360:	f000 f820 	bl	80053a4 <RCCEx_PLLSAI1_Config>
 8005364:	4603      	mov	r3, r0
 8005366:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005368:	7cfb      	ldrb	r3, [r7, #19]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800536e:	7cfb      	ldrb	r3, [r7, #19]
 8005370:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800537e:	4b08      	ldr	r3, [pc, #32]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005384:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538c:	4904      	ldr	r1, [pc, #16]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800538e:	4313      	orrs	r3, r2
 8005390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005394:	7cbb      	ldrb	r3, [r7, #18]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	40021000 	.word	0x40021000

080053a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053ae:	2300      	movs	r3, #0
 80053b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053b2:	4b74      	ldr	r3, [pc, #464]	; (8005584 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d018      	beq.n	80053f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80053be:	4b71      	ldr	r3, [pc, #452]	; (8005584 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f003 0203 	and.w	r2, r3, #3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d10d      	bne.n	80053ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
       ||
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80053d6:	4b6b      	ldr	r3, [pc, #428]	; (8005584 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	091b      	lsrs	r3, r3, #4
 80053dc:	f003 0307 	and.w	r3, r3, #7
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
       ||
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d047      	beq.n	800547a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	73fb      	strb	r3, [r7, #15]
 80053ee:	e044      	b.n	800547a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2b03      	cmp	r3, #3
 80053f6:	d018      	beq.n	800542a <RCCEx_PLLSAI1_Config+0x86>
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d825      	bhi.n	8005448 <RCCEx_PLLSAI1_Config+0xa4>
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d002      	beq.n	8005406 <RCCEx_PLLSAI1_Config+0x62>
 8005400:	2b02      	cmp	r3, #2
 8005402:	d009      	beq.n	8005418 <RCCEx_PLLSAI1_Config+0x74>
 8005404:	e020      	b.n	8005448 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005406:	4b5f      	ldr	r3, [pc, #380]	; (8005584 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d11d      	bne.n	800544e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005416:	e01a      	b.n	800544e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005418:	4b5a      	ldr	r3, [pc, #360]	; (8005584 <RCCEx_PLLSAI1_Config+0x1e0>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005420:	2b00      	cmp	r3, #0
 8005422:	d116      	bne.n	8005452 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005428:	e013      	b.n	8005452 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800542a:	4b56      	ldr	r3, [pc, #344]	; (8005584 <RCCEx_PLLSAI1_Config+0x1e0>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10f      	bne.n	8005456 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005436:	4b53      	ldr	r3, [pc, #332]	; (8005584 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005446:	e006      	b.n	8005456 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	73fb      	strb	r3, [r7, #15]
      break;
 800544c:	e004      	b.n	8005458 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800544e:	bf00      	nop
 8005450:	e002      	b.n	8005458 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005452:	bf00      	nop
 8005454:	e000      	b.n	8005458 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005456:	bf00      	nop
    }

    if(status == HAL_OK)
 8005458:	7bfb      	ldrb	r3, [r7, #15]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10d      	bne.n	800547a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800545e:	4b49      	ldr	r3, [pc, #292]	; (8005584 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6819      	ldr	r1, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	3b01      	subs	r3, #1
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	430b      	orrs	r3, r1
 8005474:	4943      	ldr	r1, [pc, #268]	; (8005584 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005476:	4313      	orrs	r3, r2
 8005478:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d17c      	bne.n	800557a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005480:	4b40      	ldr	r3, [pc, #256]	; (8005584 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a3f      	ldr	r2, [pc, #252]	; (8005584 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005486:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800548a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800548c:	f7fb fc2a 	bl	8000ce4 <HAL_GetTick>
 8005490:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005492:	e009      	b.n	80054a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005494:	f7fb fc26 	bl	8000ce4 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d902      	bls.n	80054a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	73fb      	strb	r3, [r7, #15]
        break;
 80054a6:	e005      	b.n	80054b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054a8:	4b36      	ldr	r3, [pc, #216]	; (8005584 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1ef      	bne.n	8005494 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d15f      	bne.n	800557a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d110      	bne.n	80054e2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054c0:	4b30      	ldr	r3, [pc, #192]	; (8005584 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80054c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6892      	ldr	r2, [r2, #8]
 80054d0:	0211      	lsls	r1, r2, #8
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	68d2      	ldr	r2, [r2, #12]
 80054d6:	06d2      	lsls	r2, r2, #27
 80054d8:	430a      	orrs	r2, r1
 80054da:	492a      	ldr	r1, [pc, #168]	; (8005584 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	610b      	str	r3, [r1, #16]
 80054e0:	e027      	b.n	8005532 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d112      	bne.n	800550e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054e8:	4b26      	ldr	r3, [pc, #152]	; (8005584 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80054f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6892      	ldr	r2, [r2, #8]
 80054f8:	0211      	lsls	r1, r2, #8
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6912      	ldr	r2, [r2, #16]
 80054fe:	0852      	lsrs	r2, r2, #1
 8005500:	3a01      	subs	r2, #1
 8005502:	0552      	lsls	r2, r2, #21
 8005504:	430a      	orrs	r2, r1
 8005506:	491f      	ldr	r1, [pc, #124]	; (8005584 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005508:	4313      	orrs	r3, r2
 800550a:	610b      	str	r3, [r1, #16]
 800550c:	e011      	b.n	8005532 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800550e:	4b1d      	ldr	r3, [pc, #116]	; (8005584 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005516:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6892      	ldr	r2, [r2, #8]
 800551e:	0211      	lsls	r1, r2, #8
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6952      	ldr	r2, [r2, #20]
 8005524:	0852      	lsrs	r2, r2, #1
 8005526:	3a01      	subs	r2, #1
 8005528:	0652      	lsls	r2, r2, #25
 800552a:	430a      	orrs	r2, r1
 800552c:	4915      	ldr	r1, [pc, #84]	; (8005584 <RCCEx_PLLSAI1_Config+0x1e0>)
 800552e:	4313      	orrs	r3, r2
 8005530:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005532:	4b14      	ldr	r3, [pc, #80]	; (8005584 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a13      	ldr	r2, [pc, #76]	; (8005584 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005538:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800553c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800553e:	f7fb fbd1 	bl	8000ce4 <HAL_GetTick>
 8005542:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005544:	e009      	b.n	800555a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005546:	f7fb fbcd 	bl	8000ce4 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d902      	bls.n	800555a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	73fb      	strb	r3, [r7, #15]
          break;
 8005558:	e005      	b.n	8005566 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800555a:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <RCCEx_PLLSAI1_Config+0x1e0>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0ef      	beq.n	8005546 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005566:	7bfb      	ldrb	r3, [r7, #15]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d106      	bne.n	800557a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800556c:	4b05      	ldr	r3, [pc, #20]	; (8005584 <RCCEx_PLLSAI1_Config+0x1e0>)
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	4903      	ldr	r1, [pc, #12]	; (8005584 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005576:	4313      	orrs	r3, r2
 8005578:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800557a:	7bfb      	ldrb	r3, [r7, #15]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40021000 	.word	0x40021000

08005588 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e095      	b.n	80056c6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d108      	bne.n	80055b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055aa:	d009      	beq.n	80055c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	61da      	str	r2, [r3, #28]
 80055b2:	e005      	b.n	80055c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d106      	bne.n	80055e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7fb f9ce 	bl	800097c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005600:	d902      	bls.n	8005608 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	e002      	b.n	800560e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800560c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005616:	d007      	beq.n	8005628 <HAL_SPI_Init+0xa0>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005620:	d002      	beq.n	8005628 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005638:	431a      	orrs	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	431a      	orrs	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005660:	431a      	orrs	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566a:	ea42 0103 	orr.w	r1, r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005672:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	0c1b      	lsrs	r3, r3, #16
 8005684:	f003 0204 	and.w	r2, r3, #4
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	431a      	orrs	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80056a4:	ea42 0103 	orr.w	r1, r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e049      	b.n	8005774 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d106      	bne.n	80056fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7fb fa43 	bl	8000b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2202      	movs	r2, #2
 80056fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	3304      	adds	r3, #4
 800570a:	4619      	mov	r1, r3
 800570c:	4610      	mov	r0, r2
 800570e:	f000 f835 	bl	800577c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a2a      	ldr	r2, [pc, #168]	; (8005838 <TIM_Base_SetConfig+0xbc>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d003      	beq.n	800579c <TIM_Base_SetConfig+0x20>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579a:	d108      	bne.n	80057ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a21      	ldr	r2, [pc, #132]	; (8005838 <TIM_Base_SetConfig+0xbc>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00b      	beq.n	80057ce <TIM_Base_SetConfig+0x52>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057bc:	d007      	beq.n	80057ce <TIM_Base_SetConfig+0x52>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a1e      	ldr	r2, [pc, #120]	; (800583c <TIM_Base_SetConfig+0xc0>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d003      	beq.n	80057ce <TIM_Base_SetConfig+0x52>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a1d      	ldr	r2, [pc, #116]	; (8005840 <TIM_Base_SetConfig+0xc4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d108      	bne.n	80057e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4313      	orrs	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a0c      	ldr	r2, [pc, #48]	; (8005838 <TIM_Base_SetConfig+0xbc>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d007      	beq.n	800581c <TIM_Base_SetConfig+0xa0>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a0b      	ldr	r2, [pc, #44]	; (800583c <TIM_Base_SetConfig+0xc0>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d003      	beq.n	800581c <TIM_Base_SetConfig+0xa0>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a0a      	ldr	r2, [pc, #40]	; (8005840 <TIM_Base_SetConfig+0xc4>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d103      	bne.n	8005824 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	615a      	str	r2, [r3, #20]
}
 800582a:	bf00      	nop
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40012c00 	.word	0x40012c00
 800583c:	40014000 	.word	0x40014000
 8005840:	40014400 	.word	0x40014400

08005844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005858:	2302      	movs	r3, #2
 800585a:	e04f      	b.n	80058fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a21      	ldr	r2, [pc, #132]	; (8005908 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d108      	bne.n	8005898 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800588c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a14      	ldr	r2, [pc, #80]	; (8005908 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d009      	beq.n	80058d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c4:	d004      	beq.n	80058d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a10      	ldr	r2, [pc, #64]	; (800590c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d10c      	bne.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	40012c00 	.word	0x40012c00
 800590c:	40014000 	.word	0x40014000

08005910 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005910:	b084      	sub	sp, #16
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	f107 0014 	add.w	r0, r7, #20
 800591e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	b004      	add	sp, #16
 8005930:	4770      	bx	lr

08005932 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005932:	b480      	push	{r7}
 8005934:	b085      	sub	sp, #20
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005942:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005946:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	b29a      	uxth	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005968:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800596c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005974:	b29a      	uxth	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	b29b      	uxth	r3, r3
 800597a:	43db      	mvns	r3, r3
 800597c:	b29b      	uxth	r3, r3
 800597e:	4013      	ands	r3, r2
 8005980:	b29a      	uxth	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	460b      	mov	r3, r1
 80059a0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80059b0:	b084      	sub	sp, #16
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	f107 0014 	add.w	r0, r7, #20
 80059be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	b004      	add	sp, #16
 80059f0:	4770      	bx	lr
	...

080059f4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b09d      	sub	sp, #116	; 0x74
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	78db      	ldrb	r3, [r3, #3]
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d81f      	bhi.n	8005a66 <USB_ActivateEndpoint+0x72>
 8005a26:	a201      	add	r2, pc, #4	; (adr r2, 8005a2c <USB_ActivateEndpoint+0x38>)
 8005a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2c:	08005a3d 	.word	0x08005a3d
 8005a30:	08005a59 	.word	0x08005a59
 8005a34:	08005a6f 	.word	0x08005a6f
 8005a38:	08005a4b 	.word	0x08005a4b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005a3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005a40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a44:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005a48:	e012      	b.n	8005a70 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005a4a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005a4e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005a52:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005a56:	e00b      	b.n	8005a70 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005a58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005a5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a60:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005a64:	e004      	b.n	8005a70 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005a6c:	e000      	b.n	8005a70 <USB_ActivateEndpoint+0x7c>
      break;
 8005a6e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	441a      	add	r2, r3
 8005a7a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	b21b      	sxth	r3, r3
 8005aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aaa:	b21a      	sxth	r2, r3
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	b21b      	sxth	r3, r3
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	b21b      	sxth	r3, r3
 8005ab6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	441a      	add	r2, r3
 8005ac4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005ac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005acc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	7b1b      	ldrb	r3, [r3, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f040 816e 	bne.w	8005dc2 <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	785b      	ldrb	r3, [r3, #1]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 8084 	beq.w	8005bf8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	61bb      	str	r3, [r7, #24]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	461a      	mov	r2, r3
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	4413      	add	r3, r2
 8005b02:	61bb      	str	r3, [r7, #24]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	00da      	lsls	r2, r3, #3
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	88db      	ldrh	r3, [r3, #6]
 8005b18:	085b      	lsrs	r3, r3, #1
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	827b      	strh	r3, [r7, #18]
 8005b32:	8a7b      	ldrh	r3, [r7, #18]
 8005b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d01b      	beq.n	8005b74 <USB_ActivateEndpoint+0x180>
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b52:	823b      	strh	r3, [r7, #16]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	441a      	add	r2, r3
 8005b5e:	8a3b      	ldrh	r3, [r7, #16]
 8005b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	78db      	ldrb	r3, [r3, #3]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d020      	beq.n	8005bbe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b92:	81bb      	strh	r3, [r7, #12]
 8005b94:	89bb      	ldrh	r3, [r7, #12]
 8005b96:	f083 0320 	eor.w	r3, r3, #32
 8005b9a:	81bb      	strh	r3, [r7, #12]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	441a      	add	r2, r3
 8005ba6:	89bb      	ldrh	r3, [r7, #12]
 8005ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	8013      	strh	r3, [r2, #0]
 8005bbc:	e2cb      	b.n	8006156 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bd4:	81fb      	strh	r3, [r7, #14]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	441a      	add	r2, r3
 8005be0:	89fb      	ldrh	r3, [r7, #14]
 8005be2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	8013      	strh	r3, [r2, #0]
 8005bf6:	e2ae      	b.n	8006156 <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	633b      	str	r3, [r7, #48]	; 0x30
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	461a      	mov	r2, r3
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	4413      	add	r3, r2
 8005c0a:	633b      	str	r3, [r7, #48]	; 0x30
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	00da      	lsls	r2, r3, #3
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	4413      	add	r3, r2
 8005c16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	88db      	ldrh	r3, [r3, #6]
 8005c20:	085b      	lsrs	r3, r3, #1
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	461a      	mov	r2, r3
 8005c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3c:	4413      	add	r3, r2
 8005c3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	00da      	lsls	r2, r3, #3
 8005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c48:	4413      	add	r3, r2
 8005c4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	2b3e      	cmp	r3, #62	; 0x3e
 8005c56:	d918      	bls.n	8005c8a <USB_ActivateEndpoint+0x296>
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	095b      	lsrs	r3, r3, #5
 8005c5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	f003 031f 	and.w	r3, r3, #31
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d102      	bne.n	8005c72 <USB_ActivateEndpoint+0x27e>
 8005c6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	029b      	lsls	r3, r3, #10
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	801a      	strh	r2, [r3, #0]
 8005c88:	e029      	b.n	8005cde <USB_ActivateEndpoint+0x2ea>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d112      	bne.n	8005cb8 <USB_ActivateEndpoint+0x2c4>
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	801a      	strh	r2, [r3, #0]
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	801a      	strh	r2, [r3, #0]
 8005cb6:	e012      	b.n	8005cde <USB_ActivateEndpoint+0x2ea>
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	085b      	lsrs	r3, r3, #1
 8005cbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <USB_ActivateEndpoint+0x2de>
 8005ccc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cce:	3301      	adds	r3, #1
 8005cd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	029b      	lsls	r3, r3, #10
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	847b      	strh	r3, [r7, #34]	; 0x22
 8005cec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d01b      	beq.n	8005d2e <USB_ActivateEndpoint+0x33a>
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0c:	843b      	strh	r3, [r7, #32]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	441a      	add	r2, r3
 8005d18:	8c3b      	ldrh	r3, [r7, #32]
 8005d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d124      	bne.n	8005d80 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4c:	83bb      	strh	r3, [r7, #28]
 8005d4e:	8bbb      	ldrh	r3, [r7, #28]
 8005d50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d54:	83bb      	strh	r3, [r7, #28]
 8005d56:	8bbb      	ldrh	r3, [r7, #28]
 8005d58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d5c:	83bb      	strh	r3, [r7, #28]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	441a      	add	r2, r3
 8005d68:	8bbb      	ldrh	r3, [r7, #28]
 8005d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	8013      	strh	r3, [r2, #0]
 8005d7e:	e1ea      	b.n	8006156 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d96:	83fb      	strh	r3, [r7, #30]
 8005d98:	8bfb      	ldrh	r3, [r7, #30]
 8005d9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d9e:	83fb      	strh	r3, [r7, #30]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	441a      	add	r2, r3
 8005daa:	8bfb      	ldrh	r3, [r7, #30]
 8005dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	8013      	strh	r3, [r2, #0]
 8005dc0:	e1c9      	b.n	8006156 <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	78db      	ldrb	r3, [r3, #3]
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d11e      	bne.n	8005e08 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	441a      	add	r2, r3
 8005dee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dfa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	8013      	strh	r3, [r2, #0]
 8005e06:	e01d      	b.n	8005e44 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	441a      	add	r2, r3
 8005e2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	461a      	mov	r2, r3
 8005e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e54:	4413      	add	r3, r2
 8005e56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	00da      	lsls	r2, r3, #3
 8005e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e66:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	891b      	ldrh	r3, [r3, #8]
 8005e6c:	085b      	lsrs	r3, r3, #1
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e76:	801a      	strh	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	657b      	str	r3, [r7, #84]	; 0x54
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	461a      	mov	r2, r3
 8005e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e88:	4413      	add	r3, r2
 8005e8a:	657b      	str	r3, [r7, #84]	; 0x54
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	00da      	lsls	r2, r3, #3
 8005e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e94:	4413      	add	r3, r2
 8005e96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e9a:	653b      	str	r3, [r7, #80]	; 0x50
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	895b      	ldrh	r3, [r3, #10]
 8005ea0:	085b      	lsrs	r3, r3, #1
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	005b      	lsls	r3, r3, #1
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eaa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	785b      	ldrb	r3, [r3, #1]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f040 8093 	bne.w	8005fdc <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005ec6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d01b      	beq.n	8005f0a <USB_ActivateEndpoint+0x516>
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4413      	add	r3, r2
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	441a      	add	r2, r3
 8005ef4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005efe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005f18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d01b      	beq.n	8005f5a <USB_ActivateEndpoint+0x566>
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f38:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	441a      	add	r2, r3
 8005f44:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	881b      	ldrh	r3, [r3, #0]
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f70:	873b      	strh	r3, [r7, #56]	; 0x38
 8005f72:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f78:	873b      	strh	r3, [r7, #56]	; 0x38
 8005f7a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f80:	873b      	strh	r3, [r7, #56]	; 0x38
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	441a      	add	r2, r3
 8005f8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fb8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	441a      	add	r2, r3
 8005fc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	8013      	strh	r3, [r2, #0]
 8005fda:	e0bc      	b.n	8006156 <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005fec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d01d      	beq.n	8006034 <USB_ActivateEndpoint+0x640>
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	881b      	ldrh	r3, [r3, #0]
 8006004:	b29b      	uxth	r3, r3
 8006006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800600a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	441a      	add	r2, r3
 800601c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800602c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006030:	b29b      	uxth	r3, r3
 8006032:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006044:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604c:	2b00      	cmp	r3, #0
 800604e:	d01d      	beq.n	800608c <USB_ActivateEndpoint+0x698>
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	b29b      	uxth	r3, r3
 800605e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006066:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	441a      	add	r2, r3
 8006074:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800607c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006084:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006088:	b29b      	uxth	r3, r3
 800608a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	78db      	ldrb	r3, [r3, #3]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d024      	beq.n	80060de <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80060ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80060b2:	f083 0320 	eor.w	r3, r3, #32
 80060b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	441a      	add	r2, r3
 80060c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80060c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d8:	b29b      	uxth	r3, r3
 80060da:	8013      	strh	r3, [r2, #0]
 80060dc:	e01d      	b.n	800611a <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	441a      	add	r2, r3
 8006102:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006106:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800610a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800610e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006116:	b29b      	uxth	r3, r3
 8006118:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	b29b      	uxth	r3, r3
 8006128:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800612c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006130:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	441a      	add	r2, r3
 800613e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800614a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800614e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006152:	b29b      	uxth	r3, r3
 8006154:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006156:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800615a:	4618      	mov	r0, r3
 800615c:	3774      	adds	r7, #116	; 0x74
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop

08006168 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006168:	b480      	push	{r7}
 800616a:	b08d      	sub	sp, #52	; 0x34
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	7b1b      	ldrb	r3, [r3, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	f040 808e 	bne.w	8006298 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	785b      	ldrb	r3, [r3, #1]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d044      	beq.n	800620e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	81bb      	strh	r3, [r7, #12]
 8006192:	89bb      	ldrh	r3, [r7, #12]
 8006194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01b      	beq.n	80061d4 <USB_DeactivateEndpoint+0x6c>
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b2:	817b      	strh	r3, [r7, #10]
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	441a      	add	r2, r3
 80061be:	897b      	ldrh	r3, [r7, #10]
 80061c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061ea:	813b      	strh	r3, [r7, #8]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	441a      	add	r2, r3
 80061f6:	893b      	ldrh	r3, [r7, #8]
 80061f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006208:	b29b      	uxth	r3, r3
 800620a:	8013      	strh	r3, [r2, #0]
 800620c:	e192      	b.n	8006534 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	827b      	strh	r3, [r7, #18]
 800621c:	8a7b      	ldrh	r3, [r7, #18]
 800621e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d01b      	beq.n	800625e <USB_DeactivateEndpoint+0xf6>
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	b29b      	uxth	r3, r3
 8006234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623c:	823b      	strh	r3, [r7, #16]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	441a      	add	r2, r3
 8006248:	8a3b      	ldrh	r3, [r7, #16]
 800624a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800624e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006252:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800625a:	b29b      	uxth	r3, r3
 800625c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	b29b      	uxth	r3, r3
 800626c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006274:	81fb      	strh	r3, [r7, #14]
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	441a      	add	r2, r3
 8006280:	89fb      	ldrh	r3, [r7, #14]
 8006282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800628a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800628e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006292:	b29b      	uxth	r3, r3
 8006294:	8013      	strh	r3, [r2, #0]
 8006296:	e14d      	b.n	8006534 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	785b      	ldrb	r3, [r3, #1]
 800629c:	2b00      	cmp	r3, #0
 800629e:	f040 80a5 	bne.w	80063ec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	843b      	strh	r3, [r7, #32]
 80062b0:	8c3b      	ldrh	r3, [r7, #32]
 80062b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d01b      	beq.n	80062f2 <USB_DeactivateEndpoint+0x18a>
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4413      	add	r3, r2
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d0:	83fb      	strh	r3, [r7, #30]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	441a      	add	r2, r3
 80062dc:	8bfb      	ldrh	r3, [r7, #30]
 80062de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	83bb      	strh	r3, [r7, #28]
 8006300:	8bbb      	ldrh	r3, [r7, #28]
 8006302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006306:	2b00      	cmp	r3, #0
 8006308:	d01b      	beq.n	8006342 <USB_DeactivateEndpoint+0x1da>
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	b29b      	uxth	r3, r3
 8006318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800631c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006320:	837b      	strh	r3, [r7, #26]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	441a      	add	r2, r3
 800632c:	8b7b      	ldrh	r3, [r7, #26]
 800632e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800633a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800633e:	b29b      	uxth	r3, r3
 8006340:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	b29b      	uxth	r3, r3
 8006350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006358:	833b      	strh	r3, [r7, #24]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	441a      	add	r2, r3
 8006364:	8b3b      	ldrh	r3, [r7, #24]
 8006366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800636a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800636e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006372:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006376:	b29b      	uxth	r3, r3
 8006378:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	b29b      	uxth	r3, r3
 8006388:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800638c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006390:	82fb      	strh	r3, [r7, #22]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	441a      	add	r2, r3
 800639c:	8afb      	ldrh	r3, [r7, #22]
 800639e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063c8:	82bb      	strh	r3, [r7, #20]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	441a      	add	r2, r3
 80063d4:	8abb      	ldrh	r3, [r7, #20]
 80063d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	8013      	strh	r3, [r2, #0]
 80063ea:	e0a3      	b.n	8006534 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80063fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80063fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d01b      	beq.n	800643c <USB_DeactivateEndpoint+0x2d4>
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	b29b      	uxth	r3, r3
 8006412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800641a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	441a      	add	r2, r3
 8006426:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800642c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006430:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006438:	b29b      	uxth	r3, r3
 800643a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	857b      	strh	r3, [r7, #42]	; 0x2a
 800644a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800644c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006450:	2b00      	cmp	r3, #0
 8006452:	d01b      	beq.n	800648c <USB_DeactivateEndpoint+0x324>
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	b29b      	uxth	r3, r3
 8006462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646a:	853b      	strh	r3, [r7, #40]	; 0x28
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	441a      	add	r2, r3
 8006476:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800647c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006484:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006488:	b29b      	uxth	r3, r3
 800648a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	b29b      	uxth	r3, r3
 800649a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800649e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	441a      	add	r2, r3
 80064ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4413      	add	r3, r2
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	441a      	add	r2, r3
 80064e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	b29b      	uxth	r3, r3
 800650a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800650e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006512:	847b      	strh	r3, [r7, #34]	; 0x22
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	441a      	add	r2, r3
 800651e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006520:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006524:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800652c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006530:	b29b      	uxth	r3, r3
 8006532:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3734      	adds	r7, #52	; 0x34
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b0c2      	sub	sp, #264	; 0x108
 8006546:	af00      	add	r7, sp, #0
 8006548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006550:	6018      	str	r0, [r3, #0]
 8006552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800655a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800655c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	785b      	ldrb	r3, [r3, #1]
 8006568:	2b01      	cmp	r3, #1
 800656a:	f040 867b 	bne.w	8007264 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800656e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	699a      	ldr	r2, [r3, #24]
 800657a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	429a      	cmp	r2, r3
 8006588:	d908      	bls.n	800659c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800658a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800658e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800659a:	e007      	b.n	80065ac <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800659c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80065ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	7b1b      	ldrb	r3, [r3, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d13a      	bne.n	8006632 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80065bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6959      	ldr	r1, [r3, #20]
 80065c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	88da      	ldrh	r2, [r3, #6]
 80065d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d8:	b29b      	uxth	r3, r3
 80065da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80065de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80065e2:	6800      	ldr	r0, [r0, #0]
 80065e4:	f001 fc3e 	bl	8007e64 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80065e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	613b      	str	r3, [r7, #16]
 80065f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006602:	b29b      	uxth	r3, r3
 8006604:	461a      	mov	r2, r3
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	4413      	add	r3, r2
 800660a:	613b      	str	r3, [r7, #16]
 800660c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	00da      	lsls	r2, r3, #3
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	4413      	add	r3, r2
 800661e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006622:	60fb      	str	r3, [r7, #12]
 8006624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006628:	b29a      	uxth	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	801a      	strh	r2, [r3, #0]
 800662e:	f000 bde3 	b.w	80071f8 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	78db      	ldrb	r3, [r3, #3]
 800663e:	2b02      	cmp	r3, #2
 8006640:	f040 843a 	bne.w	8006eb8 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6a1a      	ldr	r2, [r3, #32]
 8006650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	429a      	cmp	r2, r3
 800665e:	f240 83b7 	bls.w	8006dd0 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006666:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	b29b      	uxth	r3, r3
 8006680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006688:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800668c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006690:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800669a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	441a      	add	r2, r3
 80066a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80066aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066b2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80066b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80066be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6a1a      	ldr	r2, [r3, #32]
 80066ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ce:	1ad2      	subs	r2, r2, r3
 80066d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80066dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f000 81b3 	beq.w	8006a6a <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006708:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	633b      	str	r3, [r7, #48]	; 0x30
 8006710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	785b      	ldrb	r3, [r3, #1]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d16d      	bne.n	80067fc <USB_EPStartXfer+0x2ba>
 8006720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006724:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	62bb      	str	r3, [r7, #40]	; 0x28
 800672c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006730:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800673a:	b29b      	uxth	r3, r3
 800673c:	461a      	mov	r2, r3
 800673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006740:	4413      	add	r3, r2
 8006742:	62bb      	str	r3, [r7, #40]	; 0x28
 8006744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	00da      	lsls	r2, r3, #3
 8006752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006754:	4413      	add	r3, r2
 8006756:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800675a:	627b      	str	r3, [r7, #36]	; 0x24
 800675c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006760:	2b3e      	cmp	r3, #62	; 0x3e
 8006762:	d91c      	bls.n	800679e <USB_EPStartXfer+0x25c>
 8006764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006768:	095b      	lsrs	r3, r3, #5
 800676a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800676e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006772:	f003 031f 	and.w	r3, r3, #31
 8006776:	2b00      	cmp	r3, #0
 8006778:	d104      	bne.n	8006784 <USB_EPStartXfer+0x242>
 800677a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800677e:	3b01      	subs	r3, #1
 8006780:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006784:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006788:	b29b      	uxth	r3, r3
 800678a:	029b      	lsls	r3, r3, #10
 800678c:	b29b      	uxth	r3, r3
 800678e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006796:	b29a      	uxth	r2, r3
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	801a      	strh	r2, [r3, #0]
 800679c:	e053      	b.n	8006846 <USB_EPStartXfer+0x304>
 800679e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d112      	bne.n	80067cc <USB_EPStartXfer+0x28a>
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	801a      	strh	r2, [r3, #0]
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	801a      	strh	r2, [r3, #0]
 80067ca:	e03c      	b.n	8006846 <USB_EPStartXfer+0x304>
 80067cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067d0:	085b      	lsrs	r3, r3, #1
 80067d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d004      	beq.n	80067ec <USB_EPStartXfer+0x2aa>
 80067e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067e6:	3301      	adds	r3, #1
 80067e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	029b      	lsls	r3, r3, #10
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	801a      	strh	r2, [r3, #0]
 80067fa:	e024      	b.n	8006846 <USB_EPStartXfer+0x304>
 80067fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	785b      	ldrb	r3, [r3, #1]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d11c      	bne.n	8006846 <USB_EPStartXfer+0x304>
 800680c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006810:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800681a:	b29b      	uxth	r3, r3
 800681c:	461a      	mov	r2, r3
 800681e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006820:	4413      	add	r3, r2
 8006822:	633b      	str	r3, [r7, #48]	; 0x30
 8006824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006828:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	00da      	lsls	r2, r3, #3
 8006832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006834:	4413      	add	r3, r2
 8006836:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800683a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800683c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006840:	b29a      	uxth	r2, r3
 8006842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006844:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800684a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	895b      	ldrh	r3, [r3, #10]
 8006852:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6959      	ldr	r1, [r3, #20]
 8006862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006866:	b29b      	uxth	r3, r3
 8006868:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800686c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006870:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006874:	6800      	ldr	r0, [r0, #0]
 8006876:	f001 faf5 	bl	8007e64 <USB_WritePMA>
            ep->xfer_buff += len;
 800687a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	695a      	ldr	r2, [r3, #20]
 8006886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800688a:	441a      	add	r2, r3
 800688c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800689c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6a1a      	ldr	r2, [r3, #32]
 80068a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d90f      	bls.n	80068d4 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 80068b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	6a1a      	ldr	r2, [r3, #32]
 80068c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068c4:	1ad2      	subs	r2, r2, r3
 80068c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	621a      	str	r2, [r3, #32]
 80068d2:	e00e      	b.n	80068f2 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80068d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80068e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2200      	movs	r2, #0
 80068f0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	785b      	ldrb	r3, [r3, #1]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d16d      	bne.n	80069de <USB_EPStartXfer+0x49c>
 8006902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006906:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	61bb      	str	r3, [r7, #24]
 800690e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006912:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800691c:	b29b      	uxth	r3, r3
 800691e:	461a      	mov	r2, r3
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	4413      	add	r3, r2
 8006924:	61bb      	str	r3, [r7, #24]
 8006926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800692a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	00da      	lsls	r2, r3, #3
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	4413      	add	r3, r2
 8006938:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800693c:	617b      	str	r3, [r7, #20]
 800693e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006942:	2b3e      	cmp	r3, #62	; 0x3e
 8006944:	d91c      	bls.n	8006980 <USB_EPStartXfer+0x43e>
 8006946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800694a:	095b      	lsrs	r3, r3, #5
 800694c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006954:	f003 031f 	and.w	r3, r3, #31
 8006958:	2b00      	cmp	r3, #0
 800695a:	d104      	bne.n	8006966 <USB_EPStartXfer+0x424>
 800695c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006960:	3b01      	subs	r3, #1
 8006962:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800696a:	b29b      	uxth	r3, r3
 800696c:	029b      	lsls	r3, r3, #10
 800696e:	b29b      	uxth	r3, r3
 8006970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006978:	b29a      	uxth	r2, r3
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	801a      	strh	r2, [r3, #0]
 800697e:	e059      	b.n	8006a34 <USB_EPStartXfer+0x4f2>
 8006980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006984:	2b00      	cmp	r3, #0
 8006986:	d112      	bne.n	80069ae <USB_EPStartXfer+0x46c>
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	b29b      	uxth	r3, r3
 800698e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006992:	b29a      	uxth	r2, r3
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	801a      	strh	r2, [r3, #0]
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	b29b      	uxth	r3, r3
 800699e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	801a      	strh	r2, [r3, #0]
 80069ac:	e042      	b.n	8006a34 <USB_EPStartXfer+0x4f2>
 80069ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b2:	085b      	lsrs	r3, r3, #1
 80069b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d004      	beq.n	80069ce <USB_EPStartXfer+0x48c>
 80069c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069c8:	3301      	adds	r3, #1
 80069ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	029b      	lsls	r3, r3, #10
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	801a      	strh	r2, [r3, #0]
 80069dc:	e02a      	b.n	8006a34 <USB_EPStartXfer+0x4f2>
 80069de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	785b      	ldrb	r3, [r3, #1]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d122      	bne.n	8006a34 <USB_EPStartXfer+0x4f2>
 80069ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	623b      	str	r3, [r7, #32]
 80069fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	4413      	add	r3, r2
 8006a10:	623b      	str	r3, [r7, #32]
 8006a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	00da      	lsls	r2, r3, #3
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	4413      	add	r3, r2
 8006a24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a28:	61fb      	str	r3, [r7, #28]
 8006a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	891b      	ldrh	r3, [r3, #8]
 8006a40:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	6959      	ldr	r1, [r3, #20]
 8006a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a5a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a5e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a62:	6800      	ldr	r0, [r0, #0]
 8006a64:	f001 f9fe 	bl	8007e64 <USB_WritePMA>
 8006a68:	e3c6      	b.n	80071f8 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	785b      	ldrb	r3, [r3, #1]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d16d      	bne.n	8006b56 <USB_EPStartXfer+0x614>
 8006a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	461a      	mov	r2, r3
 8006a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a9a:	4413      	add	r3, r2
 8006a9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	00da      	lsls	r2, r3, #3
 8006aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aae:	4413      	add	r3, r2
 8006ab0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ab4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aba:	2b3e      	cmp	r3, #62	; 0x3e
 8006abc:	d91c      	bls.n	8006af8 <USB_EPStartXfer+0x5b6>
 8006abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac2:	095b      	lsrs	r3, r3, #5
 8006ac4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006acc:	f003 031f 	and.w	r3, r3, #31
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d104      	bne.n	8006ade <USB_EPStartXfer+0x59c>
 8006ad4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ade:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	029b      	lsls	r3, r3, #10
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af4:	801a      	strh	r2, [r3, #0]
 8006af6:	e059      	b.n	8006bac <USB_EPStartXfer+0x66a>
 8006af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d112      	bne.n	8006b26 <USB_EPStartXfer+0x5e4>
 8006b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b0e:	801a      	strh	r2, [r3, #0]
 8006b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b22:	801a      	strh	r2, [r3, #0]
 8006b24:	e042      	b.n	8006bac <USB_EPStartXfer+0x66a>
 8006b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b2a:	085b      	lsrs	r3, r3, #1
 8006b2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d004      	beq.n	8006b46 <USB_EPStartXfer+0x604>
 8006b3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b40:	3301      	adds	r3, #1
 8006b42:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	029b      	lsls	r3, r3, #10
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b52:	801a      	strh	r2, [r3, #0]
 8006b54:	e02a      	b.n	8006bac <USB_EPStartXfer+0x66a>
 8006b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	785b      	ldrb	r3, [r3, #1]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d122      	bne.n	8006bac <USB_EPStartXfer+0x66a>
 8006b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	653b      	str	r3, [r7, #80]	; 0x50
 8006b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	461a      	mov	r2, r3
 8006b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b86:	4413      	add	r3, r2
 8006b88:	653b      	str	r3, [r7, #80]	; 0x50
 8006b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	00da      	lsls	r2, r3, #3
 8006b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006baa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006bac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	891b      	ldrh	r3, [r3, #8]
 8006bb8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6959      	ldr	r1, [r3, #20]
 8006bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006bd2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006bd6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006bda:	6800      	ldr	r0, [r0, #0]
 8006bdc:	f001 f942 	bl	8007e64 <USB_WritePMA>
            ep->xfer_buff += len;
 8006be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	695a      	ldr	r2, [r3, #20]
 8006bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf0:	441a      	add	r2, r3
 8006bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6a1a      	ldr	r2, [r3, #32]
 8006c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d90f      	bls.n	8006c3a <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6a1a      	ldr	r2, [r3, #32]
 8006c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c2a:	1ad2      	subs	r2, r2, r3
 8006c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	621a      	str	r2, [r3, #32]
 8006c38:	e00e      	b.n	8006c58 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8006c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2200      	movs	r2, #0
 8006c56:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	643b      	str	r3, [r7, #64]	; 0x40
 8006c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	785b      	ldrb	r3, [r3, #1]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d16d      	bne.n	8006d50 <USB_EPStartXfer+0x80e>
 8006c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	461a      	mov	r2, r3
 8006c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c94:	4413      	add	r3, r2
 8006c96:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	00da      	lsls	r2, r3, #3
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	4413      	add	r3, r2
 8006caa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006cae:	637b      	str	r3, [r7, #52]	; 0x34
 8006cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb4:	2b3e      	cmp	r3, #62	; 0x3e
 8006cb6:	d91c      	bls.n	8006cf2 <USB_EPStartXfer+0x7b0>
 8006cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cbc:	095b      	lsrs	r3, r3, #5
 8006cbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc6:	f003 031f 	and.w	r3, r3, #31
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d104      	bne.n	8006cd8 <USB_EPStartXfer+0x796>
 8006cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	029b      	lsls	r3, r3, #10
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cee:	801a      	strh	r2, [r3, #0]
 8006cf0:	e053      	b.n	8006d9a <USB_EPStartXfer+0x858>
 8006cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d112      	bne.n	8006d20 <USB_EPStartXfer+0x7de>
 8006cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d08:	801a      	strh	r2, [r3, #0]
 8006d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d1c:	801a      	strh	r2, [r3, #0]
 8006d1e:	e03c      	b.n	8006d9a <USB_EPStartXfer+0x858>
 8006d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d24:	085b      	lsrs	r3, r3, #1
 8006d26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d004      	beq.n	8006d40 <USB_EPStartXfer+0x7fe>
 8006d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	029b      	lsls	r3, r3, #10
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4c:	801a      	strh	r2, [r3, #0]
 8006d4e:	e024      	b.n	8006d9a <USB_EPStartXfer+0x858>
 8006d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	785b      	ldrb	r3, [r3, #1]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d11c      	bne.n	8006d9a <USB_EPStartXfer+0x858>
 8006d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	461a      	mov	r2, r3
 8006d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d74:	4413      	add	r3, r2
 8006d76:	643b      	str	r3, [r7, #64]	; 0x40
 8006d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	00da      	lsls	r2, r3, #3
 8006d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d88:	4413      	add	r3, r2
 8006d8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	895b      	ldrh	r3, [r3, #10]
 8006da6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6959      	ldr	r1, [r3, #20]
 8006db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006dc0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006dc4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006dc8:	6800      	ldr	r0, [r0, #0]
 8006dca:	f001 f84b 	bl	8007e64 <USB_WritePMA>
 8006dce:	e213      	b.n	80071f8 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e06:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	441a      	add	r2, r3
 8006e24:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	461a      	mov	r2, r3
 8006e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e5c:	4413      	add	r3, r2
 8006e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	00da      	lsls	r2, r3, #3
 8006e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e70:	4413      	add	r3, r2
 8006e72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e76:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e80:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	891b      	ldrh	r3, [r3, #8]
 8006e8e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6959      	ldr	r1, [r3, #20]
 8006e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006ea8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006eac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006eb0:	6800      	ldr	r0, [r0, #0]
 8006eb2:	f000 ffd7 	bl	8007e64 <USB_WritePMA>
 8006eb6:	e19f      	b.n	80071f8 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6a1a      	ldr	r2, [r3, #32]
 8006ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec8:	1ad2      	subs	r2, r2, r3
 8006eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 80bc 	beq.w	8007076 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	673b      	str	r3, [r7, #112]	; 0x70
 8006f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	785b      	ldrb	r3, [r3, #1]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d16d      	bne.n	8006ff6 <USB_EPStartXfer+0xab4>
 8006f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	461a      	mov	r2, r3
 8006f38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f3a:	4413      	add	r3, r2
 8006f3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	00da      	lsls	r2, r3, #3
 8006f4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f4e:	4413      	add	r3, r2
 8006f50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f54:	667b      	str	r3, [r7, #100]	; 0x64
 8006f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f5a:	2b3e      	cmp	r3, #62	; 0x3e
 8006f5c:	d91c      	bls.n	8006f98 <USB_EPStartXfer+0xa56>
 8006f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f62:	095b      	lsrs	r3, r3, #5
 8006f64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f6c:	f003 031f 	and.w	r3, r3, #31
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d104      	bne.n	8006f7e <USB_EPStartXfer+0xa3c>
 8006f74:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	029b      	lsls	r3, r3, #10
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f94:	801a      	strh	r2, [r3, #0]
 8006f96:	e053      	b.n	8007040 <USB_EPStartXfer+0xafe>
 8006f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d112      	bne.n	8006fc6 <USB_EPStartXfer+0xa84>
 8006fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fae:	801a      	strh	r2, [r3, #0]
 8006fb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fb2:	881b      	ldrh	r3, [r3, #0]
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fc2:	801a      	strh	r2, [r3, #0]
 8006fc4:	e03c      	b.n	8007040 <USB_EPStartXfer+0xafe>
 8006fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fca:	085b      	lsrs	r3, r3, #1
 8006fcc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d004      	beq.n	8006fe6 <USB_EPStartXfer+0xaa4>
 8006fdc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006fe6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	029b      	lsls	r3, r3, #10
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ff2:	801a      	strh	r2, [r3, #0]
 8006ff4:	e024      	b.n	8007040 <USB_EPStartXfer+0xafe>
 8006ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	785b      	ldrb	r3, [r3, #1]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d11c      	bne.n	8007040 <USB_EPStartXfer+0xafe>
 8007006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800700a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007014:	b29b      	uxth	r3, r3
 8007016:	461a      	mov	r2, r3
 8007018:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800701a:	4413      	add	r3, r2
 800701c:	673b      	str	r3, [r7, #112]	; 0x70
 800701e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	00da      	lsls	r2, r3, #3
 800702c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800702e:	4413      	add	r3, r2
 8007030:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007034:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800703a:	b29a      	uxth	r2, r3
 800703c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	895b      	ldrh	r3, [r3, #10]
 800704c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6959      	ldr	r1, [r3, #20]
 800705c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007060:	b29b      	uxth	r3, r3
 8007062:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007066:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800706a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800706e:	6800      	ldr	r0, [r0, #0]
 8007070:	f000 fef8 	bl	8007e64 <USB_WritePMA>
 8007074:	e0c0      	b.n	80071f8 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	785b      	ldrb	r3, [r3, #1]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d16d      	bne.n	8007162 <USB_EPStartXfer+0xc20>
 8007086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800708a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007096:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	461a      	mov	r2, r3
 80070a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80070a6:	4413      	add	r3, r2
 80070a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80070aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	00da      	lsls	r2, r3, #3
 80070b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80070ba:	4413      	add	r3, r2
 80070bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80070c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c6:	2b3e      	cmp	r3, #62	; 0x3e
 80070c8:	d91c      	bls.n	8007104 <USB_EPStartXfer+0xbc2>
 80070ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ce:	095b      	lsrs	r3, r3, #5
 80070d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80070d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d8:	f003 031f 	and.w	r3, r3, #31
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d104      	bne.n	80070ea <USB_EPStartXfer+0xba8>
 80070e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80070e4:	3b01      	subs	r3, #1
 80070e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80070ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	029b      	lsls	r3, r3, #10
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007100:	801a      	strh	r2, [r3, #0]
 8007102:	e05f      	b.n	80071c4 <USB_EPStartXfer+0xc82>
 8007104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007108:	2b00      	cmp	r3, #0
 800710a:	d112      	bne.n	8007132 <USB_EPStartXfer+0xbf0>
 800710c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800710e:	881b      	ldrh	r3, [r3, #0]
 8007110:	b29b      	uxth	r3, r3
 8007112:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007116:	b29a      	uxth	r2, r3
 8007118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800711a:	801a      	strh	r2, [r3, #0]
 800711c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	b29b      	uxth	r3, r3
 8007122:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800712a:	b29a      	uxth	r2, r3
 800712c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800712e:	801a      	strh	r2, [r3, #0]
 8007130:	e048      	b.n	80071c4 <USB_EPStartXfer+0xc82>
 8007132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007136:	085b      	lsrs	r3, r3, #1
 8007138:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800713c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	2b00      	cmp	r3, #0
 8007146:	d004      	beq.n	8007152 <USB_EPStartXfer+0xc10>
 8007148:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800714c:	3301      	adds	r3, #1
 800714e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007152:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007156:	b29b      	uxth	r3, r3
 8007158:	029b      	lsls	r3, r3, #10
 800715a:	b29a      	uxth	r2, r3
 800715c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800715e:	801a      	strh	r2, [r3, #0]
 8007160:	e030      	b.n	80071c4 <USB_EPStartXfer+0xc82>
 8007162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	785b      	ldrb	r3, [r3, #1]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d128      	bne.n	80071c4 <USB_EPStartXfer+0xc82>
 8007172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007184:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800718e:	b29b      	uxth	r3, r3
 8007190:	461a      	mov	r2, r3
 8007192:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007196:	4413      	add	r3, r2
 8007198:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800719c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	00da      	lsls	r2, r3, #3
 80071aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071ae:	4413      	add	r3, r2
 80071b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80071b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071bc:	b29a      	uxth	r2, r3
 80071be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80071c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80071c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	891b      	ldrh	r3, [r3, #8]
 80071d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6959      	ldr	r1, [r3, #20]
 80071e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80071ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80071ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80071f2:	6800      	ldr	r0, [r0, #0]
 80071f4:	f000 fe36 	bl	8007e64 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80071f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007206:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4413      	add	r3, r2
 8007212:	881b      	ldrh	r3, [r3, #0]
 8007214:	b29b      	uxth	r3, r3
 8007216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800721a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800721e:	817b      	strh	r3, [r7, #10]
 8007220:	897b      	ldrh	r3, [r7, #10]
 8007222:	f083 0310 	eor.w	r3, r3, #16
 8007226:	817b      	strh	r3, [r7, #10]
 8007228:	897b      	ldrh	r3, [r7, #10]
 800722a:	f083 0320 	eor.w	r3, r3, #32
 800722e:	817b      	strh	r3, [r7, #10]
 8007230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007234:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800723e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	441a      	add	r2, r3
 800724a:	897b      	ldrh	r3, [r7, #10]
 800724c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007254:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800725c:	b29b      	uxth	r3, r3
 800725e:	8013      	strh	r3, [r2, #0]
 8007260:	f000 bc9f 	b.w	8007ba2 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	7b1b      	ldrb	r3, [r3, #12]
 8007270:	2b00      	cmp	r3, #0
 8007272:	f040 80ae 	bne.w	80073d2 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800727a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	699a      	ldr	r2, [r3, #24]
 8007282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	429a      	cmp	r2, r3
 8007290:	d917      	bls.n	80072c2 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8007292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80072a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699a      	ldr	r2, [r3, #24]
 80072ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b2:	1ad2      	subs	r2, r2, r3
 80072b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	619a      	str	r2, [r3, #24]
 80072c0:	e00e      	b.n	80072e0 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 80072c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80072d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2200      	movs	r2, #0
 80072de:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80072e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	461a      	mov	r2, r3
 8007300:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007304:	4413      	add	r3, r2
 8007306:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800730a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800730e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	00da      	lsls	r2, r3, #3
 8007318:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800731c:	4413      	add	r3, r2
 800731e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007322:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800732a:	2b3e      	cmp	r3, #62	; 0x3e
 800732c:	d91d      	bls.n	800736a <USB_EPStartXfer+0xe28>
 800732e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007332:	095b      	lsrs	r3, r3, #5
 8007334:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800733c:	f003 031f 	and.w	r3, r3, #31
 8007340:	2b00      	cmp	r3, #0
 8007342:	d104      	bne.n	800734e <USB_EPStartXfer+0xe0c>
 8007344:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007348:	3b01      	subs	r3, #1
 800734a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800734e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007352:	b29b      	uxth	r3, r3
 8007354:	029b      	lsls	r3, r3, #10
 8007356:	b29b      	uxth	r3, r3
 8007358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800735c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007360:	b29a      	uxth	r2, r3
 8007362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007366:	801a      	strh	r2, [r3, #0]
 8007368:	e3e1      	b.n	8007b2e <USB_EPStartXfer+0x15ec>
 800736a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800736e:	2b00      	cmp	r3, #0
 8007370:	d116      	bne.n	80073a0 <USB_EPStartXfer+0xe5e>
 8007372:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007376:	881b      	ldrh	r3, [r3, #0]
 8007378:	b29b      	uxth	r3, r3
 800737a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800737e:	b29a      	uxth	r2, r3
 8007380:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007384:	801a      	strh	r2, [r3, #0]
 8007386:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	b29b      	uxth	r3, r3
 800738e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007396:	b29a      	uxth	r2, r3
 8007398:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800739c:	801a      	strh	r2, [r3, #0]
 800739e:	e3c6      	b.n	8007b2e <USB_EPStartXfer+0x15ec>
 80073a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073a4:	085b      	lsrs	r3, r3, #1
 80073a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80073aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d004      	beq.n	80073c0 <USB_EPStartXfer+0xe7e>
 80073b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80073ba:	3301      	adds	r3, #1
 80073bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80073c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	029b      	lsls	r3, r3, #10
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073ce:	801a      	strh	r2, [r3, #0]
 80073d0:	e3ad      	b.n	8007b2e <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80073d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	78db      	ldrb	r3, [r3, #3]
 80073de:	2b02      	cmp	r3, #2
 80073e0:	f040 8200 	bne.w	80077e4 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80073e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	785b      	ldrb	r3, [r3, #1]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f040 8091 	bne.w	8007518 <USB_EPStartXfer+0xfd6>
 80073f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007408:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007412:	b29b      	uxth	r3, r3
 8007414:	461a      	mov	r2, r3
 8007416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800741a:	4413      	add	r3, r2
 800741c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	00da      	lsls	r2, r3, #3
 800742e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007432:	4413      	add	r3, r2
 8007434:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007438:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800743c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	2b3e      	cmp	r3, #62	; 0x3e
 800744a:	d925      	bls.n	8007498 <USB_EPStartXfer+0xf56>
 800744c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	095b      	lsrs	r3, r3, #5
 800745a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800745e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	f003 031f 	and.w	r3, r3, #31
 800746e:	2b00      	cmp	r3, #0
 8007470:	d104      	bne.n	800747c <USB_EPStartXfer+0xf3a>
 8007472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007476:	3b01      	subs	r3, #1
 8007478:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800747c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007480:	b29b      	uxth	r3, r3
 8007482:	029b      	lsls	r3, r3, #10
 8007484:	b29b      	uxth	r3, r3
 8007486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800748a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800748e:	b29a      	uxth	r2, r3
 8007490:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007494:	801a      	strh	r2, [r3, #0]
 8007496:	e074      	b.n	8007582 <USB_EPStartXfer+0x1040>
 8007498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800749c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d116      	bne.n	80074d6 <USB_EPStartXfer+0xf94>
 80074a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074ba:	801a      	strh	r2, [r3, #0]
 80074bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074d2:	801a      	strh	r2, [r3, #0]
 80074d4:	e055      	b.n	8007582 <USB_EPStartXfer+0x1040>
 80074d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	085b      	lsrs	r3, r3, #1
 80074e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d004      	beq.n	8007506 <USB_EPStartXfer+0xfc4>
 80074fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007500:	3301      	adds	r3, #1
 8007502:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800750a:	b29b      	uxth	r3, r3
 800750c:	029b      	lsls	r3, r3, #10
 800750e:	b29a      	uxth	r2, r3
 8007510:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007514:	801a      	strh	r2, [r3, #0]
 8007516:	e034      	b.n	8007582 <USB_EPStartXfer+0x1040>
 8007518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	785b      	ldrb	r3, [r3, #1]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d12c      	bne.n	8007582 <USB_EPStartXfer+0x1040>
 8007528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800752c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800753a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007544:	b29b      	uxth	r3, r3
 8007546:	461a      	mov	r2, r3
 8007548:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800754c:	4413      	add	r3, r2
 800754e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	00da      	lsls	r2, r3, #3
 8007560:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007564:	4413      	add	r3, r2
 8007566:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800756a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800756e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	b29a      	uxth	r2, r3
 800757c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007580:	801a      	strh	r2, [r3, #0]
 8007582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007586:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	785b      	ldrb	r3, [r3, #1]
 800759c:	2b00      	cmp	r3, #0
 800759e:	f040 8091 	bne.w	80076c4 <USB_EPStartXfer+0x1182>
 80075a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075be:	b29b      	uxth	r3, r3
 80075c0:	461a      	mov	r2, r3
 80075c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075c6:	4413      	add	r3, r2
 80075c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	00da      	lsls	r2, r3, #3
 80075da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075de:	4413      	add	r3, r2
 80075e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	2b3e      	cmp	r3, #62	; 0x3e
 80075f6:	d925      	bls.n	8007644 <USB_EPStartXfer+0x1102>
 80075f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	095b      	lsrs	r3, r3, #5
 8007606:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800760a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800760e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	f003 031f 	and.w	r3, r3, #31
 800761a:	2b00      	cmp	r3, #0
 800761c:	d104      	bne.n	8007628 <USB_EPStartXfer+0x10e6>
 800761e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007622:	3b01      	subs	r3, #1
 8007624:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800762c:	b29b      	uxth	r3, r3
 800762e:	029b      	lsls	r3, r3, #10
 8007630:	b29b      	uxth	r3, r3
 8007632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800763a:	b29a      	uxth	r2, r3
 800763c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007640:	801a      	strh	r2, [r3, #0]
 8007642:	e06d      	b.n	8007720 <USB_EPStartXfer+0x11de>
 8007644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d116      	bne.n	8007682 <USB_EPStartXfer+0x1140>
 8007654:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	b29b      	uxth	r3, r3
 800765c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007660:	b29a      	uxth	r2, r3
 8007662:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007666:	801a      	strh	r2, [r3, #0]
 8007668:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	b29b      	uxth	r3, r3
 8007670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007678:	b29a      	uxth	r2, r3
 800767a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800767e:	801a      	strh	r2, [r3, #0]
 8007680:	e04e      	b.n	8007720 <USB_EPStartXfer+0x11de>
 8007682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	085b      	lsrs	r3, r3, #1
 8007690:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	f003 0301 	and.w	r3, r3, #1
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d004      	beq.n	80076b2 <USB_EPStartXfer+0x1170>
 80076a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076ac:	3301      	adds	r3, #1
 80076ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	029b      	lsls	r3, r3, #10
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076c0:	801a      	strh	r2, [r3, #0]
 80076c2:	e02d      	b.n	8007720 <USB_EPStartXfer+0x11de>
 80076c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	785b      	ldrb	r3, [r3, #1]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d125      	bne.n	8007720 <USB_EPStartXfer+0x11de>
 80076d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	461a      	mov	r2, r3
 80076e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80076ea:	4413      	add	r3, r2
 80076ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80076f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	00da      	lsls	r2, r3, #3
 80076fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007702:	4413      	add	r3, r2
 8007704:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007708:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800770c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	b29a      	uxth	r2, r3
 800771a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800771e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	69db      	ldr	r3, [r3, #28]
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 81fe 	beq.w	8007b2e <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4413      	add	r3, r2
 800774c:	881b      	ldrh	r3, [r3, #0]
 800774e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007752:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d005      	beq.n	800776a <USB_EPStartXfer+0x1228>
 800775e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10d      	bne.n	8007786 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800776a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800776e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007772:	2b00      	cmp	r3, #0
 8007774:	f040 81db 	bne.w	8007b2e <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007778:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800777c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007780:	2b00      	cmp	r3, #0
 8007782:	f040 81d4 	bne.w	8007b2e <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800778a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ac:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80077b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	441a      	add	r2, r3
 80077ca:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80077ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80077de:	b29b      	uxth	r3, r3
 80077e0:	8013      	strh	r3, [r2, #0]
 80077e2:	e1a4      	b.n	8007b2e <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80077e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	78db      	ldrb	r3, [r3, #3]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	f040 819a 	bne.w	8007b2a <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80077f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	699a      	ldr	r2, [r3, #24]
 8007802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	429a      	cmp	r2, r3
 8007810:	d917      	bls.n	8007842 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8007812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	699a      	ldr	r2, [r3, #24]
 800782e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007832:	1ad2      	subs	r2, r2, r3
 8007834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	619a      	str	r2, [r3, #24]
 8007840:	e00e      	b.n	8007860 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8007842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2200      	movs	r2, #0
 800785e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	785b      	ldrb	r3, [r3, #1]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d178      	bne.n	8007962 <USB_EPStartXfer+0x1420>
 8007870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007874:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800787e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007882:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800788c:	b29b      	uxth	r3, r3
 800788e:	461a      	mov	r2, r3
 8007890:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007894:	4413      	add	r3, r2
 8007896:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800789a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800789e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	00da      	lsls	r2, r3, #3
 80078a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80078ac:	4413      	add	r3, r2
 80078ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ba:	2b3e      	cmp	r3, #62	; 0x3e
 80078bc:	d91d      	bls.n	80078fa <USB_EPStartXfer+0x13b8>
 80078be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078c2:	095b      	lsrs	r3, r3, #5
 80078c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80078c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078cc:	f003 031f 	and.w	r3, r3, #31
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d104      	bne.n	80078de <USB_EPStartXfer+0x139c>
 80078d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078d8:	3b01      	subs	r3, #1
 80078da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80078de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	029b      	lsls	r3, r3, #10
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078f6:	801a      	strh	r2, [r3, #0]
 80078f8:	e064      	b.n	80079c4 <USB_EPStartXfer+0x1482>
 80078fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d116      	bne.n	8007930 <USB_EPStartXfer+0x13ee>
 8007902:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007906:	881b      	ldrh	r3, [r3, #0]
 8007908:	b29b      	uxth	r3, r3
 800790a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800790e:	b29a      	uxth	r2, r3
 8007910:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007914:	801a      	strh	r2, [r3, #0]
 8007916:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	b29b      	uxth	r3, r3
 800791e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007926:	b29a      	uxth	r2, r3
 8007928:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800792c:	801a      	strh	r2, [r3, #0]
 800792e:	e049      	b.n	80079c4 <USB_EPStartXfer+0x1482>
 8007930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007934:	085b      	lsrs	r3, r3, #1
 8007936:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800793a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	2b00      	cmp	r3, #0
 8007944:	d004      	beq.n	8007950 <USB_EPStartXfer+0x140e>
 8007946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800794a:	3301      	adds	r3, #1
 800794c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007954:	b29b      	uxth	r3, r3
 8007956:	029b      	lsls	r3, r3, #10
 8007958:	b29a      	uxth	r2, r3
 800795a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800795e:	801a      	strh	r2, [r3, #0]
 8007960:	e030      	b.n	80079c4 <USB_EPStartXfer+0x1482>
 8007962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	785b      	ldrb	r3, [r3, #1]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d128      	bne.n	80079c4 <USB_EPStartXfer+0x1482>
 8007972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007984:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800798e:	b29b      	uxth	r3, r3
 8007990:	461a      	mov	r2, r3
 8007992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007996:	4413      	add	r3, r2
 8007998:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800799c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	00da      	lsls	r2, r3, #3
 80079aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079ae:	4413      	add	r3, r2
 80079b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079bc:	b29a      	uxth	r2, r3
 80079be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80079c2:	801a      	strh	r2, [r3, #0]
 80079c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	785b      	ldrb	r3, [r3, #1]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d178      	bne.n	8007ad4 <USB_EPStartXfer+0x1592>
 80079e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80079f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	461a      	mov	r2, r3
 8007a02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a06:	4413      	add	r3, r2
 8007a08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	00da      	lsls	r2, r3, #3
 8007a1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a1e:	4413      	add	r3, r2
 8007a20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a2c:	2b3e      	cmp	r3, #62	; 0x3e
 8007a2e:	d91d      	bls.n	8007a6c <USB_EPStartXfer+0x152a>
 8007a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a34:	095b      	lsrs	r3, r3, #5
 8007a36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a3e:	f003 031f 	and.w	r3, r3, #31
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d104      	bne.n	8007a50 <USB_EPStartXfer+0x150e>
 8007a46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	029b      	lsls	r3, r3, #10
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a68:	801a      	strh	r2, [r3, #0]
 8007a6a:	e060      	b.n	8007b2e <USB_EPStartXfer+0x15ec>
 8007a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d116      	bne.n	8007aa2 <USB_EPStartXfer+0x1560>
 8007a74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a86:	801a      	strh	r2, [r3, #0]
 8007a88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a8c:	881b      	ldrh	r3, [r3, #0]
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a9e:	801a      	strh	r2, [r3, #0]
 8007aa0:	e045      	b.n	8007b2e <USB_EPStartXfer+0x15ec>
 8007aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aa6:	085b      	lsrs	r3, r3, #1
 8007aa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ab0:	f003 0301 	and.w	r3, r3, #1
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d004      	beq.n	8007ac2 <USB_EPStartXfer+0x1580>
 8007ab8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007abc:	3301      	adds	r3, #1
 8007abe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ac2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	029b      	lsls	r3, r3, #10
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ad0:	801a      	strh	r2, [r3, #0]
 8007ad2:	e02c      	b.n	8007b2e <USB_EPStartXfer+0x15ec>
 8007ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	785b      	ldrb	r3, [r3, #1]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d124      	bne.n	8007b2e <USB_EPStartXfer+0x15ec>
 8007ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	461a      	mov	r2, r3
 8007af6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007afa:	4413      	add	r3, r2
 8007afc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	00da      	lsls	r2, r3, #3
 8007b0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b12:	4413      	add	r3, r2
 8007b14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b26:	801a      	strh	r2, [r3, #0]
 8007b28:	e001      	b.n	8007b2e <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e03a      	b.n	8007ba4 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	881b      	ldrh	r3, [r3, #0]
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b54:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007b58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007b5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b60:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007b64:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007b68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b6c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	441a      	add	r2, r3
 8007b8a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b085      	sub	sp, #20
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	785b      	ldrb	r3, [r3, #1]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d020      	beq.n	8007c02 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	881b      	ldrh	r3, [r3, #0]
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bd6:	81bb      	strh	r3, [r7, #12]
 8007bd8:	89bb      	ldrh	r3, [r7, #12]
 8007bda:	f083 0310 	eor.w	r3, r3, #16
 8007bde:	81bb      	strh	r3, [r7, #12]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	441a      	add	r2, r3
 8007bea:	89bb      	ldrh	r3, [r7, #12]
 8007bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	8013      	strh	r3, [r2, #0]
 8007c00:	e01f      	b.n	8007c42 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	881b      	ldrh	r3, [r3, #0]
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c18:	81fb      	strh	r3, [r7, #14]
 8007c1a:	89fb      	ldrh	r3, [r7, #14]
 8007c1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c20:	81fb      	strh	r3, [r7, #14]
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	441a      	add	r2, r3
 8007c2c:	89fb      	ldrh	r3, [r7, #14]
 8007c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b087      	sub	sp, #28
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	7b1b      	ldrb	r3, [r3, #12]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f040 809d 	bne.w	8007d9e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	785b      	ldrb	r3, [r3, #1]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d04c      	beq.n	8007d06 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4413      	add	r3, r2
 8007c76:	881b      	ldrh	r3, [r3, #0]
 8007c78:	823b      	strh	r3, [r7, #16]
 8007c7a:	8a3b      	ldrh	r3, [r7, #16]
 8007c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d01b      	beq.n	8007cbc <USB_EPClearStall+0x6c>
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c9a:	81fb      	strh	r3, [r7, #14]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	441a      	add	r2, r3
 8007ca6:	89fb      	ldrh	r3, [r7, #14]
 8007ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	78db      	ldrb	r3, [r3, #3]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d06c      	beq.n	8007d9e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	881b      	ldrh	r3, [r3, #0]
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cda:	81bb      	strh	r3, [r7, #12]
 8007cdc:	89bb      	ldrh	r3, [r7, #12]
 8007cde:	f083 0320 	eor.w	r3, r3, #32
 8007ce2:	81bb      	strh	r3, [r7, #12]
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	441a      	add	r2, r3
 8007cee:	89bb      	ldrh	r3, [r7, #12]
 8007cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	8013      	strh	r3, [r2, #0]
 8007d04:	e04b      	b.n	8007d9e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4413      	add	r3, r2
 8007d10:	881b      	ldrh	r3, [r3, #0]
 8007d12:	82fb      	strh	r3, [r7, #22]
 8007d14:	8afb      	ldrh	r3, [r7, #22]
 8007d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d01b      	beq.n	8007d56 <USB_EPClearStall+0x106>
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4413      	add	r3, r2
 8007d28:	881b      	ldrh	r3, [r3, #0]
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d34:	82bb      	strh	r3, [r7, #20]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	441a      	add	r2, r3
 8007d40:	8abb      	ldrh	r3, [r7, #20]
 8007d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4413      	add	r3, r2
 8007d60:	881b      	ldrh	r3, [r3, #0]
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d6c:	827b      	strh	r3, [r7, #18]
 8007d6e:	8a7b      	ldrh	r3, [r7, #18]
 8007d70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d74:	827b      	strh	r3, [r7, #18]
 8007d76:	8a7b      	ldrh	r3, [r7, #18]
 8007d78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d7c:	827b      	strh	r3, [r7, #18]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	441a      	add	r2, r3
 8007d88:	8a7b      	ldrh	r3, [r7, #18]
 8007d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	371c      	adds	r7, #28
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007db8:	78fb      	ldrb	r3, [r7, #3]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d103      	bne.n	8007dc6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2280      	movs	r2, #128	; 0x80
 8007dc2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b083      	sub	sp, #12
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b08b      	sub	sp, #44	; 0x2c
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	4611      	mov	r1, r2
 8007e70:	461a      	mov	r2, r3
 8007e72:	460b      	mov	r3, r1
 8007e74:	80fb      	strh	r3, [r7, #6]
 8007e76:	4613      	mov	r3, r2
 8007e78:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007e7a:	88bb      	ldrh	r3, [r7, #4]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	085b      	lsrs	r3, r3, #1
 8007e80:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e8a:	88fa      	ldrh	r2, [r7, #6]
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e94:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	627b      	str	r3, [r7, #36]	; 0x24
 8007e9a:	e01b      	b.n	8007ed4 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	021b      	lsls	r3, r3, #8
 8007eaa:	b21a      	sxth	r2, r3
 8007eac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	b21b      	sxth	r3, r3
 8007eb4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007eb6:	6a3b      	ldr	r3, [r7, #32]
 8007eb8:	8a7a      	ldrh	r2, [r7, #18]
 8007eba:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	3302      	adds	r3, #2
 8007ec0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1e0      	bne.n	8007e9c <USB_WritePMA+0x38>
  }
}
 8007eda:	bf00      	nop
 8007edc:	bf00      	nop
 8007ede:	372c      	adds	r7, #44	; 0x2c
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b08b      	sub	sp, #44	; 0x2c
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	80fb      	strh	r3, [r7, #6]
 8007efa:	4613      	mov	r3, r2
 8007efc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007efe:	88bb      	ldrh	r3, [r7, #4]
 8007f00:	085b      	lsrs	r3, r3, #1
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f0e:	88fa      	ldrh	r2, [r7, #6]
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	4413      	add	r3, r2
 8007f14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f18:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f1e:	e018      	b.n	8007f52 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007f20:	6a3b      	ldr	r3, [r7, #32]
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	3302      	adds	r3, #2
 8007f2c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	0a1b      	lsrs	r3, r3, #8
 8007f40:	b2da      	uxtb	r2, r3
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	627b      	str	r3, [r7, #36]	; 0x24
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1e3      	bne.n	8007f20 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007f58:	88bb      	ldrh	r3, [r7, #4]
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d007      	beq.n	8007f74 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007f64:	6a3b      	ldr	r3, [r7, #32]
 8007f66:	881b      	ldrh	r3, [r3, #0]
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	b2da      	uxtb	r2, r3
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	701a      	strb	r2, [r3, #0]
  }
}
 8007f74:	bf00      	nop
 8007f76:	372c      	adds	r7, #44	; 0x2c
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007f8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007f90:	f002 f960 	bl	800a254 <USBD_static_malloc>
 8007f94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d105      	bne.n	8007fa8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	e066      	b.n	8008076 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	7c1b      	ldrb	r3, [r3, #16]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d119      	bne.n	8007fec <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	2181      	movs	r1, #129	; 0x81
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f001 ff49 	bl	8009e58 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fd0:	2202      	movs	r2, #2
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f001 ff3f 	bl	8009e58 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2210      	movs	r2, #16
 8007fe6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007fea:	e016      	b.n	800801a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007fec:	2340      	movs	r3, #64	; 0x40
 8007fee:	2202      	movs	r2, #2
 8007ff0:	2181      	movs	r1, #129	; 0x81
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f001 ff30 	bl	8009e58 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007ffe:	2340      	movs	r3, #64	; 0x40
 8008000:	2202      	movs	r2, #2
 8008002:	2101      	movs	r1, #1
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f001 ff27 	bl	8009e58 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2201      	movs	r2, #1
 800800e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2210      	movs	r2, #16
 8008016:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800801a:	2308      	movs	r3, #8
 800801c:	2203      	movs	r2, #3
 800801e:	2182      	movs	r1, #130	; 0x82
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f001 ff19 	bl	8009e58 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	7c1b      	ldrb	r3, [r3, #16]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d109      	bne.n	8008064 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008056:	f44f 7300 	mov.w	r3, #512	; 0x200
 800805a:	2101      	movs	r1, #1
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f002 f877 	bl	800a150 <USBD_LL_PrepareReceive>
 8008062:	e007      	b.n	8008074 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800806a:	2340      	movs	r3, #64	; 0x40
 800806c:	2101      	movs	r1, #1
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f002 f86e 	bl	800a150 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b082      	sub	sp, #8
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	460b      	mov	r3, r1
 8008088:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800808a:	2181      	movs	r1, #129	; 0x81
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f001 ff21 	bl	8009ed4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008098:	2101      	movs	r1, #1
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f001 ff1a 	bl	8009ed4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80080a8:	2182      	movs	r1, #130	; 0x82
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f001 ff12 	bl	8009ed4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00e      	beq.n	80080e8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080da:	4618      	mov	r0, r3
 80080dc:	f002 f8c8 	bl	800a270 <USBD_static_free>
    pdev->pClassData = NULL;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
	...

080080f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008104:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008106:	2300      	movs	r3, #0
 8008108:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d101      	bne.n	800811c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008118:	2303      	movs	r3, #3
 800811a:	e0af      	b.n	800827c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008124:	2b00      	cmp	r3, #0
 8008126:	d03f      	beq.n	80081a8 <USBD_CDC_Setup+0xb4>
 8008128:	2b20      	cmp	r3, #32
 800812a:	f040 809f 	bne.w	800826c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	88db      	ldrh	r3, [r3, #6]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d02e      	beq.n	8008194 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	b25b      	sxtb	r3, r3
 800813c:	2b00      	cmp	r3, #0
 800813e:	da16      	bge.n	800816e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	683a      	ldr	r2, [r7, #0]
 800814a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800814c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	88d2      	ldrh	r2, [r2, #6]
 8008152:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	88db      	ldrh	r3, [r3, #6]
 8008158:	2b07      	cmp	r3, #7
 800815a:	bf28      	it	cs
 800815c:	2307      	movcs	r3, #7
 800815e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	89fa      	ldrh	r2, [r7, #14]
 8008164:	4619      	mov	r1, r3
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f001 fa9f 	bl	80096aa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800816c:	e085      	b.n	800827a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	785a      	ldrb	r2, [r3, #1]
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	88db      	ldrh	r3, [r3, #6]
 800817c:	b2da      	uxtb	r2, r3
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008184:	6939      	ldr	r1, [r7, #16]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	88db      	ldrh	r3, [r3, #6]
 800818a:	461a      	mov	r2, r3
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f001 fab8 	bl	8009702 <USBD_CtlPrepareRx>
      break;
 8008192:	e072      	b.n	800827a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	7850      	ldrb	r0, [r2, #1]
 80081a0:	2200      	movs	r2, #0
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	4798      	blx	r3
      break;
 80081a6:	e068      	b.n	800827a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	785b      	ldrb	r3, [r3, #1]
 80081ac:	2b0b      	cmp	r3, #11
 80081ae:	d852      	bhi.n	8008256 <USBD_CDC_Setup+0x162>
 80081b0:	a201      	add	r2, pc, #4	; (adr r2, 80081b8 <USBD_CDC_Setup+0xc4>)
 80081b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b6:	bf00      	nop
 80081b8:	080081e9 	.word	0x080081e9
 80081bc:	08008265 	.word	0x08008265
 80081c0:	08008257 	.word	0x08008257
 80081c4:	08008257 	.word	0x08008257
 80081c8:	08008257 	.word	0x08008257
 80081cc:	08008257 	.word	0x08008257
 80081d0:	08008257 	.word	0x08008257
 80081d4:	08008257 	.word	0x08008257
 80081d8:	08008257 	.word	0x08008257
 80081dc:	08008257 	.word	0x08008257
 80081e0:	08008213 	.word	0x08008213
 80081e4:	0800823d 	.word	0x0800823d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b03      	cmp	r3, #3
 80081f2:	d107      	bne.n	8008204 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80081f4:	f107 030a 	add.w	r3, r7, #10
 80081f8:	2202      	movs	r2, #2
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f001 fa54 	bl	80096aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008202:	e032      	b.n	800826a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f001 f9de 	bl	80095c8 <USBD_CtlError>
            ret = USBD_FAIL;
 800820c:	2303      	movs	r3, #3
 800820e:	75fb      	strb	r3, [r7, #23]
          break;
 8008210:	e02b      	b.n	800826a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008218:	b2db      	uxtb	r3, r3
 800821a:	2b03      	cmp	r3, #3
 800821c:	d107      	bne.n	800822e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800821e:	f107 030d 	add.w	r3, r7, #13
 8008222:	2201      	movs	r2, #1
 8008224:	4619      	mov	r1, r3
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f001 fa3f 	bl	80096aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800822c:	e01d      	b.n	800826a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800822e:	6839      	ldr	r1, [r7, #0]
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f001 f9c9 	bl	80095c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008236:	2303      	movs	r3, #3
 8008238:	75fb      	strb	r3, [r7, #23]
          break;
 800823a:	e016      	b.n	800826a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b03      	cmp	r3, #3
 8008246:	d00f      	beq.n	8008268 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f001 f9bc 	bl	80095c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008250:	2303      	movs	r3, #3
 8008252:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008254:	e008      	b.n	8008268 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f001 f9b5 	bl	80095c8 <USBD_CtlError>
          ret = USBD_FAIL;
 800825e:	2303      	movs	r3, #3
 8008260:	75fb      	strb	r3, [r7, #23]
          break;
 8008262:	e002      	b.n	800826a <USBD_CDC_Setup+0x176>
          break;
 8008264:	bf00      	nop
 8008266:	e008      	b.n	800827a <USBD_CDC_Setup+0x186>
          break;
 8008268:	bf00      	nop
      }
      break;
 800826a:	e006      	b.n	800827a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f001 f9aa 	bl	80095c8 <USBD_CtlError>
      ret = USBD_FAIL;
 8008274:	2303      	movs	r3, #3
 8008276:	75fb      	strb	r3, [r7, #23]
      break;
 8008278:	bf00      	nop
  }

  return (uint8_t)ret;
 800827a:	7dfb      	ldrb	r3, [r7, #23]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3718      	adds	r7, #24
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	460b      	mov	r3, r1
 800828e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008296:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d101      	bne.n	80082a6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e04f      	b.n	8008346 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80082ae:	78fa      	ldrb	r2, [r7, #3]
 80082b0:	6879      	ldr	r1, [r7, #4]
 80082b2:	4613      	mov	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4413      	add	r3, r2
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	440b      	add	r3, r1
 80082bc:	3318      	adds	r3, #24
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d029      	beq.n	8008318 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80082c4:	78fa      	ldrb	r2, [r7, #3]
 80082c6:	6879      	ldr	r1, [r7, #4]
 80082c8:	4613      	mov	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	440b      	add	r3, r1
 80082d2:	3318      	adds	r3, #24
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	78f9      	ldrb	r1, [r7, #3]
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	460b      	mov	r3, r1
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	440b      	add	r3, r1
 80082e0:	00db      	lsls	r3, r3, #3
 80082e2:	4403      	add	r3, r0
 80082e4:	333c      	adds	r3, #60	; 0x3c
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80082ec:	fb01 f303 	mul.w	r3, r1, r3
 80082f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d110      	bne.n	8008318 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80082f6:	78fa      	ldrb	r2, [r7, #3]
 80082f8:	6879      	ldr	r1, [r7, #4]
 80082fa:	4613      	mov	r3, r2
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	440b      	add	r3, r1
 8008304:	3318      	adds	r3, #24
 8008306:	2200      	movs	r2, #0
 8008308:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800830a:	78f9      	ldrb	r1, [r7, #3]
 800830c:	2300      	movs	r3, #0
 800830e:	2200      	movs	r2, #0
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f001 fee5 	bl	800a0e0 <USBD_LL_Transmit>
 8008316:	e015      	b.n	8008344 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	2200      	movs	r2, #0
 800831c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00b      	beq.n	8008344 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	68ba      	ldr	r2, [r7, #8]
 8008336:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008340:	78fa      	ldrb	r2, [r7, #3]
 8008342:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b084      	sub	sp, #16
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	460b      	mov	r3, r1
 8008358:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008360:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008368:	2b00      	cmp	r3, #0
 800836a:	d101      	bne.n	8008370 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800836c:	2303      	movs	r3, #3
 800836e:	e015      	b.n	800839c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008370:	78fb      	ldrb	r3, [r7, #3]
 8008372:	4619      	mov	r1, r3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f001 ff23 	bl	800a1c0 <USBD_LL_GetRxDataSize>
 800837a:	4602      	mov	r2, r0
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008396:	4611      	mov	r1, r2
 8008398:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d101      	bne.n	80083be <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e01b      	b.n	80083f6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d015      	beq.n	80083f4 <USBD_CDC_EP0_RxReady+0x50>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80083ce:	2bff      	cmp	r3, #255	; 0xff
 80083d0:	d010      	beq.n	80083f4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80083e0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80083e8:	b292      	uxth	r2, r2
 80083ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	22ff      	movs	r2, #255	; 0xff
 80083f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
	...

08008400 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2243      	movs	r2, #67	; 0x43
 800840c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800840e:	4b03      	ldr	r3, [pc, #12]	; (800841c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008410:	4618      	mov	r0, r3
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr
 800841c:	20000094 	.word	0x20000094

08008420 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2243      	movs	r2, #67	; 0x43
 800842c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800842e:	4b03      	ldr	r3, [pc, #12]	; (800843c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008430:	4618      	mov	r0, r3
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr
 800843c:	20000050 	.word	0x20000050

08008440 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2243      	movs	r2, #67	; 0x43
 800844c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800844e:	4b03      	ldr	r3, [pc, #12]	; (800845c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008450:	4618      	mov	r0, r3
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr
 800845c:	200000d8 	.word	0x200000d8

08008460 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	220a      	movs	r2, #10
 800846c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800846e:	4b03      	ldr	r3, [pc, #12]	; (800847c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	2000000c 	.word	0x2000000c

08008480 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008490:	2303      	movs	r3, #3
 8008492:	e004      	b.n	800849e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b087      	sub	sp, #28
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	60f8      	str	r0, [r7, #12]
 80084b2:	60b9      	str	r1, [r7, #8]
 80084b4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084bc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d101      	bne.n	80084c8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e008      	b.n	80084da <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	371c      	adds	r7, #28
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b085      	sub	sp, #20
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d101      	bne.n	8008502 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80084fe:	2303      	movs	r3, #3
 8008500:	e004      	b.n	800850c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	683a      	ldr	r2, [r7, #0]
 8008506:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008526:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008532:	2303      	movs	r3, #3
 8008534:	e016      	b.n	8008564 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	7c1b      	ldrb	r3, [r3, #16]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d109      	bne.n	8008552 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008548:	2101      	movs	r1, #1
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f001 fe00 	bl	800a150 <USBD_LL_PrepareReceive>
 8008550:	e007      	b.n	8008562 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008558:	2340      	movs	r3, #64	; 0x40
 800855a:	2101      	movs	r1, #1
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f001 fdf7 	bl	800a150 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	4613      	mov	r3, r2
 8008578:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008580:	2303      	movs	r3, #3
 8008582:	e01f      	b.n	80085c4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d003      	beq.n	80085aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	79fa      	ldrb	r2, [r7, #7]
 80085b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f001 fbb9 	bl	8009d30 <USBD_LL_Init>
 80085be:	4603      	mov	r3, r0
 80085c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085d6:	2300      	movs	r3, #0
 80085d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e016      	b.n	8008612 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00b      	beq.n	8008610 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008600:	f107 020e 	add.w	r2, r7, #14
 8008604:	4610      	mov	r0, r2
 8008606:	4798      	blx	r3
 8008608:	4602      	mov	r2, r0
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b082      	sub	sp, #8
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f001 fbe6 	bl	8009df4 <USBD_LL_Start>
 8008628:	4603      	mov	r3, r0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008632:	b480      	push	{r7}
 8008634:	b083      	sub	sp, #12
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	460b      	mov	r3, r1
 8008652:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008654:	2303      	movs	r3, #3
 8008656:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800865e:	2b00      	cmp	r3, #0
 8008660:	d009      	beq.n	8008676 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	78fa      	ldrb	r2, [r7, #3]
 800866c:	4611      	mov	r1, r2
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	4798      	blx	r3
 8008672:	4603      	mov	r3, r0
 8008674:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008676:	7bfb      	ldrb	r3, [r7, #15]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	460b      	mov	r3, r1
 800868a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008692:	2b00      	cmp	r3, #0
 8008694:	d007      	beq.n	80086a6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	78fa      	ldrb	r2, [r7, #3]
 80086a0:	4611      	mov	r1, r2
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	4798      	blx	r3
  }

  return USBD_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086c0:	6839      	ldr	r1, [r7, #0]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f000 ff46 	bl	8009554 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80086d6:	461a      	mov	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086e4:	f003 031f 	and.w	r3, r3, #31
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d01a      	beq.n	8008722 <USBD_LL_SetupStage+0x72>
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d822      	bhi.n	8008736 <USBD_LL_SetupStage+0x86>
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <USBD_LL_SetupStage+0x4a>
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d00a      	beq.n	800870e <USBD_LL_SetupStage+0x5e>
 80086f8:	e01d      	b.n	8008736 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008700:	4619      	mov	r1, r3
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f9ee 	bl	8008ae4 <USBD_StdDevReq>
 8008708:	4603      	mov	r3, r0
 800870a:	73fb      	strb	r3, [r7, #15]
      break;
 800870c:	e020      	b.n	8008750 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fa52 	bl	8008bc0 <USBD_StdItfReq>
 800871c:	4603      	mov	r3, r0
 800871e:	73fb      	strb	r3, [r7, #15]
      break;
 8008720:	e016      	b.n	8008750 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008728:	4619      	mov	r1, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fa91 	bl	8008c52 <USBD_StdEPReq>
 8008730:	4603      	mov	r3, r0
 8008732:	73fb      	strb	r3, [r7, #15]
      break;
 8008734:	e00c      	b.n	8008750 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800873c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008740:	b2db      	uxtb	r3, r3
 8008742:	4619      	mov	r1, r3
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f001 fbfb 	bl	8009f40 <USBD_LL_StallEP>
 800874a:	4603      	mov	r3, r0
 800874c:	73fb      	strb	r3, [r7, #15]
      break;
 800874e:	bf00      	nop
  }

  return ret;
 8008750:	7bfb      	ldrb	r3, [r7, #15]
}
 8008752:	4618      	mov	r0, r3
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b086      	sub	sp, #24
 800875e:	af00      	add	r7, sp, #0
 8008760:	60f8      	str	r0, [r7, #12]
 8008762:	460b      	mov	r3, r1
 8008764:	607a      	str	r2, [r7, #4]
 8008766:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008768:	7afb      	ldrb	r3, [r7, #11]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d138      	bne.n	80087e0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008774:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800877c:	2b03      	cmp	r3, #3
 800877e:	d14a      	bne.n	8008816 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	689a      	ldr	r2, [r3, #8]
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	429a      	cmp	r2, r3
 800878a:	d913      	bls.n	80087b4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	689a      	ldr	r2, [r3, #8]
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	1ad2      	subs	r2, r2, r3
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	68da      	ldr	r2, [r3, #12]
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	4293      	cmp	r3, r2
 80087a4:	bf28      	it	cs
 80087a6:	4613      	movcs	r3, r2
 80087a8:	461a      	mov	r2, r3
 80087aa:	6879      	ldr	r1, [r7, #4]
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f000 ffc5 	bl	800973c <USBD_CtlContinueRx>
 80087b2:	e030      	b.n	8008816 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	2b03      	cmp	r3, #3
 80087be:	d10b      	bne.n	80087d8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d005      	beq.n	80087d8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f000 ffc0 	bl	800975e <USBD_CtlSendStatus>
 80087de:	e01a      	b.n	8008816 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	2b03      	cmp	r3, #3
 80087ea:	d114      	bne.n	8008816 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00e      	beq.n	8008816 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	7afa      	ldrb	r2, [r7, #11]
 8008802:	4611      	mov	r1, r2
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	4798      	blx	r3
 8008808:	4603      	mov	r3, r0
 800880a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800880c:	7dfb      	ldrb	r3, [r7, #23]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d001      	beq.n	8008816 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008812:	7dfb      	ldrb	r3, [r7, #23]
 8008814:	e000      	b.n	8008818 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3718      	adds	r7, #24
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	460b      	mov	r3, r1
 800882a:	607a      	str	r2, [r7, #4]
 800882c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800882e:	7afb      	ldrb	r3, [r7, #11]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d16b      	bne.n	800890c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	3314      	adds	r3, #20
 8008838:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008840:	2b02      	cmp	r3, #2
 8008842:	d156      	bne.n	80088f2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	689a      	ldr	r2, [r3, #8]
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	429a      	cmp	r2, r3
 800884e:	d914      	bls.n	800887a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	689a      	ldr	r2, [r3, #8]
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	1ad2      	subs	r2, r2, r3
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	461a      	mov	r2, r3
 8008864:	6879      	ldr	r1, [r7, #4]
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f000 ff3a 	bl	80096e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800886c:	2300      	movs	r3, #0
 800886e:	2200      	movs	r2, #0
 8008870:	2100      	movs	r1, #0
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f001 fc6c 	bl	800a150 <USBD_LL_PrepareReceive>
 8008878:	e03b      	b.n	80088f2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	68da      	ldr	r2, [r3, #12]
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	429a      	cmp	r2, r3
 8008884:	d11c      	bne.n	80088c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	685a      	ldr	r2, [r3, #4]
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800888e:	429a      	cmp	r2, r3
 8008890:	d316      	bcc.n	80088c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	685a      	ldr	r2, [r3, #4]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800889c:	429a      	cmp	r2, r3
 800889e:	d20f      	bcs.n	80088c0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80088a0:	2200      	movs	r2, #0
 80088a2:	2100      	movs	r1, #0
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f000 ff1b 	bl	80096e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088b2:	2300      	movs	r3, #0
 80088b4:	2200      	movs	r2, #0
 80088b6:	2100      	movs	r1, #0
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f001 fc49 	bl	800a150 <USBD_LL_PrepareReceive>
 80088be:	e018      	b.n	80088f2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b03      	cmp	r3, #3
 80088ca:	d10b      	bne.n	80088e4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d005      	beq.n	80088e4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088e4:	2180      	movs	r1, #128	; 0x80
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f001 fb2a 	bl	8009f40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f000 ff49 	bl	8009784 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d122      	bne.n	8008942 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f7ff fe98 	bl	8008632 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800890a:	e01a      	b.n	8008942 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b03      	cmp	r3, #3
 8008916:	d114      	bne.n	8008942 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800891e:	695b      	ldr	r3, [r3, #20]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00e      	beq.n	8008942 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800892a:	695b      	ldr	r3, [r3, #20]
 800892c:	7afa      	ldrb	r2, [r7, #11]
 800892e:	4611      	mov	r1, r2
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	4798      	blx	r3
 8008934:	4603      	mov	r3, r0
 8008936:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008938:	7dfb      	ldrb	r3, [r7, #23]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d001      	beq.n	8008942 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800893e:	7dfb      	ldrb	r3, [r7, #23]
 8008940:	e000      	b.n	8008944 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3718      	adds	r7, #24
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008978:	2b00      	cmp	r3, #0
 800897a:	d101      	bne.n	8008980 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800897c:	2303      	movs	r3, #3
 800897e:	e02f      	b.n	80089e0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00f      	beq.n	80089aa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d009      	beq.n	80089aa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	6852      	ldr	r2, [r2, #4]
 80089a2:	b2d2      	uxtb	r2, r2
 80089a4:	4611      	mov	r1, r2
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089aa:	2340      	movs	r3, #64	; 0x40
 80089ac:	2200      	movs	r2, #0
 80089ae:	2100      	movs	r1, #0
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f001 fa51 	bl	8009e58 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2240      	movs	r2, #64	; 0x40
 80089c2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089c6:	2340      	movs	r3, #64	; 0x40
 80089c8:	2200      	movs	r2, #0
 80089ca:	2180      	movs	r1, #128	; 0x80
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f001 fa43 	bl	8009e58 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2240      	movs	r2, #64	; 0x40
 80089dc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	460b      	mov	r3, r1
 80089f2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	78fa      	ldrb	r2, [r7, #3]
 80089f8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a16:	b2da      	uxtb	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2204      	movs	r2, #4
 8008a22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	2b04      	cmp	r3, #4
 8008a46:	d106      	bne.n	8008a56 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008a4e:	b2da      	uxtb	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d101      	bne.n	8008a7a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e012      	b.n	8008aa0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d10b      	bne.n	8008a9e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d005      	beq.n	8008a9e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b087      	sub	sp, #28
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	3301      	adds	r3, #1
 8008abe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008ac6:	8a3b      	ldrh	r3, [r7, #16]
 8008ac8:	021b      	lsls	r3, r3, #8
 8008aca:	b21a      	sxth	r2, r3
 8008acc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	b21b      	sxth	r3, r3
 8008ad4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008ad6:	89fb      	ldrh	r3, [r7, #14]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	371c      	adds	r7, #28
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008afa:	2b40      	cmp	r3, #64	; 0x40
 8008afc:	d005      	beq.n	8008b0a <USBD_StdDevReq+0x26>
 8008afe:	2b40      	cmp	r3, #64	; 0x40
 8008b00:	d853      	bhi.n	8008baa <USBD_StdDevReq+0xc6>
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00b      	beq.n	8008b1e <USBD_StdDevReq+0x3a>
 8008b06:	2b20      	cmp	r3, #32
 8008b08:	d14f      	bne.n	8008baa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	4798      	blx	r3
 8008b18:	4603      	mov	r3, r0
 8008b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b1c:	e04a      	b.n	8008bb4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	785b      	ldrb	r3, [r3, #1]
 8008b22:	2b09      	cmp	r3, #9
 8008b24:	d83b      	bhi.n	8008b9e <USBD_StdDevReq+0xba>
 8008b26:	a201      	add	r2, pc, #4	; (adr r2, 8008b2c <USBD_StdDevReq+0x48>)
 8008b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2c:	08008b81 	.word	0x08008b81
 8008b30:	08008b95 	.word	0x08008b95
 8008b34:	08008b9f 	.word	0x08008b9f
 8008b38:	08008b8b 	.word	0x08008b8b
 8008b3c:	08008b9f 	.word	0x08008b9f
 8008b40:	08008b5f 	.word	0x08008b5f
 8008b44:	08008b55 	.word	0x08008b55
 8008b48:	08008b9f 	.word	0x08008b9f
 8008b4c:	08008b77 	.word	0x08008b77
 8008b50:	08008b69 	.word	0x08008b69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b54:	6839      	ldr	r1, [r7, #0]
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f9de 	bl	8008f18 <USBD_GetDescriptor>
          break;
 8008b5c:	e024      	b.n	8008ba8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fb6d 	bl	8009240 <USBD_SetAddress>
          break;
 8008b66:	e01f      	b.n	8008ba8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008b68:	6839      	ldr	r1, [r7, #0]
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fbac 	bl	80092c8 <USBD_SetConfig>
 8008b70:	4603      	mov	r3, r0
 8008b72:	73fb      	strb	r3, [r7, #15]
          break;
 8008b74:	e018      	b.n	8008ba8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 fc4b 	bl	8009414 <USBD_GetConfig>
          break;
 8008b7e:	e013      	b.n	8008ba8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b80:	6839      	ldr	r1, [r7, #0]
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fc7c 	bl	8009480 <USBD_GetStatus>
          break;
 8008b88:	e00e      	b.n	8008ba8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b8a:	6839      	ldr	r1, [r7, #0]
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fcab 	bl	80094e8 <USBD_SetFeature>
          break;
 8008b92:	e009      	b.n	8008ba8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fcba 	bl	8009510 <USBD_ClrFeature>
          break;
 8008b9c:	e004      	b.n	8008ba8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 fd11 	bl	80095c8 <USBD_CtlError>
          break;
 8008ba6:	bf00      	nop
      }
      break;
 8008ba8:	e004      	b.n	8008bb4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fd0b 	bl	80095c8 <USBD_CtlError>
      break;
 8008bb2:	bf00      	nop
  }

  return ret;
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop

08008bc0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bd6:	2b40      	cmp	r3, #64	; 0x40
 8008bd8:	d005      	beq.n	8008be6 <USBD_StdItfReq+0x26>
 8008bda:	2b40      	cmp	r3, #64	; 0x40
 8008bdc:	d82f      	bhi.n	8008c3e <USBD_StdItfReq+0x7e>
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <USBD_StdItfReq+0x26>
 8008be2:	2b20      	cmp	r3, #32
 8008be4:	d12b      	bne.n	8008c3e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d81d      	bhi.n	8008c30 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	889b      	ldrh	r3, [r3, #4]
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d813      	bhi.n	8008c26 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	6839      	ldr	r1, [r7, #0]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	4798      	blx	r3
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	88db      	ldrh	r3, [r3, #6]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d110      	bne.n	8008c3a <USBD_StdItfReq+0x7a>
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10d      	bne.n	8008c3a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fd9d 	bl	800975e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c24:	e009      	b.n	8008c3a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008c26:	6839      	ldr	r1, [r7, #0]
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 fccd 	bl	80095c8 <USBD_CtlError>
          break;
 8008c2e:	e004      	b.n	8008c3a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008c30:	6839      	ldr	r1, [r7, #0]
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 fcc8 	bl	80095c8 <USBD_CtlError>
          break;
 8008c38:	e000      	b.n	8008c3c <USBD_StdItfReq+0x7c>
          break;
 8008c3a:	bf00      	nop
      }
      break;
 8008c3c:	e004      	b.n	8008c48 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fcc1 	bl	80095c8 <USBD_CtlError>
      break;
 8008c46:	bf00      	nop
  }

  return ret;
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	889b      	ldrh	r3, [r3, #4]
 8008c64:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c6e:	2b40      	cmp	r3, #64	; 0x40
 8008c70:	d007      	beq.n	8008c82 <USBD_StdEPReq+0x30>
 8008c72:	2b40      	cmp	r3, #64	; 0x40
 8008c74:	f200 8145 	bhi.w	8008f02 <USBD_StdEPReq+0x2b0>
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00c      	beq.n	8008c96 <USBD_StdEPReq+0x44>
 8008c7c:	2b20      	cmp	r3, #32
 8008c7e:	f040 8140 	bne.w	8008f02 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	6839      	ldr	r1, [r7, #0]
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	4798      	blx	r3
 8008c90:	4603      	mov	r3, r0
 8008c92:	73fb      	strb	r3, [r7, #15]
      break;
 8008c94:	e13a      	b.n	8008f0c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	785b      	ldrb	r3, [r3, #1]
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d007      	beq.n	8008cae <USBD_StdEPReq+0x5c>
 8008c9e:	2b03      	cmp	r3, #3
 8008ca0:	f300 8129 	bgt.w	8008ef6 <USBD_StdEPReq+0x2a4>
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d07f      	beq.n	8008da8 <USBD_StdEPReq+0x156>
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d03c      	beq.n	8008d26 <USBD_StdEPReq+0xd4>
 8008cac:	e123      	b.n	8008ef6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d002      	beq.n	8008cc0 <USBD_StdEPReq+0x6e>
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d016      	beq.n	8008cec <USBD_StdEPReq+0x9a>
 8008cbe:	e02c      	b.n	8008d1a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cc0:	7bbb      	ldrb	r3, [r7, #14]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00d      	beq.n	8008ce2 <USBD_StdEPReq+0x90>
 8008cc6:	7bbb      	ldrb	r3, [r7, #14]
 8008cc8:	2b80      	cmp	r3, #128	; 0x80
 8008cca:	d00a      	beq.n	8008ce2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ccc:	7bbb      	ldrb	r3, [r7, #14]
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f001 f935 	bl	8009f40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cd6:	2180      	movs	r1, #128	; 0x80
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f001 f931 	bl	8009f40 <USBD_LL_StallEP>
 8008cde:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ce0:	e020      	b.n	8008d24 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008ce2:	6839      	ldr	r1, [r7, #0]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fc6f 	bl	80095c8 <USBD_CtlError>
              break;
 8008cea:	e01b      	b.n	8008d24 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	885b      	ldrh	r3, [r3, #2]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10e      	bne.n	8008d12 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00b      	beq.n	8008d12 <USBD_StdEPReq+0xc0>
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
 8008cfc:	2b80      	cmp	r3, #128	; 0x80
 8008cfe:	d008      	beq.n	8008d12 <USBD_StdEPReq+0xc0>
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	88db      	ldrh	r3, [r3, #6]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d104      	bne.n	8008d12 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d08:	7bbb      	ldrb	r3, [r7, #14]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f001 f917 	bl	8009f40 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fd23 	bl	800975e <USBD_CtlSendStatus>

              break;
 8008d18:	e004      	b.n	8008d24 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008d1a:	6839      	ldr	r1, [r7, #0]
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 fc53 	bl	80095c8 <USBD_CtlError>
              break;
 8008d22:	bf00      	nop
          }
          break;
 8008d24:	e0ec      	b.n	8008f00 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d002      	beq.n	8008d38 <USBD_StdEPReq+0xe6>
 8008d32:	2b03      	cmp	r3, #3
 8008d34:	d016      	beq.n	8008d64 <USBD_StdEPReq+0x112>
 8008d36:	e030      	b.n	8008d9a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00d      	beq.n	8008d5a <USBD_StdEPReq+0x108>
 8008d3e:	7bbb      	ldrb	r3, [r7, #14]
 8008d40:	2b80      	cmp	r3, #128	; 0x80
 8008d42:	d00a      	beq.n	8008d5a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d44:	7bbb      	ldrb	r3, [r7, #14]
 8008d46:	4619      	mov	r1, r3
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f001 f8f9 	bl	8009f40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d4e:	2180      	movs	r1, #128	; 0x80
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f001 f8f5 	bl	8009f40 <USBD_LL_StallEP>
 8008d56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d58:	e025      	b.n	8008da6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008d5a:	6839      	ldr	r1, [r7, #0]
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fc33 	bl	80095c8 <USBD_CtlError>
              break;
 8008d62:	e020      	b.n	8008da6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	885b      	ldrh	r3, [r3, #2]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d11b      	bne.n	8008da4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d6c:	7bbb      	ldrb	r3, [r7, #14]
 8008d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d004      	beq.n	8008d80 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d76:	7bbb      	ldrb	r3, [r7, #14]
 8008d78:	4619      	mov	r1, r3
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f001 f916 	bl	8009fac <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 fcec 	bl	800975e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	4798      	blx	r3
 8008d94:	4603      	mov	r3, r0
 8008d96:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008d98:	e004      	b.n	8008da4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fc13 	bl	80095c8 <USBD_CtlError>
              break;
 8008da2:	e000      	b.n	8008da6 <USBD_StdEPReq+0x154>
              break;
 8008da4:	bf00      	nop
          }
          break;
 8008da6:	e0ab      	b.n	8008f00 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d002      	beq.n	8008dba <USBD_StdEPReq+0x168>
 8008db4:	2b03      	cmp	r3, #3
 8008db6:	d032      	beq.n	8008e1e <USBD_StdEPReq+0x1cc>
 8008db8:	e097      	b.n	8008eea <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008dba:	7bbb      	ldrb	r3, [r7, #14]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d007      	beq.n	8008dd0 <USBD_StdEPReq+0x17e>
 8008dc0:	7bbb      	ldrb	r3, [r7, #14]
 8008dc2:	2b80      	cmp	r3, #128	; 0x80
 8008dc4:	d004      	beq.n	8008dd0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fbfd 	bl	80095c8 <USBD_CtlError>
                break;
 8008dce:	e091      	b.n	8008ef4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	da0b      	bge.n	8008df0 <USBD_StdEPReq+0x19e>
 8008dd8:	7bbb      	ldrb	r3, [r7, #14]
 8008dda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dde:	4613      	mov	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4413      	add	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	3310      	adds	r3, #16
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	4413      	add	r3, r2
 8008dec:	3304      	adds	r3, #4
 8008dee:	e00b      	b.n	8008e08 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008df0:	7bbb      	ldrb	r3, [r7, #14]
 8008df2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008df6:	4613      	mov	r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	4413      	add	r3, r2
 8008e06:	3304      	adds	r3, #4
 8008e08:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	2202      	movs	r2, #2
 8008e14:	4619      	mov	r1, r3
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 fc47 	bl	80096aa <USBD_CtlSendData>
              break;
 8008e1c:	e06a      	b.n	8008ef4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	da11      	bge.n	8008e4a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e26:	7bbb      	ldrb	r3, [r7, #14]
 8008e28:	f003 020f 	and.w	r2, r3, #15
 8008e2c:	6879      	ldr	r1, [r7, #4]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	4413      	add	r3, r2
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	440b      	add	r3, r1
 8008e38:	3324      	adds	r3, #36	; 0x24
 8008e3a:	881b      	ldrh	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d117      	bne.n	8008e70 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fbc0 	bl	80095c8 <USBD_CtlError>
                  break;
 8008e48:	e054      	b.n	8008ef4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e4a:	7bbb      	ldrb	r3, [r7, #14]
 8008e4c:	f003 020f 	and.w	r2, r3, #15
 8008e50:	6879      	ldr	r1, [r7, #4]
 8008e52:	4613      	mov	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4413      	add	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	440b      	add	r3, r1
 8008e5c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e60:	881b      	ldrh	r3, [r3, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d104      	bne.n	8008e70 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fbad 	bl	80095c8 <USBD_CtlError>
                  break;
 8008e6e:	e041      	b.n	8008ef4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	da0b      	bge.n	8008e90 <USBD_StdEPReq+0x23e>
 8008e78:	7bbb      	ldrb	r3, [r7, #14]
 8008e7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e7e:	4613      	mov	r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	4413      	add	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	3310      	adds	r3, #16
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	e00b      	b.n	8008ea8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e90:	7bbb      	ldrb	r3, [r7, #14]
 8008e92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e96:	4613      	mov	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008eaa:	7bbb      	ldrb	r3, [r7, #14]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d002      	beq.n	8008eb6 <USBD_StdEPReq+0x264>
 8008eb0:	7bbb      	ldrb	r3, [r7, #14]
 8008eb2:	2b80      	cmp	r3, #128	; 0x80
 8008eb4:	d103      	bne.n	8008ebe <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	e00e      	b.n	8008edc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ebe:	7bbb      	ldrb	r3, [r7, #14]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f001 f8a8 	bl	800a018 <USBD_LL_IsStallEP>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d003      	beq.n	8008ed6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	601a      	str	r2, [r3, #0]
 8008ed4:	e002      	b.n	8008edc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	2202      	movs	r2, #2
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 fbe1 	bl	80096aa <USBD_CtlSendData>
              break;
 8008ee8:	e004      	b.n	8008ef4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008eea:	6839      	ldr	r1, [r7, #0]
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fb6b 	bl	80095c8 <USBD_CtlError>
              break;
 8008ef2:	bf00      	nop
          }
          break;
 8008ef4:	e004      	b.n	8008f00 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008ef6:	6839      	ldr	r1, [r7, #0]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fb65 	bl	80095c8 <USBD_CtlError>
          break;
 8008efe:	bf00      	nop
      }
      break;
 8008f00:	e004      	b.n	8008f0c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008f02:	6839      	ldr	r1, [r7, #0]
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fb5f 	bl	80095c8 <USBD_CtlError>
      break;
 8008f0a:	bf00      	nop
  }

  return ret;
 8008f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
	...

08008f18 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f22:	2300      	movs	r3, #0
 8008f24:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f26:	2300      	movs	r3, #0
 8008f28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	885b      	ldrh	r3, [r3, #2]
 8008f32:	0a1b      	lsrs	r3, r3, #8
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	3b01      	subs	r3, #1
 8008f38:	2b0e      	cmp	r3, #14
 8008f3a:	f200 8152 	bhi.w	80091e2 <USBD_GetDescriptor+0x2ca>
 8008f3e:	a201      	add	r2, pc, #4	; (adr r2, 8008f44 <USBD_GetDescriptor+0x2c>)
 8008f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f44:	08008fb5 	.word	0x08008fb5
 8008f48:	08008fcd 	.word	0x08008fcd
 8008f4c:	0800900d 	.word	0x0800900d
 8008f50:	080091e3 	.word	0x080091e3
 8008f54:	080091e3 	.word	0x080091e3
 8008f58:	08009183 	.word	0x08009183
 8008f5c:	080091af 	.word	0x080091af
 8008f60:	080091e3 	.word	0x080091e3
 8008f64:	080091e3 	.word	0x080091e3
 8008f68:	080091e3 	.word	0x080091e3
 8008f6c:	080091e3 	.word	0x080091e3
 8008f70:	080091e3 	.word	0x080091e3
 8008f74:	080091e3 	.word	0x080091e3
 8008f78:	080091e3 	.word	0x080091e3
 8008f7c:	08008f81 	.word	0x08008f81
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00b      	beq.n	8008fa4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f92:	69db      	ldr	r3, [r3, #28]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	7c12      	ldrb	r2, [r2, #16]
 8008f98:	f107 0108 	add.w	r1, r7, #8
 8008f9c:	4610      	mov	r0, r2
 8008f9e:	4798      	blx	r3
 8008fa0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fa2:	e126      	b.n	80091f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008fa4:	6839      	ldr	r1, [r7, #0]
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fb0e 	bl	80095c8 <USBD_CtlError>
        err++;
 8008fac:	7afb      	ldrb	r3, [r7, #11]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	72fb      	strb	r3, [r7, #11]
      break;
 8008fb2:	e11e      	b.n	80091f2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	7c12      	ldrb	r2, [r2, #16]
 8008fc0:	f107 0108 	add.w	r1, r7, #8
 8008fc4:	4610      	mov	r0, r2
 8008fc6:	4798      	blx	r3
 8008fc8:	60f8      	str	r0, [r7, #12]
      break;
 8008fca:	e112      	b.n	80091f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	7c1b      	ldrb	r3, [r3, #16]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10d      	bne.n	8008ff0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fdc:	f107 0208 	add.w	r2, r7, #8
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	4798      	blx	r3
 8008fe4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	2202      	movs	r2, #2
 8008fec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008fee:	e100      	b.n	80091f2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff8:	f107 0208 	add.w	r2, r7, #8
 8008ffc:	4610      	mov	r0, r2
 8008ffe:	4798      	blx	r3
 8009000:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	3301      	adds	r3, #1
 8009006:	2202      	movs	r2, #2
 8009008:	701a      	strb	r2, [r3, #0]
      break;
 800900a:	e0f2      	b.n	80091f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	885b      	ldrh	r3, [r3, #2]
 8009010:	b2db      	uxtb	r3, r3
 8009012:	2b05      	cmp	r3, #5
 8009014:	f200 80ac 	bhi.w	8009170 <USBD_GetDescriptor+0x258>
 8009018:	a201      	add	r2, pc, #4	; (adr r2, 8009020 <USBD_GetDescriptor+0x108>)
 800901a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901e:	bf00      	nop
 8009020:	08009039 	.word	0x08009039
 8009024:	0800906d 	.word	0x0800906d
 8009028:	080090a1 	.word	0x080090a1
 800902c:	080090d5 	.word	0x080090d5
 8009030:	08009109 	.word	0x08009109
 8009034:	0800913d 	.word	0x0800913d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00b      	beq.n	800905c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	7c12      	ldrb	r2, [r2, #16]
 8009050:	f107 0108 	add.w	r1, r7, #8
 8009054:	4610      	mov	r0, r2
 8009056:	4798      	blx	r3
 8009058:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800905a:	e091      	b.n	8009180 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fab2 	bl	80095c8 <USBD_CtlError>
            err++;
 8009064:	7afb      	ldrb	r3, [r7, #11]
 8009066:	3301      	adds	r3, #1
 8009068:	72fb      	strb	r3, [r7, #11]
          break;
 800906a:	e089      	b.n	8009180 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00b      	beq.n	8009090 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	7c12      	ldrb	r2, [r2, #16]
 8009084:	f107 0108 	add.w	r1, r7, #8
 8009088:	4610      	mov	r0, r2
 800908a:	4798      	blx	r3
 800908c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800908e:	e077      	b.n	8009180 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009090:	6839      	ldr	r1, [r7, #0]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fa98 	bl	80095c8 <USBD_CtlError>
            err++;
 8009098:	7afb      	ldrb	r3, [r7, #11]
 800909a:	3301      	adds	r3, #1
 800909c:	72fb      	strb	r3, [r7, #11]
          break;
 800909e:	e06f      	b.n	8009180 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00b      	beq.n	80090c4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	7c12      	ldrb	r2, [r2, #16]
 80090b8:	f107 0108 	add.w	r1, r7, #8
 80090bc:	4610      	mov	r0, r2
 80090be:	4798      	blx	r3
 80090c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090c2:	e05d      	b.n	8009180 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80090c4:	6839      	ldr	r1, [r7, #0]
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fa7e 	bl	80095c8 <USBD_CtlError>
            err++;
 80090cc:	7afb      	ldrb	r3, [r7, #11]
 80090ce:	3301      	adds	r3, #1
 80090d0:	72fb      	strb	r3, [r7, #11]
          break;
 80090d2:	e055      	b.n	8009180 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00b      	beq.n	80090f8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	7c12      	ldrb	r2, [r2, #16]
 80090ec:	f107 0108 	add.w	r1, r7, #8
 80090f0:	4610      	mov	r0, r2
 80090f2:	4798      	blx	r3
 80090f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090f6:	e043      	b.n	8009180 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80090f8:	6839      	ldr	r1, [r7, #0]
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fa64 	bl	80095c8 <USBD_CtlError>
            err++;
 8009100:	7afb      	ldrb	r3, [r7, #11]
 8009102:	3301      	adds	r3, #1
 8009104:	72fb      	strb	r3, [r7, #11]
          break;
 8009106:	e03b      	b.n	8009180 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800910e:	695b      	ldr	r3, [r3, #20]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00b      	beq.n	800912c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800911a:	695b      	ldr	r3, [r3, #20]
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	7c12      	ldrb	r2, [r2, #16]
 8009120:	f107 0108 	add.w	r1, r7, #8
 8009124:	4610      	mov	r0, r2
 8009126:	4798      	blx	r3
 8009128:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800912a:	e029      	b.n	8009180 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800912c:	6839      	ldr	r1, [r7, #0]
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fa4a 	bl	80095c8 <USBD_CtlError>
            err++;
 8009134:	7afb      	ldrb	r3, [r7, #11]
 8009136:	3301      	adds	r3, #1
 8009138:	72fb      	strb	r3, [r7, #11]
          break;
 800913a:	e021      	b.n	8009180 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009142:	699b      	ldr	r3, [r3, #24]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00b      	beq.n	8009160 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800914e:	699b      	ldr	r3, [r3, #24]
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	7c12      	ldrb	r2, [r2, #16]
 8009154:	f107 0108 	add.w	r1, r7, #8
 8009158:	4610      	mov	r0, r2
 800915a:	4798      	blx	r3
 800915c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800915e:	e00f      	b.n	8009180 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009160:	6839      	ldr	r1, [r7, #0]
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fa30 	bl	80095c8 <USBD_CtlError>
            err++;
 8009168:	7afb      	ldrb	r3, [r7, #11]
 800916a:	3301      	adds	r3, #1
 800916c:	72fb      	strb	r3, [r7, #11]
          break;
 800916e:	e007      	b.n	8009180 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 fa28 	bl	80095c8 <USBD_CtlError>
          err++;
 8009178:	7afb      	ldrb	r3, [r7, #11]
 800917a:	3301      	adds	r3, #1
 800917c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800917e:	bf00      	nop
      }
      break;
 8009180:	e037      	b.n	80091f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	7c1b      	ldrb	r3, [r3, #16]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d109      	bne.n	800919e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009192:	f107 0208 	add.w	r2, r7, #8
 8009196:	4610      	mov	r0, r2
 8009198:	4798      	blx	r3
 800919a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800919c:	e029      	b.n	80091f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800919e:	6839      	ldr	r1, [r7, #0]
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fa11 	bl	80095c8 <USBD_CtlError>
        err++;
 80091a6:	7afb      	ldrb	r3, [r7, #11]
 80091a8:	3301      	adds	r3, #1
 80091aa:	72fb      	strb	r3, [r7, #11]
      break;
 80091ac:	e021      	b.n	80091f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	7c1b      	ldrb	r3, [r3, #16]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d10d      	bne.n	80091d2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091be:	f107 0208 	add.w	r2, r7, #8
 80091c2:	4610      	mov	r0, r2
 80091c4:	4798      	blx	r3
 80091c6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	3301      	adds	r3, #1
 80091cc:	2207      	movs	r2, #7
 80091ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091d0:	e00f      	b.n	80091f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80091d2:	6839      	ldr	r1, [r7, #0]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 f9f7 	bl	80095c8 <USBD_CtlError>
        err++;
 80091da:	7afb      	ldrb	r3, [r7, #11]
 80091dc:	3301      	adds	r3, #1
 80091de:	72fb      	strb	r3, [r7, #11]
      break;
 80091e0:	e007      	b.n	80091f2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80091e2:	6839      	ldr	r1, [r7, #0]
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 f9ef 	bl	80095c8 <USBD_CtlError>
      err++;
 80091ea:	7afb      	ldrb	r3, [r7, #11]
 80091ec:	3301      	adds	r3, #1
 80091ee:	72fb      	strb	r3, [r7, #11]
      break;
 80091f0:	bf00      	nop
  }

  if (err != 0U)
 80091f2:	7afb      	ldrb	r3, [r7, #11]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d11e      	bne.n	8009236 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	88db      	ldrh	r3, [r3, #6]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d016      	beq.n	800922e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009200:	893b      	ldrh	r3, [r7, #8]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00e      	beq.n	8009224 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	88da      	ldrh	r2, [r3, #6]
 800920a:	893b      	ldrh	r3, [r7, #8]
 800920c:	4293      	cmp	r3, r2
 800920e:	bf28      	it	cs
 8009210:	4613      	movcs	r3, r2
 8009212:	b29b      	uxth	r3, r3
 8009214:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009216:	893b      	ldrh	r3, [r7, #8]
 8009218:	461a      	mov	r2, r3
 800921a:	68f9      	ldr	r1, [r7, #12]
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fa44 	bl	80096aa <USBD_CtlSendData>
 8009222:	e009      	b.n	8009238 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f9ce 	bl	80095c8 <USBD_CtlError>
 800922c:	e004      	b.n	8009238 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 fa95 	bl	800975e <USBD_CtlSendStatus>
 8009234:	e000      	b.n	8009238 <USBD_GetDescriptor+0x320>
    return;
 8009236:	bf00      	nop
  }
}
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop

08009240 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	889b      	ldrh	r3, [r3, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d131      	bne.n	80092b6 <USBD_SetAddress+0x76>
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	88db      	ldrh	r3, [r3, #6]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d12d      	bne.n	80092b6 <USBD_SetAddress+0x76>
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	885b      	ldrh	r3, [r3, #2]
 800925e:	2b7f      	cmp	r3, #127	; 0x7f
 8009260:	d829      	bhi.n	80092b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	885b      	ldrh	r3, [r3, #2]
 8009266:	b2db      	uxtb	r3, r3
 8009268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800926c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009274:	b2db      	uxtb	r3, r3
 8009276:	2b03      	cmp	r3, #3
 8009278:	d104      	bne.n	8009284 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800927a:	6839      	ldr	r1, [r7, #0]
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 f9a3 	bl	80095c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009282:	e01d      	b.n	80092c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	7bfa      	ldrb	r2, [r7, #15]
 8009288:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800928c:	7bfb      	ldrb	r3, [r7, #15]
 800928e:	4619      	mov	r1, r3
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 feef 	bl	800a074 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fa61 	bl	800975e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800929c:	7bfb      	ldrb	r3, [r7, #15]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d004      	beq.n	80092ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2202      	movs	r2, #2
 80092a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092aa:	e009      	b.n	80092c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092b4:	e004      	b.n	80092c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80092b6:	6839      	ldr	r1, [r7, #0]
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 f985 	bl	80095c8 <USBD_CtlError>
  }
}
 80092be:	bf00      	nop
 80092c0:	bf00      	nop
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	885b      	ldrh	r3, [r3, #2]
 80092da:	b2da      	uxtb	r2, r3
 80092dc:	4b4c      	ldr	r3, [pc, #304]	; (8009410 <USBD_SetConfig+0x148>)
 80092de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80092e0:	4b4b      	ldr	r3, [pc, #300]	; (8009410 <USBD_SetConfig+0x148>)
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d905      	bls.n	80092f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80092e8:	6839      	ldr	r1, [r7, #0]
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f96c 	bl	80095c8 <USBD_CtlError>
    return USBD_FAIL;
 80092f0:	2303      	movs	r3, #3
 80092f2:	e088      	b.n	8009406 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d002      	beq.n	8009306 <USBD_SetConfig+0x3e>
 8009300:	2b03      	cmp	r3, #3
 8009302:	d025      	beq.n	8009350 <USBD_SetConfig+0x88>
 8009304:	e071      	b.n	80093ea <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009306:	4b42      	ldr	r3, [pc, #264]	; (8009410 <USBD_SetConfig+0x148>)
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d01c      	beq.n	8009348 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800930e:	4b40      	ldr	r3, [pc, #256]	; (8009410 <USBD_SetConfig+0x148>)
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	461a      	mov	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009318:	4b3d      	ldr	r3, [pc, #244]	; (8009410 <USBD_SetConfig+0x148>)
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	4619      	mov	r1, r3
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f7ff f992 	bl	8008648 <USBD_SetClassConfig>
 8009324:	4603      	mov	r3, r0
 8009326:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009328:	7bfb      	ldrb	r3, [r7, #15]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d004      	beq.n	8009338 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800932e:	6839      	ldr	r1, [r7, #0]
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f949 	bl	80095c8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009336:	e065      	b.n	8009404 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 fa10 	bl	800975e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2203      	movs	r2, #3
 8009342:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009346:	e05d      	b.n	8009404 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fa08 	bl	800975e <USBD_CtlSendStatus>
      break;
 800934e:	e059      	b.n	8009404 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009350:	4b2f      	ldr	r3, [pc, #188]	; (8009410 <USBD_SetConfig+0x148>)
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d112      	bne.n	800937e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2202      	movs	r2, #2
 800935c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009360:	4b2b      	ldr	r3, [pc, #172]	; (8009410 <USBD_SetConfig+0x148>)
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	461a      	mov	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800936a:	4b29      	ldr	r3, [pc, #164]	; (8009410 <USBD_SetConfig+0x148>)
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	4619      	mov	r1, r3
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f7ff f985 	bl	8008680 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f9f1 	bl	800975e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800937c:	e042      	b.n	8009404 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800937e:	4b24      	ldr	r3, [pc, #144]	; (8009410 <USBD_SetConfig+0x148>)
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	461a      	mov	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	429a      	cmp	r2, r3
 800938a:	d02a      	beq.n	80093e2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	b2db      	uxtb	r3, r3
 8009392:	4619      	mov	r1, r3
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f7ff f973 	bl	8008680 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800939a:	4b1d      	ldr	r3, [pc, #116]	; (8009410 <USBD_SetConfig+0x148>)
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	461a      	mov	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80093a4:	4b1a      	ldr	r3, [pc, #104]	; (8009410 <USBD_SetConfig+0x148>)
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	4619      	mov	r1, r3
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f7ff f94c 	bl	8008648 <USBD_SetClassConfig>
 80093b0:	4603      	mov	r3, r0
 80093b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80093b4:	7bfb      	ldrb	r3, [r7, #15]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00f      	beq.n	80093da <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80093ba:	6839      	ldr	r1, [r7, #0]
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 f903 	bl	80095c8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	4619      	mov	r1, r3
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f7ff f958 	bl	8008680 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2202      	movs	r2, #2
 80093d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80093d8:	e014      	b.n	8009404 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f9bf 	bl	800975e <USBD_CtlSendStatus>
      break;
 80093e0:	e010      	b.n	8009404 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f9bb 	bl	800975e <USBD_CtlSendStatus>
      break;
 80093e8:	e00c      	b.n	8009404 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80093ea:	6839      	ldr	r1, [r7, #0]
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 f8eb 	bl	80095c8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80093f2:	4b07      	ldr	r3, [pc, #28]	; (8009410 <USBD_SetConfig+0x148>)
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	4619      	mov	r1, r3
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f7ff f941 	bl	8008680 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80093fe:	2303      	movs	r3, #3
 8009400:	73fb      	strb	r3, [r7, #15]
      break;
 8009402:	bf00      	nop
  }

  return ret;
 8009404:	7bfb      	ldrb	r3, [r7, #15]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	200003d4 	.word	0x200003d4

08009414 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	88db      	ldrh	r3, [r3, #6]
 8009422:	2b01      	cmp	r3, #1
 8009424:	d004      	beq.n	8009430 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f8cd 	bl	80095c8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800942e:	e023      	b.n	8009478 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2b02      	cmp	r3, #2
 800943a:	dc02      	bgt.n	8009442 <USBD_GetConfig+0x2e>
 800943c:	2b00      	cmp	r3, #0
 800943e:	dc03      	bgt.n	8009448 <USBD_GetConfig+0x34>
 8009440:	e015      	b.n	800946e <USBD_GetConfig+0x5a>
 8009442:	2b03      	cmp	r3, #3
 8009444:	d00b      	beq.n	800945e <USBD_GetConfig+0x4a>
 8009446:	e012      	b.n	800946e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	3308      	adds	r3, #8
 8009452:	2201      	movs	r2, #1
 8009454:	4619      	mov	r1, r3
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f927 	bl	80096aa <USBD_CtlSendData>
        break;
 800945c:	e00c      	b.n	8009478 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	3304      	adds	r3, #4
 8009462:	2201      	movs	r2, #1
 8009464:	4619      	mov	r1, r3
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f91f 	bl	80096aa <USBD_CtlSendData>
        break;
 800946c:	e004      	b.n	8009478 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800946e:	6839      	ldr	r1, [r7, #0]
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f8a9 	bl	80095c8 <USBD_CtlError>
        break;
 8009476:	bf00      	nop
}
 8009478:	bf00      	nop
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009490:	b2db      	uxtb	r3, r3
 8009492:	3b01      	subs	r3, #1
 8009494:	2b02      	cmp	r3, #2
 8009496:	d81e      	bhi.n	80094d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	88db      	ldrh	r3, [r3, #6]
 800949c:	2b02      	cmp	r3, #2
 800949e:	d004      	beq.n	80094aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80094a0:	6839      	ldr	r1, [r7, #0]
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 f890 	bl	80095c8 <USBD_CtlError>
        break;
 80094a8:	e01a      	b.n	80094e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d005      	beq.n	80094c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	f043 0202 	orr.w	r2, r3, #2
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	330c      	adds	r3, #12
 80094ca:	2202      	movs	r2, #2
 80094cc:	4619      	mov	r1, r3
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f8eb 	bl	80096aa <USBD_CtlSendData>
      break;
 80094d4:	e004      	b.n	80094e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80094d6:	6839      	ldr	r1, [r7, #0]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 f875 	bl	80095c8 <USBD_CtlError>
      break;
 80094de:	bf00      	nop
  }
}
 80094e0:	bf00      	nop
 80094e2:	3708      	adds	r7, #8
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	885b      	ldrh	r3, [r3, #2]
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d106      	bne.n	8009508 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2201      	movs	r2, #1
 80094fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f92b 	bl	800975e <USBD_CtlSendStatus>
  }
}
 8009508:	bf00      	nop
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009520:	b2db      	uxtb	r3, r3
 8009522:	3b01      	subs	r3, #1
 8009524:	2b02      	cmp	r3, #2
 8009526:	d80b      	bhi.n	8009540 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	885b      	ldrh	r3, [r3, #2]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d10c      	bne.n	800954a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f910 	bl	800975e <USBD_CtlSendStatus>
      }
      break;
 800953e:	e004      	b.n	800954a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009540:	6839      	ldr	r1, [r7, #0]
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f840 	bl	80095c8 <USBD_CtlError>
      break;
 8009548:	e000      	b.n	800954c <USBD_ClrFeature+0x3c>
      break;
 800954a:	bf00      	nop
  }
}
 800954c:	bf00      	nop
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	781a      	ldrb	r2, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	3301      	adds	r3, #1
 800956e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	781a      	ldrb	r2, [r3, #0]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	3301      	adds	r3, #1
 800957c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f7ff fa92 	bl	8008aa8 <SWAPBYTE>
 8009584:	4603      	mov	r3, r0
 8009586:	461a      	mov	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	3301      	adds	r3, #1
 8009590:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	3301      	adds	r3, #1
 8009596:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f7ff fa85 	bl	8008aa8 <SWAPBYTE>
 800959e:	4603      	mov	r3, r0
 80095a0:	461a      	mov	r2, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	3301      	adds	r3, #1
 80095aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	3301      	adds	r3, #1
 80095b0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f7ff fa78 	bl	8008aa8 <SWAPBYTE>
 80095b8:	4603      	mov	r3, r0
 80095ba:	461a      	mov	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	80da      	strh	r2, [r3, #6]
}
 80095c0:	bf00      	nop
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80095d2:	2180      	movs	r1, #128	; 0x80
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fcb3 	bl	8009f40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80095da:	2100      	movs	r1, #0
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 fcaf 	bl	8009f40 <USBD_LL_StallEP>
}
 80095e2:	bf00      	nop
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b086      	sub	sp, #24
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	60f8      	str	r0, [r7, #12]
 80095f2:	60b9      	str	r1, [r7, #8]
 80095f4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80095f6:	2300      	movs	r3, #0
 80095f8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d036      	beq.n	800966e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009604:	6938      	ldr	r0, [r7, #16]
 8009606:	f000 f836 	bl	8009676 <USBD_GetLen>
 800960a:	4603      	mov	r3, r0
 800960c:	3301      	adds	r3, #1
 800960e:	b29b      	uxth	r3, r3
 8009610:	005b      	lsls	r3, r3, #1
 8009612:	b29a      	uxth	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009618:	7dfb      	ldrb	r3, [r7, #23]
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	4413      	add	r3, r2
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	7812      	ldrb	r2, [r2, #0]
 8009622:	701a      	strb	r2, [r3, #0]
  idx++;
 8009624:	7dfb      	ldrb	r3, [r7, #23]
 8009626:	3301      	adds	r3, #1
 8009628:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800962a:	7dfb      	ldrb	r3, [r7, #23]
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	4413      	add	r3, r2
 8009630:	2203      	movs	r2, #3
 8009632:	701a      	strb	r2, [r3, #0]
  idx++;
 8009634:	7dfb      	ldrb	r3, [r7, #23]
 8009636:	3301      	adds	r3, #1
 8009638:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800963a:	e013      	b.n	8009664 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800963c:	7dfb      	ldrb	r3, [r7, #23]
 800963e:	68ba      	ldr	r2, [r7, #8]
 8009640:	4413      	add	r3, r2
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	7812      	ldrb	r2, [r2, #0]
 8009646:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	3301      	adds	r3, #1
 800964c:	613b      	str	r3, [r7, #16]
    idx++;
 800964e:	7dfb      	ldrb	r3, [r7, #23]
 8009650:	3301      	adds	r3, #1
 8009652:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009654:	7dfb      	ldrb	r3, [r7, #23]
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	4413      	add	r3, r2
 800965a:	2200      	movs	r2, #0
 800965c:	701a      	strb	r2, [r3, #0]
    idx++;
 800965e:	7dfb      	ldrb	r3, [r7, #23]
 8009660:	3301      	adds	r3, #1
 8009662:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1e7      	bne.n	800963c <USBD_GetString+0x52>
 800966c:	e000      	b.n	8009670 <USBD_GetString+0x86>
    return;
 800966e:	bf00      	nop
  }
}
 8009670:	3718      	adds	r7, #24
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009676:	b480      	push	{r7}
 8009678:	b085      	sub	sp, #20
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800967e:	2300      	movs	r3, #0
 8009680:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009686:	e005      	b.n	8009694 <USBD_GetLen+0x1e>
  {
    len++;
 8009688:	7bfb      	ldrb	r3, [r7, #15]
 800968a:	3301      	adds	r3, #1
 800968c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	3301      	adds	r3, #1
 8009692:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1f5      	bne.n	8009688 <USBD_GetLen+0x12>
  }

  return len;
 800969c:	7bfb      	ldrb	r3, [r7, #15]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3714      	adds	r7, #20
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b084      	sub	sp, #16
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	60f8      	str	r0, [r7, #12]
 80096b2:	60b9      	str	r1, [r7, #8]
 80096b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2202      	movs	r2, #2
 80096ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	2100      	movs	r1, #0
 80096d0:	68f8      	ldr	r0, [r7, #12]
 80096d2:	f000 fd05 	bl	800a0e0 <USBD_LL_Transmit>

  return USBD_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	2100      	movs	r1, #0
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f000 fcf4 	bl	800a0e0 <USBD_LL_Transmit>

  return USBD_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b084      	sub	sp, #16
 8009706:	af00      	add	r7, sp, #0
 8009708:	60f8      	str	r0, [r7, #12]
 800970a:	60b9      	str	r1, [r7, #8]
 800970c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2203      	movs	r2, #3
 8009712:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68ba      	ldr	r2, [r7, #8]
 800972a:	2100      	movs	r1, #0
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f000 fd0f 	bl	800a150 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	68ba      	ldr	r2, [r7, #8]
 800974c:	2100      	movs	r1, #0
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f000 fcfe 	bl	800a150 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	3710      	adds	r7, #16
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b082      	sub	sp, #8
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2204      	movs	r2, #4
 800976a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800976e:	2300      	movs	r3, #0
 8009770:	2200      	movs	r2, #0
 8009772:	2100      	movs	r1, #0
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fcb3 	bl	800a0e0 <USBD_LL_Transmit>

  return USBD_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2205      	movs	r2, #5
 8009790:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009794:	2300      	movs	r3, #0
 8009796:	2200      	movs	r2, #0
 8009798:	2100      	movs	r1, #0
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 fcd8 	bl	800a150 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
	...

080097ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80097b0:	2200      	movs	r2, #0
 80097b2:	4912      	ldr	r1, [pc, #72]	; (80097fc <MX_USB_DEVICE_Init+0x50>)
 80097b4:	4812      	ldr	r0, [pc, #72]	; (8009800 <MX_USB_DEVICE_Init+0x54>)
 80097b6:	f7fe fed9 	bl	800856c <USBD_Init>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d001      	beq.n	80097c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80097c0:	f7f7 f899 	bl	80008f6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80097c4:	490f      	ldr	r1, [pc, #60]	; (8009804 <MX_USB_DEVICE_Init+0x58>)
 80097c6:	480e      	ldr	r0, [pc, #56]	; (8009800 <MX_USB_DEVICE_Init+0x54>)
 80097c8:	f7fe ff00 	bl	80085cc <USBD_RegisterClass>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80097d2:	f7f7 f890 	bl	80008f6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80097d6:	490c      	ldr	r1, [pc, #48]	; (8009808 <MX_USB_DEVICE_Init+0x5c>)
 80097d8:	4809      	ldr	r0, [pc, #36]	; (8009800 <MX_USB_DEVICE_Init+0x54>)
 80097da:	f7fe fe51 	bl	8008480 <USBD_CDC_RegisterInterface>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d001      	beq.n	80097e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80097e4:	f7f7 f887 	bl	80008f6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80097e8:	4805      	ldr	r0, [pc, #20]	; (8009800 <MX_USB_DEVICE_Init+0x54>)
 80097ea:	f7fe ff16 	bl	800861a <USBD_Start>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80097f4:	f7f7 f87f 	bl	80008f6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80097f8:	bf00      	nop
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	20000130 	.word	0x20000130
 8009800:	200003d8 	.word	0x200003d8
 8009804:	20000018 	.word	0x20000018
 8009808:	2000011c 	.word	0x2000011c

0800980c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009810:	2200      	movs	r2, #0
 8009812:	4905      	ldr	r1, [pc, #20]	; (8009828 <CDC_Init_FS+0x1c>)
 8009814:	4805      	ldr	r0, [pc, #20]	; (800982c <CDC_Init_FS+0x20>)
 8009816:	f7fe fe48 	bl	80084aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800981a:	4905      	ldr	r1, [pc, #20]	; (8009830 <CDC_Init_FS+0x24>)
 800981c:	4803      	ldr	r0, [pc, #12]	; (800982c <CDC_Init_FS+0x20>)
 800981e:	f7fe fe62 	bl	80084e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009822:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009824:	4618      	mov	r0, r3
 8009826:	bd80      	pop	{r7, pc}
 8009828:	20000a90 	.word	0x20000a90
 800982c:	200003d8 	.word	0x200003d8
 8009830:	200006a8 	.word	0x200006a8

08009834 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009834:	b480      	push	{r7}
 8009836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009838:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800983a:	4618      	mov	r0, r3
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	4603      	mov	r3, r0
 800984c:	6039      	str	r1, [r7, #0]
 800984e:	71fb      	strb	r3, [r7, #7]
 8009850:	4613      	mov	r3, r2
 8009852:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009854:	79fb      	ldrb	r3, [r7, #7]
 8009856:	2b23      	cmp	r3, #35	; 0x23
 8009858:	d84a      	bhi.n	80098f0 <CDC_Control_FS+0xac>
 800985a:	a201      	add	r2, pc, #4	; (adr r2, 8009860 <CDC_Control_FS+0x1c>)
 800985c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009860:	080098f1 	.word	0x080098f1
 8009864:	080098f1 	.word	0x080098f1
 8009868:	080098f1 	.word	0x080098f1
 800986c:	080098f1 	.word	0x080098f1
 8009870:	080098f1 	.word	0x080098f1
 8009874:	080098f1 	.word	0x080098f1
 8009878:	080098f1 	.word	0x080098f1
 800987c:	080098f1 	.word	0x080098f1
 8009880:	080098f1 	.word	0x080098f1
 8009884:	080098f1 	.word	0x080098f1
 8009888:	080098f1 	.word	0x080098f1
 800988c:	080098f1 	.word	0x080098f1
 8009890:	080098f1 	.word	0x080098f1
 8009894:	080098f1 	.word	0x080098f1
 8009898:	080098f1 	.word	0x080098f1
 800989c:	080098f1 	.word	0x080098f1
 80098a0:	080098f1 	.word	0x080098f1
 80098a4:	080098f1 	.word	0x080098f1
 80098a8:	080098f1 	.word	0x080098f1
 80098ac:	080098f1 	.word	0x080098f1
 80098b0:	080098f1 	.word	0x080098f1
 80098b4:	080098f1 	.word	0x080098f1
 80098b8:	080098f1 	.word	0x080098f1
 80098bc:	080098f1 	.word	0x080098f1
 80098c0:	080098f1 	.word	0x080098f1
 80098c4:	080098f1 	.word	0x080098f1
 80098c8:	080098f1 	.word	0x080098f1
 80098cc:	080098f1 	.word	0x080098f1
 80098d0:	080098f1 	.word	0x080098f1
 80098d4:	080098f1 	.word	0x080098f1
 80098d8:	080098f1 	.word	0x080098f1
 80098dc:	080098f1 	.word	0x080098f1
 80098e0:	080098f1 	.word	0x080098f1
 80098e4:	080098f1 	.word	0x080098f1
 80098e8:	080098f1 	.word	0x080098f1
 80098ec:	080098f1 	.word	0x080098f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80098f0:	bf00      	nop
  }

  return (USBD_OK);
 80098f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800990a:	6879      	ldr	r1, [r7, #4]
 800990c:	4805      	ldr	r0, [pc, #20]	; (8009924 <CDC_Receive_FS+0x24>)
 800990e:	f7fe fdea 	bl	80084e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009912:	4804      	ldr	r0, [pc, #16]	; (8009924 <CDC_Receive_FS+0x24>)
 8009914:	f7fe fe00 	bl	8008518 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009918:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800991a:	4618      	mov	r0, r3
 800991c:	3708      	adds	r7, #8
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	200003d8 	.word	0x200003d8

08009928 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009928:	b480      	push	{r7}
 800992a:	b087      	sub	sp, #28
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	4613      	mov	r3, r2
 8009934:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800993a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800993e:	4618      	mov	r0, r3
 8009940:	371c      	adds	r7, #28
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr
	...

0800994c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	4603      	mov	r3, r0
 8009954:	6039      	str	r1, [r7, #0]
 8009956:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	2212      	movs	r2, #18
 800995c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800995e:	4b03      	ldr	r3, [pc, #12]	; (800996c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009960:	4618      	mov	r0, r3
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr
 800996c:	20000150 	.word	0x20000150

08009970 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	4603      	mov	r3, r0
 8009978:	6039      	str	r1, [r7, #0]
 800997a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	2204      	movs	r2, #4
 8009980:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009982:	4b03      	ldr	r3, [pc, #12]	; (8009990 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009984:	4618      	mov	r0, r3
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr
 8009990:	20000170 	.word	0x20000170

08009994 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	4603      	mov	r3, r0
 800999c:	6039      	str	r1, [r7, #0]
 800999e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099a0:	79fb      	ldrb	r3, [r7, #7]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d105      	bne.n	80099b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099a6:	683a      	ldr	r2, [r7, #0]
 80099a8:	4907      	ldr	r1, [pc, #28]	; (80099c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80099aa:	4808      	ldr	r0, [pc, #32]	; (80099cc <USBD_FS_ProductStrDescriptor+0x38>)
 80099ac:	f7ff fe1d 	bl	80095ea <USBD_GetString>
 80099b0:	e004      	b.n	80099bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099b2:	683a      	ldr	r2, [r7, #0]
 80099b4:	4904      	ldr	r1, [pc, #16]	; (80099c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80099b6:	4805      	ldr	r0, [pc, #20]	; (80099cc <USBD_FS_ProductStrDescriptor+0x38>)
 80099b8:	f7ff fe17 	bl	80095ea <USBD_GetString>
  }
  return USBD_StrDesc;
 80099bc:	4b02      	ldr	r3, [pc, #8]	; (80099c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3708      	adds	r7, #8
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	20000e78 	.word	0x20000e78
 80099cc:	0800a300 	.word	0x0800a300

080099d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	4603      	mov	r3, r0
 80099d8:	6039      	str	r1, [r7, #0]
 80099da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80099dc:	683a      	ldr	r2, [r7, #0]
 80099de:	4904      	ldr	r1, [pc, #16]	; (80099f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80099e0:	4804      	ldr	r0, [pc, #16]	; (80099f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80099e2:	f7ff fe02 	bl	80095ea <USBD_GetString>
  return USBD_StrDesc;
 80099e6:	4b02      	ldr	r3, [pc, #8]	; (80099f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	20000e78 	.word	0x20000e78
 80099f4:	0800a318 	.word	0x0800a318

080099f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	6039      	str	r1, [r7, #0]
 8009a02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	221a      	movs	r2, #26
 8009a08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009a0a:	f000 f855 	bl	8009ab8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009a0e:	4b02      	ldr	r3, [pc, #8]	; (8009a18 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	20000174 	.word	0x20000174

08009a1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	4603      	mov	r3, r0
 8009a24:	6039      	str	r1, [r7, #0]
 8009a26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009a28:	79fb      	ldrb	r3, [r7, #7]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d105      	bne.n	8009a3a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a2e:	683a      	ldr	r2, [r7, #0]
 8009a30:	4907      	ldr	r1, [pc, #28]	; (8009a50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a32:	4808      	ldr	r0, [pc, #32]	; (8009a54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a34:	f7ff fdd9 	bl	80095ea <USBD_GetString>
 8009a38:	e004      	b.n	8009a44 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a3a:	683a      	ldr	r2, [r7, #0]
 8009a3c:	4904      	ldr	r1, [pc, #16]	; (8009a50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a3e:	4805      	ldr	r0, [pc, #20]	; (8009a54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a40:	f7ff fdd3 	bl	80095ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a44:	4b02      	ldr	r3, [pc, #8]	; (8009a50 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3708      	adds	r7, #8
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	20000e78 	.word	0x20000e78
 8009a54:	0800a32c 	.word	0x0800a32c

08009a58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	4603      	mov	r3, r0
 8009a60:	6039      	str	r1, [r7, #0]
 8009a62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a64:	79fb      	ldrb	r3, [r7, #7]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d105      	bne.n	8009a76 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a6a:	683a      	ldr	r2, [r7, #0]
 8009a6c:	4907      	ldr	r1, [pc, #28]	; (8009a8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a6e:	4808      	ldr	r0, [pc, #32]	; (8009a90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a70:	f7ff fdbb 	bl	80095ea <USBD_GetString>
 8009a74:	e004      	b.n	8009a80 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a76:	683a      	ldr	r2, [r7, #0]
 8009a78:	4904      	ldr	r1, [pc, #16]	; (8009a8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a7a:	4805      	ldr	r0, [pc, #20]	; (8009a90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a7c:	f7ff fdb5 	bl	80095ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a80:	4b02      	ldr	r3, [pc, #8]	; (8009a8c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	20000e78 	.word	0x20000e78
 8009a90:	0800a338 	.word	0x0800a338

08009a94 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	6039      	str	r1, [r7, #0]
 8009a9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	220c      	movs	r2, #12
 8009aa4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009aa6:	4b03      	ldr	r3, [pc, #12]	; (8009ab4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr
 8009ab4:	20000164 	.word	0x20000164

08009ab8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009abe:	4b0f      	ldr	r3, [pc, #60]	; (8009afc <Get_SerialNum+0x44>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ac4:	4b0e      	ldr	r3, [pc, #56]	; (8009b00 <Get_SerialNum+0x48>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009aca:	4b0e      	ldr	r3, [pc, #56]	; (8009b04 <Get_SerialNum+0x4c>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d009      	beq.n	8009af2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ade:	2208      	movs	r2, #8
 8009ae0:	4909      	ldr	r1, [pc, #36]	; (8009b08 <Get_SerialNum+0x50>)
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f000 f814 	bl	8009b10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ae8:	2204      	movs	r2, #4
 8009aea:	4908      	ldr	r1, [pc, #32]	; (8009b0c <Get_SerialNum+0x54>)
 8009aec:	68b8      	ldr	r0, [r7, #8]
 8009aee:	f000 f80f 	bl	8009b10 <IntToUnicode>
  }
}
 8009af2:	bf00      	nop
 8009af4:	3710      	adds	r7, #16
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	1fff7590 	.word	0x1fff7590
 8009b00:	1fff7594 	.word	0x1fff7594
 8009b04:	1fff7598 	.word	0x1fff7598
 8009b08:	20000176 	.word	0x20000176
 8009b0c:	20000186 	.word	0x20000186

08009b10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b087      	sub	sp, #28
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009b22:	2300      	movs	r3, #0
 8009b24:	75fb      	strb	r3, [r7, #23]
 8009b26:	e027      	b.n	8009b78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	0f1b      	lsrs	r3, r3, #28
 8009b2c:	2b09      	cmp	r3, #9
 8009b2e:	d80b      	bhi.n	8009b48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	0f1b      	lsrs	r3, r3, #28
 8009b34:	b2da      	uxtb	r2, r3
 8009b36:	7dfb      	ldrb	r3, [r7, #23]
 8009b38:	005b      	lsls	r3, r3, #1
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	440b      	add	r3, r1
 8009b40:	3230      	adds	r2, #48	; 0x30
 8009b42:	b2d2      	uxtb	r2, r2
 8009b44:	701a      	strb	r2, [r3, #0]
 8009b46:	e00a      	b.n	8009b5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	0f1b      	lsrs	r3, r3, #28
 8009b4c:	b2da      	uxtb	r2, r3
 8009b4e:	7dfb      	ldrb	r3, [r7, #23]
 8009b50:	005b      	lsls	r3, r3, #1
 8009b52:	4619      	mov	r1, r3
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	440b      	add	r3, r1
 8009b58:	3237      	adds	r2, #55	; 0x37
 8009b5a:	b2d2      	uxtb	r2, r2
 8009b5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	011b      	lsls	r3, r3, #4
 8009b62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009b64:	7dfb      	ldrb	r3, [r7, #23]
 8009b66:	005b      	lsls	r3, r3, #1
 8009b68:	3301      	adds	r3, #1
 8009b6a:	68ba      	ldr	r2, [r7, #8]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	2200      	movs	r2, #0
 8009b70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b72:	7dfb      	ldrb	r3, [r7, #23]
 8009b74:	3301      	adds	r3, #1
 8009b76:	75fb      	strb	r3, [r7, #23]
 8009b78:	7dfa      	ldrb	r2, [r7, #23]
 8009b7a:	79fb      	ldrb	r3, [r7, #7]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d3d3      	bcc.n	8009b28 <IntToUnicode+0x18>
  }
}
 8009b80:	bf00      	nop
 8009b82:	bf00      	nop
 8009b84:	371c      	adds	r7, #28
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
	...

08009b90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a0d      	ldr	r2, [pc, #52]	; (8009bd4 <HAL_PCD_MspInit+0x44>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d113      	bne.n	8009bca <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009ba2:	4b0d      	ldr	r3, [pc, #52]	; (8009bd8 <HAL_PCD_MspInit+0x48>)
 8009ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ba6:	4a0c      	ldr	r2, [pc, #48]	; (8009bd8 <HAL_PCD_MspInit+0x48>)
 8009ba8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009bac:	6593      	str	r3, [r2, #88]	; 0x58
 8009bae:	4b0a      	ldr	r3, [pc, #40]	; (8009bd8 <HAL_PCD_MspInit+0x48>)
 8009bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009bb6:	60fb      	str	r3, [r7, #12]
 8009bb8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8009bba:	2200      	movs	r2, #0
 8009bbc:	2100      	movs	r1, #0
 8009bbe:	2043      	movs	r0, #67	; 0x43
 8009bc0:	f7f8 f84f 	bl	8001c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8009bc4:	2043      	movs	r0, #67	; 0x43
 8009bc6:	f7f8 f868 	bl	8001c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009bca:	bf00      	nop
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	40006800 	.word	0x40006800
 8009bd8:	40021000 	.word	0x40021000

08009bdc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	4610      	mov	r0, r2
 8009bf4:	f7fe fd5c 	bl	80086b0 <USBD_LL_SetupStage>
}
 8009bf8:	bf00      	nop
 8009bfa:	3708      	adds	r7, #8
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	460b      	mov	r3, r1
 8009c0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 8009c12:	78fa      	ldrb	r2, [r7, #3]
 8009c14:	6879      	ldr	r1, [r7, #4]
 8009c16:	4613      	mov	r3, r2
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	4413      	add	r3, r2
 8009c1c:	00db      	lsls	r3, r3, #3
 8009c1e:	440b      	add	r3, r1
 8009c20:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	78fb      	ldrb	r3, [r7, #3]
 8009c28:	4619      	mov	r1, r3
 8009c2a:	f7fe fd96 	bl	800875a <USBD_LL_DataOutStage>
}
 8009c2e:	bf00      	nop
 8009c30:	3708      	adds	r7, #8
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b082      	sub	sp, #8
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
 8009c3e:	460b      	mov	r3, r1
 8009c40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 8009c48:	78fa      	ldrb	r2, [r7, #3]
 8009c4a:	6879      	ldr	r1, [r7, #4]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4413      	add	r3, r2
 8009c52:	00db      	lsls	r3, r3, #3
 8009c54:	440b      	add	r3, r1
 8009c56:	3340      	adds	r3, #64	; 0x40
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	78fb      	ldrb	r3, [r7, #3]
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	f7fe fddf 	bl	8008820 <USBD_LL_DataInStage>
}
 8009c62:	bf00      	nop
 8009c64:	3708      	adds	r7, #8
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b082      	sub	sp, #8
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7fe fef3 	bl	8008a64 <USBD_LL_SOF>
}
 8009c7e:	bf00      	nop
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b084      	sub	sp, #16
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	d001      	beq.n	8009c9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009c9a:	f7f6 fe2c 	bl	80008f6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8009ca4:	7bfa      	ldrb	r2, [r7, #15]
 8009ca6:	4611      	mov	r1, r2
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7fe fe9d 	bl	80089e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7fe fe49 	bl	800894c <USBD_LL_Reset>
}
 8009cba:	bf00      	nop
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
	...

08009cc4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7fe fe98 	bl	8008a08 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	699b      	ldr	r3, [r3, #24]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d005      	beq.n	8009cec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ce0:	4b04      	ldr	r3, [pc, #16]	; (8009cf4 <HAL_PCD_SuspendCallback+0x30>)
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	4a03      	ldr	r2, [pc, #12]	; (8009cf4 <HAL_PCD_SuspendCallback+0x30>)
 8009ce6:	f043 0306 	orr.w	r3, r3, #6
 8009cea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009cec:	bf00      	nop
 8009cee:	3708      	adds	r7, #8
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	e000ed00 	.word	0xe000ed00

08009cf8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	699b      	ldr	r3, [r3, #24]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d007      	beq.n	8009d18 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d08:	4b08      	ldr	r3, [pc, #32]	; (8009d2c <HAL_PCD_ResumeCallback+0x34>)
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	4a07      	ldr	r2, [pc, #28]	; (8009d2c <HAL_PCD_ResumeCallback+0x34>)
 8009d0e:	f023 0306 	bic.w	r3, r3, #6
 8009d12:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009d14:	f000 fab6 	bl	800a284 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fe fe88 	bl	8008a34 <USBD_LL_Resume>
}
 8009d24:	bf00      	nop
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	e000ed00 	.word	0xe000ed00

08009d30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009d38:	f7fa fada 	bl	80042f0 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009d3c:	4a2b      	ldr	r2, [pc, #172]	; (8009dec <USBD_LL_Init+0xbc>)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a29      	ldr	r2, [pc, #164]	; (8009dec <USBD_LL_Init+0xbc>)
 8009d48:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009d4c:	4b27      	ldr	r3, [pc, #156]	; (8009dec <USBD_LL_Init+0xbc>)
 8009d4e:	4a28      	ldr	r2, [pc, #160]	; (8009df0 <USBD_LL_Init+0xc0>)
 8009d50:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009d52:	4b26      	ldr	r3, [pc, #152]	; (8009dec <USBD_LL_Init+0xbc>)
 8009d54:	2208      	movs	r2, #8
 8009d56:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009d58:	4b24      	ldr	r3, [pc, #144]	; (8009dec <USBD_LL_Init+0xbc>)
 8009d5a:	2202      	movs	r2, #2
 8009d5c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009d5e:	4b23      	ldr	r3, [pc, #140]	; (8009dec <USBD_LL_Init+0xbc>)
 8009d60:	2202      	movs	r2, #2
 8009d62:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009d64:	4b21      	ldr	r3, [pc, #132]	; (8009dec <USBD_LL_Init+0xbc>)
 8009d66:	2200      	movs	r2, #0
 8009d68:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009d6a:	4b20      	ldr	r3, [pc, #128]	; (8009dec <USBD_LL_Init+0xbc>)
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009d70:	4b1e      	ldr	r3, [pc, #120]	; (8009dec <USBD_LL_Init+0xbc>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009d76:	4b1d      	ldr	r3, [pc, #116]	; (8009dec <USBD_LL_Init+0xbc>)
 8009d78:	2200      	movs	r2, #0
 8009d7a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009d7c:	481b      	ldr	r0, [pc, #108]	; (8009dec <USBD_LL_Init+0xbc>)
 8009d7e:	f7f8 fcc7 	bl	8002710 <HAL_PCD_Init>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d001      	beq.n	8009d8c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009d88:	f7f6 fdb5 	bl	80008f6 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d92:	2318      	movs	r3, #24
 8009d94:	2200      	movs	r2, #0
 8009d96:	2100      	movs	r1, #0
 8009d98:	f7fa f9d7 	bl	800414a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009da2:	2358      	movs	r3, #88	; 0x58
 8009da4:	2200      	movs	r2, #0
 8009da6:	2180      	movs	r1, #128	; 0x80
 8009da8:	f7fa f9cf 	bl	800414a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009db2:	23c0      	movs	r3, #192	; 0xc0
 8009db4:	2200      	movs	r2, #0
 8009db6:	2181      	movs	r1, #129	; 0x81
 8009db8:	f7fa f9c7 	bl	800414a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009dc2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	2101      	movs	r1, #1
 8009dca:	f7fa f9be 	bl	800414a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009dd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dd8:	2200      	movs	r2, #0
 8009dda:	2182      	movs	r1, #130	; 0x82
 8009ddc:	f7fa f9b5 	bl	800414a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3708      	adds	r7, #8
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	20001078 	.word	0x20001078
 8009df0:	40006800 	.word	0x40006800

08009df4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e00:	2300      	movs	r3, #0
 8009e02:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7f8 fd97 	bl	800293e <HAL_PCD_Start>
 8009e10:	4603      	mov	r3, r0
 8009e12:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009e14:	7bbb      	ldrb	r3, [r7, #14]
 8009e16:	2b03      	cmp	r3, #3
 8009e18:	d816      	bhi.n	8009e48 <USBD_LL_Start+0x54>
 8009e1a:	a201      	add	r2, pc, #4	; (adr r2, 8009e20 <USBD_LL_Start+0x2c>)
 8009e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e20:	08009e31 	.word	0x08009e31
 8009e24:	08009e37 	.word	0x08009e37
 8009e28:	08009e3d 	.word	0x08009e3d
 8009e2c:	08009e43 	.word	0x08009e43
    case HAL_OK :
      usb_status = USBD_OK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	73fb      	strb	r3, [r7, #15]
    break;
 8009e34:	e00b      	b.n	8009e4e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e36:	2303      	movs	r3, #3
 8009e38:	73fb      	strb	r3, [r7, #15]
    break;
 8009e3a:	e008      	b.n	8009e4e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e40:	e005      	b.n	8009e4e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e42:	2303      	movs	r3, #3
 8009e44:	73fb      	strb	r3, [r7, #15]
    break;
 8009e46:	e002      	b.n	8009e4e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009e48:	2303      	movs	r3, #3
 8009e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e4c:	bf00      	nop
  }
  return usb_status;
 8009e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3710      	adds	r7, #16
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	4608      	mov	r0, r1
 8009e62:	4611      	mov	r1, r2
 8009e64:	461a      	mov	r2, r3
 8009e66:	4603      	mov	r3, r0
 8009e68:	70fb      	strb	r3, [r7, #3]
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	70bb      	strb	r3, [r7, #2]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e72:	2300      	movs	r3, #0
 8009e74:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e76:	2300      	movs	r3, #0
 8009e78:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e80:	78bb      	ldrb	r3, [r7, #2]
 8009e82:	883a      	ldrh	r2, [r7, #0]
 8009e84:	78f9      	ldrb	r1, [r7, #3]
 8009e86:	f7f8 fec8 	bl	8002c1a <HAL_PCD_EP_Open>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009e8e:	7bbb      	ldrb	r3, [r7, #14]
 8009e90:	2b03      	cmp	r3, #3
 8009e92:	d817      	bhi.n	8009ec4 <USBD_LL_OpenEP+0x6c>
 8009e94:	a201      	add	r2, pc, #4	; (adr r2, 8009e9c <USBD_LL_OpenEP+0x44>)
 8009e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e9a:	bf00      	nop
 8009e9c:	08009ead 	.word	0x08009ead
 8009ea0:	08009eb3 	.word	0x08009eb3
 8009ea4:	08009eb9 	.word	0x08009eb9
 8009ea8:	08009ebf 	.word	0x08009ebf
    case HAL_OK :
      usb_status = USBD_OK;
 8009eac:	2300      	movs	r3, #0
 8009eae:	73fb      	strb	r3, [r7, #15]
    break;
 8009eb0:	e00b      	b.n	8009eca <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	73fb      	strb	r3, [r7, #15]
    break;
 8009eb6:	e008      	b.n	8009eca <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	73fb      	strb	r3, [r7, #15]
    break;
 8009ebc:	e005      	b.n	8009eca <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ebe:	2303      	movs	r3, #3
 8009ec0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ec2:	e002      	b.n	8009eca <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009ec4:	2303      	movs	r3, #3
 8009ec6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ec8:	bf00      	nop
  }
  return usb_status;
 8009eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	460b      	mov	r3, r1
 8009ede:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009eee:	78fa      	ldrb	r2, [r7, #3]
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7f8 fef9 	bl	8002cea <HAL_PCD_EP_Close>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009efc:	7bbb      	ldrb	r3, [r7, #14]
 8009efe:	2b03      	cmp	r3, #3
 8009f00:	d816      	bhi.n	8009f30 <USBD_LL_CloseEP+0x5c>
 8009f02:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <USBD_LL_CloseEP+0x34>)
 8009f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f08:	08009f19 	.word	0x08009f19
 8009f0c:	08009f1f 	.word	0x08009f1f
 8009f10:	08009f25 	.word	0x08009f25
 8009f14:	08009f2b 	.word	0x08009f2b
    case HAL_OK :
      usb_status = USBD_OK;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f1c:	e00b      	b.n	8009f36 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f1e:	2303      	movs	r3, #3
 8009f20:	73fb      	strb	r3, [r7, #15]
    break;
 8009f22:	e008      	b.n	8009f36 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f24:	2301      	movs	r3, #1
 8009f26:	73fb      	strb	r3, [r7, #15]
    break;
 8009f28:	e005      	b.n	8009f36 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	73fb      	strb	r3, [r7, #15]
    break;
 8009f2e:	e002      	b.n	8009f36 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009f30:	2303      	movs	r3, #3
 8009f32:	73fb      	strb	r3, [r7, #15]
    break;
 8009f34:	bf00      	nop
  }
  return usb_status;
 8009f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3710      	adds	r7, #16
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	460b      	mov	r3, r1
 8009f4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f5a:	78fa      	ldrb	r2, [r7, #3]
 8009f5c:	4611      	mov	r1, r2
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7f8 ffa7 	bl	8002eb2 <HAL_PCD_EP_SetStall>
 8009f64:	4603      	mov	r3, r0
 8009f66:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009f68:	7bbb      	ldrb	r3, [r7, #14]
 8009f6a:	2b03      	cmp	r3, #3
 8009f6c:	d816      	bhi.n	8009f9c <USBD_LL_StallEP+0x5c>
 8009f6e:	a201      	add	r2, pc, #4	; (adr r2, 8009f74 <USBD_LL_StallEP+0x34>)
 8009f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f74:	08009f85 	.word	0x08009f85
 8009f78:	08009f8b 	.word	0x08009f8b
 8009f7c:	08009f91 	.word	0x08009f91
 8009f80:	08009f97 	.word	0x08009f97
    case HAL_OK :
      usb_status = USBD_OK;
 8009f84:	2300      	movs	r3, #0
 8009f86:	73fb      	strb	r3, [r7, #15]
    break;
 8009f88:	e00b      	b.n	8009fa2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f8a:	2303      	movs	r3, #3
 8009f8c:	73fb      	strb	r3, [r7, #15]
    break;
 8009f8e:	e008      	b.n	8009fa2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f90:	2301      	movs	r3, #1
 8009f92:	73fb      	strb	r3, [r7, #15]
    break;
 8009f94:	e005      	b.n	8009fa2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f96:	2303      	movs	r3, #3
 8009f98:	73fb      	strb	r3, [r7, #15]
    break;
 8009f9a:	e002      	b.n	8009fa2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009fa0:	bf00      	nop
  }
  return usb_status;
 8009fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009fc6:	78fa      	ldrb	r2, [r7, #3]
 8009fc8:	4611      	mov	r1, r2
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7f8 ffd3 	bl	8002f76 <HAL_PCD_EP_ClrStall>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009fd4:	7bbb      	ldrb	r3, [r7, #14]
 8009fd6:	2b03      	cmp	r3, #3
 8009fd8:	d816      	bhi.n	800a008 <USBD_LL_ClearStallEP+0x5c>
 8009fda:	a201      	add	r2, pc, #4	; (adr r2, 8009fe0 <USBD_LL_ClearStallEP+0x34>)
 8009fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe0:	08009ff1 	.word	0x08009ff1
 8009fe4:	08009ff7 	.word	0x08009ff7
 8009fe8:	08009ffd 	.word	0x08009ffd
 8009fec:	0800a003 	.word	0x0800a003
    case HAL_OK :
      usb_status = USBD_OK;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ff4:	e00b      	b.n	800a00e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ff6:	2303      	movs	r3, #3
 8009ff8:	73fb      	strb	r3, [r7, #15]
    break;
 8009ffa:	e008      	b.n	800a00e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	73fb      	strb	r3, [r7, #15]
    break;
 800a000:	e005      	b.n	800a00e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a002:	2303      	movs	r3, #3
 800a004:	73fb      	strb	r3, [r7, #15]
    break;
 800a006:	e002      	b.n	800a00e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a008:	2303      	movs	r3, #3
 800a00a:	73fb      	strb	r3, [r7, #15]
    break;
 800a00c:	bf00      	nop
  }
  return usb_status;
 800a00e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a010:	4618      	mov	r0, r3
 800a012:	3710      	adds	r7, #16
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	460b      	mov	r3, r1
 800a022:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a02a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a02c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a030:	2b00      	cmp	r3, #0
 800a032:	da0c      	bge.n	800a04e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a034:	78fb      	ldrb	r3, [r7, #3]
 800a036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a03a:	68f9      	ldr	r1, [r7, #12]
 800a03c:	1c5a      	adds	r2, r3, #1
 800a03e:	4613      	mov	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	4413      	add	r3, r2
 800a044:	00db      	lsls	r3, r3, #3
 800a046:	440b      	add	r3, r1
 800a048:	3306      	adds	r3, #6
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	e00b      	b.n	800a066 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a04e:	78fb      	ldrb	r3, [r7, #3]
 800a050:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a054:	68f9      	ldr	r1, [r7, #12]
 800a056:	4613      	mov	r3, r2
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	4413      	add	r3, r2
 800a05c:	00db      	lsls	r3, r3, #3
 800a05e:	440b      	add	r3, r1
 800a060:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800a064:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a066:	4618      	mov	r0, r3
 800a068:	3714      	adds	r7, #20
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
	...

0800a074 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	460b      	mov	r3, r1
 800a07e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a080:	2300      	movs	r3, #0
 800a082:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a084:	2300      	movs	r3, #0
 800a086:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a08e:	78fa      	ldrb	r2, [r7, #3]
 800a090:	4611      	mov	r1, r2
 800a092:	4618      	mov	r0, r3
 800a094:	f7f8 fd9c 	bl	8002bd0 <HAL_PCD_SetAddress>
 800a098:	4603      	mov	r3, r0
 800a09a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a09c:	7bbb      	ldrb	r3, [r7, #14]
 800a09e:	2b03      	cmp	r3, #3
 800a0a0:	d816      	bhi.n	800a0d0 <USBD_LL_SetUSBAddress+0x5c>
 800a0a2:	a201      	add	r2, pc, #4	; (adr r2, 800a0a8 <USBD_LL_SetUSBAddress+0x34>)
 800a0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a8:	0800a0b9 	.word	0x0800a0b9
 800a0ac:	0800a0bf 	.word	0x0800a0bf
 800a0b0:	0800a0c5 	.word	0x0800a0c5
 800a0b4:	0800a0cb 	.word	0x0800a0cb
    case HAL_OK :
      usb_status = USBD_OK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a0bc:	e00b      	b.n	800a0d6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	73fb      	strb	r3, [r7, #15]
    break;
 800a0c2:	e008      	b.n	800a0d6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a0c8:	e005      	b.n	800a0d6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a0ce:	e002      	b.n	800a0d6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a0d0:	2303      	movs	r3, #3
 800a0d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a0d4:	bf00      	nop
  }
  return usb_status;
 800a0d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3710      	adds	r7, #16
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b086      	sub	sp, #24
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	607a      	str	r2, [r7, #4]
 800a0ea:	603b      	str	r3, [r7, #0]
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a0fe:	7af9      	ldrb	r1, [r7, #11]
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	f7f8 fe91 	bl	8002e2a <HAL_PCD_EP_Transmit>
 800a108:	4603      	mov	r3, r0
 800a10a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a10c:	7dbb      	ldrb	r3, [r7, #22]
 800a10e:	2b03      	cmp	r3, #3
 800a110:	d816      	bhi.n	800a140 <USBD_LL_Transmit+0x60>
 800a112:	a201      	add	r2, pc, #4	; (adr r2, 800a118 <USBD_LL_Transmit+0x38>)
 800a114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a118:	0800a129 	.word	0x0800a129
 800a11c:	0800a12f 	.word	0x0800a12f
 800a120:	0800a135 	.word	0x0800a135
 800a124:	0800a13b 	.word	0x0800a13b
    case HAL_OK :
      usb_status = USBD_OK;
 800a128:	2300      	movs	r3, #0
 800a12a:	75fb      	strb	r3, [r7, #23]
    break;
 800a12c:	e00b      	b.n	800a146 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a12e:	2303      	movs	r3, #3
 800a130:	75fb      	strb	r3, [r7, #23]
    break;
 800a132:	e008      	b.n	800a146 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a134:	2301      	movs	r3, #1
 800a136:	75fb      	strb	r3, [r7, #23]
    break;
 800a138:	e005      	b.n	800a146 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a13a:	2303      	movs	r3, #3
 800a13c:	75fb      	strb	r3, [r7, #23]
    break;
 800a13e:	e002      	b.n	800a146 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800a140:	2303      	movs	r3, #3
 800a142:	75fb      	strb	r3, [r7, #23]
    break;
 800a144:	bf00      	nop
  }
  return usb_status;
 800a146:	7dfb      	ldrb	r3, [r7, #23]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3718      	adds	r7, #24
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b086      	sub	sp, #24
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	607a      	str	r2, [r7, #4]
 800a15a:	603b      	str	r3, [r7, #0]
 800a15c:	460b      	mov	r3, r1
 800a15e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a160:	2300      	movs	r3, #0
 800a162:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a164:	2300      	movs	r3, #0
 800a166:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a16e:	7af9      	ldrb	r1, [r7, #11]
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	f7f8 fe03 	bl	8002d7e <HAL_PCD_EP_Receive>
 800a178:	4603      	mov	r3, r0
 800a17a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a17c:	7dbb      	ldrb	r3, [r7, #22]
 800a17e:	2b03      	cmp	r3, #3
 800a180:	d816      	bhi.n	800a1b0 <USBD_LL_PrepareReceive+0x60>
 800a182:	a201      	add	r2, pc, #4	; (adr r2, 800a188 <USBD_LL_PrepareReceive+0x38>)
 800a184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a188:	0800a199 	.word	0x0800a199
 800a18c:	0800a19f 	.word	0x0800a19f
 800a190:	0800a1a5 	.word	0x0800a1a5
 800a194:	0800a1ab 	.word	0x0800a1ab
    case HAL_OK :
      usb_status = USBD_OK;
 800a198:	2300      	movs	r3, #0
 800a19a:	75fb      	strb	r3, [r7, #23]
    break;
 800a19c:	e00b      	b.n	800a1b6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a19e:	2303      	movs	r3, #3
 800a1a0:	75fb      	strb	r3, [r7, #23]
    break;
 800a1a2:	e008      	b.n	800a1b6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	75fb      	strb	r3, [r7, #23]
    break;
 800a1a8:	e005      	b.n	800a1b6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	75fb      	strb	r3, [r7, #23]
    break;
 800a1ae:	e002      	b.n	800a1b6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	75fb      	strb	r3, [r7, #23]
    break;
 800a1b4:	bf00      	nop
  }
  return usb_status;
 800a1b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3718      	adds	r7, #24
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1d2:	78fa      	ldrb	r2, [r7, #3]
 800a1d4:	4611      	mov	r1, r2
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7f8 fe0f 	bl	8002dfa <HAL_PCD_EP_GetRxCount>
 800a1dc:	4603      	mov	r3, r0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3708      	adds	r7, #8
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
	...

0800a1e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a1f4:	78fb      	ldrb	r3, [r7, #3]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d002      	beq.n	800a200 <HAL_PCDEx_LPM_Callback+0x18>
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d013      	beq.n	800a226 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a1fe:	e023      	b.n	800a248 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	699b      	ldr	r3, [r3, #24]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d007      	beq.n	800a218 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a208:	f000 f83c 	bl	800a284 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a20c:	4b10      	ldr	r3, [pc, #64]	; (800a250 <HAL_PCDEx_LPM_Callback+0x68>)
 800a20e:	691b      	ldr	r3, [r3, #16]
 800a210:	4a0f      	ldr	r2, [pc, #60]	; (800a250 <HAL_PCDEx_LPM_Callback+0x68>)
 800a212:	f023 0306 	bic.w	r3, r3, #6
 800a216:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800a21e:	4618      	mov	r0, r3
 800a220:	f7fe fc08 	bl	8008a34 <USBD_LL_Resume>
    break;
 800a224:	e010      	b.n	800a248 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7fe fbeb 	bl	8008a08 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	699b      	ldr	r3, [r3, #24]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d005      	beq.n	800a246 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a23a:	4b05      	ldr	r3, [pc, #20]	; (800a250 <HAL_PCDEx_LPM_Callback+0x68>)
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	4a04      	ldr	r2, [pc, #16]	; (800a250 <HAL_PCDEx_LPM_Callback+0x68>)
 800a240:	f043 0306 	orr.w	r3, r3, #6
 800a244:	6113      	str	r3, [r2, #16]
    break;
 800a246:	bf00      	nop
}
 800a248:	bf00      	nop
 800a24a:	3708      	adds	r7, #8
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	e000ed00 	.word	0xe000ed00

0800a254 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a25c:	4b03      	ldr	r3, [pc, #12]	; (800a26c <USBD_static_malloc+0x18>)
}
 800a25e:	4618      	mov	r0, r3
 800a260:	370c      	adds	r7, #12
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	20001374 	.word	0x20001374

0800a270 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]

}
 800a278:	bf00      	nop
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a288:	f7f6 fab5 	bl	80007f6 <SystemClock_Config>
}
 800a28c:	bf00      	nop
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <__libc_init_array>:
 800a290:	b570      	push	{r4, r5, r6, lr}
 800a292:	4d0d      	ldr	r5, [pc, #52]	; (800a2c8 <__libc_init_array+0x38>)
 800a294:	4c0d      	ldr	r4, [pc, #52]	; (800a2cc <__libc_init_array+0x3c>)
 800a296:	1b64      	subs	r4, r4, r5
 800a298:	10a4      	asrs	r4, r4, #2
 800a29a:	2600      	movs	r6, #0
 800a29c:	42a6      	cmp	r6, r4
 800a29e:	d109      	bne.n	800a2b4 <__libc_init_array+0x24>
 800a2a0:	4d0b      	ldr	r5, [pc, #44]	; (800a2d0 <__libc_init_array+0x40>)
 800a2a2:	4c0c      	ldr	r4, [pc, #48]	; (800a2d4 <__libc_init_array+0x44>)
 800a2a4:	f000 f820 	bl	800a2e8 <_init>
 800a2a8:	1b64      	subs	r4, r4, r5
 800a2aa:	10a4      	asrs	r4, r4, #2
 800a2ac:	2600      	movs	r6, #0
 800a2ae:	42a6      	cmp	r6, r4
 800a2b0:	d105      	bne.n	800a2be <__libc_init_array+0x2e>
 800a2b2:	bd70      	pop	{r4, r5, r6, pc}
 800a2b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2b8:	4798      	blx	r3
 800a2ba:	3601      	adds	r6, #1
 800a2bc:	e7ee      	b.n	800a29c <__libc_init_array+0xc>
 800a2be:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2c2:	4798      	blx	r3
 800a2c4:	3601      	adds	r6, #1
 800a2c6:	e7f2      	b.n	800a2ae <__libc_init_array+0x1e>
 800a2c8:	0800a388 	.word	0x0800a388
 800a2cc:	0800a388 	.word	0x0800a388
 800a2d0:	0800a388 	.word	0x0800a388
 800a2d4:	0800a38c 	.word	0x0800a38c

0800a2d8 <memset>:
 800a2d8:	4402      	add	r2, r0
 800a2da:	4603      	mov	r3, r0
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d100      	bne.n	800a2e2 <memset+0xa>
 800a2e0:	4770      	bx	lr
 800a2e2:	f803 1b01 	strb.w	r1, [r3], #1
 800a2e6:	e7f9      	b.n	800a2dc <memset+0x4>

0800a2e8 <_init>:
 800a2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ea:	bf00      	nop
 800a2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ee:	bc08      	pop	{r3}
 800a2f0:	469e      	mov	lr, r3
 800a2f2:	4770      	bx	lr

0800a2f4 <_fini>:
 800a2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f6:	bf00      	nop
 800a2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2fa:	bc08      	pop	{r3}
 800a2fc:	469e      	mov	lr, r3
 800a2fe:	4770      	bx	lr
